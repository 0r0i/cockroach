// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/storage/engine/mvcc.proto

#ifndef PROTOBUF_cockroach_2fstorage_2fengine_2fmvcc_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fstorage_2fengine_2fmvcc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/proto/data.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace storage {
namespace engine {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
void protobuf_AssignDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
void protobuf_ShutdownFile_cockroach_2fstorage_2fengine_2fmvcc_2eproto();

class MVCCValue;
class MVCCMetadata;

// ===================================================================

class MVCCValue : public ::google::protobuf::Message {
 public:
  MVCCValue();
  virtual ~MVCCValue();

  MVCCValue(const MVCCValue& from);

  inline MVCCValue& operator=(const MVCCValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVCCValue& default_instance();

  void Swap(MVCCValue* other);

  // implements Message ----------------------------------------------

  inline MVCCValue* New() const { return New(NULL); }

  MVCCValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVCCValue& from);
  void MergeFrom(const MVCCValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool deleted = 1;
  bool has_deleted() const;
  void clear_deleted();
  static const int kDeletedFieldNumber = 1;
  bool deleted() const;
  void set_deleted(bool value);

  // optional .cockroach.proto.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::cockroach::proto::Value& value() const;
  ::cockroach::proto::Value* mutable_value();
  ::cockroach::proto::Value* release_value();
  void set_allocated_value(::cockroach::proto::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.engine.MVCCValue)
 private:
  inline void set_has_deleted();
  inline void clear_has_deleted();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Value* value_;
  bool deleted_;
  friend void  protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fstorage_2fengine_2fmvcc_2eproto();

  void InitAsDefaultInstance();
  static MVCCValue* default_instance_;
};
// -------------------------------------------------------------------

class MVCCMetadata : public ::google::protobuf::Message {
 public:
  MVCCMetadata();
  virtual ~MVCCMetadata();

  MVCCMetadata(const MVCCMetadata& from);

  inline MVCCMetadata& operator=(const MVCCMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVCCMetadata& default_instance();

  void Swap(MVCCMetadata* other);

  // implements Message ----------------------------------------------

  inline MVCCMetadata* New() const { return New(NULL); }

  MVCCMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVCCMetadata& from);
  void MergeFrom(const MVCCMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVCCMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Transaction txn = 1;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  const ::cockroach::proto::Transaction& txn() const;
  ::cockroach::proto::Transaction* mutable_txn();
  ::cockroach::proto::Transaction* release_txn();
  void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // optional .cockroach.proto.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::cockroach::proto::Timestamp& timestamp() const;
  ::cockroach::proto::Timestamp* mutable_timestamp();
  ::cockroach::proto::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional bool deleted = 3;
  bool has_deleted() const;
  void clear_deleted();
  static const int kDeletedFieldNumber = 3;
  bool deleted() const;
  void set_deleted(bool value);

  // optional int64 key_bytes = 4;
  bool has_key_bytes() const;
  void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 4;
  ::google::protobuf::int64 key_bytes() const;
  void set_key_bytes(::google::protobuf::int64 value);

  // optional int64 val_bytes = 5;
  bool has_val_bytes() const;
  void clear_val_bytes();
  static const int kValBytesFieldNumber = 5;
  ::google::protobuf::int64 val_bytes() const;
  void set_val_bytes(::google::protobuf::int64 value);

  // optional .cockroach.proto.Value value = 6;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::cockroach::proto::Value& value() const;
  ::cockroach::proto::Value* mutable_value();
  ::cockroach::proto::Value* release_value();
  void set_allocated_value(::cockroach::proto::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.storage.engine.MVCCMetadata)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_deleted();
  inline void clear_has_deleted();
  inline void set_has_key_bytes();
  inline void clear_has_key_bytes();
  inline void set_has_val_bytes();
  inline void clear_has_val_bytes();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Transaction* txn_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 val_bytes_;
  ::cockroach::proto::Value* value_;
  bool deleted_;
  friend void  protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fstorage_2fengine_2fmvcc_2eproto();

  void InitAsDefaultInstance();
  static MVCCMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCValue

// optional bool deleted = 1;
inline bool MVCCValue::has_deleted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCValue::set_has_deleted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCValue::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCValue::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool MVCCValue::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCValue.deleted)
  return deleted_;
}
inline void MVCCValue::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCValue.deleted)
}

// optional .cockroach.proto.Value value = 2;
inline bool MVCCValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCValue::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& MVCCValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* MVCCValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCValue.value)
  return value_;
}
inline ::cockroach::proto::Value* MVCCValue::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void MVCCValue::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCValue.value)
}

// -------------------------------------------------------------------

// MVCCMetadata

// optional .cockroach.proto.Transaction txn = 1;
inline bool MVCCMetadata::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCMetadata::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCMetadata::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCMetadata::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& MVCCMetadata::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* MVCCMetadata::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::proto::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCMetadata.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* MVCCMetadata::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCMetadata.txn)
}

// optional .cockroach.proto.Timestamp timestamp = 2;
inline bool MVCCMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCMetadata::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& MVCCMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* MVCCMetadata::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::proto::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCMetadata.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* MVCCMetadata::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCMetadata.timestamp)
}

// optional bool deleted = 3;
inline bool MVCCMetadata::has_deleted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVCCMetadata::set_has_deleted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVCCMetadata::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVCCMetadata::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool MVCCMetadata::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.deleted)
  return deleted_;
}
inline void MVCCMetadata::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCMetadata.deleted)
}

// optional int64 key_bytes = 4;
inline bool MVCCMetadata::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MVCCMetadata::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MVCCMetadata::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MVCCMetadata::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.key_bytes)
  return key_bytes_;
}
inline void MVCCMetadata::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCMetadata.key_bytes)
}

// optional int64 val_bytes = 5;
inline bool MVCCMetadata::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MVCCMetadata::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MVCCMetadata::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MVCCMetadata::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.val_bytes)
  return val_bytes_;
}
inline void MVCCMetadata::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCMetadata.val_bytes)
}

// optional .cockroach.proto.Value value = 6;
inline bool MVCCMetadata::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MVCCMetadata::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MVCCMetadata::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MVCCMetadata::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& MVCCMetadata::value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* MVCCMetadata::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCMetadata.value)
  return value_;
}
inline ::cockroach::proto::Value* MVCCMetadata::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCMetadata.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine
}  // namespace storage
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fstorage_2fengine_2fmvcc_2eproto__INCLUDED
