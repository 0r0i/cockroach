// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/storage/engine/mvcc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/storage/engine/mvcc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace storage {
namespace engine {

namespace {

const ::google::protobuf::Descriptor* MVCCValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto() {
  protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/storage/engine/mvcc.proto");
  GOOGLE_CHECK(file != NULL);
  MVCCValue_descriptor_ = file->message_type(0);
  static const int MVCCValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, value_),
  };
  MVCCValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCValue_descriptor_,
      MVCCValue::default_instance_,
      MVCCValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, _internal_metadata_),
      -1);
  MVCCMetadata_descriptor_ = file->message_type(1);
  static const int MVCCMetadata_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, key_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, val_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, value_),
  };
  MVCCMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCMetadata_descriptor_,
      MVCCMetadata::default_instance_,
      MVCCMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCValue_descriptor_, &MVCCValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCMetadata_descriptor_, &MVCCMetadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fstorage_2fengine_2fmvcc_2eproto() {
  delete MVCCValue::default_instance_;
  delete MVCCValue_reflection_;
  delete MVCCMetadata::default_instance_;
  delete MVCCMetadata_reflection_;
}

void protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#cockroach/storage/engine/mvcc.proto\022\030c"
    "ockroach.storage.engine\032\032cockroach/proto"
    "/data.proto\032\024gogoproto/gogo.proto\"I\n\tMVC"
    "CValue\022\025\n\007deleted\030\001 \001(\010B\004\310\336\037\000\022%\n\005value\030\002"
    " \001(\0132\026.cockroach.proto.Value\"\336\001\n\014MVCCMet"
    "adata\022)\n\003txn\030\001 \001(\0132\034.cockroach.proto.Tra"
    "nsaction\0223\n\ttimestamp\030\002 \001(\0132\032.cockroach."
    "proto.TimestampB\004\310\336\037\000\022\025\n\007deleted\030\003 \001(\010B\004"
    "\310\336\037\000\022\027\n\tkey_bytes\030\004 \001(\003B\004\310\336\037\000\022\027\n\tval_byt"
    "es\030\005 \001(\003B\004\310\336\037\000\022%\n\005value\030\006 \001(\0132\026.cockroac"
    "h.proto.ValueB\024Z\006engine\340\342\036\001\310\342\036\001\320\342\036\001", 435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/storage/engine/mvcc.proto", &protobuf_RegisterTypes);
  MVCCValue::default_instance_ = new MVCCValue();
  MVCCMetadata::default_instance_ = new MVCCMetadata();
  MVCCValue::default_instance_->InitAsDefaultInstance();
  MVCCMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fstorage_2fengine_2fmvcc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fstorage_2fengine_2fmvcc_2eproto {
  StaticDescriptorInitializer_cockroach_2fstorage_2fengine_2fmvcc_2eproto() {
    protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  }
} static_descriptor_initializer_cockroach_2fstorage_2fengine_2fmvcc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MVCCValue::kDeletedFieldNumber;
const int MVCCValue::kValueFieldNumber;
#endif  // !_MSC_VER

MVCCValue::MVCCValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.MVCCValue)
}

void MVCCValue::InitAsDefaultInstance() {
  value_ = const_cast< ::cockroach::proto::Value*>(&::cockroach::proto::Value::default_instance());
}

MVCCValue::MVCCValue(const MVCCValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.MVCCValue)
}

void MVCCValue::SharedCtor() {
  _cached_size_ = 0;
  deleted_ = false;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCValue::~MVCCValue() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.MVCCValue)
  SharedDtor();
}

void MVCCValue::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void MVCCValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCValue_descriptor_;
}

const MVCCValue& MVCCValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  return *default_instance_;
}

MVCCValue* MVCCValue::default_instance_ = NULL;

MVCCValue* MVCCValue::New(::google::protobuf::Arena* arena) const {
  MVCCValue* n = new MVCCValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCValue::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    deleted_ = false;
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.MVCCValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool deleted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cockroach.proto.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.MVCCValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.MVCCValue)
  return false;
#undef DO_
}

void MVCCValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.MVCCValue)
  // optional bool deleted = 1;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->deleted(), output);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.MVCCValue)
}

::google::protobuf::uint8* MVCCValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.storage.engine.MVCCValue)
  // optional bool deleted = 1;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->deleted(), target);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.storage.engine.MVCCValue)
  return target;
}

int MVCCValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional bool deleted = 1;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional .cockroach.proto.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MVCCValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVCCValue::MergeFrom(const MVCCValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::proto::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCValue::CopyFrom(const MVCCValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCValue::IsInitialized() const {

  return true;
}

void MVCCValue::Swap(MVCCValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCValue::InternalSwap(MVCCValue* other) {
  std::swap(deleted_, other->deleted_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCValue_descriptor_;
  metadata.reflection = MVCCValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCValue

// optional bool deleted = 1;
bool MVCCValue::has_deleted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCValue::set_has_deleted() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCValue::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCValue::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
 bool MVCCValue::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCValue.deleted)
  return deleted_;
}
 void MVCCValue::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCValue.deleted)
}

// optional .cockroach.proto.Value value = 2;
bool MVCCValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCValue::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
 const ::cockroach::proto::Value& MVCCValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
 ::cockroach::proto::Value* MVCCValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCValue.value)
  return value_;
}
 ::cockroach::proto::Value* MVCCValue::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
 void MVCCValue::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MVCCMetadata::kTxnFieldNumber;
const int MVCCMetadata::kTimestampFieldNumber;
const int MVCCMetadata::kDeletedFieldNumber;
const int MVCCMetadata::kKeyBytesFieldNumber;
const int MVCCMetadata::kValBytesFieldNumber;
const int MVCCMetadata::kValueFieldNumber;
#endif  // !_MSC_VER

MVCCMetadata::MVCCMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.MVCCMetadata)
}

void MVCCMetadata::InitAsDefaultInstance() {
  txn_ = const_cast< ::cockroach::proto::Transaction*>(&::cockroach::proto::Transaction::default_instance());
  timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
  value_ = const_cast< ::cockroach::proto::Value*>(&::cockroach::proto::Value::default_instance());
}

MVCCMetadata::MVCCMetadata(const MVCCMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.MVCCMetadata)
}

void MVCCMetadata::SharedCtor() {
  _cached_size_ = 0;
  txn_ = NULL;
  timestamp_ = NULL;
  deleted_ = false;
  key_bytes_ = GOOGLE_LONGLONG(0);
  val_bytes_ = GOOGLE_LONGLONG(0);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCMetadata::~MVCCMetadata() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.MVCCMetadata)
  SharedDtor();
}

void MVCCMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete txn_;
    delete timestamp_;
    delete value_;
  }
}

void MVCCMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCMetadata_descriptor_;
}

const MVCCMetadata& MVCCMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fstorage_2fengine_2fmvcc_2eproto();
  return *default_instance_;
}

MVCCMetadata* MVCCMetadata::default_instance_ = NULL;

MVCCMetadata* MVCCMetadata::New(::google::protobuf::Arena* arena) const {
  MVCCMetadata* n = new MVCCMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCMetadata::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MVCCMetadata*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(key_bytes_, val_bytes_);
    if (has_txn()) {
      if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
    }
    deleted_ = false;
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.MVCCMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.Transaction txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 3;
      case 3: {
        if (tag == 24) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_bytes;
        break;
      }

      // optional int64 key_bytes = 4;
      case 4: {
        if (tag == 32) {
         parse_key_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_bytes_)));
          set_has_key_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_val_bytes;
        break;
      }

      // optional int64 val_bytes = 5;
      case 5: {
        if (tag == 40) {
         parse_val_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_bytes_)));
          set_has_val_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_value;
        break;
      }

      // optional .cockroach.proto.Value value = 6;
      case 6: {
        if (tag == 50) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.MVCCMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.MVCCMetadata)
  return false;
#undef DO_
}

void MVCCMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.MVCCMetadata)
  // optional .cockroach.proto.Transaction txn = 1;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txn_, output);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // optional bool deleted = 3;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deleted(), output);
  }

  // optional int64 key_bytes = 4;
  if (has_key_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->key_bytes(), output);
  }

  // optional int64 val_bytes = 5;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->val_bytes(), output);
  }

  // optional .cockroach.proto.Value value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.MVCCMetadata)
}

::google::protobuf::uint8* MVCCMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.storage.engine.MVCCMetadata)
  // optional .cockroach.proto.Transaction txn = 1;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->txn_, target);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->timestamp_, target);
  }

  // optional bool deleted = 3;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->deleted(), target);
  }

  // optional int64 key_bytes = 4;
  if (has_key_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->key_bytes(), target);
  }

  // optional int64 val_bytes = 5;
  if (has_val_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->val_bytes(), target);
  }

  // optional .cockroach.proto.Value value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.storage.engine.MVCCMetadata)
  return target;
}

int MVCCMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional .cockroach.proto.Transaction txn = 1;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txn_);
    }

    // optional .cockroach.proto.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

    // optional bool deleted = 3;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional int64 key_bytes = 4;
    if (has_key_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key_bytes());
    }

    // optional int64 val_bytes = 5;
    if (has_val_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_bytes());
    }

    // optional .cockroach.proto.Value value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MVCCMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCMetadata>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVCCMetadata::MergeFrom(const MVCCMetadata& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn()) {
      mutable_txn()->::cockroach::proto::Transaction::MergeFrom(from.txn());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_key_bytes()) {
      set_key_bytes(from.key_bytes());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::proto::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCMetadata::CopyFrom(const MVCCMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCMetadata::IsInitialized() const {

  return true;
}

void MVCCMetadata::Swap(MVCCMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCMetadata::InternalSwap(MVCCMetadata* other) {
  std::swap(txn_, other->txn_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(deleted_, other->deleted_);
  std::swap(key_bytes_, other->key_bytes_);
  std::swap(val_bytes_, other->val_bytes_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCMetadata_descriptor_;
  metadata.reflection = MVCCMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCMetadata

// optional .cockroach.proto.Transaction txn = 1;
bool MVCCMetadata::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCMetadata::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCMetadata::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCMetadata::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
 const ::cockroach::proto::Transaction& MVCCMetadata::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
 ::cockroach::proto::Transaction* MVCCMetadata::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::proto::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCMetadata.txn)
  return txn_;
}
 ::cockroach::proto::Transaction* MVCCMetadata::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
 void MVCCMetadata::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCMetadata.txn)
}

// optional .cockroach.proto.Timestamp timestamp = 2;
bool MVCCMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCMetadata::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
 const ::cockroach::proto::Timestamp& MVCCMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
 ::cockroach::proto::Timestamp* MVCCMetadata::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::proto::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCMetadata.timestamp)
  return timestamp_;
}
 ::cockroach::proto::Timestamp* MVCCMetadata::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
 void MVCCMetadata::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCMetadata.timestamp)
}

// optional bool deleted = 3;
bool MVCCMetadata::has_deleted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVCCMetadata::set_has_deleted() {
  _has_bits_[0] |= 0x00000004u;
}
void MVCCMetadata::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVCCMetadata::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
 bool MVCCMetadata::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.deleted)
  return deleted_;
}
 void MVCCMetadata::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCMetadata.deleted)
}

// optional int64 key_bytes = 4;
bool MVCCMetadata::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MVCCMetadata::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
void MVCCMetadata::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
void MVCCMetadata::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
 ::google::protobuf::int64 MVCCMetadata::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.key_bytes)
  return key_bytes_;
}
 void MVCCMetadata::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCMetadata.key_bytes)
}

// optional int64 val_bytes = 5;
bool MVCCMetadata::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MVCCMetadata::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void MVCCMetadata::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void MVCCMetadata::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
 ::google::protobuf::int64 MVCCMetadata::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.val_bytes)
  return val_bytes_;
}
 void MVCCMetadata::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.MVCCMetadata.val_bytes)
}

// optional .cockroach.proto.Value value = 6;
bool MVCCMetadata::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MVCCMetadata::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
void MVCCMetadata::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void MVCCMetadata::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
 const ::cockroach::proto::Value& MVCCMetadata::value() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.MVCCMetadata.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
 ::cockroach::proto::Value* MVCCMetadata::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.MVCCMetadata.value)
  return value_;
}
 ::cockroach::proto::Value* MVCCMetadata::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
 void MVCCMetadata::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.MVCCMetadata.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace engine
}  // namespace storage
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
