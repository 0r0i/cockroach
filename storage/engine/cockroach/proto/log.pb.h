// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/log.proto

#ifndef PROTOBUF_cockroach_2fproto_2flog_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cockroach_2fproto_2flog_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2flog_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2flog_2eproto();

class LogEntry;
class LogEntry_Arg;

// ===================================================================

class LogEntry_Arg : public ::google::protobuf::Message {
 public:
  LogEntry_Arg();
  virtual ~LogEntry_Arg();

  LogEntry_Arg(const LogEntry_Arg& from);

  inline LogEntry_Arg& operator=(const LogEntry_Arg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry_Arg& default_instance();

  void Swap(LogEntry_Arg* other);

  // implements Message ----------------------------------------------

  LogEntry_Arg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntry_Arg& from);
  void MergeFrom(const LogEntry_Arg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // optional bytes json = 3;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 3;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:cockroach.proto.LogEntry.Arg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_json();
  inline void clear_has_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* str_;
  ::std::string* json_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2flog_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2flog_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2flog_2eproto();

  void InitAsDefaultInstance();
  static LogEntry_Arg* default_instance_;
};
// -------------------------------------------------------------------

class LogEntry : public ::google::protobuf::Message {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  void Swap(LogEntry* other);

  // implements Message ----------------------------------------------

  LogEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LogEntry_Arg Arg;

  // accessors -------------------------------------------------------

  // optional int32 severity = 1;
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 1;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);

  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int32 thread_id = 3;
  inline bool has_thread_id() const;
  inline void clear_thread_id();
  static const int kThreadIdFieldNumber = 3;
  inline ::google::protobuf::int32 thread_id() const;
  inline void set_thread_id(::google::protobuf::int32 value);

  // optional string file = 4;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 4;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional int32 line = 5;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 5;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);

  // optional string format = 6;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 6;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // repeated .cockroach.proto.LogEntry.Arg args = 7;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 7;
  inline const ::cockroach::proto::LogEntry_Arg& args(int index) const;
  inline ::cockroach::proto::LogEntry_Arg* mutable_args(int index);
  inline ::cockroach::proto::LogEntry_Arg* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::LogEntry_Arg >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::LogEntry_Arg >*
      mutable_args();

  // optional int32 node_id = 8;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 8;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional int32 store_id = 9;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 9;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // optional int64 raft_id = 10;
  inline bool has_raft_id() const;
  inline void clear_raft_id();
  static const int kRaftIdFieldNumber = 10;
  inline ::google::protobuf::int64 raft_id() const;
  inline void set_raft_id(::google::protobuf::int64 value);

  // optional int32 method = 11;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 11;
  inline ::google::protobuf::int32 method() const;
  inline void set_method(::google::protobuf::int32 value);

  // optional bytes key = 12;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 12;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes stacks = 13;
  inline bool has_stacks() const;
  inline void clear_stacks();
  static const int kStacksFieldNumber = 13;
  inline const ::std::string& stacks() const;
  inline void set_stacks(const ::std::string& value);
  inline void set_stacks(const char* value);
  inline void set_stacks(const void* value, size_t size);
  inline ::std::string* mutable_stacks();
  inline ::std::string* release_stacks();
  inline void set_allocated_stacks(::std::string* stacks);

  // @@protoc_insertion_point(class_scope:cockroach.proto.LogEntry)
 private:
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_thread_id();
  inline void clear_has_thread_id();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_raft_id();
  inline void clear_has_raft_id();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_stacks();
  inline void clear_has_stacks();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 thread_id_;
  ::std::string* file_;
  ::std::string* format_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::LogEntry_Arg > args_;
  ::google::protobuf::int64 raft_id_;
  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 method_;
  ::std::string* key_;
  ::std::string* stacks_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2flog_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2flog_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2flog_2eproto();

  void InitAsDefaultInstance();
  static LogEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// LogEntry_Arg

// optional string type = 1;
inline bool LogEntry_Arg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry_Arg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogEntry_Arg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogEntry_Arg::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LogEntry_Arg::type() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.Arg.type)
  return *type_;
}
inline void LogEntry_Arg::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.Arg.type)
}
inline void LogEntry_Arg::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.LogEntry.Arg.type)
}
inline void LogEntry_Arg::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.LogEntry.Arg.type)
}
inline ::std::string* LogEntry_Arg::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.Arg.type)
  return type_;
}
inline ::std::string* LogEntry_Arg::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry_Arg::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.LogEntry.Arg.type)
}

// optional string str = 2;
inline bool LogEntry_Arg::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry_Arg::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogEntry_Arg::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogEntry_Arg::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& LogEntry_Arg::str() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.Arg.str)
  return *str_;
}
inline void LogEntry_Arg::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.Arg.str)
}
inline void LogEntry_Arg::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.LogEntry.Arg.str)
}
inline void LogEntry_Arg::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.LogEntry.Arg.str)
}
inline ::std::string* LogEntry_Arg::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.Arg.str)
  return str_;
}
inline ::std::string* LogEntry_Arg::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry_Arg::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.LogEntry.Arg.str)
}

// optional bytes json = 3;
inline bool LogEntry_Arg::has_json() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry_Arg::set_has_json() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogEntry_Arg::clear_has_json() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogEntry_Arg::clear_json() {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& LogEntry_Arg::json() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.Arg.json)
  return *json_;
}
inline void LogEntry_Arg::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.Arg.json)
}
inline void LogEntry_Arg::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.LogEntry.Arg.json)
}
inline void LogEntry_Arg::set_json(const void* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.LogEntry.Arg.json)
}
inline ::std::string* LogEntry_Arg::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.Arg.json)
  return json_;
}
inline ::std::string* LogEntry_Arg::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry_Arg::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.LogEntry.Arg.json)
}

// -------------------------------------------------------------------

// LogEntry

// optional int32 severity = 1;
inline bool LogEntry::has_severity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::set_has_severity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogEntry::clear_has_severity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogEntry::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 LogEntry::severity() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.severity)
  return severity_;
}
inline void LogEntry::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.severity)
}

// optional int64 time = 2;
inline bool LogEntry::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogEntry::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogEntry::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 LogEntry::time() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.time)
  return time_;
}
inline void LogEntry::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.time)
}

// optional int32 thread_id = 3;
inline bool LogEntry::has_thread_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::set_has_thread_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogEntry::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogEntry::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
inline ::google::protobuf::int32 LogEntry::thread_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.thread_id)
  return thread_id_;
}
inline void LogEntry::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.thread_id)
}

// optional string file = 4;
inline bool LogEntry::has_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogEntry::set_has_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogEntry::clear_has_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogEntry::clear_file() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& LogEntry::file() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.file)
  return *file_;
}
inline void LogEntry::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.file)
}
inline void LogEntry::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.LogEntry.file)
}
inline void LogEntry::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.LogEntry.file)
}
inline ::std::string* LogEntry::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.file)
  return file_;
}
inline ::std::string* LogEntry::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.LogEntry.file)
}

// optional int32 line = 5;
inline bool LogEntry::has_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogEntry::set_has_line() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogEntry::clear_has_line() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogEntry::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 LogEntry::line() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.line)
  return line_;
}
inline void LogEntry::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.line)
}

// optional string format = 6;
inline bool LogEntry::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogEntry::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogEntry::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogEntry::clear_format() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& LogEntry::format() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.format)
  return *format_;
}
inline void LogEntry::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.format)
}
inline void LogEntry::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.LogEntry.format)
}
inline void LogEntry::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.LogEntry.format)
}
inline ::std::string* LogEntry::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.format)
  return format_;
}
inline ::std::string* LogEntry::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.LogEntry.format)
}

// repeated .cockroach.proto.LogEntry.Arg args = 7;
inline int LogEntry::args_size() const {
  return args_.size();
}
inline void LogEntry::clear_args() {
  args_.Clear();
}
inline const ::cockroach::proto::LogEntry_Arg& LogEntry::args(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.args)
  return args_.Get(index);
}
inline ::cockroach::proto::LogEntry_Arg* LogEntry::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.args)
  return args_.Mutable(index);
}
inline ::cockroach::proto::LogEntry_Arg* LogEntry::add_args() {
  // @@protoc_insertion_point(field_add:cockroach.proto.LogEntry.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::LogEntry_Arg >&
LogEntry::args() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.LogEntry.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::LogEntry_Arg >*
LogEntry::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.LogEntry.args)
  return &args_;
}

// optional int32 node_id = 8;
inline bool LogEntry::has_node_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogEntry::set_has_node_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogEntry::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogEntry::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 LogEntry::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.node_id)
  return node_id_;
}
inline void LogEntry::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.node_id)
}

// optional int32 store_id = 9;
inline bool LogEntry::has_store_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogEntry::set_has_store_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogEntry::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogEntry::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 LogEntry::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.store_id)
  return store_id_;
}
inline void LogEntry::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.store_id)
}

// optional int64 raft_id = 10;
inline bool LogEntry::has_raft_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogEntry::set_has_raft_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogEntry::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogEntry::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
inline ::google::protobuf::int64 LogEntry::raft_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.raft_id)
  return raft_id_;
}
inline void LogEntry::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.raft_id)
}

// optional int32 method = 11;
inline bool LogEntry::has_method() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogEntry::set_has_method() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogEntry::clear_has_method() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogEntry::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::google::protobuf::int32 LogEntry::method() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.method)
  return method_;
}
inline void LogEntry::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.method)
}

// optional bytes key = 12;
inline bool LogEntry::has_key() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogEntry::set_has_key() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogEntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LogEntry::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.key)
  return *key_;
}
inline void LogEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.key)
}
inline void LogEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.LogEntry.key)
}
inline void LogEntry::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.LogEntry.key)
}
inline ::std::string* LogEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.key)
  return key_;
}
inline ::std::string* LogEntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.LogEntry.key)
}

// optional bytes stacks = 13;
inline bool LogEntry::has_stacks() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogEntry::set_has_stacks() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogEntry::clear_has_stacks() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogEntry::clear_stacks() {
  if (stacks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stacks_->clear();
  }
  clear_has_stacks();
}
inline const ::std::string& LogEntry::stacks() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.LogEntry.stacks)
  return *stacks_;
}
inline void LogEntry::set_stacks(const ::std::string& value) {
  set_has_stacks();
  if (stacks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stacks_ = new ::std::string;
  }
  stacks_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.LogEntry.stacks)
}
inline void LogEntry::set_stacks(const char* value) {
  set_has_stacks();
  if (stacks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stacks_ = new ::std::string;
  }
  stacks_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.LogEntry.stacks)
}
inline void LogEntry::set_stacks(const void* value, size_t size) {
  set_has_stacks();
  if (stacks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stacks_ = new ::std::string;
  }
  stacks_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.LogEntry.stacks)
}
inline ::std::string* LogEntry::mutable_stacks() {
  set_has_stacks();
  if (stacks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stacks_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.LogEntry.stacks)
  return stacks_;
}
inline ::std::string* LogEntry::release_stacks() {
  clear_has_stacks();
  if (stacks_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stacks_;
    stacks_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry::set_allocated_stacks(::std::string* stacks) {
  if (stacks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stacks_;
  }
  if (stacks) {
    set_has_stacks();
    stacks_ = stacks;
  } else {
    clear_has_stacks();
    stacks_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.LogEntry.stacks)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2flog_2eproto__INCLUDED
