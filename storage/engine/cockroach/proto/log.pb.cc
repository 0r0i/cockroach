// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntry_Arg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntry_Arg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2flog_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/log.proto");
  GOOGLE_CHECK(file != NULL);
  LogEntry_descriptor_ = file->message_type(0);
  static const int LogEntry_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, raft_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, stacks_),
  };
  LogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntry_descriptor_,
      LogEntry::default_instance_,
      LogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntry));
  LogEntry_Arg_descriptor_ = LogEntry_descriptor_->nested_type(0);
  static const int LogEntry_Arg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry_Arg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry_Arg, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry_Arg, json_),
  };
  LogEntry_Arg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntry_Arg_descriptor_,
      LogEntry_Arg::default_instance_,
      LogEntry_Arg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry_Arg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry_Arg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntry_Arg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntry_descriptor_, &LogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntry_Arg_descriptor_, &LogEntry_Arg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2flog_2eproto() {
  delete LogEntry::default_instance_;
  delete LogEntry_reflection_;
  delete LogEntry_Arg::default_instance_;
  delete LogEntry_Arg_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031cockroach/proto/log.proto\022\017cockroach.p"
    "roto\032\024gogoproto/gogo.proto\"\247\003\n\010LogEntry\022"
    "\026\n\010severity\030\001 \001(\005B\004\310\336\037\000\022\022\n\004time\030\002 \001(\003B\004\310"
    "\336\037\000\022#\n\tthread_id\030\003 \001(\005B\020\310\336\037\000\342\336\037\010ThreadID"
    "\022\022\n\004file\030\004 \001(\tB\004\310\336\037\000\022\022\n\004line\030\005 \001(\005B\004\310\336\037\000"
    "\022\024\n\006format\030\006 \001(\tB\004\310\336\037\000\0221\n\004args\030\007 \003(\0132\035.c"
    "ockroach.proto.LogEntry.ArgB\004\310\336\037\000\022\033\n\007nod"
    "e_id\030\010 \001(\005B\n\342\336\037\006NodeID\022\035\n\010store_id\030\t \001(\005"
    "B\013\342\336\037\007StoreID\022\033\n\007raft_id\030\n \001(\003B\n\342\336\037\006Raft"
    "ID\022\016\n\006method\030\013 \001(\005\022\030\n\003key\030\014 \001(\014B\013\310\336\037\000\332\336\037"
    "\003Key\022\024\n\006stacks\030\r \001(\014B\004\310\336\037\000\032@\n\003Arg\022\022\n\004typ"
    "e\030\001 \001(\tB\004\310\336\037\000\022\021\n\003str\030\002 \001(\tB\004\310\336\037\000\022\022\n\004json"
    "\030\003 \001(\014B\004\310\336\037\000B\023Z\005proto\340\342\036\001\310\342\036\001\320\342\036\001", 513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/log.proto", &protobuf_RegisterTypes);
  LogEntry::default_instance_ = new LogEntry();
  LogEntry_Arg::default_instance_ = new LogEntry_Arg();
  LogEntry::default_instance_->InitAsDefaultInstance();
  LogEntry_Arg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2flog_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2flog_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2flog_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2flog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogEntry_Arg::kTypeFieldNumber;
const int LogEntry_Arg::kStrFieldNumber;
const int LogEntry_Arg::kJsonFieldNumber;
#endif  // !_MSC_VER

LogEntry_Arg::LogEntry_Arg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.LogEntry.Arg)
}

void LogEntry_Arg::InitAsDefaultInstance() {
}

LogEntry_Arg::LogEntry_Arg(const LogEntry_Arg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.LogEntry.Arg)
}

void LogEntry_Arg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry_Arg::~LogEntry_Arg() {
  // @@protoc_insertion_point(destructor:cockroach.proto.LogEntry.Arg)
  SharedDtor();
}

void LogEntry_Arg::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (this != default_instance_) {
  }
}

void LogEntry_Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry_Arg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntry_Arg_descriptor_;
}

const LogEntry_Arg& LogEntry_Arg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2flog_2eproto();
  return *default_instance_;
}

LogEntry_Arg* LogEntry_Arg::default_instance_ = NULL;

LogEntry_Arg* LogEntry_Arg::New() const {
  return new LogEntry_Arg;
}

void LogEntry_Arg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    if (has_json()) {
      if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntry_Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.LogEntry.Arg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional string str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_json;
        break;
      }

      // optional bytes json = 3;
      case 3: {
        if (tag == 26) {
         parse_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.LogEntry.Arg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.LogEntry.Arg)
  return false;
#undef DO_
}

void LogEntry_Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.LogEntry.Arg)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  // optional bytes json = 3;
  if (has_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->json(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.LogEntry.Arg)
}

::google::protobuf::uint8* LogEntry_Arg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.LogEntry.Arg)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  // optional bytes json = 3;
  if (has_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->json(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.LogEntry.Arg)
  return target;
}

int LogEntry_Arg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional bytes json = 3;
    if (has_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry_Arg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntry_Arg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntry_Arg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntry_Arg::MergeFrom(const LogEntry_Arg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_json()) {
      set_json(from.json());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntry_Arg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry_Arg::CopyFrom(const LogEntry_Arg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry_Arg::IsInitialized() const {

  return true;
}

void LogEntry_Arg::Swap(LogEntry_Arg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(str_, other->str_);
    std::swap(json_, other->json_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntry_Arg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntry_Arg_descriptor_;
  metadata.reflection = LogEntry_Arg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogEntry::kSeverityFieldNumber;
const int LogEntry::kTimeFieldNumber;
const int LogEntry::kThreadIdFieldNumber;
const int LogEntry::kFileFieldNumber;
const int LogEntry::kLineFieldNumber;
const int LogEntry::kFormatFieldNumber;
const int LogEntry::kArgsFieldNumber;
const int LogEntry::kNodeIdFieldNumber;
const int LogEntry::kStoreIdFieldNumber;
const int LogEntry::kRaftIdFieldNumber;
const int LogEntry::kMethodFieldNumber;
const int LogEntry::kKeyFieldNumber;
const int LogEntry::kStacksFieldNumber;
#endif  // !_MSC_VER

LogEntry::LogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.LogEntry)
}

void LogEntry::InitAsDefaultInstance() {
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.LogEntry)
}

void LogEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  severity_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  thread_id_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0;
  store_id_ = 0;
  raft_id_ = GOOGLE_LONGLONG(0);
  method_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stacks_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:cockroach.proto.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (stacks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stacks_;
  }
  if (this != default_instance_) {
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntry_descriptor_;
}

const LogEntry& LogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2flog_2eproto();
  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New() const {
  return new LogEntry;
}

void LogEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(time_, thread_id_);
    ZR_(line_, node_id_);
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(raft_id_, method_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_stacks()) {
      if (stacks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stacks_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 severity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_thread_id;
        break;
      }

      // optional int32 thread_id = 3;
      case 3: {
        if (tag == 24) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file;
        break;
      }

      // optional string file = 4;
      case 4: {
        if (tag == 34) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_line;
        break;
      }

      // optional int32 line = 5;
      case 5: {
        if (tag == 40) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_format;
        break;
      }

      // optional string format = 6;
      case 6: {
        if (tag == 50) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_args;
        break;
      }

      // repeated .cockroach.proto.LogEntry.Arg args = 7;
      case 7: {
        if (tag == 58) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_args;
        if (input->ExpectTag(64)) goto parse_node_id;
        break;
      }

      // optional int32 node_id = 8;
      case 8: {
        if (tag == 64) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 9;
      case 9: {
        if (tag == 72) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_raft_id;
        break;
      }

      // optional int64 raft_id = 10;
      case 10: {
        if (tag == 80) {
         parse_raft_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raft_id_)));
          set_has_raft_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_method;
        break;
      }

      // optional int32 method = 11;
      case 11: {
        if (tag == 88) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_key;
        break;
      }

      // optional bytes key = 12;
      case 12: {
        if (tag == 98) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_stacks;
        break;
      }

      // optional bytes stacks = 13;
      case 13: {
        if (tag == 106) {
         parse_stacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stacks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.LogEntry)
  // optional int32 severity = 1;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->severity(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional int32 thread_id = 3;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->thread_id(), output);
  }

  // optional string file = 4;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file(), output);
  }

  // optional int32 line = 5;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->line(), output);
  }

  // optional string format = 6;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->format(), output);
  }

  // repeated .cockroach.proto.LogEntry.Arg args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->args(i), output);
  }

  // optional int32 node_id = 8;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->node_id(), output);
  }

  // optional int32 store_id = 9;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->store_id(), output);
  }

  // optional int64 raft_id = 10;
  if (has_raft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->raft_id(), output);
  }

  // optional int32 method = 11;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->method(), output);
  }

  // optional bytes key = 12;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->key(), output);
  }

  // optional bytes stacks = 13;
  if (has_stacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->stacks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.LogEntry)
}

::google::protobuf::uint8* LogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.LogEntry)
  // optional int32 severity = 1;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->severity(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional int32 thread_id = 3;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->thread_id(), target);
  }

  // optional string file = 4;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file(), target);
  }

  // optional int32 line = 5;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->line(), target);
  }

  // optional string format = 6;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->format(), target);
  }

  // repeated .cockroach.proto.LogEntry.Arg args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->args(i), target);
  }

  // optional int32 node_id = 8;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->node_id(), target);
  }

  // optional int32 store_id = 9;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->store_id(), target);
  }

  // optional int64 raft_id = 10;
  if (has_raft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->raft_id(), target);
  }

  // optional int32 method = 11;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->method(), target);
  }

  // optional bytes key = 12;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->key(), target);
  }

  // optional bytes stacks = 13;
  if (has_stacks()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->stacks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.LogEntry)
  return target;
}

int LogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 severity = 1;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 thread_id = 3;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_id());
    }

    // optional string file = 4;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional int32 line = 5;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional string format = 6;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional int32 node_id = 8;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 store_id = 9;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional int64 raft_id = 10;
    if (has_raft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raft_id());
    }

    // optional int32 method = 11;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

    // optional bytes key = 12;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes stacks = 13;
    if (has_stacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stacks());
    }

  }
  // repeated .cockroach.proto.LogEntry.Arg args = 7;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_raft_id()) {
      set_raft_id(from.raft_id());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_stacks()) {
      set_stacks(from.stacks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {

  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other != this) {
    std::swap(severity_, other->severity_);
    std::swap(time_, other->time_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(file_, other->file_);
    std::swap(line_, other->line_);
    std::swap(format_, other->format_);
    args_.Swap(&other->args_);
    std::swap(node_id_, other->node_id_);
    std::swap(store_id_, other->store_id_);
    std::swap(raft_id_, other->raft_id_);
    std::swap(method_, other->method_);
    std::swap(key_, other->key_);
    std::swap(stacks_, other->stacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntry_descriptor_;
  metadata.reflection = LogEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
