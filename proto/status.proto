// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Bram Gruneir (bram+code@cockroachlabs.com)

syntax = "proto2";
package cockroach.proto;
option go_package = "proto";

import "cockroach/proto/config.proto";
import "gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// MVCCStats tracks byte and instance counts for:
//  - Live key/values (i.e. what a scan at current time will reveal;
//    note that this includes intent keys and values, but not keys and
//    values with most recent value deleted)
//  - Key bytes (includes all keys, even those with most recent value deleted)
//  - Value bytes (includes all versions)
//  - Key count (count of all keys, including keys with deleted tombstones)
//  - Value count (all versions, including deleted tombstones)
//  - Intents (provisional values written during txns)
//  - System-local key counts and byte totals
message MVCCStats {
  optional int64 live_bytes = 1 [(gogoproto.nullable) = false];
  optional int64 key_bytes = 2 [(gogoproto.nullable) = false];
  optional int64 val_bytes = 3 [(gogoproto.nullable) = false];
  optional int64 intent_bytes = 4 [(gogoproto.nullable) = false];
  optional int64 live_count = 5 [(gogoproto.nullable) = false];
  optional int64 key_count = 6 [(gogoproto.nullable) = false];
  optional int64 val_count = 7 [(gogoproto.nullable) = false];
  optional int64 intent_count = 8 [(gogoproto.nullable) = false];
  optional int64 intent_age = 9 [(gogoproto.nullable) = false];
  optional int64 gc_bytes_age = 10 [(gogoproto.nullable) = false, (gogoproto.customname) = "GCBytesAge" ];
  optional int64 sys_bytes = 12 [(gogoproto.nullable) = false];
  optional int64 sys_count = 13 [(gogoproto.nullable) = false];
  optional int64 last_update_nanos = 30 [(gogoproto.nullable) = false];
}


// StoreStatus contains the stats needed to calculate the current status of a
// store.
message StoreStatus {
  optional StoreDescriptor desc = 1 [(gogoproto.nullable) = false];
  optional int32 node_id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
  optional int32 range_count = 3 [(gogoproto.nullable) = false];
  optional int64 started_at = 4 [(gogoproto.nullable) = false];
  optional int64 updated_at = 5 [(gogoproto.nullable) = false];
  optional MVCCStats stats = 6 [(gogoproto.nullable) = false];
  optional int32 leader_range_count = 7 [(gogoproto.nullable) = false];
  optional int32 replicated_range_count = 8 [(gogoproto.nullable) = false];
  optional int32 available_range_count = 9 [(gogoproto.nullable) = false];
}

// NodeStatus contains the stats needed to calculate the current status of a
// node.
message NodeStatus {
  optional NodeDescriptor desc = 1 [(gogoproto.nullable) = false];
  repeated int32 store_ids = 2 [(gogoproto.customname) = "StoreIDs", (gogoproto.casttype) = "StoreID"];
  optional int32 range_count = 3 [(gogoproto.nullable) = false];
  optional int64 started_at = 4 [(gogoproto.nullable) = false];
  optional int64 updated_at = 5 [(gogoproto.nullable) = false];
  optional MVCCStats stats = 6 [(gogoproto.nullable) = false];
  optional int32 leader_range_count = 7 [(gogoproto.nullable) = false];
  optional int32 replicated_range_count = 8 [(gogoproto.nullable) = false];
  optional int32 available_range_count = 9 [(gogoproto.nullable) = false];
}
