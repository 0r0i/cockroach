// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Jiajia Han (hanjia18@gmail.com)
// Author: Spencer Kimball (spencer.kimball@gmail.com)

package proto;

import "code.google.com/p/gogoprotobuf/gogoproto/gogo.proto";

// Timestamp represents a state of the hybrid logical clock.
message Timestamp {
  // Holds a wall time, typically a unix epoch time
  // expressed in nanoseconds.
  optional int64 wall_time = 1 [(gogoproto.nullable) = false];
  // The logical component captures causality for events whose wall
  // times are equal. It is effectively bounded by (maximum clock
  // skew)/(minimal ns between events) and nearly impossible to
  // overflow.
  optional int32 logical = 2 [(gogoproto.nullable) = false];
}

// Value specifies the value at a key. Multiple values at the same key
// are supported based on timestamp. Values support the union of two
// basic types: a "bag o' bytes" generic byte slice and an incrementable
// int64, for use with the Increment API call.
message Value {
  // Bytes is the byte slice value. If this value is present,
  // "integer" should not be.
  optional bytes bytes = 1;
  // Integer is an integer value type. If this value is present,
  // "bytes" should not be. Only Integer values may exist at a key
  // when making the Increment API call.
  optional int64 integer = 2;
  // Checksum is a CRC-32-IEEE checksum of the key + value, in that order.
  // If this is an integer value, then the value is interpreted as an 8
  // byte, big-endian encoded value. This value is set by the client on
  // writes to do end-to-end integrity verification. If the checksum is
  // incorrect, the write operation will fail. If the client does not
  // wish to use end-to-end checksumming, this value should be nil.
  optional fixed32 checksum = 3;
  // Timestamp of value.
  optional Timestamp timestamp = 4;
}

// MVCCValue differentiates between normal versioned values and
// deletion tombstones.
message MVCCValue {
  // True to indicate a deletion tombstone. If false, value should not
  // be nil.
  optional bool deleted = 1 [(gogoproto.nullable) = false];
  // The value. Nil if deleted is true; not nil otherwise.
  optional Value value = 2;
}

// KeyValue is a pair of Key and Value for returned Key/Value pairs
// from ScanRequest/ScanResponse. It embeds a Key and a Value.
message KeyValue {
  optional bytes key = 1 [(gogoproto.nullable) = false];
  optional Value value = 2 [(gogoproto.nullable) = false];
}

// RawKeyValue contains the raw bytes of the value for a key.
message RawKeyValue {
  optional bytes key = 1 [(gogoproto.nullable) = false];
  optional bytes value = 2 [(gogoproto.nullable) = false];
}

// A StoreIdent uniquely identifies a store in the cluster. The
// StoreIdent is written to the underlying storage engine at a
// store-reserved system key (KeyLocalIdent).
message StoreIdent {
  optional string cluster_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ClusterID"];
  optional int32 node_id = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID"];
  optional int32 store_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "StoreID"];
}

// IsolationType TODO(jiajia) Needs documentation.
enum IsolationType {
  option (gogoproto.goproto_enum_prefix) = false;
  // SERIALIZABLE TODO(jiajia) Needs documentation.
  SERIALIZABLE = 0;
  // SNAPSHOT TODO(jiajia) Needs documentation.
  SNAPSHOT = 1;
}

// TransactionStatus TODO(jiajia) Needs documentation.
enum TransactionStatus {
  option (gogoproto.goproto_enum_prefix) = false;
  // PENDING is the default state for a new transaction. Transactions
  // move from PENDING to one of COMMITTED or ABORTED. Mutations made
  // as part of a PENDING transactions are recorded as "intents" in
  // the underlying MVCC model.
  PENDING = 0;
  // COMMITTED is the state for a transaction which has been
  // committed. Mutations made as part of a transaction which is moved
  // into COMMITTED state become durable and visible to other
  // transactions, moving from "intents" to permanent versioned
  // values.
  COMMITTED = 1;
  // ABORTED is the state for a transaction which has been aborted.
  // Mutations made as part of a transaction which is moved into
  // ABORTED state are deleted and are never made visible to other
  // transactions.
  ABORTED = 2;
}

// A Transaction is a unit of work performed on the database.
// Cockroach transactions support two isolation levels: snapshot
// isolation and serializable snapshot isolation. Each Cockroach
// transaction is assigned a random priority. This priority will be
// used to decide whether a transaction will be aborted during
// contention.
message Transaction {
  optional bytes id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
  optional int32 priority = 2 [(gogoproto.nullable) = false];
  optional IsolationType isolation = 3 [(gogoproto.nullable) = false];
  optional TransactionStatus status = 4 [(gogoproto.nullable) = false];
  // Incremented on txn retry.
  optional int32 epoch = 5 [(gogoproto.nullable) = false];
  // The proposed timestamp for the transaction. This starts as
  // the current wall time on the txn coordinator.
  optional Timestamp timestamp = 6 [(gogoproto.nullable) = false];
  // Timestamp + clock skew. Reads which encounter values with
  // timestamps between Timestamp and MaxTimestamp trigger a txn
  // retry error.
  optional Timestamp max_timestamp = 7 [(gogoproto.nullable) = false];
  // The last hearbeat timestamp.
  optional Timestamp last_heartbeat = 8;
}

// MVCCMetadata holds MVCC metadata for a key. Used by storage/engine/mvcc.go.
message MVCCMetadata {
  optional Transaction txn = 1;
  optional Timestamp timestamp = 2 [(gogoproto.nullable) = false];
}
