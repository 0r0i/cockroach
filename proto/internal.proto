// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

package proto;

import "api.proto";
import "config.proto";
import "data.proto";
import "code.google.com/p/gogoprotobuf/gogoproto/gogo.proto";

// An InternalRangeLookupRequest is arguments to the InternalRangeLookup()
// method. It specifies the key for which the containing range is being
// requested, and the maximum number of total ranges that should be returned.
message InternalRangeLookupRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional int32 max_ranges = 2 [(gogoproto.nullable) = false];
}

// An InternalRangeLookupResponse is the return value from the
// InternalRangeLookup() method. It returns metadata for the range containing
// the requested key, optionally returning the metadata for additional
// consecutive ranges beyond the requested range.
message InternalRangeLookupResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated RangeDescriptor ranges = 2 [(gogoproto.nullable) = false];
}

// An InternalEndTxnRequest is arguments to the InternalEndTxn()
// method. It is sent internally to commit transactions which have
// accompanying system-specific triggers.  In all other ways the
// method behaves exactly as EndTransaction.
message InternalEndTxnRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // False to abort and rollback.
  optional bool commit = 2 [(gogoproto.nullable) = false];
  // Optional commit triggers.
  optional SplitTrigger split_trigger = 3;
}

// An InternalEndTxnResponse is the return value from the
// InternalEndTxn() method. See EndTransactionRequest for
// additional details.
message InternalEndTxnResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional Transaction txn = 2;
  optional int64 commit_wait = 3 [(gogoproto.nullable) = false];
}

// An InternalHeartbeatTxnRequest is arguments to the
// InternalHeartbeatTxn() method. It's sent by transaction
// coordinators to let the system know that the transaction is still
// ongoing. Note that this heartbeat message is different from the
// heartbeat message in the gossip protocol.
message InternalHeartbeatTxnRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// An InternalHeartbeatTxnResponse is the return value from the
// InternalHeartbeatTxn() method. It returns the transaction info in
// the response header. The returned transaction lets the coordinator
// know the disposition of the transaction (i.e. aborted, committed or
// pending).
message InternalHeartbeatTxnResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Txn is non-nil if the transaction could be heartbeat and contains
  // the current value of the transaction.
  optional Transaction txn = 2;
}

// An InternalPushTxnRequest is arguments to the InternalPushTxn()
// method. It's sent by readers or writers which have encountered an
// "intent" laid down by another transaction. The goal is to resolve
// the conflict. Note that args.Key should be set to the txn ID of
// args.PusheeTxn, not args.Txn, as is usual. This RPC is addressed
// to the range which owns the pushee's txn record.
//
// Resolution is trivial if the txn which owns the intent has either
// been committed or aborted already. Otherwise, the existing txn can
// either be aborted (for write/write conflicts), or its commit
// timestamp can be moved forward (for read/write conflicts). The
// course of action is determined by the owning txn's status and also
// by comparing priorities.
message InternalPushTxnRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional Transaction pushee_txn = 2 [(gogoproto.nullable) = false];
  // Set to true to request that the PushTxn be aborted if possible.
  // This is done in the event of a writer conflicting with PusheeTxn.
  // Readers set this to false and instead attempt to move PusheeTxn's
  // commit timestamp forward.
  optional bool Abort = 3 [(gogoproto.nullable) = false];
}

// An InternalPushTxnResponse is the return value from the
// InternalPushTxn() method. It returns success and the resulting
// state of PusheeTxn if the conflict was resolved in favor of the
// caller; the caller should subsequently invoke
// InternalResolveIntent() on the conflicted key. It returns an error
// otherwise.
message InternalPushTxnResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Txn is non-nil if the transaction could be heartbeat and contains
  // the current value of the transaction.
  optional Transaction pushee_txn = 2;
}

// An InternalResolveIntentRequest is arguments to the
// InternalResolveIntent() method. It is sent by transaction
// coordinators and after success calling InternalPushTxn to clean up
// write intents: either to remove them or commit them.
message InternalResolveIntentRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// An InternalResolveIntentResponse is the return value from the
// InternalResolveIntent() method.
message InternalResolveIntentResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// An InternalSnapshotCopyRequest is arguments to the InternalSnapshotCopy()
// method. It specifies the start and end keys for the scan and the
// maximum number of results from the given snapshot_id. It will create
// a snapshot if snapshot_id is empty.
message InternalSnapshotCopyRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Optional, a new snapshot will be created if it is empty.
  optional string snapshot_id = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "SnapshotID"];
  // Must be > 0.
  optional int64 max_results = 3 [(gogoproto.nullable) = false];
}

// An InternalSnapshotCopyResponse is the return value from the
// InternalSnapshotCopy() method.
message InternalSnapshotCopyResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional string snapshot_id = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "SnapshotID"];
  // Empty if no rows were scanned.
  repeated RawKeyValue rows = 3 [(gogoproto.nullable) = false];
}

// A ReadWriteCmdResponse is a union type containing instances of all
// mutating commands. Note that any entry added here must be handled
// in roachlib/db.cc in GetResponseHeader().
message ReadWriteCmdResponse {
  option (gogoproto.onlyone) = true;
  optional PutResponse put = 1;
  optional ConditionalPutResponse conditional_put = 2;
  optional IncrementResponse increment = 3;
  optional DeleteResponse delete = 4;
  optional DeleteRangeResponse delete_range = 5;
  optional EndTransactionResponse end_transaction = 6;
  optional AccumulateTSResponse accumulate_ts = 7 [(gogoproto.customname) = "AccumulateTS"];
  optional ReapQueueResponse reap_queue = 8;
  optional EnqueueUpdateResponse enqueue_update = 9;
  optional EnqueueMessageResponse enqueue_message = 10;
  optional InternalEndTxnResponse internal_end_txn = 11;
  optional InternalHeartbeatTxnResponse internal_heartbeat_txn = 12;
  optional InternalPushTxnResponse internal_push_txn = 13;
  optional InternalResolveIntentResponse internal_resolve_intent = 14;
}
