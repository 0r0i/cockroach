// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:281
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FAMILY = 57435
const FETCH = 57436
const FILTER = 57437
const FIRST = 57438
const FLOAT = 57439
const FLOORDIV = 57440
const FOLLOWING = 57441
const FOR = 57442
const FORCE_INDEX = 57443
const FOREIGN = 57444
const FROM = 57445
const FULL = 57446
const GRANT = 57447
const GRANTS = 57448
const GREATEST = 57449
const GROUP = 57450
const GROUPING = 57451
const HAVING = 57452
const HIGH = 57453
const HOUR = 57454
const IF = 57455
const IFNULL = 57456
const IN = 57457
const INDEX = 57458
const INDEXES = 57459
const INITIALLY = 57460
const INNER = 57461
const INSERT = 57462
const INT = 57463
const INT64 = 57464
const INTEGER = 57465
const INTERSECT = 57466
const INTERVAL = 57467
const INTO = 57468
const IS = 57469
const ISOLATION = 57470
const JOIN = 57471
const KEY = 57472
const KEYS = 57473
const LATERAL = 57474
const LEADING = 57475
const LEAST = 57476
const LEFT = 57477
const LEVEL = 57478
const LIKE = 57479
const LIMIT = 57480
const LOCAL = 57481
const LOCALTIME = 57482
const LOCALTIMESTAMP = 57483
const LOW = 57484
const LSHIFT = 57485
const MATCH = 57486
const MINUTE = 57487
const MONTH = 57488
const NAME = 57489
const NAMES = 57490
const NATURAL = 57491
const NEXT = 57492
const NO = 57493
const NO_INDEX_JOIN = 57494
const NORMAL = 57495
const NOT = 57496
const NOTHING = 57497
const NULL = 57498
const NULLIF = 57499
const NULLS = 57500
const NUMERIC = 57501
const OF = 57502
const OFF = 57503
const OFFSET = 57504
const ON = 57505
const ONLY = 57506
const OR = 57507
const ORDER = 57508
const ORDINALITY = 57509
const OUT = 57510
const OUTER = 57511
const OVER = 57512
const OVERLAPS = 57513
const OVERLAY = 57514
const PARTIAL = 57515
const PARTITION = 57516
const PLACING = 57517
const POSITION = 57518
const PRECEDING = 57519
const PRECISION = 57520
const PRIMARY = 57521
const PRIORITY = 57522
const RANGE = 57523
const READ = 57524
const REAL = 57525
const RECURSIVE = 57526
const REF = 57527
const REFERENCES = 57528
const RENAME = 57529
const REPEATABLE = 57530
const RELEASE = 57531
const RESTRICT = 57532
const RETURNING = 57533
const REVOKE = 57534
const RIGHT = 57535
const ROLLBACK = 57536
const ROLLUP = 57537
const ROW = 57538
const ROWS = 57539
const RSHIFT = 57540
const SAVEPOINT = 57541
const SEARCH = 57542
const SECOND = 57543
const SELECT = 57544
const SERIAL = 57545
const SERIALIZABLE = 57546
const SESSION = 57547
const SESSION_USER = 57548
const SET = 57549
const SHOW = 57550
const SIMILAR = 57551
const SIMPLE = 57552
const SMALLINT = 57553
const SNAPSHOT = 57554
const SOME = 57555
const SQL = 57556
const START = 57557
const STRICT = 57558
const STRING = 57559
const STORING = 57560
const SUBSTRING = 57561
const SYMMETRIC = 57562
const TABLE = 57563
const TABLES = 57564
const TEXT = 57565
const THEN = 57566
const TIME = 57567
const TIMESTAMP = 57568
const TIMESTAMPTZ = 57569
const TO = 57570
const TRAILING = 57571
const TRANSACTION = 57572
const TREAT = 57573
const TRIM = 57574
const TRUE = 57575
const TRUNCATE = 57576
const TYPE = 57577
const UNBOUNDED = 57578
const UNCOMMITTED = 57579
const UNION = 57580
const UNIQUE = 57581
const UNKNOWN = 57582
const UPDATE = 57583
const UPSERT = 57584
const USER = 57585
const USING = 57586
const VALID = 57587
const VALIDATE = 57588
const VALUE = 57589
const VALUES = 57590
const VARCHAR = 57591
const VARIADIC = 57592
const VARYING = 57593
const WHEN = 57594
const WHERE = 57595
const WINDOW = 57596
const WITH = 57597
const WITHIN = 57598
const WITHOUT = 57599
const YEAR = 57600
const ZONE = 57601
const NOT_LA = 57602
const WITH_LA = 57603
const POSTFIXOP = 57604
const UMINUS = 57605

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4452

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	282, 21,
	-2, 329,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 300,
	163, 300,
	191, 300,
	280, 300,
	282, 300,
	-2, 310,
	-1, 44,
	1, 303,
	163, 303,
	191, 303,
	280, 303,
	282, 303,
	-2, 309,
	-1, 53,
	1, 21,
	282, 21,
	-2, 329,
	-1, 242,
	1, 138,
	282, 138,
	-2, 808,
	-1, 274,
	138, 339,
	162, 339,
	-2, 306,
	-1, 277,
	138, 338,
	162, 338,
	-2, 304,
	-1, 389,
	138, 338,
	162, 338,
	-2, 307,
	-1, 445,
	279, 752,
	-2, 745,
	-1, 446,
	279, 753,
	-2, 746,
	-1, 452,
	5, 469,
	279, 469,
	-2, 890,
	-1, 474,
	5, 435,
	-2, 867,
	-1, 475,
	5, 463,
	279, 463,
	-2, 868,
	-1, 476,
	5, 443,
	-2, 869,
	-1, 477,
	5, 442,
	-2, 870,
	-1, 478,
	5, 463,
	279, 463,
	-2, 873,
	-1, 479,
	5, 463,
	279, 463,
	-2, 874,
	-1, 480,
	5, 464,
	-2, 877,
	-1, 481,
	5, 430,
	-2, 878,
	-1, 482,
	5, 430,
	-2, 879,
	-1, 483,
	5, 445,
	-2, 882,
	-1, 484,
	5, 431,
	-2, 887,
	-1, 485,
	5, 432,
	-2, 888,
	-1, 486,
	5, 433,
	-2, 889,
	-1, 487,
	5, 430,
	-2, 893,
	-1, 488,
	5, 436,
	-2, 898,
	-1, 489,
	5, 434,
	-2, 901,
	-1, 490,
	5, 461,
	279, 461,
	-2, 902,
	-1, 491,
	5, 465,
	-2, 905,
	-1, 492,
	5, 467,
	-2, 906,
	-1, 493,
	5, 460,
	279, 460,
	-2, 910,
	-1, 758,
	88, 310,
	124, 310,
	138, 310,
	162, 310,
	166, 310,
	238, 310,
	-2, 573,
	-1, 766,
	279, 730,
	-2, 719,
	-1, 969,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 503,
	-1, 970,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 504,
	-1, 971,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 505,
	-1, 975,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 509,
	-1, 976,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 510,
	-1, 977,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 511,
	-1, 980,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 516,
	-1, 1011,
	171, 643,
	-2, 646,
	-1, 1170,
	88, 310,
	124, 310,
	138, 310,
	162, 310,
	166, 310,
	238, 310,
	-2, 387,
	-1, 1178,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 517,
	-1, 1183,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 518,
	-1, 1202,
	171, 642,
	-2, 645,
	-1, 1351,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 519,
	-1, 1356,
	127, 0,
	-2, 529,
	-1, 1365,
	171, 644,
	-2, 647,
	-1, 1406,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 554,
	-1, 1407,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 555,
	-1, 1408,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 556,
	-1, 1412,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 560,
	-1, 1413,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 561,
	-1, 1414,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 562,
	-1, 1516,
	127, 0,
	-2, 530,
	-1, 1520,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 533,
	-1, 1521,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 535,
	-1, 1605,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 534,
	-1, 1606,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 536,
	-1, 1614,
	127, 0,
	-2, 563,
	-1, 1654,
	127, 0,
	-2, 564,
	-1, 1700,
	30, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 866,
}

const sqlNprod = 1003
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21347

var sqlAct = [...]int{

	446, 1699, 1681, 1557, 1721, 839, 1659, 1682, 1698, 906,
	1683, 444, 847, 1385, 715, 1592, 1504, 1492, 1357, 1579,
	1487, 278, 591, 243, 443, 1477, 1444, 436, 1498, 761,
	31, 86, 506, 1478, 86, 300, 915, 890, 1261, 1167,
	887, 86, 1109, 14, 1328, 1205, 1166, 1157, 86, 86,
	1024, 1337, 86, 1260, 763, 86, 86, 86, 696, 889,
	512, 86, 86, 86, 86, 1358, 326, 1063, 693, 848,
	824, 66, 1153, 408, 815, 87, 1028, 283, 996, 792,
	993, 711, 918, 20, 86, 796, 535, 321, 10, 1018,
	377, 277, 882, 285, 43, 564, 283, 515, 549, 6,
	717, 517, 419, 418, 1115, 378, 494, 507, 409, 508,
	323, 68, 575, 319, 546, 916, 67, 841, 392, 64,
	288, 43, 893, 393, 316, 82, 391, 69, 545, 566,
	562, 240, 73, 528, 312, 720, 1021, 1598, 286, 318,
	1599, 327, 537, 537, 1066, 537, 1728, 43, 282, 910,
	44, 840, 1165, 722, 297, 844, 719, 297, 1696, 308,
	45, 1578, 282, 297, 1200, 308, 267, 296, 1689, 1201,
	303, 910, 328, 721, 1680, 1022, 313, 1519, 324, 1675,
	1656, 1121, 910, 1519, 496, 438, 1650, 290, 1641, 910,
	1632, 1578, 1607, 910, 275, 1519, 306, 1602, 1589, 1586,
	910, 1578, 1587, 1577, 274, 526, 1578, 1562, 1023, 1020,
	910, 1561, 1542, 1522, 910, 1198, 1198, 1518, 1198, 1454,
	1519, 720, 910, 727, 49, 1361, 1317, 1311, 1198, 1312,
	1312, 1278, 1276, 1645, 1279, 1198, 86, 86, 1275, 722,
	719, 1198, 1274, 51, 1202, 1198, 1199, 1198, 718, 911,
	812, 1198, 910, 811, 543, 1419, 1364, 544, 1135, 721,
	1581, 813, 1155, 1137, 1025, 1204, 910, 86, 737, 86,
	52, 86, 862, 86, 1004, 905, 876, 47, 404, 1198,
	687, 49, 686, 48, 556, 555, 49, 509, 86, 344,
	403, 510, 538, 538, 384, 538, 390, 295, 396, 86,
	51, 46, 509, 49, 510, 51, 510, 1697, 53, 727,
	86, 86, 86, 590, 86, 363, 1695, 1688, 1651, 1588,
	389, 1019, 51, 738, 1547, 1543, 1535, 52, 351, 505,
	1534, 501, 52, 1472, 47, 1529, 1121, 1528, 1527, 47,
	48, 1526, 1176, 352, 86, 48, 86, 1513, 1434, 52,
	1429, 1428, 1427, 1368, 737, 1346, 326, 326, 843, 1139,
	1327, 1283, 1280, 65, 593, 86, 500, 86, 86, 86,
	86, 297, 86, 1268, 1259, 1231, 86, 1228, 1226, 1215,
	46, 86, 1001, 1691, 383, 541, 536, 86, 690, 1209,
	1136, 1080, 381, 1035, 731, 723, 724, 725, 726, 728,
	1034, 503, 403, 769, 402, 86, 540, 1387, 86, 738,
	1232, 1644, 297, 529, 529, 1624, 1511, 1623, 1616, 1595,
	718, 1584, 1576, 1554, 1540, 313, 405, 1507, 1485, 1355,
	1345, 327, 327, 1324, 1323, 1322, 275, 1320, 1295, 594,
	1294, 1258, 1223, 1222, 527, 530, 274, 1214, 720, 1471,
	1195, 1191, 998, 283, 797, 800, 1094, 495, 1093, 1073,
	1033, 766, 328, 328, 909, 1002, 722, 804, 790, 689,
	595, 789, 788, 787, 553, 786, 720, 552, 729, 730,
	731, 723, 724, 725, 726, 728, 721, 579, 586, 509,
	1600, 1604, 736, 510, 722, 679, 676, 785, 1237, 680,
	681, 682, 784, 683, 412, 86, 688, 685, 783, 782,
	781, 593, 701, 780, 721, 779, 700, 699, 778, 86,
	777, 776, 1094, 86, 767, 713, 86, 86, 765, 46,
	691, 451, 86, 809, 86, 86, 727, 86, 807, 301,
	86, 407, 86, 86, 585, 326, 1603, 275, 86, 86,
	275, 275, 764, 1348, 1347, 502, 818, 707, 794, 795,
	708, 709, 1476, 864, 727, 857, 321, 760, 798, 1122,
	900, 357, 842, 801, 842, 1039, 376, 1282, 802, 399,
	400, 737, 803, 1281, 1177, 372, 594, 66, 358, 774,
	1493, 593, 720, 840, 829, 831, 1388, 1218, 498, 1029,
	793, 805, 1232, 1117, 1665, 1710, 74, 806, 1631, 1709,
	722, 825, 518, 881, 519, 1462, 266, 595, 265, 272,
	327, 868, 260, 1131, 261, 297, 79, 68, 308, 1570,
	721, 75, 67, 57, 851, 1569, 738, 43, 834, 308,
	817, 821, 308, 69, 1042, 234, 1306, 870, 846, 1307,
	1287, 328, 1286, 76, 1021, 860, 858, 324, 865, 497,
	866, 869, 863, 859, 856, 837, 594, 828, 78, 1213,
	1233, 1234, 1235, 1236, 1238, 58, 855, 770, 520, 86,
	727, 1077, 1212, 1043, 448, 1211, 1210, 1510, 1179, 817,
	1237, 86, 86, 1022, 1630, 816, 355, 595, 985, 861,
	431, 518, 836, 519, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 835, 380, 720, 1044, 1041, 1076, 958,
	86, 995, 86, 912, 1049, 61, 1023, 1020, 55, 375,
	995, 84, 356, 722, 244, 269, 723, 724, 725, 726,
	728, 84, 1667, 1559, 827, 957, 531, 1025, 289, 289,
	77, 593, 299, 721, 1297, 299, 305, 299, 1724, 1677,
	1718, 299, 314, 299, 244, 1029, 537, 520, 1709, 281,
	270, 62, 1045, 999, 56, 1678, 1110, 518, 885, 519,
	1114, 1685, 1025, 1625, 346, 983, 920, 1309, 273, 80,
	903, 904, 884, 297, 807, 1119, 60, 59, 1232, 807,
	1249, 1250, 1251, 727, 826, 280, 886, 1130, 1110, 1108,
	524, 1079, 1374, 523, 1132, 86, 86, 86, 1304, 1009,
	71, 86, 297, 353, 86, 354, 594, 913, 791, 1040,
	86, 86, 86, 86, 86, 1377, 86, 86, 379, 1019,
	1612, 521, 1246, 520, 86, 1375, 86, 282, 737, 757,
	1686, 1232, 1221, 86, 725, 726, 728, 595, 1089, 282,
	74, 1000, 86, 86, 1235, 1236, 1238, 814, 86, 1722,
	984, 1105, 1083, 1717, 283, 354, 63, 326, 1298, 54,
	79, 347, 349, 1338, 1112, 75, 1237, 1687, 1091, 373,
	1684, 1025, 981, 1708, 1706, 86, 1491, 86, 86, 86,
	706, 1025, 86, 738, 1560, 946, 926, 76, 1723, 1005,
	1010, 86, 1013, 898, 1181, 1084, 538, 1085, 86, 279,
	86, 1141, 78, 994, 395, 1725, 366, 1058, 345, 343,
	521, 1247, 1104, 1070, 1071, 1072, 244, 244, 394, 1237,
	1538, 374, 1564, 1124, 1415, 1125, 1116, 516, 1120, 1563,
	283, 1716, 327, 1148, 1126, 1116, 1172, 1123, 1732, 1129,
	1128, 1127, 395, 1138, 982, 1140, 1552, 84, 1289, 299,
	1134, 244, 1133, 387, 1088, 723, 724, 725, 726, 728,
	899, 698, 692, 328, 1247, 1373, 1248, 1146, 289, 1461,
	1505, 1660, 394, 1150, 561, 1458, 1460, 684, 1149, 299,
	1553, 1142, 1171, 43, 77, 557, 521, 946, 926, 1151,
	299, 299, 299, 1232, 532, 872, 1175, 1096, 1416, 1501,
	1539, 874, 297, 1095, 1417, 559, 798, 1333, 801, 283,
	1332, 353, 311, 795, 794, 1203, 560, 875, 1731, 1248,
	310, 1506, 280, 80, 550, 873, 550, 386, 1329, 1154,
	1243, 1244, 1245, 1032, 1242, 1239, 1240, 1241, 1233, 1234,
	1235, 1236, 1238, 1182, 1180, 244, 1615, 550, 244, 244,
	244, 1537, 244, 1457, 1459, 1262, 244, 1354, 1227, 1190,
	867, 84, 371, 369, 368, 283, 367, 695, 364, 309,
	1263, 775, 1160, 678, 1188, 86, 584, 583, 1441, 577,
	572, 1237, 1031, 1382, 1217, 289, 1186, 1163, 716, 1293,
	1241, 1233, 1234, 1235, 1236, 1238, 1302, 1336, 1300, 1288,
	1143, 901, 86, 1161, 897, 542, 1314, 539, 1265, 1266,
	1267, 534, 525, 522, 697, 1571, 86, 720, 86, 1710,
	86, 397, 581, 1194, 86, 907, 1247, 1196, 817, 360,
	293, 817, 1284, 1573, 832, 722, 86, 830, 833, 86,
	1207, 1208, 1310, 1291, 3, 86, 593, 1653, 587, 86,
	1184, 86, 1581, 1627, 1189, 721, 1330, 720, 945, 401,
	1305, 1162, 1646, 1316, 1308, 845, 70, 1301, 1342, 1303,
	714, 1315, 1331, 1313, 554, 1334, 1174, 1319, 908, 1257,
	1729, 1248, 1232, 398, 1326, 299, 259, 1335, 1321, 1730,
	1270, 1341, 294, 1339, 1340, 721, 81, 589, 302, 822,
	361, 720, 86, 299, 851, 727, 299, 838, 1370, 1371,
	1372, 588, 299, 1232, 853, 854, 720, 299, 1512, 722,
	299, 594, 244, 244, 262, 263, 1246, 1185, 550, 716,
	878, 877, 925, 1435, 1187, 1380, 1367, 1349, 297, 721,
	1277, 297, 1376, 1378, 1379, 1078, 1075, 1074, 1026, 1389,
	737, 879, 595, 1233, 1234, 1235, 1236, 1238, 1524, 1381,
	945, 1144, 880, 1393, 768, 991, 1050, 86, 86, 86,
	1237, 1391, 268, 1558, 72, 86, 86, 989, 1395, 1422,
	677, 86, 365, 86, 1531, 86, 86, 86, 86, 1455,
	1456, 1676, 1220, 86, 1611, 1423, 1591, 1030, 773, 948,
	25, 1480, 424, 86, 86, 738, 1440, 1442, 1290, 1436,
	1426, 892, 1483, 86, 86, 1247, 1483, 86, 891, 596,
	1362, 582, 571, 447, 370, 1482, 86, 86, 1484, 1482,
	1490, 565, 1484, 574, 925, 1473, 1038, 1475, 499, 987,
	1508, 986, 578, 573, 1489, 992, 449, 1156, 923, 1496,
	1497, 1008, 450, 1502, 1517, 924, 946, 926, 799, 883,
	947, 437, 921, 1469, 322, 849, 1509, 1027, 86, 1216,
	1248, 299, 822, 732, 729, 730, 731, 723, 724, 725,
	726, 728, 771, 1420, 423, 922, 429, 1465, 428, 1006,
	946, 926, 1160, 420, 1430, 1474, 1503, 946, 926, 1164,
	299, 948, 244, 350, 238, 239, 1113, 1163, 1470, 902,
	702, 1299, 1536, 271, 1229, 297, 297, 1158, 988, 297,
	1056, 1048, 86, 1161, 86, 990, 86, 1046, 1037, 946,
	926, 382, 511, 86, 1548, 850, 362, 1159, 1242, 1239,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 914, 1173, 1551,
	406, 1500, 86, 1486, 710, 1495, 1690, 292, 291, 1549,
	888, 359, 947, 558, 871, 264, 1572, 1622, 1626, 1296,
	1664, 50, 86, 19, 86, 17, 16, 1483, 1050, 1050,
	1582, 1162, 86, 15, 13, 12, 11, 922, 86, 1580,
	1482, 1585, 1574, 1484, 18, 299, 1086, 1087, 1147, 9,
	8, 822, 1601, 7, 1092, 24, 1594, 23, 1566, 22,
	1097, 1098, 1100, 1102, 1103, 5, 1106, 1107, 1597, 4,
	946, 926, 1450, 2, 299, 1, 1118, 1610, 1232, 0,
	1567, 1568, 1499, 299, 0, 1556, 1050, 1050, 1050, 1617,
	0, 0, 883, 550, 0, 0, 0, 0, 883, 0,
	86, 86, 1451, 0, 86, 0, 0, 1620, 0, 0,
	0, 1634, 86, 0, 0, 1608, 0, 0, 86, 1636,
	1483, 0, 1638, 1643, 1590, 695, 86, 695, 244, 299,
	0, 593, 1145, 1482, 297, 1637, 1484, 283, 1642, 0,
	1647, 1152, 1635, 807, 0, 1648, 0, 0, 1169, 0,
	299, 0, 0, 1649, 86, 86, 86, 0, 86, 0,
	0, 0, 0, 1652, 0, 1655, 1237, 0, 1668, 1662,
	0, 0, 0, 0, 0, 1671, 86, 946, 926, 945,
	1446, 1666, 1447, 0, 0, 0, 1483, 0, 0, 1669,
	1674, 1673, 1670, 410, 410, 0, 0, 0, 86, 1482,
	1672, 0, 1484, 513, 0, 1449, 594, 0, 0, 1694,
	1693, 1247, 1452, 945, 1232, 1050, 1050, 1704, 0, 0,
	945, 1707, 86, 1705, 0, 0, 0, 1711, 0, 1713,
	1714, 0, 1715, 0, 946, 926, 1712, 595, 0, 0,
	0, 0, 0, 0, 1727, 1726, 0, 0, 1192, 1193,
	0, 0, 945, 925, 0, 946, 926, 0, 1663, 1640,
	0, 1733, 0, 0, 0, 1448, 1248, 0, 1050, 1050,
	1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
	1050, 1050, 1050, 1050, 1050, 1050, 1050, 925, 1050, 0,
	0, 0, 0, 0, 925, 0, 703, 705, 0, 0,
	851, 0, 1237, 712, 0, 0, 1254, 1255, 1256, 0,
	0, 0, 0, 0, 0, 752, 753, 754, 755, 756,
	948, 0, 1156, 0, 759, 716, 925, 0, 1679, 0,
	0, 946, 926, 0, 1242, 1239, 1240, 1241, 1233, 1234,
	1235, 1236, 1238, 945, 772, 0, 0, 1247, 0, 0,
	0, 0, 299, 0, 948, 0, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 1318, 1160, 822, 0,
	695, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 947, 1163, 0, 0, 0, 299, 0, 0, 299,
	0, 0, 1158, 948, 0, 1169, 0, 0, 1161, 1344,
	0, 1169, 1248, 0, 0, 0, 922, 0, 0, 0,
	0, 808, 1159, 0, 0, 947, 0, 925, 0, 1450,
	0, 1445, 947, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	922, 0, 0, 0, 0, 0, 0, 922, 0, 1451,
	945, 0, 1386, 0, 947, 0, 1162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1239, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 922,
	0, 0, 0, 0, 948, 0, 1050, 0, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 945, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1439, 822,
	0, 0, 0, 0, 925, 716, 716, 1446, 945, 1447,
	0, 1463, 0, 1464, 0, 299, 1466, 1467, 1468, 0,
	0, 0, 0, 299, 0, 947, 0, 0, 0, 0,
	0, 1479, 1449, 1488, 822, 1479, 0, 0, 0, 1452,
	0, 0, 0, 299, 299, 0, 0, 299, 0, 0,
	922, 0, 1050, 0, 0, 0, 716, 1169, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 925, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 1532, 0,
	410, 0, 0, 0, 0, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 0, 948, 0,
	1050, 0, 947, 425, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 948,
	0, 0, 822, 0, 1550, 0, 244, 922, 925, 0,
	1036, 32, 1047, 299, 1057, 1059, 1064, 1067, 1068, 1069,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
	284, 0, 716, 0, 0, 0, 1555, 32, 0, 947,
	0, 0, 0, 513, 0, 720, 1479, 0, 0, 284,
	0, 0, 299, 0, 1593, 0, 0, 0, 0, 0,
	947, 0, 299, 722, 922, 748, 0, 0, 716, 0,
	0, 0, 1111, 0, 0, 948, 720, 0, 739, 740,
	741, 0, 0, 721, 0, 922, 0, 0, 742, 736,
	0, 0, 0, 0, 722, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 0, 0,
	736, 0, 1614, 0, 0, 0, 0, 0, 0, 0,
	1628, 1629, 0, 727, 1633, 0, 947, 712, 0, 1479,
	0, 0, 244, 0, 0, 0, 0, 0, 1488, 0,
	749, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 922, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 0, 737, 0,
	0, 749, 0, 0, 1661, 716, 299, 0, 244, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	1654, 0, 0, 744, 0, 1479, 1593, 0, 0, 737,
	0, 0, 0, 1178, 0, 0, 0, 1183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	0, 743, 0, 738, 0, 0, 1197, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 1206, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 1219, 0, 0, 738, 1224, 0, 0, 0, 276,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 759, 0, 0, 0,
	0, 0, 1064, 1064, 1064, 745, 0, 0, 0, 0,
	0, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1292, 745, 0, 733, 734,
	735, 0, 732, 729, 730, 731, 723, 724, 725, 726,
	728, 0, 410, 0, 1081, 0, 0, 0, 0, 0,
	0, 410, 0, 1082, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 720,
	0, 739, 740, 741, 0, 0, 0, 0, 0, 246,
	276, 742, 0, 276, 276, 0, 0, 722, 0, 748,
	0, 0, 0, 257, 0, 0, 720, 0, 739, 740,
	741, 0, 0, 0, 0, 0, 758, 721, 742, 1350,
	762, 1351, 0, 736, 722, 0, 748, 0, 0, 0,
	0, 0, 1356, 0, 0, 0, 248, 0, 0, 0,
	1366, 0, 0, 258, 721, 0, 1366, 0, 0, 0,
	736, 0, 0, 0, 0, 247, 249, 0, 0, 0,
	1383, 0, 0, 0, 0, 0, 0, 727, 0, 1392,
	0, 0, 1394, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 727, 0, 747, 0, 0, 0,
	0, 251, 252, 0, 1424, 1425, 744, 0, 0, 0,
	0, 749, 737, 1431, 1432, 1433, 253, 0, 0, 0,
	0, 0, 32, 747, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 743, 0, 0, 32, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 1516, 0, 0, 0,
	0, 1520, 1521, 0, 0, 746, 1523, 254, 0, 0,
	255, 1525, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 745,
	1533, 733, 734, 735, 0, 732, 729, 730, 731, 723,
	724, 725, 726, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 1544, 0, 0, 0, 745, 0, 733, 734,
	735, 1541, 732, 729, 730, 731, 723, 724, 725, 726,
	728, 720, 0, 739, 740, 741, 0, 0, 0, 1273,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 722,
	0, 748, 0, 0, 0, 0, 720, 0, 739, 740,
	741, 0, 1565, 0, 0, 0, 0, 0, 742, 721,
	0, 0, 0, 917, 722, 736, 748, 0, 0, 0,
	0, 0, 0, 1583, 0, 0, 0, 720, 0, 739,
	740, 741, 0, 0, 721, 0, 0, 0, 0, 742,
	736, 0, 1596, 997, 0, 722, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 1605, 1606, 0, 727,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 1619, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 1621, 0, 744, 0,
	0, 749, 0, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 727, 0, 0, 513, 0,
	0, 0, 0, 744, 0, 21, 743, 0, 0, 737,
	0, 0, 749, 0, 0, 35, 0, 284, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 744, 0, 0, 0, 37, 738,
	737, 0, 0, 0, 42, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 738, 0, 0, 0, 0, 26,
	0, 0, 38, 0, 0, 746, 27, 0, 0, 0,
	0, 0, 0, 32, 0, 0, 0, 1692, 0, 0,
	0, 28, 0, 1170, 0, 738, 0, 0, 0, 1703,
	1703, 745, 0, 733, 734, 735, 746, 732, 729, 730,
	731, 723, 724, 725, 726, 728, 0, 0, 0, 0,
	0, 0, 1703, 0, 1272, 0, 745, 0, 733, 734,
	735, 0, 732, 729, 730, 731, 723, 724, 725, 726,
	728, 0, 0, 0, 0, 0, 0, 0, 0, 1271,
	0, 1703, 0, 0, 0, 0, 0, 745, 997, 733,
	734, 735, 0, 732, 729, 730, 731, 723, 724, 725,
	726, 728, 758, 0, 0, 40, 0, 1658, 29, 0,
	39, 0, 0, 0, 0, 30, 0, 0, 49, 0,
	0, 0, 0, 33, 34, 0, 0, 0, 0, 0,
	0, 36, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 917,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 0, 0, 0, 0,
	88, 89, 1015, 90, 0, 0, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 1016, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 0, 113,
	114, 483, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 32, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 917, 917, 0, 0,
	917, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 1014, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 414, 1017, 0, 0, 0,
	415, 0, 0, 422, 1012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 917, 0, 0, 0, 88,
	89, 597, 90, 598, 599, 600, 601, 602, 603, 604,
	605, 91, 92, 189, 190, 191, 93, 192, 193, 606,
	94, 194, 195, 95, 607, 608, 196, 197, 198, 609,
	199, 610, 330, 611, 96, 97, 98, 0, 99, 612,
	100, 613, 331, 101, 102, 614, 615, 616, 617, 618,
	619, 103, 104, 105, 106, 200, 107, 201, 202, 620,
	621, 108, 622, 623, 624, 109, 110, 625, 111, 626,
	758, 627, 203, 112, 204, 628, 629, 630, 113, 114,
	205, 0, 115, 631, 116, 632, 633, 332, 634, 117,
	206, 635, 207, 636, 118, 119, 208, 209, 637, 638,
	120, 639, 333, 121, 210, 211, 212, 640, 213, 641,
	334, 122, 335, 123, 124, 642, 643, 214, 336, 125,
	337, 644, 126, 645, 646, 127, 0, 128, 129, 130,
	131, 132, 338, 133, 134, 137, 135, 647, 136, 648,
	215, 138, 216, 139, 140, 649, 650, 651, 652, 653,
	141, 217, 339, 142, 340, 218, 143, 144, 654, 219,
	145, 220, 655, 146, 147, 148, 221, 149, 150, 656,
	152, 153, 151, 154, 657, 155, 341, 156, 157, 222,
	158, 0, 245, 159, 160, 658, 223, 161, 162, 659,
	163, 164, 342, 165, 224, 166, 660, 167, 168, 170,
	225, 169, 226, 661, 662, 171, 172, 663, 227, 228,
	229, 664, 665, 173, 230, 231, 666, 174, 175, 176,
	177, 667, 668, 178, 179, 180, 669, 670, 181, 182,
	183, 232, 233, 671, 184, 672, 673, 674, 675, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 88,
	89, 597, 90, 598, 599, 600, 601, 602, 603, 604,
	605, 91, 92, 189, 190, 191, 93, 192, 193, 606,
	94, 194, 195, 95, 607, 608, 196, 197, 198, 609,
	199, 610, 330, 611, 96, 97, 98, 0, 99, 612,
	100, 613, 331, 101, 102, 614, 615, 616, 617, 618,
	619, 103, 104, 105, 106, 200, 107, 201, 202, 620,
	621, 108, 622, 623, 624, 109, 110, 625, 111, 626,
	0, 627, 203, 112, 204, 628, 629, 630, 113, 114,
	205, 0, 115, 631, 116, 632, 633, 332, 634, 117,
	206, 635, 207, 636, 118, 119, 208, 209, 637, 638,
	120, 639, 333, 121, 210, 211, 212, 640, 213, 641,
	334, 122, 335, 123, 124, 642, 643, 214, 336, 125,
	337, 644, 126, 645, 646, 127, 0, 128, 129, 130,
	131, 132, 338, 133, 134, 137, 135, 647, 136, 648,
	215, 138, 216, 139, 140, 649, 650, 651, 652, 653,
	141, 217, 339, 142, 340, 218, 143, 144, 654, 219,
	145, 220, 655, 146, 147, 148, 221, 149, 150, 656,
	152, 153, 151, 154, 657, 155, 341, 156, 157, 222,
	158, 0, 245, 159, 160, 658, 223, 161, 162, 659,
	163, 164, 342, 165, 224, 166, 660, 167, 168, 170,
	225, 169, 226, 661, 662, 171, 172, 663, 227, 228,
	229, 664, 665, 173, 230, 231, 666, 174, 175, 176,
	177, 667, 668, 178, 179, 180, 669, 670, 181, 182,
	183, 232, 233, 671, 184, 672, 673, 674, 675, 185,
	186, 187, 188, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 88, 89, 597, 90,
	598, 599, 600, 601, 602, 603, 604, 605, 91, 92,
	189, 190, 191, 93, 192, 193, 606, 94, 194, 195,
	95, 607, 608, 196, 197, 198, 609, 199, 610, 330,
	611, 96, 97, 98, 0, 99, 612, 100, 613, 331,
	101, 102, 614, 615, 616, 617, 618, 619, 103, 104,
	105, 106, 200, 107, 201, 202, 620, 621, 108, 622,
	623, 624, 109, 110, 625, 111, 626, 0, 627, 203,
	112, 204, 628, 629, 630, 113, 114, 205, 0, 115,
	631, 116, 632, 633, 332, 634, 117, 206, 635, 207,
	636, 118, 119, 208, 209, 637, 638, 120, 639, 333,
	121, 210, 211, 212, 640, 213, 641, 334, 122, 335,
	123, 124, 642, 643, 214, 336, 125, 337, 644, 126,
	645, 646, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 647, 136, 648, 215, 138, 216,
	139, 140, 649, 650, 651, 652, 653, 141, 217, 339,
	142, 340, 218, 143, 144, 654, 219, 145, 220, 655,
	146, 147, 148, 221, 149, 150, 656, 152, 153, 151,
	154, 657, 155, 341, 156, 157, 222, 158, 0, 245,
	159, 160, 658, 223, 161, 162, 659, 163, 164, 342,
	165, 224, 166, 660, 167, 168, 170, 225, 169, 226,
	661, 662, 171, 172, 663, 227, 228, 229, 664, 665,
	173, 230, 231, 666, 174, 175, 176, 177, 667, 668,
	178, 179, 180, 669, 670, 181, 182, 183, 232, 233,
	671, 184, 672, 673, 674, 675, 185, 186, 187, 188,
	445, 434, 435, 432, 433, 421, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	427, 0, 0, 0, 91, 92, 189, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 514, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	0, 113, 114, 483, 0, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 49, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 51, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 329, 493, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 417, 48, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 0, 113,
	114, 483, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 49, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 51, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 329, 493, 0, 184, 0, 0, 0, 47,
	185, 186, 187, 188, 417, 48, 445, 434, 435, 432,
	433, 421, 0, 0, 413, 414, 0, 0, 88, 89,
	415, 90, 0, 422, 0, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 1060, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 0, 113, 114, 483,
	0, 115, 0, 116, 0, 1065, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 1061, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 1062, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 417, 0, 445, 434, 435, 432, 433, 421,
	0, 0, 413, 414, 0, 0, 88, 89, 415, 90,
	0, 422, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 0, 113, 114, 483, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	1421, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 0, 113, 114, 483, 0, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 1363, 0,
	427, 0, 0, 0, 91, 92, 189, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 0, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	0, 113, 114, 483, 0, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 1011, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 0, 113,
	114, 483, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 414, 0, 0, 0, 0,
	415, 764, 1007, 422, 445, 434, 435, 432, 433, 421,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 0, 113, 114, 483, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 411, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 0, 113, 114, 483, 0, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 1369, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 0, 0,
	427, 0, 0, 0, 91, 92, 189, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 514, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	0, 113, 114, 483, 0, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 0, 113,
	114, 483, 0, 115, 0, 116, 0, 1065, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 414, 0, 0, 0, 0,
	415, 0, 0, 422, 445, 434, 435, 432, 433, 421,
	0, 0, 0, 0, 0, 0, 88, 89, 704, 90,
	0, 0, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 0, 113, 114, 483, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 1702,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 0, 113, 114, 483, 0, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 1701, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 0, 0,
	427, 0, 0, 0, 91, 92, 1700, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 1702, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 0, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	0, 113, 114, 483, 0, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 1701, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 0, 113,
	114, 483, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 445, 434, 435, 432,
	433, 421, 0, 0, 413, 414, 0, 0, 88, 89,
	415, 90, 0, 422, 0, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 0, 113, 114, 483,
	0, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 0, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 1055, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 445, 434, 435, 432, 433, 421, 0, 0,
	0, 0, 1051, 1052, 88, 89, 0, 90, 1053, 0,
	0, 1054, 427, 0, 0, 0, 91, 92, 0, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 1702,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 0, 113, 114, 483, 0, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 0, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 0, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 1701, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 414,
	88, 89, 0, 90, 415, 0, 0, 422, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 460, 196, 197, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 461, 0, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 210, 211, 212, 0, 213,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 0, 136,
	0, 468, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 464, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 465, 466, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 1481, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 333,
	121, 210, 211, 212, 0, 213, 0, 334, 122, 335,
	123, 124, 0, 0, 214, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 222, 158, 0, 245,
	159, 160, 49, 223, 161, 162, 0, 163, 164, 342,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 51, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 329, 233,
	0, 184, 0, 0, 0, 47, 185, 186, 187, 188,
	0, 48, 325, 576, 0, 577, 572, 567, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 46,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 330, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 580, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	569, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 332, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 333, 121, 210,
	211, 212, 0, 213, 0, 334, 122, 335, 123, 124,
	0, 0, 214, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 570, 0, 0, 0, 141, 217, 339, 142, 340,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 342, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 568, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 325, 576,
	0, 577, 572, 567, 0, 0, 0, 0, 578, 573,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 330, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	563, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 569, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 333, 121, 210, 211, 212, 0, 213,
	0, 334, 122, 335, 123, 124, 0, 0, 214, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 570, 0, 0,
	0, 141, 217, 339, 142, 340, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 342, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 568, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 325, 576, 0, 577, 572, 567,
	0, 0, 0, 0, 578, 573, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 569, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 333,
	121, 210, 211, 212, 0, 213, 0, 334, 122, 335,
	123, 124, 0, 0, 214, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 570, 0, 0, 0, 141, 217, 339,
	142, 340, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 342,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 568, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	578, 573, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	0, 113, 114, 205, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	298, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 49, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 51, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 329, 233, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 85, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 919, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 49, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 51, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	329, 233, 0, 184, 0, 0, 0, 47, 185, 186,
	187, 188, 85, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 46, 0, 1168, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 403, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 298, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 919, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 852,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	0, 113, 114, 205, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 1387, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 504, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 548, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 547,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	551, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 325, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 551, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 333,
	121, 210, 211, 212, 0, 213, 0, 334, 122, 335,
	123, 124, 0, 0, 214, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 342,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 825, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 823, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 896,
	0, 113, 114, 205, 0, 115, 0, 116, 828, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 894, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 827, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 895, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 825, 199,
	0, 0, 820, 96, 97, 98, 0, 99, 823, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 828, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 819, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 827, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 826, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 1168, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 298, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 304, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 298, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	0, 113, 114, 205, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 1101, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 1099, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 1090, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 694, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	0, 113, 114, 205, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 83, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 533, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 0,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 388, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 385, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 348, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 242, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 241, 228, 229, 0, 0,
	237, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	0, 113, 114, 205, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 242, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 241, 228, 229, 0, 0, 237, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 320, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 317, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 315, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 0, 113, 114, 205, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 307, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	0, 113, 114, 205, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	287, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 235, 0, 0, 127, 0, 128, 129, 130, 131,
	242, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 236, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 241, 228, 229,
	0, 0, 237, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 0, 113, 114, 205, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 0, 0, 219, 145, 220, 0, 146, 0,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 0, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 720, 184,
	739, 740, 741, 0, 185, 186, 187, 188, 0, 0,
	742, 0, 0, 0, 0, 0, 722, 720, 748, 739,
	740, 741, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 0, 722, 721, 748, 0, 0,
	0, 0, 736, 0, 720, 0, 739, 740, 741, 0,
	0, 0, 0, 0, 0, 721, 742, 0, 0, 0,
	0, 736, 722, 0, 748, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 727, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 727, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 744, 0, 0, 0, 0,
	0, 737, 727, 0, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 0, 749,
	737, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 743, 0, 0, 0, 0, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 743,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 0, 0, 0, 0, 745, 1657, 733,
	734, 735, 0, 732, 729, 730, 731, 723, 724, 725,
	726, 728, 0, 0, 0, 0, 0, 1639, 0, 0,
	0, 0, 0, 0, 745, 0, 733, 734, 735, 0,
	732, 729, 730, 731, 723, 724, 725, 726, 728, 720,
	0, 739, 740, 741, 1618, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 0, 0, 722, 720, 748,
	739, 740, 741, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 0, 722, 721, 748, 0,
	0, 0, 0, 736, 0, 720, 0, 739, 740, 741,
	0, 0, 0, 0, 0, 0, 721, 742, 0, 0,
	0, 0, 736, 722, 0, 748, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 721, 0, 0, 0, 727, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 744, 0, 0, 0,
	0, 0, 737, 727, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	749, 737, 0, 0, 743, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 743, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	743, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 745,
	0, 733, 734, 735, 0, 732, 729, 730, 731, 723,
	724, 725, 726, 728, 0, 0, 0, 0, 745, 1613,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 0, 0, 0, 0, 0, 1609, 0,
	0, 0, 0, 0, 0, 745, 0, 733, 734, 735,
	0, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	720, 0, 739, 740, 741, 1546, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 0, 722, 720,
	748, 739, 740, 741, 0, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 0, 0, 722, 721, 748,
	0, 0, 0, 0, 736, 0, 720, 0, 739, 740,
	741, 0, 0, 0, 0, 0, 0, 721, 742, 0,
	0, 0, 0, 736, 722, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 727, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 744, 0, 0,
	0, 0, 0, 737, 727, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 749, 737, 0, 0, 743, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 743, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 743, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	745, 0, 733, 734, 735, 0, 732, 729, 730, 731,
	723, 724, 725, 726, 728, 0, 0, 0, 0, 745,
	1545, 733, 734, 735, 0, 732, 729, 730, 731, 723,
	724, 725, 726, 728, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 745, 0, 733, 734,
	735, 0, 732, 729, 730, 731, 723, 724, 725, 726,
	728, 720, 0, 739, 740, 741, 1390, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 722,
	720, 748, 739, 740, 741, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 0, 722, 721,
	748, 0, 0, 0, 0, 736, 0, 720, 0, 739,
	740, 741, 0, 0, 0, 0, 0, 0, 721, 742,
	0, 0, 0, 0, 736, 722, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 727,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 749, 0, 0, 744, 0,
	0, 0, 0, 0, 737, 727, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 749, 737, 0, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 743, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 743, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 745, 0, 733, 734, 735, 0, 732, 729, 730,
	731, 723, 724, 725, 726, 728, 0, 0, 0, 0,
	745, 1365, 733, 734, 735, 0, 732, 729, 730, 731,
	723, 724, 725, 726, 728, 0, 0, 0, 0, 0,
	1003, 0, 0, 0, 0, 0, 0, 745, 0, 733,
	734, 735, 0, 732, 729, 730, 731, 723, 724, 725,
	726, 728, 0, 0, 720, 1437, 739, 740, 741, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 722, 720, 748, 739, 740, 741, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 722, 721, 748, 0, 0, 0, 0, 736, 0,
	720, 0, 739, 740, 741, 0, 0, 0, 0, 0,
	0, 721, 742, 0, 0, 0, 907, 736, 722, 0,
	748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 727, 1720, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 727, 0, 1263, 0, 0, 1262, 0, 0, 908,
	0, 747, 0, 0, 0, 0, 0, 0, 749, 0,
	0, 744, 0, 0, 0, 0, 0, 737, 727, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 749, 737, 0, 0, 743,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 1719, 0, 0, 0, 0, 0, 744, 743, 0,
	0, 0, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 743, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 745, 0, 733, 734, 735, 0,
	732, 729, 730, 731, 723, 724, 725, 726, 728, 0,
	0, 0, 0, 745, 0, 733, 734, 735, 0, 732,
	729, 730, 731, 723, 724, 725, 726, 728, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 733, 734, 735, 0, 732, 729, 730, 731,
	723, 724, 725, 726, 728, 751, 0, 0, 0, 0,
	0, 720, 0, 739, 740, 741, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 750, 0, 0, 722,
	720, 748, 739, 740, 741, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 0, 722, 721,
	748, 0, 0, 0, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 721, 739,
	740, 741, 0, 0, 736, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 0, 722, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 749, 0, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 749, 0, 0, 744, 0,
	0, 0, 0, 0, 737, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 727, 0, 744, 0, 0,
	0, 0, 0, 737, 0, 0, 743, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 743, 282, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 0, 738,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 745, 0, 733, 734, 735, 746, 732, 729, 730,
	731, 723, 724, 725, 726, 728, 0, 0, 0, 0,
	745, 1384, 733, 734, 735, 0, 732, 729, 730, 731,
	723, 724, 725, 726, 728, 720, 0, 739, 740, 741,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 722, 0, 748, 0, 745, 0, 733,
	734, 735, 0, 732, 729, 730, 731, 723, 724, 725,
	726, 728, 720, 721, 739, 740, 741, 0, 0, 736,
	0, 0, 0, 0, 742, 0, 0, 1264, 0, 0,
	722, 720, 748, 739, 740, 741, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 722,
	721, 748, 0, 0, 0, 0, 736, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 0, 1269, 721,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 744, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	743, 0, 0, 0, 0, 0, 749, 0, 0, 744,
	0, 0, 0, 0, 0, 737, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 738, 737, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1230, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 745, 0, 733, 734, 735,
	746, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 733, 734, 735, 0, 732, 729,
	730, 731, 723, 724, 725, 726, 728, 0, 0, 0,
	0, 745, 0, 733, 734, 735, 0, 732, 729, 730,
	731, 723, 724, 725, 726, 728, 720, 0, 739, 740,
	741, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 1225, 0, 0, 722, 720, 748, 739, 740, 741,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 722, 721, 748, 0, 0, 0, 0,
	736, 0, 720, 0, 739, 740, 741, 0, 0, 0,
	0, 0, 0, 721, 742, 0, 0, 0, 0, 736,
	722, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	721, 0, 0, 0, 727, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 744, 0, 0, 0, 0, 0, 737,
	727, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 749, 737, 0,
	0, 743, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 744,
	743, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	1232, 0, 1249, 1250, 1251, 0, 0, 0, 0, 0,
	738, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 745, 0, 733, 734,
	735, 0, 732, 729, 730, 731, 723, 724, 725, 726,
	728, 0, 0, 0, 1246, 745, 0, 733, 734, 735,
	0, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 733, 734, 735, 0, 732, 729,
	730, 731, 723, 724, 725, 726, 728, 720, 1237, 739,
	740, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 720, 748, 739, 740,
	741, 0, 0, 0, 0, 0, 0, 1252, 0, 0,
	0, 0, 0, 0, 722, 721, 748, 0, 0, 0,
	0, 736, 0, 1247, 1232, 0, 1249, 1250, 1251, 0,
	0, 0, 0, 0, 721, 0, 1514, 0, 0, 0,
	736, 0, 0, 0, 1232, 0, 1249, 1250, 1251, 0,
	0, 0, 0, 0, 0, 0, 1360, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 0, 0, 1246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 749, 1232, 727, 1249, 1250, 1251, 1246, 0,
	0, 0, 0, 0, 747, 1359, 0, 0, 0, 0,
	0, 749, 0, 0, 744, 0, 0, 0, 0, 0,
	737, 1232, 1237, 1249, 1250, 1251, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 1246, 0, 737,
	0, 0, 1237, 0, 0, 0, 0, 0, 0, 0,
	0, 1252, 1243, 1244, 1245, 0, 1242, 1239, 1240, 1241,
	1233, 1234, 1235, 1236, 1238, 1246, 0, 1247, 0, 0,
	0, 1252, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 1237, 0, 0, 0, 0, 746, 1247, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 1237,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 1247, 0, 0, 0,
	0, 1232, 0, 1249, 1250, 1251, 0, 745, 1252, 733,
	734, 735, 1248, 732, 729, 730, 731, 723, 724, 725,
	726, 728, 0, 0, 1247, 0, 745, 0, 733, 734,
	735, 0, 732, 729, 730, 731, 723, 724, 725, 726,
	728, 0, 0, 0, 0, 1246, 0, 0, 0, 0,
	0, 1248, 0, 0, 0, 0, 1243, 1244, 1245, 0,
	1242, 1239, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 0,
	0, 0, 0, 0, 0, 0, 1243, 1244, 1245, 1248,
	1242, 1239, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 1237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 0, 1243, 1244, 1245, 1252, 1242,
	1239, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 936, 952,
	927, 944, 943, 0, 1247, 929, 928, 0, 0, 0,
	954, 953, 0, 1243, 1244, 1245, 0, 1242, 1239, 1240,
	1241, 1233, 1234, 1235, 1236, 1238, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 941, 940, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 933,
	934, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1243, 1244, 1245, 942, 1242, 1239, 1240,
	1241, 1233, 1234, 1235, 1236, 1238, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	930, 0, 0, 950, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955,
}
var sqlPact = [...]int{

	2936, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 658, -1000, -1000, -1000, 555, 655, 84, 802, 802,
	15076, -1000, -1000, 17782, 2515, 392, 394, 392, 392, 388,
	15076, 514, 549, 101, -1000, 681, 22, 17536, 13846, 1132,
	14, 13354, 260, 2936, 13600, 13846, 17290, 986, 914, 906,
	13354, 17044, 16798, 16552, -1000, 9070, -1000, -1000, -1000, -1000,
	766, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 765, -1000, 13846, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16306, 16060, 695, -1000, -1000,
	468, 329, 1144, -1000, 34, -1000, -1000, -1000, 985, -1000,
	763, 983, 981, 980, 979, 326, 761, -1000, 508, 695,
	-1000, 695, -1000, -1000, -1000, 486, 15076, -1000, 13354, -1000,
	15814, 931, 15568, -1000, 681, -1000, -1000, -1000, 800, 1123,
	1123, 1123, 1142, 124, 122, 101, -5, 13846, -1000, 262,
	-5, 6220, 6220, -1000, -1000, 260, -1000, 283, 11622, 25,
	-1000, 6736, -1000, 760, 1044, 626, 623, 1043, -79, 13354,
	13846, 13846, 539, 15322, -1000, 1042, 103, 1038, -1000, 102,
	1036, -1000, -26, -1000, -1000, -1000, -1000, -1000, -1000, 260,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11878, 548, 11878, -1000, -1000, 1169, -1000,
	-1000, 2, 1, 869, 883, 9584, 9328, 1081, 1092, -1000,
	-1000, -1000, 32, 4140, 13846, 993, 11878, 13846, 13846, 13846,
	-1000, 13846, -1000, 861, -1000, 13846, -1000, -1, -3, -1000,
	15076, -1000, 105, -1000, 251, 828, 14830, 1049, 827, -1000,
	800, -1000, 762, 854, 7270, 8044, 101, -1000, -1000, 101,
	101, 8044, -1000, -1000, 13846, -5, 1165, 13846, 137, -1000,
	19831, -1000, -1000, 8044, 8044, 8044, 8044, 8044, 678, -1000,
	-1000, -1000, 4654, -1000, -1000, 25, 250, 275, -1000, -1000,
	249, 25, -1000, -1000, -1000, -1000, 245, 1279, 398, -1000,
	-1000, -1000, 8044, 333, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 991, 242, 241, -1000, -1000, -1000, -1000,
	239, 236, 234, 231, 230, 229, 223, 218, 196, 194,
	193, 192, 189, 650, -1000, 349, -1000, -1000, 349, 349,
	-1000, 175, 175, 176, -1000, -1000, -1000, 175, -1000, -1000,
	-1000, 321, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 188,
	137, -1000, -1000, -1000, 13846, 25, -1000, -1000, -1000, 8044,
	3883, -30, -1000, 20455, -1000, -22, 639, -1000, 12862, 1101,
	1098, 1102, 13354, 485, 474, 13846, 13846, 340, 79, 1160,
	79, 11110, -1000, 13846, 13846, -1000, 13846, -1000, -1000, 13846,
	-1000, 13846, 13846, 22, 12370, 471, -11, 12124, 13846, -1000,
	23, -1000, -1000, 977, 391, 645, 903, 833, -1000, -1000,
	-1000, -1000, -7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1243, -1000, -1000, -1000, -1000, 1264, -7,
	-1000, -1000, -1000, -1000, -1000, 1277, -1000, -1000, -1000, -1000,
	4140, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13846, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 645, 903, -1000, -1000,
	13354, 12616, 1035, 750, 826, -1000, -1000, 306, 1032, -1000,
	-1000, -1000, -1000, 20455, -1000, 20455, 594, 918, -1000, 918,
	-8, -1000, 19560, -1000, 185, -31, -1000, 340, 6220, 10854,
	21097, 13846, 494, 8044, 8044, 8044, 8044, 8044, 8044, 8044,
	8044, 8044, 8044, 8044, 8044, 8044, 8044, 8044, 8044, 8044,
	8044, 8044, 8044, 8044, 8044, 755, 470, 1205, 703, 173,
	4140, -1000, 1226, 1226, 1226, 20747, 20747, 186, 10, 19220,
	-9, 25, -1000, -1000, 5944, 5686, 25, 3294, -1000, 581,
	1261, 347, 20455, 1007, 945, 181, 120, 113, 8044, 571,
	8044, 8302, 8044, 8044, 4912, 8044, 8044, 8044, 8044, 8044,
	8044, -1000, 180, -1000, -1000, -1000, -1000, 1260, -1000, -1000,
	1259, -1000, 493, 456, 1258, 340, 111, -1000, 2206, -1000,
	-1000, 6736, -1000, 595, 13846, 13846, 13846, -1000, -1000, 820,
	14584, -1000, 21097, 13846, -1000, 179, 177, 893, 887, 13846,
	13846, 14338, 14092, 13846, 684, 13846, 13846, 622, -1000, 585,
	8044, 617, -1000, 10342, 355, 13846, 604, 53, -1000, -1000,
	-1000, 305, 13846, -1000, -1000, -1000, 103, -1000, 102, -1000,
	-1000, 13846, 12124, -11, -17, -1000, -1000, 13846, 903, -1000,
	-1000, -1000, 570, -1000, 632, -1000, 9840, -1000, -1000, -1000,
	581, -1000, -25, -1000, -1000, -1000, -1000, 110, -20, -1000,
	-1000, -1000, -1000, -1000, 13846, 243, 13846, 13846, 13846, 1031,
	1276, 13846, -1000, -1000, -1000, 8044, -1000, -1000, -1000, 22,
	13846, -1000, 941, -1000, -21, 1733, -132, 13108, -1000, 10086,
	-1000, 1172, -1000, -1000, -1000, -1000, 63, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 176, 650,
	175, 175, 175, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	321, -1000, 349, 349, 349, -1000, -1000, -1000, 325, 582,
	582, 1211, 1211, 1211, 1211, 125, 125, 705, 211, 2175,
	2175, 2175, 1127, 466, 466, 2175, 2175, 2175, 20747, 20482,
	438, 8044, 460, 694, 173, 8044, -1000, 1014, -1000, -1000,
	-1000, 976, 172, 8302, 8302, -1000, -1000, -1000, 4654, -1000,
	-1000, 171, 8044, -1000, 8044, -32, -114, -1000, 20455, -1000,
	-36, -1000, -1000, -18, 8044, 8044, 8044, 109, -1000, 458,
	-1000, 457, 454, 441, -1000, 168, 99, 513, -1000, 8044,
	682, 164, 163, 8044, -1000, -1000, 20436, 98, 975, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 97, 20171, 95, 20991,
	-1000, 8302, 8302, 8302, 4654, 162, 94, 19533, -65, 20152,
	6994, 6994, 6994, 93, 20115, 8044, -65, 2816, 2791, 2526,
	-38, -42, -48, 1253, -49, 82, 324, 318, 81, 941,
	-1000, -1000, 8044, -1000, -1000, -1000, 424, 422, 1030, -1000,
	814, -1000, 565, 8044, 13846, 161, 159, 671, -1000, 1029,
	726, 1027, 726, -1000, -22, 590, -1000, -1000, 421, -1000,
	6220, 20455, -1000, 596, 1107, -53, -1000, -1000, -1000, 6220,
	340, 11110, 6736, -54, -1000, -1000, -25, -1000, -25, -1000,
	-1000, -1000, -1000, -1000, -1000, 13846, -1000, 12616, 158, 13846,
	156, 155, 154, 13846, -1000, 1049, -1000, 80, -1000, -1000,
	-1000, -1000, -1000, 938, 1139, 10854, 901, 898, 10854, 988,
	714, 714, 714, -1000, 13108, 3613, -1000, -1000, 13846, 151,
	10598, 75, 1733, 277, 276, -1000, 1250, 8044, 438, 8044,
	8302, 8302, -1000, 438, -1000, -1000, -1000, -1000, 974, 150,
	8044, 21097, 20853, 20814, -55, 5428, -27, 19201, 8044, -1000,
	-1000, 275, -1000, 73, 6478, -1000, 19850, -4, -4, -1000,
	839, 700, 690, 546, 1248, 1274, 1017, -1000, 8044, 19887,
	-1000, 11366, 343, 693, 18936, 21097, -1000, 8044, -1000, 972,
	8044, -1000, 21097, 8302, 8302, 8302, 8302, 8302, 8302, 8302,
	8302, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 8302, 8302,
	8302, 8302, 864, 8302, 1223, 1223, 1223, -28, 5170, -1000,
	990, 972, 8044, 8044, 21097, 72, 71, 70, -1000, 8044,
	-65, 8044, 8044, 8044, -1000, -1000, -1000, 68, -1000, 1246,
	-1000, -1000, -1000, -1000, 938, 19247, 13846, 13846, 13846, 1009,
	1843, -1000, 18909, -61, 13846, 13846, -1000, 919, 920, 380,
	13846, -1000, 13846, -1000, 13846, 13846, 13846, 13846, -35, 6220,
	170, 22, 13846, -35, 585, -1000, -1000, 298, -1000, -1000,
	8814, 149, 13846, 12616, 8814, 733, -1000, -1000, 336, 8044,
	8044, 1733, 10854, 10854, 1308, 890, 10854, -1000, -1000, -1000,
	-1000, -1000, -1000, 889, 148, 13846, 13108, 409, 1231, 67,
	1167, 438, 20794, 20660, 8044, 21097, 20766, -63, -1000, 8044,
	8044, -1000, -67, -1000, 8044, -1000, 20455, -1000, 1273, 8044,
	61, 58, 57, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	55, -1000, -1000, 20455, 8044, -1000, -1000, 18028, 8044, 50,
	-1000, 46, 20455, 990, 20455, -1000, 592, 592, 1223, 1223,
	1223, 1223, 841, 841, 1003, 1674, 1192, 1192, 1192, 1538,
	400, 400, 1192, 1192, 1192, 968, 860, 145, 20881, 8044,
	-68, -1000, -1000, -1000, 20455, 20455, 45, -1000, -1000, -1000,
	-65, 2499, 18890, 18625, -1000, 44, 336, -1000, -1000, -1000,
	-1000, 13846, -1000, 13846, -1000, 13846, 810, -1000, -1000, 870,
	144, 8302, 13846, -1000, 686, -69, -73, 793, -1000, 786,
	8044, -1000, 21097, 726, 726, -1000, 407, 401, -1000, -35,
	1054, 13846, 1097, -1000, -1000, -1000, 143, -77, -1000, 212,
	1124, 8044, -1000, -1000, 142, 8814, -81, -1000, -1000, 39,
	-82, 13846, -1000, 13846, 20455, -65, -1000, 1308, -1000, 140,
	8044, 10854, -1000, -146, -1000, 226, -1000, 13846, -83, -1000,
	-1000, 268, 213, -1000, 8044, 8044, 20766, -88, -1000, 21097,
	438, 438, -1000, 18598, -1000, 19850, -1000, -1000, -1000, -1000,
	20455, 666, -1000, 18579, -1000, -1000, -1000, 8302, 963, 139,
	21097, 18314, -1000, -1000, 8044, -1000, -1000, -1000, -1000, -1000,
	1496, -1000, -1000, -1000, 8044, 20881, 138, -1000, 136, -1000,
	-1000, -1000, 597, -1000, -1000, 20455, 1125, -1000, -1000, 13846,
	13846, 453, -90, 13846, -1000, -1000, 4396, 686, 8814, 1119,
	25, 13846, 1119, 18287, 3294, -92, -1000, 13846, -1000, 686,
	132, -50, -1000, 1157, -1000, 13846, 20455, -1000, 889, -1000,
	4140, -94, -1000, -1000, -1000, 438, 438, -1000, -1000, -1000,
	38, 693, 1130, -1000, 788, 8302, 21097, -100, -1000, 18268,
	-1000, 2847, 847, 13846, 13846, 13846, 360, 13846, -1000, -1000,
	535, -1000, 340, -1000, -1000, -1000, -1000, -1000, -1000, 1124,
	-18, 686, -1000, -1000, 8814, 13846, 128, -101, -1000, -1000,
	-1000, -1000, 578, 8044, 788, -106, -1000, -1000, -1000, 727,
	677, 37, -112, 104, -1000, 8044, -1000, 11110, -1000, 1119,
	36, -1000, -122, -1000, -1000, -1000, 27, 7786, 7786, -65,
	-1000, -1000, 731, 730, 527, -1000, -1000, -1000, -1000, -1000,
	847, 13846, 20455, -102, -1000, -1000, 686, -1000, -1000, -1000,
	8558, 774, 564, 19514, -1000, -1000, 1061, -1000, 368, 718,
	718, 727, -134, -1000, -1000, 1178, -1000, -1000, -1000, -1000,
	-1000, -1000, 1193, -1000, -1000, 882, -1000, -1000, -1000, 7528,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1545, 1543, 1164, 1539, 1535, 1529, 1527, 1525, 99,
	1523, 1520, 119, 1519, 88, 1518, 1514, 1506, 1505, 43,
	1504, 1503, 1496, 1495, 1493, 83, 30, 160, 2123, 150,
	1491, 1490, 1489, 9, 101, 97, 1488, 86, 58, 90,
	105, 700, 68, 1487, 1485, 125, 27, 19, 102, 98,
	133, 139, 124, 1484, 1483, 1481, 40, 1480, 1478, 1477,
	1476, 45, 21, 1474, 25, 1473, 14, 1470, 1468, 100,
	1467, 104, 114, 23, 113, 144, 1456, 73, 12, 69,
	1455, 29, 1452, 35, 72, 126, 1451, 42, 298, 51,
	28, 47, 1448, 1447, 1441, 1440, 67, 89, 50, 1434,
	1433, 74, 1431, 118, 123, 1430, 1429, 117, 1428, 1426,
	1425, 645, 1424, 1423, 576, 3, 37, 59, 5, 109,
	107, 32, 1419, 16, 1416, 1371, 724, 504, 1413, 53,
	38, 78, 44, 54, 18, 1409, 103, 1408, 1406, 1404,
	1402, 1389, 76, 1387, 60, 129, 39, 46, 81, 33,
	20, 36, 82, 115, 134, 108, 1385, 110, 1384, 65,
	1382, 1381, 684, 85, 1378, 1375, 1372, 659, 598, 531,
	185, 1368, 1366, 457, 184, 1358, 1356, 79, 1353, 1351,
	130, 1344, 131, 22, 1343, 112, 1342, 95, 1341, 0,
	106, 75, 1339, 122, 70, 1338, 1331, 1328, 1327, 26,
	2, 10, 6, 7, 4, 24, 11, 1322, 1321, 120,
	93, 1320, 138, 1318, 1317, 17, 1316, 1314, 15, 1312,
	13, 1311, 8, 1, 1304, 128, 1302, 92, 1300, 1186,
	1294, 132, 1293, 1292, 1206, 80,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 158, 158, 157, 13, 18, 225, 225, 225,
	229, 229, 230, 230, 231, 231, 231, 231, 231, 231,
	231, 227, 227, 21, 21, 21, 21, 111, 111, 113,
	113, 113, 113, 40, 110, 110, 110, 110, 112, 112,
	112, 112, 182, 180, 180, 187, 187, 187, 53, 53,
	53, 53, 53, 54, 54, 54, 179, 179, 179, 179,
	188, 188, 188, 188, 188, 188, 55, 55, 55, 186,
	186, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 181, 181, 226, 226, 228,
	228, 8, 8, 56, 56, 57, 57, 117, 117, 117,
	117, 116, 197, 197, 198, 198, 198, 199, 199, 199,
	199, 199, 199, 199, 195, 195, 196, 193, 193, 194,
	194, 194, 194, 232, 232, 115, 115, 60, 60, 202,
	202, 202, 202, 200, 200, 200, 200, 200, 203, 201,
	204, 204, 204, 204, 204, 145, 145, 145, 24, 7,
	7, 100, 100, 64, 64, 149, 149, 149, 65, 65,
	150, 47, 47, 33, 33, 33, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 101, 101, 102, 102, 16,
	20, 23, 23, 23, 23, 23, 234, 234, 44, 44,
	44, 44, 45, 45, 114, 114, 114, 114, 114, 39,
	6, 6, 38, 38, 14, 14, 14, 14, 14, 50,
	50, 107, 107, 107, 109, 109, 108, 108, 108, 87,
	87, 25, 78, 78, 79, 79, 156, 80, 80, 19,
	19, 28, 28, 26, 26, 26, 26, 26, 26, 27,
	27, 29, 29, 29, 29, 29, 29, 29, 210, 210,
	210, 212, 212, 209, 15, 15, 15, 15, 211, 211,
	233, 233, 88, 88, 88, 59, 58, 58, 62, 62,
	61, 63, 63, 148, 85, 85, 85, 85, 103, 104,
	104, 105, 105, 106, 106, 84, 84, 132, 132, 30,
	30, 69, 69, 70, 70, 123, 123, 124, 124, 122,
	122, 122, 151, 151, 151, 151, 152, 152, 152, 152,
	152, 152, 146, 146, 146, 146, 147, 147, 91, 91,
	91, 91, 89, 89, 90, 90, 153, 153, 153, 153,
	86, 86, 154, 154, 154, 118, 118, 159, 159, 159,
	68, 68, 68, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 161, 161, 161, 161, 163, 163,
	163, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 164, 164, 171, 171, 172, 172,
	173, 174, 165, 165, 166, 166, 167, 168, 175, 175,
	175, 175, 177, 177, 169, 169, 169, 169, 169, 170,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 98, 98, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 205,
	205, 205, 205, 205, 205, 205, 207, 207, 208, 208,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 213, 213, 214, 214, 215,
	215, 216, 216, 218, 219, 219, 219, 220, 224, 224,
	217, 217, 221, 221, 221, 222, 222, 223, 223, 223,
	223, 223, 136, 136, 136, 137, 137, 138, 75, 75,
	134, 134, 133, 133, 133, 135, 135, 92, 176, 176,
	176, 176, 176, 176, 176, 93, 93, 99, 94, 94,
	95, 95, 95, 95, 95, 95, 129, 130, 96, 96,
	96, 131, 131, 139, 143, 143, 142, 141, 141, 140,
	140, 121, 121, 121, 121, 120, 119, 81, 81, 235,
	235, 144, 144, 82, 82, 83, 77, 77, 155, 155,
	155, 155, 71, 71, 52, 52, 72, 72, 48, 48,
	51, 49, 49, 49, 49, 66, 66, 67, 67, 46,
	46, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 178, 178, 178, 41, 41, 41, 42, 42,
	43, 43, 184, 184, 184, 185, 185, 185, 185, 183,
	183, 183, 183, 183, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 2, 0, 3, 1, 2, 2, 1, 1,
	2, 4, 2, 5, 6, 7, 5, 3, 1, 4,
	5, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 10,
	13, 1, 0, 1, 3, 3, 3, 5, 1, 3,
	1, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 1, 3, 3, 0, 3,
	4, 7, 3, 0, 6, 6, 8, 5, 7, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	0, 8, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 3, 1, 1, 3, 2,
	4, 0, 3, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 4, 5,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 2, 2, 1, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -211, 83, 90, 105, 192,
	199, -26, -28, 207, 208, 29, 215, 52, 86, 194,
	189, 234, 58, -210, -29, -27, 279, 255, 261, 202,
	-30, 221, 248, 282, 221, 70, 116, 78, 120, 242,
	241, 70, 116, 221, -12, 279, -19, -14, -25, -9,
	-229, 18, -230, -231, 58, 83, 105, 202, 120, 78,
	241, -229, -45, 199, -41, 4, -189, -191, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 95, 96, 99, 101, 106, 111, 112,
	117, 120, 128, 130, 131, 136, 139, 142, 144, 145,
	146, 147, 148, 150, 151, 153, 155, 152, 158, 160,
	161, 167, 170, 173, 174, 177, 180, 181, 182, 184,
	185, 189, 187, 188, 190, 192, 194, 195, 197, 200,
	201, 204, 205, 207, 208, 210, 212, 214, 215, 218,
	216, 222, 223, 230, 234, 235, 236, 237, 240, 241,
	242, 245, 246, 247, 251, 256, 257, 258, 259, 30,
	31, 32, 34, 35, 38, 39, 43, 44, 45, 47,
	72, 74, 75, 89, 91, 97, 107, 109, 113, 114,
	121, 122, 123, 125, 134, 157, 159, 168, 172, 176,
	178, 183, 196, 203, 211, 217, 219, 225, 226, 227,
	231, 232, 248, 249, -111, 139, 205, 230, -112, -110,
	-182, 225, 148, -73, -41, 199, 4, 70, 51, 71,
	106, 116, 117, 131, 222, 225, 230, 18, 58, -234,
	230, 230, -234, -234, -44, 230, 228, -45, -233, 221,
	221, -100, 70, 239, -27, -29, -28, -61, -62, 238,
	124, 88, 166, -26, -28, -210, -212, 184, -209, -41,
	-212, -58, -59, 18, 80, 283, -153, -48, 164, -41,
	-83, 279, -3, -153, 113, -41, -51, 113, -48, 103,
	126, 126, -154, -153, -41, 113, -52, 113, -51, -74,
	113, -73, -158, -157, -185, 4, -189, -191, -190, 248,
	49, 59, 104, 119, 127, 129, 135, 137, 149, 169,
	171, 193, 209, 163, 283, 163, -41, -111, 45, -111,
	-113, -39, -40, 128, 180, 228, 264, 103, 259, -55,
	5, 76, -76, 281, 103, -226, 163, 103, 103, 103,
	-181, 103, 259, 128, 180, 221, -114, -39, -40, -114,
	228, -45, -86, -153, -73, 113, 116, -41, 113, -61,
	-62, -85, -103, -104, 138, 162, -88, 18, 80, -88,
	-88, 37, 280, 280, 283, -212, -67, 279, -77, -155,
	-125, 272, -127, 270, 271, 276, 154, 260, -136, -48,
	-128, 9, 279, -139, -207, -28, 89, 24, -137, -138,
	196, -41, 7, 8, 5, 6, -46, -161, -170, 233,
	92, 156, 41, -205, -206, 4, -189, -184, -162, -172,
	-166, -169, 125, 49, 63, 66, 64, 67, 206, 243,
	42, 91, 172, 176, 219, 231, 232, 113, 157, 114,
	47, 107, 134, 82, 31, 32, 34, 35, 43, 44,
	72, 74, 75, 97, 121, 122, 123, 159, 183, 211,
	217, 226, 227, 249, -190, -173, -174, -167, -168, -175,
	-77, -83, 272, -48, 279, -81, -121, -120, -119, 277,
	281, -82, -144, -125, 76, -35, 187, -34, 17, 19,
	83, 246, 89, 187, 187, 89, 284, -154, -50, -48,
	-50, 207, -41, 25, 89, -37, 283, 40, 190, 89,
	-37, 283, 89, 280, 283, -225, -72, 221, 70, -49,
	-41, 272, -231, -225, 25, 283, 283, 136, -54, 142,
	153, 111, -180, 76, -187, -179, -145, 9, 233, 92,
	163, -186, 8, 271, -178, -185, 5, 7, 270, -180,
	76, 61, -188, 5, 4, -170, -145, 76, 139, 125,
	281, -183, 4, -189, -191, -190, -192, 18, 20, 21,
	22, 23, 24, 25, 26, 27, 36, 41, 42, 46,
	48, 50, 56, 58, 62, 63, 64, 65, 66, 67,
	76, 77, 79, 80, 81, 84, 86, 88, 92, 93,
	94, 100, 102, 103, 105, 108, 110, 115, 116, 118,
	124, 126, 132, 133, 138, 140, 141, 154, 156, 162,
	163, 164, 165, 166, 175, 179, 186, 191, 202, 206,
	213, 220, 221, 224, 228, 229, 233, 238, 239, 243,
	244, 250, 252, 253, 254, 255, -182, -228, 100, -225,
	-182, -182, -182, -182, 136, -182, 283, 283, -45, -37,
	283, 279, 154, -42, 113, -41, -38, 85, 154, -85,
	-104, -103, -105, -125, 18, -125, -127, -27, -27, -27,
	-63, -148, -125, -209, 25, -66, -41, -69, 283, 103,
	10, 48, 28, 270, 271, 272, 273, 98, 274, 267,
	268, 269, 266, 262, 263, 264, 54, 143, 198, 12,
	13, 14, 22, 165, 137, 260, 209, 127, 30, 115,
	25, 4, -125, -125, -125, -125, -125, 171, -28, -125,
	-75, -81, -28, -133, 277, 279, -81, 279, 5, 5,
	279, -140, -125, -213, 256, 100, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 178, -177, 251, -177, -177, -163, 279, -163, -164,
	279, -163, 257, 261, 279, -69, -48, -121, -125, -183,
	272, 283, 280, 283, 228, -101, 56, 50, -116, 113,
	50, -193, -41, 56, -194, 46, 239, 179, 102, -101,
	56, -101, 56, 56, -153, 228, 228, -51, -41, -118,
	253, -107, -19, 279, 76, 25, -107, -78, -79, -156,
	-80, -48, 279, -41, -41, -51, -52, -73, -74, -12,
	-157, 228, 283, -72, -66, -120, -119, 103, 230, -40,
	-39, -53, 182, 212, 188, 204, 283, 8, 7, 7,
	5, -183, -227, -41, -40, -39, -153, -56, -57, -117,
	-116, -195, -196, -193, 116, 239, 93, 89, 163, 154,
	264, 89, -106, 196, 197, 283, -33, 26, 79, 279,
	283, 280, -118, -155, -70, -151, -153, -28, -152, 279,
	-159, -160, -162, -171, -165, -169, -170, 33, 39, 38,
	223, 203, 121, 122, 123, 211, 31, 183, 97, 82,
	75, 74, 159, 35, 34, -173, -174, -167, -168, 72,
	226, 227, 32, 44, 43, 249, 217, -73, 225, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, 137, 209, 30, 115, 228, 156, 154, 233, 92,
	240, 80, 160, -235, 220, 27, -131, -28, 279, -183,
	-136, 196, 279, 280, 283, -75, -135, 278, -125, -133,
	-75, 280, 280, -75, 250, 18, 80, 272, -97, 258,
	146, 73, 112, 145, -98, 201, 7, -143, -142, 252,
	-214, 95, 108, 279, 280, 280, -125, -92, -176, 4,
	258, 146, 73, 112, 145, 201, -93, -125, -94, -126,
	-127, 270, 271, 276, 279, 196, -95, -125, -75, -125,
	36, 133, 229, -96, -125, 103, -75, -125, -125, -125,
	-75, -75, -75, 279, 7, 7, 225, 225, 7, -118,
	280, 278, 287, -144, -34, -48, -41, -41, 154, -116,
	113, -159, -41, 279, 279, 130, 130, -41, -41, 113,
	-41, 113, -41, -41, -35, 187, -41, -41, 187, -87,
	191, -125, -87, -109, 163, -71, -48, 248, -41, 191,
	-69, 283, 264, -71, -37, -37, -227, -49, -227, -39,
	237, 53, 182, -187, -97, 283, 280, 283, -42, 116,
	-42, -73, -48, 89, 5, -41, -148, -15, -19, -14,
	-25, -9, -41, -84, 108, 283, 59, -91, 129, 149,
	104, 135, 193, 119, -122, 284, -147, -146, 25, -41,
	-28, -152, -151, -68, 24, -97, 279, 259, -125, 228,
	-235, 220, -131, -125, 156, 233, 92, 240, 80, 160,
	103, 279, -126, -126, -75, 279, -75, -125, 283, 278,
	278, 283, 280, -62, 283, -61, -125, -75, -75, 280,
	228, 228, 228, 228, 279, 280, -141, -142, 84, -125,
	-219, 170, 279, 279, -125, 25, 280, 103, 280, -99,
	175, 280, 10, 270, 271, 272, 273, 98, 274, 267,
	268, 269, 266, 262, 263, 264, 54, 143, 198, 12,
	13, 14, 127, 115, -126, -126, -126, -75, 279, 280,
	-129, -130, 103, 100, 25, -96, -96, -96, 280, 103,
	-75, 283, 283, 283, 280, 280, 280, 7, 280, 283,
	280, 259, 259, 280, -84, -125, 228, 228, 89, 154,
	-197, -194, -125, -66, 279, 279, -32, 83, 207, -102,
	89, -37, 89, -37, 228, -101, 56, 228, -77, 191,
	55, 280, 283, -77, -118, -79, -144, 280, -41, -117,
	279, -42, 279, 279, 279, -41, -38, 280, -132, 110,
	37, -151, 129, 129, -151, -91, 129, -89, 169, -89,
	-89, -147, -183, 285, -41, 279, 280, 277, 277, 7,
	-125, -125, -126, -126, 103, 279, -125, -134, -159, 22,
	22, 280, -75, 280, 283, 280, -125, -133, 280, 250,
	-62, -62, -62, 146, 112, 145, -98, 145, -98, -98,
	7, 5, 86, -125, 224, -220, -41, 279, 253, -61,
	280, -159, -125, -129, -125, -159, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, 80, 154, 160, -126, 283,
	-75, 280, -130, -129, -125, -125, -159, 280, 280, 280,
	-75, -125, -125, -125, 280, 7, -132, 278, -41, -41,
	-116, 89, -198, 56, -199, 48, 154, 156, 239, 179,
	46, 76, 186, 280, 280, -66, -66, 154, 76, 154,
	76, 69, 235, -41, -41, -48, -41, -41, -41, -77,
	-108, 279, 163, -19, -48, -87, 264, -64, -149, -41,
	-208, 279, -205, -206, -46, 279, -65, -150, -41, -56,
	-64, 163, -215, 254, -125, -75, -151, -151, -90, 244,
	163, 129, -151, -124, -123, 101, 152, 279, -66, -146,
	278, 7, 7, 280, 22, 22, -125, -134, 280, 283,
	-125, -125, 280, -125, 5, -125, 280, 280, 280, 280,
	-125, -224, -41, -125, 280, 280, -130, 103, 80, 160,
	279, -125, 280, 280, 283, 280, 280, 280, -215, -116,
	-41, -73, 156, 130, 279, -126, -48, -115, -232, 57,
	218, 280, 280, 156, 156, -125, -159, -37, -37, 228,
	228, 81, -66, 56, -83, -28, 279, 280, 283, -47,
	-81, 48, -47, -125, 279, -64, 280, 283, 280, 280,
	-48, -216, -218, -41, -90, 279, -125, -151, 283, 286,
	264, -66, 280, 278, 278, -125, -125, 280, -159, 280,
	-62, -217, 174, 280, -126, 103, 279, -134, 280, -125,
	-199, -125, -43, 279, 279, 186, -36, 48, -41, -41,
	241, 155, 280, -41, -115, -149, -33, -73, -33, 280,
	-75, 280, -150, -115, 279, 283, 25, -66, -123, -183,
	280, 280, -62, 37, -126, -134, 280, 280, 280, -202,
	144, -41, -66, -48, -31, 244, -73, 207, -118, -47,
	-62, -115, -64, -218, -220, 280, -221, 181, 197, -75,
	280, -200, -203, -201, 163, 104, 173, 210, 280, 280,
	-60, 279, -125, -78, -33, 280, 280, 280, -222, -223,
	30, 236, 61, -125, -222, -201, 163, -203, 163, 241,
	78, -202, -66, -118, -115, -223, 177, 99, 196, 177,
	99, -204, 151, 190, 40, 207, -204, -200, 280, 22,
	16, 156, 76, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 329, 0, 0,
	0, 299, -2, 0, 0, 257, 0, 257, 257, 261,
	0, 331, 222, 328, -2, 339, 0, 0, 0, 337,
	313, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 250, 835, 263, 745, 746, 747, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 93, 802, 839, 850, 98, 108,
	0, 904, -2, 112, 62, 835, 141, 142, 0, 144,
	158, 0, 0, 0, 156, 0, 0, 153, 0, 268,
	256, 268, 253, 254, 255, 258, 0, 249, 0, 330,
	0, 0, 0, 221, -2, 309, 310, -2, 0, 334,
	334, 334, 0, 0, 310, 0, 318, 825, 321, 728,
	319, 0, 0, 336, 335, 0, 314, 396, 0, 718,
	359, 0, 2, 0, 885, 0, 0, 885, 0, 0,
	0, 0, 0, 402, 54, 885, 45, 885, 714, 45,
	885, 60, 0, 72, 74, 755, 756, 757, 758, 909,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 0, 0, 0, 262, 94, 875, 96,
	97, 99, 100, 0, 0, 0, 0, 0, 0, 111,
	136, 137, 63, 0, 0, 160, 0, 0, 0, 0,
	149, 0, 150, 0, 152, 0, 251, 264, 265, 252,
	0, 260, 45, 400, 0, 885, 749, 273, 885, -2,
	0, 305, 346, 347, 0, 0, 0, 332, 333, 0,
	0, 0, 301, 302, 0, 320, 0, 0, 362, 706,
	710, 711, 486, 0, 0, 0, 0, 0, 0, 567,
	568, 569, 0, 571, 572, 573, 880, 0, 577, 578,
	899, 718, 731, 732, 733, 734, 0, 0, 0, 739,
	740, 741, 690, 616, 587, -2, -2, 729, 424, 425,
	426, 427, -2, 911, 591, 593, 595, 596, 597, 598,
	0, 881, 895, 896, 903, 907, 908, 885, 892, 886,
	876, 883, 891, 785, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 754, 448, 449, 454, 455, 457,
	362, 360, 397, 398, 0, 719, 697, 691, 692, 0,
	0, 0, 703, 701, 702, 22, 246, 24, 0, 246,
	246, 0, 0, 0, 0, 0, 0, 406, 0, 279,
	0, 0, 403, 0, 0, 56, 0, 43, 44, 0,
	58, 0, 0, 329, 0, 0, 77, 0, 781, 716,
	721, 724, 83, 0, 0, 0, 0, 0, 103, 123,
	124, 125, 104, 106, 113, 115, 116, 117, 126, 127,
	128, 129, 215, 0, 217, 139, 140, 742, 0, 105,
	107, 109, 110, 130, 131, 0, 133, 134, 135, 469,
	0, 64, 759, 760, 761, 762, 763, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 143, 145, 0, 157,
	146, 147, 148, 155, 151, 154, 0, 0, 259, 218,
	0, 164, 0, 0, 885, 748, 270, 0, 0, 308,
	344, 345, 348, 351, 352, 349, 486, 315, 316, 317,
	340, 341, 235, 322, 0, 0, 725, 406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 709, 490, 491, 492, 514, 515, 0, -2, 648,
	0, 574, 575, 576, 0, 0, -2, 0, 736, 483,
	0, 0, 689, 618, 0, 0, 0, 0, 0, 0,
	0, 669, 675, 0, 0, 0, 0, 0, 0, 0,
	0, 438, 451, 462, 459, 458, 440, 0, 439, 437,
	0, 441, 0, 0, 0, 406, 0, 698, 0, 695,
	696, 0, 705, 0, 0, 0, 0, 245, 26, 885,
	0, 36, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 720, 290,
	0, 290, 281, 0, 0, 0, 277, 362, 292, 294,
	295, 0, 0, 404, 55, 715, 45, 61, 45, 67,
	73, 0, 0, 78, 79, 722, 723, 0, 0, 101,
	102, 269, 0, 120, 0, 122, 0, 216, 744, 743,
	483, 65, 159, 91, 266, 267, 401, 0, 163, 165,
	167, 168, 169, 170, 749, 0, 749, 0, 0, 0,
	0, 0, 350, 353, 354, 0, 343, 233, 234, 329,
	0, 727, 356, 707, 361, 363, 371, 387, 374, 0,
	487, 412, 413, 414, 415, 416, 483, 419, 420, 421,
	422, 423, 431, 432, 433, 434, 435, 436, 445, 0,
	430, 430, 430, 442, 443, 446, 447, 452, 453, 464,
	465, 467, 463, 463, 463, 460, 461, 488, 0, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, -2,
	-2, -2, 506, 507, 508, -2, -2, -2, 512, 513,
	-2, 0, 0, 700, 0, 0, 520, 0, 523, 525,
	527, 0, 0, 0, 0, 699, 537, 681, 0, 708,
	522, 0, 0, 570, 0, 0, 0, 654, 648, 655,
	0, -2, 579, 339, 0, 0, 0, 0, 737, 470,
	471, 472, 473, 474, 475, 484, 0, 688, 684, 0,
	626, 0, 0, 0, 592, 594, 0, 0, 0, 658,
	659, 660, 661, 662, 663, 664, 0, 0, 0, 0,
	539, 0, 0, 0, 0, 899, 0, 648, 674, 0,
	0, 0, 0, 0, 648, 0, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 356,
	399, 693, 0, 704, 25, 237, 0, 0, 0, 28,
	885, 173, 0, 0, 0, 0, 0, 248, 37, 885,
	45, 885, 45, 38, 23, 246, 236, 239, 0, 53,
	0, 405, 274, 275, 0, 0, 712, 283, 280, 0,
	406, 0, 0, 0, 57, 59, 75, 717, 76, 95,
	118, 119, 121, 114, 132, 0, 161, 0, 0, 749,
	0, 0, 0, 0, 272, 273, 342, 0, 324, 325,
	326, 327, 726, 358, 0, 0, 0, 0, 0, 0,
	393, 393, 393, 391, 387, 0, 373, 386, 0, 385,
	-2, 374, 0, 407, 409, 417, 0, 0, -2, 0,
	0, 0, 538, -2, 521, 524, 526, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 0, 652,
	653, 0, -2, 0, 0, 338, 339, 339, 339, 585,
	0, 0, 0, 0, 0, 0, 0, 685, 0, 0,
	586, 0, 0, 0, 0, 0, 600, 0, 601, 0,
	0, 602, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 543, 0, 0, 603,
	672, 673, 0, 0, 0, 0, 0, 0, 608, 0,
	679, 0, 0, 0, 612, 613, 614, 0, 428, 0,
	444, 466, 468, 456, 358, 0, 0, 0, 0, 0,
	171, 187, 0, 0, 0, 0, 30, 0, 0, 0,
	0, 34, 0, 40, 0, 0, 0, 0, 289, 0,
	288, 0, 0, 278, 290, 293, 296, 0, 92, 166,
	0, 0, 0, 164, 0, 0, 271, 323, 620, 0,
	0, 364, 0, 0, 0, 0, 0, 388, 392, 389,
	390, 372, 369, 0, 383, 0, 376, 0, 0, 0,
	489, -2, 0, 0, 0, 0, -2, 0, 650, 0,
	0, 682, 0, 643, 0, -2, 649, 656, 580, 0,
	0, 0, 0, 476, 477, 478, 479, 480, 481, 482,
	0, 738, 683, 687, 0, 624, 625, 629, 0, 0,
	590, 0, 657, 666, 667, 540, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, -2, -2, -2, 557,
	558, 559, -2, -2, -2, 0, 0, 0, 668, 0,
	0, 646, 670, 671, 676, 677, 0, 605, 606, 607,
	678, 0, 0, 0, 450, 0, 620, 694, 241, 243,
	27, 0, 172, 0, 175, 0, 0, 178, 179, 0,
	0, 0, 0, 189, 196, 0, 0, 0, 42, 0,
	0, 247, 0, 45, 45, 238, 0, 0, 240, 276,
	0, 0, 0, 282, 713, 291, 0, 0, 223, 232,
	232, 0, 588, 589, 0, 0, 0, 228, 230, 0,
	0, 0, 311, 0, 357, 355, 377, 0, 379, 0,
	0, 0, 381, 0, 367, 0, 366, 0, 0, 375,
	410, 0, 0, 418, 0, 0, -2, 0, 531, 0,
	-2, -2, 642, 649, 735, 339, 581, 583, 584, 485,
	686, 631, 628, 0, 615, 599, 665, 0, 0, 0,
	0, 649, 645, 604, 0, 610, 611, 429, 312, 29,
	0, 176, 177, 180, 0, 182, 751, 190, 0, 193,
	194, 191, 0, 31, 32, 41, 47, 33, 39, 0,
	0, 0, 0, 0, 297, 298, 0, 196, 0, 235,
	730, 0, 235, 0, 0, 0, 186, 0, 162, 196,
	0, 619, 621, 0, 378, 0, 395, 380, 0, 370,
	0, 0, 384, 411, 408, -2, -2, 532, 651, 644,
	0, 339, 0, 617, -2, 0, 0, 0, 647, 0,
	174, 0, 202, 0, 0, 0, 49, 0, 242, 244,
	0, 285, 406, 287, 184, 224, 225, 231, 226, 232,
	339, 196, 229, 219, 0, 0, 0, 0, 368, 365,
	382, 582, 634, 0, -2, 0, 565, 609, 181, 207,
	0, 0, 0, 198, 35, 0, 46, 0, 286, 235,
	0, 185, 0, 622, 623, 394, 0, 0, 0, 630,
	566, 183, 203, 204, 0, 199, 200, 201, 750, 195,
	202, 0, 48, 406, 227, 580, 196, 627, 632, 635,
	-2, 853, 778, 0, 633, 205, 0, 206, 0, 0,
	0, 207, 0, 284, 220, 0, 637, 638, 639, 640,
	641, 208, 0, 211, 212, 0, 209, 192, 197, 0,
	210, 213, 214, 636,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 268, 3, 274, 269, 3,
	279, 280, 272, 270, 283, 271, 281, 273, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 287, 282,
	262, 264, 263, 3, 284, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 277, 3, 278, 267, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 285, 266, 286, 276,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 265,
	57605, 275, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:675
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:681
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:687
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:707
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:773
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:791
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:849
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:853
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:854
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1249
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1331
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{ /* unimplemented */
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1532
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = []string(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1568
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1571
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1585
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = true
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = false
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1671
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = Ascending
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = Descending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = true
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = false
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1758
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.str = ""
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.str = ""
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1895
		{
			unimplementedWithIssue(6637)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1902
		{
			unimplementedWithIssue(6637)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1944
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			unimplemented()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = []string(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			unimplemented()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2203
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2216
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2220
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = true
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = false
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = true
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2244
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2442
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2485
		{
			unimplemented()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.str = astFullJoin
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.str = astLeftJoin
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.str = astRightJoin
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.str = astInnerJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2572
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2573
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2663
		{
			unimplementedWithIssue(2115)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2664
		{
			unimplementedWithIssue(2115)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			unimplementedWithIssue(2115)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2668
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			unimplemented()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2725
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = nil
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2842
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2909
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2953
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3368
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3369
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3405
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3410
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3451
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3495
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3496
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3499
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3500
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3505
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3517
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3521
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3533
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3537
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3547
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3888
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4044
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4080
		{
			unimplemented()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = DNull
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.str = ""
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
