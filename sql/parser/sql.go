// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:315
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VARYING = 57612
const WHEN = 57613
const WHERE = 57614
const WINDOW = 57615
const WITH = 57616
const WITHIN = 57617
const WITHOUT = 57618
const YEAR = 57619
const ZONE = 57620
const NOT_LA = 57621
const WITH_LA = 57622
const AS_LA = 57623
const POSTFIXOP = 57624
const UMINUS = 57625

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4789

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	302, 26,
	-2, 366,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	1, 341,
	176, 341,
	206, 341,
	300, 341,
	302, 341,
	-2, 351,
	-1, 55,
	1, 344,
	176, 344,
	206, 344,
	300, 344,
	302, 344,
	-2, 350,
	-1, 64,
	1, 26,
	302, 26,
	-2, 366,
	-1, 281,
	1, 167,
	302, 167,
	-2, 864,
	-1, 314,
	151, 376,
	175, 376,
	-2, 347,
	-1, 317,
	151, 375,
	175, 375,
	-2, 345,
	-1, 447,
	151, 375,
	175, 375,
	-2, 348,
	-1, 503,
	299, 803,
	-2, 796,
	-1, 504,
	299, 804,
	-2, 797,
	-1, 510,
	5, 511,
	299, 511,
	-2, 954,
	-1, 533,
	5, 477,
	-2, 929,
	-1, 534,
	5, 505,
	299, 505,
	-2, 931,
	-1, 535,
	5, 485,
	-2, 932,
	-1, 536,
	5, 484,
	-2, 933,
	-1, 537,
	5, 505,
	299, 505,
	-2, 936,
	-1, 538,
	5, 505,
	299, 505,
	-2, 937,
	-1, 539,
	5, 506,
	-2, 940,
	-1, 540,
	5, 471,
	-2, 941,
	-1, 541,
	5, 471,
	-2, 942,
	-1, 542,
	5, 487,
	-2, 945,
	-1, 543,
	5, 472,
	-2, 950,
	-1, 544,
	5, 473,
	-2, 951,
	-1, 545,
	5, 474,
	-2, 952,
	-1, 546,
	5, 475,
	-2, 953,
	-1, 547,
	5, 471,
	-2, 957,
	-1, 548,
	5, 478,
	-2, 962,
	-1, 549,
	5, 476,
	-2, 965,
	-1, 550,
	5, 503,
	299, 503,
	-2, 967,
	-1, 551,
	5, 507,
	-2, 970,
	-1, 552,
	5, 509,
	-2, 971,
	-1, 553,
	5, 502,
	299, 502,
	-2, 975,
	-1, 878,
	97, 351,
	137, 351,
	151, 351,
	175, 351,
	179, 351,
	257, 351,
	-2, 623,
	-1, 886,
	299, 781,
	-2, 770,
	-1, 1081,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 546,
	-1, 1082,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 547,
	-1, 1083,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 548,
	-1, 1087,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 552,
	-1, 1088,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 553,
	-1, 1089,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 554,
	-1, 1092,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 559,
	-1, 1098,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 561,
	-1, 1101,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 566,
	-1, 1102,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 567,
	-1, 1103,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 568,
	-1, 1128,
	184, 694,
	-2, 697,
	-1, 1294,
	97, 351,
	137, 351,
	151, 351,
	175, 351,
	179, 351,
	257, 351,
	-2, 424,
	-1, 1298,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 560,
	-1, 1299,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 562,
	-1, 1304,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 563,
	-1, 1322,
	184, 693,
	-2, 696,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 564,
	-1, 1489,
	140, 0,
	-2, 578,
	-1, 1497,
	184, 695,
	-2, 698,
	-1, 1531,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 604,
	-1, 1532,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 605,
	-1, 1533,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 606,
	-1, 1537,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 610,
	-1, 1538,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 611,
	-1, 1539,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 612,
	-1, 1643,
	140, 0,
	-2, 579,
	-1, 1646,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 582,
	-1, 1647,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 584,
	-1, 1733,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 583,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 585,
	-1, 1741,
	140, 0,
	-2, 613,
	-1, 1786,
	140, 0,
	-2, 614,
	-1, 1839,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 928,
}

const sqlNprod = 1069
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24236

var sqlAct = [...]int{

	504, 1838, 1818, 1686, 1862, 1451, 1792, 1819, 1053, 963,
	1820, 1837, 318, 1508, 971, 1721, 1709, 589, 1608, 352,
	1635, 282, 1629, 41, 1568, 1609, 881, 339, 71, 502,
	501, 696, 494, 1622, 829, 807, 71, 71, 71, 1291,
	1033, 71, 1036, 883, 71, 1290, 1224, 466, 1463, 1281,
	810, 1378, 71, 1377, 1325, 1061, 18, 1035, 972, 71,
	71, 1473, 1002, 71, 569, 566, 71, 71, 71, 941,
	932, 1138, 683, 1174, 1114, 25, 1275, 1062, 14, 1111,
	986, 323, 1065, 825, 325, 54, 744, 760, 1028, 435,
	571, 243, 995, 7, 467, 1063, 351, 436, 476, 1177,
	585, 72, 353, 741, 354, 9, 771, 554, 913, 371,
	248, 317, 917, 247, 241, 8, 6, 4, 831, 54,
	367, 1039, 364, 328, 450, 449, 279, 366, 249, 55,
	269, 762, 451, 740, 965, 56, 758, 260, 676, 360,
	250, 477, 326, 964, 1728, 1869, 454, 1729, 1057, 54,
	245, 244, 246, 685, 1854, 685, 1835, 1057, 336, 1708,
	685, 342, 1826, 1816, 1811, 1057, 992, 1057, 322, 68,
	1788, 999, 1782, 992, 1235, 1057, 1772, 1762, 1735, 1708,
	1057, 992, 307, 1732, 315, 1718, 1057, 1279, 1708, 1005,
	314, 322, 834, 835, 345, 1716, 1707, 1691, 1057, 1708,
	1057, 60, 330, 1690, 337, 1289, 1057, 344, 347, 1278,
	1668, 1648, 1000, 1005, 1005, 837, 1645, 1595, 1594, 992,
	1005, 1005, 1580, 1493, 62, 1057, 1005, 1437, 1431, 1395,
	960, 960, 1396, 1236, 1393, 496, 836, 1005, 71, 71,
	71, 71, 1392, 374, 1391, 1005, 1776, 1005, 1001, 998,
	1322, 63, 1320, 1005, 1319, 581, 71, 1321, 58, 1005,
	1711, 833, 369, 697, 59, 1058, 323, 1014, 1057, 1004,
	1005, 71, 1005, 991, 71, 71, 992, 832, 1278, 959,
	834, 835, 960, 57, 1544, 929, 691, 1836, 928, 692,
	842, 1496, 1324, 1261, 930, 1263, 1057, 1007, 1122, 1052,
	1022, 355, 462, 837, 461, 356, 1003, 71, 800, 71,
	799, 71, 686, 71, 686, 1005, 752, 834, 835, 686,
	751, 400, 335, 64, 836, 355, 434, 448, 71, 356,
	356, 785, 442, 361, 420, 1833, 1825, 1783, 852, 71,
	837, 1717, 1673, 1669, 375, 1661, 968, 1660, 1659, 372,
	376, 71, 1654, 60, 1653, 1652, 1606, 592, 71, 71,
	71, 836, 71, 561, 556, 1559, 408, 997, 1600, 447,
	1554, 587, 1553, 1552, 409, 1499, 62, 1482, 842, 337,
	560, 347, 1462, 1441, 1458, 1400, 1348, 1349, 1397, 996,
	889, 1385, 1376, 71, 1347, 853, 1344, 1342, 1330, 1329,
	71, 1265, 71, 63, 441, 1262, 1191, 1119, 1145, 805,
	689, 1144, 684, 374, 374, 842, 461, 803, 834, 835,
	1828, 592, 71, 1235, 71, 71, 71, 71, 71, 71,
	71, 460, 349, 1510, 71, 57, 1363, 439, 786, 71,
	688, 837, 1802, 1775, 1754, 71, 834, 835, 1752, 1743,
	337, 832, 1725, 361, 1714, 315, 1705, 1683, 593, 1666,
	1638, 314, 836, 71, 594, 1616, 71, 457, 458, 837,
	463, 846, 838, 839, 840, 841, 843, 1488, 863, 60,
	563, 1439, 834, 835, 1354, 1481, 1459, 1456, 693, 1454,
	836, 1599, 586, 1411, 1410, 1120, 738, 675, 678, 337,
	677, 677, 62, 355, 323, 1605, 750, 356, 1375, 1348,
	1349, 1338, 1337, 802, 375, 375, 886, 1316, 1312, 1116,
	376, 376, 593, 1250, 1216, 1215, 836, 1203, 594, 63,
	1202, 1184, 1364, 1143, 337, 748, 58, 1056, 747, 918,
	921, 925, 59, 911, 842, 910, 909, 782, 787, 908,
	775, 791, 792, 793, 794, 795, 907, 790, 906, 555,
	798, 967, 840, 841, 843, 71, 863, 905, 904, 801,
	903, 902, 1203, 71, 813, 901, 815, 71, 900, 251,
	880, 71, 71, 814, 315, 899, 827, 315, 315, 1365,
	821, 898, 852, 822, 823, 897, 896, 838, 839, 840,
	841, 843, 887, 863, 885, 57, 1604, 1354, 340, 465,
	406, 396, 394, 884, 1244, 935, 562, 1243, 350, 834,
	835, 1730, 53, 1603, 414, 577, 1237, 509, 437, 1047,
	703, 923, 470, 894, 1399, 924, 1348, 1349, 1398, 1366,
	1367, 1368, 1297, 430, 946, 948, 915, 916, 33, 853,
	415, 781, 1642, 1457, 919, 1623, 34, 1798, 964, 1511,
	922, 1139, 1359, 1356, 1357, 1358, 1350, 1351, 1352, 1353,
	1355, 914, 951, 1333, 1231, 1849, 312, 1761, 804, 926,
	71, 1850, 71, 71, 890, 71, 1363, 562, 71, 272,
	71, 71, 1588, 374, 938, 234, 306, 1257, 305, 321,
	1013, 934, 558, 300, 863, 301, 927, 1422, 955, 1699,
	1150, 981, 369, 934, 1698, 942, 1425, 1403, 337, 933,
	1402, 1723, 347, 844, 845, 846, 838, 839, 840, 841,
	843, 1300, 863, 966, 1354, 966, 1249, 1248, 1247, 320,
	235, 1246, 1099, 71, 71, 572, 433, 573, 243, 1006,
	957, 572, 987, 573, 1348, 1349, 1188, 954, 412, 726,
	438, 1187, 1070, 392, 309, 1626, 1369, 248, 863, 1760,
	247, 989, 1438, 60, 988, 945, 54, 1426, 1009, 1220,
	54, 322, 1364, 583, 1800, 249, 592, 1153, 1688, 990,
	71, 1352, 1353, 1355, 375, 413, 62, 250, 1160, 372,
	376, 679, 984, 1027, 71, 71, 983, 245, 244, 246,
	980, 982, 979, 970, 1113, 1003, 574, 579, 572, 1113,
	573, 975, 574, 63, 1050, 1051, 347, 1309, 1154, 347,
	58, 1813, 1413, 919, 71, 922, 59, 71, 310, 1365,
	1307, 1059, 1016, 916, 915, 578, 1008, 1814, 1010, 1015,
	1011, 1139, 1354, 1859, 1849, 57, 313, 944, 1069, 319,
	1871, 1229, 1043, 1755, 1155, 1152, 1225, 1429, 237, 236,
	685, 592, 1233, 1218, 582, 1258, 411, 1446, 912, 1739,
	1706, 1348, 1349, 1096, 1366, 1367, 1368, 593, 1117, 574,
	1031, 1225, 1420, 594, 1256, 877, 1336, 1030, 1474, 1032,
	1364, 587, 834, 835, 931, 863, 587, 1305, 1360, 1361,
	1362, 1310, 1359, 1356, 1357, 1358, 1350, 1351, 1352, 1353,
	1355, 943, 1156, 1821, 1443, 837, 1214, 1060, 1126, 322,
	557, 1363, 71, 71, 71, 1003, 1190, 1848, 71, 410,
	1846, 71, 1348, 1349, 1621, 337, 836, 71, 71, 71,
	71, 71, 851, 1822, 725, 71, 1045, 1365, 71, 1689,
	1444, 71, 1414, 403, 405, 1858, 423, 238, 71, 401,
	71, 399, 593, 1094, 1097, 337, 1118, 71, 594, 1354,
	1198, 452, 1135, 1151, 1123, 1127, 71, 1130, 431, 575,
	1306, 323, 453, 411, 1192, 575, 1467, 1308, 1093, 570,
	842, 1693, 1877, 1169, 67, 453, 1692, 71, 71, 1181,
	1182, 1183, 1227, 71, 506, 258, 1213, 239, 1003, 1872,
	1302, 1193, 702, 374, 1681, 1112, 1823, 1364, 1540, 686,
	1359, 1356, 1357, 1358, 1350, 1351, 1352, 1353, 1355, 1636,
	1354, 71, 432, 71, 1664, 71, 71, 1857, 852, 71,
	1749, 1584, 1405, 1239, 66, 1240, 1442, 1197, 71, 261,
	1046, 812, 575, 806, 1824, 71, 1267, 71, 1230, 1018,
	703, 703, 1095, 1194, 1793, 1020, 1264, 1238, 1266, 489,
	266, 1241, 452, 1865, 1365, 262, 820, 1876, 1682, 797,
	323, 1021, 999, 1637, 1253, 1252, 753, 728, 1067, 1068,
	1019, 1254, 1222, 1255, 1587, 853, 1541, 69, 263, 586,
	1259, 1586, 1542, 987, 1205, 252, 253, 254, 586, 1260,
	271, 1204, 757, 283, 375, 265, 1632, 337, 1665, 240,
	376, 271, 989, 1000, 1583, 988, 1272, 1273, 329, 329,
	323, 54, 69, 1323, 1296, 69, 69, 348, 1469, 1295,
	990, 1468, 359, 1360, 1361, 1362, 755, 1359, 1356, 1357,
	1358, 1350, 1351, 1352, 1353, 1355, 65, 756, 358, 1001,
	998, 410, 1303, 320, 444, 703, 1301, 1452, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 1268, 863, 323,
	1607, 251, 1679, 1464, 1585, 1276, 1142, 1742, 1663, 726,
	726, 1863, 1380, 1200, 71, 1280, 1379, 1487, 337, 1332,
	264, 1343, 1680, 1311, 1221, 1012, 1315, 958, 429, 428,
	1317, 427, 1350, 1351, 1352, 1353, 1355, 1003, 703, 426,
	425, 424, 1327, 1328, 53, 421, 71, 71, 1409, 357,
	895, 789, 1864, 1817, 1433, 1382, 1383, 1384, 1141, 1790,
	1565, 1418, 1284, 267, 1416, 1404, 1242, 1269, 1048, 1866,
	33, 1044, 71, 985, 71, 1374, 71, 1401, 34, 1287,
	71, 1407, 690, 1428, 687, 682, 1387, 580, 576, 71,
	1282, 1432, 1417, 71, 1419, 1421, 1285, 1505, 997, 71,
	592, 811, 1435, 71, 1434, 71, 1700, 455, 1054, 333,
	1283, 1455, 261, 1436, 726, 1850, 1213, 1478, 417, 777,
	1445, 1447, 1448, 1702, 1631, 1423, 1424, 69, 362, 69,
	283, 1453, 1461, 266, 3, 727, 934, 950, 262, 1430,
	934, 1785, 949, 1471, 1477, 397, 947, 71, 1711, 1501,
	1502, 1503, 1284, 1757, 1490, 1465, 1286, 1475, 1476, 459,
	402, 263, 953, 283, 283, 1055, 1466, 726, 257, 1287,
	1470, 952, 1777, 969, 456, 1498, 334, 828, 265, 749,
	1472, 695, 994, 1874, 1875, 1560, 1285, 975, 337, 1449,
	780, 779, 1440, 773, 768, 60, 271, 418, 69, 341,
	283, 593, 445, 1512, 725, 725, 1394, 594, 268, 1517,
	1245, 1630, 299, 71, 71, 71, 1189, 329, 62, 699,
	1778, 71, 71, 1348, 1349, 1186, 1494, 71, 69, 71,
	337, 71, 71, 71, 337, 1185, 71, 834, 835, 1547,
	69, 1136, 1548, 1024, 1023, 63, 1286, 69, 69, 69,
	1025, 680, 58, 1650, 1504, 1581, 1582, 1564, 59, 1270,
	1561, 302, 303, 264, 1026, 888, 308, 71, 71, 1687,
	783, 259, 702, 702, 788, 422, 1812, 242, 1656, 71,
	71, 1335, 69, 71, 1720, 1545, 1738, 1597, 1620, 745,
	1602, 745, 71, 71, 1614, 1613, 1555, 1615, 1601, 1614,
	1613, 1617, 1615, 1140, 893, 32, 267, 1611, 1618, 725,
	482, 283, 1566, 745, 283, 283, 283, 283, 283, 796,
	1406, 71, 1109, 283, 732, 1619, 1639, 1038, 271, 1037,
	1644, 595, 1640, 778, 809, 1107, 767, 505, 784, 761,
	770, 1149, 559, 507, 700, 1161, 508, 728, 728, 701,
	920, 495, 329, 698, 370, 830, 1627, 1628, 703, 1277,
	1633, 973, 725, 1137, 1331, 891, 481, 487, 486, 1124,
	393, 478, 1591, 1634, 1288, 1625, 71, 702, 71, 1662,
	71, 71, 44, 407, 277, 278, 703, 703, 1228, 71,
	1598, 1049, 816, 1415, 703, 703, 311, 1345, 395, 1167,
	1105, 1677, 1104, 1159, 1157, 1674, 1110, 1148, 440, 565,
	71, 974, 419, 1234, 1514, 1515, 834, 835, 1675, 993,
	337, 337, 1519, 1520, 337, 464, 824, 703, 1827, 332,
	702, 331, 71, 1034, 71, 416, 754, 1017, 1712, 837,
	304, 1703, 1751, 71, 1701, 1715, 1870, 1710, 1756, 71,
	1412, 1797, 728, 61, 69, 1551, 1614, 1613, 24, 1615,
	836, 1724, 939, 22, 21, 20, 69, 19, 17, 16,
	69, 956, 1696, 1697, 1737, 15, 774, 769, 23, 13,
	12, 11, 10, 1731, 31, 1106, 30, 726, 29, 28,
	71, 5, 1108, 2, 1, 0, 0, 0, 0, 0,
	1348, 1349, 1753, 0, 0, 728, 0, 0, 1744, 71,
	71, 1747, 0, 71, 842, 726, 726, 71, 0, 0,
	1727, 1765, 71, 726, 726, 1748, 0, 0, 1767, 0,
	1685, 1769, 1774, 1773, 703, 0, 71, 739, 0, 323,
	587, 592, 0, 1768, 1766, 0, 1280, 0, 1614, 1613,
	0, 1615, 0, 0, 1161, 1161, 726, 0, 1781, 1780,
	0, 1784, 852, 71, 0, 71, 71, 0, 71, 69,
	1779, 977, 978, 1719, 69, 727, 727, 69, 0, 283,
	283, 1803, 1801, 0, 337, 1787, 1806, 71, 0, 1799,
	1807, 0, 0, 1284, 1805, 0, 0, 1804, 1354, 1795,
	0, 1810, 1809, 0, 1808, 1161, 1161, 1161, 0, 0,
	1287, 71, 0, 71, 0, 1614, 1613, 0, 1615, 853,
	1576, 1282, 1834, 1832, 1771, 1830, 0, 1285, 71, 0,
	0, 0, 745, 830, 703, 0, 1843, 0, 1847, 71,
	1845, 1283, 593, 0, 1851, 0, 1364, 1831, 594, 1855,
	1853, 1856, 1577, 0, 0, 0, 0, 0, 0, 699,
	699, 0, 1695, 726, 1868, 1867, 0, 0, 0, 1348,
	1349, 1873, 0, 1852, 0, 0, 0, 0, 0, 1029,
	727, 0, 725, 0, 0, 0, 1878, 1286, 0, 0,
	0, 0, 0, 69, 939, 1815, 838, 839, 840, 841,
	843, 0, 863, 1365, 0, 0, 0, 1796, 0, 0,
	725, 725, 703, 0, 1576, 0, 1569, 0, 725, 725,
	1313, 1314, 0, 69, 1567, 0, 283, 0, 1571, 0,
	0, 0, 0, 727, 0, 1572, 0, 1573, 0, 0,
	0, 0, 0, 0, 1161, 1161, 1577, 0, 0, 0,
	702, 725, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1575, 726, 699, 1570, 0, 1354, 0, 1578,
	0, 1371, 1372, 1373, 0, 0, 0, 0, 702, 702,
	1350, 1351, 1352, 1353, 1355, 0, 702, 702, 0, 703,
	0, 0, 0, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
	1161, 1161, 0, 1161, 0, 1364, 0, 699, 0, 702,
	0, 69, 1195, 1196, 0, 728, 1574, 939, 0, 1572,
	1201, 1573, 0, 0, 0, 0, 1206, 1207, 1209, 1211,
	1212, 726, 0, 0, 1217, 0, 0, 1219, 0, 0,
	69, 0, 0, 728, 728, 0, 1575, 69, 725, 1232,
	0, 728, 728, 1578, 0, 0, 69, 0, 0, 468,
	468, 0, 1365, 0, 0, 69, 0, 0, 567, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 728, 0, 1029, 745, 0, 0,
	0, 0, 1029, 0, 0, 0, 0, 0, 0, 0,
	1485, 1486, 0, 0, 0, 0, 0, 0, 726, 0,
	1574, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	809, 0, 809, 0, 283, 69, 0, 0, 1271, 0,
	0, 1348, 1349, 0, 0, 0, 0, 1274, 1358, 1350,
	1351, 1352, 1353, 1355, 1293, 0, 69, 0, 725, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 0, 1543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 819, 0, 483, 42, 0, 0, 826, 0, 834,
	835, 728, 0, 0, 0, 864, 865, 866, 0, 872,
	873, 874, 875, 876, 0, 0, 0, 0, 879, 0,
	1161, 0, 837, 0, 868, 0, 702, 0, 42, 0,
	0, 0, 0, 0, 0, 0, 725, 0, 892, 1354,
	0, 0, 0, 836, 834, 835, 0, 0, 316, 851,
	0, 324, 0, 727, 0, 0, 0, 0, 42, 1348,
	1349, 0, 1366, 1367, 1368, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 1641, 0, 0, 0, 0,
	0, 727, 727, 0, 0, 0, 0, 1364, 836, 727,
	727, 0, 0, 830, 0, 0, 0, 842, 0, 0,
	0, 728, 0, 0, 702, 0, 1161, 0, 0, 1363,
	0, 0, 0, 725, 861, 869, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 69, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 859,
	0, 0, 842, 0, 1365, 852, 0, 0, 0, 0,
	0, 1450, 0, 939, 0, 809, 0, 1354, 0, 1460,
	0, 0, 0, 0, 0, 699, 699, 0, 69, 0,
	0, 0, 69, 699, 699, 0, 0, 0, 1293, 728,
	0, 702, 1480, 0, 1293, 1161, 1684, 0, 0, 1369,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 1364, 699, 0, 0, 0,
	0, 0, 0, 862, 0, 0, 0, 0, 1356, 1357,
	1358, 1350, 1351, 1352, 1353, 1355, 1509, 0, 0, 727,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	0, 0, 1365, 0, 0, 0, 0, 0, 860, 0,
	0, 0, 1741, 0, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 0, 0, 0, 0,
	0, 0, 1562, 1563, 939, 0, 0, 0, 0, 0,
	830, 830, 0, 0, 0, 0, 1589, 0, 1590, 0,
	69, 1592, 1593, 699, 0, 1596, 0, 0, 0, 316,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 727,
	863, 1360, 1361, 1362, 0, 1359, 1356, 1357, 1358, 1350,
	1351, 1352, 1353, 1355, 1610, 0, 830, 939, 0, 1610,
	0, 1786, 0, 0, 0, 0, 0, 284, 69, 69,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	468, 830, 1293, 0, 0, 297, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 0, 1098,
	1657, 1100, 1101, 1102, 1103, 0, 0, 727, 0, 0,
	286, 0, 0, 699, 0, 291, 292, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 287, 0, 0, 0, 1146, 1147, 0, 1158,
	0, 1168, 1170, 1175, 1178, 1179, 1180, 0, 316, 0,
	0, 316, 316, 0, 0, 939, 0, 1676, 0, 283,
	1678, 0, 0, 0, 0, 0, 567, 0, 69, 288,
	0, 0, 0, 0, 878, 0, 0, 0, 882, 0,
	0, 289, 290, 0, 727, 0, 0, 0, 0, 830,
	0, 699, 0, 0, 0, 0, 0, 293, 0, 0,
	1223, 0, 1226, 0, 0, 0, 1610, 0, 0, 0,
	0, 69, 0, 1722, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1758, 1759,
	826, 0, 1763, 0, 294, 0, 1764, 295, 1610, 0,
	0, 283, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 0, 0,
	0, 1298, 1299, 0, 857, 0, 0, 1304, 0, 0,
	0, 837, 1794, 868, 830, 69, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 836, 0, 0, 1610, 1722, 0, 851, 1326,
	42, 0, 42, 0, 0, 0, 0, 1334, 0, 0,
	0, 1339, 0, 0, 0, 42, 0, 0, 0, 42,
	69, 0, 830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 0, 1844, 0, 1175,
	1175, 1175, 0, 0, 0, 0, 842, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	1408, 0, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 468, 852, 0, 0, 0, 0, 0,
	0, 468, 0, 0, 0, 567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 42,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 48, 862, 0, 0, 1483, 0, 27, 1484, 53,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 0,
	0, 0, 1251, 1115, 0, 33, 0, 0, 49, 0,
	0, 1506, 36, 34, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 1518, 0, 0, 860, 38, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 1549, 1550, 0,
	0, 0, 0, 0, 0, 0, 1556, 1557, 1558, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 35, 468, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 51, 0, 0,
	39, 0, 50, 0, 857, 0, 0, 40, 0, 0,
	60, 837, 0, 868, 0, 43, 45, 0, 0, 0,
	0, 0, 1624, 0, 0, 47, 0, 0, 0, 0,
	0, 0, 836, 62, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 1643, 52, 0, 0, 1646,
	1647, 0, 0, 0, 1649, 0, 0, 0, 1651, 0,
	63, 0, 0, 0, 0, 1655, 0, 58, 0, 1658,
	42, 0, 0, 59, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1667, 861, 869, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	878, 0, 0, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1694, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1713, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1726,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 1733,
	1734, 0, 862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1750, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 567, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 0, 0, 0, 0,
	0, 1670, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 0, 834, 835, 1064, 854, 855, 856,
	864, 865, 866, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 837, 0, 868,
	834, 835, 0, 854, 855, 856, 864, 865, 866, 0,
	0, 0, 0, 0, 0, 0, 857, 0, 836, 0,
	0, 0, 0, 837, 851, 868, 0, 0, 0, 0,
	1348, 1349, 0, 1366, 1367, 1368, 1829, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 1492, 0, 0, 0,
	851, 1842, 1842, 0, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 1842, 0, 837,
	1363, 868, 0, 0, 0, 0, 0, 0, 0, 861,
	869, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	836, 0, 0, 0, 867, 0, 851, 0, 0, 0,
	0, 0, 1842, 0, 859, 861, 869, 0, 0, 0,
	852, 0, 0, 0, 0, 42, 0, 0, 1354, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 858, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 42, 0, 842, 0, 0, 0, 0, 0,
	1369, 0, 1064, 1064, 0, 0, 1064, 0, 858, 0,
	0, 861, 869, 0, 0, 0, 1364, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 862, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 853,
	863, 0, 0, 0, 0, 0, 0, 1390, 0, 860,
	862, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 0, 0, 0,
	0, 0, 0, 1389, 0, 0, 0, 1704, 0, 0,
	0, 0, 1360, 1361, 1362, 0, 1359, 1356, 1357, 1358,
	1350, 1351, 1352, 1353, 1355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 1064, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	74, 596, 75, 597, 598, 599, 600, 185, 601, 602,
	603, 604, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 605, 79, 192, 193, 80, 606, 607, 194, 195,
	196, 608, 197, 609, 378, 610, 81, 82, 83, 878,
	84, 611, 85, 86, 87, 612, 379, 88, 89, 613,
	614, 615, 616, 617, 618, 90, 91, 92, 93, 198,
	94, 199, 200, 619, 95, 620, 96, 621, 622, 623,
	97, 98, 624, 99, 625, 0, 626, 201, 100, 101,
	202, 627, 628, 629, 102, 103, 203, 0, 104, 630,
	105, 631, 632, 380, 633, 106, 204, 634, 205, 635,
	107, 108, 206, 207, 382, 636, 111, 637, 109, 638,
	381, 110, 208, 209, 210, 211, 639, 212, 640, 383,
	112, 384, 113, 114, 641, 642, 213, 385, 115, 386,
	643, 116, 644, 645, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 646, 126, 647, 214,
	128, 215, 129, 130, 648, 649, 650, 651, 652, 131,
	216, 388, 132, 389, 217, 133, 134, 135, 653, 218,
	136, 219, 137, 654, 138, 139, 140, 220, 141, 142,
	655, 144, 145, 143, 146, 656, 147, 390, 148, 149,
	221, 150, 0, 151, 152, 153, 657, 222, 154, 155,
	658, 156, 157, 391, 158, 223, 224, 159, 659, 165,
	160, 161, 162, 164, 225, 163, 226, 660, 166, 661,
	167, 168, 662, 227, 228, 229, 663, 664, 169, 230,
	231, 665, 170, 171, 172, 173, 666, 667, 174, 175,
	176, 668, 669, 177, 178, 179, 232, 233, 670, 180,
	671, 672, 673, 674, 181, 182, 183, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 73, 74, 596, 75, 597,
	598, 599, 600, 185, 601, 602, 603, 604, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 605, 79, 192,
	193, 80, 606, 607, 194, 195, 196, 608, 197, 609,
	378, 610, 81, 82, 83, 0, 84, 611, 85, 86,
	87, 612, 379, 88, 89, 613, 614, 615, 616, 617,
	618, 90, 91, 92, 93, 198, 94, 199, 200, 619,
	95, 620, 96, 621, 622, 623, 97, 98, 624, 99,
	625, 0, 626, 201, 100, 101, 202, 627, 628, 629,
	102, 103, 203, 0, 104, 630, 105, 631, 632, 380,
	633, 106, 204, 634, 205, 635, 107, 108, 206, 207,
	382, 636, 111, 637, 109, 638, 381, 110, 208, 209,
	210, 211, 639, 212, 640, 383, 112, 384, 113, 114,
	641, 642, 213, 385, 115, 386, 643, 116, 644, 645,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 646, 126, 647, 214, 128, 215, 129, 130,
	648, 649, 650, 651, 652, 131, 216, 388, 132, 389,
	217, 133, 134, 135, 653, 218, 136, 219, 137, 654,
	138, 139, 140, 220, 141, 142, 655, 144, 145, 143,
	146, 656, 147, 390, 148, 149, 221, 150, 0, 151,
	152, 153, 657, 222, 154, 155, 658, 156, 157, 391,
	158, 223, 224, 159, 659, 165, 160, 161, 162, 164,
	225, 163, 226, 660, 166, 661, 167, 168, 662, 227,
	228, 229, 663, 664, 169, 230, 231, 665, 170, 171,
	172, 173, 666, 667, 174, 175, 176, 668, 669, 177,
	178, 179, 232, 233, 670, 180, 671, 672, 673, 674,
	181, 182, 183, 184, 591, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	73, 74, 596, 75, 597, 598, 599, 600, 185, 601,
	602, 603, 604, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 605, 79, 192, 193, 80, 606, 607, 194,
	195, 196, 608, 197, 609, 378, 610, 81, 82, 83,
	0, 84, 611, 85, 86, 87, 612, 379, 88, 89,
	613, 614, 615, 616, 617, 618, 90, 91, 92, 93,
	198, 94, 199, 200, 619, 95, 620, 96, 621, 622,
	623, 97, 98, 624, 99, 625, 0, 626, 201, 100,
	101, 202, 627, 628, 629, 102, 103, 203, 0, 104,
	630, 105, 631, 632, 380, 633, 106, 204, 634, 205,
	635, 107, 108, 206, 207, 382, 636, 111, 637, 109,
	638, 381, 110, 208, 209, 210, 211, 639, 212, 640,
	383, 112, 384, 113, 114, 641, 642, 213, 385, 115,
	386, 643, 116, 644, 645, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 646, 126, 647,
	214, 128, 215, 129, 130, 648, 649, 650, 651, 652,
	131, 216, 388, 132, 389, 217, 133, 134, 135, 653,
	218, 136, 219, 137, 654, 138, 139, 140, 220, 141,
	142, 655, 144, 145, 143, 146, 656, 147, 390, 148,
	149, 221, 150, 0, 151, 152, 153, 657, 222, 154,
	155, 658, 156, 157, 391, 158, 223, 224, 159, 659,
	165, 160, 161, 162, 164, 225, 163, 226, 660, 166,
	661, 167, 168, 662, 227, 228, 229, 663, 664, 169,
	230, 231, 665, 170, 171, 172, 173, 666, 667, 174,
	175, 176, 668, 669, 177, 178, 179, 232, 233, 670,
	180, 671, 672, 673, 674, 181, 182, 183, 184, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 74, 1132, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 1133, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 1131, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 472, 1134, 0, 0,
	0, 473, 0, 0, 480, 1129, 503, 492, 493, 490,
	491, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	519, 485, 0, 0, 0, 76, 77, 186, 533, 188,
	534, 78, 535, 536, 0, 79, 192, 193, 80, 500,
	518, 537, 538, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 539, 94, 540, 541, 568, 95, 0, 96,
	0, 0, 0, 532, 98, 0, 99, 0, 0, 0,
	484, 100, 101, 520, 498, 0, 0, 102, 103, 542,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 543, 544, 545, 546, 0,
	510, 0, 383, 112, 384, 113, 114, 0, 0, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 474,
	126, 499, 527, 128, 547, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	548, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 488, 150, 0, 151, 152, 153, 60,
	222, 154, 155, 516, 156, 157, 391, 158, 549, 224,
	159, 0, 165, 160, 161, 162, 164, 550, 163, 523,
	0, 166, 62, 167, 168, 0, 227, 551, 552, 0,
	0, 169, 524, 525, 497, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 377,
	553, 0, 180, 0, 0, 0, 58, 181, 182, 183,
	184, 475, 59, 503, 492, 493, 490, 491, 479, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 473, 73,
	74, 480, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 186, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 89, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 382, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 383,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 474, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	488, 150, 0, 151, 152, 153, 60, 222, 154, 155,
	516, 156, 157, 391, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 62,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 377, 553, 0, 180,
	0, 0, 0, 58, 181, 182, 183, 184, 475, 59,
	503, 492, 493, 490, 491, 479, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 473, 73, 74, 480, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 1171, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 1176,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 1172, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 1173, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 475, 0, 503, 492, 493,
	490, 491, 479, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 73, 74, 480, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 473,
	0, 0, 480, 1546, 503, 492, 493, 490, 491, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 473, 0, 0, 480,
	1495, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 473, 0, 0, 480, 1128, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 0, 0, 0, 503, 492,
	493, 490, 491, 479, 471, 472, 0, 0, 0, 0,
	473, 884, 1125, 480, 73, 74, 0, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 471, 472, 469, 0, 0, 0,
	473, 73, 74, 480, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 0, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 232, 553,
	1500, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	475, 0, 503, 492, 493, 490, 491, 479, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 473, 73, 74,
	480, 75, 0, 0, 0, 0, 519, 485, 0, 0,
	0, 76, 77, 186, 533, 188, 534, 78, 535, 536,
	0, 79, 192, 193, 80, 500, 518, 537, 538, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 89, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 539, 94,
	540, 541, 568, 95, 0, 96, 0, 0, 0, 532,
	98, 0, 99, 0, 0, 0, 484, 100, 101, 520,
	498, 0, 0, 102, 103, 542, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 543, 544, 545, 546, 0, 510, 0, 383, 112,
	384, 113, 114, 0, 0, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 474, 126, 499, 527, 128,
	547, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 548, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 488,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 516,
	156, 157, 391, 158, 549, 224, 159, 0, 165, 160,
	161, 162, 164, 550, 163, 523, 0, 166, 0, 167,
	168, 0, 227, 551, 552, 0, 0, 169, 524, 525,
	497, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 232, 553, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 475, 0, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 473, 73, 74, 480, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 1176, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 0, 0, 0, 503,
	492, 493, 490, 491, 479, 471, 472, 0, 0, 0,
	0, 473, 0, 0, 480, 73, 74, 818, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 503, 492, 493, 490,
	491, 479, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 473, 73, 74, 480, 75, 0, 0, 0, 0,
	519, 485, 0, 0, 0, 76, 77, 186, 533, 188,
	534, 78, 535, 536, 0, 79, 192, 193, 80, 500,
	518, 537, 538, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 1841, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 539, 94, 540, 541, 0, 95, 0, 96,
	0, 0, 0, 532, 98, 0, 99, 0, 0, 0,
	484, 100, 101, 520, 498, 0, 0, 102, 103, 542,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 543, 544, 545, 546, 0,
	510, 0, 383, 112, 384, 113, 114, 0, 0, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 474,
	126, 499, 527, 128, 547, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	548, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 488, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 516, 156, 157, 391, 158, 549, 224,
	159, 0, 165, 160, 161, 162, 164, 550, 163, 523,
	0, 166, 0, 167, 168, 0, 227, 551, 552, 0,
	0, 169, 524, 525, 497, 170, 171, 1840, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 232,
	553, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 475, 0, 503, 492, 493, 490, 491, 479, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 473, 73,
	74, 480, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 1839, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 1841, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 382, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 383,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 474, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	488, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	516, 156, 157, 391, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 0,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 1840, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 232, 553, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 475, 0,
	503, 492, 493, 490, 491, 479, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 473, 73, 74, 480, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 475, 0, 503, 492, 493,
	490, 491, 479, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 73, 74, 480, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	0, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 1166, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 0, 0, 503, 492, 493, 490, 491, 479,
	0, 0, 0, 1162, 1163, 0, 0, 0, 0, 1164,
	73, 74, 1165, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 0, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 1841,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 0, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	0, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 0, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 1840, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 503, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 473, 73, 74, 480,
	75, 0, 0, 0, 0, 519, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 518, 194, 195, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 520, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	208, 209, 210, 211, 0, 212, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 0, 126, 0, 527, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 524, 525, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 233, 0, 180, 373, 0,
	0, 0, 181, 182, 183, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 1612, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 378,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 382,
	0, 111, 0, 109, 0, 381, 110, 208, 209, 210,
	211, 0, 212, 0, 383, 112, 384, 113, 114, 0,
	0, 213, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 221, 150, 0, 151, 152,
	153, 60, 222, 154, 155, 0, 156, 157, 391, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 62, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 377, 233, 0, 180, 0, 0, 0, 58, 181,
	182, 183, 184, 0, 59, 373, 772, 0, 773, 768,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 57, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 378, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 776, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 765, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 382, 0, 111, 0,
	109, 0, 381, 110, 208, 209, 210, 211, 0, 212,
	0, 383, 112, 384, 113, 114, 0, 0, 213, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 766, 0, 0,
	0, 131, 216, 388, 132, 389, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 391, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 764, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 0, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	373, 772, 0, 773, 768, 763, 0, 0, 0, 0,
	0, 774, 769, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 378, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	759, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 765, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 382, 0, 111, 0, 109, 0, 381, 110, 208,
	209, 210, 211, 0, 212, 0, 383, 112, 384, 113,
	114, 0, 0, 213, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 766, 0, 0, 0, 131, 216, 388, 132,
	389, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	391, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 764, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 373, 772, 0, 773, 768,
	763, 0, 0, 0, 0, 0, 774, 769, 0, 0,
	0, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 378, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 765, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 382, 0, 111, 0,
	109, 0, 381, 110, 208, 209, 210, 211, 0, 212,
	0, 383, 112, 384, 113, 114, 0, 0, 213, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 766, 0, 0,
	0, 131, 216, 388, 132, 389, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 391, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 764, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 774, 769, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 338, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 60, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	62, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 377, 233, 0,
	180, 70, 0, 0, 58, 181, 182, 183, 184, 0,
	59, 0, 0, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 1066,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 60, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 62, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 377, 233, 0, 180, 70, 0,
	0, 58, 181, 182, 183, 184, 0, 59, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 1292, 0, 57, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 0, 180, 0, 70, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 461, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 338,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 0, 180, 70, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 1066, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 232, 233, 0, 180,
	0, 70, 0, 0, 181, 182, 183, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 584,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 232, 233, 0, 180, 70, 0,
	0, 0, 181, 182, 183, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 976, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 0, 180, 70, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 1510, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 0, 177, 178, 179, 232, 233,
	0, 180, 70, 0, 0, 0, 181, 182, 183, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	564, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 743, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 742, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 70, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	746, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	232, 233, 373, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 746, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 378, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 382, 0, 111, 0, 109, 0, 381,
	110, 208, 209, 210, 211, 0, 212, 0, 383, 112,
	384, 113, 114, 0, 0, 213, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 391, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 942,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 940,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	1042, 0, 102, 103, 203, 0, 104, 0, 105, 945,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 1040, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 944, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 1041, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 942, 197,
	0, 0, 937, 81, 82, 83, 0, 84, 940, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 945, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 936,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	944, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 943, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 1292, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 338, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 694, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	338, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 398, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 343, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 338, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 256, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 255, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 1210, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	1208, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 1199,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 808, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 270, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 681, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 0, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 446, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 443, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 404, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 281, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 280, 228, 229, 0, 0, 276,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	281, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 280, 228, 229, 0, 0, 276, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 368, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	365, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 363,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 346, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 327, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 273, 0, 0, 117, 0,
	118, 119, 120, 121, 281, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 275, 150, 0, 151, 152, 153,
	0, 222, 154, 274, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 280, 228, 229,
	0, 0, 276, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	0, 0, 218, 136, 219, 137, 0, 138, 0, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 0, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 837, 0, 868, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 836, 0, 0, 0, 0,
	837, 851, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 1348, 1349,
	0, 1366, 1367, 1368, 0, 842, 0, 0, 0, 0,
	0, 867, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 859, 861, 869, 0, 0, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 1363, 858,
	0, 0, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 1354, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	853, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	837, 862, 868, 0, 0, 0, 0, 0, 1369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 1364, 0, 0, 851, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 0,
	0, 0, 0, 0, 1388, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 842, 0, 0, 0, 0,
	1341, 1365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 869, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 867, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 859, 0, 837,
	0, 868, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 858, 851, 0, 0, 0,
	1360, 1361, 1362, 0, 1359, 1356, 1357, 1358, 1350, 1351,
	1352, 1353, 1355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 862, 0, 0, 842, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 837, 0, 868, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 867, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 858, 0, 0, 1791, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 1348, 1349, 0, 1366, 1367, 1368, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 853,
	834, 835, 0, 854, 855, 856, 864, 865, 866, 0,
	862, 867, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 859, 0, 837, 0, 868, 0, 852, 0, 0,
	0, 0, 0, 1363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 858,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 1354, 863, 0, 853, 0, 1789, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 0, 842, 1370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1369, 0, 861, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1364,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 858, 0,
	0, 1770, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 0, 1365, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 0, 868, 0, 0,
	0, 834, 835, 853, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 862, 0, 836, 857, 0, 0,
	0, 0, 851, 0, 837, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 1360, 1361, 1362, 0, 1359,
	1356, 1357, 1358, 1350, 1351, 1352, 1353, 1355, 0, 860,
	842, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 861, 869, 0,
	1745, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 861, 869, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 859, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 834, 835, 853, 854, 855, 856, 864,
	865, 866, 0, 0, 0, 0, 862, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 837, 0, 868, 0,
	0, 0, 0, 0, 853, 0, 0, 1348, 1349, 0,
	1366, 1367, 1368, 0, 0, 862, 0, 836, 0, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 1363, 863, 0,
	0, 0, 1740, 0, 0, 0, 0, 0, 0, 0,
	860, 842, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 861, 869,
	0, 1736, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 867, 0, 1354, 0, 0, 857, 0,
	0, 0, 0, 859, 0, 837, 0, 868, 0, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 1369, 0, 0,
	0, 858, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 862, 0, 0,
	842, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	837, 0, 868, 0, 0, 0, 0, 861, 869, 0,
	1365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 867, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 860, 0, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	858, 0, 0, 1672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 1360,
	1361, 1362, 0, 1359, 1356, 1357, 1358, 1350, 1351, 1352,
	1353, 1355, 861, 869, 0, 853, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 862, 867, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 859, 0, 837,
	0, 868, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 858, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 0,
	853, 0, 1671, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 858, 0, 0, 1579, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 837, 0, 868, 0, 0, 0, 834, 835, 853,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	862, 0, 836, 857, 0, 0, 0, 0, 851, 0,
	837, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 842, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 861, 869, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 861, 869, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 859, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 834,
	835, 853, 854, 855, 856, 864, 865, 866, 0, 0,
	0, 0, 862, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 837, 0, 868, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 0, 836, 0, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 0, 860, 842, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 861, 869, 0, 1121, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 0, 867,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 859,
	0, 837, 0, 868, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 858, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 0, 862, 0, 0, 842, 1861, 0, 857,
	0, 0, 0, 0, 0, 0, 837, 0, 868, 0,
	0, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 867, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 852, 0, 0, 0, 860, 0,
	0, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 858, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1860,
	0, 842, 0, 1380, 0, 0, 1379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 861, 869,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 835, 862, 854, 855,
	856, 864, 865, 866, 0, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 1054, 0, 837, 0,
	868, 0, 871, 0, 0, 0, 0, 0, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 0, 836,
	0, 0, 0, 0, 857, 851, 0, 0, 870, 0,
	0, 837, 860, 868, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 0, 836, 1055, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 834, 835, 0, 854, 855, 856,
	864, 865, 866, 842, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 837, 0, 868,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 842, 0, 836, 0,
	0, 0, 0, 0, 851, 859, 0, 0, 0, 0,
	0, 852, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 853, 861,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	852, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 858, 322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 862, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 837, 0,
	868, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 836,
	863, 0, 0, 0, 0, 851, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 842, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 842, 0, 0, 0, 0, 1386,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 853,
	0, 0, 857, 0, 0, 0, 1381, 0, 0, 837,
	862, 868, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	836, 863, 0, 0, 0, 0, 851, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	837, 0, 868, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 836, 863, 0, 842, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 869, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	853, 0, 0, 857, 0, 0, 0, 1340, 0, 0,
	837, 862, 868, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 836, 863, 0, 0, 0, 0, 851, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 837, 0, 868, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 836, 863, 0, 842, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 852, 0, 0, 842, 0, 0, 0,
	0, 0, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 861, 869, 858, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 0, 868, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 852, 0, 836, 0, 0, 0,
	853, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 0, 0, 0, 860, 861, 869, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 867, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 0, 716, 710, 733, 704, 724,
	723, 0, 0, 706, 705, 0, 0, 860, 735, 734,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 0, 0, 0, 834,
	835, 0, 854, 855, 856, 864, 865, 866, 0, 729,
	0, 721, 720, 0, 0, 853, 0, 0, 0, 0,
	719, 0, 837, 0, 868, 0, 862, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 712, 713, 714, 0, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 842, 863, 0,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 852, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 715, 709, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 730, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863,
}
var sqlPact = [...]int{

	2963, -1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 926, 16089, -1000, -1000,
	-1000, -1000, 608, 889, 1168, 16089, 16089, 15830, 993, 993,
	17384, -1000, -1000, 20233, -1000, 2543, 454, 456, 454, 454,
	449, 17384, 524, 598, 136, -1000, 602, -16, 19974, 16089,
	1277, 19, 14794, 309, 2963, 15571, 19715, 16089, 319, 28,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1126, 1029, 1013, 14794, 19456, 19197,
	18938, -1000, 10004, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 523, 313, 312, -1000, 15312, -1000, 795, -1000, 18,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 793, -1000,
	16089, -1000, -1000, 18679, 18420, 311, 798, -1000, -1000, 511,
	372, 1303, -1000, 33, -1000, -1000, 1122, -1000, 790, 1118,
	1117, 1116, 1108, 1106, 1105, 365, 847, -1000, 506, 798,
	-1000, 798, -1000, -1000, -1000, 513, 17384, -1000, 14794, -1000,
	18161, 1046, 17902, -1000, 602, -1000, -1000, -1000, 830, 1275,
	1275, 1275, 1306, 131, 116, 136, -1, 16089, -1000, 310,
	-1, 6964, 6964, -1000, -1000, 309, -1000, 324, 12961, -1000,
	7518, -1000, 797, 1180, 395, 615, 1179, -49, 672, 550,
	12159, 28, -1000, -1000, -1000, 8906, 4115, 14794, 16089, 16089,
	579, 17643, -1000, 1177, 109, 1176, -1000, 107, 1174, -1000,
	-14, -1000, -1000, -1000, -1000, -1000, -1000, 309, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15053, 1341, 23879, -1000, 8906, -1000, -1000, 13228,
	1236, 13228, -1000, -1000, 1339, -1000, 8906, -1000, 17, 13,
	947, 1001, 10556, 10281, 1240, 1376, -1000, -1000, -1000, 30,
	4390, 16089, 1131, 13228, 16089, 16089, 16089, 16089, 16089, 16089,
	-1000, 940, -1000, 16089, -1000, 7, 5, -1000, 17384, -1000,
	114, -1000, 379, 896, 17125, 1197, 894, -1000, 830, -1000,
	817, 931, 8075, 8906, 136, -1000, -1000, 136, 136, 8906,
	-1000, -1000, 16089, -1, 1337, 16089, 148, -1000, 22818, -1000,
	-1000, 8906, 8906, 8906, 8906, 8906, 711, -1000, -1000, -1000,
	5239, -1000, -1000, 28, 306, 316, -1000, -1000, 305, 28,
	-1000, -1000, -1000, -1000, 303, 1450, 385, -1000, -1000, -1000,
	8906, 358, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1130, 297, 296, -1000, -1000, -1000, -1000, 292, 286,
	279, 276, 272, 271, 269, 268, 259, 257, 250, 247,
	246, 244, 686, -1000, 401, -1000, -1000, 401, 401, -1000,
	240, 240, 241, -1000, -1000, -1000, -1000, 240, -1000, -1000,
	-1000, 355, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 242,
	148, -1000, -1000, -1000, 16089, -15, -1000, 23648, -1000, -9,
	657, -1000, 14276, 1274, 1270, 1265, 14794, 1328, 1319, 510,
	16089, 16089, 503, -1000, 1104, -21, -1000, -1000, 2798, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 386, 262, 1333, 262, 12427,
	-1000, 16089, 16089, -1000, 16089, -1000, -1000, 16089, -1000, 16089,
	16089, 556, 13758, 730, 1165, -16, -27, -1000, 1343, -1000,
	-1000, -1000, -1000, 90, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 241, 686,
	240, 240, 240, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	355, -1000, -1000, 401, 401, 401, -1000, -1000, -31, 23648,
	502, -6, 13493, 16089, -1000, 29, -1000, -1000, 1102, 451,
	-33, 681, 1030, 872, -1000, -1000, -1000, -1000, -3, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1426,
	-1000, -1000, -1000, -1000, 1433, -3, -1000, -1000, -1000, -1000,
	-1000, 1449, -1000, -1000, -1000, 4390, -1000, -1000, -1000, 16089,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 681,
	1030, -1000, -1000, 14794, 14017, -16, 1163, 780, 893, -1000,
	-1000, 345, 1160, -1000, -1000, -1000, -1000, 23648, -1000, 23648,
	613, 1036, -1000, 1036, -4, -1000, 22785, -1000, 238, -35,
	-1000, 386, 6964, 11892, 23879, 23879, 16089, 518, 8906, 8906,
	8906, 8906, 8906, 8906, 8906, 8906, 8906, 8906, 8906, 8906,
	8906, 8906, 8906, 8906, 8906, 8906, 8906, 8906, 8906, 8906,
	848, 8906, 495, 8906, 8906, 8906, 8906, 1423, 787, 220,
	4390, -1000, 609, 609, 609, 3536, 3536, 196, 4, 22197,
	-5, 28, -1000, -1000, 6684, 6387, 28, 4665, -1000, 1011,
	1424, 390, 23648, 1143, 1078, 234, 111, 108, 8906, 8906,
	706, 8906, 9183, 8906, 8906, 5516, 8906, 8906, 8906, 8906,
	8906, 8906, -1000, 232, -1000, -1000, -1000, -1000, 1418, -1000,
	-1000, 1408, -1000, 517, 512, 1399, 386, 106, 7518, -1000,
	730, 16089, 16089, 16089, -1000, -1000, 890, 16866, -1000, 23879,
	16089, -1000, 231, 228, 978, 971, 16089, 16089, 16607, 16348,
	16089, 724, 226, 225, 16089, 671, -1000, 16089, 546, 1101,
	16089, -1000, 8906, 660, 8906, 685, -1000, 11357, 407, 16089,
	666, 120, -1000, -1000, -1000, 342, 16089, -1000, -1000, -1000,
	109, -1000, 107, -1000, -1000, 14794, -1000, -1000, -1000, -1000,
	-1000, -1000, 23879, 320, 317, -1000, 1393, 494, -1000, 491,
	490, 489, -1000, 224, -1000, 8906, 16089, 13493, -6, -7,
	-1000, -1000, 16089, 1030, -1000, -1000, -1000, -1000, 638, -1000,
	678, -1000, 10831, -1000, -1000, -1000, 1011, -1000, -10, -1000,
	-1000, -1000, -1000, 105, -8, -1000, -1000, -1000, -1000, -1000,
	16089, 273, 16089, -1000, 16089, 16089, 1159, 1444, 16089, -1000,
	-1000, -1000, 8906, -1000, -1000, -1000, -16, 16089, -1000, 1077,
	-1000, -94, 1669, -99, 14535, -1000, 11090, -1000, -1000, -1000,
	364, 270, 270, 408, 408, 408, 408, 182, 182, 1596,
	436, 2179, 2179, 2179, 2224, 307, 307, 2179, 2179, 2179,
	3536, 23752, 892, 8906, 8906, 484, 782, 220, 892, 8906,
	1417, 892, 892, 892, -1000, 738, -1000, -1000, -1000, 1100,
	219, 9183, 9183, -1000, -1000, -1000, 5239, -1000, -1000, 218,
	8906, -1000, 8906, -44, -46, -1000, -1000, -50, -1000, -1000,
	-11, 8906, 8906, 8906, 99, -1000, 98, 580, -1000, 8906,
	713, 213, 212, 8906, -1000, -1000, 23597, 20787, 97, 1098,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 96, 23407, 94,
	21283, -1000, 9183, 9183, 9183, 5239, 209, 92, 22573, -114,
	23356, 7795, 7795, 7795, 91, 23166, 8906, -114, 20761, 3480,
	3454, -56, -58, -66, 1389, -71, 88, 360, 356, 85,
	1077, -1000, -1000, -1000, -1000, 473, 470, 1157, -1000, 885,
	-1000, 663, 8906, 16089, 195, 194, 740, -1000, 1156, 824,
	1153, 824, -1000, -9, 645, 8906, 8906, -1000, 469, -1000,
	-1000, 544, -1000, 22369, -1000, 6964, 23648, -1000, 661, 1268,
	-72, -1000, -1000, 6964, 386, 12427, 11892, 7518, -73, -1000,
	-1000, 730, -1000, 474, 1375, 83, 897, 802, 719, 599,
	1372, 23648, -10, -1000, -10, -1000, -1000, -1000, -1000, -1000,
	-1000, 16089, 1050, 14017, 190, 16089, 188, 354, 187, 16089,
	-1000, 1197, -1000, 82, -1000, 1073, 1302, -1000, 11892, 823,
	1009, 1006, 11892, 1228, 716, 716, 716, -1000, 14535, 3829,
	-1000, -1000, 16089, 186, 11624, 77, 1669, 8906, 892, 892,
	8906, 9183, 9183, -1000, 892, -1000, -1000, -1000, -1000, 1094,
	178, 8906, 23879, 20878, 3510, -77, 6090, -12, 22168, -1000,
	-1000, 316, -1000, 75, 7241, -1000, 22874, 12, 12, -1000,
	1439, 1192, -1000, 8906, 23115, -1000, 12694, 387, 750, 21996,
	23879, 23879, -1000, 8906, -1000, 1093, 8906, -1000, 23879, 23879,
	9183, 9183, 9183, 9183, 9183, 9183, 9183, 9183, 9183, 9183,
	9183, 9183, 9183, 9183, 9183, 9183, 9183, 9183, 9183, 939,
	9183, 1403, 1403, 1403, -19, 5793, -1000, 1092, 1093, 8906,
	8906, 23879, 73, 72, 70, -1000, 8906, -114, 8906, 8906,
	8906, -1000, -1000, -1000, 65, -1000, 1368, -1000, -1000, -1000,
	-1000, 1073, 16089, 16089, 16089, 1152, 1852, -1000, 21877, -78,
	16089, 16089, -1000, 967, 1027, 438, 16089, -1000, 16089, -1000,
	16089, 16089, 16089, -82, -83, 16089, -1000, -1000, -26, 6964,
	192, -16, -26, 660, -1000, -25, -1000, 339, -1000, 308,
	207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56,
	-1000, -1000, 1064, -1000, 9737, 166, 16089, 14017, -16, 9737,
	768, -1000, -1000, 382, 8906, 8906, 1669, 526, 11892, 11892,
	1138, 984, 11892, -1000, -1000, -1000, -1000, -1000, -1000, 928,
	161, 16089, 14535, 472, 892, 2239, 626, 8906, 23879, 23939,
	-84, 8906, 8906, -1000, -89, -1000, 8906, -1000, -1000, 1438,
	8906, 55, 54, 52, -1000, -1000, 23648, 8906, -1000, -1000,
	20492, 8906, 48, -1000, 47, 45, 23648, 1092, 23648, -1000,
	-1000, 499, 499, 1403, 1403, 1403, 1403, 1849, 1849, 1680,
	2121, 376, 376, 376, 744, 932, 932, 376, 376, 376,
	1085, 955, 160, 21707, 8906, -90, -1000, -1000, -1000, 23648,
	23648, 43, -1000, -1000, -1000, -114, 3148, 21792, 21673, -1000,
	42, 382, -1000, -1000, -1000, 16089, -1000, 16089, -1000, 16089,
	16089, 1089, 855, -1000, -1000, 945, 158, 9183, 16089, -1000,
	723, -97, -103, 837, -1000, 832, 8906, -1000, 23879, 824,
	824, -1000, 467, 462, -1000, -1000, -1000, -26, 1206, 16089,
	1251, -1000, -1000, 157, -1000, -1000, -1000, 694, -104, -1000,
	206, 1284, 8906, -1000, -1000, 155, 9737, -105, 41, -1000,
	-115, 16089, -1000, 16089, 23648, -114, 477, -1000, 1138, -1000,
	153, 8906, 11892, -1000, -159, -1000, 337, -1000, 16089, -117,
	-1000, 8906, 8906, 23939, -122, -1000, 892, 892, -1000, 21501,
	-1000, 22874, -1000, -1000, -1000, 23648, 691, -1000, 21472, -1000,
	-1000, -1000, -1000, 9183, 1084, 150, 23879, 21300, -1000, -1000,
	8906, -1000, -1000, -1000, -1000, -1000, 1758, -1000, -1000, 16089,
	883, -1000, -1000, 8906, 21707, 149, 1050, 145, -1000, -1000,
	-1000, 662, -1000, -1000, 23648, 1289, -1000, -1000, 16089, 16089,
	509, -123, 16089, -1000, -1000, 4962, 16089, 723, 9737, 1267,
	28, 16089, 1267, 21181, 4665, -124, -1000, 1050, 723, 144,
	-57, -1000, 1332, 1405, -1000, 16089, 23648, -1000, 928, -1000,
	4390, -128, -1000, 892, 892, -1000, -1000, 37, 750, 1288,
	-1000, 871, 9183, 23879, -130, -1000, 21096, -1000, -1000, 1151,
	20977, 917, 16089, -1000, 16089, 16089, 394, 16089, -1000, -1000,
	562, -1000, 386, -1000, 143, 1050, -1000, -1000, -1000, -1000,
	1284, -11, 723, -1000, 1050, 9737, 16089, 134, -1000, -136,
	-1000, -1000, -1000, -1000, 635, 8906, 871, -137, -1000, -1000,
	1140, -1000, 747, 839, 36, -138, 121, -1000, 8906, -1000,
	12427, -1000, 16089, -1000, 1267, 35, 1050, -1000, -144, -1000,
	-1000, -1000, -13, 8629, 8629, -114, -1000, 16089, -1000, 764,
	761, 594, -1000, -1000, -1000, -1000, -1000, 917, 16089, 23648,
	-129, -146, -1000, -1000, -1000, 723, -1000, -1000, -1000, 9460,
	856, 642, 22488, -1000, -1000, -1000, 1218, -1000, 415, 1037,
	1037, 747, -155, -1000, 814, 1050, 1347, -1000, -1000, -1000,
	-1000, -1000, -1000, 1354, -1000, -1000, 918, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8352, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1684, 1683, 1324, 117, 1681, 116, 1679, 1678, 1676,
	1674, 93, 115, 105, 114, 1672, 80, 1671, 1670, 1669,
	78, 1668, 1665, 1659, 56, 1658, 1657, 1655, 1654, 1653,
	1648, 75, 23, 135, 2183, 129, 1643, 1641, 1640, 8,
	90, 64, 1638, 72, 1636, 50, 89, 97, 1079, 35,
	1632, 1630, 130, 32, 16, 141, 86, 138, 127, 122,
	1627, 1626, 1625, 40, 1623, 5, 1621, 1619, 1618, 54,
	12, 1616, 18, 34, 1615, 1609, 118, 1603, 55, 100,
	103, 21, 120, 99, 1602, 47, 14, 58, 1601, 26,
	1599, 27, 76, 125, 1598, 46, 146, 61, 22, 49,
	1597, 1594, 1593, 1589, 73, 1588, 92, 62, 1587, 1586,
	70, 1583, 124, 132, 1582, 1581, 134, 1580, 1578, 1575,
	689, 1574, 1573, 326, 1572, 3, 42, 57, 9, 104,
	102, 19, 1564, 20, 1563, 1727, 798, 632, 1561, 53,
	51, 74, 48, 43, 31, 1560, 1559, 98, 1558, 1557,
	1556, 1555, 1554, 71, 1553, 65, 131, 39, 45, 83,
	25, 77, 82, 95, 139, 94, 1551, 1549, 109, 1544,
	263, 1543, 1541, 1014, 112, 1540, 1539, 1536, 930, 702,
	627, 235, 1534, 1533, 559, 364, 1532, 1531, 108, 1530,
	1529, 136, 126, 17, 1527, 106, 1526, 87, 1523, 0,
	107, 101, 1521, 121, 69, 1519, 1517, 1510, 1502, 24,
	2, 10, 6, 7, 4, 30, 29, 1500, 1497, 123,
	84, 1495, 142, 1494, 1493, 1476, 33, 1474, 15, 1471,
	13, 1468, 1466, 11, 1, 133, 1465, 88, 1464, 1358,
	1461, 137, 1459, 1456, 1402, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 41,
	41, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 38, 38, 43, 43,
	43, 42, 42, 37, 37, 5, 5, 5, 6, 6,
	6, 6, 11, 12, 12, 12, 12, 12, 12, 82,
	82, 81, 81, 84, 84, 13, 13, 14, 14, 14,
	14, 14, 14, 14, 14, 169, 169, 168, 15, 145,
	145, 16, 16, 16, 16, 17, 105, 105, 18, 18,
	18, 18, 19, 23, 235, 235, 235, 239, 239, 240,
	240, 241, 241, 241, 241, 241, 241, 241, 237, 237,
	26, 26, 26, 26, 26, 124, 120, 120, 122, 122,
	122, 122, 47, 119, 119, 119, 119, 121, 121, 121,
	121, 192, 191, 191, 197, 197, 197, 60, 60, 60,
	60, 60, 61, 61, 61, 190, 190, 190, 190, 198,
	198, 198, 198, 198, 198, 62, 62, 62, 196, 196,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 236, 236, 238,
	238, 28, 28, 9, 9, 10, 10, 63, 63, 64,
	64, 127, 127, 127, 127, 65, 65, 44, 44, 44,
	126, 207, 207, 208, 208, 208, 208, 208, 208, 209,
	209, 209, 209, 209, 209, 209, 205, 205, 206, 203,
	203, 204, 204, 204, 204, 242, 242, 125, 125, 68,
	68, 212, 212, 212, 212, 210, 210, 210, 210, 210,
	213, 211, 214, 214, 214, 214, 214, 156, 156, 156,
	30, 8, 8, 109, 109, 72, 72, 160, 160, 160,
	54, 54, 39, 39, 39, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 110, 110, 111, 111, 21, 25,
	29, 29, 29, 29, 29, 244, 244, 51, 51, 51,
	51, 52, 52, 123, 123, 123, 123, 123, 46, 7,
	7, 45, 45, 20, 20, 20, 20, 20, 57, 57,
	116, 116, 116, 118, 118, 117, 117, 117, 95, 95,
	31, 77, 77, 86, 86, 87, 87, 166, 88, 88,
	24, 24, 34, 34, 32, 32, 32, 32, 32, 32,
	33, 33, 35, 35, 35, 35, 35, 35, 35, 220,
	220, 220, 222, 222, 219, 221, 221, 243, 243, 96,
	96, 96, 67, 66, 66, 70, 70, 69, 71, 71,
	159, 93, 93, 93, 93, 112, 113, 113, 114, 114,
	115, 115, 92, 92, 142, 142, 36, 36, 76, 76,
	78, 78, 133, 133, 134, 134, 132, 132, 132, 161,
	161, 161, 161, 162, 162, 162, 162, 162, 162, 157,
	157, 157, 157, 158, 158, 167, 167, 99, 99, 99,
	99, 97, 97, 98, 98, 163, 163, 163, 163, 94,
	94, 164, 164, 164, 128, 128, 170, 170, 170, 75,
	75, 75, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 172, 172, 172, 172, 174,
	174, 174, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 175, 175, 182, 182,
	183, 183, 184, 185, 176, 176, 177, 177, 178, 179,
	186, 186, 186, 186, 188, 188, 180, 180, 180, 180,
	180, 181, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 107, 107, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 215,
	215, 215, 215, 215, 215, 215, 217, 217, 218, 218,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 223, 223, 224, 224,
	226, 226, 227, 227, 228, 229, 229, 229, 230, 231,
	231, 225, 225, 232, 232, 232, 233, 233, 234, 234,
	234, 234, 234, 147, 147, 147, 148, 148, 149, 83,
	83, 144, 144, 143, 143, 143, 146, 146, 100, 187,
	187, 187, 187, 187, 187, 187, 101, 101, 108, 102,
	102, 103, 103, 103, 103, 103, 103, 139, 140, 104,
	104, 104, 141, 141, 150, 154, 154, 153, 152, 152,
	151, 151, 131, 131, 131, 131, 130, 129, 89, 89,
	245, 245, 155, 155, 90, 90, 91, 85, 85, 165,
	165, 165, 165, 79, 79, 59, 59, 80, 80, 55,
	55, 58, 56, 56, 56, 56, 73, 73, 74, 74,
	53, 53, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 189, 189, 189, 48, 48, 48, 49,
	49, 50, 50, 194, 194, 194, 195, 195, 195, 195,
	193, 193, 193, 193, 193, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 2, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 4, 6, 7, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 4, 2, 4, 4, 4, 4, 4, 4,
	4, 2, 3, 4, 3, 2, 4, 2, 0, 2,
	0, 8, 8, 7, 10, 5, 8, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 4,
	7, 3, 0, 6, 6, 8, 5, 7, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 3,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-15, -17, -18, -19, -20, -22, -23, -25, -24, -26,
	-27, -28, -29, -21, -30, -31, 23, 64, -7, -8,
	-9, -10, -221, 92, 100, 193, 99, 85, 115, 207,
	214, -32, -34, 222, -124, 223, 34, 232, 58, 95,
	209, 204, 253, 66, -220, -35, -33, 299, 274, 280,
	217, -36, 240, 267, 302, 240, 128, 78, -55, -48,
	4, -199, -201, 20, 21, 23, 33, 34, 39, 43,
	46, 57, 58, 59, 61, 63, 64, 65, 68, 69,
	76, 77, 78, 79, 81, 85, 87, 91, 92, 94,
	99, 100, 105, 106, 109, 111, 116, 121, 122, 129,
	132, 127, 141, 143, 144, 149, 152, 155, 157, 158,
	159, 160, 161, 163, 164, 166, 168, 165, 171, 173,
	174, 180, 183, 186, 187, 188, 191, 193, 195, 196,
	197, 199, 200, 204, 202, 203, 205, 207, 209, 210,
	212, 214, 215, 216, 219, 220, 222, 223, 225, 228,
	231, 232, 233, 236, 234, 230, 239, 241, 242, 249,
	253, 254, 255, 256, 259, 260, 261, 264, 265, 266,
	270, 275, 276, 277, 278, 28, 35, 36, 37, 38,
	40, 41, 44, 45, 49, 50, 51, 53, 80, 82,
	83, 98, 101, 107, 117, 119, 123, 124, 133, 134,
	135, 136, 138, 147, 170, 172, 181, 185, 190, 192,
	198, 211, 218, 226, 227, 235, 237, 244, 245, 246,
	250, 251, 267, 268, 87, 132, 261, 260, 78, 128,
	240, -14, 299, -24, -6, -12, -4, -20, -31, -11,
	-13, 23, -48, -48, -48, 193, 22, -239, 22, -240,
	-241, 66, 92, 115, 217, 132, 87, 260, -239, -52,
	214, -48, -120, 152, 220, 211, 249, -121, -119, -192,
	244, 161, -81, -48, 4, 78, 57, 79, 116, 128,
	129, 62, 63, 144, 241, 244, 249, 22, 66, -244,
	249, 249, -244, -244, -51, 249, 247, -52, -243, 240,
	240, -109, 78, 258, -33, -35, -34, -69, -70, 257,
	137, 97, 179, -32, -34, -220, -222, 199, -219, -48,
	-222, -66, -67, 22, 89, 303, -163, -55, 177, -91,
	299, -3, -163, 123, -55, -58, 123, -55, -48, 113,
	299, -89, -131, -130, -129, 297, 301, 113, 139, 139,
	-164, -163, -48, 123, -59, 123, -58, -82, 123, -81,
	-169, -168, -195, 4, -199, -201, -200, 267, 55, 67,
	114, 131, 125, 140, 142, 148, 150, 162, 182, 184,
	208, 224, 240, -145, 299, -105, 299, -48, 22, 176,
	303, 176, -48, -120, 51, -120, 299, -122, -46, -47,
	141, 195, 247, 284, 113, 278, -62, 5, 84, -84,
	301, 113, -236, 176, 113, 113, 113, 113, 113, 113,
	278, 141, 195, 240, -123, -46, -47, -123, 247, -52,
	-94, -163, -81, 123, 128, -48, 123, -69, -70, -93,
	-112, -113, 151, 175, -96, 22, 89, -96, -96, 43,
	300, 300, 303, -222, -74, 299, -85, -165, -135, 292,
	-137, 290, 291, 296, 167, 279, -147, -55, -138, 9,
	299, -150, -217, -34, 98, 29, -148, -149, 211, -48,
	7, 8, 5, 6, -53, -172, -181, 252, 102, 169,
	47, -215, -216, 4, -199, -194, -173, -183, -177, -180,
	138, 55, 71, 74, 72, 75, 221, 262, 48, 28,
	101, 185, 190, 237, 250, 251, 123, 170, 124, 53,
	117, 147, 91, 36, 38, 40, 41, 49, 50, 80,
	82, 83, 107, 133, 134, 135, 136, 172, 198, 226,
	235, 245, 246, 268, -200, -184, -185, -178, -179, -186,
	-85, -91, 292, -55, 299, -90, -155, -135, 84, -41,
	202, -40, 21, 23, 92, 265, 98, 230, 230, 202,
	98, 304, 202, 233, 300, -79, -55, -131, -135, -193,
	292, 4, -199, -201, -200, -202, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 42, 47, 48, 52, 54,
	56, 62, 66, 70, 71, 72, 73, 74, 75, 84,
	86, 88, 89, 90, 93, 95, 97, 102, 103, 104,
	110, 112, 113, 115, 118, 120, 126, 128, 130, 137,
	139, 145, 146, 151, 153, 154, 167, 169, 175, 176,
	177, 178, 179, 189, 194, 201, 206, 217, 221, 229,
	238, 240, 243, 247, 248, 252, 257, 258, 262, 263,
	269, 271, 272, 273, 274, -164, -57, -55, -57, 222,
	-48, 30, 98, -43, 303, 46, 205, 98, -43, 303,
	98, 300, 303, -163, 123, 30, -144, -170, -171, -173,
	-182, -176, -180, -181, 39, 45, 44, 242, 218, 227,
	37, 133, 134, 135, 136, 226, 36, 198, 107, 91,
	83, 82, 172, 41, 40, -184, -185, -178, -179, 80,
	245, 246, 138, 38, 50, 49, 268, 235, -83, -135,
	-235, -80, 240, 78, -56, -48, 292, -241, -235, 30,
	-83, 303, 303, 149, -61, 155, 166, 121, -191, 84,
	-197, -190, -156, 9, 252, 102, 176, -196, 8, 291,
	-189, -195, 5, 7, 290, -191, 84, 69, -198, 5,
	4, -181, -156, 84, 152, 301, -193, -192, -238, 110,
	-235, -192, -192, -192, -192, -192, -48, 149, -192, 303,
	303, -52, -43, 303, 299, 30, 167, -49, 123, -48,
	-45, 94, 167, -93, -113, -112, -114, -135, 22, -135,
	-137, -33, -33, -33, -71, -159, -135, -219, 30, -73,
	-48, -76, 303, 113, 10, 11, 54, 33, 290, 291,
	292, 293, 108, 294, 287, 288, 289, 286, 282, 283,
	284, 60, 156, 213, 13, 14, 15, 26, 178, 150,
	279, 125, 224, 296, 16, 17, 18, 140, 35, 126,
	30, 4, -135, -135, -135, -135, -135, 184, -34, -135,
	-83, -89, -34, -143, 297, 299, -89, 299, 5, 5,
	299, -151, -135, -223, 275, 110, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 192, -188, 270, -188, -188, -174, 299, -174,
	-175, 299, -174, 276, 280, 299, -76, -55, 303, 300,
	303, 247, -110, 62, 56, -126, 123, 56, -203, -48,
	62, -204, 52, 258, 194, 112, -110, 62, -110, 62,
	62, -163, 33, 33, 247, -58, -48, 247, 113, 300,
	303, 298, 307, -128, 272, -116, -24, 299, 84, 30,
	-116, -86, -87, -166, -88, -55, 299, -48, -48, -58,
	-59, -81, -82, -14, -168, 98, -16, -24, -20, -31,
	-11, 300, 303, -75, 29, -106, 299, 277, 159, 81,
	122, 158, -107, 216, 300, 303, 247, 303, -80, -73,
	-130, -129, 113, 249, 300, -47, -46, -60, 197, 228,
	203, 219, 303, 8, 7, 7, 5, -193, -237, -48,
	-47, -46, -163, -63, -64, -127, -126, -205, -206, -203,
	128, 258, 103, -24, 98, 176, 167, 284, 98, -115,
	211, 212, 303, -39, 31, 88, 299, 303, 300, -128,
	-165, -78, -161, -163, -34, -162, 299, -170, -170, -81,
	244, -135, -135, -135, -135, -135, -135, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
	-135, -135, -135, 150, 125, 224, 35, 126, -135, 247,
	-135, -135, -135, -135, 169, 167, 252, 102, 259, 89,
	173, -245, 238, 32, -141, -34, 299, -193, -147, 211,
	299, 300, 303, -83, -146, 298, -143, -83, 300, 300,
	-83, 269, 22, 89, 292, -106, 7, -154, -153, 271,
	-224, 105, 118, 299, 300, 300, -135, -135, -100, -187,
	4, 277, 159, 81, 122, 158, 216, -101, -135, -102,
	-136, -137, 290, 291, 296, 299, 211, -103, -135, -83,
	-135, 42, 146, 248, -104, -135, 113, -83, -135, -135,
	-135, -83, -83, -83, 299, 7, 7, 244, 244, 7,
	-128, 300, -155, -40, -55, -48, -48, 167, -126, 123,
	-170, -48, 299, 299, 143, 143, -48, -48, 123, -48,
	123, -48, -48, -41, 202, 299, 299, -48, 202, -48,
	233, 113, -55, -135, -95, 206, -135, -95, -118, 176,
	-79, 267, -48, 206, -77, 303, 113, 284, -79, -43,
	-43, -163, -170, 297, 297, 7, 247, 247, 247, 247,
	299, -135, -237, -56, -237, -46, 256, 59, 197, -197,
	-106, 303, 300, 303, -49, 128, -49, -81, -55, 98,
	5, -48, -159, -16, -48, -92, 118, -167, 303, 281,
	67, -99, 142, 162, 114, 148, 208, 131, -132, 304,
	-158, -157, 30, -48, -34, -162, -161, 278, -135, -135,
	247, -245, 238, -141, -135, 169, 252, 102, 259, 89,
	173, 113, 299, -136, -136, -83, 299, -83, -135, 298,
	298, 303, 300, -70, 303, -69, -135, -83, -83, 300,
	300, -152, -153, 93, -135, -229, 183, 299, 299, -135,
	30, 303, 300, 113, 300, -108, 189, 300, 10, 11,
	290, 291, 292, 293, 108, 294, 287, 288, 289, 286,
	282, 283, 284, 60, 156, 213, 13, 14, 15, 140,
	126, -136, -136, -136, -83, 299, 300, -139, -140, 113,
	110, 30, -104, -104, -104, 300, 113, -83, 303, 303,
	303, 300, 300, 300, 7, 300, 303, 300, 278, 278,
	300, -92, 247, 247, 98, 167, -207, -204, -135, -73,
	299, 299, -38, 92, 222, -111, 98, -43, 98, -43,
	247, -110, 62, -83, -83, 247, 233, 298, -85, 206,
	61, 300, -85, -128, -87, -78, -155, 300, 298, 7,
	7, 300, 159, 122, 158, -107, 158, -107, -107, 7,
	-48, -65, 127, -127, 299, -49, 299, 299, 30, 299,
	-48, -45, 300, -142, 120, 43, -161, 173, 142, 142,
	-161, -99, 142, -97, 182, -97, -97, -158, -193, 305,
	-48, 299, 300, -135, -135, -136, -136, 113, 299, -135,
	-144, 26, 26, 300, -83, 300, 303, 300, -143, 300,
	269, -70, -70, -70, 5, 95, -135, 243, -230, -48,
	299, 272, -69, 300, -170, -170, -135, -139, -135, -170,
	-170, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	89, 167, 173, -136, 303, -83, 300, -140, -139, -135,
	-135, -170, 300, 300, 300, -83, -135, -135, -135, 300,
	7, -142, -48, -48, -126, 98, -208, 62, -209, 54,
	103, 66, 167, 169, 258, 194, 52, 84, 201, 300,
	300, -73, -73, 167, 84, 167, 84, 77, 254, -48,
	-48, -55, -48, -48, 300, 300, -48, -85, -117, 299,
	176, -24, -95, 284, 298, 298, 300, 126, -72, -160,
	-48, -218, 299, -215, -216, -53, 299, -73, -63, -24,
	-72, 176, -226, 273, -135, -83, 239, -161, -161, -98,
	263, 176, 142, -161, -134, -133, 111, 165, 299, -73,
	-157, 26, 26, -135, -144, 300, -135, -135, 300, -135,
	5, -135, 300, 300, 300, -135, -231, -48, -135, 300,
	300, 300, -140, 113, 89, 173, 299, -135, 300, 300,
	303, 300, 300, 300, -226, -126, -48, -81, -48, 103,
	123, 169, 143, 299, -136, -55, -125, -242, 65, 236,
	300, 300, 169, 169, -135, -170, -43, -43, 247, 247,
	90, -73, 62, -91, -34, 299, 186, 300, 303, -54,
	-89, 54, -54, -135, 299, -72, 300, 300, 300, -55,
	-227, -228, -48, 244, -98, 299, -135, -161, 303, 306,
	284, -73, 300, -135, -135, 300, 300, -70, -225, 188,
	300, -136, 113, 299, -144, 300, -135, -209, -49, 167,
	-135, -50, 299, -65, 299, 201, -42, 54, -48, -48,
	260, 168, 300, -48, -48, -125, -160, -39, -81, -39,
	300, -83, 300, -65, -125, 299, 303, 30, 5, -73,
	-133, -193, 300, 300, -70, 43, -136, -144, 300, 300,
	98, 300, -212, 157, -48, -73, -55, -37, 263, -81,
	222, -128, 299, -65, -54, -70, -125, -65, -72, -228,
	-230, 300, -232, 196, 212, -83, 300, 103, -210, -213,
	-211, 176, 114, 187, 225, 300, 300, -68, 299, -135,
	-86, -73, -39, 300, -65, 300, 300, -233, -234, 35,
	255, 69, -135, -233, -48, -211, 176, -213, 176, 260,
	87, -212, -73, -128, 300, -125, -234, 191, 109, 211,
	191, 109, -214, 164, 205, 46, 222, -214, -210, 300,
	-44, 46, 205, -65, 26, 20, 169, 84, -234,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 58, 59,
	60, 61, 0, 0, 366, 0, 0, 0, 0, 0,
	0, 340, -2, 0, 124, 0, 296, 0, 296, 296,
	300, 0, 368, 264, 365, -2, 376, 0, 0, 0,
	374, 354, 0, 0, -2, 0, 0, 0, 0, 769,
	796, 797, 798, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 77, 78, 79, 80, 81, 82, 83,
	84, 0, 90, 97, 98, 879, 100, 0, 107, 108,
	109, 111, 112, 113, 114, 115, 116, 117, 0, 289,
	893, 302, 120, 858, 897, 963, 911, 127, 137, 0,
	969, -2, 141, 71, 170, 171, 0, 173, 188, 0,
	0, 0, 0, 0, 181, 0, 0, 185, 0, 307,
	295, 307, 292, 293, 294, 297, 0, 288, 0, 367,
	0, 0, 0, 263, -2, 350, 351, -2, 0, 371,
	371, 371, 0, 0, 351, 0, 359, 883, 362, 779,
	360, 0, 0, 373, 372, 0, 355, 435, 0, 396,
	0, 2, 0, 948, 435, 0, 948, 0, 0, 0,
	0, 770, 748, 742, 743, 0, 0, 0, 0, 0,
	0, 441, 63, 948, 50, 948, 765, 50, 948, 69,
	0, 85, 87, 806, 807, 808, 809, 974, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 0, 0, 0, 95, 0, 99, 101, 0,
	0, 0, 301, 121, 938, 123, 0, 126, 128, 129,
	0, 0, 0, 0, 0, 0, 140, 165, 166, 72,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 184, 0, 290, 303, 304, 291, 0, 299,
	50, 439, 0, 948, 800, 312, 948, -2, 0, 346,
	383, 384, 0, 0, 0, 369, 370, 0, 0, 0,
	342, 343, 0, 361, 0, 0, 399, 757, 761, 762,
	528, 0, 0, 0, 0, 0, 0, 617, 618, 619,
	0, 621, 622, 623, 943, 0, 627, 628, 963, 769,
	782, 783, 784, 785, 0, 0, 0, 790, 791, 792,
	741, 667, 637, -2, -2, 780, 465, 466, 467, 468,
	-2, 976, 641, 643, 645, 646, 647, 648, 0, 927,
	944, 959, 960, 968, 972, 973, 948, 956, 949, 939,
	946, 955, 839, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 805, 490, 491, 496, 497, 499,
	399, 397, 436, 437, 0, 0, 754, 752, 753, 27,
	285, 29, 0, 285, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 763, 749, 0, 746,
	747, 810, 811, 812, 813, 814, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 445, 0, 318, 0, 0,
	442, 0, 0, 65, 0, 48, 49, 0, 67, 0,
	0, 366, 0, 0, 948, 366, 0, 701, 451, 452,
	453, 454, 455, 525, 458, 459, 460, 461, 462, 463,
	464, 472, 473, 474, 475, 476, 477, 478, 487, 0,
	471, 471, 471, 484, 485, 488, 489, 494, 495, 506,
	507, 509, 511, 505, 505, 505, 502, 503, 0, 699,
	0, 104, 0, 834, 767, 772, 773, 110, 0, 0,
	0, 0, 0, 0, 132, 152, 153, 154, 133, 135,
	142, 144, 145, 146, 155, 156, 157, 158, 257, 0,
	259, 168, 169, 793, 0, 134, 136, 138, 139, 159,
	160, 0, 162, 163, 164, 0, 73, 172, 174, 0,
	187, 175, 176, 177, 178, 179, 180, 183, 186, 0,
	0, 298, 260, 0, 198, 0, 0, 0, 948, 799,
	309, 0, 0, 349, 381, 382, 385, 388, 389, 386,
	528, 356, 357, 358, 377, 378, 274, 363, 0, 0,
	776, 445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 760, 533, 534, 535, 557, 558, 0, -2, 699,
	0, 624, 625, 626, 0, 0, -2, 0, 787, 525,
	0, 0, 740, 669, 0, 0, 0, 0, 0, 0,
	0, 0, 720, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 480, 493, 504, 501, 500, 482, 0, 481,
	479, 0, 483, 0, 0, 0, 445, 0, 0, 756,
	0, 0, 0, 0, 284, 31, 948, 0, 41, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	0, 744, 0, 329, 0, 329, 320, 0, 0, 0,
	316, 332, 333, 335, 336, 0, 0, 443, 64, 766,
	50, 70, 50, 76, 86, 0, 88, 91, 92, 93,
	94, 89, 0, 446, 448, 456, 0, 512, 513, 514,
	515, 516, 517, 526, 96, 0, 0, 0, 105, 106,
	774, 775, 0, 0, 125, 130, 131, 308, 0, 149,
	0, 151, 0, 258, 795, 794, 525, 74, 189, 118,
	305, 306, 440, 0, 197, 199, 201, 202, 203, 204,
	800, 0, 800, 195, 0, 0, 0, 0, 0, 387,
	390, 391, 0, 380, 272, 273, 366, 0, 778, 393,
	758, 426, 400, 408, 424, 411, 0, 529, 530, 531,
	0, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, -2, -2, -2, 549, 550, 551, -2, -2, -2,
	555, 556, -2, 0, 0, 0, 751, 0, -2, 0,
	565, -2, -2, -2, 569, 0, 572, 574, 576, 0,
	0, 0, 0, 750, 586, 732, 0, 759, 571, 0,
	0, 620, 0, 0, 0, 705, 706, 0, -2, 629,
	376, 0, 0, 0, 0, 788, 0, 739, 735, 0,
	677, 0, 0, 0, 642, 644, 0, 0, 0, 0,
	709, 710, 711, 712, 713, 714, 715, 0, 0, 0,
	0, 588, 0, 0, 0, 0, 963, 0, 699, 725,
	0, 0, 0, 0, 0, 699, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 438, 755, 30, 276, 0, 0, 0, 33, 948,
	212, 0, 0, 0, 0, 0, 287, 42, 948, 50,
	948, 50, 43, 28, 285, 0, 0, 278, 0, 275,
	56, 0, 764, 0, 62, 0, 444, 313, 314, 0,
	0, 322, 319, 0, 445, 0, 0, 0, 0, 66,
	68, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 102, 768, 103, 122, 147, 148, 150, 143,
	161, 0, 206, 0, 0, 800, 0, 0, 0, 0,
	311, 312, 379, 0, 777, 395, 0, 398, 0, 0,
	0, 0, 0, 0, 432, 432, 432, 430, 424, 0,
	410, 423, 0, 422, -2, 411, 0, 0, -2, -2,
	0, 0, 0, 587, -2, 570, 573, 575, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 703,
	704, 0, -2, 0, 0, 375, 376, 376, 376, 635,
	0, 0, 736, 0, 0, 636, 0, 0, 0, 0,
	0, 0, 651, 0, 652, 0, 0, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 592, 593, 0, 0, 654, 723, 724, 0,
	0, 0, 0, 0, 0, 659, 0, 730, 0, 0,
	0, 663, 664, 665, 0, 469, 0, 486, 508, 510,
	498, 395, 0, 0, 0, 0, 210, 229, 0, 0,
	0, 0, 35, 0, 0, 0, 0, 39, 0, 45,
	0, 0, 0, 0, 0, 0, 57, 745, 328, 0,
	327, 0, 317, 329, 334, 331, 337, 0, 449, 0,
	0, 457, 518, 519, 520, 521, 522, 523, 524, 0,
	119, 193, 0, 200, 0, 0, 0, 198, 0, 0,
	0, 310, 364, 671, 0, 0, 401, 0, 0, 0,
	0, 0, 0, 427, 431, 428, 429, 409, 406, 0,
	420, 0, 413, 532, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 733, 0, 694, 0, -2, 707, 630,
	0, 0, 0, 0, 789, 734, 738, 0, 675, 676,
	680, 0, 0, 640, 0, 0, 708, 717, 718, 589,
	590, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, -2, -2, -2, 607, 608, 609, -2, -2, -2,
	0, 0, 0, 719, 0, 0, 697, 721, 722, 727,
	728, 0, 656, 657, 658, 729, 0, 0, 0, 492,
	0, 671, 280, 282, 32, 0, 211, 0, 214, 0,
	0, 0, 0, 220, 221, 0, 0, 0, 0, 231,
	238, 0, 0, 0, 47, 0, 0, 286, 0, 50,
	50, 277, 0, 0, 191, 192, 279, 315, 0, 0,
	0, 321, 330, 0, 450, 447, 527, 0, 0, 265,
	271, 271, 0, 638, 639, 0, 0, 0, 0, 196,
	0, 0, 352, 0, 394, 392, 0, 414, 0, 416,
	0, 0, 0, 418, 0, 404, 0, 403, 0, 0,
	412, 0, 0, -2, 0, 580, -2, -2, 693, 700,
	786, 376, 631, 633, 634, 737, 682, 679, 0, 666,
	649, 650, 716, 0, 0, 0, 0, 700, 696, 655,
	0, 661, 662, 470, 353, 34, 0, 215, 216, 800,
	0, 219, 222, 0, 224, 802, 206, 0, 235, 236,
	233, 0, 36, 37, 46, 52, 38, 44, 0, 0,
	0, 0, 0, 338, 339, 0, 0, 238, 0, 274,
	781, 0, 274, 0, 0, 0, 228, 206, 238, 0,
	670, 672, 0, 0, 415, 0, 434, 417, 0, 407,
	0, 0, 421, -2, -2, 581, 695, 0, 376, 0,
	668, -2, 0, 0, 0, 698, 0, 213, 217, 0,
	0, 244, 0, 232, 0, 0, 54, 0, 281, 283,
	0, 324, 445, 326, 0, 206, 266, 267, 270, 268,
	271, 376, 238, 194, 206, 0, 0, 0, 425, 0,
	405, 402, 419, 632, 685, 0, -2, 0, 615, 660,
	0, 223, 249, 0, 0, 0, 240, 40, 0, 51,
	0, 325, 0, 226, 274, 0, 206, 261, 0, 673,
	674, 433, 0, 0, 0, 681, 616, 0, 225, 245,
	246, 0, 241, 242, 243, 801, 237, 244, 0, 53,
	445, 0, 269, 630, 227, 238, 678, 683, 686, -2,
	914, 831, 0, 684, 218, 247, 0, 248, 0, 0,
	0, 249, 0, 323, 209, 206, 0, 688, 689, 690,
	691, 692, 250, 0, 253, 254, 0, 251, 234, 239,
	205, 207, 208, 262, 0, 252, 255, 256, 687,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 288, 3, 294, 289, 3,
	299, 300, 292, 290, 303, 291, 301, 293, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 307, 302,
	282, 284, 283, 3, 304, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 297, 3, 298, 287, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 305, 286, 306, 296,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 285,
	57625, 295, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:722
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:734
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:825
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:843
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:850
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			unimplementedWithIssue(2473)
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:898
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			unimplemented()
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:902
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1019
		{ /* SKIP DOC */
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{ /* SKIP DOC */
		}
	case 125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			unimplemented()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = Low
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = Normal
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = High
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1379
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1400
		{
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = DropDefault
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1617
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1805
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = true
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = false
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			unimplemented()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1896
		{
			unimplemented()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			unimplemented()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1900
		{
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = Ascending
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = Descending
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = true
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = false
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1967
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2010
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.str = ""
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.str = ""
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2104
		{
			unimplementedWithIssue(6637)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2111
		{
			unimplementedWithIssue(6637)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2153
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			unimplemented()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			unimplementedWithIssue(7841)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2410
		{
			unimplemented()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2411
		{
			unimplemented()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2419
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2427
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = true
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = false
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = false
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = true
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2451
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2550
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &From{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2649
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.str = astFullJoin
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.str = astLeftJoin
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.str = astRightJoin
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.str = astInnerJoin
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2796
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2886
		{
			unimplementedWithIssue(2115)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2887
		{
			unimplementedWithIssue(2115)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			unimplementedWithIssue(2115)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2891
		{
			unimplementedWithIssue(2115)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2892
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2956
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = nil
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3077
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3109
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3149
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3182
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3193
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3196
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3197
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3229
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3640
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3641
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3664
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3684
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3773
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3774
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3777
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3778
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Window(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.str = ""
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			unimplemented()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3867
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3870
		{
			unimplemented()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3871
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3878
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3880
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4210
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4402
		{
			unimplemented()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = DNull
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.str = ""
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
