// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:294
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4658

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 353,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 328,
	173, 328,
	203, 328,
	295, 328,
	297, 328,
	-2, 338,
	-1, 51,
	1, 331,
	173, 331,
	203, 331,
	295, 331,
	297, 331,
	-2, 337,
	-1, 60,
	1, 24,
	297, 24,
	-2, 353,
	-1, 271,
	1, 161,
	297, 161,
	-2, 847,
	-1, 304,
	148, 363,
	172, 363,
	-2, 334,
	-1, 307,
	148, 362,
	172, 362,
	-2, 332,
	-1, 430,
	148, 362,
	172, 362,
	-2, 335,
	-1, 486,
	294, 787,
	-2, 780,
	-1, 487,
	294, 788,
	-2, 781,
	-1, 493,
	5, 497,
	294, 497,
	-2, 934,
	-1, 516,
	5, 463,
	-2, 910,
	-1, 517,
	5, 491,
	294, 491,
	-2, 912,
	-1, 518,
	5, 471,
	-2, 913,
	-1, 519,
	5, 470,
	-2, 914,
	-1, 520,
	5, 491,
	294, 491,
	-2, 917,
	-1, 521,
	5, 491,
	294, 491,
	-2, 918,
	-1, 522,
	5, 492,
	-2, 921,
	-1, 523,
	5, 458,
	-2, 922,
	-1, 524,
	5, 458,
	-2, 923,
	-1, 525,
	5, 473,
	-2, 926,
	-1, 526,
	5, 459,
	-2, 931,
	-1, 527,
	5, 460,
	-2, 932,
	-1, 528,
	5, 461,
	-2, 933,
	-1, 529,
	5, 458,
	-2, 937,
	-1, 530,
	5, 464,
	-2, 942,
	-1, 531,
	5, 462,
	-2, 945,
	-1, 532,
	5, 489,
	294, 489,
	-2, 947,
	-1, 533,
	5, 493,
	-2, 950,
	-1, 534,
	5, 495,
	-2, 951,
	-1, 535,
	5, 488,
	294, 488,
	-2, 955,
	-1, 853,
	95, 338,
	134, 338,
	148, 338,
	172, 338,
	176, 338,
	252, 338,
	-2, 607,
	-1, 861,
	294, 765,
	-2, 754,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 531,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 532,
	-1, 1053,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 533,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 537,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 538,
	-1, 1059,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 539,
	-1, 1062,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 544,
	-1, 1068,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 546,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1072,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1073,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 553,
	-1, 1098,
	181, 678,
	-2, 681,
	-1, 1258,
	95, 338,
	134, 338,
	148, 338,
	172, 338,
	176, 338,
	252, 338,
	-2, 411,
	-1, 1262,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 545,
	-1, 1263,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 547,
	-1, 1268,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 548,
	-1, 1286,
	181, 677,
	-2, 680,
	-1, 1442,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 549,
	-1, 1447,
	137, 0,
	-2, 563,
	-1, 1455,
	181, 679,
	-2, 682,
	-1, 1488,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 588,
	-1, 1489,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 589,
	-1, 1490,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 590,
	-1, 1494,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 594,
	-1, 1495,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 595,
	-1, 1496,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 596,
	-1, 1601,
	137, 0,
	-2, 564,
	-1, 1604,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 567,
	-1, 1605,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 569,
	-1, 1690,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 568,
	-1, 1691,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 570,
	-1, 1698,
	137, 0,
	-2, 597,
	-1, 1742,
	137, 0,
	-2, 598,
	-1, 1795,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 909,
}

const sqlNprod = 1049
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23266

var sqlAct = [...]int{

	487, 577, 1817, 935, 1411, 1794, 1773, 1747, 1775, 1642,
	1774, 1793, 943, 1466, 1024, 1678, 308, 1564, 1665, 590,
	1593, 1565, 805, 460, 1574, 479, 272, 485, 484, 37,
	548, 1526, 84, 84, 84, 1585, 856, 84, 477, 679,
	84, 1579, 1005, 1033, 330, 1008, 858, 1255, 84, 449,
	1190, 1254, 1289, 786, 1341, 84, 84, 17, 1422, 84,
	1431, 1340, 84, 84, 84, 1245, 974, 783, 84, 84,
	84, 84, 944, 356, 554, 1007, 911, 1241, 1144, 85,
	1108, 557, 327, 313, 1081, 327, 920, 338, 73, 536,
	1084, 327, 23, 338, 1036, 315, 50, 351, 801, 591,
	13, 6, 313, 958, 653, 307, 967, 1000, 637, 1196,
	418, 807, 559, 459, 450, 1034, 419, 634, 549, 888,
	550, 892, 664, 78, 353, 349, 50, 8, 7, 5,
	4, 77, 79, 71, 937, 346, 1011, 318, 433, 432,
	259, 434, 633, 655, 348, 250, 651, 570, 1147, 316,
	437, 342, 357, 971, 1685, 936, 50, 1686, 80, 75,
	74, 76, 358, 579, 1824, 1253, 1809, 1028, 579, 1028,
	1790, 579, 1781, 1664, 326, 1028, 312, 333, 538, 81,
	51, 1772, 52, 343, 964, 312, 1202, 1766, 297, 1744,
	1028, 809, 964, 1738, 972, 354, 1028, 1727, 1717, 1692,
	1664, 1028, 964, 1689, 809, 320, 1028, 81, 336, 1675,
	1672, 1663, 1664, 1673, 1664, 1647, 1646, 1626, 1028, 1028,
	977, 49, 1606, 1603, 1537, 977, 964, 1028, 977, 973,
	970, 305, 1451, 304, 1397, 977, 1391, 1392, 810, 1392,
	1358, 1356, 1355, 1359, 977, 977, 84, 29, 1354, 49,
	1286, 977, 1732, 977, 269, 30, 56, 810, 1284, 568,
	812, 84, 1283, 1285, 84, 84, 1029, 977, 986, 1028,
	976, 977, 808, 977, 1501, 29, 1454, 58, 1227, 812,
	909, 811, 963, 30, 1243, 964, 908, 975, 585, 907,
	1229, 586, 1028, 537, 979, 1092, 1023, 84, 1288, 84,
	811, 84, 994, 84, 59, 551, 1667, 977, 444, 552,
	445, 54, 777, 776, 645, 644, 382, 55, 84, 325,
	580, 431, 327, 60, 552, 580, 551, 425, 580, 84,
	552, 678, 402, 1792, 817, 1788, 53, 1555, 56, 1780,
	84, 84, 84, 1739, 84, 1674, 969, 1631, 1627, 1619,
	1618, 582, 545, 817, 1617, 1612, 1611, 430, 1610, 58,
	1562, 1516, 1511, 327, 571, 571, 547, 1510, 968, 1783,
	543, 56, 542, 1509, 1457, 84, 1440, 390, 1202, 1421,
	1401, 827, 84, 391, 84, 1363, 59, 1360, 1231, 1348,
	1339, 808, 58, 1311, 1308, 356, 356, 1306, 327, 56,
	827, 1294, 597, 681, 84, 1293, 84, 84, 84, 84,
	84, 84, 1228, 84, 424, 1161, 583, 84, 53, 59,
	58, 578, 84, 674, 780, 779, 54, 1115, 84, 1114,
	444, 864, 55, 443, 1089, 1468, 1757, 422, 828, 1731,
	1709, 1707, 1700, 1681, 1670, 1661, 84, 59, 1639, 84,
	1312, 53, 1624, 1596, 54, 343, 1572, 828, 1554, 1446,
	55, 440, 441, 1439, 810, 1418, 1417, 446, 1416, 1414,
	1375, 1374, 1338, 1302, 357, 357, 1399, 1301, 1280, 72,
	1276, 1086, 682, 1216, 358, 358, 812, 1175, 1174, 572,
	587, 569, 683, 313, 1312, 1154, 305, 1113, 304, 1027,
	893, 896, 900, 886, 885, 884, 883, 811, 810, 861,
	819, 820, 821, 813, 814, 815, 816, 818, 882, 838,
	1090, 810, 810, 881, 880, 879, 641, 631, 640, 878,
	812, 821, 813, 814, 815, 816, 818, 643, 838, 877,
	876, 675, 668, 812, 875, 551, 1317, 84, 767, 552,
	874, 811, 1312, 681, 873, 619, 1175, 872, 871, 862,
	817, 84, 778, 860, 811, 84, 53, 781, 84, 84,
	902, 789, 331, 791, 84, 790, 84, 84, 903, 84,
	448, 388, 84, 803, 84, 84, 378, 356, 327, 376,
	1317, 338, 905, 1327, 1561, 1560, 1312, 947, 1329, 1330,
	1331, 1326, 338, 859, 817, 338, 914, 1210, 1209, 810,
	953, 351, 855, 544, 1687, 492, 417, 453, 305, 1559,
	797, 305, 305, 798, 799, 1203, 1018, 1591, 938, 396,
	938, 898, 682, 869, 1362, 899, 84, 84, 925, 927,
	890, 891, 683, 73, 1361, 1326, 894, 959, 1317, 1261,
	1328, 897, 811, 413, 901, 397, 1580, 971, 764, 981,
	936, 768, 769, 770, 771, 772, 357, 773, 1312, 1469,
	618, 775, 1297, 1109, 262, 889, 358, 1198, 78, 681,
	930, 50, 961, 1753, 1804, 50, 77, 79, 1716, 985,
	960, 962, 1317, 1545, 290, 1327, 1805, 917, 972, 1312,
	1120, 302, 940, 291, 1655, 1223, 64, 942, 1654, 354,
	954, 956, 933, 80, 75, 74, 76, 952, 999, 955,
	865, 1387, 1367, 951, 540, 1313, 1314, 1315, 1316, 1318,
	560, 1366, 561, 973, 970, 894, 296, 897, 295, 1327,
	311, 815, 816, 818, 1264, 838, 921, 891, 890, 913,
	1215, 65, 1328, 980, 1767, 1386, 988, 982, 682, 983,
	394, 987, 1398, 1214, 1317, 1130, 1213, 84, 683, 1313,
	1314, 1315, 1316, 1318, 560, 1123, 561, 1212, 1715, 310,
	1069, 84, 84, 813, 814, 815, 816, 818, 560, 838,
	561, 975, 978, 932, 931, 1317, 1328, 395, 539, 421,
	562, 1158, 838, 838, 327, 924, 1157, 913, 1040, 416,
	84, 1030, 84, 912, 374, 299, 1124, 1735, 1644, 1083,
	1755, 312, 1083, 1322, 1319, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 1377, 327, 56, 573, 597, 975, 1039, 1021,
	1022, 1769, 1327, 1814, 562, 1406, 681, 1109, 579, 1195,
	969, 1125, 1122, 1191, 1389, 58, 1200, 1770, 562, 810,
	300, 1189, 566, 1323, 1324, 1325, 1804, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 67, 66, 303, 1191,
	565, 812, 59, 1710, 393, 1087, 923, 903, 1003, 54,
	838, 68, 903, 1002, 1224, 55, 1004, 309, 1222, 1328,
	887, 62, 811, 975, 1696, 1160, 1096, 1662, 420, 1126,
	1038, 84, 84, 84, 939, 852, 1300, 84, 673, 672,
	84, 666, 661, 1031, 1432, 682, 84, 84, 84, 84,
	84, 1777, 84, 84, 1166, 683, 1384, 392, 385, 387,
	84, 69, 84, 414, 597, 1315, 1316, 1318, 922, 84,
	1813, 63, 312, 1186, 1205, 817, 1206, 1776, 84, 1803,
	1801, 1378, 1170, 1197, 1622, 1578, 1088, 558, 1121, 313,
	563, 1105, 1197, 1321, 1313, 1314, 1315, 1316, 1318, 84,
	84, 327, 1164, 1016, 1403, 84, 1645, 1273, 1193, 619,
	597, 393, 596, 405, 910, 356, 676, 415, 436, 1533,
	1271, 990, 827, 1778, 383, 580, 381, 992, 1093, 1097,
	1684, 1100, 1185, 84, 563, 84, 84, 84, 1172, 1404,
	84, 1266, 1165, 993, 1082, 1497, 1830, 1139, 563, 84,
	1534, 1812, 991, 1151, 1152, 1153, 84, 1649, 84, 1648,
	1234, 1779, 1233, 1369, 1637, 1169, 810, 1623, 1017, 625,
	70, 1820, 435, 489, 796, 1201, 788, 782, 1204, 828,
	61, 327, 1541, 677, 1208, 650, 1269, 313, 812, 1533,
	1274, 1527, 1312, 1207, 357, 1402, 436, 975, 1748, 1525,
	1230, 1260, 1232, 1544, 358, 959, 1218, 435, 1219, 811,
	1543, 774, 1220, 472, 1638, 826, 1221, 619, 648, 1225,
	1534, 621, 1498, 646, 618, 1226, 1594, 1177, 1499, 649,
	1829, 1176, 1529, 1588, 1530, 1427, 313, 1287, 1426, 1528,
	961, 392, 1238, 50, 251, 82, 243, 244, 960, 962,
	261, 1239, 1259, 273, 813, 814, 815, 816, 818, 1532,
	838, 261, 817, 619, 1540, 256, 1535, 1270, 319, 319,
	252, 1265, 329, 1066, 1272, 329, 335, 329, 1267, 1595,
	341, 329, 344, 329, 273, 313, 340, 1818, 1317, 1248,
	427, 310, 1542, 253, 1412, 620, 84, 1563, 1699, 1423,
	1242, 1112, 1529, 1381, 1530, 1383, 1251, 1621, 1296, 827,
	255, 1342, 1445, 1307, 1275, 984, 1430, 412, 1373, 667,
	662, 1531, 1249, 84, 410, 1394, 409, 408, 1819, 1532,
	407, 406, 618, 403, 339, 1327, 1535, 1343, 870, 766,
	1345, 1346, 1347, 1111, 1523, 1821, 947, 1382, 84, 1380,
	84, 1368, 84, 1235, 1019, 1279, 84, 1015, 1364, 1281,
	957, 1388, 1064, 1067, 84, 584, 828, 84, 581, 576,
	1393, 1291, 1292, 84, 681, 567, 564, 84, 618, 84,
	1371, 1463, 1250, 1385, 787, 1656, 1063, 327, 438, 323,
	327, 1531, 1328, 1025, 254, 1395, 1805, 670, 1396, 399,
	1405, 1407, 1408, 1658, 1337, 929, 913, 1425, 913, 1185,
	1428, 1420, 928, 1436, 926, 1350, 1448, 1390, 3, 1415,
	1741, 84, 597, 1667, 1435, 1413, 1712, 1459, 1460, 1461,
	1433, 1434, 1424, 1429, 442, 257, 289, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 1733, 838, 247, 1026,
	597, 597, 1456, 682, 439, 324, 941, 804, 597, 379,
	1065, 642, 589, 683, 1319, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 966, 1827, 384, 1470, 400, 273, 273, 332,
	1828, 292, 293, 1312, 258, 810, 1517, 84, 84, 84,
	597, 1475, 1409, 632, 1400, 84, 84, 996, 995, 1357,
	1211, 84, 1159, 84, 1156, 84, 84, 84, 84, 1155,
	261, 1106, 329, 84, 273, 1504, 428, 1538, 1539, 1791,
	997, 1608, 1462, 1505, 1472, 1473, 1236, 298, 1548, 998,
	863, 319, 1477, 1643, 1522, 249, 1557, 84, 84, 765,
	404, 1614, 329, 1518, 1768, 1299, 596, 84, 84, 1452,
	593, 84, 1695, 329, 329, 329, 1577, 574, 1677, 1552,
	84, 84, 1570, 1569, 1508, 1558, 1570, 1569, 1110, 1556,
	327, 327, 868, 1571, 327, 619, 28, 1571, 1567, 465,
	1576, 1524, 1597, 1370, 1010, 1009, 1602, 1244, 329, 84,
	1583, 1584, 597, 684, 1589, 638, 671, 638, 660, 1079,
	488, 411, 654, 619, 619, 663, 1119, 1502, 1598, 541,
	490, 619, 1077, 594, 491, 1131, 595, 273, 1512, 638,
	273, 273, 273, 273, 273, 895, 273, 478, 592, 352,
	273, 1590, 945, 1107, 1248, 261, 1295, 866, 464, 470,
	469, 785, 1094, 619, 84, 375, 84, 461, 84, 84,
	1620, 1251, 1592, 1252, 596, 621, 84, 40, 389, 319,
	267, 1246, 806, 268, 1194, 1553, 1020, 1249, 1652, 1653,
	792, 1379, 301, 1309, 1635, 84, 1075, 377, 1074, 1641,
	1632, 1247, 1080, 1137, 1129, 1127, 1118, 423, 553, 1633,
	618, 597, 946, 1582, 401, 1587, 1032, 1657, 965, 84,
	596, 84, 447, 1573, 800, 1782, 1668, 322, 321, 84,
	1671, 1006, 398, 647, 989, 294, 1706, 84, 618, 618,
	1570, 1569, 1676, 1666, 1659, 1711, 618, 1250, 1376, 620,
	1752, 1571, 327, 57, 22, 20, 19, 18, 16, 1688,
	1680, 15, 14, 21, 12, 619, 1694, 11, 10, 9,
	27, 26, 1683, 25, 2, 1, 0, 0, 618, 1076,
	329, 0, 0, 621, 1701, 1651, 1078, 1708, 0, 0,
	597, 0, 0, 0, 918, 84, 84, 0, 329, 84,
	1586, 329, 934, 84, 0, 0, 1704, 329, 84, 949,
	950, 0, 329, 1720, 84, 329, 0, 273, 273, 1729,
	1722, 1244, 84, 1724, 0, 1730, 1721, 0, 681, 621,
	0, 313, 1570, 1569, 1723, 451, 451, 903, 1728, 1131,
	1131, 0, 0, 1571, 1734, 555, 1736, 0, 84, 1312,
	84, 84, 1740, 84, 0, 0, 0, 620, 0, 0,
	1743, 1756, 0, 0, 619, 1758, 597, 1737, 1248, 638,
	806, 0, 1750, 84, 1751, 1762, 0, 1761, 0, 1754,
	618, 0, 0, 1760, 1759, 1251, 0, 1765, 1764, 1763,
	1131, 1131, 1131, 0, 0, 1246, 84, 0, 84, 1570,
	1569, 1249, 0, 620, 0, 0, 1789, 682, 1785, 0,
	1571, 0, 0, 0, 1787, 1247, 0, 683, 0, 947,
	1786, 0, 1799, 1800, 84, 0, 1802, 0, 0, 1808,
	1806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1810, 1811, 248, 619, 0, 1317, 1807, 0, 1822, 793,
	795, 1825, 0, 1823, 0, 1826, 802, 0, 0, 1726,
	0, 1250, 0, 0, 0, 0, 0, 0, 847, 848,
	849, 850, 851, 1831, 466, 38, 0, 854, 0, 618,
	0, 0, 0, 0, 0, 251, 0, 1277, 1278, 0,
	0, 0, 1327, 0, 0, 0, 0, 867, 0, 0,
	1001, 0, 0, 0, 593, 38, 256, 0, 0, 0,
	0, 252, 0, 0, 329, 918, 0, 0, 0, 619,
	0, 0, 0, 1131, 1131, 306, 0, 0, 314, 0,
	1771, 0, 596, 0, 253, 38, 0, 0, 1334, 1335,
	1336, 0, 0, 329, 0, 273, 0, 314, 0, 1328,
	0, 255, 0, 0, 0, 0, 0, 0, 618, 0,
	596, 596, 0, 0, 0, 904, 0, 0, 596, 0,
	0, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
	1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
	0, 1131, 0, 0, 0, 0, 0, 810, 0, 0,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 0, 0, 0, 0, 0, 0, 812,
	1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 0,
	0, 0, 0, 0, 618, 254, 0, 0, 0, 0,
	811, 621, 0, 0, 329, 1167, 1168, 0, 0, 0,
	918, 0, 0, 1173, 0, 0, 0, 0, 593, 1178,
	1179, 1181, 1183, 1184, 0, 1187, 1188, 0, 0, 621,
	621, 1443, 1444, 329, 0, 1199, 257, 621, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 0, 0, 0, 0, 621,
	0, 0, 1001, 638, 0, 620, 0, 0, 1001, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 0, 1500,
	827, 0, 0, 620, 620, 0, 785, 0, 785, 273,
	329, 620, 0, 1237, 0, 0, 0, 0, 0, 0,
	0, 0, 1240, 0, 0, 0, 0, 0, 0, 1257,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 0, 0, 0, 0,
	306, 0, 1131, 0, 0, 0, 0, 828, 0, 0,
	0, 596, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 0,
	1068, 0, 1070, 1071, 1072, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 1131,
	596, 0, 0, 0, 0, 620, 0, 1116, 1117, 0,
	1128, 0, 1138, 1140, 1145, 1148, 1149, 1150, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 806,
	621, 0, 306, 0, 0, 306, 306, 0, 0, 287,
	0, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 853, 0,
	1640, 0, 857, 0, 0, 0, 0, 0, 0, 0,
	1192, 0, 0, 0, 276, 0, 596, 1131, 0, 281,
	282, 1410, 288, 918, 0, 785, 0, 0, 0, 1419,
	593, 0, 0, 0, 275, 277, 0, 329, 0, 0,
	329, 0, 0, 0, 620, 0, 1257, 0, 0, 621,
	1438, 1217, 1257, 0, 0, 0, 0, 0, 593, 593,
	24, 0, 0, 0, 0, 0, 593, 0, 0, 0,
	0, 42, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 0, 1698, 0, 0,
	0, 0, 0, 0, 1467, 44, 0, 802, 593, 283,
	0, 0, 49, 0, 0, 38, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 33, 0, 620, 38, 621, 0, 0, 29, 0,
	0, 45, 0, 0, 0, 32, 30, 1262, 1263, 0,
	0, 0, 0, 1268, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	1520, 1521, 918, 0, 0, 1742, 1282, 0, 806, 806,
	0, 0, 0, 0, 1546, 1290, 1547, 0, 329, 1549,
	1550, 1551, 0, 1298, 0, 0, 329, 1303, 0, 0,
	0, 0, 0, 0, 284, 0, 0, 285, 0, 620,
	593, 0, 286, 0, 0, 0, 0, 0, 1566, 854,
	1575, 918, 1566, 0, 0, 1145, 1145, 1145, 0, 0,
	329, 329, 0, 0, 329, 0, 0, 0, 31, 0,
	0, 0, 0, 806, 1257, 0, 0, 1365, 0, 47,
	0, 0, 35, 0, 46, 0, 0, 0, 1372, 36,
	0, 0, 56, 0, 0, 0, 0, 39, 41, 0,
	0, 0, 1615, 0, 0, 451, 43, 0, 0, 0,
	0, 0, 0, 58, 451, 0, 0, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	59, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 918, 0, 1634,
	0, 273, 1636, 0, 0, 0, 0, 0, 0, 329,
	0, 0, 53, 0, 0, 1441, 0, 0, 1442, 0,
	0, 0, 0, 0, 1035, 0, 0, 0, 806, 1447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1217, 0, 0, 0, 1566, 0, 0, 0,
	0, 1464, 329, 0, 1679, 0, 0, 0, 593, 1085,
	0, 1474, 329, 0, 1476, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 1507, 0, 0,
	0, 0, 0, 0, 0, 1513, 1514, 1515, 0, 0,
	0, 0, 0, 810, 0, 0, 0, 0, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 1713, 1714,
	0, 0, 1718, 0, 593, 812, 1719, 843, 1566, 0,
	0, 273, 0, 451, 0, 0, 0, 1575, 0, 1312,
	0, 1329, 1330, 1331, 314, 806, 811, 0, 0, 0,
	0, 0, 826, 0, 1600, 0, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 1581, 0, 0,
	0, 1749, 832, 806, 329, 0, 273, 0, 0, 812,
	0, 843, 0, 0, 0, 0, 0, 0, 1326, 1601,
	0, 0, 0, 1604, 1605, 1566, 1679, 0, 1607, 817,
	811, 0, 1609, 0, 0, 0, 826, 0, 0, 1613,
	0, 0, 0, 1616, 0, 0, 836, 844, 0, 329,
	0, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 1317, 0, 0, 0, 0,
	834, 0, 1258, 0, 0, 1625, 827, 806, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	836, 844, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 842, 0, 0, 1650, 0, 0,
	0, 853, 0, 0, 834, 0, 0, 0, 0, 0,
	827, 0, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 1669, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 1682, 0, 0, 0, 0, 0, 0, 0, 1328,
	853, 0, 0, 1690, 1691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 837, 0,
	0, 0, 1703, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 1705, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 1323, 1324, 1325, 0,
	1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 1035, 1163,
	0, 1035, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 1798, 1798, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 1798,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 1798, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 38, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 1035, 1035, 128, 0, 1035, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 328, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 56, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 58,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 359, 242, 0, 190,
	0, 0, 0, 54, 191, 192, 193, 194, 0, 55,
	0, 0, 0, 0, 1660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1035, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 685, 88,
	686, 687, 688, 689, 195, 690, 691, 692, 693, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 694, 92,
	202, 203, 93, 695, 696, 204, 205, 206, 697, 207,
	698, 360, 699, 94, 95, 96, 853, 97, 700, 98,
	99, 701, 361, 100, 101, 702, 703, 704, 705, 706,
	707, 102, 103, 104, 105, 208, 106, 209, 210, 708,
	107, 709, 108, 710, 711, 712, 109, 110, 713, 111,
	714, 0, 715, 211, 112, 113, 212, 716, 717, 718,
	114, 115, 213, 0, 116, 719, 117, 720, 721, 362,
	722, 118, 214, 723, 215, 724, 119, 120, 216, 217,
	364, 725, 123, 726, 121, 727, 363, 122, 218, 219,
	220, 728, 221, 729, 365, 124, 366, 125, 126, 730,
	731, 222, 367, 127, 368, 732, 128, 733, 734, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 735, 138, 736, 223, 140, 224, 141, 142, 737,
	738, 739, 740, 741, 143, 225, 370, 144, 371, 226,
	145, 146, 147, 742, 227, 148, 228, 149, 743, 150,
	151, 152, 229, 153, 154, 744, 156, 157, 155, 158,
	745, 159, 372, 160, 161, 230, 162, 0, 163, 164,
	165, 746, 231, 166, 167, 747, 168, 169, 373, 170,
	232, 233, 171, 748, 172, 173, 175, 234, 174, 235,
	749, 176, 750, 177, 178, 751, 236, 237, 238, 752,
	753, 179, 239, 240, 754, 180, 181, 182, 183, 755,
	756, 184, 185, 186, 757, 758, 187, 188, 189, 241,
	242, 759, 190, 760, 761, 762, 763, 191, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 86, 87,
	685, 88, 686, 687, 688, 689, 195, 690, 691, 692,
	693, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	694, 92, 202, 203, 93, 695, 696, 204, 205, 206,
	697, 207, 698, 360, 699, 94, 95, 96, 0, 97,
	700, 98, 99, 701, 361, 100, 101, 702, 703, 704,
	705, 706, 707, 102, 103, 104, 105, 208, 106, 209,
	210, 708, 107, 709, 108, 710, 711, 712, 109, 110,
	713, 111, 714, 0, 715, 211, 112, 113, 212, 716,
	717, 718, 114, 115, 213, 0, 116, 719, 117, 720,
	721, 362, 722, 118, 214, 723, 215, 724, 119, 120,
	216, 217, 364, 725, 123, 726, 121, 727, 363, 122,
	218, 219, 220, 728, 221, 729, 365, 124, 366, 125,
	126, 730, 731, 222, 367, 127, 368, 732, 128, 733,
	734, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 735, 138, 736, 223, 140, 224, 141,
	142, 737, 738, 739, 740, 741, 143, 225, 370, 144,
	371, 226, 145, 146, 147, 742, 227, 148, 228, 149,
	743, 150, 151, 152, 229, 153, 154, 744, 156, 157,
	155, 158, 745, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 746, 231, 166, 167, 747, 168, 169,
	373, 170, 232, 233, 171, 748, 172, 173, 175, 234,
	174, 235, 749, 176, 750, 177, 178, 751, 236, 237,
	238, 752, 753, 179, 239, 240, 754, 180, 181, 182,
	183, 755, 756, 184, 185, 186, 757, 758, 187, 188,
	189, 241, 242, 759, 190, 760, 761, 762, 763, 191,
	192, 193, 194, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 86, 87,
	685, 88, 686, 687, 688, 689, 195, 690, 691, 692,
	693, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	694, 92, 202, 203, 93, 695, 696, 204, 205, 206,
	697, 207, 698, 360, 699, 94, 95, 96, 0, 97,
	700, 98, 99, 701, 361, 100, 101, 702, 703, 704,
	705, 706, 707, 102, 103, 104, 105, 208, 106, 209,
	210, 708, 107, 709, 108, 710, 711, 712, 109, 110,
	713, 111, 714, 0, 715, 211, 112, 113, 212, 716,
	717, 718, 114, 115, 213, 0, 116, 719, 117, 720,
	721, 362, 722, 118, 214, 723, 215, 724, 119, 120,
	216, 217, 364, 725, 123, 726, 121, 727, 363, 122,
	218, 219, 220, 728, 221, 729, 365, 124, 366, 125,
	126, 730, 731, 222, 367, 127, 368, 732, 128, 733,
	734, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 735, 138, 736, 223, 140, 224, 141,
	142, 737, 738, 739, 740, 741, 143, 225, 370, 144,
	371, 226, 145, 146, 147, 742, 227, 148, 228, 149,
	743, 150, 151, 152, 229, 153, 154, 744, 156, 157,
	155, 158, 745, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 746, 231, 166, 167, 747, 168, 169,
	373, 170, 232, 233, 171, 748, 172, 173, 175, 234,
	174, 235, 749, 176, 750, 177, 178, 751, 236, 237,
	238, 752, 753, 179, 239, 240, 754, 180, 181, 182,
	183, 755, 756, 184, 185, 186, 757, 758, 187, 188,
	189, 241, 242, 759, 190, 760, 761, 762, 763, 191,
	192, 193, 194, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	1102, 88, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 89, 90, 196, 516, 198, 517, 91, 518, 519,
	0, 92, 202, 203, 93, 483, 501, 520, 521, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 522, 106, 523,
	524, 0, 107, 0, 108, 0, 1103, 0, 515, 110,
	0, 111, 0, 0, 0, 467, 112, 113, 503, 481,
	0, 0, 114, 115, 525, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 364, 0, 123, 0, 121, 0, 363, 122,
	526, 527, 528, 0, 493, 0, 365, 124, 366, 125,
	126, 0, 0, 514, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 457, 138, 482, 510, 140, 529, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 530, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 471, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	373, 170, 531, 233, 171, 0, 172, 173, 175, 532,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 533,
	534, 0, 0, 179, 507, 508, 480, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 535, 1101, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 455, 1104, 0, 0, 0,
	456, 0, 0, 463, 1099, 486, 475, 476, 473, 474,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 556, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 56, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 58, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 359, 535, 0, 190, 0, 0, 0,
	54, 191, 192, 193, 194, 458, 55, 0, 486, 475,
	476, 473, 474, 462, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 86, 87, 463, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 56, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 58,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 359, 535, 0, 190,
	0, 0, 0, 54, 191, 192, 193, 194, 458, 55,
	0, 486, 475, 476, 473, 474, 462, 0, 0, 454,
	455, 0, 0, 0, 0, 456, 86, 87, 463, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 1141, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 1146, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	1142, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	1143, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 486, 475, 476, 473, 474, 462,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 86,
	87, 463, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 455, 0, 0, 0,
	0, 456, 0, 0, 463, 1503, 486, 475, 476, 473,
	474, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 89, 90, 196, 516, 198, 517,
	91, 518, 519, 0, 92, 202, 203, 93, 483, 501,
	520, 521, 206, 0, 512, 0, 494, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 495, 497, 0, 496, 498, 102, 103, 104, 105,
	522, 106, 523, 524, 0, 107, 0, 108, 0, 0,
	0, 515, 110, 0, 111, 0, 0, 0, 467, 112,
	113, 503, 481, 0, 0, 114, 115, 525, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 513, 0, 215,
	0, 119, 120, 509, 511, 364, 0, 123, 0, 121,
	0, 363, 122, 526, 527, 528, 0, 493, 0, 365,
	124, 366, 125, 126, 0, 0, 514, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 457, 138, 482, 510,
	140, 529, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 504, 145, 146, 147, 0, 505,
	148, 228, 149, 0, 150, 151, 152, 530, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	471, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	499, 168, 169, 373, 170, 531, 233, 171, 0, 172,
	173, 175, 532, 174, 506, 0, 176, 0, 177, 178,
	0, 236, 533, 534, 0, 0, 179, 507, 508, 480,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 500,
	0, 187, 188, 189, 241, 535, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 455, 0,
	0, 0, 0, 456, 0, 0, 463, 1453, 486, 475,
	476, 473, 474, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	455, 0, 0, 0, 0, 456, 0, 0, 463, 1098,
	486, 475, 476, 473, 474, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 455, 0, 0, 0, 0, 456, 859, 1095,
	463, 486, 475, 476, 473, 474, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 486, 475, 476, 473, 474, 462,
	0, 0, 454, 455, 452, 0, 0, 0, 456, 86,
	87, 463, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 1458, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 0, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 454, 455, 0, 0, 0,
	0, 456, 86, 87, 463, 88, 0, 0, 0, 0,
	502, 468, 0, 0, 0, 89, 90, 196, 516, 198,
	517, 91, 518, 519, 0, 92, 202, 203, 93, 483,
	501, 520, 521, 206, 0, 512, 0, 494, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 495, 497, 0, 496, 498, 102, 103, 104,
	105, 522, 106, 523, 524, 556, 107, 0, 108, 0,
	0, 0, 515, 110, 0, 111, 0, 0, 0, 467,
	112, 113, 503, 481, 0, 0, 114, 115, 525, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 513, 0,
	215, 0, 119, 120, 509, 511, 364, 0, 123, 0,
	121, 0, 363, 122, 526, 527, 528, 0, 493, 0,
	365, 124, 366, 125, 126, 0, 0, 514, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 457, 138, 482,
	510, 140, 529, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 504, 145, 146, 147, 0,
	505, 148, 228, 149, 0, 150, 151, 152, 530, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 471, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 499, 168, 169, 373, 170, 531, 233, 171, 0,
	172, 173, 175, 532, 174, 506, 0, 176, 0, 177,
	178, 0, 236, 533, 534, 0, 0, 179, 507, 508,
	480, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	500, 0, 187, 188, 189, 241, 535, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 458, 0, 0,
	486, 475, 476, 473, 474, 462, 0, 0, 454, 455,
	0, 0, 0, 0, 456, 86, 87, 463, 88, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 1146, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 455, 0, 0, 0, 0, 456, 0, 0,
	463, 486, 475, 476, 473, 474, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 794, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 486, 475, 476, 473, 474, 462,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 86,
	87, 463, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 1797, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	1796, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 0, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 454, 455, 0, 0, 0,
	0, 456, 86, 87, 463, 88, 0, 0, 0, 0,
	502, 468, 0, 0, 0, 89, 90, 1795, 516, 198,
	517, 91, 518, 519, 0, 92, 202, 203, 93, 483,
	501, 520, 521, 206, 0, 512, 0, 494, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	1797, 0, 495, 497, 0, 496, 498, 102, 103, 104,
	105, 522, 106, 523, 524, 0, 107, 0, 108, 0,
	0, 0, 515, 110, 0, 111, 0, 0, 0, 467,
	112, 113, 503, 481, 0, 0, 114, 115, 525, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 513, 0,
	215, 0, 119, 120, 509, 511, 364, 0, 123, 0,
	121, 0, 363, 122, 526, 527, 528, 0, 493, 0,
	365, 124, 366, 125, 126, 0, 0, 514, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 457, 138, 482,
	510, 140, 529, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 504, 145, 146, 147, 0,
	505, 148, 228, 149, 0, 150, 151, 152, 530, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 471, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 499, 168, 169, 373, 170, 531, 233, 171, 0,
	172, 173, 175, 532, 174, 506, 0, 176, 0, 177,
	178, 0, 236, 533, 534, 0, 0, 179, 507, 508,
	480, 180, 181, 1796, 183, 0, 0, 184, 185, 186,
	500, 0, 187, 188, 189, 241, 535, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 458, 0, 0,
	486, 475, 476, 473, 474, 462, 0, 0, 454, 455,
	0, 0, 0, 0, 456, 86, 87, 463, 88, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 0, 0, 486, 475, 476, 473, 474, 462, 0,
	0, 454, 455, 0, 0, 0, 0, 456, 86, 87,
	463, 88, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 89, 90, 196, 516, 198, 517, 91, 518, 519,
	0, 92, 202, 203, 93, 483, 501, 520, 521, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 522, 106, 523,
	524, 0, 107, 0, 108, 0, 0, 0, 515, 110,
	0, 111, 0, 0, 0, 467, 112, 113, 503, 481,
	0, 0, 114, 115, 525, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 364, 0, 123, 0, 121, 0, 363, 122,
	526, 527, 528, 0, 493, 0, 365, 124, 366, 125,
	126, 0, 0, 514, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 0, 138, 482, 510, 140, 529, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 530, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 1136, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	373, 170, 531, 233, 171, 0, 172, 173, 175, 532,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 533,
	534, 0, 0, 179, 507, 508, 480, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 535, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 0, 1132, 1133, 0, 0, 86, 87,
	1134, 88, 0, 1135, 0, 0, 502, 468, 0, 0,
	0, 89, 90, 0, 516, 198, 517, 91, 518, 519,
	0, 92, 202, 203, 93, 483, 501, 520, 521, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 1797, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 522, 106, 523,
	524, 0, 107, 0, 108, 0, 0, 0, 515, 110,
	0, 111, 0, 0, 0, 467, 112, 113, 503, 481,
	0, 0, 114, 115, 525, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 0, 0, 123, 0, 121, 0, 363, 122,
	526, 527, 528, 0, 493, 0, 0, 124, 366, 125,
	126, 0, 0, 514, 367, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 457, 138, 482, 510, 140, 529, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 530, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 471, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	0, 170, 531, 233, 171, 0, 172, 173, 175, 532,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 533,
	534, 0, 0, 179, 507, 508, 480, 180, 181, 1796,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 535, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 455, 0, 0, 86, 87,
	456, 88, 0, 463, 0, 0, 502, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 501, 204, 205, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 503, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 364, 0, 123, 0, 121, 0, 363, 122,
	218, 219, 220, 0, 221, 0, 365, 124, 366, 125,
	126, 0, 0, 514, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 0, 138, 0, 510, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	373, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 507, 508, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 242, 0, 190, 0, 355, 0, 0, 191,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 1568, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 360, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 364, 0, 123, 0, 121,
	0, 363, 122, 218, 219, 220, 0, 221, 0, 365,
	124, 366, 125, 126, 0, 0, 222, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	230, 162, 0, 163, 164, 165, 56, 231, 166, 167,
	0, 168, 169, 373, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 58, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 359, 242, 0, 190, 0, 0,
	0, 54, 191, 192, 193, 194, 0, 55, 0, 355,
	665, 0, 666, 661, 656, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 53, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 360,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 669, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 658, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 364, 0,
	123, 0, 121, 0, 363, 122, 218, 219, 220, 0,
	221, 0, 365, 124, 366, 125, 126, 0, 0, 222,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 659, 0,
	0, 0, 143, 225, 370, 144, 371, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 373, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 657, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 355,
	665, 0, 666, 661, 656, 0, 0, 0, 0, 0,
	667, 662, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 360,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 652, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 658, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 364, 0,
	123, 0, 121, 0, 363, 122, 218, 219, 220, 0,
	221, 0, 365, 124, 366, 125, 126, 0, 0, 222,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 659, 0,
	0, 0, 143, 225, 370, 144, 371, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 373, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 657, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 355,
	665, 0, 666, 661, 656, 0, 0, 0, 0, 0,
	667, 662, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 360,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 658, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 364, 0,
	123, 0, 121, 0, 363, 122, 218, 219, 220, 0,
	221, 0, 365, 124, 366, 125, 126, 0, 0, 222,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 659, 0,
	0, 0, 143, 225, 370, 144, 371, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 373, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 657, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	667, 662, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 56,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	58, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 359, 242, 0,
	190, 0, 83, 0, 54, 191, 192, 193, 194, 0,
	55, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 1256, 0, 53,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 0, 83, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 444, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 328, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 0, 190, 0, 83,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 1037, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 83, 0, 0, 191, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 948,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 83, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 1468, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 0, 190, 0, 83, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 546, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	636, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 635,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	83, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 639, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 355, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 639, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 360, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 364, 0, 123, 0, 121, 0, 363, 122, 218,
	219, 220, 0, 221, 0, 365, 124, 366, 125, 126,
	0, 0, 222, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 373,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 921,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 919,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 1014,
	0, 114, 115, 213, 0, 116, 0, 117, 924, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 1012, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 923,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 1013, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 921,
	207, 0, 0, 916, 94, 95, 96, 0, 97, 919,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 924, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 915,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 923,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 922, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 1256, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 588,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 380,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 334,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 246,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 245, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 1182,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 1180,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 1171,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 784,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 260,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 575, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 0, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 429,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 426,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 386, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 271, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 270, 237, 238,
	0, 0, 266, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 271, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 270, 237, 238,
	0, 0, 266, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 350,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 347,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 345,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 337,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 317, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 263, 0, 0,
	129, 0, 130, 131, 132, 133, 271, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 265, 162, 0, 163,
	164, 165, 0, 231, 166, 264, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 270, 237, 238,
	0, 0, 266, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 0, 0, 227, 148, 228, 149, 0,
	150, 0, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 0, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 0, 843, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 811, 0, 0, 0, 0,
	812, 826, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 811, 0, 0, 0, 0, 832, 826, 0, 0,
	0, 0, 0, 812, 0, 843, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 817, 0,
	0, 0, 832, 0, 811, 0, 0, 0, 0, 812,
	826, 843, 0, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 842,
	811, 0, 0, 0, 0, 0, 826, 0, 0, 834,
	0, 836, 844, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 833, 0, 0,
	0, 827, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 834, 0,
	836, 844, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 833, 0, 828, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 828, 0, 0,
	1628, 0, 835, 0, 0, 823, 824, 825, 837, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 0, 0, 0, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 0, 0, 0, 1352,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 810, 838, 829,
	830, 831, 839, 840, 841, 1351, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	811, 0, 0, 0, 0, 812, 826, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 811, 0, 0, 0,
	0, 832, 826, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 817, 0, 0, 0, 832, 0, 811,
	0, 0, 0, 0, 812, 826, 843, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 842, 811, 0, 0, 0, 0,
	0, 826, 0, 0, 834, 0, 836, 844, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 833, 0, 0, 0, 827, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 834, 0, 836, 844, 828, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 828, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 837, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 828, 0, 0, 1305, 0, 835, 0, 0,
	823, 824, 825, 837, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 0, 1746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	1312, 1745, 1329, 1330, 1331, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 810, 1725, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 812, 1326,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 811,
	0, 0, 0, 0, 812, 826, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 811, 1317, 0, 0, 0,
	832, 826, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 1332, 811, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 836,
	844, 0, 0, 1327, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 836, 844, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 0, 0, 827, 0, 0, 836, 844,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 834, 0, 0, 0, 828, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 1323, 1324, 1325,
	0, 1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 837, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	0, 1702, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 1697, 0, 0,
	0, 0, 0, 1312, 0, 1329, 1330, 1331, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 810,
	1693, 829, 830, 831, 839, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 812, 1326, 843, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 811, 0, 0, 0, 0, 812, 826, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 811, 1317,
	0, 0, 0, 832, 826, 0, 0, 0, 0, 0,
	812, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	1332, 811, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 836, 844, 0, 0, 1327, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 836, 844,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 833, 0, 0, 0, 827, 0,
	0, 836, 844, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 834, 0, 0, 0, 828,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	1323, 1324, 1325, 0, 1322, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 0, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 835, 0, 0, 823, 824, 825, 837,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 0,
	838, 0, 0, 0, 1630, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	1629, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 0, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 810, 1536, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 0, 843, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 811, 0, 0, 0, 0,
	812, 826, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 811, 0, 0, 0, 0, 832, 826, 0, 0,
	0, 0, 0, 812, 0, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 836, 844, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 833, 0, 0,
	0, 827, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 834, 0,
	0, 0, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 1471, 0, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 0, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 810, 1091, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 811, 0,
	0, 0, 0, 812, 826, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 811, 0, 0, 0, 0, 832,
	826, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 817, 0, 0, 0, 832, 0, 811, 0, 0,
	1025, 0, 812, 826, 843, 0, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 817, 1816, 0,
	0, 0, 842, 811, 0, 0, 0, 0, 0, 826,
	0, 0, 834, 0, 836, 844, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	817, 0, 1343, 0, 0, 1342, 1026, 0, 834, 0,
	833, 0, 0, 0, 827, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 834, 0, 836, 844, 828, 0, 827, 0, 1815,
	0, 0, 0, 0, 0, 0, 837, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 833,
	0, 828, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 837, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 1519, 0,
	828, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 837, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	846, 838, 0, 0, 0, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 845, 0, 0, 812, 0,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 811,
	0, 0, 0, 0, 812, 826, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 811, 0, 0, 0, 0,
	832, 826, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 836, 844, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 0, 0, 827, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 833, 312, 0,
	0, 0, 834, 0, 0, 0, 828, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 837, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	0, 0, 0, 1465, 0, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 810, 838, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 811, 0,
	1344, 0, 0, 812, 826, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 811, 0, 0, 0, 0, 832,
	826, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 817, 0, 0, 0, 832, 1349, 811, 0, 1304,
	0, 0, 812, 826, 843, 0, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 842, 811, 0, 0, 0, 0, 0, 826,
	0, 0, 834, 0, 836, 844, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	833, 0, 0, 0, 827, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 834, 0, 836, 844, 828, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 833,
	0, 828, 0, 827, 0, 0, 0, 0, 0, 0,
	1310, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 837, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	828, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 837, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	810, 838, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 812, 0, 843, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 811, 0, 0, 0, 0, 812, 826,
	843, 0, 0, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 0, 826, 812, 0, 843, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 811, 0, 0,
	0, 0, 812, 826, 843, 0, 1312, 0, 1329, 1330,
	1331, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 1599, 817, 811, 0, 0, 0, 842, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 836,
	844, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 842, 0, 1326, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 833, 0, 836, 844, 827,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 836, 844, 0, 0, 827, 0, 0,
	828, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 0, 827, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 1312, 0, 1329, 1330, 1331, 0, 1327,
	0, 0, 0, 0, 828, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 835, 837, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	828, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 837, 1326, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 1328, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 1317,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 1323, 1324, 1325, 0, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 1329, 1330,
	1331, 0, 0, 0, 609, 604, 626, 598, 617, 616,
	0, 1449, 600, 599, 0, 0, 0, 628, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1328, 0, 1326, 0, 622, 0, 614,
	613, 0, 0, 0, 0, 0, 0, 0, 612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	605, 606, 607, 0, 625, 0, 0, 0, 0, 0,
	1323, 1324, 1325, 0, 1322, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 0, 0, 0,
	0, 0, 608, 603, 0, 0, 1328, 0, 0, 630,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 623,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 1324, 1325, 0, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318,
}
var sqlPact = [...]int{

	2338, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 825, -1000, -1000, -1000, 621, 815,
	185, 15058, 15058, 14798, 1781, 1781, 16358, -1000, -1000, 19218,
	-1000, 2258, 450, 459, 450, 450, 494, 16358, 580, 625,
	124, -1000, 645, 42, 18958, 15058, 1248, 21, 13758, 278,
	2338, 14538, 15058, 18698, 1103, 1030, 1024, 13758, 18438, 18178,
	17918, -1000, 9542, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 579, 295, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 292, -1000, 14278, -1000, 833, -1000, 18,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 831, -1000,
	15058, -1000, -1000, 17658, 17398, 287, 799, -1000, -1000, 518,
	382, 1274, -1000, 36, -1000, -1000, 1102, -1000, 820, 1100,
	1099, 1096, 1095, 1093, 1086, 380, 805, -1000, 574, 799,
	-1000, 799, -1000, -1000, -1000, 557, 16358, -1000, 13758, -1000,
	17138, 1044, 16878, -1000, 645, -1000, -1000, -1000, 904, 1247,
	1247, 1247, 1272, 138, 135, 124, 12, 15058, -1000, 286,
	12, 6537, 6537, -1000, -1000, 278, -1000, 326, 11931, 34,
	-1000, 7083, -1000, 768, 1160, 681, 663, 1159, -40, 13758,
	15058, 15058, 616, 16618, -1000, 1153, 123, 1152, -1000, 118,
	1149, -1000, -7, -1000, -1000, -1000, -1000, -1000, -1000, 278,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14018, 1313, 22959, -1000, 8466, -1000,
	-1000, 12194, 1060, 12194, -1000, -1000, 1312, -1000, 8466, -1000,
	17, 16, 957, 946, 10085, 9815, 1210, 914, -1000, -1000,
	-1000, 35, 3989, 15058, 1111, 12194, 15058, 15058, 15058, 15058,
	15058, -1000, 15058, -1000, 945, -1000, 15058, -1000, 15, 14,
	-1000, 16358, -1000, 126, -1000, 273, 893, 16098, 1172, 892,
	-1000, 904, -1000, 826, 939, 7647, 8466, 124, -1000, -1000,
	124, 124, 8466, -1000, -1000, 15058, 12, 1308, 15058, 93,
	-1000, 21876, -1000, -1000, 8466, 8466, 8466, 8466, 8466, 734,
	-1000, -1000, -1000, 4824, -1000, -1000, 34, 272, 311, -1000,
	-1000, 269, 34, -1000, -1000, -1000, -1000, 265, 1405, 426,
	-1000, -1000, -1000, 8466, 363, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1110, 264, 263, -1000, -1000, -1000,
	-1000, 260, 256, 250, 246, 245, 235, 231, 230, 229,
	224, 212, 211, 210, 209, 711, -1000, 410, -1000, -1000,
	410, 410, -1000, 206, 206, 207, -1000, -1000, -1000, 206,
	-1000, -1000, -1000, 360, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 208, 93, -1000, -1000, -1000, 15058, 34, -1000, -1000,
	-1000, 8466, 3719, -9, -1000, 22580, -1000, -18, 752, -1000,
	13238, 1233, 1231, 1224, 13758, 552, 551, 15058, 15058, 393,
	620, 1307, 620, 11405, -1000, 15058, 15058, -1000, 15058, -1000,
	-1000, 15058, -1000, 15058, 15058, 157, 12718, 710, 1144, 42,
	-13, -1000, 1324, -1000, -1000, -1000, -1000, 74, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 207, 711, 206, 206, 206, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 360, -1000, -1000, 410, 410, 410, -1000,
	-1000, -25, 22580, 550, -4, 12456, 15058, -1000, 28, -1000,
	-1000, 1084, 445, -27, 692, 983, 807, -1000, -1000, -1000,
	-1000, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1370, -1000, -1000, -1000, -1000, 1393, 4, -1000,
	-1000, -1000, -1000, -1000, 1404, -1000, -1000, -1000, 3989, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15058, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 692, 983, -1000, -1000,
	13758, 12978, 1141, 810, 884, -1000, -1000, 347, 1138, -1000,
	-1000, -1000, -1000, 22580, -1000, 22580, 631, 1037, -1000, 1037,
	-2, -1000, 21590, -1000, 205, -29, -1000, 393, 6537, 11142,
	22959, 15058, 569, 8466, 8466, 8466, 8466, 8466, 8466, 8466,
	8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466,
	8466, 8466, 8466, 8466, 8466, 1119, 8466, 538, 8466, 8466,
	8466, 8466, 1392, 791, 187, 3989, -1000, 512, 512, 512,
	22634, 22634, 226, 13, 21221, -3, 34, -1000, -1000, 6246,
	5954, 34, 4259, -1000, 578, 1384, 407, 22580, 1120, 1065,
	203, 134, 132, 8466, 8466, 696, 8466, 8739, 8466, 8466,
	5097, 8466, 8466, 8466, 8466, 8466, 8466, -1000, 201, -1000,
	-1000, -1000, -1000, 1382, -1000, -1000, 1377, -1000, 567, 562,
	1375, 393, 120, -1000, 2777, -1000, -1000, 7083, -1000, 710,
	15058, 15058, 15058, -1000, -1000, 881, 15838, -1000, 22959, 15058,
	-1000, 194, 193, 971, 967, 15058, 15058, 15578, 15318, 15058,
	754, 15058, 15058, 662, -1000, 650, 8466, 676, -1000, 10615,
	415, 15058, 653, 80, -1000, -1000, -1000, 346, 15058, -1000,
	-1000, -1000, 123, -1000, 118, -1000, -1000, 13758, -1000, -1000,
	-1000, -1000, -1000, -1000, 22959, 316, 315, -1000, 1373, 535,
	-1000, 524, 521, 508, -1000, 189, -1000, 8466, 15058, 12456,
	-4, -6, -1000, -1000, 15058, 983, -1000, -1000, -1000, -1000,
	647, -1000, 700, -1000, 10355, -1000, -1000, -1000, 578, -1000,
	-20, -1000, -1000, -1000, -1000, 117, -8, -1000, -1000, -1000,
	-1000, -1000, 15058, 262, 15058, 15058, 15058, 1137, 1401, 15058,
	-1000, -1000, -1000, 8466, -1000, -1000, -1000, 42, 15058, -1000,
	1064, -1000, -14, 1616, -134, 13498, -1000, 3114, -1000, -1000,
	376, 454, 454, 511, 511, 511, 511, 247, 247, 849,
	228, 2723, 2723, 2723, 1947, 498, 498, 2723, 2723, 2723,
	22634, 22606, 1036, 8466, 8466, 502, 788, 187, 1036, 8466,
	1355, 1036, 1036, 1036, -1000, 900, -1000, -1000, -1000, 1083,
	186, 8739, 8739, -1000, -1000, -1000, 4824, -1000, -1000, 184,
	8466, -1000, 8466, -31, -35, -1000, -1000, -45, -1000, -1000,
	0, 8466, 8466, 8466, 110, -1000, 106, 581, -1000, 8466,
	736, 183, 179, 8466, -1000, -1000, 22300, 20107, 102, 1082,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 99, 22274, 98,
	20450, -1000, 8739, 8739, 8739, 4824, 178, 95, 21564, -70,
	22241, 7356, 7356, 7356, 94, 22215, 8466, -70, 19827, 19801,
	19768, -47, -53, -54, 1372, -55, 92, 371, 361, 90,
	1064, -1000, -1000, 8466, -1000, -1000, -1000, 489, 480, 1135,
	-1000, 879, -1000, 695, 8466, 15058, 177, 176, 742, -1000,
	1133, 803, 1131, 803, -1000, -18, 694, -1000, -1000, 479,
	-1000, 6537, 22580, -1000, 651, 1237, -59, -1000, -1000, -1000,
	6537, 393, 11405, 7083, -61, -1000, -1000, 710, -1000, 469,
	1367, 85, 919, 864, 690, 624, 1365, 22580, -20, -1000,
	-20, -1000, -1000, -1000, -1000, -1000, -1000, 15058, 1049, 12978,
	175, 15058, 174, 172, 171, 15058, -1000, 1172, -1000, 84,
	-1000, 1061, 1270, 11142, 979, 976, 11142, 1057, 745, 745,
	745, -1000, 13498, 3437, -1000, -1000, 15058, 169, 10878, 81,
	1616, 8466, 1036, 1036, 8466, 8739, 8739, -1000, 1036, -1000,
	-1000, -1000, -1000, 1081, 165, 8466, 22959, 22976, 22823, -63,
	5662, -22, 21188, -1000, -1000, 311, -1000, 79, 6810, -1000,
	21902, 9, 9, -1000, 1397, 1168, -1000, 8466, 21935, -1000,
	11668, 402, 776, 21162, 22959, 22959, -1000, 8466, -1000, 1080,
	8466, -1000, 22959, 8739, 8739, 8739, 8739, 8739, 8739, 8739,
	8739, 8739, 8739, 8739, 8739, 8739, 8739, 8739, 8739, 8739,
	8739, 8739, 938, 8739, 1353, 1353, 1353, -24, 5370, -1000,
	1109, 1080, 8466, 8466, 22959, 78, 72, 67, -1000, 8466,
	-70, 8466, 8466, 8466, -1000, -1000, -1000, 66, -1000, 1359,
	-1000, -1000, -1000, -1000, 1061, 21505, 15058, 15058, 15058, 1128,
	1018, -1000, 20878, -71, 15058, 15058, -1000, 980, 1008, 444,
	15058, -1000, 15058, -1000, 15058, 15058, 15058, 15058, -26, 6537,
	164, 42, 15058, -26, 650, -1000, -1000, 340, -1000, 302,
	301, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 65,
	-1000, -1000, 1053, -1000, 9279, 162, 15058, 12978, 9279, 792,
	-1000, -1000, 388, 8466, 8466, 1616, 11142, 11142, 1402, 974,
	11142, -1000, -1000, -1000, -1000, 351, -1000, 997, 159, 15058,
	13498, 599, 1036, 22686, 2759, 8466, 22959, 22660, -72, 8466,
	8466, -1000, -73, -1000, 8466, -1000, -1000, 1396, 8466, 63,
	61, 60, -1000, -1000, 22580, 8466, -1000, -1000, 19478, 8466,
	59, -1000, 55, 54, 22580, 1109, 22580, -1000, 658, 658,
	1353, 1353, 1353, 1353, 689, 689, 440, 1062, 542, 542,
	542, 1699, 484, 484, 542, 542, 542, 1076, 877, 158,
	20793, 8466, -78, -1000, -1000, -1000, 22580, 22580, 53, -1000,
	-1000, -1000, -70, 19742, 20845, 20819, -1000, 52, 388, -1000,
	-1000, -1000, -1000, 15058, -1000, 15058, -1000, 15058, 15058, 878,
	-1000, -1000, 954, 154, 8739, 15058, -1000, 755, -79, -80,
	873, -1000, 871, 8466, -1000, 22959, 803, 803, -1000, 466,
	462, -1000, -26, 1177, 15058, 1222, -1000, -1000, -1000, 151,
	-1000, -1000, -1000, 724, -84, -1000, 253, 1250, 8466, -1000,
	-1000, 150, 9279, -85, -1000, -1000, 50, -86, 15058, -1000,
	15058, 22580, -70, -1000, 1402, -1000, 149, 8466, 11142, -1000,
	-1000, 840, -144, -1000, 335, -1000, 15058, -92, -1000, 8466,
	8466, 22660, -96, -1000, 1036, 1036, -1000, 20535, -1000, 21902,
	-1000, -1000, -1000, 22580, 719, -1000, 20502, -1000, -1000, -1000,
	-1000, 8739, 1067, 148, 22959, 20476, -1000, -1000, 8466, -1000,
	-1000, -1000, -1000, -1000, 948, -1000, -1000, -1000, -1000, 8466,
	20793, 147, 1049, 146, -1000, -1000, -1000, 685, -1000, -1000,
	22580, 1253, -1000, -1000, 15058, 15058, 523, -97, 15058, -1000,
	-1000, 4551, 15058, 755, 9279, 1243, 34, 15058, 1243, 20192,
	4259, -98, -1000, 15058, 1049, 755, 145, -46, -1000, 1297,
	-1000, 15058, 22580, -1000, 583, 997, -1000, 3989, -102, -1000,
	1036, 1036, -1000, -1000, 48, 776, 1258, -1000, 586, 8739,
	22959, -106, -1000, 20166, -1000, 20133, 924, 15058, -1000, 15058,
	15058, 425, 15058, -1000, -1000, 601, -1000, 393, -1000, 142,
	1049, -1000, -1000, -1000, -1000, 1250, 0, 755, -1000, -1000,
	1049, 9279, 15058, 141, -108, 515, -1000, -1000, -1000, -1000,
	648, 8466, 586, -114, -1000, -1000, -1000, 784, 819, 44,
	-123, 75, -1000, 8466, -1000, 11405, -1000, 15058, -1000, 1243,
	40, 1049, -1000, -125, -1000, -1000, -1000, 1394, 38, 8193,
	8193, -70, -1000, -1000, 787, 786, 611, -1000, -1000, -1000,
	-1000, -1000, 924, 15058, 22580, -112, -129, -1000, -1000, -1000,
	755, -1000, -1000, -1000, -1000, 9009, 843, 635, 21531, -1000,
	-1000, 1191, -1000, 429, 1006, 1006, 784, -131, -1000, 803,
	1049, 1328, -1000, -1000, -1000, -1000, -1000, -1000, 1341, -1000,
	-1000, 944, -1000, -1000, -1000, -1000, -1000, 7920, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1635, 1634, 1298, 130, 129, 1633, 1631, 1630, 101,
	128, 127, 133, 1629, 103, 1628, 1627, 1624, 100, 1623,
	1622, 1621, 57, 1618, 1617, 1616, 1615, 1614, 92, 29,
	182, 1834, 180, 1613, 1610, 1608, 14, 112, 81, 1605,
	1, 53, 110, 116, 1093, 67, 1596, 1595, 140, 38,
	18, 23, 108, 147, 144, 135, 1594, 1593, 1592, 42,
	1591, 4, 1588, 1587, 1585, 52, 16, 1584, 17, 1583,
	22, 1582, 1578, 111, 1576, 109, 117, 26, 125, 148,
	1574, 49, 12, 72, 1572, 36, 1568, 44, 77, 139,
	1567, 50, 150, 60, 35, 65, 1566, 1565, 1564, 1563,
	78, 1557, 106, 66, 1553, 1552, 76, 1551, 138, 141,
	1550, 1546, 134, 1545, 1544, 1543, 674, 1540, 1538, 616,
	1537, 9, 45, 75, 3, 120, 118, 30, 1533, 20,
	1532, 1373, 765, 617, 1527, 61, 54, 90, 58, 46,
	19, 1525, 1522, 113, 1520, 1519, 1518, 1517, 1516, 80,
	1513, 74, 143, 47, 51, 98, 21, 24, 43, 94,
	115, 151, 114, 1512, 1511, 124, 1509, 99, 1508, 1507,
	1053, 121, 1505, 1496, 1494, 798, 724, 615, 25, 1493,
	1490, 293, 178, 1489, 1486, 119, 1485, 1482, 146, 1481,
	254, 39, 1480, 122, 1478, 104, 1476, 0, 89, 79,
	1473, 136, 86, 1465, 1464, 1463, 1461, 31, 6, 8,
	7, 10, 2, 28, 27, 1459, 1458, 137, 95, 1456,
	149, 1452, 1448, 41, 1438, 1432, 15, 1425, 13, 1424,
	11, 5, 1421, 142, 1420, 107, 1419, 1328, 1415, 145,
	1413, 1407, 1316, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 78, 78, 77, 77, 80, 80, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 166,
	166, 165, 13, 141, 141, 14, 14, 14, 14, 15,
	101, 101, 16, 16, 16, 16, 17, 21, 233, 233,
	233, 237, 237, 238, 238, 239, 239, 239, 239, 239,
	239, 239, 235, 235, 24, 24, 24, 24, 24, 120,
	116, 116, 118, 118, 118, 118, 43, 115, 115, 115,
	115, 117, 117, 117, 117, 190, 188, 188, 195, 195,
	195, 56, 56, 56, 56, 56, 57, 57, 57, 187,
	187, 187, 187, 196, 196, 196, 196, 196, 196, 58,
	58, 58, 194, 194, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	189, 189, 234, 234, 236, 236, 8, 8, 59, 59,
	60, 60, 123, 123, 123, 123, 61, 61, 122, 205,
	205, 206, 206, 206, 206, 207, 207, 207, 207, 207,
	207, 207, 203, 203, 204, 201, 201, 202, 202, 202,
	202, 240, 240, 121, 121, 64, 64, 210, 210, 210,
	210, 208, 208, 208, 208, 208, 211, 209, 212, 212,
	212, 212, 212, 152, 152, 152, 27, 7, 7, 105,
	105, 68, 68, 156, 156, 156, 69, 69, 157, 50,
	50, 36, 36, 36, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 106, 106, 107, 107, 19, 23, 26,
	26, 26, 26, 26, 242, 242, 47, 47, 47, 47,
	48, 48, 119, 119, 119, 119, 119, 42, 6, 6,
	41, 41, 18, 18, 18, 18, 18, 53, 53, 112,
	112, 112, 114, 114, 113, 113, 113, 91, 91, 28,
	82, 82, 83, 83, 163, 84, 84, 22, 22, 31,
	31, 29, 29, 29, 29, 29, 29, 30, 30, 32,
	32, 32, 32, 32, 32, 32, 218, 218, 218, 220,
	220, 217, 219, 219, 241, 241, 92, 92, 92, 63,
	62, 62, 66, 66, 65, 67, 67, 155, 89, 89,
	89, 89, 108, 109, 109, 110, 110, 111, 111, 88,
	88, 138, 138, 33, 33, 73, 73, 74, 74, 129,
	129, 130, 130, 128, 128, 128, 158, 158, 158, 158,
	159, 159, 159, 159, 159, 159, 153, 153, 153, 153,
	154, 154, 164, 164, 95, 95, 95, 95, 93, 93,
	94, 94, 160, 160, 160, 160, 90, 90, 161, 161,
	161, 124, 124, 167, 167, 167, 72, 72, 72, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 169, 169, 169, 169, 171, 171, 171, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 172, 172, 179, 179, 180, 180, 181, 182,
	173, 173, 174, 174, 175, 176, 183, 183, 183, 183,
	185, 185, 177, 177, 177, 177, 177, 178, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 103, 103, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 213, 213, 213, 213, 213, 213, 213,
	215, 215, 216, 216, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	221, 221, 222, 222, 223, 223, 224, 224, 226, 227,
	227, 227, 228, 232, 232, 225, 225, 229, 229, 229,
	230, 230, 231, 231, 231, 231, 231, 143, 143, 143,
	144, 144, 145, 79, 79, 140, 140, 139, 139, 139,
	142, 142, 96, 184, 184, 184, 184, 184, 184, 184,
	97, 97, 104, 98, 98, 99, 99, 99, 99, 99,
	99, 135, 136, 100, 100, 100, 137, 137, 146, 150,
	150, 149, 148, 148, 147, 147, 127, 127, 127, 127,
	126, 125, 85, 85, 243, 243, 151, 151, 86, 86,
	87, 81, 81, 162, 162, 162, 162, 75, 75, 55,
	55, 76, 76, 51, 51, 54, 52, 52, 52, 52,
	70, 70, 71, 71, 49, 49, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 186, 186, 186,
	44, 44, 44, 45, 45, 46, 46, 192, 192, 192,
	193, 193, 193, 193, 191, 191, 191, 191, 191, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 7, 10, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 3, 2,
	0, 3, 1, 2, 2, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 1, 3, 1, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 4, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 2, 2, 1,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -219, 90,
	98, 190, 97, 83, 113, 204, 211, -29, -31, 219,
	-120, 220, 33, 228, 57, 93, 206, 201, 248, 64,
	-218, -32, -30, 294, 269, 275, 214, -33, 235, 262,
	297, 235, 76, 126, 85, 130, 256, 255, 76, 126,
	235, -12, 294, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -44, 4, -197, -199, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 127, 130, 125, 138, 140, 141, 146, 149, 152,
	154, 155, 156, 157, 158, 160, 161, 163, 165, 162,
	168, 170, 171, 177, 180, 183, 184, 185, 188, 190,
	192, 193, 194, 196, 197, 201, 199, 200, 202, 204,
	206, 207, 209, 211, 212, 213, 216, 217, 219, 220,
	222, 225, 227, 228, 231, 229, 234, 236, 237, 244,
	248, 249, 250, 251, 254, 255, 256, 259, 260, 261,
	265, 270, 271, 272, 273, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 78, 80,
	81, 96, 99, 105, 115, 117, 121, 122, 131, 132,
	133, 135, 144, 167, 169, 178, 182, 187, 189, 195,
	208, 215, 223, 224, 230, 232, 239, 240, 241, 245,
	246, 262, 263, -44, -44, 190, 21, -237, 21, -238,
	-239, 64, 90, 113, 214, 130, 85, 255, -237, -48,
	211, -44, -116, 149, 217, 208, 244, -117, -115, -190,
	239, 158, -77, -44, 4, 76, 56, 77, 114, 126,
	127, 61, 62, 141, 236, 239, 244, 21, 64, -242,
	244, 244, -242, -242, -47, 244, 242, -48, -241, 235,
	235, -105, 76, 253, -30, -32, -31, -65, -66, 252,
	134, 95, 176, -29, -31, -218, -220, 196, -217, -44,
	-220, -62, -63, 21, 87, 298, -160, -51, 174, -44,
	-87, 294, -3, -160, 121, -44, -54, 121, -51, 111,
	136, 136, -161, -160, -44, 121, -55, 121, -54, -78,
	121, -77, -166, -165, -193, 4, -197, -199, -198, 262,
	54, 65, 112, 129, 123, 137, 139, 145, 147, 159,
	179, 181, 205, 221, 235, -141, 294, -101, 294, -44,
	21, 173, 298, 173, -44, -116, 50, -116, 294, -118,
	-42, -43, 138, 192, 242, 279, 111, 273, -58, 5,
	82, -80, 296, 111, -234, 173, 111, 111, 111, 111,
	111, -189, 111, 273, 138, 192, 235, -119, -42, -43,
	-119, 242, -48, -90, -160, -77, 121, 126, -44, 121,
	-65, -66, -89, -108, -109, 148, 172, -92, 21, 87,
	-92, -92, 42, 295, 295, 298, -220, -71, 294, -81,
	-162, -131, 287, -133, 285, 286, 291, 164, 274, -143,
	-51, -134, 9, 294, -146, -215, -31, 96, 28, -144,
	-145, 208, -44, 7, 8, 5, 6, -49, -169, -178,
	247, 100, 166, 46, -213, -214, 4, -197, -192, -170,
	-180, -174, -177, 135, 54, 69, 72, 70, 73, 218,
	257, 47, 27, 99, 182, 187, 232, 245, 246, 121,
	167, 122, 52, 115, 144, 89, 35, 37, 39, 40,
	48, 49, 78, 80, 81, 105, 131, 132, 133, 169,
	195, 223, 230, 240, 241, 263, -198, -181, -182, -175,
	-176, -183, -81, -87, 287, -51, 294, -85, -127, -126,
	-125, 292, 296, -86, -151, -131, 82, -38, 199, -37,
	20, 22, 90, 260, 96, 199, 199, 96, 299, -161,
	-53, -51, -53, 219, -44, 29, 96, -40, 298, 45,
	202, 96, -40, 298, 96, 295, 298, -160, 121, 29,
	-140, -167, -168, -170, -179, -173, -177, -178, 38, 44,
	43, 237, 215, 224, 36, 131, 132, 133, 223, 35,
	195, 105, 89, 81, 80, 169, 40, 39, -181, -182,
	-175, -176, 78, 240, 241, 135, 37, 49, 48, 263,
	230, -79, -131, -233, -76, 235, 76, -52, -44, 287,
	-239, -233, 29, -79, 298, 298, 146, -57, 152, 163,
	119, -188, 82, -195, -187, -152, 9, 247, 100, 173,
	-194, 8, 286, -186, -193, 5, 7, 285, -188, 82,
	67, -196, 5, 4, -178, -152, 82, 149, 296, -191,
	4, -197, -199, -198, -200, 21, 23, 24, 25, 26,
	28, 29, 30, 31, 41, 46, 47, 51, 53, 55,
	61, 64, 68, 69, 70, 71, 72, 73, 82, 84,
	86, 87, 88, 91, 93, 95, 100, 101, 102, 108,
	110, 111, 113, 116, 118, 124, 126, 128, 134, 136,
	142, 143, 148, 150, 151, 164, 166, 172, 173, 174,
	175, 176, 186, 191, 198, 203, 214, 218, 226, 233,
	235, 238, 242, 243, 247, 252, 253, 257, 258, 264,
	266, 267, 268, 269, -190, -236, 108, -233, -190, -190,
	-190, -190, -190, -190, 146, -190, 298, 298, -48, -40,
	298, 294, 164, -45, 121, -44, -41, 92, 164, -89,
	-109, -108, -110, -131, 21, -131, -133, -30, -30, -30,
	-67, -155, -131, -217, 29, -70, -44, -73, 298, 111,
	10, 53, 32, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 25, 175, 147, 274, 123, 221, 291, 15,
	16, 17, 137, 34, 124, 29, 4, -131, -131, -131,
	-131, -131, 181, -31, -131, -79, -85, -31, -139, 292,
	294, -85, 294, 5, 5, 294, -147, -131, -221, 270,
	108, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 189, -185, 265,
	-185, -185, -171, 294, -171, -172, 294, -171, 271, 275,
	294, -73, -51, -127, -131, -191, 287, 298, 295, 298,
	242, -106, 61, 55, -122, 121, 55, -201, -44, 61,
	-202, 51, 253, 191, 110, -106, 61, -106, 61, 61,
	-160, 242, 242, -54, -44, -124, 267, -112, -22, 294,
	82, 29, -112, -82, -83, -163, -84, -51, 294, -44,
	-44, -54, -55, -77, -78, -12, -165, 96, -14, -22,
	-18, -28, -9, 295, 298, -72, 28, -102, 294, 272,
	156, 79, 120, 155, -103, 213, 295, 298, 242, 298,
	-76, -70, -126, -125, 111, 244, 295, -43, -42, -56,
	194, 225, 200, 216, 298, 8, 7, 7, 5, -191,
	-235, -44, -43, -42, -160, -59, -60, -123, -122, -203,
	-204, -201, 126, 253, 101, 96, 173, 164, 279, 96,
	-111, 208, 209, 298, -36, 30, 86, 294, 298, 295,
	-124, -162, -74, -158, -160, -31, -159, 294, -167, -77,
	239, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, 147, 123, 221, 34, 124, -131, 242,
	-131, -131, -131, -131, 166, 164, 247, 100, 254, 87,
	170, -243, 233, 31, -137, -31, 294, -191, -143, 208,
	294, 295, 298, -79, -142, 293, -139, -79, 295, 295,
	-79, 264, 21, 87, 287, -102, 7, -150, -149, 266,
	-222, 103, 116, 294, 295, 295, -131, -131, -96, -184,
	4, 272, 156, 79, 120, 155, 213, -97, -131, -98,
	-132, -133, 285, 286, 291, 294, 208, -99, -131, -79,
	-131, 41, 143, 243, -100, -131, 111, -79, -131, -131,
	-131, -79, -79, -79, 294, 7, 7, 239, 239, 7,
	-124, 295, 293, 302, -151, -37, -51, -44, -44, 164,
	-122, 121, -167, -44, 294, 294, 140, 140, -44, -44,
	121, -44, 121, -44, -44, -38, 199, -44, -44, 199,
	-91, 203, -131, -91, -114, 173, -75, -51, 262, -44,
	203, -73, 298, 279, -75, -40, -40, -160, -167, 292,
	292, 7, 242, 242, 242, 242, 294, -131, -235, -52,
	-235, -42, 251, 58, 194, -195, -102, 298, 295, 298,
	-45, 126, -45, -77, -51, 96, 5, -44, -155, -14,
	-44, -88, 116, 298, 65, -95, 139, 159, 112, 145,
	205, 129, -128, 299, -154, -153, 29, -44, -31, -159,
	-158, 273, -131, -131, 242, -243, 233, -137, -131, 166,
	247, 100, 254, 87, 170, 111, 294, -132, -132, -79,
	294, -79, -131, 293, 293, 298, 295, -66, 298, -65,
	-131, -79, -79, 295, 295, -148, -149, 91, -131, -227,
	180, 294, 294, -131, 29, 298, 295, 111, 295, -104,
	186, 295, 10, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 137, 124, -132, -132, -132, -79, 294, 295,
	-135, -136, 111, 108, 29, -100, -100, -100, 295, 111,
	-79, 298, 298, 298, 295, 295, 295, 7, 295, 298,
	295, 273, 273, 295, -88, -131, 242, 242, 96, 164,
	-205, -202, -131, -70, 294, 294, -35, 90, 219, -107,
	96, -40, 96, -40, 242, -106, 61, 242, -81, 203,
	60, 295, 298, -81, -124, -83, -151, 295, 293, 7,
	7, 295, 156, 120, 155, -103, 155, -103, -103, 7,
	-44, -61, 125, -123, 294, -45, 294, 294, 294, -44,
	-41, 295, -138, 118, 42, -158, 139, 139, -158, -95,
	139, -93, 179, -93, -93, -154, -191, 300, -44, 294,
	295, -131, -131, -132, -132, 111, 294, -131, -140, 25,
	25, 295, -79, 295, 298, 295, -139, 295, 264, -66,
	-66, -66, 5, 93, -131, 238, -228, -44, 294, 267,
	-65, 295, -167, -167, -131, -135, -131, -167, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, 87, 164, 170,
	-132, 298, -79, 295, -136, -135, -131, -131, -167, 295,
	295, 295, -79, -131, -131, -131, 295, 7, -138, 293,
	-44, -44, -122, 96, -206, 61, -207, 53, 101, 164,
	166, 253, 191, 51, 82, 198, 295, 295, -70, -70,
	164, 82, 164, 82, 75, 249, -44, -44, -51, -44,
	-44, -44, -81, -113, 294, 173, -22, -51, -91, 279,
	293, 293, 295, 124, -68, -156, -44, -216, 294, -213,
	-214, -49, 294, -69, -157, -44, -59, -68, 173, -223,
	268, -131, -79, -158, -158, -94, 258, 173, 139, -158,
	-164, 276, -130, -129, 109, 162, 294, -70, -153, 25,
	25, -131, -140, 295, -131, -131, 295, -131, 5, -131,
	295, 295, 295, -131, -232, -44, -131, 295, 295, 295,
	-136, 111, 87, 170, 294, -131, 295, 295, 298, 295,
	295, 295, -223, -122, -44, -77, -44, 166, 140, 294,
	-132, -51, -121, -240, 63, 231, 295, 295, 166, 166,
	-131, -167, -40, -40, 242, 242, 88, -70, 61, -87,
	-31, 294, 183, 295, 298, -50, -85, 53, -50, -131,
	294, -68, 295, 298, 295, 295, -51, -224, -226, -44,
	-94, 294, -131, -158, 170, 298, 301, 279, -70, 295,
	-131, -131, 295, 295, -66, -225, 185, 295, -132, 111,
	294, -140, 295, -131, -207, -131, -46, 294, -61, 294,
	198, -39, 53, -44, -44, 255, 165, 295, -44, -44,
	-121, -156, -36, -77, -36, 295, -79, 295, -157, -61,
	-121, 294, 298, 29, -70, 234, -129, -191, 295, 295,
	-66, 42, -132, -140, 295, 295, 295, -210, 154, -44,
	-70, -51, -34, 258, -77, 219, -124, 294, -61, -50,
	-66, -121, -61, -68, -226, -228, 295, 239, -229, 193,
	209, -79, 295, -208, -211, -209, 173, 112, 184, 222,
	295, 295, -64, 294, -131, -82, -70, -36, 295, -61,
	295, 5, 295, -230, -231, 34, 250, 67, -131, -230,
	-209, 173, -211, 173, 255, 85, -210, -70, -124, 295,
	-121, -231, 188, 107, 208, 188, 107, -212, 161, 202,
	45, 219, -212, -208, 295, -40, -61, 25, 19, 166,
	82, -231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	353, 0, 0, 0, 0, 0, 0, 327, -2, 0,
	118, 0, 285, 0, 285, 285, 289, 0, 355, 250,
	352, -2, 363, 0, 0, 0, 361, 341, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 780, 781, 782, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 91, 92, 862, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 278,
	876, 291, 114, 841, 880, 943, 892, 121, 131, 0,
	949, -2, 135, 65, 164, 165, 0, 167, 183, 0,
	0, 0, 0, 0, 181, 0, 0, 178, 0, 296,
	284, 296, 281, 282, 283, 286, 0, 277, 0, 354,
	0, 0, 0, 249, -2, 337, 338, -2, 0, 358,
	358, 358, 0, 0, 338, 0, 346, 866, 349, 763,
	347, 0, 0, 360, 359, 0, 342, 422, 0, 753,
	383, 0, 2, 0, 929, 0, 0, 929, 0, 0,
	0, 0, 0, 428, 57, 929, 48, 929, 749, 48,
	929, 63, 0, 79, 81, 790, 791, 792, 793, 954,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 290, 115, 919, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 174, 0, 175, 0, 177, 0, 279, 292, 293,
	280, 0, 288, 48, 426, 0, 929, 784, 301, 929,
	-2, 0, 333, 370, 371, 0, 0, 0, 356, 357,
	0, 0, 0, 329, 330, 0, 348, 0, 0, 386,
	741, 745, 746, 514, 0, 0, 0, 0, 0, 0,
	601, 602, 603, 0, 605, 606, 607, 924, 0, 611,
	612, 943, 753, 766, 767, 768, 769, 0, 0, 0,
	774, 775, 776, 725, 651, 621, -2, -2, 764, 452,
	453, 454, 455, -2, 956, 625, 627, 629, 630, 631,
	632, 0, 908, 925, 939, 940, 948, 952, 953, 929,
	936, 930, 920, 927, 935, 822, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 789, 476, 477, 482,
	483, 485, 386, 384, 423, 424, 0, 754, 732, 726,
	727, 0, 0, 0, 738, 736, 737, 25, 274, 27,
	0, 274, 274, 0, 0, 0, 0, 0, 0, 432,
	0, 307, 0, 0, 429, 0, 0, 59, 0, 46,
	47, 0, 61, 0, 0, 353, 0, 0, 929, 353,
	0, 685, 438, 439, 440, 441, 442, 511, 445, 446,
	447, 448, 449, 450, 451, 459, 460, 461, 462, 463,
	464, 473, 0, 458, 458, 458, 470, 471, 474, 475,
	480, 481, 492, 493, 495, 497, 491, 491, 491, 488,
	489, 0, 683, 0, 98, 0, 817, 751, 756, 759,
	104, 0, 0, 0, 0, 0, 0, 126, 146, 147,
	148, 127, 129, 136, 138, 139, 140, 149, 150, 151,
	152, 243, 0, 245, 162, 163, 777, 0, 128, 130,
	132, 133, 153, 154, 0, 156, 157, 158, 0, 67,
	794, 795, 796, 797, 798, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 166, 168, 0, 182, 169, 170,
	171, 172, 173, 180, 176, 179, 0, 0, 287, 246,
	0, 189, 0, 0, 929, 783, 298, 0, 0, 336,
	368, 369, 372, 375, 376, 373, 514, 343, 344, 345,
	364, 365, 263, 350, 0, 0, 760, 432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 744, 518, 519, 520,
	542, 543, 0, -2, 683, 0, 608, 609, 610, 0,
	0, -2, 0, 771, 511, 0, 0, 724, 653, 0,
	0, 0, 0, 0, 0, 0, 0, 704, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 479, 490,
	487, 486, 468, 0, 467, 465, 0, 469, 0, 0,
	0, 432, 0, 733, 0, 730, 731, 0, 740, 0,
	0, 0, 0, 273, 29, 929, 0, 39, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 318, 0, 318, 309, 0,
	0, 0, 305, 386, 320, 322, 323, 0, 0, 430,
	58, 750, 48, 64, 48, 70, 80, 0, 82, 85,
	86, 87, 88, 83, 0, 433, 435, 443, 0, 498,
	499, 500, 501, 502, 503, 512, 90, 0, 0, 0,
	99, 100, 757, 758, 0, 0, 119, 124, 125, 297,
	0, 143, 0, 145, 0, 244, 779, 778, 511, 68,
	184, 112, 294, 295, 427, 0, 188, 190, 192, 193,
	194, 195, 784, 0, 784, 0, 0, 0, 0, 0,
	374, 377, 378, 0, 367, 261, 262, 353, 0, 762,
	380, 742, 385, 387, 395, 411, 398, 0, 515, 516,
	0, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, -2, -2, -2, 534, 535, 536, -2, -2, -2,
	540, 541, -2, 0, 0, 0, 735, 0, -2, 0,
	550, -2, -2, -2, 554, 0, 557, 559, 561, 0,
	0, 0, 0, 734, 571, 716, 0, 743, 556, 0,
	0, 604, 0, 0, 0, 689, 690, 0, -2, 613,
	363, 0, 0, 0, 0, 772, 0, 723, 719, 0,
	661, 0, 0, 0, 626, 628, 0, 0, 0, 0,
	693, 694, 695, 696, 697, 698, 699, 0, 0, 0,
	0, 573, 0, 0, 0, 0, 943, 0, 683, 709,
	0, 0, 0, 0, 0, 683, 0, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 425, 728, 0, 739, 28, 265, 0, 0, 0,
	31, 929, 200, 0, 0, 0, 0, 0, 276, 40,
	929, 48, 929, 48, 41, 26, 274, 264, 267, 0,
	56, 0, 431, 302, 303, 0, 0, 747, 311, 308,
	0, 432, 0, 0, 0, 60, 62, 0, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 684, 96, 752,
	97, 116, 141, 142, 144, 137, 155, 0, 197, 0,
	0, 784, 0, 0, 0, 0, 300, 301, 366, 0,
	761, 382, 0, 0, 0, 0, 0, 0, 419, 419,
	419, 417, 411, 0, 397, 410, 0, 409, -2, 398,
	0, 0, -2, -2, 0, 0, 0, 572, -2, 555,
	558, 560, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 687, 688, 0, -2, 0, 0, 362,
	363, 363, 363, 619, 0, 0, 720, 0, 0, 620,
	0, 0, 0, 0, 0, 0, 635, 0, 636, 0,
	0, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 576, 577, 0, 0, 638,
	707, 708, 0, 0, 0, 0, 0, 0, 643, 0,
	714, 0, 0, 0, 647, 648, 649, 0, 456, 0,
	472, 494, 496, 484, 382, 0, 0, 0, 0, 0,
	198, 215, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 37, 0, 43, 0, 0, 0, 0, 317, 0,
	316, 0, 0, 306, 318, 321, 324, 0, 436, 0,
	0, 444, 504, 505, 506, 507, 508, 509, 510, 0,
	113, 186, 0, 191, 0, 0, 0, 189, 0, 0,
	299, 351, 655, 0, 0, 388, 0, 0, 0, 0,
	0, 414, 418, 415, 416, 413, 393, 0, 407, 0,
	400, 517, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 717, 0, 678, 0, -2, 691, 614, 0, 0,
	0, 0, 773, 718, 722, 0, 659, 660, 664, 0,
	0, 624, 0, 0, 692, 701, 702, 574, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, -2, -2,
	-2, 591, 592, 593, -2, -2, -2, 0, 0, 0,
	703, 0, 0, 681, 705, 706, 711, 712, 0, 640,
	641, 642, 713, 0, 0, 0, 478, 0, 655, 729,
	269, 271, 30, 0, 199, 0, 202, 0, 0, 0,
	206, 207, 0, 0, 0, 0, 217, 224, 0, 0,
	0, 45, 0, 0, 275, 0, 48, 48, 266, 0,
	0, 268, 304, 0, 0, 0, 310, 748, 319, 0,
	437, 434, 513, 0, 0, 251, 260, 260, 0, 622,
	623, 0, 0, 0, 256, 258, 0, 0, 0, 339,
	0, 381, 379, 401, 0, 403, 0, 0, 0, 405,
	396, 0, 0, 391, 0, 390, 0, 0, 399, 0,
	0, -2, 0, 565, -2, -2, 677, 684, 770, 363,
	615, 617, 618, 721, 666, 663, 0, 650, 633, 634,
	700, 0, 0, 0, 0, 684, 680, 639, 0, 645,
	646, 457, 340, 32, 0, 203, 204, 205, 208, 0,
	210, 786, 197, 0, 221, 222, 219, 0, 34, 35,
	44, 50, 36, 42, 0, 0, 0, 0, 0, 325,
	326, 0, 0, 224, 0, 263, 765, 0, 263, 0,
	0, 0, 214, 0, 197, 224, 0, 654, 656, 0,
	402, 0, 421, 404, 0, 0, 394, 0, 0, 408,
	-2, -2, 566, 679, 0, 363, 0, 652, -2, 0,
	0, 0, 682, 0, 201, 0, 230, 0, 218, 0,
	0, 52, 0, 270, 272, 0, 313, 432, 315, 0,
	197, 252, 253, 259, 254, 260, 363, 224, 257, 187,
	197, 0, 0, 0, 0, 0, 392, 389, 406, 616,
	669, 0, -2, 0, 599, 644, 209, 235, 0, 0,
	0, 226, 38, 0, 49, 0, 314, 0, 212, 263,
	0, 197, 247, 0, 657, 658, 420, 0, 0, 0,
	0, 665, 600, 211, 231, 232, 0, 227, 228, 229,
	785, 223, 230, 0, 51, 432, 0, 255, 614, 213,
	224, 412, 662, 667, 670, -2, 895, 814, 0, 668,
	233, 0, 234, 0, 0, 0, 235, 0, 312, 48,
	197, 0, 672, 673, 674, 675, 676, 236, 0, 239,
	240, 0, 237, 220, 225, 196, 248, 0, 238, 241,
	242, 671,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:704
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:710
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:817
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:826
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:872
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:875
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:876
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1359
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1510
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       &QualifiedName{Base: Name(sqlDollar[4].str)},
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1670
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = []string(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = []string(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1720
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1726
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = true
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = false
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1811
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1831
		{
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = Ascending
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = Descending
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = true
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = false
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1898
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1941
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.str = ""
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.str = ""
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2035
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2042
		{
			unimplementedWithIssue(6637)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2084
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = []string(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2335
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2343
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2346
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2347
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = true
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = false
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = false
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2374
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.str = astFullJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.str = astLeftJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.str = astRightJoin
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.str = astInnerJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2720
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2810
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2814
		{
			unimplementedWithIssue(2115)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2815
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2816
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2880
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = nil
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2997
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3024
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3064
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3108
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3112
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3145
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3557
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3599
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3644
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3688
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3689
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3692
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3693
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3698
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3708
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3709
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3714
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3726
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3740
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3744
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4083
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4239
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4275
		{
			unimplemented()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = DNull
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.str = ""
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
