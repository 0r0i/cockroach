// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PREPARE = 57522
const PRIMARY = 57523
const PRIORITY = 57524
const RANGE = 57525
const READ = 57526
const REAL = 57527
const RECURSIVE = 57528
const REF = 57529
const REFERENCES = 57530
const RENAME = 57531
const REPEATABLE = 57532
const RELEASE = 57533
const RESTRICT = 57534
const RETURNING = 57535
const REVOKE = 57536
const RIGHT = 57537
const ROLLBACK = 57538
const ROLLUP = 57539
const ROW = 57540
const ROWS = 57541
const RSHIFT = 57542
const SAVEPOINT = 57543
const SEARCH = 57544
const SECOND = 57545
const SELECT = 57546
const SERIAL = 57547
const SERIALIZABLE = 57548
const SESSION = 57549
const SESSION_USER = 57550
const SET = 57551
const SHOW = 57552
const SIMILAR = 57553
const SIMPLE = 57554
const SMALLINT = 57555
const SMALLSERIAL = 57556
const SNAPSHOT = 57557
const SOME = 57558
const SQL = 57559
const START = 57560
const STRICT = 57561
const STRING = 57562
const STORING = 57563
const SUBSTRING = 57564
const SYMMETRIC = 57565
const SYSTEM = 57566
const TABLE = 57567
const TABLES = 57568
const TEXT = 57569
const THEN = 57570
const TIME = 57571
const TIMESTAMP = 57572
const TIMESTAMPTZ = 57573
const TO = 57574
const TRAILING = 57575
const TRANSACTION = 57576
const TREAT = 57577
const TRIM = 57578
const TRUE = 57579
const TRUNCATE = 57580
const TYPE = 57581
const UNBOUNDED = 57582
const UNCOMMITTED = 57583
const UNION = 57584
const UNIQUE = 57585
const UNKNOWN = 57586
const UPDATE = 57587
const UPSERT = 57588
const USER = 57589
const USING = 57590
const VALID = 57591
const VALIDATE = 57592
const VALUE = 57593
const VALUES = 57594
const VARCHAR = 57595
const VARIADIC = 57596
const VARYING = 57597
const WHEN = 57598
const WHERE = 57599
const WINDOW = 57600
const WITH = 57601
const WITHIN = 57602
const WITHOUT = 57603
const YEAR = 57604
const ZONE = 57605
const NOT_LA = 57606
const WITH_LA = 57607
const AS_LA = 57608
const POSTFIXOP = 57609
const UMINUS = 57610

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4516

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 22,
	287, 22,
	-2, 339,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 34,
	1, 314,
	164, 314,
	193, 314,
	285, 314,
	287, 314,
	-2, 324,
	-1, 47,
	1, 317,
	164, 317,
	193, 317,
	285, 317,
	287, 317,
	-2, 323,
	-1, 56,
	1, 22,
	287, 22,
	-2, 339,
	-1, 257,
	1, 152,
	287, 152,
	-2, 822,
	-1, 288,
	139, 349,
	163, 349,
	-2, 320,
	-1, 291,
	139, 348,
	163, 348,
	-2, 318,
	-1, 407,
	139, 348,
	163, 348,
	-2, 321,
	-1, 463,
	284, 766,
	-2, 759,
	-1, 464,
	284, 767,
	-2, 760,
	-1, 470,
	5, 483,
	284, 483,
	-2, 907,
	-1, 492,
	5, 449,
	-2, 883,
	-1, 493,
	5, 477,
	284, 477,
	-2, 885,
	-1, 494,
	5, 457,
	-2, 886,
	-1, 495,
	5, 456,
	-2, 887,
	-1, 496,
	5, 477,
	284, 477,
	-2, 890,
	-1, 497,
	5, 477,
	284, 477,
	-2, 891,
	-1, 498,
	5, 478,
	-2, 894,
	-1, 499,
	5, 444,
	-2, 895,
	-1, 500,
	5, 444,
	-2, 896,
	-1, 501,
	5, 459,
	-2, 899,
	-1, 502,
	5, 445,
	-2, 904,
	-1, 503,
	5, 446,
	-2, 905,
	-1, 504,
	5, 447,
	-2, 906,
	-1, 505,
	5, 444,
	-2, 910,
	-1, 506,
	5, 450,
	-2, 915,
	-1, 507,
	5, 448,
	-2, 918,
	-1, 508,
	5, 475,
	284, 475,
	-2, 920,
	-1, 509,
	5, 479,
	-2, 923,
	-1, 510,
	5, 481,
	-2, 924,
	-1, 511,
	5, 474,
	284, 474,
	-2, 928,
	-1, 821,
	89, 324,
	125, 324,
	139, 324,
	163, 324,
	167, 324,
	242, 324,
	-2, 587,
	-1, 829,
	284, 744,
	-2, 733,
	-1, 1017,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 517,
	-1, 1018,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 518,
	-1, 1019,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 519,
	-1, 1023,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 523,
	-1, 1024,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 524,
	-1, 1025,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 525,
	-1, 1028,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 530,
	-1, 1058,
	172, 657,
	-2, 660,
	-1, 1217,
	89, 324,
	125, 324,
	139, 324,
	163, 324,
	167, 324,
	242, 324,
	-2, 397,
	-1, 1221,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 531,
	-1, 1226,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 532,
	-1, 1244,
	172, 656,
	-2, 659,
	-1, 1397,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 533,
	-1, 1402,
	128, 0,
	-2, 543,
	-1, 1410,
	172, 658,
	-2, 661,
	-1, 1442,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 568,
	-1, 1443,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 569,
	-1, 1444,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 570,
	-1, 1448,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 574,
	-1, 1449,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 575,
	-1, 1450,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 576,
	-1, 1553,
	128, 0,
	-2, 544,
	-1, 1556,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 547,
	-1, 1557,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 549,
	-1, 1639,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 548,
	-1, 1640,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 550,
	-1, 1647,
	128, 0,
	-2, 577,
	-1, 1688,
	128, 0,
	-2, 578,
	-1, 1736,
	30, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 882,
}

const sqlNprod = 1021
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21254

var sqlAct = [...]int{

	464, 1716, 1735, 1757, 1717, 1734, 902, 1718, 1592, 990,
	1693, 1421, 1614, 1627, 910, 1516, 1545, 1526, 462, 778,
	461, 258, 1517, 524, 1537, 292, 566, 454, 81, 1480,
	80, 824, 1531, 80, 974, 553, 80, 654, 512, 1298,
	971, 314, 1214, 1377, 80, 1247, 1149, 1204, 1297, 826,
	999, 80, 80, 1213, 1386, 80, 15, 756, 80, 80,
	80, 759, 530, 426, 80, 80, 80, 80, 973, 340,
	911, 887, 1200, 1044, 878, 533, 567, 1068, 1103, 1002,
	1041, 628, 21, 395, 774, 69, 535, 925, 335, 33,
	611, 299, 46, 941, 291, 1106, 1155, 341, 11, 436,
	6, 934, 608, 966, 780, 639, 427, 342, 1000, 525,
	337, 74, 526, 396, 8, 859, 67, 330, 7, 332,
	46, 5, 855, 333, 4, 302, 410, 73, 904, 75,
	409, 411, 977, 245, 630, 626, 546, 326, 236, 297,
	607, 300, 414, 76, 903, 456, 514, 71, 46, 1634,
	70, 1764, 1635, 72, 994, 47, 296, 48, 297, 555,
	555, 1212, 1731, 310, 907, 1613, 317, 296, 938, 782,
	555, 1242, 327, 437, 338, 1161, 1243, 281, 1724, 320,
	782, 994, 1715, 783, 1709, 931, 1690, 994, 1684, 931,
	952, 994, 1678, 304, 1674, 77, 513, 1613, 56, 544,
	255, 785, 289, 1665, 288, 1641, 994, 939, 931, 469,
	1269, 781, 1286, 1287, 1288, 1638, 1624, 1621, 994, 1613,
	1622, 1612, 784, 1455, 1613, 1409, 783, 1597, 311, 1596,
	994, 311, 994, 322, 1186, 45, 876, 311, 1241, 322,
	940, 937, 1577, 952, 785, 952, 811, 80, 1202, 1558,
	80, 80, 952, 1555, 1490, 1283, 931, 994, 1188, 1406,
	27, 52, 952, 1354, 994, 784, 1349, 28, 944, 1052,
	1348, 799, 790, 1349, 989, 1315, 1313, 1246, 1316, 952,
	960, 80, 54, 80, 1616, 80, 1312, 80, 952, 952,
	1311, 52, 1244, 952, 422, 952, 750, 942, 995, 1274,
	951, 994, 80, 952, 930, 875, 402, 931, 874, 55,
	556, 556, 54, 80, 408, 790, 50, 800, 749, 620,
	561, 556, 51, 562, 80, 80, 80, 527, 80, 619,
	421, 528, 812, 1733, 407, 361, 369, 309, 527, 55,
	528, 49, 528, 1730, 1284, 523, 50, 653, 381, 1723,
	1508, 519, 51, 1161, 807, 1685, 936, 1623, 80, 1582,
	800, 80, 1578, 80, 781, 1570, 370, 1569, 1564, 558,
	518, 906, 832, 801, 340, 340, 1563, 1562, 935, 1190,
	52, 1515, 656, 80, 1470, 80, 80, 80, 80, 1465,
	80, 401, 1464, 77, 80, 1463, 1412, 1395, 1376, 80,
	1285, 54, 341, 341, 1726, 80, 559, 554, 1358, 1320,
	657, 1317, 342, 342, 399, 1305, 801, 753, 1296, 1268,
	658, 1265, 1263, 80, 1252, 1251, 80, 809, 55, 1187,
	1120, 1075, 327, 45, 1074, 50, 752, 417, 418, 421,
	1049, 51, 420, 423, 795, 792, 793, 794, 786, 787,
	788, 789, 791, 1423, 1677, 289, 311, 288, 27, 1657,
	49, 545, 548, 617, 1656, 28, 563, 1280, 1281, 1282,
	1507, 1279, 1276, 1277, 1278, 1270, 1271, 1272, 1273, 1275,
	808, 829, 1649, 1630, 1356, 1619, 521, 795, 792, 793,
	794, 786, 787, 788, 789, 791, 1611, 311, 547, 547,
	614, 1589, 1575, 615, 1269, 573, 595, 1548, 1524, 1401,
	643, 650, 1394, 1269, 1373, 1372, 1371, 527, 1369, 827,
	1332, 528, 649, 80, 1331, 742, 1050, 1295, 1260, 656,
	297, 311, 751, 1259, 1238, 1234, 823, 80, 764, 762,
	1046, 80, 763, 1175, 80, 80, 1134, 870, 776, 1283,
	80, 1269, 80, 80, 1134, 80, 594, 657, 80, 1133,
	80, 80, 1113, 340, 1073, 993, 872, 658, 860, 572,
	289, 881, 770, 289, 289, 771, 772, 863, 52, 867,
	853, 920, 335, 739, 852, 851, 743, 744, 745, 850,
	746, 341, 849, 1274, 748, 848, 847, 846, 845, 54,
	1269, 342, 1274, 905, 844, 905, 843, 52, 842, 841,
	80, 80, 892, 894, 840, 839, 861, 830, 69, 857,
	858, 864, 926, 868, 828, 49, 55, 754, 54, 315,
	946, 425, 367, 50, 359, 1514, 1513, 1169, 1284, 51,
	1274, 1168, 520, 1543, 74, 1636, 1269, 1284, 928, 897,
	1512, 833, 1162, 46, 656, 55, 375, 46, 68, 984,
	73, 865, 75, 900, 927, 866, 929, 516, 338, 884,
	1319, 1318, 1220, 923, 918, 919, 76, 909, 922, 390,
	71, 376, 657, 70, 921, 449, 72, 49, 394, 1274,
	837, 965, 658, 1532, 1285, 903, 869, 1424, 1069, 430,
	856, 1255, 1157, 1285, 954, 861, 1699, 864, 248, 1664,
	1746, 1745, 945, 1498, 311, 78, 1486, 322, 247, 950,
	938, 259, 947, 914, 1182, 948, 858, 857, 322, 247,
	274, 322, 286, 953, 1284, 1274, 303, 303, 275, 280,
	313, 279, 80, 313, 319, 313, 1487, 1605, 1604, 313,
	328, 313, 259, 295, 80, 80, 783, 888, 880, 939,
	1355, 536, 1344, 537, 1343, 1279, 1276, 1277, 1278, 1270,
	1271, 1272, 1273, 1275, 785, 1276, 1277, 1278, 1270, 1271,
	1272, 1273, 1275, 80, 373, 80, 1324, 996, 1323, 294,
	1285, 1222, 940, 937, 783, 784, 880, 1174, 1663, 1173,
	1172, 799, 879, 1171, 1033, 943, 1005, 536, 899, 537,
	898, 398, 785, 891, 656, 1710, 1270, 1271, 1272, 1273,
	1275, 374, 1117, 1116, 1482, 1006, 1483, 393, 538, 357,
	283, 296, 1681, 784, 969, 1701, 64, 549, 1594, 60,
	1089, 1043, 657, 1043, 942, 790, 58, 1754, 870, 942,
	1485, 1047, 658, 870, 1269, 987, 988, 1488, 1150, 1346,
	1004, 1159, 970, 968, 1278, 1270, 1271, 1272, 1273, 1275,
	1148, 783, 1069, 1154, 538, 1119, 1745, 1056, 80, 80,
	80, 61, 65, 790, 80, 542, 284, 80, 997, 785,
	800, 890, 59, 80, 80, 80, 80, 80, 555, 80,
	80, 1334, 1150, 783, 287, 541, 293, 80, 936, 80,
	784, 1181, 1484, 1272, 1273, 1275, 80, 1363, 1129, 515,
	1048, 785, 466, 1053, 1057, 80, 1060, 311, 800, 573,
	595, 1658, 363, 1145, 1065, 259, 259, 1123, 1360, 1341,
	1183, 1098, 784, 1274, 80, 80, 801, 1110, 1111, 1112,
	80, 1152, 372, 889, 1645, 1164, 311, 1165, 364, 366,
	790, 340, 1131, 1124, 397, 854, 247, 820, 313, 1258,
	259, 1361, 405, 1144, 942, 1387, 1760, 877, 296, 80,
	594, 80, 80, 80, 801, 956, 80, 303, 1284, 341,
	66, 958, 790, 572, 539, 80, 297, 1719, 313, 342,
	57, 1595, 80, 1192, 80, 63, 62, 959, 1167, 313,
	313, 313, 1163, 550, 1744, 1160, 957, 795, 792, 793,
	794, 786, 787, 788, 789, 791, 1335, 597, 942, 1712,
	1720, 573, 595, 1166, 1179, 1177, 1189, 1224, 1191, 1042,
	539, 1742, 1184, 313, 1285, 1713, 612, 1176, 612, 556,
	926, 1125, 371, 1178, 1219, 1753, 792, 793, 794, 786,
	787, 788, 789, 791, 1530, 982, 1185, 536, 259, 537,
	612, 259, 259, 259, 1197, 259, 928, 573, 595, 259,
	1156, 1198, 594, 1218, 247, 46, 1245, 1758, 1031, 1156,
	758, 1079, 927, 297, 929, 572, 384, 391, 311, 1721,
	412, 362, 360, 413, 1633, 372, 1225, 1599, 303, 1598,
	1587, 779, 1223, 769, 1451, 1279, 1276, 1277, 1278, 1270,
	1271, 1272, 1273, 1275, 413, 1573, 1326, 1759, 594, 1768,
	1128, 983, 1494, 1752, 538, 80, 297, 1722, 788, 789,
	791, 572, 1237, 761, 1761, 1254, 1239, 755, 648, 647,
	392, 641, 636, 1359, 1330, 625, 1193, 1694, 1249, 1250,
	412, 1082, 80, 747, 1546, 621, 1588, 1351, 786, 787,
	788, 789, 791, 1136, 1032, 1497, 1338, 311, 1340, 1302,
	1303, 1304, 1496, 1540, 297, 1135, 623, 80, 1452, 80,
	1294, 80, 1321, 1382, 1453, 80, 1029, 624, 1381, 371,
	1083, 1307, 325, 80, 1328, 1574, 80, 1039, 313, 1767,
	1493, 324, 80, 656, 1345, 1547, 80, 294, 80, 1037,
	1342, 651, 885, 1350, 404, 1353, 313, 1269, 1378, 313,
	901, 1201, 1352, 1084, 1081, 313, 1072, 916, 917, 534,
	313, 657, 1144, 313, 1648, 259, 259, 1572, 1370, 1299,
	1391, 658, 1400, 1380, 1384, 1264, 1383, 1368, 1375, 80,
	1495, 1403, 1233, 1388, 1389, 1390, 1362, 1364, 1365, 1030,
	601, 949, 389, 387, 1414, 1415, 1416, 1207, 386, 596,
	385, 1035, 569, 1034, 652, 382, 1231, 1040, 323, 1300,
	1085, 838, 1210, 1411, 741, 612, 779, 618, 1229, 1071,
	539, 1477, 1385, 1339, 1337, 1325, 1425, 1606, 1208, 1194,
	985, 981, 924, 560, 557, 1429, 1274, 552, 543, 540,
	1418, 760, 415, 991, 80, 80, 80, 1746, 378, 645,
	307, 1608, 80, 80, 1407, 914, 896, 1458, 80, 1427,
	80, 1347, 80, 80, 80, 80, 1431, 1459, 783, 1080,
	80, 1491, 1492, 880, 1616, 3, 1687, 1660, 880, 895,
	1476, 1284, 1227, 1036, 893, 1472, 1232, 1209, 1379, 419,
	1038, 233, 80, 80, 1679, 908, 311, 992, 1462, 311,
	573, 595, 80, 80, 777, 416, 80, 784, 1522, 1529,
	1521, 1456, 1522, 308, 1521, 80, 80, 1523, 1511, 616,
	379, 1523, 1466, 244, 565, 1509, 933, 783, 573, 595,
	1505, 1203, 316, 1528, 1549, 573, 595, 1285, 1765, 642,
	637, 1766, 234, 273, 80, 785, 1269, 967, 1554, 783,
	1471, 594, 1535, 1536, 962, 961, 1541, 1366, 1550, 313,
	885, 1357, 1228, 1314, 572, 1170, 784, 573, 595, 1230,
	1118, 597, 1115, 1114, 1066, 963, 1207, 1732, 1560, 594,
	1417, 1195, 964, 237, 276, 277, 594, 831, 313, 1571,
	259, 1210, 572, 282, 1593, 1534, 235, 237, 80, 572,
	80, 1205, 80, 242, 740, 383, 1566, 1208, 238, 80,
	1711, 1257, 1270, 1271, 1272, 1273, 1275, 242, 594, 1644,
	1626, 1206, 238, 1586, 1070, 1583, 836, 26, 80, 1519,
	239, 572, 1584, 442, 1478, 1501, 1327, 976, 975, 659,
	646, 635, 465, 1510, 239, 241, 388, 1607, 629, 638,
	1078, 80, 1617, 80, 517, 1602, 1603, 467, 570, 241,
	1620, 80, 468, 1522, 1090, 1521, 1209, 573, 595, 80,
	1615, 571, 1523, 597, 1609, 311, 311, 862, 455, 311,
	568, 1629, 336, 313, 1126, 1127, 1542, 912, 1637, 885,
	1067, 1253, 1132, 834, 441, 1601, 447, 446, 1137, 1138,
	1140, 1142, 1143, 1054, 1146, 1147, 358, 1643, 438, 1544,
	1211, 1632, 313, 36, 1158, 368, 253, 254, 594, 597,
	1153, 313, 1650, 428, 428, 80, 80, 1506, 240, 80,
	313, 572, 986, 531, 765, 1653, 1336, 80, 285, 1266,
	1096, 1667, 240, 80, 1669, 1088, 1086, 1671, 1077, 967,
	612, 80, 1522, 1676, 1521, 967, 1668, 656, 1670, 870,
	1675, 1523, 400, 529, 573, 595, 913, 380, 998, 243,
	1680, 1682, 932, 424, 1525, 773, 1725, 80, 80, 80,
	306, 80, 1591, 243, 758, 657, 758, 259, 313, 305,
	1686, 1196, 1702, 972, 1683, 658, 1689, 1696, 377, 80,
	1199, 622, 1700, 1705, 955, 1703, 278, 1216, 1655, 313,
	1659, 1708, 1707, 1706, 1333, 594, 1522, 1698, 1521, 1704,
	53, 297, 80, 596, 1625, 1523, 569, 20, 572, 18,
	766, 768, 17, 1729, 311, 1673, 1728, 775, 16, 1740,
	14, 573, 595, 1743, 13, 1741, 12, 80, 19, 815,
	816, 817, 818, 819, 10, 1749, 1747, 9, 822, 1751,
	1750, 1090, 1090, 25, 24, 1486, 1748, 1481, 23, 1763,
	1762, 2, 1203, 1, 0, 1479, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1769, 0,
	0, 0, 594, 0, 0, 1487, 783, 0, 0, 0,
	0, 0, 0, 1714, 0, 572, 0, 0, 0, 0,
	0, 1090, 1090, 1090, 785, 573, 595, 1207, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 569, 783,
	0, 0, 1210, 0, 0, 784, 0, 0, 0, 0,
	779, 0, 1205, 0, 0, 871, 0, 785, 1208, 0,
	0, 0, 1697, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1206, 0, 0, 0, 594, 313, 784, 0,
	0, 596, 0, 1482, 569, 1483, 1539, 0, 0, 572,
	0, 0, 0, 0, 0, 790, 0, 0, 0, 0,
	443, 34, 1367, 0, 885, 914, 758, 0, 0, 1485,
	1374, 0, 1235, 1236, 0, 0, 1488, 1209, 313, 0,
	0, 313, 0, 0, 0, 0, 0, 1216, 790, 34,
	0, 1393, 597, 1216, 0, 0, 0, 0, 0, 0,
	800, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	298, 0, 0, 1090, 1090, 0, 0, 34, 0, 0,
	597, 0, 1291, 1292, 1293, 0, 0, 597, 0, 298,
	1538, 1484, 0, 800, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 801, 0, 0, 597,
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
	1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 801,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	1475, 885, 0, 0, 0, 0, 0, 779, 779, 0,
	0, 0, 0, 1499, 0, 1500, 0, 313, 1502, 1503,
	1504, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	794, 786, 787, 788, 789, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 1527, 885, 1518,
	0, 0, 0, 0, 1398, 1399, 0, 313, 313, 597,
	0, 313, 0, 0, 786, 787, 788, 789, 791, 428,
	779, 1216, 0, 0, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 0, 0, 0, 1567,
	0, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	0, 1454, 0, 0, 0, 0, 0, 0, 0, 1076,
	0, 1087, 0, 1097, 1099, 1104, 1107, 1108, 1109, 0,
	0, 0, 0, 0, 596, 0, 0, 569, 0, 0,
	0, 0, 0, 885, 0, 1585, 597, 259, 0, 0,
	290, 0, 531, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 569, 0, 1090, 0, 596,
	0, 0, 569, 779, 0, 0, 0, 0, 0, 0,
	0, 1151, 0, 0, 1269, 0, 1286, 1287, 1288, 0,
	1518, 0, 0, 0, 0, 0, 313, 0, 1628, 0,
	0, 596, 0, 0, 569, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 779, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 0, 1283,
	1180, 0, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 775, 290, 290,
	1661, 1662, 0, 1274, 1666, 0, 0, 0, 0, 1518,
	262, 0, 259, 0, 0, 0, 0, 272, 1527, 0,
	1290, 821, 0, 0, 0, 825, 779, 597, 0, 261,
	263, 596, 1289, 0, 569, 0, 0, 1221, 1590, 0,
	0, 1226, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 1695, 779, 313, 0, 259, 0, 1090, 0,
	1240, 0, 0, 0, 0, 264, 0, 0, 783, 1248,
	802, 803, 804, 1518, 1628, 265, 266, 1256, 0, 0,
	805, 1261, 0, 0, 0, 0, 785, 0, 811, 0,
	267, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 822, 0, 1285, 0, 0, 784, 1104, 1104,
	1104, 0, 0, 799, 783, 0, 802, 803, 804, 0,
	0, 0, 779, 1647, 0, 0, 805, 34, 596, 34,
	1322, 569, 785, 0, 811, 0, 0, 0, 0, 0,
	0, 1329, 34, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 784, 0, 0, 0, 790, 428, 799,
	0, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	531, 1280, 1281, 1282, 812, 1279, 1276, 1277, 1278, 1270,
	1271, 1272, 1273, 1275, 268, 0, 810, 269, 0, 0,
	0, 0, 270, 0, 0, 0, 807, 0, 0, 1688,
	0, 0, 800, 790, 0, 596, 0, 0, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 806, 0, 0, 0, 1396, 0,
	1397, 0, 810, 0, 0, 0, 0, 0, 0, 0,
	0, 1402, 807, 0, 0, 0, 0, 0, 800, 0,
	0, 0, 0, 0, 1180, 0, 0, 0, 801, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 809,
	806, 0, 1428, 0, 0, 1430, 0, 0, 0, 596,
	0, 0, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 801, 0, 0, 1460, 1461, 0,
	0, 0, 0, 0, 0, 809, 1467, 1468, 1469, 0,
	0, 0, 808, 0, 0, 796, 797, 798, 0, 795,
	792, 793, 794, 786, 787, 788, 789, 791, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 0, 0, 0, 428, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 808, 0,
	0, 796, 797, 798, 0, 795, 792, 793, 794, 786,
	787, 788, 789, 791, 0, 783, 1533, 802, 803, 804,
	0, 0, 1579, 1045, 0, 0, 0, 805, 0, 0,
	0, 0, 0, 785, 0, 811, 0, 0, 1553, 0,
	0, 0, 1556, 1557, 0, 0, 0, 1559, 0, 0,
	0, 1561, 0, 0, 784, 0, 0, 0, 1565, 0,
	799, 0, 1568, 783, 0, 802, 803, 804, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	0, 785, 0, 811, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1576, 0, 0, 0, 0, 0, 0,
	0, 0, 784, 0, 790, 0, 0, 0, 799, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 812, 783, 0, 802, 803, 804, 0, 0, 0,
	0, 0, 0, 810, 1600, 0, 0, 0, 0, 0,
	785, 0, 811, 807, 0, 0, 0, 0, 0, 800,
	0, 0, 790, 0, 0, 0, 0, 0, 1618, 0,
	0, 784, 0, 0, 0, 0, 0, 799, 0, 812,
	1269, 806, 1286, 1287, 1288, 0, 0, 1631, 0, 0,
	0, 810, 1552, 0, 0, 0, 0, 0, 0, 1639,
	1640, 807, 0, 0, 0, 0, 0, 800, 0, 0,
	0, 0, 0, 0, 34, 801, 0, 0, 0, 0,
	0, 790, 0, 0, 1217, 1283, 809, 1652, 0, 806,
	0, 0, 0, 0, 0, 0, 0, 1654, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 0, 1045, 0, 0, 0, 0, 0, 531,
	807, 0, 0, 801, 0, 0, 800, 821, 0, 1274,
	0, 0, 0, 0, 809, 0, 0, 0, 0, 808,
	0, 0, 796, 797, 798, 0, 795, 792, 793, 794,
	786, 787, 788, 789, 791, 0, 0, 0, 1289, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1284, 821, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 0, 808, 0, 0,
	796, 797, 798, 809, 795, 792, 793, 794, 786, 787,
	788, 789, 791, 0, 0, 0, 0, 1727, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 0, 0, 0,
	1739, 1739, 0, 0, 0, 0, 0, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1739, 0, 808, 0, 0, 796,
	797, 798, 0, 795, 792, 793, 794, 786, 787, 788,
	789, 791, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 1281, 1282,
	79, 1279, 1276, 1277, 1278, 1270, 1271, 1272, 1273, 1275,
	0, 0, 82, 83, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 86, 186, 187, 188, 189,
	87, 190, 191, 0, 88, 192, 193, 89, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 90, 91,
	92, 0, 93, 0, 94, 0, 0, 95, 96, 0,
	0, 0, 0, 0, 0, 97, 98, 99, 100, 198,
	101, 199, 200, 0, 0, 102, 0, 0, 0, 103,
	104, 0, 105, 0, 0, 0, 201, 106, 202, 0,
	0, 0, 107, 108, 203, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 204, 0, 205, 0, 112, 113,
	206, 207, 0, 0, 114, 0, 0, 115, 208, 209,
	210, 0, 211, 0, 0, 116, 0, 117, 118, 34,
	0, 212, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 213, 132, 214, 133, 134, 0,
	0, 312, 1001, 1001, 135, 215, 1001, 136, 0, 216,
	137, 138, 0, 217, 139, 218, 140, 0, 141, 142,
	143, 219, 144, 145, 0, 147, 148, 146, 149, 0,
	150, 0, 151, 152, 220, 153, 0, 154, 155, 156,
	52, 221, 157, 158, 0, 159, 160, 0, 161, 222,
	223, 162, 0, 163, 164, 166, 224, 165, 225, 0,
	167, 54, 168, 169, 0, 226, 227, 228, 0, 0,
	170, 229, 230, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 343, 232,
	0, 181, 0, 0, 0, 50, 182, 183, 184, 185,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1003, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1610, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 655, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 660, 84, 661, 662, 663,
	664, 665, 666, 667, 668, 85, 86, 186, 187, 188,
	189, 87, 190, 191, 669, 88, 192, 193, 89, 670,
	671, 194, 195, 196, 672, 197, 673, 344, 674, 90,
	91, 92, 821, 93, 675, 94, 676, 345, 95, 96,
	677, 678, 679, 680, 681, 682, 97, 98, 99, 100,
	198, 101, 199, 200, 683, 684, 102, 685, 686, 687,
	103, 104, 688, 105, 689, 0, 690, 201, 106, 202,
	691, 692, 693, 107, 108, 203, 0, 109, 694, 110,
	695, 696, 346, 697, 111, 204, 698, 205, 699, 112,
	113, 206, 207, 700, 701, 114, 702, 347, 115, 208,
	209, 210, 703, 211, 704, 348, 116, 349, 117, 118,
	705, 706, 212, 350, 119, 351, 707, 120, 708, 709,
	121, 0, 122, 123, 124, 125, 126, 352, 127, 128,
	131, 129, 710, 130, 711, 213, 132, 214, 133, 134,
	712, 713, 714, 715, 716, 135, 215, 353, 136, 354,
	216, 137, 138, 717, 217, 139, 218, 140, 718, 141,
	142, 143, 219, 144, 145, 719, 147, 148, 146, 149,
	720, 150, 355, 151, 152, 220, 153, 0, 154, 155,
	156, 721, 221, 157, 158, 722, 159, 160, 356, 161,
	222, 223, 162, 723, 163, 164, 166, 224, 165, 225,
	724, 167, 725, 168, 169, 726, 226, 227, 228, 727,
	728, 170, 229, 230, 729, 171, 172, 173, 174, 730,
	731, 175, 176, 177, 732, 733, 178, 179, 180, 231,
	232, 734, 181, 735, 736, 737, 738, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 655, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1392, 82, 83,
	660, 84, 661, 662, 663, 664, 665, 666, 667, 668,
	85, 86, 186, 187, 188, 189, 87, 190, 191, 669,
	88, 192, 193, 89, 670, 671, 194, 195, 196, 672,
	197, 673, 344, 674, 90, 91, 92, 0, 93, 675,
	94, 676, 345, 95, 96, 677, 678, 679, 680, 681,
	682, 97, 98, 99, 100, 198, 101, 199, 200, 683,
	684, 102, 685, 686, 687, 103, 104, 688, 105, 689,
	0, 690, 201, 106, 202, 691, 692, 693, 107, 108,
	203, 0, 109, 694, 110, 695, 696, 346, 697, 111,
	204, 698, 205, 699, 112, 113, 206, 207, 700, 701,
	114, 702, 347, 115, 208, 209, 210, 703, 211, 704,
	348, 116, 349, 117, 118, 705, 706, 212, 350, 119,
	351, 707, 120, 708, 709, 121, 0, 122, 123, 124,
	125, 126, 352, 127, 128, 131, 129, 710, 130, 711,
	213, 132, 214, 133, 134, 712, 713, 714, 715, 716,
	135, 215, 353, 136, 354, 216, 137, 138, 717, 217,
	139, 218, 140, 718, 141, 142, 143, 219, 144, 145,
	719, 147, 148, 146, 149, 720, 150, 355, 151, 152,
	220, 153, 0, 154, 155, 156, 721, 221, 157, 158,
	722, 159, 160, 356, 161, 222, 223, 162, 723, 163,
	164, 166, 224, 165, 225, 724, 167, 725, 168, 169,
	726, 226, 227, 228, 727, 728, 170, 229, 230, 729,
	171, 172, 173, 174, 730, 731, 175, 176, 177, 732,
	733, 178, 179, 180, 231, 232, 734, 181, 735, 736,
	737, 738, 182, 183, 184, 185, 0, 0, 655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	82, 83, 660, 84, 661, 662, 663, 664, 665, 666,
	667, 668, 85, 86, 186, 187, 188, 189, 87, 190,
	191, 669, 88, 192, 193, 89, 670, 671, 194, 195,
	196, 672, 197, 673, 344, 674, 90, 91, 92, 0,
	93, 675, 94, 676, 345, 95, 96, 677, 678, 679,
	680, 681, 682, 97, 98, 99, 100, 198, 101, 199,
	200, 683, 684, 102, 685, 686, 687, 103, 104, 688,
	105, 689, 0, 690, 201, 106, 202, 691, 692, 693,
	107, 108, 203, 0, 109, 694, 110, 695, 696, 346,
	697, 111, 204, 698, 205, 699, 112, 113, 206, 207,
	700, 701, 114, 702, 347, 115, 208, 209, 210, 703,
	211, 704, 348, 116, 349, 117, 118, 705, 706, 212,
	350, 119, 351, 707, 120, 708, 709, 121, 0, 122,
	123, 124, 125, 126, 352, 127, 128, 131, 129, 710,
	130, 711, 213, 132, 214, 133, 134, 712, 713, 714,
	715, 716, 135, 215, 353, 136, 354, 216, 137, 138,
	717, 217, 139, 218, 140, 718, 141, 142, 143, 219,
	144, 145, 719, 147, 148, 146, 149, 720, 150, 355,
	151, 152, 220, 153, 0, 154, 155, 156, 721, 221,
	157, 158, 722, 159, 160, 356, 161, 222, 223, 162,
	723, 163, 164, 166, 224, 165, 225, 724, 167, 725,
	168, 169, 726, 226, 227, 228, 727, 728, 170, 229,
	230, 729, 171, 172, 173, 174, 730, 731, 175, 176,
	177, 732, 733, 178, 179, 180, 231, 232, 734, 181,
	735, 736, 737, 738, 182, 183, 184, 185, 463, 452,
	453, 450, 451, 439, 0, 0, 0, 0, 0, 0,
	82, 83, 1062, 84, 0, 0, 0, 0, 445, 0,
	0, 0, 85, 86, 186, 492, 188, 493, 87, 494,
	495, 0, 88, 192, 193, 89, 460, 478, 496, 497,
	196, 0, 488, 0, 471, 0, 90, 91, 92, 0,
	93, 0, 94, 0, 345, 95, 96, 0, 472, 474,
	0, 473, 475, 97, 98, 99, 100, 498, 101, 499,
	500, 0, 0, 102, 0, 1063, 0, 491, 104, 0,
	105, 0, 0, 0, 444, 106, 479, 458, 0, 0,
	107, 108, 501, 0, 109, 0, 110, 0, 0, 346,
	0, 111, 489, 0, 205, 0, 112, 113, 485, 487,
	0, 0, 114, 0, 347, 115, 502, 503, 504, 0,
	470, 0, 348, 116, 349, 117, 118, 0, 0, 490,
	350, 119, 351, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 352, 127, 128, 131, 129, 434,
	130, 459, 486, 132, 505, 133, 134, 0, 0, 0,
	0, 0, 135, 215, 353, 136, 354, 480, 137, 138,
	0, 481, 139, 218, 140, 0, 141, 142, 143, 506,
	144, 145, 0, 147, 148, 146, 149, 0, 150, 355,
	151, 152, 448, 153, 0, 154, 155, 156, 0, 221,
	157, 158, 476, 159, 160, 356, 161, 507, 223, 162,
	0, 163, 164, 166, 508, 165, 482, 0, 167, 0,
	168, 169, 0, 226, 509, 510, 0, 0, 170, 483,
	484, 457, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 477, 0, 178, 179, 180, 231, 511, 1061, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 435, 0,
	0, 463, 452, 453, 450, 451, 439, 0, 0, 431,
	432, 1064, 0, 82, 83, 433, 84, 0, 440, 1059,
	0, 445, 0, 0, 0, 85, 86, 186, 492, 188,
	493, 87, 494, 495, 0, 88, 192, 193, 89, 460,
	478, 496, 497, 196, 0, 488, 0, 471, 0, 90,
	91, 92, 0, 93, 0, 94, 0, 345, 95, 96,
	0, 472, 474, 0, 473, 475, 97, 98, 99, 100,
	498, 101, 499, 500, 532, 0, 102, 0, 0, 0,
	491, 104, 0, 105, 0, 0, 0, 444, 106, 479,
	458, 0, 0, 107, 108, 501, 0, 109, 0, 110,
	0, 0, 346, 0, 111, 489, 0, 205, 0, 112,
	113, 485, 487, 0, 0, 114, 0, 347, 115, 502,
	503, 504, 0, 470, 0, 348, 116, 349, 117, 118,
	0, 0, 490, 350, 119, 351, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 352, 127, 128,
	131, 129, 434, 130, 459, 486, 132, 505, 133, 134,
	0, 0, 0, 0, 0, 135, 215, 353, 136, 354,
	480, 137, 138, 0, 481, 139, 218, 140, 0, 141,
	142, 143, 506, 144, 145, 0, 147, 148, 146, 149,
	0, 150, 355, 151, 152, 448, 153, 0, 154, 155,
	156, 52, 221, 157, 158, 476, 159, 160, 356, 161,
	507, 223, 162, 0, 163, 164, 166, 508, 165, 482,
	0, 167, 54, 168, 169, 0, 226, 509, 510, 0,
	0, 170, 483, 484, 457, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 477, 0, 178, 179, 180, 343,
	511, 0, 181, 0, 0, 0, 50, 182, 183, 184,
	185, 435, 51, 0, 463, 452, 453, 450, 451, 439,
	0, 0, 431, 432, 0, 0, 82, 83, 433, 84,
	0, 440, 0, 0, 445, 0, 0, 0, 85, 86,
	186, 492, 188, 493, 87, 494, 495, 0, 88, 192,
	193, 89, 460, 478, 496, 497, 196, 0, 488, 0,
	471, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	345, 95, 96, 0, 472, 474, 0, 473, 475, 97,
	98, 99, 100, 498, 101, 499, 500, 0, 0, 102,
	0, 0, 0, 491, 104, 0, 105, 0, 0, 0,
	444, 106, 479, 458, 0, 0, 107, 108, 501, 0,
	109, 0, 110, 0, 0, 346, 0, 111, 489, 0,
	205, 0, 112, 113, 485, 487, 0, 0, 114, 0,
	347, 115, 502, 503, 504, 0, 470, 0, 348, 116,
	349, 117, 118, 0, 0, 490, 350, 119, 351, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	352, 127, 128, 131, 129, 434, 130, 459, 486, 132,
	505, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	353, 136, 354, 480, 137, 138, 0, 481, 139, 218,
	140, 0, 141, 142, 143, 506, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 355, 151, 152, 448, 153,
	0, 154, 155, 156, 52, 221, 157, 158, 476, 159,
	160, 356, 161, 507, 223, 162, 0, 163, 164, 166,
	508, 165, 482, 0, 167, 54, 168, 169, 0, 226,
	509, 510, 0, 0, 170, 483, 484, 457, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 477, 0, 178,
	179, 180, 343, 511, 0, 181, 0, 0, 0, 50,
	182, 183, 184, 185, 435, 51, 0, 463, 452, 453,
	450, 451, 439, 0, 0, 431, 432, 0, 0, 82,
	83, 433, 84, 0, 440, 0, 0, 445, 0, 0,
	0, 85, 86, 186, 492, 188, 493, 87, 494, 495,
	1100, 88, 192, 193, 89, 460, 478, 496, 497, 196,
	0, 488, 0, 471, 0, 90, 91, 92, 0, 93,
	0, 94, 0, 345, 95, 96, 0, 472, 474, 0,
	473, 475, 97, 98, 99, 100, 498, 101, 499, 500,
	0, 0, 102, 0, 0, 0, 491, 104, 0, 105,
	0, 0, 0, 444, 106, 479, 458, 0, 0, 107,
	108, 501, 0, 109, 0, 110, 0, 1105, 346, 0,
	111, 489, 0, 205, 0, 112, 113, 485, 487, 0,
	0, 114, 0, 347, 115, 502, 503, 504, 0, 470,
	0, 348, 116, 349, 117, 118, 0, 1101, 490, 350,
	119, 351, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 352, 127, 128, 131, 129, 434, 130,
	459, 486, 132, 505, 133, 134, 0, 0, 0, 0,
	0, 135, 215, 353, 136, 354, 480, 137, 138, 0,
	481, 139, 218, 140, 0, 141, 142, 143, 506, 144,
	145, 0, 147, 148, 146, 149, 0, 150, 355, 151,
	152, 448, 153, 0, 154, 155, 156, 0, 221, 157,
	158, 476, 159, 160, 356, 161, 507, 223, 162, 0,
	163, 164, 166, 508, 165, 482, 0, 167, 0, 168,
	169, 0, 226, 509, 510, 0, 1102, 170, 483, 484,
	457, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	477, 0, 178, 179, 180, 231, 511, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 435, 463, 452,
	453, 450, 451, 439, 0, 0, 0, 0, 431, 432,
	82, 83, 0, 84, 433, 0, 0, 440, 445, 0,
	0, 0, 85, 86, 186, 492, 188, 493, 87, 494,
	495, 0, 88, 192, 193, 89, 460, 478, 496, 497,
	196, 0, 488, 0, 471, 0, 90, 91, 92, 0,
	93, 0, 94, 0, 345, 95, 96, 0, 472, 474,
	0, 473, 475, 97, 98, 99, 100, 498, 101, 499,
	500, 0, 0, 102, 0, 0, 0, 491, 104, 0,
	105, 0, 0, 0, 444, 106, 479, 458, 0, 0,
	107, 108, 501, 0, 109, 0, 110, 0, 0, 346,
	0, 111, 489, 0, 205, 0, 112, 113, 485, 487,
	0, 0, 114, 0, 347, 115, 502, 503, 504, 0,
	470, 0, 348, 116, 349, 117, 118, 0, 0, 490,
	350, 119, 351, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 352, 127, 128, 131, 129, 434,
	130, 459, 486, 132, 505, 133, 134, 0, 0, 0,
	0, 0, 135, 215, 353, 136, 354, 480, 137, 138,
	0, 481, 139, 218, 140, 0, 141, 142, 143, 506,
	144, 145, 0, 147, 148, 146, 149, 0, 150, 355,
	151, 152, 448, 153, 0, 154, 155, 156, 0, 221,
	157, 158, 476, 159, 160, 356, 161, 507, 223, 162,
	0, 163, 164, 166, 508, 165, 482, 0, 167, 0,
	168, 169, 0, 226, 509, 510, 0, 0, 170, 483,
	484, 457, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 477, 0, 178, 179, 180, 231, 511, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 435, 0,
	0, 463, 452, 453, 450, 451, 439, 0, 0, 431,
	432, 0, 0, 82, 83, 433, 84, 0, 440, 1457,
	0, 445, 0, 0, 0, 85, 86, 186, 492, 188,
	493, 87, 494, 495, 0, 88, 192, 193, 89, 460,
	478, 496, 497, 196, 0, 488, 0, 471, 0, 90,
	91, 92, 0, 93, 0, 94, 0, 345, 95, 96,
	0, 472, 474, 0, 473, 475, 97, 98, 99, 100,
	498, 101, 499, 500, 0, 0, 102, 0, 0, 0,
	491, 104, 0, 105, 0, 0, 0, 444, 106, 479,
	458, 0, 0, 107, 108, 501, 0, 109, 0, 110,
	0, 0, 346, 0, 111, 489, 0, 205, 0, 112,
	113, 485, 487, 0, 0, 114, 0, 347, 115, 502,
	503, 504, 0, 470, 0, 348, 116, 349, 117, 118,
	0, 0, 490, 350, 119, 351, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 352, 127, 128,
	131, 129, 434, 130, 459, 486, 132, 505, 133, 134,
	0, 0, 0, 0, 0, 135, 215, 353, 136, 354,
	480, 137, 138, 0, 481, 139, 218, 140, 0, 141,
	142, 143, 506, 144, 145, 0, 147, 148, 146, 149,
	0, 150, 355, 151, 152, 448, 153, 0, 154, 155,
	156, 0, 221, 157, 158, 476, 159, 160, 356, 161,
	507, 223, 162, 0, 163, 164, 166, 508, 165, 482,
	0, 167, 0, 168, 169, 0, 226, 509, 510, 0,
	0, 170, 483, 484, 457, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 477, 0, 178, 179, 180, 231,
	511, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 435, 0, 0, 463, 452, 453, 450, 451, 439,
	0, 0, 431, 432, 0, 0, 82, 83, 433, 84,
	0, 440, 1408, 0, 445, 0, 0, 0, 85, 86,
	186, 492, 188, 493, 87, 494, 495, 0, 88, 192,
	193, 89, 460, 478, 496, 497, 196, 0, 488, 0,
	471, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	345, 95, 96, 0, 472, 474, 0, 473, 475, 97,
	98, 99, 100, 498, 101, 499, 500, 0, 0, 102,
	0, 0, 0, 491, 104, 0, 105, 0, 0, 0,
	444, 106, 479, 458, 0, 0, 107, 108, 501, 0,
	109, 0, 110, 0, 0, 346, 0, 111, 489, 0,
	205, 0, 112, 113, 485, 487, 0, 0, 114, 0,
	347, 115, 502, 503, 504, 0, 470, 0, 348, 116,
	349, 117, 118, 0, 0, 490, 350, 119, 351, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	352, 127, 128, 131, 129, 434, 130, 459, 486, 132,
	505, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	353, 136, 354, 480, 137, 138, 0, 481, 139, 218,
	140, 0, 141, 142, 143, 506, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 355, 151, 152, 448, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 476, 159,
	160, 356, 161, 507, 223, 162, 0, 163, 164, 166,
	508, 165, 482, 0, 167, 0, 168, 169, 0, 226,
	509, 510, 0, 0, 170, 483, 484, 457, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 477, 0, 178,
	179, 180, 231, 511, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 435, 0, 0, 463, 452, 453,
	450, 451, 439, 0, 0, 431, 432, 0, 0, 82,
	83, 433, 84, 0, 440, 1058, 0, 445, 0, 0,
	0, 85, 86, 186, 492, 188, 493, 87, 494, 495,
	0, 88, 192, 193, 89, 460, 478, 496, 497, 196,
	0, 488, 0, 471, 0, 90, 91, 92, 0, 93,
	0, 94, 0, 345, 95, 96, 0, 472, 474, 0,
	473, 475, 97, 98, 99, 100, 498, 101, 499, 500,
	0, 0, 102, 0, 0, 0, 491, 104, 0, 105,
	0, 0, 0, 444, 106, 479, 458, 0, 0, 107,
	108, 501, 0, 109, 0, 110, 0, 0, 346, 0,
	111, 489, 0, 205, 0, 112, 113, 485, 487, 0,
	0, 114, 0, 347, 115, 502, 503, 504, 0, 470,
	0, 348, 116, 349, 117, 118, 0, 0, 490, 350,
	119, 351, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 352, 127, 128, 131, 129, 434, 130,
	459, 486, 132, 505, 133, 134, 0, 0, 0, 0,
	0, 135, 215, 353, 136, 354, 480, 137, 138, 0,
	481, 139, 218, 140, 0, 141, 142, 143, 506, 144,
	145, 0, 147, 148, 146, 149, 0, 150, 355, 151,
	152, 448, 153, 0, 154, 155, 156, 0, 221, 157,
	158, 476, 159, 160, 356, 161, 507, 223, 162, 0,
	163, 164, 166, 508, 165, 482, 0, 167, 0, 168,
	169, 0, 226, 509, 510, 0, 0, 170, 483, 484,
	457, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	477, 0, 178, 179, 180, 231, 511, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 435, 463, 452,
	453, 450, 451, 439, 0, 0, 0, 0, 431, 432,
	82, 83, 0, 84, 433, 827, 1055, 440, 445, 0,
	0, 0, 85, 86, 186, 492, 188, 493, 87, 494,
	495, 0, 88, 192, 193, 89, 460, 478, 496, 497,
	196, 0, 488, 0, 471, 0, 90, 91, 92, 0,
	93, 0, 94, 0, 345, 95, 96, 0, 472, 474,
	0, 473, 475, 97, 98, 99, 100, 498, 101, 499,
	500, 0, 0, 102, 0, 0, 0, 491, 104, 0,
	105, 0, 0, 0, 444, 106, 479, 458, 0, 0,
	107, 108, 501, 0, 109, 0, 110, 0, 0, 346,
	0, 111, 489, 0, 205, 0, 112, 113, 485, 487,
	0, 0, 114, 0, 347, 115, 502, 503, 504, 0,
	470, 0, 348, 116, 349, 117, 118, 0, 0, 490,
	350, 119, 351, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 352, 127, 128, 131, 129, 434,
	130, 459, 486, 132, 505, 133, 134, 0, 0, 0,
	0, 0, 135, 215, 353, 136, 354, 480, 137, 138,
	0, 481, 139, 218, 140, 0, 141, 142, 143, 506,
	144, 145, 0, 147, 148, 146, 149, 0, 150, 355,
	151, 152, 448, 153, 0, 154, 155, 156, 0, 221,
	157, 158, 476, 159, 160, 356, 161, 507, 223, 162,
	0, 163, 164, 166, 508, 165, 482, 0, 167, 0,
	168, 169, 0, 226, 509, 510, 0, 0, 170, 483,
	484, 457, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 477, 0, 178, 179, 180, 231, 511, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 435, 0,
	0, 463, 452, 453, 450, 451, 439, 0, 0, 431,
	432, 429, 0, 82, 83, 433, 84, 0, 440, 0,
	0, 445, 0, 0, 0, 85, 86, 186, 492, 188,
	493, 87, 494, 495, 0, 88, 192, 193, 89, 460,
	478, 496, 497, 196, 0, 488, 0, 471, 0, 90,
	91, 92, 0, 93, 0, 94, 0, 345, 95, 96,
	0, 472, 474, 0, 473, 475, 97, 98, 99, 100,
	498, 101, 499, 500, 0, 0, 102, 0, 0, 0,
	491, 104, 0, 105, 0, 0, 0, 444, 106, 479,
	458, 0, 0, 107, 108, 501, 0, 109, 0, 110,
	0, 0, 346, 0, 111, 489, 0, 205, 0, 112,
	113, 485, 487, 0, 0, 114, 0, 347, 115, 502,
	503, 504, 0, 470, 0, 348, 116, 349, 117, 118,
	0, 0, 490, 350, 119, 351, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 352, 127, 128,
	131, 129, 434, 130, 459, 486, 132, 505, 133, 134,
	0, 0, 0, 0, 0, 135, 215, 353, 136, 354,
	480, 137, 138, 0, 481, 139, 218, 140, 0, 141,
	142, 143, 506, 144, 145, 0, 147, 148, 146, 149,
	0, 150, 355, 151, 152, 448, 153, 0, 154, 155,
	156, 0, 221, 157, 158, 476, 159, 160, 356, 161,
	507, 223, 162, 0, 163, 164, 166, 508, 165, 482,
	0, 167, 0, 168, 169, 0, 226, 509, 510, 0,
	0, 170, 483, 484, 457, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 477, 0, 178, 179, 180, 231,
	511, 1413, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 435, 463, 452, 453, 450, 451, 439, 0, 0,
	0, 0, 431, 432, 82, 83, 0, 84, 433, 0,
	0, 440, 445, 0, 0, 0, 85, 86, 186, 492,
	188, 493, 87, 494, 495, 0, 88, 192, 193, 89,
	460, 478, 496, 497, 196, 0, 488, 0, 471, 0,
	90, 91, 92, 0, 93, 0, 94, 0, 345, 95,
	96, 0, 472, 474, 0, 473, 475, 97, 98, 99,
	100, 498, 101, 499, 500, 532, 0, 102, 0, 0,
	0, 491, 104, 0, 105, 0, 0, 0, 444, 106,
	479, 458, 0, 0, 107, 108, 501, 0, 109, 0,
	110, 0, 0, 346, 0, 111, 489, 0, 205, 0,
	112, 113, 485, 487, 0, 0, 114, 0, 347, 115,
	502, 503, 504, 0, 470, 0, 348, 116, 349, 117,
	118, 0, 0, 490, 350, 119, 351, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 352, 127,
	128, 131, 129, 434, 130, 459, 486, 132, 505, 133,
	134, 0, 0, 0, 0, 0, 135, 215, 353, 136,
	354, 480, 137, 138, 0, 481, 139, 218, 140, 0,
	141, 142, 143, 506, 144, 145, 0, 147, 148, 146,
	149, 0, 150, 355, 151, 152, 448, 153, 0, 154,
	155, 156, 0, 221, 157, 158, 476, 159, 160, 356,
	161, 507, 223, 162, 0, 163, 164, 166, 508, 165,
	482, 0, 167, 0, 168, 169, 0, 226, 509, 510,
	0, 0, 170, 483, 484, 457, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 477, 0, 178, 179, 180,
	231, 511, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 435, 463, 452, 453, 450, 451, 439, 0,
	0, 0, 0, 431, 432, 82, 83, 0, 84, 433,
	0, 0, 440, 445, 0, 0, 0, 85, 86, 186,
	492, 188, 493, 87, 494, 495, 0, 88, 192, 193,
	89, 460, 478, 496, 497, 196, 0, 488, 0, 471,
	0, 90, 91, 92, 0, 93, 0, 94, 0, 345,
	95, 96, 0, 472, 474, 0, 473, 475, 97, 98,
	99, 100, 498, 101, 499, 500, 0, 0, 102, 0,
	0, 0, 491, 104, 0, 105, 0, 0, 0, 444,
	106, 479, 458, 0, 0, 107, 108, 501, 0, 109,
	0, 110, 0, 1105, 346, 0, 111, 489, 0, 205,
	0, 112, 113, 485, 487, 0, 0, 114, 0, 347,
	115, 502, 503, 504, 0, 470, 0, 348, 116, 349,
	117, 118, 0, 0, 490, 350, 119, 351, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 352,
	127, 128, 131, 129, 434, 130, 459, 486, 132, 505,
	133, 134, 0, 0, 0, 0, 0, 135, 215, 353,
	136, 354, 480, 137, 138, 0, 481, 139, 218, 140,
	0, 141, 142, 143, 506, 144, 145, 0, 147, 148,
	146, 149, 0, 150, 355, 151, 152, 448, 153, 0,
	154, 155, 156, 0, 221, 157, 158, 476, 159, 160,
	356, 161, 507, 223, 162, 0, 163, 164, 166, 508,
	165, 482, 0, 167, 0, 168, 169, 0, 226, 509,
	510, 0, 0, 170, 483, 484, 457, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 477, 0, 178, 179,
	180, 231, 511, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 435, 463, 452, 453, 450, 451, 439,
	0, 0, 0, 0, 431, 432, 82, 83, 767, 84,
	433, 0, 0, 440, 445, 0, 0, 0, 85, 86,
	186, 492, 188, 493, 87, 494, 495, 0, 88, 192,
	193, 89, 460, 478, 496, 497, 196, 0, 488, 0,
	471, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	345, 95, 96, 0, 472, 474, 0, 473, 475, 97,
	98, 99, 100, 498, 101, 499, 500, 0, 0, 102,
	0, 0, 0, 491, 104, 0, 105, 0, 0, 0,
	444, 106, 479, 458, 0, 0, 107, 108, 501, 0,
	109, 0, 110, 0, 0, 346, 0, 111, 489, 0,
	205, 0, 112, 113, 485, 487, 0, 0, 114, 0,
	347, 115, 502, 503, 504, 0, 470, 0, 348, 116,
	349, 117, 118, 0, 0, 490, 350, 119, 351, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	352, 127, 128, 131, 129, 434, 130, 459, 486, 132,
	505, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	353, 136, 354, 480, 137, 138, 0, 481, 139, 218,
	140, 0, 141, 142, 143, 506, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 355, 151, 152, 448, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 476, 159,
	160, 356, 161, 507, 223, 162, 0, 163, 164, 166,
	508, 165, 482, 0, 167, 0, 168, 169, 0, 226,
	509, 510, 0, 0, 170, 483, 484, 457, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 477, 0, 178,
	179, 180, 231, 511, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 435, 463, 452, 453, 450, 451,
	439, 0, 0, 0, 0, 431, 432, 82, 83, 0,
	84, 433, 0, 0, 440, 445, 0, 0, 0, 85,
	86, 186, 492, 188, 493, 87, 494, 495, 0, 88,
	192, 193, 89, 460, 478, 496, 497, 196, 0, 488,
	0, 471, 0, 90, 91, 92, 0, 93, 0, 94,
	0, 345, 95, 1738, 0, 472, 474, 0, 473, 475,
	97, 98, 99, 100, 498, 101, 499, 500, 0, 0,
	102, 0, 0, 0, 491, 104, 0, 105, 0, 0,
	0, 444, 106, 479, 458, 0, 0, 107, 108, 501,
	0, 109, 0, 110, 0, 0, 346, 0, 111, 489,
	0, 205, 0, 112, 113, 485, 487, 0, 0, 114,
	0, 347, 115, 502, 503, 504, 0, 470, 0, 348,
	116, 349, 117, 118, 0, 0, 490, 350, 119, 351,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 352, 127, 128, 131, 129, 434, 130, 459, 486,
	132, 505, 133, 134, 0, 0, 0, 0, 0, 135,
	215, 353, 136, 354, 480, 137, 138, 0, 481, 139,
	218, 140, 0, 141, 142, 143, 506, 144, 145, 0,
	147, 148, 146, 149, 0, 150, 355, 151, 152, 448,
	153, 0, 154, 155, 156, 0, 221, 157, 158, 476,
	159, 160, 356, 161, 507, 223, 162, 0, 163, 164,
	166, 508, 165, 482, 0, 167, 0, 168, 169, 0,
	226, 509, 510, 0, 0, 170, 483, 484, 457, 171,
	172, 1737, 174, 0, 0, 175, 176, 177, 477, 0,
	178, 179, 180, 231, 511, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 435, 463, 452, 453, 450,
	451, 439, 0, 0, 0, 0, 431, 432, 82, 83,
	0, 84, 433, 0, 0, 440, 445, 0, 0, 0,
	85, 86, 1736, 492, 188, 493, 87, 494, 495, 0,
	88, 192, 193, 89, 460, 478, 496, 497, 196, 0,
	488, 0, 471, 0, 90, 91, 92, 0, 93, 0,
	94, 0, 345, 95, 1738, 0, 472, 474, 0, 473,
	475, 97, 98, 99, 100, 498, 101, 499, 500, 0,
	0, 102, 0, 0, 0, 491, 104, 0, 105, 0,
	0, 0, 444, 106, 479, 458, 0, 0, 107, 108,
	501, 0, 109, 0, 110, 0, 0, 346, 0, 111,
	489, 0, 205, 0, 112, 113, 485, 487, 0, 0,
	114, 0, 347, 115, 502, 503, 504, 0, 470, 0,
	348, 116, 349, 117, 118, 0, 0, 490, 350, 119,
	351, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 352, 127, 128, 131, 129, 434, 130, 459,
	486, 132, 505, 133, 134, 0, 0, 0, 0, 0,
	135, 215, 353, 136, 354, 480, 137, 138, 0, 481,
	139, 218, 140, 0, 141, 142, 143, 506, 144, 145,
	0, 147, 148, 146, 149, 0, 150, 355, 151, 152,
	448, 153, 0, 154, 155, 156, 0, 221, 157, 158,
	476, 159, 160, 356, 161, 507, 223, 162, 0, 163,
	164, 166, 508, 165, 482, 0, 167, 0, 168, 169,
	0, 226, 509, 510, 0, 0, 170, 483, 484, 457,
	171, 172, 1737, 174, 0, 0, 175, 176, 177, 477,
	0, 178, 179, 180, 231, 511, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 435, 463, 452, 453,
	450, 451, 439, 0, 0, 0, 0, 431, 432, 82,
	83, 0, 84, 433, 0, 0, 440, 445, 0, 0,
	0, 85, 86, 186, 492, 188, 493, 87, 494, 495,
	0, 88, 192, 193, 89, 460, 478, 496, 497, 196,
	0, 488, 0, 471, 0, 90, 91, 92, 0, 93,
	0, 94, 0, 345, 95, 96, 0, 472, 474, 0,
	473, 475, 97, 98, 99, 100, 498, 101, 499, 500,
	0, 0, 102, 0, 0, 0, 491, 104, 0, 105,
	0, 0, 0, 444, 106, 479, 458, 0, 0, 107,
	108, 501, 0, 109, 0, 110, 0, 0, 346, 0,
	111, 489, 0, 205, 0, 112, 113, 485, 487, 0,
	0, 114, 0, 347, 115, 502, 503, 504, 0, 470,
	0, 348, 116, 349, 117, 118, 0, 0, 490, 350,
	119, 351, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 352, 127, 128, 131, 129, 434, 130,
	459, 486, 132, 505, 133, 134, 0, 0, 0, 0,
	0, 135, 215, 353, 136, 354, 480, 137, 138, 0,
	481, 139, 218, 140, 0, 141, 142, 143, 506, 144,
	145, 0, 147, 148, 146, 149, 0, 150, 355, 151,
	152, 448, 153, 0, 154, 155, 156, 0, 221, 157,
	158, 476, 159, 160, 356, 161, 507, 223, 162, 0,
	163, 164, 166, 508, 165, 482, 0, 167, 0, 168,
	169, 0, 226, 509, 510, 0, 0, 170, 483, 484,
	457, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	477, 0, 178, 179, 180, 231, 511, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 435, 463, 452,
	453, 450, 451, 439, 0, 0, 0, 0, 431, 432,
	82, 83, 0, 84, 433, 0, 0, 440, 445, 0,
	0, 0, 85, 86, 186, 492, 188, 493, 87, 494,
	495, 0, 88, 192, 193, 89, 460, 478, 496, 497,
	196, 0, 488, 0, 471, 0, 90, 91, 92, 0,
	93, 0, 94, 0, 345, 95, 96, 0, 472, 474,
	0, 473, 475, 97, 98, 99, 100, 498, 101, 499,
	500, 0, 0, 102, 0, 0, 0, 491, 104, 0,
	105, 0, 0, 0, 444, 106, 479, 458, 0, 0,
	107, 108, 501, 0, 109, 0, 110, 0, 0, 346,
	0, 111, 489, 0, 205, 0, 112, 113, 485, 487,
	0, 0, 114, 0, 347, 115, 502, 503, 504, 0,
	470, 0, 348, 116, 349, 117, 118, 0, 0, 490,
	350, 119, 351, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 352, 127, 128, 131, 129, 0,
	130, 459, 486, 132, 505, 133, 134, 0, 0, 0,
	0, 0, 135, 215, 353, 136, 354, 480, 137, 138,
	0, 481, 139, 218, 140, 0, 141, 142, 143, 506,
	144, 145, 0, 147, 148, 146, 149, 0, 150, 355,
	151, 152, 1095, 153, 0, 154, 155, 156, 0, 221,
	157, 158, 476, 159, 160, 356, 161, 507, 223, 162,
	0, 163, 164, 166, 508, 165, 482, 0, 167, 0,
	168, 169, 0, 226, 509, 510, 0, 0, 170, 483,
	484, 457, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 477, 0, 178, 179, 180, 231, 511, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 463,
	452, 453, 450, 451, 439, 0, 0, 0, 0, 1091,
	1092, 82, 83, 0, 84, 1093, 0, 0, 1094, 445,
	0, 0, 0, 85, 86, 0, 492, 188, 493, 87,
	494, 495, 0, 88, 192, 193, 89, 460, 478, 496,
	497, 196, 0, 488, 0, 471, 0, 90, 91, 92,
	0, 93, 0, 94, 0, 345, 95, 1738, 0, 472,
	474, 0, 473, 475, 97, 98, 99, 100, 498, 101,
	499, 500, 0, 0, 102, 0, 0, 0, 491, 104,
	0, 105, 0, 0, 0, 444, 106, 479, 458, 0,
	0, 107, 108, 501, 0, 109, 0, 110, 0, 0,
	346, 0, 111, 489, 0, 205, 0, 112, 113, 485,
	487, 0, 0, 114, 0, 347, 115, 502, 503, 504,
	0, 470, 0, 0, 116, 349, 117, 118, 0, 0,
	490, 350, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 352, 127, 128, 131, 129,
	434, 130, 459, 486, 132, 505, 133, 134, 0, 0,
	0, 0, 0, 135, 215, 353, 136, 354, 480, 137,
	138, 0, 481, 139, 218, 140, 0, 141, 142, 143,
	506, 144, 145, 0, 147, 148, 146, 149, 0, 150,
	355, 151, 152, 448, 153, 0, 154, 155, 156, 0,
	221, 157, 158, 476, 159, 160, 0, 161, 507, 223,
	162, 0, 163, 164, 166, 508, 165, 482, 0, 167,
	0, 168, 169, 0, 226, 509, 510, 0, 0, 170,
	483, 484, 457, 171, 172, 1737, 174, 0, 0, 175,
	176, 177, 477, 0, 178, 179, 180, 231, 511, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 432, 82, 83, 0, 84, 433, 0, 0, 440,
	0, 0, 0, 0, 85, 86, 186, 187, 188, 189,
	87, 190, 191, 0, 88, 192, 193, 89, 0, 478,
	194, 195, 196, 0, 488, 0, 471, 0, 90, 91,
	92, 0, 93, 0, 94, 0, 345, 95, 96, 0,
	472, 474, 0, 473, 475, 97, 98, 99, 100, 198,
	101, 199, 200, 0, 0, 102, 0, 0, 0, 103,
	104, 0, 105, 0, 0, 0, 201, 106, 479, 0,
	0, 0, 107, 108, 203, 0, 109, 0, 110, 0,
	0, 346, 0, 111, 489, 0, 205, 0, 112, 113,
	485, 487, 0, 0, 114, 0, 347, 115, 208, 209,
	210, 0, 211, 0, 348, 116, 349, 117, 118, 0,
	0, 490, 350, 119, 351, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 352, 127, 128, 131,
	129, 0, 130, 0, 486, 132, 214, 133, 134, 0,
	0, 0, 0, 0, 135, 215, 353, 136, 354, 480,
	137, 138, 0, 481, 139, 218, 140, 0, 141, 142,
	143, 219, 144, 145, 0, 147, 148, 146, 149, 0,
	150, 355, 151, 152, 220, 153, 0, 154, 155, 156,
	0, 221, 157, 158, 476, 159, 160, 356, 161, 222,
	223, 162, 0, 163, 164, 166, 224, 165, 482, 0,
	167, 0, 168, 169, 0, 226, 227, 228, 0, 0,
	170, 483, 484, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 477, 0, 178, 179, 180, 231, 232,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 0, 84, 0, 0, 0, 0,
	1520, 0, 0, 0, 85, 86, 186, 187, 188, 189,
	87, 190, 191, 0, 88, 192, 193, 89, 0, 0,
	194, 195, 196, 0, 197, 0, 344, 0, 90, 91,
	92, 0, 93, 0, 94, 0, 345, 95, 96, 0,
	0, 0, 0, 0, 0, 97, 98, 99, 100, 198,
	101, 199, 200, 0, 0, 102, 0, 0, 0, 103,
	104, 0, 105, 0, 0, 0, 201, 106, 202, 0,
	0, 0, 107, 108, 203, 0, 109, 0, 110, 0,
	0, 346, 0, 111, 204, 0, 205, 0, 112, 113,
	206, 207, 0, 0, 114, 0, 347, 115, 208, 209,
	210, 0, 211, 0, 348, 116, 349, 117, 118, 0,
	0, 212, 350, 119, 351, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 352, 127, 128, 131,
	129, 0, 130, 0, 213, 132, 214, 133, 134, 0,
	0, 0, 0, 0, 135, 215, 353, 136, 354, 216,
	137, 138, 0, 217, 139, 218, 140, 0, 141, 142,
	143, 219, 144, 145, 0, 147, 148, 146, 149, 0,
	150, 355, 151, 152, 220, 153, 0, 154, 155, 156,
	52, 221, 157, 158, 0, 159, 160, 356, 161, 222,
	223, 162, 0, 163, 164, 166, 224, 165, 225, 0,
	167, 54, 168, 169, 0, 226, 227, 228, 0, 0,
	170, 229, 230, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 343, 232,
	0, 181, 0, 0, 0, 50, 182, 183, 184, 185,
	0, 51, 339, 640, 0, 641, 636, 631, 0, 0,
	0, 0, 0, 0, 82, 83, 0, 84, 0, 0,
	49, 0, 0, 0, 0, 0, 85, 86, 186, 187,
	188, 189, 87, 190, 191, 0, 88, 192, 193, 89,
	0, 0, 194, 195, 196, 0, 197, 0, 344, 0,
	90, 91, 92, 0, 93, 0, 94, 0, 345, 95,
	96, 0, 0, 0, 0, 0, 0, 97, 98, 99,
	100, 198, 101, 199, 200, 644, 0, 102, 0, 0,
	0, 103, 104, 0, 105, 0, 0, 0, 201, 106,
	202, 633, 0, 0, 107, 108, 203, 0, 109, 0,
	110, 0, 0, 346, 0, 111, 204, 0, 205, 0,
	112, 113, 206, 207, 0, 0, 114, 0, 347, 115,
	208, 209, 210, 0, 211, 0, 348, 116, 349, 117,
	118, 0, 0, 212, 350, 119, 351, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 352, 127,
	128, 131, 129, 0, 130, 0, 213, 132, 214, 133,
	134, 0, 634, 0, 0, 0, 135, 215, 353, 136,
	354, 216, 137, 138, 0, 217, 139, 218, 140, 0,
	141, 142, 143, 219, 144, 145, 0, 147, 148, 146,
	149, 0, 150, 355, 151, 152, 220, 153, 0, 154,
	155, 156, 0, 221, 157, 158, 0, 159, 160, 356,
	161, 222, 223, 162, 0, 163, 164, 166, 224, 165,
	225, 0, 167, 0, 168, 169, 0, 226, 227, 228,
	0, 0, 170, 229, 230, 632, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	231, 232, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 0, 339, 640, 0, 641, 636, 631, 0,
	0, 0, 0, 642, 637, 82, 83, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 186,
	187, 188, 189, 87, 190, 191, 0, 88, 192, 193,
	89, 0, 0, 194, 195, 196, 0, 197, 0, 344,
	0, 90, 91, 92, 0, 93, 0, 94, 0, 345,
	95, 96, 0, 0, 0, 0, 0, 0, 97, 98,
	99, 100, 198, 101, 199, 200, 627, 0, 102, 0,
	0, 0, 103, 104, 0, 105, 0, 0, 0, 201,
	106, 202, 633, 0, 0, 107, 108, 203, 0, 109,
	0, 110, 0, 0, 346, 0, 111, 204, 0, 205,
	0, 112, 113, 206, 207, 0, 0, 114, 0, 347,
	115, 208, 209, 210, 0, 211, 0, 348, 116, 349,
	117, 118, 0, 0, 212, 350, 119, 351, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 352,
	127, 128, 131, 129, 0, 130, 0, 213, 132, 214,
	133, 134, 0, 634, 0, 0, 0, 135, 215, 353,
	136, 354, 216, 137, 138, 0, 217, 139, 218, 140,
	0, 141, 142, 143, 219, 144, 145, 0, 147, 148,
	146, 149, 0, 150, 355, 151, 152, 220, 153, 0,
	154, 155, 156, 0, 221, 157, 158, 0, 159, 160,
	356, 161, 222, 223, 162, 0, 163, 164, 166, 224,
	165, 225, 0, 167, 0, 168, 169, 0, 226, 227,
	228, 0, 0, 170, 229, 230, 632, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 231, 232, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 339, 640, 0, 641, 636, 631,
	0, 0, 0, 0, 642, 637, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	344, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	345, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 633, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 346, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	347, 115, 208, 209, 210, 0, 211, 0, 348, 116,
	349, 117, 118, 0, 0, 212, 350, 119, 351, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	352, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 634, 0, 0, 0, 135, 215,
	353, 136, 354, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 355, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 356, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 632, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 642, 637, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 52, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 54, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 343, 232, 0, 181, 0, 0, 0, 50,
	182, 183, 184, 185, 79, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 49, 1215, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 421, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 312, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 1003, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 915, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 1423, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 522, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 610, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 609, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 613, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 339, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 613, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	344, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	345, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 346, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	347, 115, 208, 209, 210, 0, 211, 0, 348, 116,
	349, 117, 118, 0, 0, 212, 350, 119, 351, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	352, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	353, 136, 354, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 355, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 356, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 888, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 886, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 980, 0, 107, 108, 203, 0,
	109, 0, 110, 891, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 978, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 890, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 979, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 888, 197, 0,
	0, 883, 90, 91, 92, 0, 93, 886, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 891, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 882, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 890, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 889, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 1215, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 312, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 564, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 312, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 318, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 312, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 1141, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 1139, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 1130, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 757, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 246, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 551, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 0,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 406, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 403, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 365, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 257,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 256,
	227, 228, 0, 0, 252, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 257,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 256,
	227, 228, 0, 0, 252, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 334, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 331, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 329, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 321, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 301, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 153,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	249, 0, 0, 121, 0, 122, 123, 124, 125, 257,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 138, 0, 217, 139, 218,
	140, 0, 141, 142, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 251, 153,
	0, 154, 155, 156, 0, 221, 157, 250, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 256,
	227, 228, 0, 0, 252, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 79, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 82, 83, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	186, 187, 188, 189, 87, 190, 191, 0, 88, 192,
	193, 89, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 90, 91, 92, 0, 93, 0, 94, 0,
	0, 95, 96, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 100, 198, 101, 199, 200, 0, 0, 102,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	201, 106, 202, 0, 0, 0, 107, 108, 203, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 204, 0,
	205, 0, 112, 113, 206, 207, 0, 0, 114, 0,
	0, 115, 208, 209, 210, 0, 211, 0, 0, 116,
	0, 117, 118, 0, 0, 212, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 213, 132,
	214, 133, 134, 0, 0, 0, 0, 0, 135, 215,
	0, 136, 0, 216, 137, 0, 0, 217, 139, 218,
	140, 0, 141, 0, 143, 219, 144, 145, 0, 147,
	148, 146, 149, 0, 150, 0, 151, 152, 220, 0,
	0, 154, 155, 156, 0, 221, 157, 158, 0, 159,
	160, 0, 161, 222, 223, 162, 0, 163, 164, 166,
	224, 165, 225, 0, 167, 0, 168, 169, 0, 226,
	227, 228, 0, 0, 170, 229, 230, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 231, 232, 783, 181, 802, 803, 804, 0,
	182, 183, 184, 185, 0, 0, 805, 0, 0, 0,
	0, 0, 785, 0, 811, 0, 0, 783, 0, 802,
	803, 804, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 784, 0, 785, 0, 811, 0, 799,
	783, 0, 802, 803, 804, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 784, 0, 785, 0,
	811, 0, 799, 0, 783, 0, 802, 803, 804, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 784,
	0, 0, 785, 790, 811, 799, 0, 783, 0, 802,
	803, 804, 0, 0, 0, 0, 0, 0, 0, 805,
	812, 0, 0, 784, 0, 785, 790, 811, 0, 799,
	0, 0, 810, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 812, 0, 0, 784, 0, 800, 790,
	0, 0, 799, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 807, 812, 0, 0, 0,
	806, 800, 0, 790, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	812, 0, 0, 806, 800, 0, 790, 0, 0, 0,
	0, 0, 810, 0, 801, 0, 0, 0, 0, 0,
	0, 0, 807, 812, 0, 809, 806, 0, 800, 0,
	0, 0, 0, 0, 0, 810, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 809, 0,
	806, 800, 0, 0, 0, 0, 0, 0, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 806, 0, 0, 0, 0, 808, 0,
	0, 796, 797, 798, 801, 795, 792, 793, 794, 786,
	787, 788, 789, 791, 0, 809, 0, 0, 0, 0,
	0, 808, 1308, 0, 796, 797, 798, 801, 795, 792,
	793, 794, 786, 787, 788, 789, 791, 0, 809, 0,
	0, 0, 1692, 0, 808, 0, 0, 796, 797, 798,
	0, 795, 792, 793, 794, 786, 787, 788, 789, 791,
	0, 0, 0, 0, 0, 1691, 0, 0, 808, 0,
	0, 796, 797, 798, 0, 795, 792, 793, 794, 786,
	787, 788, 789, 791, 0, 0, 0, 0, 0, 1672,
	0, 808, 0, 0, 796, 797, 798, 0, 795, 792,
	793, 794, 786, 787, 788, 789, 791, 783, 0, 802,
	803, 804, 1651, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 0, 785, 0, 811, 0, 0,
	783, 0, 802, 803, 804, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 784, 0, 785, 0,
	811, 0, 799, 783, 0, 802, 803, 804, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 784,
	0, 785, 0, 811, 0, 799, 0, 783, 0, 802,
	803, 804, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 784, 0, 0, 785, 790, 811, 799, 0,
	783, 0, 802, 803, 804, 0, 0, 0, 0, 0,
	0, 0, 805, 812, 0, 0, 784, 0, 785, 790,
	811, 0, 799, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 807, 812, 0, 0, 784,
	0, 800, 790, 0, 0, 799, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 812,
	0, 0, 0, 806, 800, 0, 790, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 812, 0, 0, 806, 800, 0, 790,
	0, 0, 0, 0, 0, 810, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 807, 812, 0, 809, 806,
	0, 800, 0, 0, 0, 0, 0, 0, 810, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 809, 0, 806, 800, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 806, 0, 0, 0,
	0, 808, 0, 0, 796, 797, 798, 801, 795, 792,
	793, 794, 786, 787, 788, 789, 791, 0, 809, 0,
	0, 0, 1646, 0, 808, 0, 0, 796, 797, 798,
	801, 795, 792, 793, 794, 786, 787, 788, 789, 791,
	0, 809, 0, 0, 0, 1642, 0, 808, 0, 0,
	796, 797, 798, 0, 795, 792, 793, 794, 786, 787,
	788, 789, 791, 0, 0, 0, 0, 0, 1581, 0,
	0, 808, 0, 0, 796, 797, 798, 0, 795, 792,
	793, 794, 786, 787, 788, 789, 791, 0, 0, 0,
	0, 0, 1580, 0, 808, 0, 0, 796, 797, 798,
	0, 795, 792, 793, 794, 786, 787, 788, 789, 791,
	783, 0, 802, 803, 804, 1489, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 0, 785, 0,
	811, 0, 0, 783, 0, 802, 803, 804, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 784,
	0, 785, 0, 811, 0, 799, 783, 0, 802, 803,
	804, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 784, 0, 785, 0, 811, 0, 799, 0,
	783, 0, 802, 803, 804, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 784, 0, 0, 785, 790,
	811, 799, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 784,
	0, 0, 790, 0, 0, 799, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 812,
	0, 0, 0, 0, 800, 790, 0, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 807, 812, 0, 0, 0, 806, 800, 0, 790,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 812, 0, 0, 806,
	800, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 809, 806, 0, 800, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 796, 797, 798,
	801, 795, 792, 793, 794, 786, 787, 788, 789, 791,
	0, 809, 0, 0, 0, 1426, 0, 808, 0, 0,
	796, 797, 798, 0, 795, 792, 793, 794, 786, 787,
	788, 789, 791, 0, 0, 0, 0, 0, 1410, 0,
	808, 0, 0, 796, 797, 798, 0, 795, 792, 793,
	794, 786, 787, 788, 789, 791, 0, 0, 0, 0,
	0, 1051, 0, 0, 808, 0, 0, 796, 797, 798,
	0, 795, 792, 793, 794, 786, 787, 788, 789, 791,
	0, 0, 783, 1473, 802, 803, 804, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 0,
	785, 0, 811, 0, 0, 783, 0, 802, 803, 804,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 784, 0, 785, 0, 811, 0, 799, 0, 0,
	0, 783, 0, 802, 803, 804, 0, 0, 0, 0,
	0, 0, 0, 805, 784, 0, 0, 991, 0, 785,
	799, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	784, 790, 1756, 0, 0, 0, 799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 0, 790, 0, 1300, 0, 0, 1299,
	810, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	807, 812, 0, 0, 0, 0, 800, 0, 0, 0,
	790, 0, 0, 810, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 812, 806, 800,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	1755, 0, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 806, 0, 0, 0, 800, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 0, 0, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 809, 814, 0, 0,
	0, 0, 0, 783, 0, 802, 803, 804, 0, 0,
	0, 801, 0, 0, 0, 805, 0, 0, 813, 0,
	0, 785, 809, 811, 0, 0, 808, 0, 0, 796,
	797, 798, 0, 795, 792, 793, 794, 786, 787, 788,
	789, 791, 784, 0, 0, 0, 0, 0, 799, 808,
	0, 0, 796, 797, 798, 0, 795, 792, 793, 794,
	786, 787, 788, 789, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 796, 797,
	798, 0, 795, 792, 793, 794, 786, 787, 788, 789,
	791, 0, 790, 783, 0, 802, 803, 804, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 812,
	0, 785, 0, 811, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 0, 783, 0, 802, 803, 804, 0,
	0, 807, 784, 0, 0, 0, 805, 800, 799, 0,
	0, 0, 785, 0, 811, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 784, 0, 0, 0, 0, 0, 799,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 790, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 809, 0, 0, 0, 0, 0,
	0, 810, 0, 790, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 0, 800, 0, 0,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 0, 0, 0, 0, 0, 0, 806,
	296, 0, 807, 0, 0, 0, 0, 808, 800, 0,
	796, 797, 798, 0, 795, 792, 793, 794, 786, 787,
	788, 789, 791, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 783, 0, 802, 803, 804,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	1301, 0, 0, 785, 801, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 809, 783, 0, 802, 803,
	804, 0, 0, 0, 784, 0, 0, 0, 805, 0,
	799, 0, 1420, 0, 785, 0, 811, 808, 0, 0,
	796, 797, 798, 0, 795, 792, 793, 794, 786, 787,
	788, 789, 791, 0, 0, 784, 0, 0, 0, 0,
	0, 799, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 796, 797, 798, 790, 795, 792, 793, 794, 786,
	787, 788, 789, 791, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 790, 0, 0, 0, 0,
	1306, 0, 0, 807, 0, 0, 0, 0, 0, 800,
	0, 0, 812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 807, 0, 0, 0, 0, 0,
	800, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 801, 0, 0, 0, 0,
	783, 0, 802, 803, 804, 0, 809, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 0, 785, 0,
	811, 0, 0, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 0, 784,
	783, 0, 802, 803, 804, 799, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 1262, 0, 0, 785, 808,
	811, 0, 796, 797, 798, 0, 795, 792, 793, 794,
	786, 787, 788, 789, 791, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 799, 0, 0, 0, 790,
	808, 0, 0, 796, 797, 798, 0, 795, 792, 793,
	794, 786, 787, 788, 789, 791, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 790,
	0, 0, 0, 0, 800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 1267, 0, 807, 0,
	0, 0, 0, 0, 800, 0, 0, 0, 0, 0,
	0, 0, 783, 0, 802, 803, 804, 0, 0, 0,
	801, 0, 0, 0, 805, 0, 806, 0, 0, 0,
	785, 809, 811, 0, 0, 0, 783, 0, 802, 803,
	804, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 784, 0, 0, 785, 0, 811, 799, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 0, 0, 784, 0, 0, 0, 0,
	0, 799, 0, 0, 808, 0, 0, 796, 797, 798,
	0, 795, 792, 793, 794, 786, 787, 788, 789, 791,
	0, 790, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 0, 808, 790, 0, 796, 797, 798,
	810, 795, 792, 793, 794, 786, 787, 788, 789, 791,
	807, 0, 812, 0, 0, 0, 800, 22, 0, 0,
	0, 0, 0, 0, 810, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 806, 0,
	800, 0, 0, 1269, 0, 1286, 1287, 1288, 0, 0,
	0, 40, 0, 0, 0, 1551, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 0, 783, 0, 802,
	803, 804, 27, 809, 0, 41, 0, 0, 1283, 28,
	0, 0, 0, 0, 0, 785, 801, 811, 0, 0,
	0, 0, 0, 0, 30, 0, 0, 809, 1269, 0,
	1286, 1287, 1288, 0, 0, 0, 784, 0, 0, 0,
	1405, 0, 799, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 1274, 1286, 1287, 1288, 808, 0, 0, 796,
	797, 798, 0, 795, 792, 793, 794, 786, 787, 788,
	789, 791, 0, 1283, 0, 0, 0, 0, 0, 0,
	808, 1289, 0, 796, 797, 798, 790, 795, 792, 793,
	794, 786, 787, 788, 789, 791, 1283, 1284, 29, 0,
	0, 0, 0, 812, 0, 0, 0, 0, 0, 43,
	0, 0, 31, 0, 42, 0, 0, 1274, 0, 32,
	0, 0, 52, 0, 0, 807, 0, 35, 37, 0,
	0, 800, 0, 0, 0, 0, 39, 0, 0, 0,
	1274, 0, 0, 54, 0, 0, 1289, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 44, 0, 0, 0,
	0, 0, 1284, 0, 1269, 0, 1286, 1287, 1288, 1289,
	55, 0, 0, 0, 0, 0, 1404, 50, 0, 0,
	0, 0, 0, 51, 0, 1284, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	1280, 1281, 1282, 0, 1279, 1276, 1277, 1278, 1270, 1271,
	1272, 1273, 1275, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 1274, 796, 797, 798, 0, 795, 792,
	793, 794, 786, 787, 788, 789, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 0, 0, 1280, 1281, 1282, 0, 1279,
	1276, 1277, 1278, 1270, 1271, 1272, 1273, 1275, 1284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 1281,
	1282, 0, 1279, 1276, 1277, 1278, 1270, 1271, 1272, 1273,
	1275, 585, 580, 602, 574, 593, 592, 0, 0, 576,
	575, 0, 0, 0, 604, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 0, 590, 589, 0, 0, 0,
	0, 0, 0, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 582, 583, 0, 601, 0, 0, 0,
	0, 1280, 1281, 1282, 0, 1279, 1276, 1277, 1278, 1270,
	1271, 1272, 1273, 1275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 0, 584, 579, 0, 0, 0, 0, 0,
	606, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	599, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605,
}
var sqlPact = [...]int{

	20628, -1000, -89, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 775, -1000, -1000, -1000, 760, 765, 374, 14040,
	1404, 1404, 15290, -1000, -1000, 18040, -1000, 2248, 496, 504,
	496, 496, 507, 15290, 605, 661, 403, -1000, 664, 57,
	17790, 14040, 1312, 49, 13290, 345, 20628, 13790, 14040, 17540,
	1184, 1084, 1075, 13290, 17290, 17040, 16790, -1000, 9196, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 604, 350, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 938, -1000, 47, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 937, -1000, 14040, -1000, -1000, 16540,
	16290, 348, 923, -1000, -1000, 552, 418, 1323, -1000, 62,
	-1000, -1000, 1181, -1000, 932, 1176, 1174, 1169, 1168, 416,
	968, -1000, 602, 923, -1000, 923, -1000, -1000, -1000, 579,
	15290, -1000, 13290, -1000, 16040, 1107, 15790, -1000, 664, -1000,
	-1000, -1000, 961, 1304, 1304, 1304, 1331, 157, 154, 403,
	6, 14040, -1000, 347, 6, 6324, 6324, -1000, -1000, 345,
	-1000, 365, 11530, 56, -1000, 6848, -1000, 1050, 1229, 716,
	696, 1228, -90, 13290, 14040, 14040, 628, 15540, -1000, 1227,
	119, 1224, -1000, 118, 1223, -1000, 35, -1000, -1000, -1000,
	-1000, -1000, -1000, 345, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13540, 1379, 21000,
	11790, 1418, 11790, -1000, -1000, 1374, -1000, 8153, -1000, 41,
	31, 1028, 1043, 9719, 9458, 1267, 1144, -1000, -1000, -1000,
	61, 3964, 14040, 1193, 11790, 14040, 14040, 14040, -1000, 14040,
	-1000, 1026, -1000, 14040, -1000, 30, 8, -1000, 15290, -1000,
	129, -1000, 343, 992, 15040, 1235, 988, -1000, 961, -1000,
	940, 1021, 7370, 8153, 403, -1000, -1000, 403, 403, 8153,
	-1000, -1000, 14040, 6, 1359, 14040, 76, -1000, 19833, -1000,
	-1000, 8153, 8153, 8153, 8153, 8153, 795, -1000, -1000, -1000,
	4750, -1000, -1000, 56, 341, 237, -1000, -1000, 340, 56,
	-1000, -1000, -1000, -1000, 333, 1462, 367, -1000, -1000, -1000,
	8153, 430, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1190, 331, 330, -1000, -1000, -1000, -1000, 325, 324,
	322, 320, 314, 313, 312, 311, 308, 305, 301, 300,
	296, 786, -1000, 445, -1000, -1000, 445, 445, -1000, 284,
	284, 293, -1000, -1000, -1000, 284, -1000, -1000, -1000, 400,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 295, 76, -1000,
	-1000, -1000, 14040, 56, -1000, -1000, -1000, 8153, 3702, 20,
	-1000, 20502, -1000, -52, 745, -1000, 12790, 1307, 1302, 1279,
	13290, 578, 576, 14040, 14040, 438, 87, 1350, 87, 11010,
	-1000, 14040, 14040, -1000, 14040, -1000, -1000, 14040, -1000, 14040,
	14040, 176, 12290, 790, 1222, 57, 19, -1000, 1382, -1000,
	-1000, -1000, -1000, 94, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 293, 786, 284,
	284, 284, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 400,
	-1000, -1000, 445, 445, 445, -1000, -1000, 573, -20, 12040,
	14040, -1000, 54, -1000, -1000, 1167, 485, 15, 20502, 770,
	1070, 801, -1000, -1000, -1000, -1000, -8, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1427, -1000, -1000,
	-1000, -1000, 1448, -8, -1000, -1000, -1000, -1000, -1000, 1457,
	-1000, -1000, -1000, 3964, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14040, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 770,
	1070, -1000, -1000, 13290, 12540, 1221, 901, 976, -1000, -1000,
	390, 1220, -1000, -1000, -1000, -1000, 20502, -1000, 20502, 657,
	1092, -1000, 1092, -14, -1000, 19651, -1000, 281, 13, -1000,
	438, 6324, 10750, 21000, 14040, 596, 8153, 8153, 8153, 8153,
	8153, 8153, 8153, 8153, 8153, 8153, 8153, 8153, 8153, 8153,
	8153, 8153, 8153, 8153, 8153, 8153, 8153, 8153, 1058, 572,
	1126, 816, 256, 3964, -1000, 1419, 1419, 1419, 2772, 2772,
	242, 45, 19306, -19, 56, -1000, -1000, 6063, 5800, 56,
	4224, -1000, 646, 1447, 442, 20502, 1203, 1127, 280, 149,
	146, 8153, 1087, 8153, 8414, 8153, 8153, 5013, 8153, 8153,
	8153, 8153, 8153, 8153, -1000, 278, -1000, -1000, -1000, -1000,
	1446, -1000, -1000, 1445, -1000, 594, 593, 1443, 438, 145,
	-1000, 2348, -1000, -1000, 6848, -1000, 790, 14040, 14040, 14040,
	-1000, -1000, 975, 14790, -1000, 21000, 14040, -1000, 275, 270,
	1054, 1042, 14040, 14040, 14540, 14290, 14040, 744, 14040, 14040,
	681, -1000, 665, 8153, 709, -1000, 10230, 450, 14040, 668,
	65, -1000, -1000, -1000, 383, 14040, -1000, -1000, -1000, 119,
	-1000, 118, -1000, -1000, 13290, -1000, -1000, -1000, -1000, -1000,
	-1000, 21000, 359, 355, -1000, 1438, 571, -1000, 568, 567,
	565, -1000, 259, 14040, 12040, -20, -24, -1000, -1000, 14040,
	1070, -1000, 8153, -1000, -1000, -1000, 670, -1000, 756, -1000,
	9980, -1000, -1000, -1000, 646, -1000, -54, -1000, -1000, -1000,
	-1000, 144, -30, -1000, -1000, -1000, -1000, -1000, 14040, 262,
	14040, 14040, 14040, 1219, 1456, 14040, -1000, -1000, -1000, 8153,
	-1000, -1000, -1000, 57, 14040, -1000, 1122, -1000, -40, 1351,
	-128, 13040, -1000, 3086, -1000, -1000, 409, 861, 861, 1397,
	1397, 1397, 1397, 1766, 1766, 1799, 784, 216, 216, 216,
	173, 893, 893, 216, 216, 216, 2772, 20526, 746, 8153,
	559, 814, 256, 8153, -1000, 1205, -1000, -1000, -1000, 1158,
	251, 8414, 8414, -1000, -1000, -1000, 4750, -1000, -1000, 250,
	8153, -1000, 8153, -45, -112, -1000, -1000, 7, -1000, -1000,
	-11, 8153, 8153, 8153, 140, -1000, 139, 616, -1000, 8153,
	798, 249, 244, 8153, -1000, -1000, 20360, 137, 1151, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 136, 20320, 134, 2194,
	-1000, 8414, 8414, 8414, 4750, 243, 133, 19625, -98, 20125,
	7109, 7109, 7109, 130, 20156, 8153, -98, 18534, 2713, 2665,
	5, 1, -9, 1436, -10, 126, 408, 407, 124, 1122,
	-1000, -1000, 8153, -1000, -1000, -1000, 556, 554, 1215, -1000,
	971, -1000, 710, 8153, 14040, 240, 236, 817, -1000, 1214,
	857, 1213, 857, -1000, -52, 707, -1000, -1000, 530, -1000,
	6324, 20502, -1000, 666, 1285, -15, -1000, -1000, -1000, 6324,
	438, 11010, 6848, -22, -1000, -1000, 790, -1000, 477, 1434,
	123, 1006, 825, 771, 641, 1430, -54, -1000, -54, -1000,
	20502, -1000, -1000, -1000, -1000, -1000, 14040, -1000, 12540, 234,
	14040, 232, 231, 230, 14040, -1000, 1235, -1000, 113, -1000,
	1117, 1330, 10750, 1068, 1063, 10750, 1172, 805, 805, 805,
	-1000, 13040, 3427, -1000, -1000, 14040, 228, 10490, 112, 1351,
	8153, 746, 8153, 8414, 8414, -1000, 746, -1000, -1000, -1000,
	-1000, 1148, 225, 8153, 21000, 20864, 20728, -26, 5537, -63,
	19283, -1000, -1000, 237, -1000, 111, 6587, -1000, 19923, 0,
	0, -1000, 1455, 1233, -1000, 8153, 19954, -1000, 11270, 440,
	811, 19260, 21000, -1000, 8153, -1000, 1145, 8153, -1000, 21000,
	8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414,
	8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 1033,
	8414, 1416, 1416, 1416, -65, 5274, -1000, 1188, 1145, 8153,
	8153, 21000, 110, 107, 104, -1000, 8153, -98, 8153, 8153,
	8153, -1000, -1000, -1000, 99, -1000, 1423, -1000, -1000, -1000,
	-1000, 1117, 19330, 14040, 14040, 14040, 1211, 1698, -1000, 18990,
	-31, 14040, 14040, -1000, 1055, 1105, 474, 14040, -1000, 14040,
	-1000, 14040, 14040, 14040, 14040, -77, 6324, 186, 57, 14040,
	-77, 665, -1000, -1000, 381, -1000, 353, 352, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 96, -1000, -1000, 8936,
	224, 14040, 12540, 8936, 900, -1000, -1000, 435, 8153, 8153,
	1351, 10750, 10750, 1692, 1053, 10750, -1000, -1000, -1000, -1000,
	377, -1000, 1062, 223, 14040, 13040, 1338, 746, 20663, 2820,
	8153, 21000, 20697, -32, 8153, 8153, -1000, -36, -1000, 8153,
	-1000, -1000, 1453, 8153, 92, 91, 83, -1000, -1000, 20502,
	8153, -1000, -1000, 18290, 8153, 82, -1000, 80, 20502, 1188,
	20502, -1000, 636, 636, 1416, 1416, 1416, 1416, 590, 590,
	1217, 503, 494, 494, 494, 844, 541, 541, 494, 494,
	494, 1143, 1044, 218, 20751, 8153, -43, -1000, -1000, -1000,
	20502, 20502, 77, -1000, -1000, -1000, -98, 2394, 18967, 18943,
	-1000, 74, 435, -1000, -1000, -1000, -1000, 14040, -1000, 14040,
	-1000, 14040, 953, -1000, -1000, 1035, 217, 8414, 14040, -1000,
	780, -56, -58, 952, -1000, 950, 8153, -1000, 21000, 857,
	857, -1000, 516, 515, -1000, -77, 1225, 14040, 1274, -1000,
	-1000, -1000, 212, -1000, -1000, -1000, -64, -1000, 235, 1305,
	8153, -1000, -1000, 201, 8936, -68, -1000, -1000, 72, -69,
	14040, -1000, 14040, 20502, -98, -1000, 1692, -1000, 199, 8153,
	10750, -1000, -1000, 943, -139, -1000, 376, -1000, 14040, -70,
	-1000, 8153, 8153, 20697, -80, -1000, 746, 746, -1000, 18920,
	-1000, 19923, -1000, -1000, -1000, 20502, 779, -1000, 18897, -1000,
	-1000, -1000, 8414, 1140, 198, 21000, 18627, -1000, -1000, 8153,
	-1000, -1000, -1000, -1000, -1000, 669, -1000, -1000, -1000, 8153,
	20751, 180, -1000, 175, -1000, -1000, -1000, 743, -1000, -1000,
	20502, 1308, -1000, -1000, 14040, 14040, 553, -82, 14040, -1000,
	-1000, 4487, 780, 8936, 1297, 56, 14040, 1297, 18604, 4224,
	-91, -1000, 14040, -1000, 780, 170, -96, -1000, 1349, -1000,
	14040, 20502, -1000, 608, 1062, -1000, 3964, -97, -1000, 746,
	746, -1000, -1000, 70, 811, 1318, -1000, 200, 8414, 21000,
	-99, -1000, 18580, -1000, 18557, 1012, 14040, 14040, 14040, 458,
	14040, -1000, -1000, 626, -1000, 438, -1000, -1000, -1000, -1000,
	-1000, -1000, 1305, -11, 780, -1000, -1000, 8936, 14040, 169,
	-101, 586, -1000, -1000, -1000, -1000, 846, 8153, 200, -103,
	-1000, -1000, -1000, 833, 925, 64, -107, 120, -1000, 8153,
	-1000, 11010, -1000, 1297, 58, -1000, -123, -1000, -1000, -1000,
	1452, 48, 7892, 7892, -98, -1000, -1000, 877, 850, 631,
	-1000, -1000, -1000, -1000, -1000, 1012, 14040, 20502, -113, -1000,
	-1000, 780, -1000, -1000, -1000, -1000, 8675, 955, 649, 19602,
	-1000, -1000, 1248, -1000, 466, 935, 935, 833, -134, -1000,
	-1000, 1396, -1000, -1000, -1000, -1000, -1000, -1000, 1405, -1000,
	-1000, 1052, -1000, -1000, -1000, 7631, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1753, 1751, 1355, 124, 121, 1748, 1744, 1743, 100,
	118, 114, 116, 1737, 87, 1734, 98, 1728, 1726, 1724,
	56, 1720, 1718, 1712, 1709, 1707, 82, 89, 157, 1870,
	155, 1700, 1697, 1694, 9, 86, 75, 1690, 35, 61,
	83, 113, 685, 57, 1688, 1686, 133, 27, 12, 173,
	90, 136, 119, 117, 1684, 1681, 1678, 40, 1673, 1669,
	1660, 1656, 45, 25, 1655, 15, 1654, 19, 1653, 1652,
	104, 1648, 96, 102, 21, 123, 95, 1647, 63, 14,
	70, 1646, 31, 1643, 41, 72, 130, 1642, 46, 142,
	54, 24, 47, 1628, 1626, 1625, 1620, 78, 101, 93,
	1619, 1618, 74, 1616, 126, 131, 1614, 1612, 128, 1607,
	1600, 1597, 708, 1596, 1595, 688, 1593, 8, 34, 68,
	6, 112, 109, 23, 1590, 16, 1589, 1297, 840, 699,
	1588, 48, 39, 73, 43, 49, 26, 1586, 1583, 99,
	1577, 1576, 1574, 1573, 1571, 77, 1570, 62, 134, 42,
	53, 84, 22, 17, 50, 79, 108, 137, 106, 1567,
	1566, 110, 1562, 76, 1560, 1558, 922, 115, 1557, 1551,
	1542, 919, 667, 209, 145, 1538, 1537, 196, 146, 1534,
	1530, 122, 1529, 1528, 135, 1526, 200, 37, 1522, 105,
	1521, 81, 1520, 0, 38, 28, 1519, 132, 71, 1518,
	1517, 1516, 1514, 29, 1, 7, 10, 4, 3, 20,
	18, 1513, 1509, 125, 91, 1507, 141, 1506, 1504, 32,
	1500, 1499, 13, 1491, 11, 1490, 5, 2, 1486, 140,
	1485, 103, 1484, 1371, 1476, 138, 1474, 1473, 1423, 80,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 36, 36, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 33, 33, 38, 38, 38, 37, 37, 32,
	32, 5, 5, 5, 9, 10, 10, 10, 10, 10,
	10, 75, 75, 74, 74, 77, 77, 11, 11, 12,
	12, 12, 12, 12, 12, 12, 12, 162, 162, 161,
	13, 137, 137, 14, 14, 14, 14, 15, 19, 229,
	229, 229, 233, 233, 234, 234, 235, 235, 235, 235,
	235, 235, 235, 231, 231, 22, 22, 22, 22, 22,
	116, 112, 112, 114, 114, 114, 114, 41, 111, 111,
	111, 111, 113, 113, 113, 113, 186, 184, 184, 191,
	191, 191, 54, 54, 54, 54, 54, 55, 55, 55,
	183, 183, 183, 183, 192, 192, 192, 192, 192, 192,
	56, 56, 56, 190, 190, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 185,
	185, 230, 230, 232, 232, 8, 8, 57, 57, 58,
	58, 119, 119, 119, 119, 118, 201, 201, 202, 202,
	202, 203, 203, 203, 203, 203, 203, 203, 199, 199,
	200, 197, 197, 198, 198, 198, 198, 236, 236, 117,
	117, 61, 61, 206, 206, 206, 206, 204, 204, 204,
	204, 204, 207, 205, 208, 208, 208, 208, 208, 148,
	148, 148, 25, 7, 7, 101, 101, 65, 65, 152,
	152, 152, 66, 66, 153, 48, 48, 34, 34, 34,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 102,
	102, 103, 103, 17, 21, 24, 24, 24, 24, 24,
	238, 238, 45, 45, 45, 45, 46, 46, 115, 115,
	115, 115, 115, 40, 6, 6, 39, 39, 16, 16,
	16, 16, 16, 51, 51, 108, 108, 108, 110, 110,
	109, 109, 109, 88, 88, 26, 79, 79, 80, 80,
	159, 81, 81, 20, 20, 29, 29, 27, 27, 27,
	27, 27, 27, 28, 28, 30, 30, 30, 30, 30,
	30, 30, 214, 214, 214, 216, 216, 213, 215, 215,
	237, 237, 89, 89, 89, 60, 59, 59, 63, 63,
	62, 64, 64, 151, 86, 86, 86, 86, 104, 105,
	105, 106, 106, 107, 107, 85, 85, 134, 134, 31,
	31, 70, 70, 71, 71, 125, 125, 126, 126, 124,
	124, 124, 154, 154, 154, 154, 155, 155, 155, 155,
	155, 155, 149, 149, 149, 149, 150, 150, 160, 160,
	92, 92, 92, 92, 90, 90, 91, 91, 156, 156,
	156, 156, 87, 87, 157, 157, 157, 120, 120, 163,
	163, 163, 69, 69, 69, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 165, 165,
	165, 165, 167, 167, 167, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 168, 168,
	175, 175, 176, 176, 177, 178, 169, 169, 170, 170,
	171, 172, 179, 179, 179, 179, 181, 181, 173, 173,
	173, 173, 173, 174, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 99, 99,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 209, 209, 209, 209, 209, 209, 209,
	211, 211, 212, 212, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 217,
	217, 218, 218, 219, 219, 220, 220, 222, 223, 223,
	223, 224, 228, 228, 221, 221, 225, 225, 225, 226,
	226, 227, 227, 227, 227, 227, 139, 139, 139, 140,
	140, 141, 76, 76, 136, 136, 135, 135, 135, 138,
	138, 93, 180, 180, 180, 180, 180, 180, 180, 94,
	94, 100, 95, 95, 96, 96, 96, 96, 96, 96,
	131, 132, 97, 97, 97, 133, 133, 142, 146, 146,
	145, 144, 144, 143, 143, 123, 123, 123, 123, 122,
	121, 82, 82, 239, 239, 147, 147, 83, 83, 84,
	78, 78, 158, 158, 158, 158, 72, 72, 53, 53,
	73, 73, 49, 49, 52, 50, 50, 50, 50, 67,
	67, 68, 68, 47, 47, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 182, 182, 182, 42,
	42, 42, 43, 43, 44, 44, 188, 188, 188, 189,
	189, 189, 189, 187, 187, 187, 187, 187, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 2, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 3, 3, 4, 3, 2, 4, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 2, 0, 3, 1,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	5, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 1, 3, 1, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 4, 7, 3, 0, 6, 6,
	8, 5, 7, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 0, 8, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 3, 1, 1, 3, 2,
	4, 0, 4, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 2, 2, 1, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -18, -19, -21, -20, -22, -23, -24, -17,
	-25, -26, 19, -6, -7, -8, -215, 84, 91, 180,
	106, 194, 201, -27, -29, 209, -116, 210, 29, 218,
	53, 87, 196, 191, 238, 59, -214, -30, -28, 284,
	259, 265, 204, -31, 225, 252, 287, 225, 71, 117,
	79, 121, 246, 245, 71, 117, 225, -12, 284, -20,
	-5, -10, -4, -16, -26, -9, -11, 19, -42, 4,
	-193, -195, 16, 17, 19, 28, 29, 34, 38, 41,
	52, 53, 54, 56, 58, 61, 62, 69, 70, 71,
	72, 74, 79, 83, 84, 86, 91, 96, 97, 100,
	102, 107, 112, 113, 118, 121, 129, 131, 132, 137,
	140, 143, 145, 146, 147, 148, 149, 151, 152, 154,
	156, 153, 159, 161, 162, 168, 171, 174, 175, 178,
	180, 182, 183, 184, 186, 187, 191, 189, 190, 192,
	194, 196, 197, 199, 201, 202, 203, 206, 207, 209,
	210, 212, 215, 217, 218, 221, 219, 224, 226, 227,
	234, 238, 239, 240, 241, 244, 245, 246, 249, 250,
	251, 255, 260, 261, 262, 263, 30, 31, 32, 33,
	35, 36, 39, 40, 44, 45, 46, 48, 73, 75,
	76, 90, 92, 98, 108, 110, 114, 115, 122, 123,
	124, 126, 135, 158, 160, 169, 173, 177, 179, 185,
	198, 205, 213, 214, 220, 222, 229, 230, 231, 235,
	236, 252, 253, -233, 18, -234, -235, 59, 84, 106,
	204, 121, 79, 245, -233, -46, 201, -42, -112, 140,
	207, 198, 234, -113, -111, -186, 229, 149, -74, -42,
	4, 71, 52, 72, 107, 117, 118, 132, 226, 229,
	234, 18, 59, -238, 234, 234, -238, -238, -45, 234,
	232, -46, -237, 225, 225, -101, 71, 243, -28, -30,
	-29, -62, -63, 242, 125, 89, 167, -27, -29, -214,
	-216, 186, -213, -42, -216, -59, -60, 18, 81, 288,
	-156, -49, 165, -42, -84, 284, -3, -156, 114, -42,
	-52, 114, -49, 104, 127, 127, -157, -156, -42, 114,
	-53, 114, -52, -75, 114, -74, -162, -161, -189, 4,
	-193, -195, -194, 252, 50, 60, 105, 120, 128, 130,
	136, 138, 150, 170, 172, 195, 211, 225, -137, 284,
	164, 288, 164, -42, -112, 46, -112, 284, -114, -40,
	-41, 129, 182, 232, 269, 104, 263, -56, 5, 77,
	-77, 286, 104, -230, 164, 104, 104, 104, -185, 104,
	263, 129, 182, 225, -115, -40, -41, -115, 232, -46,
	-87, -156, -74, 114, 117, -42, 114, -62, -63, -86,
	-104, -105, 139, 163, -89, 18, 81, -89, -89, 38,
	285, 285, 288, -216, -68, 284, -78, -158, -127, 277,
	-129, 275, 276, 281, 155, 264, -139, -49, -130, 9,
	284, -142, -211, -29, 90, 24, -140, -141, 198, -42,
	7, 8, 5, 6, -47, -165, -174, 237, 93, 157,
	42, -209, -210, 4, -193, -188, -166, -176, -170, -173,
	126, 50, 64, 67, 65, 68, 208, 247, 43, 92,
	173, 177, 222, 235, 236, 114, 158, 115, 48, 108,
	135, 83, 31, 33, 35, 36, 44, 45, 73, 75,
	76, 98, 122, 123, 124, 160, 185, 213, 220, 230,
	231, 253, -194, -177, -178, -171, -172, -179, -78, -84,
	277, -49, 284, -82, -123, -122, -121, 282, 286, -83,
	-147, -127, 77, -36, 189, -35, 17, 19, 84, 250,
	90, 189, 189, 90, 289, -157, -51, -49, -51, 209,
	-42, 25, 90, -38, 288, 41, 192, 90, -38, 288,
	90, 285, 288, -156, 114, 25, -136, -163, -164, -166,
	-175, -169, -173, -174, 34, 40, 39, 227, 205, 214,
	32, 122, 123, 124, 213, 31, 185, 98, 83, 76,
	75, 160, 36, 35, -177, -178, -171, -172, 73, 230,
	231, 126, 33, 45, 44, 253, 220, -229, -73, 225,
	71, -50, -42, 277, -235, -229, 25, -76, -127, 288,
	288, 137, -55, 143, 154, 112, -184, 77, -191, -183,
	-148, 9, 237, 93, 164, -190, 8, 276, -182, -189,
	5, 7, 275, -184, 77, 62, -192, 5, 4, -174,
	-148, 77, 140, 286, -187, 4, -193, -195, -194, -196,
	18, 20, 21, 22, 23, 24, 25, 26, 27, 37,
	42, 43, 47, 49, 51, 57, 59, 63, 64, 65,
	66, 67, 68, 77, 78, 80, 81, 82, 85, 87,
	89, 93, 94, 95, 101, 103, 104, 106, 109, 111,
	116, 117, 119, 125, 127, 133, 134, 139, 141, 142,
	155, 157, 163, 164, 165, 166, 167, 176, 181, 188,
	193, 204, 208, 216, 223, 225, 228, 232, 233, 237,
	242, 243, 247, 248, 254, 256, 257, 258, 259, -186,
	-232, 101, -229, -186, -186, -186, -186, 137, -186, 288,
	288, -46, -38, 288, 284, 155, -43, 114, -42, -39,
	86, 155, -86, -105, -104, -106, -127, 18, -127, -129,
	-28, -28, -28, -64, -151, -127, -213, 25, -67, -42,
	-70, 288, 104, 10, 49, 28, 275, 276, 277, 278,
	99, 279, 272, 273, 274, 271, 267, 268, 269, 55,
	144, 200, 12, 13, 14, 22, 166, 138, 264, 211,
	128, 30, 116, 25, 4, -127, -127, -127, -127, -127,
	172, -29, -127, -76, -82, -29, -135, 282, 284, -82,
	284, 5, 5, 284, -143, -127, -217, 260, 101, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 179, -181, 255, -181, -181, -167,
	284, -167, -168, 284, -167, 261, 265, 284, -70, -49,
	-123, -127, -187, 277, 288, 285, 288, 232, -102, 57,
	51, -118, 114, 51, -197, -42, 57, -198, 47, 243,
	181, 103, -102, 57, -102, 57, 57, -156, 232, 232,
	-52, -42, -120, 257, -108, -20, 284, 77, 25, -108,
	-79, -80, -159, -81, -49, 284, -42, -42, -52, -53,
	-74, -75, -12, -161, 90, -14, -20, -16, -26, -9,
	285, 288, -69, 24, -98, 284, 262, 147, 74, 113,
	146, -99, 203, 232, 288, -73, -67, -122, -121, 104,
	234, 285, 288, -41, -40, -54, 184, 215, 190, 206,
	288, 8, 7, 7, 5, -187, -231, -42, -41, -40,
	-156, -57, -58, -119, -118, -199, -200, -197, 117, 243,
	94, 90, 164, 155, 269, 90, -107, 198, 199, 288,
	-34, 26, 80, 284, 288, 285, -120, -158, -71, -154,
	-156, -29, -155, 284, -163, -74, 229, -127, -127, -127,
	-127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
	-127, -127, -127, -127, -127, -127, -127, -127, -127, 138,
	211, 30, 116, 232, 157, 155, 237, 93, 244, 81,
	161, -239, 223, 27, -133, -29, 284, -187, -139, 198,
	284, 285, 288, -76, -138, 283, -135, -76, 285, 285,
	-76, 254, 18, 81, 277, -98, 7, -146, -145, 256,
	-218, 96, 109, 284, 285, 285, -127, -93, -180, 4,
	262, 147, 74, 113, 146, 203, -94, -127, -95, -128,
	-129, 275, 276, 281, 284, 198, -96, -127, -76, -127,
	37, 134, 233, -97, -127, 104, -76, -127, -127, -127,
	-76, -76, -76, 284, 7, 7, 229, 229, 7, -120,
	285, 283, 292, -147, -35, -49, -42, -42, 155, -118,
	114, -163, -42, 284, 284, 131, 131, -42, -42, 114,
	-42, 114, -42, -42, -36, 189, -42, -42, 189, -88,
	193, -127, -88, -110, 164, -72, -49, 252, -42, 193,
	-70, 288, 269, -72, -38, -38, -156, -163, 282, 282,
	7, 232, 232, 232, 232, 284, -231, -50, -231, -40,
	-127, 241, 54, 184, -191, -98, 288, 285, 288, -43,
	117, -43, -74, -49, 90, 5, -42, -151, -14, -42,
	-85, 109, 288, 60, -92, 130, 150, 105, 136, 195,
	120, -124, 289, -150, -149, 25, -42, -29, -155, -154,
	263, -127, 232, -239, 223, -133, -127, 157, 237, 93,
	244, 81, 161, 104, 284, -128, -128, -76, 284, -76,
	-127, 283, 283, 288, 285, -63, 288, -62, -127, -76,
	-76, 285, 285, -144, -145, 85, -127, -223, 171, 284,
	284, -127, 25, 285, 104, 285, -100, 176, 285, 10,
	275, 276, 277, 278, 99, 279, 272, 273, 274, 271,
	267, 268, 269, 55, 144, 200, 12, 13, 14, 128,
	116, -128, -128, -128, -76, 284, 285, -131, -132, 104,
	101, 25, -97, -97, -97, 285, 104, -76, 288, 288,
	288, 285, 285, 285, 7, 285, 288, 285, 263, 263,
	285, -85, -127, 232, 232, 90, 155, -201, -198, -127,
	-67, 284, 284, -33, 84, 209, -103, 90, -38, 90,
	-38, 232, -102, 57, 232, -78, 193, 56, 285, 288,
	-78, -120, -80, -147, 285, 283, 7, 7, 285, 147,
	113, 146, -99, 146, -99, -99, 7, -42, -119, 284,
	-43, 284, 284, 284, -42, -39, 285, -134, 111, 38,
	-154, 130, 130, -154, -92, 130, -90, 170, -90, -90,
	-150, -187, 290, -42, 284, 285, -127, -127, -128, -128,
	104, 284, -127, -136, 22, 22, 285, -76, 285, 288,
	285, -135, 285, 254, -63, -63, -63, 5, 87, -127,
	228, -224, -42, 284, 257, -62, 285, -163, -127, -131,
	-127, -163, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, 81, 155, 161, -128, 288, -76, 285, -132, -131,
	-127, -127, -163, 285, 285, 285, -76, -127, -127, -127,
	285, 7, -134, 283, -42, -42, -118, 90, -202, 57,
	-203, 49, 155, 157, 243, 181, 47, 77, 188, 285,
	285, -67, -67, 155, 77, 155, 77, 70, 239, -42,
	-42, -49, -42, -42, -42, -78, -109, 284, 164, -20,
	-49, -88, 269, 283, 283, 285, -65, -152, -42, -212,
	284, -209, -210, -47, 284, -66, -153, -42, -57, -65,
	164, -219, 258, -127, -76, -154, -154, -91, 248, 164,
	130, -154, -160, 266, -126, -125, 102, 153, 284, -67,
	-149, 22, 22, -127, -136, 285, -127, -127, 285, -127,
	5, -127, 285, 285, 285, -127, -228, -42, -127, 285,
	285, -132, 104, 81, 161, 284, -127, 285, 285, 288,
	285, 285, 285, -219, -118, -42, -74, 157, 131, 284,
	-128, -49, -117, -236, 58, 221, 285, 285, 157, 157,
	-127, -163, -38, -38, 232, 232, 82, -67, 57, -84,
	-29, 284, 285, 288, -48, -82, 49, -48, -127, 284,
	-65, 285, 288, 285, 285, -49, -220, -222, -42, -91,
	284, -127, -154, 161, 288, 291, 269, -67, 285, -127,
	-127, 285, 285, -63, -221, 175, 285, -128, 104, 284,
	-136, 285, -127, -203, -127, -44, 284, 284, 188, -37,
	49, -42, -42, 245, 156, 285, -42, -117, -152, -34,
	-74, -34, 285, -76, 285, -153, -117, 284, 288, 25,
	-67, 224, -125, -187, 285, 285, -63, 38, -128, -136,
	285, 285, 285, -206, 145, -42, -67, -49, -32, 248,
	-74, 209, -120, -48, -63, -117, -65, -222, -224, 285,
	229, -225, 183, 199, -76, 285, -204, -207, -205, 164,
	105, 174, 212, 285, 285, -61, 284, -127, -79, -34,
	285, 285, 5, 285, -226, -227, 30, 240, 62, -127,
	-226, -205, 164, -207, 164, 245, 79, -206, -67, -120,
	-117, -227, 178, 100, 198, 178, 100, -208, 152, 192,
	41, 209, -208, -204, 285, 22, 16, 157, 77, -227,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 0, 51, 52, 53, 0, 0, 339, 0,
	0, 0, 0, 313, -2, 0, 109, 0, 271, 0,
	271, 271, 275, 0, 341, 236, 338, -2, 349, 0,
	0, 0, 347, 327, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 69,
	70, 71, 72, 73, 74, 75, 76, 0, 82, 759,
	760, 761, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 0, 92, 93, 94, 96, 97, 98,
	99, 100, 101, 102, 0, 264, 850, 277, 105, 816,
	854, 916, 866, 112, 122, 0, 922, -2, 126, 63,
	155, 156, 0, 158, 172, 0, 0, 0, 170, 0,
	0, 167, 0, 282, 270, 282, 267, 268, 269, 272,
	0, 263, 0, 340, 0, 0, 0, 235, -2, 323,
	324, -2, 0, 344, 344, 344, 0, 0, 324, 0,
	332, 840, 335, 742, 333, 0, 0, 346, 345, 0,
	328, 408, 0, 732, 369, 0, 2, 0, 902, 0,
	0, 902, 0, 0, 0, 0, 0, 414, 55, 902,
	46, 902, 728, 46, 902, 61, 0, 77, 79, 769,
	770, 771, 772, 927, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 0, 0, 0,
	0, 0, 0, 276, 106, 892, 108, 0, 111, 113,
	114, 0, 0, 0, 0, 0, 0, 125, 150, 151,
	64, 0, 0, 174, 0, 0, 0, 0, 163, 0,
	164, 0, 166, 0, 265, 278, 279, 266, 0, 274,
	46, 412, 0, 902, 763, 287, 902, -2, 0, 319,
	356, 357, 0, 0, 0, 342, 343, 0, 0, 0,
	315, 316, 0, 334, 0, 0, 372, 720, 724, 725,
	500, 0, 0, 0, 0, 0, 0, 581, 582, 583,
	0, 585, 586, 587, 897, 0, 591, 592, 916, 732,
	745, 746, 747, 748, 0, 0, 0, 753, 754, 755,
	704, 630, 601, -2, -2, 743, 438, 439, 440, 441,
	-2, 929, 605, 607, 609, 610, 611, 612, 0, 898,
	912, 913, 921, 925, 926, 902, 909, 903, 893, 900,
	908, 799, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 768, 462, 463, 468, 469, 471, 372, 370,
	409, 410, 0, 733, 711, 705, 706, 0, 0, 0,
	717, 715, 716, 23, 260, 25, 0, 260, 260, 0,
	0, 0, 0, 0, 0, 418, 0, 293, 0, 0,
	415, 0, 0, 57, 0, 44, 45, 0, 59, 0,
	0, 339, 0, 0, 902, 339, 0, 664, 424, 425,
	426, 427, 428, 497, 431, 432, 433, 434, 435, 436,
	437, 445, 446, 447, 448, 449, 450, 459, 0, 444,
	444, 444, 456, 457, 460, 461, 466, 467, 478, 479,
	481, 483, 477, 477, 477, 474, 475, 0, 89, 0,
	795, 730, 735, 738, 95, 0, 0, 0, 662, 0,
	0, 0, 117, 137, 138, 139, 118, 120, 127, 129,
	130, 131, 140, 141, 142, 143, 229, 0, 231, 153,
	154, 756, 0, 119, 121, 123, 124, 144, 145, 0,
	147, 148, 149, 0, 65, 773, 774, 775, 776, 777,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 157,
	159, 0, 171, 160, 161, 162, 169, 165, 168, 0,
	0, 273, 232, 0, 178, 0, 0, 902, 762, 284,
	0, 0, 322, 354, 355, 358, 361, 362, 359, 500,
	329, 330, 331, 350, 351, 249, 336, 0, 0, 739,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 0, 723, 504, 505, 506, 528, 529,
	0, -2, 662, 0, 588, 589, 590, 0, 0, -2,
	0, 750, 497, 0, 0, 703, 632, 0, 0, 0,
	0, 0, 0, 0, 683, 689, 0, 0, 0, 0,
	0, 0, 0, 0, 452, 465, 476, 473, 472, 454,
	0, 453, 451, 0, 455, 0, 0, 0, 418, 0,
	712, 0, 709, 710, 0, 719, 0, 0, 0, 0,
	259, 27, 902, 0, 37, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 734, 304, 0, 304, 295, 0, 0, 0, 291,
	372, 306, 308, 309, 0, 0, 416, 56, 729, 46,
	62, 46, 68, 78, 0, 80, 83, 84, 85, 86,
	81, 0, 419, 421, 429, 0, 484, 485, 486, 487,
	488, 489, 498, 0, 0, 90, 91, 736, 737, 0,
	0, 110, 0, 115, 116, 283, 0, 134, 0, 136,
	0, 230, 758, 757, 497, 66, 173, 103, 280, 281,
	413, 0, 177, 179, 181, 182, 183, 184, 763, 0,
	763, 0, 0, 0, 0, 0, 360, 363, 364, 0,
	353, 247, 248, 339, 0, 741, 366, 721, 371, 373,
	381, 397, 384, 0, 501, 502, 0, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, -2, -2, -2,
	520, 521, 522, -2, -2, -2, 526, 527, -2, 0,
	0, 714, 0, 0, 534, 0, 537, 539, 541, 0,
	0, 0, 0, 713, 551, 695, 0, 722, 536, 0,
	0, 584, 0, 0, 0, 668, 669, 0, -2, 593,
	349, 0, 0, 0, 0, 751, 0, 702, 698, 0,
	640, 0, 0, 0, 606, 608, 0, 0, 0, 672,
	673, 674, 675, 676, 677, 678, 0, 0, 0, 0,
	553, 0, 0, 0, 0, 916, 0, 662, 688, 0,
	0, 0, 0, 0, 662, 0, 694, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	411, 707, 0, 718, 26, 251, 0, 0, 0, 29,
	902, 187, 0, 0, 0, 0, 0, 262, 38, 902,
	46, 902, 46, 39, 24, 260, 250, 253, 0, 54,
	0, 417, 288, 289, 0, 0, 726, 297, 294, 0,
	418, 0, 0, 0, 58, 60, 0, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 731, 88, 107,
	663, 132, 133, 135, 128, 146, 0, 175, 0, 0,
	763, 0, 0, 0, 0, 286, 287, 352, 0, 740,
	368, 0, 0, 0, 0, 0, 0, 405, 405, 405,
	403, 397, 0, 383, 396, 0, 395, -2, 384, 0,
	0, -2, 0, 0, 0, 552, -2, 535, 538, 540,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 666, 667, 0, -2, 0, 0, 348, 349, 349,
	349, 599, 0, 0, 699, 0, 0, 600, 0, 0,
	0, 0, 0, 614, 0, 615, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 557, 0, 0, 617, 686, 687, 0,
	0, 0, 0, 0, 0, 622, 0, 693, 0, 0,
	0, 626, 627, 628, 0, 442, 0, 458, 480, 482,
	470, 368, 0, 0, 0, 0, 0, 185, 201, 0,
	0, 0, 0, 31, 0, 0, 0, 0, 35, 0,
	41, 0, 0, 0, 0, 303, 0, 302, 0, 0,
	292, 304, 307, 310, 0, 422, 0, 0, 430, 490,
	491, 492, 493, 494, 495, 496, 0, 104, 180, 0,
	0, 0, 178, 0, 0, 285, 337, 634, 0, 0,
	374, 0, 0, 0, 0, 0, 400, 404, 401, 402,
	399, 379, 0, 393, 0, 386, 503, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 696, 0, 657, 0,
	-2, 670, 594, 0, 0, 0, 0, 752, 697, 701,
	0, 638, 639, 643, 0, 0, 604, 0, 671, 680,
	681, 554, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, -2, -2, -2, 571, 572, 573, -2, -2,
	-2, 0, 0, 0, 682, 0, 0, 660, 684, 685,
	690, 691, 0, 619, 620, 621, 692, 0, 0, 0,
	464, 0, 634, 708, 255, 257, 28, 0, 186, 0,
	189, 0, 0, 192, 193, 0, 0, 0, 0, 203,
	210, 0, 0, 0, 43, 0, 0, 261, 0, 46,
	46, 252, 0, 0, 254, 290, 0, 0, 0, 296,
	727, 305, 0, 423, 420, 499, 0, 237, 246, 246,
	0, 602, 603, 0, 0, 0, 242, 244, 0, 0,
	0, 325, 0, 367, 365, 387, 0, 389, 0, 0,
	0, 391, 382, 0, 0, 377, 0, 376, 0, 0,
	385, 0, 0, -2, 0, 545, -2, -2, 656, 663,
	749, 349, 595, 597, 598, 700, 645, 642, 0, 629,
	613, 679, 0, 0, 0, 0, 663, 659, 618, 0,
	624, 625, 443, 326, 30, 0, 190, 191, 194, 0,
	196, 765, 204, 0, 207, 208, 205, 0, 32, 33,
	42, 48, 34, 40, 0, 0, 0, 0, 0, 311,
	312, 0, 210, 0, 249, 744, 0, 249, 0, 0,
	0, 200, 0, 176, 210, 0, 633, 635, 0, 388,
	0, 407, 390, 0, 0, 380, 0, 0, 394, -2,
	-2, 546, 658, 0, 349, 0, 631, -2, 0, 0,
	0, 661, 0, 188, 0, 216, 0, 0, 0, 50,
	0, 256, 258, 0, 299, 418, 301, 198, 238, 239,
	245, 240, 246, 349, 210, 243, 233, 0, 0, 0,
	0, 0, 378, 375, 392, 596, 648, 0, -2, 0,
	579, 623, 195, 221, 0, 0, 0, 212, 36, 0,
	47, 0, 300, 249, 0, 199, 0, 636, 637, 406,
	0, 0, 0, 0, 644, 580, 197, 217, 218, 0,
	213, 214, 215, 764, 209, 216, 0, 49, 418, 241,
	594, 210, 398, 641, 646, 649, -2, 869, 792, 0,
	647, 219, 0, 220, 0, 0, 0, 221, 0, 298,
	234, 0, 651, 652, 653, 654, 655, 222, 0, 225,
	226, 0, 223, 206, 211, 0, 224, 227, 228, 650,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 273, 3, 279, 274, 3,
	284, 285, 277, 275, 288, 276, 286, 278, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 292, 287,
	267, 269, 268, 3, 289, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 282, 3, 283, 272, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 290, 271, 291, 281,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 270,
	57610, 280, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:687
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:693
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:699
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 15:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:720
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 22:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 23:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:746
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:786
		{
			unimplemented()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:804
		{
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = nil
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = DropCascade
		}
	case 45:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = DropRestrict
		}
	case 46:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = DropDefault
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			unimplementedWithIssue(2473)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:859
		{
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			unimplemented()
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:863
		{
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{ /* SKIP DOC */
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{ /* SKIP DOC */
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			unimplemented()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = Low
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = Normal
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = High
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			unimplemented()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			unimplemented()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1301
		{
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = []string(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{ /* unimplemented */
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			unimplemented()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1583
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = []string(nil)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = []string(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1622
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1633
		{
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1644
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = true
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = false
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1722
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1742
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = Ascending
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = Descending
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = true
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = false
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1851
		{
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.str = ""
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.str = ""
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1946
		{
			unimplementedWithIssue(6637)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1953
		{
			unimplementedWithIssue(6637)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1995
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1999
		{
			unimplemented()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = []string(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			unimplemented()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			unimplemented()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
			unimplemented()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2254
		{
			unimplemented()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2258
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2262
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = true
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = false
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = false
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = true
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2285
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2286
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2385
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2386
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{ /* SKIP DOC */
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2527
		{
			unimplemented()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.str = astFullJoin
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.str = astLeftJoin
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.str = astRightJoin
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.str = astInnerJoin
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2715
		{
			unimplementedWithIssue(2115)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2716
		{
			unimplementedWithIssue(2115)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2719
		{
			unimplementedWithIssue(2115)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2720
		{
			unimplementedWithIssue(2115)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2721
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2729
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2785
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = nil
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2902
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2929
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2969
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3002
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3008
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3009
		{
			unimplemented()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			unimplemented()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3013
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3017
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3045
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3428
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3429
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3470
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3490
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3511
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3555
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3560
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3565
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3575
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3577
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3581
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3592
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3597
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3607
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3610
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3611
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3947
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3948
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4104
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4140
		{
			unimplemented()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = DNull
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.str = ""
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
