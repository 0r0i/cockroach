// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:275
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FETCH = 57435
const FILTER = 57436
const FIRST = 57437
const FLOAT = 57438
const FOLLOWING = 57439
const FOR = 57440
const FORCE_INDEX = 57441
const FOREIGN = 57442
const FROM = 57443
const FULL = 57444
const GRANT = 57445
const GRANTS = 57446
const GREATEST = 57447
const GROUP = 57448
const GROUPING = 57449
const HAVING = 57450
const HIGH = 57451
const HOUR = 57452
const IF = 57453
const IFNULL = 57454
const IN = 57455
const INDEX = 57456
const INDEXES = 57457
const INITIALLY = 57458
const INNER = 57459
const INSERT = 57460
const INT = 57461
const INT64 = 57462
const INTEGER = 57463
const INTERSECT = 57464
const INTERVAL = 57465
const INTO = 57466
const IS = 57467
const ISOLATION = 57468
const JOIN = 57469
const KEY = 57470
const KEYS = 57471
const LATERAL = 57472
const LEADING = 57473
const LEAST = 57474
const LEFT = 57475
const LEVEL = 57476
const LIKE = 57477
const LIMIT = 57478
const LOCAL = 57479
const LOCALTIME = 57480
const LOCALTIMESTAMP = 57481
const LOW = 57482
const LSHIFT = 57483
const MATCH = 57484
const MINUTE = 57485
const MONTH = 57486
const NAME = 57487
const NAMES = 57488
const NATURAL = 57489
const NEXT = 57490
const NO = 57491
const NO_INDEX_JOIN = 57492
const NORMAL = 57493
const NOT = 57494
const NOTHING = 57495
const NULL = 57496
const NULLIF = 57497
const NULLS = 57498
const NUMERIC = 57499
const OF = 57500
const OFF = 57501
const OFFSET = 57502
const ON = 57503
const ONLY = 57504
const OR = 57505
const ORDER = 57506
const ORDINALITY = 57507
const OUT = 57508
const OUTER = 57509
const OVER = 57510
const OVERLAPS = 57511
const OVERLAY = 57512
const PARTIAL = 57513
const PARTITION = 57514
const PLACING = 57515
const POSITION = 57516
const PRECEDING = 57517
const PRECISION = 57518
const PRIMARY = 57519
const PRIORITY = 57520
const RANGE = 57521
const READ = 57522
const REAL = 57523
const RECURSIVE = 57524
const REF = 57525
const REFERENCES = 57526
const RENAME = 57527
const REPEATABLE = 57528
const RELEASE = 57529
const RESTRICT = 57530
const RETURNING = 57531
const REVOKE = 57532
const RIGHT = 57533
const ROLLBACK = 57534
const ROLLUP = 57535
const ROW = 57536
const ROWS = 57537
const RSHIFT = 57538
const SAVEPOINT = 57539
const SEARCH = 57540
const SECOND = 57541
const SELECT = 57542
const SERIAL = 57543
const SERIALIZABLE = 57544
const SESSION = 57545
const SESSION_USER = 57546
const SET = 57547
const SHOW = 57548
const SIMILAR = 57549
const SIMPLE = 57550
const SMALLINT = 57551
const SNAPSHOT = 57552
const SOME = 57553
const SQL = 57554
const START = 57555
const STRICT = 57556
const STRING = 57557
const STORING = 57558
const SUBSTRING = 57559
const SYMMETRIC = 57560
const TABLE = 57561
const TABLES = 57562
const TEXT = 57563
const THEN = 57564
const TIME = 57565
const TIMESTAMP = 57566
const TIMESTAMPTZ = 57567
const TO = 57568
const TRAILING = 57569
const TRANSACTION = 57570
const TREAT = 57571
const TRIM = 57572
const TRUE = 57573
const TRUNCATE = 57574
const TYPE = 57575
const UNBOUNDED = 57576
const UNCOMMITTED = 57577
const UNION = 57578
const UNIQUE = 57579
const UNKNOWN = 57580
const UPDATE = 57581
const UPSERT = 57582
const USER = 57583
const USING = 57584
const VALID = 57585
const VALIDATE = 57586
const VALUE = 57587
const VALUES = 57588
const VARCHAR = 57589
const VARIADIC = 57590
const VARYING = 57591
const WHEN = 57592
const WHERE = 57593
const WINDOW = 57594
const WITH = 57595
const WITHIN = 57596
const WITHOUT = 57597
const YEAR = 57598
const ZONE = 57599
const NOT_LA = 57600
const WITH_LA = 57601
const POSTFIXOP = 57602
const UMINUS = 57603

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4405

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	280, 21,
	-2, 324,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 295,
	161, 295,
	189, 295,
	278, 295,
	280, 295,
	-2, 305,
	-1, 44,
	1, 298,
	161, 298,
	189, 298,
	278, 298,
	280, 298,
	-2, 304,
	-1, 53,
	1, 21,
	280, 21,
	-2, 324,
	-1, 242,
	1, 138,
	280, 138,
	-2, 801,
	-1, 274,
	136, 334,
	160, 334,
	-2, 301,
	-1, 277,
	136, 333,
	160, 333,
	-2, 299,
	-1, 389,
	136, 333,
	160, 333,
	-2, 302,
	-1, 445,
	277, 745,
	-2, 738,
	-1, 446,
	277, 746,
	-2, 739,
	-1, 452,
	5, 464,
	277, 464,
	-2, 883,
	-1, 474,
	5, 430,
	-2, 860,
	-1, 475,
	5, 458,
	277, 458,
	-2, 861,
	-1, 476,
	5, 438,
	-2, 862,
	-1, 477,
	5, 437,
	-2, 863,
	-1, 478,
	5, 458,
	277, 458,
	-2, 866,
	-1, 479,
	5, 458,
	277, 458,
	-2, 867,
	-1, 480,
	5, 459,
	-2, 870,
	-1, 481,
	5, 425,
	-2, 871,
	-1, 482,
	5, 425,
	-2, 872,
	-1, 483,
	5, 440,
	-2, 875,
	-1, 484,
	5, 426,
	-2, 880,
	-1, 485,
	5, 427,
	-2, 881,
	-1, 486,
	5, 428,
	-2, 882,
	-1, 487,
	5, 425,
	-2, 886,
	-1, 488,
	5, 431,
	-2, 891,
	-1, 489,
	5, 429,
	-2, 894,
	-1, 490,
	5, 456,
	277, 456,
	-2, 895,
	-1, 491,
	5, 460,
	-2, 898,
	-1, 492,
	5, 462,
	-2, 899,
	-1, 493,
	5, 455,
	277, 455,
	-2, 903,
	-1, 755,
	88, 305,
	122, 305,
	136, 305,
	160, 305,
	164, 305,
	236, 305,
	-2, 566,
	-1, 763,
	277, 723,
	-2, 712,
	-1, 963,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 497,
	-1, 964,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 498,
	-1, 965,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 499,
	-1, 969,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 503,
	-1, 970,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 504,
	-1, 971,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 505,
	-1, 974,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 510,
	-1, 1005,
	169, 636,
	-2, 639,
	-1, 1162,
	88, 305,
	122, 305,
	136, 305,
	160, 305,
	164, 305,
	236, 305,
	-2, 382,
	-1, 1170,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 511,
	-1, 1175,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 512,
	-1, 1194,
	169, 635,
	-2, 638,
	-1, 1341,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 513,
	-1, 1346,
	125, 0,
	-2, 523,
	-1, 1355,
	169, 637,
	-2, 640,
	-1, 1395,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 547,
	-1, 1396,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 548,
	-1, 1397,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 549,
	-1, 1401,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 553,
	-1, 1402,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 554,
	-1, 1403,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 555,
	-1, 1502,
	125, 0,
	-2, 524,
	-1, 1506,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 527,
	-1, 1507,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 529,
	-1, 1589,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 528,
	-1, 1590,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 530,
	-1, 1598,
	125, 0,
	-2, 556,
	-1, 1637,
	125, 0,
	-2, 557,
	-1, 1683,
	30, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 859,
}

const sqlNprod = 995
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20503

var sqlAct = [...]int{

	446, 1682, 1664, 1642, 1704, 836, 1665, 1543, 1666, 1681,
	901, 844, 1375, 1565, 1433, 1466, 506, 444, 1576, 278,
	1490, 1467, 910, 1347, 1484, 300, 713, 443, 436, 243,
	1478, 86, 758, 1159, 86, 887, 884, 1348, 31, 1158,
	87, 86, 535, 1252, 14, 494, 590, 1103, 86, 86,
	408, 1197, 86, 1251, 1018, 86, 86, 86, 1318, 1149,
	760, 86, 86, 86, 86, 845, 326, 1327, 694, 691,
	886, 512, 66, 821, 812, 1145, 1022, 990, 709, 987,
	789, 1012, 913, 1060, 86, 283, 879, 563, 548, 1057,
	285, 43, 515, 321, 20, 715, 10, 277, 793, 377,
	1109, 438, 6, 418, 283, 517, 327, 409, 507, 911,
	378, 328, 508, 545, 319, 574, 838, 419, 43, 323,
	288, 64, 68, 392, 67, 889, 316, 393, 240, 565,
	69, 73, 82, 391, 544, 318, 528, 561, 286, 312,
	1582, 537, 537, 1583, 43, 1711, 837, 282, 905, 44,
	396, 1015, 841, 1679, 1672, 1663, 1564, 905, 1505, 1658,
	1639, 296, 905, 1505, 303, 45, 1157, 282, 1633, 297,
	313, 905, 297, 267, 308, 526, 1115, 1190, 297, 1625,
	308, 324, 1564, 1616, 1192, 718, 905, 290, 1016, 1193,
	1628, 1591, 306, 275, 1505, 1586, 1573, 1563, 905, 1564,
	1564, 496, 1548, 720, 1547, 905, 49, 905, 1528, 274,
	1508, 1190, 1504, 1190, 1443, 1505, 1351, 905, 717, 1190,
	717, 1017, 1014, 719, 1308, 51, 1567, 1303, 495, 733,
	1302, 1269, 1267, 1303, 1270, 1190, 86, 86, 1266, 1265,
	1194, 1190, 1190, 1190, 1191, 906, 716, 809, 905, 1190,
	808, 542, 52, 1408, 543, 1354, 49, 1128, 810, 47,
	1147, 1130, 905, 859, 1196, 48, 540, 86, 998, 86,
	900, 86, 873, 86, 404, 51, 49, 1019, 685, 684,
	555, 451, 509, 46, 1190, 403, 510, 510, 86, 538,
	538, 554, 344, 295, 390, 51, 53, 509, 589, 86,
	384, 510, 52, 363, 1680, 1678, 1671, 1634, 49, 47,
	86, 86, 86, 1572, 86, 48, 734, 1533, 1529, 1521,
	1520, 501, 52, 1515, 1514, 1513, 389, 51, 1512, 47,
	1499, 1423, 505, 65, 1013, 48, 1418, 351, 1461, 1417,
	1416, 1358, 1336, 500, 86, 1317, 86, 1224, 352, 1240,
	1241, 1242, 1274, 840, 52, 1168, 326, 326, 1271, 1501,
	1259, 1250, 1223, 1220, 592, 86, 1218, 86, 86, 86,
	86, 735, 86, 1207, 1201, 1132, 86, 1129, 383, 766,
	995, 86, 536, 688, 1074, 46, 297, 86, 1029, 1028,
	403, 1237, 402, 1674, 502, 1377, 327, 327, 1115, 381,
	716, 328, 328, 1627, 593, 86, 1608, 1607, 86, 594,
	1600, 1579, 1570, 1562, 1540, 1526, 503, 1493, 1497, 313,
	1474, 1345, 1335, 1314, 1224, 687, 405, 297, 529, 529,
	1313, 399, 400, 1311, 1286, 275, 1285, 718, 1249, 729,
	726, 727, 728, 721, 722, 723, 724, 725, 530, 527,
	1215, 274, 718, 509, 1460, 720, 1214, 510, 1206, 1187,
	584, 283, 1243, 996, 763, 1183, 992, 794, 498, 718,
	720, 797, 1088, 1087, 1067, 719, 551, 1027, 1238, 904,
	552, 801, 787, 1224, 786, 785, 784, 720, 585, 783,
	719, 782, 781, 674, 578, 780, 678, 679, 680, 779,
	681, 677, 778, 777, 683, 86, 757, 719, 776, 775,
	774, 592, 1224, 686, 773, 764, 762, 699, 46, 86,
	698, 689, 804, 86, 697, 711, 86, 86, 301, 407,
	1588, 1587, 86, 1239, 86, 86, 1584, 86, 1088, 761,
	86, 86, 86, 1338, 326, 1337, 275, 86, 86, 275,
	275, 593, 1465, 1116, 815, 1238, 594, 806, 895, 791,
	792, 376, 705, 357, 1273, 706, 707, 1272, 734, 1169,
	854, 321, 372, 839, 861, 839, 1224, 358, 799, 771,
	1479, 795, 800, 734, 327, 837, 798, 66, 1023, 328,
	592, 1378, 1210, 790, 826, 828, 802, 1234, 1235, 1236,
	1111, 1233, 1230, 1231, 1232, 1225, 1226, 1227, 1228, 1229,
	1239, 1648, 1692, 1451, 1238, 234, 1693, 1615, 1124, 266,
	822, 265, 803, 735, 865, 260, 261, 1556, 1555, 497,
	593, 1298, 831, 43, 1278, 594, 878, 68, 735, 67,
	297, 1277, 448, 308, 818, 69, 1205, 843, 272, 848,
	1204, 767, 1203, 1071, 308, 867, 855, 308, 862, 324,
	860, 834, 863, 857, 856, 866, 853, 1202, 518, 1239,
	519, 518, 852, 519, 825, 1171, 979, 86, 1233, 1230,
	1231, 1232, 1225, 1226, 1227, 1228, 1229, 1496, 355, 86,
	86, 729, 726, 727, 728, 721, 722, 723, 724, 725,
	412, 858, 833, 1614, 985, 431, 832, 726, 727, 728,
	721, 722, 723, 724, 725, 380, 983, 518, 86, 519,
	86, 907, 1070, 1043, 356, 1224, 814, 721, 722, 723,
	724, 725, 1297, 953, 520, 61, 84, 520, 1033, 244,
	1232, 1225, 1226, 1227, 1228, 1229, 84, 57, 592, 952,
	375, 824, 989, 289, 289, 1015, 915, 299, 1023, 269,
	299, 305, 299, 718, 1545, 989, 299, 314, 299, 244,
	1225, 1226, 1227, 1228, 1229, 804, 981, 1692, 980, 62,
	804, 720, 986, 520, 1650, 882, 531, 58, 593, 346,
	1019, 1701, 1016, 594, 993, 881, 1288, 270, 883, 1668,
	1123, 719, 1104, 55, 1300, 1224, 297, 1036, 1073, 537,
	869, 823, 86, 86, 86, 273, 871, 1367, 86, 1102,
	921, 86, 1003, 379, 908, 1017, 1014, 86, 86, 86,
	86, 86, 872, 86, 86, 297, 1227, 1228, 1229, 1099,
	870, 86, 1364, 86, 1037, 999, 1004, 56, 1007, 1237,
	86, 347, 349, 1083, 1609, 982, 1238, 1085, 994, 86,
	86, 814, 984, 1052, 1108, 86, 1660, 813, 1669, 1064,
	1065, 1066, 1113, 1019, 326, 1365, 524, 1038, 1035, 283,
	1077, 1019, 1661, 523, 63, 516, 1106, 353, 1180, 898,
	899, 86, 1104, 86, 86, 521, 1118, 86, 521, 1125,
	1178, 354, 1295, 788, 1439, 1670, 86, 1596, 60, 59,
	74, 1239, 373, 86, 327, 86, 1078, 754, 1289, 328,
	941, 921, 1133, 1546, 1098, 1213, 1328, 282, 1700, 1079,
	79, 1019, 1667, 1039, 1440, 75, 1238, 1164, 1013, 354,
	1114, 244, 244, 1173, 521, 1119, 1691, 940, 1120, 1140,
	1117, 1121, 54, 283, 1689, 76, 988, 538, 1110, 1127,
	1131, 1126, 1176, 1477, 374, 1122, 1181, 1110, 71, 1707,
	78, 281, 84, 893, 299, 366, 244, 345, 387, 1138,
	1230, 1231, 1232, 1225, 1226, 1227, 1228, 1229, 343, 394,
	1034, 1239, 395, 289, 1550, 43, 1549, 1163, 1538, 1142,
	920, 1141, 977, 1167, 299, 280, 1699, 1143, 74, 1280,
	1435, 1134, 1436, 395, 1447, 299, 299, 299, 1082, 532,
	894, 941, 1524, 723, 724, 725, 696, 1195, 79, 792,
	791, 283, 297, 75, 795, 1438, 798, 811, 1450, 1177,
	1715, 690, 1441, 1363, 1643, 1449, 1179, 282, 940, 549,
	1404, 549, 77, 76, 394, 1491, 1174, 1172, 682, 1233,
	1230, 1231, 1232, 1225, 1226, 1227, 1228, 1229, 78, 556,
	244, 1539, 549, 244, 244, 244, 1186, 244, 1705, 1090,
	1188, 244, 1089, 311, 1487, 978, 84, 283, 1323, 86,
	1446, 80, 693, 1199, 1200, 1437, 704, 353, 1209, 280,
	1525, 920, 1322, 310, 386, 1224, 1492, 975, 583, 582,
	289, 576, 571, 714, 1319, 1284, 86, 1706, 1714, 279,
	1305, 1448, 1405, 560, 1146, 1148, 1026, 1599, 1406, 86,
	1523, 86, 1248, 86, 1708, 1253, 86, 1292, 1344, 1294,
	1254, 1152, 1219, 1261, 1256, 1257, 1258, 1182, 86, 1275,
	77, 86, 864, 371, 558, 1299, 1155, 86, 592, 369,
	1282, 86, 368, 86, 1304, 559, 1326, 772, 1152, 367,
	1321, 364, 1153, 1324, 1296, 309, 676, 1025, 1430, 976,
	586, 1306, 1293, 1155, 1372, 1291, 1279, 943, 1307, 80,
	1135, 896, 892, 1150, 541, 539, 1331, 534, 593, 1153,
	525, 1310, 1312, 594, 1332, 522, 1316, 695, 1557, 1693,
	299, 1325, 397, 1151, 86, 293, 902, 580, 1360, 1361,
	1362, 1329, 1330, 1559, 819, 830, 1301, 588, 299, 360,
	1154, 299, 835, 848, 1567, 3, 1238, 299, 814, 850,
	851, 587, 299, 814, 829, 299, 244, 244, 1611, 827,
	1636, 1320, 549, 714, 1357, 1381, 401, 1154, 1366, 1368,
	1369, 1629, 1385, 718, 718, 297, 842, 1379, 297, 903,
	259, 1352, 712, 70, 398, 1383, 553, 294, 86, 86,
	86, 720, 1166, 1712, 1713, 921, 86, 86, 943, 302,
	1224, 1239, 86, 1415, 86, 1411, 86, 86, 86, 86,
	361, 719, 719, 81, 86, 718, 1412, 1498, 262, 263,
	875, 874, 1444, 1445, 86, 1429, 1424, 1370, 1339, 921,
	1268, 1002, 1072, 86, 86, 1069, 921, 86, 1148, 1472,
	1476, 1068, 1472, 1409, 1425, 1020, 86, 86, 876, 1471,
	1473, 1510, 1471, 1473, 1419, 1482, 1483, 1462, 942, 1488,
	1475, 1458, 1371, 1464, 1136, 877, 765, 921, 268, 1544,
	72, 917, 1494, 1225, 1226, 1227, 1228, 1229, 675, 1503,
	1495, 1152, 577, 572, 365, 1517, 1659, 1212, 86, 1595,
	1575, 1024, 880, 770, 25, 941, 1155, 1469, 424, 1431,
	1281, 888, 595, 581, 299, 819, 1150, 570, 447, 370,
	564, 573, 1153, 1032, 1481, 499, 449, 918, 450, 919,
	796, 437, 940, 1454, 916, 322, 1151, 846, 1021, 941,
	1208, 1463, 768, 299, 423, 244, 941, 1522, 429, 428,
	1486, 86, 1000, 86, 420, 86, 1489, 1156, 350, 238,
	297, 297, 86, 239, 297, 1107, 940, 921, 1459, 942,
	897, 700, 1290, 940, 271, 1221, 1534, 941, 1050, 1042,
	1154, 86, 917, 1040, 1537, 920, 1535, 1031, 382, 511,
	847, 362, 909, 1165, 406, 708, 1673, 292, 86, 1044,
	86, 291, 885, 1568, 940, 359, 557, 1558, 86, 1552,
	1571, 1560, 1472, 868, 86, 1553, 1554, 264, 1606, 920,
	1610, 1566, 1471, 1473, 1287, 1647, 920, 50, 1578, 19,
	1581, 1485, 17, 16, 15, 13, 12, 299, 1080, 1081,
	1585, 11, 18, 819, 1139, 9, 1086, 8, 7, 24,
	23, 1594, 1091, 1092, 1094, 1096, 1097, 920, 1100, 1101,
	22, 5, 4, 1592, 2, 1, 299, 941, 1112, 0,
	1601, 1604, 0, 921, 0, 299, 86, 86, 0, 1542,
	86, 0, 0, 0, 880, 549, 0, 0, 86, 0,
	880, 1618, 0, 0, 940, 0, 1620, 0, 0, 1622,
	86, 1626, 1472, 804, 0, 592, 1619, 0, 0, 0,
	0, 0, 1471, 1473, 0, 1574, 693, 1621, 244, 299,
	0, 283, 1137, 1631, 0, 297, 1630, 921, 86, 86,
	86, 1144, 86, 410, 410, 1635, 0, 0, 1161, 0,
	299, 0, 1651, 513, 1638, 593, 0, 920, 921, 86,
	594, 1632, 718, 1654, 0, 1645, 0, 1652, 0, 0,
	0, 1649, 1657, 1655, 1653, 1472, 0, 1656, 0, 0,
	720, 86, 943, 941, 1624, 1471, 1473, 0, 0, 0,
	0, 0, 1676, 1677, 0, 0, 1439, 0, 1434, 0,
	719, 1687, 0, 1690, 1688, 86, 1432, 1694, 0, 0,
	940, 0, 1696, 0, 0, 1698, 943, 1697, 1044, 1044,
	0, 0, 0, 943, 0, 0, 1440, 1710, 1709, 0,
	0, 1695, 921, 0, 0, 0, 0, 941, 0, 0,
	0, 1184, 1185, 0, 1716, 0, 701, 703, 0, 0,
	1662, 0, 0, 710, 943, 0, 0, 1646, 941, 0,
	0, 0, 0, 920, 940, 749, 750, 751, 752, 753,
	0, 0, 0, 0, 756, 0, 1044, 1044, 1044, 425,
	32, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 734, 769, 0, 0, 0, 848, 1245,
	1246, 1247, 1435, 0, 1436, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 0, 0,
	0, 0, 0, 276, 714, 0, 284, 1438, 0, 0,
	0, 0, 941, 32, 1441, 0, 0, 0, 920, 0,
	0, 0, 0, 942, 943, 284, 0, 0, 735, 0,
	0, 299, 0, 0, 0, 0, 917, 0, 0, 940,
	0, 805, 0, 0, 1309, 0, 819, 0, 693, 0,
	0, 1315, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 299, 942, 0, 299, 1437, 0, 0,
	917, 0, 1161, 0, 0, 0, 1334, 917, 1161, 0,
	0, 0, 0, 1044, 1044, 0, 0, 0, 0, 0,
	0, 0, 920, 0, 0, 942, 0, 0, 0, 728,
	721, 722, 723, 724, 725, 0, 1342, 1343, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1376,
	943, 0, 0, 0, 0, 0, 1044, 1044, 1044, 1044,
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
	1044, 1044, 1044, 1044, 0, 1044, 0, 0, 0, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 0, 1407, 0,
	0, 0, 0, 0, 943, 942, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 819, 0, 0, 917, 0,
	0, 714, 714, 718, 0, 943, 0, 1452, 0, 1453,
	21, 299, 1455, 1456, 1457, 0, 0, 0, 0, 299,
	35, 720, 0, 0, 0, 0, 0, 1468, 0, 819,
	1468, 0, 0, 0, 0, 0, 0, 0, 299, 299,
	0, 719, 299, 37, 0, 276, 0, 0, 410, 42,
	0, 714, 1161, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 26, 0, 0, 38, 0, 943,
	0, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 1518, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 0, 1030, 0, 1041,
	0, 1051, 1053, 1058, 1061, 1062, 1063, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 734, 0, 0, 0, 0, 0,
	513, 0, 0, 0, 0, 942, 819, 0, 1536, 0,
	244, 1044, 0, 0, 0, 0, 276, 299, 917, 276,
	276, 0, 0, 0, 0, 248, 942, 0, 0, 1105,
	0, 0, 258, 0, 1541, 0, 714, 0, 40, 917,
	0, 29, 755, 39, 247, 249, 759, 0, 30, 735,
	1468, 49, 0, 299, 0, 1577, 33, 34, 0, 0,
	0, 0, 0, 299, 36, 0, 0, 0, 0, 714,
	51, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 251, 252,
	0, 0, 710, 0, 1044, 0, 0, 52, 0, 0,
	942, 0, 0, 253, 47, 0, 0, 0, 0, 0,
	48, 0, 0, 917, 0, 0, 0, 1598, 0, 0,
	0, 721, 722, 723, 724, 725, 0, 0, 46, 0,
	0, 1612, 1613, 0, 0, 1617, 0, 0, 0, 0,
	1468, 0, 0, 244, 0, 0, 0, 0, 32, 0,
	32, 0, 0, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 32, 0, 0, 0, 0, 1170, 0, 0,
	1044, 1175, 1224, 0, 1240, 1241, 1242, 0, 0, 0,
	0, 0, 0, 1644, 714, 299, 0, 244, 0, 0,
	1189, 0, 0, 1637, 254, 0, 0, 255, 0, 0,
	1198, 0, 256, 1468, 1577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1211, 1237, 0, 718, 1216,
	736, 737, 738, 0, 0, 0, 299, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 720, 0, 745, 0,
	756, 0, 0, 0, 0, 0, 1058, 1058, 1058, 0,
	714, 0, 0, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 1276, 0,
	0, 0, 0, 0, 0, 1244, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 0, 1243, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 1238, 0, 410, 0, 0, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 744, 736, 737, 738, 912, 0, 0,
	0, 0, 0, 741, 739, 0, 0, 0, 0, 734,
	720, 0, 745, 0, 0, 0, 0, 0, 1239, 0,
	0, 1340, 0, 1341, 0, 0, 991, 0, 0, 0,
	719, 740, 0, 0, 1346, 0, 733, 0, 0, 0,
	0, 0, 1356, 0, 0, 0, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1373, 0, 735, 0, 0, 0, 0, 0,
	0, 1382, 0, 0, 1384, 743, 0, 0, 0, 0,
	0, 0, 1234, 1235, 1236, 0, 1233, 1230, 1231, 1232,
	1225, 1226, 1227, 1228, 1229, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 1414, 744, 0, 0,
	0, 0, 0, 0, 1420, 1421, 1422, 741, 0, 0,
	284, 0, 0, 734, 0, 0, 742, 0, 730, 731,
	732, 0, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 0, 0, 0, 1075, 740, 0, 0, 0, 0,
	0, 0, 410, 1076, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 736, 737, 738, 0, 0, 0, 0,
	0, 1480, 0, 739, 0, 0, 0, 0, 735, 720,
	0, 745, 0, 0, 32, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 1162, 0, 1502, 0, 0, 719,
	0, 1506, 1507, 0, 0, 733, 1509, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 730, 731, 732, 0, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 0, 0, 0, 991, 0,
	1527, 0, 0, 1530, 746, 0, 0, 0, 0, 0,
	0, 718, 755, 736, 737, 738, 744, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 741, 0, 0, 720,
	0, 745, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 1551, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 740, 733, 0, 0, 0, 0,
	0, 0, 1569, 0, 0, 0, 0, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1580, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 1589, 1590, 0, 0, 0, 718, 743, 736,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 746, 720, 0, 745, 0, 0,
	0, 0, 1603, 0, 0, 0, 744, 1224, 0, 1240,
	1241, 1242, 1605, 0, 0, 719, 741, 0, 0, 1500,
	0, 733, 734, 0, 0, 0, 0, 0, 0, 742,
	0, 730, 731, 732, 513, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 740, 0, 0, 912, 0, 0,
	912, 1237, 1264, 0, 0, 718, 0, 736, 737, 738,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 0, 720, 0, 745, 0, 735, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 718, 743, 736,
	737, 738, 744, 719, 0, 0, 0, 0, 0, 733,
	0, 0, 741, 0, 0, 720, 0, 745, 734, 0,
	0, 0, 1224, 0, 1240, 1241, 1242, 0, 0, 0,
	1675, 0, 1243, 0, 0, 719, 0, 0, 0, 0,
	740, 733, 1686, 1686, 0, 0, 0, 0, 1238, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 0, 1686, 1237, 0, 746, 0,
	0, 0, 1263, 735, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 1686, 0, 734, 0, 0, 0,
	746, 0, 0, 1239, 0, 0, 0, 0, 0, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 912, 912, 0, 742, 912, 730, 731, 732,
	0, 729, 726, 727, 728, 721, 722, 723, 724, 725,
	0, 735, 0, 1238, 0, 0, 0, 0, 1262, 0,
	0, 0, 743, 0, 0, 0, 0, 1234, 1235, 1236,
	0, 1233, 1230, 1231, 1232, 1225, 1226, 1227, 1228, 1229,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 0,
	0, 0, 0, 742, 0, 730, 731, 732, 0, 729,
	726, 727, 728, 721, 722, 723, 724, 725, 0, 0,
	0, 0, 0, 1641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 721, 722, 723, 724, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1234, 1235, 1236, 1561, 1233, 1230, 1231, 1232,
	1225, 1226, 1227, 1228, 1229, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 88, 89, 596, 90, 597, 598, 599, 600, 601,
	602, 603, 604, 91, 92, 189, 190, 191, 93, 192,
	193, 605, 94, 194, 195, 95, 606, 607, 196, 197,
	198, 608, 199, 609, 330, 610, 96, 97, 98, 0,
	99, 611, 100, 612, 331, 101, 102, 613, 614, 615,
	616, 617, 618, 103, 104, 105, 106, 200, 107, 201,
	202, 619, 620, 108, 621, 622, 623, 109, 110, 624,
	111, 625, 755, 626, 203, 112, 204, 627, 628, 113,
	114, 205, 115, 629, 116, 630, 631, 332, 632, 117,
	206, 633, 207, 634, 118, 119, 208, 209, 635, 636,
	120, 637, 333, 121, 210, 211, 212, 638, 213, 639,
	334, 122, 335, 123, 124, 640, 641, 214, 336, 125,
	337, 642, 126, 643, 644, 127, 0, 128, 129, 130,
	131, 132, 338, 133, 134, 137, 135, 645, 136, 646,
	215, 138, 216, 139, 140, 647, 648, 649, 650, 651,
	141, 217, 339, 142, 340, 218, 143, 144, 652, 219,
	145, 220, 653, 146, 147, 148, 221, 149, 150, 654,
	152, 153, 151, 154, 655, 155, 341, 156, 157, 222,
	158, 0, 245, 159, 160, 656, 223, 161, 162, 657,
	163, 164, 342, 165, 224, 166, 658, 167, 168, 170,
	225, 169, 226, 659, 660, 171, 172, 661, 227, 228,
	229, 662, 663, 173, 230, 231, 664, 174, 175, 176,
	177, 665, 666, 178, 179, 180, 667, 668, 181, 182,
	183, 232, 233, 669, 184, 670, 671, 672, 673, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 88,
	89, 596, 90, 597, 598, 599, 600, 601, 602, 603,
	604, 91, 92, 189, 190, 191, 93, 192, 193, 605,
	94, 194, 195, 95, 606, 607, 196, 197, 198, 608,
	199, 609, 330, 610, 96, 97, 98, 0, 99, 611,
	100, 612, 331, 101, 102, 613, 614, 615, 616, 617,
	618, 103, 104, 105, 106, 200, 107, 201, 202, 619,
	620, 108, 621, 622, 623, 109, 110, 624, 111, 625,
	0, 626, 203, 112, 204, 627, 628, 113, 114, 205,
	115, 629, 116, 630, 631, 332, 632, 117, 206, 633,
	207, 634, 118, 119, 208, 209, 635, 636, 120, 637,
	333, 121, 210, 211, 212, 638, 213, 639, 334, 122,
	335, 123, 124, 640, 641, 214, 336, 125, 337, 642,
	126, 643, 644, 127, 0, 128, 129, 130, 131, 132,
	338, 133, 134, 137, 135, 645, 136, 646, 215, 138,
	216, 139, 140, 647, 648, 649, 650, 651, 141, 217,
	339, 142, 340, 218, 143, 144, 652, 219, 145, 220,
	653, 146, 147, 148, 221, 149, 150, 654, 152, 153,
	151, 154, 655, 155, 341, 156, 157, 222, 158, 0,
	245, 159, 160, 656, 223, 161, 162, 657, 163, 164,
	342, 165, 224, 166, 658, 167, 168, 170, 225, 169,
	226, 659, 660, 171, 172, 661, 227, 228, 229, 662,
	663, 173, 230, 231, 664, 174, 175, 176, 177, 665,
	666, 178, 179, 180, 667, 668, 181, 182, 183, 232,
	233, 669, 184, 670, 671, 672, 673, 185, 186, 187,
	188, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 807, 88, 89, 596, 90, 597, 598,
	599, 600, 601, 602, 603, 604, 91, 92, 189, 190,
	191, 93, 192, 193, 605, 94, 194, 195, 95, 606,
	607, 196, 197, 198, 608, 199, 609, 330, 610, 96,
	97, 98, 0, 99, 611, 100, 612, 331, 101, 102,
	613, 614, 615, 616, 617, 618, 103, 104, 105, 106,
	200, 107, 201, 202, 619, 620, 108, 621, 622, 623,
	109, 110, 624, 111, 625, 0, 626, 203, 112, 204,
	627, 628, 113, 114, 205, 115, 629, 116, 630, 631,
	332, 632, 117, 206, 633, 207, 634, 118, 119, 208,
	209, 635, 636, 120, 637, 333, 121, 210, 211, 212,
	638, 213, 639, 334, 122, 335, 123, 124, 640, 641,
	214, 336, 125, 337, 642, 126, 643, 644, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	645, 136, 646, 215, 138, 216, 139, 140, 647, 648,
	649, 650, 651, 141, 217, 339, 142, 340, 218, 143,
	144, 652, 219, 145, 220, 653, 146, 147, 148, 221,
	149, 150, 654, 152, 153, 151, 154, 655, 155, 341,
	156, 157, 222, 158, 0, 245, 159, 160, 656, 223,
	161, 162, 657, 163, 164, 342, 165, 224, 166, 658,
	167, 168, 170, 225, 169, 226, 659, 660, 171, 172,
	661, 227, 228, 229, 662, 663, 173, 230, 231, 664,
	174, 175, 176, 177, 665, 666, 178, 179, 180, 667,
	668, 181, 182, 183, 232, 233, 669, 184, 670, 671,
	672, 673, 185, 186, 187, 188, 445, 434, 435, 432,
	433, 421, 0, 0, 0, 0, 0, 0, 88, 89,
	1009, 90, 0, 0, 0, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 1010, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	1008, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 1011, 0, 88, 89, 415, 90, 0, 422,
	1006, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 514, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 49, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 51, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 329, 493, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 417, 48, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 49, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 51, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	329, 493, 0, 184, 0, 0, 0, 47, 185, 186,
	187, 188, 417, 48, 445, 434, 435, 432, 433, 421,
	0, 0, 413, 414, 0, 0, 88, 89, 415, 90,
	0, 422, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 1054, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 115, 0, 116,
	0, 1059, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 1055, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 1056, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 0, 0,
	427, 0, 0, 0, 91, 92, 189, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 0, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	113, 114, 483, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 445, 434, 435, 432,
	433, 421, 0, 0, 413, 414, 0, 0, 88, 89,
	415, 90, 0, 422, 1410, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	1353, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 1005, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 414, 0, 0, 0, 0, 415, 761,
	1001, 422, 445, 434, 435, 432, 433, 421, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 411, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 1359, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 417, 0, 445, 434, 435, 432, 433, 421,
	0, 0, 413, 414, 0, 0, 88, 89, 415, 90,
	0, 422, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 514, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 0, 0,
	427, 0, 0, 0, 91, 92, 189, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 0, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	113, 114, 483, 115, 0, 116, 0, 1059, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 414, 0, 0, 0, 0,
	415, 0, 0, 422, 445, 434, 435, 432, 433, 421,
	0, 0, 0, 0, 0, 0, 88, 89, 702, 90,
	0, 0, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 0, 0,
	427, 0, 0, 0, 91, 92, 189, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 1685, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 0, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	113, 114, 483, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	1684, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 445, 434, 435, 432,
	433, 421, 0, 0, 413, 414, 0, 0, 88, 89,
	415, 90, 0, 422, 0, 0, 427, 0, 0, 0,
	91, 92, 1683, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 1685, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 1684, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 0, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 1049, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 445, 434, 435, 432, 433, 421, 0, 0,
	0, 0, 1045, 1046, 88, 89, 0, 90, 1047, 0,
	0, 1048, 427, 0, 0, 0, 91, 92, 0, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 1685,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 0, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 0, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 1684, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 414, 88, 89,
	0, 90, 415, 0, 0, 422, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 460, 196, 197, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 461, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 210, 211, 212, 0, 213, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 0, 136, 0, 468, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 464,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 465, 466, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 233,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 1470,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 330, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 332, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 333, 121, 210, 211, 212, 0, 213,
	0, 334, 122, 335, 123, 124, 0, 0, 214, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 49, 223, 161, 162,
	0, 163, 164, 342, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 51, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 329, 233, 0, 184, 0, 0, 0, 47,
	185, 186, 187, 188, 0, 48, 325, 575, 0, 576,
	571, 566, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 46, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 330, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 579, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 568, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 332, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 333,
	121, 210, 211, 212, 0, 213, 0, 334, 122, 335,
	123, 124, 0, 0, 214, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 569, 0, 0, 0, 141, 217, 339,
	142, 340, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 342,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 567, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	325, 575, 0, 576, 571, 566, 0, 0, 0, 0,
	577, 572, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 330, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 562, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 568, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 332, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 333, 121, 210, 211, 212, 0, 213,
	0, 334, 122, 335, 123, 124, 0, 0, 214, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 569, 0, 0,
	0, 141, 217, 339, 142, 340, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 342, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 567, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 325, 575, 0, 576, 571, 566,
	0, 0, 0, 0, 577, 572, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 568, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 332, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 333, 121, 210,
	211, 212, 0, 213, 0, 334, 122, 335, 123, 124,
	0, 0, 214, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 569, 0, 0, 0, 141, 217, 339, 142, 340,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 342, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 567, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 577, 572,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 298, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 49, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 51, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	329, 233, 0, 184, 0, 0, 0, 47, 185, 186,
	187, 188, 85, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 914, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 49, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 51, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 329, 233, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 85, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 46, 0, 1160, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	403, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 298, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 914, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 849, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 1377, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 504, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 547, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 546, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 550, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 325, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 550, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 332, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 333, 121, 210,
	211, 212, 0, 213, 0, 334, 122, 335, 123, 124,
	0, 0, 214, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 342, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	822, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	820, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 825, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 890, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 824, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 891, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 822, 199, 0, 0, 817, 96,
	97, 98, 0, 99, 820, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 825, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 816,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 824, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 823, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 1160, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 298, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 304, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 298, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 1095,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 1093, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 1084, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 692, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 83, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 533, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 0, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 388, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 385, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 348, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 242, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 241, 228, 229, 0, 0, 237, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	242, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 241, 228, 229,
	0, 0, 237, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 320,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 317, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 315, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 307, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 287, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 235, 0, 0, 127, 0,
	128, 129, 130, 131, 242, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 236, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 241, 228, 229, 0, 0, 237, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 0, 0, 219, 145, 220, 0,
	146, 0, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 0, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	718, 184, 736, 737, 738, 0, 185, 186, 187, 188,
	0, 0, 739, 0, 0, 0, 0, 0, 720, 718,
	745, 736, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 720, 719, 745,
	0, 0, 0, 0, 733, 0, 718, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 719, 739, 0,
	0, 0, 0, 733, 720, 0, 745, 718, 0, 736,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 719, 720, 0, 745, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 719, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 744, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 741, 0, 0, 0, 0,
	0, 734, 0, 0, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 746,
	734, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 741, 740, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 744, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 743, 734, 740,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 735, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 0, 743, 0, 0, 742, 1640, 730,
	731, 732, 0, 729, 726, 727, 728, 721, 722, 723,
	724, 725, 0, 0, 0, 0, 0, 1623, 0, 0,
	0, 0, 0, 0, 742, 0, 730, 731, 732, 0,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 0,
	0, 0, 0, 0, 1602, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 721, 722, 723, 724, 725,
	718, 0, 736, 737, 738, 1597, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 720, 718,
	745, 736, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 720, 719, 745,
	0, 0, 0, 0, 733, 0, 718, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 719, 739, 0,
	0, 0, 0, 733, 720, 0, 745, 718, 0, 736,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 719, 720, 0, 745, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 719, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 744, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 741, 0, 0, 0, 0,
	0, 734, 0, 0, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 746,
	734, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 741, 740, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 744, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 743, 734, 740,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 735, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 0, 743, 0, 0, 742, 1593, 730,
	731, 732, 0, 729, 726, 727, 728, 721, 722, 723,
	724, 725, 0, 0, 0, 0, 0, 1532, 0, 0,
	0, 0, 0, 0, 742, 0, 730, 731, 732, 0,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 0,
	0, 0, 0, 0, 1531, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 721, 722, 723, 724, 725,
	718, 0, 736, 737, 738, 1442, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 720, 718,
	745, 736, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 720, 719, 745,
	0, 0, 0, 0, 733, 0, 718, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 719, 739, 0,
	0, 0, 0, 733, 720, 0, 745, 718, 0, 736,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 719, 720, 0, 745, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 719, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 744, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 741, 0, 0, 0, 0,
	0, 734, 0, 0, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 746,
	734, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 741, 740, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 744, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 743, 734, 740,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 735, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 0, 743, 0, 0, 742, 1380, 730,
	731, 732, 0, 729, 726, 727, 728, 721, 722, 723,
	724, 725, 0, 0, 0, 0, 0, 1355, 0, 0,
	0, 0, 0, 0, 742, 0, 730, 731, 732, 0,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 0,
	0, 0, 0, 0, 997, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 721, 722, 723, 724, 725,
	0, 0, 718, 1426, 736, 737, 738, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 0,
	720, 718, 745, 736, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 720,
	719, 745, 0, 0, 0, 0, 733, 0, 0, 0,
	718, 0, 736, 737, 738, 0, 0, 0, 0, 719,
	0, 0, 739, 0, 0, 733, 902, 0, 720, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 1703,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 1254,
	0, 0, 1253, 0, 0, 0, 0, 744, 0, 903,
	0, 0, 0, 0, 746, 0, 0, 741, 0, 0,
	0, 0, 0, 734, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 734, 746, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 1702, 0, 0,
	0, 0, 0, 0, 740, 741, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 740, 0, 748, 0, 735, 0, 0,
	0, 718, 0, 736, 737, 738, 0, 0, 743, 0,
	0, 0, 0, 739, 0, 0, 747, 0, 0, 720,
	0, 745, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 719,
	742, 0, 730, 731, 732, 733, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 0, 0, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 0, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 0, 746, 0, 0, 0, 0, 0,
	0, 718, 0, 736, 737, 738, 744, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 741, 0, 0, 720,
	0, 745, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 740, 733, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 736, 737, 738, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 720, 0, 745, 0, 0, 0, 735, 0, 0,
	718, 0, 736, 737, 738, 0, 0, 0, 743, 0,
	0, 719, 739, 0, 0, 0, 0, 733, 720, 0,
	745, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 719, 0,
	0, 0, 0, 0, 733, 0, 741, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 740, 282, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 1260, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 746, 734, 0, 0, 735, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 741, 740, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	743, 730, 731, 732, 0, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 0, 1374, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 718, 0,
	736, 737, 738, 0, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 1255, 0, 0, 720, 0, 745, 0,
	0, 742, 0, 730, 731, 732, 0, 729, 726, 727,
	728, 721, 722, 723, 724, 725, 719, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 0, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 0, 0, 718, 0, 736, 737, 738,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 0, 720, 718, 745, 736, 737, 738, 0,
	0, 0, 0, 0, 0, 0, 739, 0, 0, 1217,
	0, 746, 720, 719, 745, 0, 0, 0, 0, 733,
	0, 0, 0, 744, 718, 0, 736, 737, 738, 0,
	0, 0, 719, 741, 0, 0, 739, 0, 733, 734,
	0, 0, 720, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 740, 719, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 718, 0, 736, 737, 738, 746, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	744, 720, 0, 745, 735, 0, 0, 746, 0, 0,
	741, 0, 0, 0, 0, 743, 734, 0, 0, 744,
	0, 719, 0, 0, 0, 0, 0, 733, 0, 741,
	0, 0, 0, 0, 0, 734, 0, 746, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 744,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 741,
	0, 0, 0, 0, 0, 734, 742, 0, 730, 731,
	732, 735, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 0, 743, 0, 0, 0, 746, 740, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 743, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 742, 0, 730, 731, 732, 0, 729,
	726, 727, 728, 721, 722, 723, 724, 725, 0, 0,
	0, 0, 742, 0, 730, 731, 732, 0, 729, 726,
	727, 728, 721, 722, 723, 724, 725, 0, 0, 735,
	0, 1224, 0, 1240, 1241, 1242, 0, 0, 0, 0,
	743, 0, 742, 1350, 730, 731, 732, 0, 729, 726,
	727, 728, 721, 722, 723, 724, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	736, 737, 738, 0, 0, 1237, 0, 0, 0, 0,
	0, 1224, 0, 1240, 1241, 1242, 720, 0, 745, 0,
	0, 742, 0, 730, 731, 732, 0, 729, 726, 727,
	728, 721, 722, 723, 724, 725, 719, 0, 0, 0,
	0, 1224, 733, 1240, 1241, 1242, 0, 0, 0, 0,
	0, 0, 0, 1349, 0, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1243, 0, 718, 0,
	0, 0, 0, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 1238, 0, 0, 0, 720, 0, 745, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 719, 0, 0, 0,
	0, 0, 733, 741, 0, 0, 1243, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1238, 0, 0, 0, 0, 1239, 0, 0,
	0, 0, 0, 0, 0, 0, 1243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1238, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 1239, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 734,
	0, 1234, 1235, 1236, 0, 1233, 1230, 1231, 1232, 1225,
	1226, 1227, 1228, 1229, 0, 0, 0, 1239, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 730, 731,
	732, 0, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 1234, 1235, 1236, 735, 1233, 1230, 1231, 1232, 1225,
	1226, 1227, 1228, 1229, 0, 743, 931, 947, 922, 939,
	938, 0, 0, 924, 923, 0, 0, 0, 949, 948,
	0, 1234, 1235, 1236, 0, 1233, 1230, 1231, 1232, 1225,
	1226, 1227, 1228, 1229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 936,
	935, 0, 0, 0, 0, 0, 742, 934, 0, 0,
	0, 0, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 928, 929, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 925, 0, 0, 945,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950,
}
var sqlPact = [...]int{

	1981, -1000, 16, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 733, -1000, -1000, -1000, 669, 665, 56, 950, 950,
	14854, -1000, -1000, 17538, 2104, 397, 398, 397, 397, 393,
	14854, 540, 578, 108, -1000, 883, 6, 17294, 13634, 1197,
	12, 13146, 251, 1981, 13390, 13634, 17050, 1074, 979, 959,
	13146, 16806, 16562, 16318, -1000, 8896, -1000, -1000, -1000, -1000,
	827, -1000, 11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 816, -1000, 13634, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16074, 15830, 761, -1000, -1000,
	462, 320, 1224, -1000, 24, -1000, -1000, -1000, 1070, -1000,
	814, 1068, 1061, 1058, 1052, 315, 786, -1000, 531, 761,
	-1000, 761, -1000, -1000, -1000, 489, 14854, -1000, 13146, -1000,
	15586, 990, 15342, -1000, 883, -1000, -1000, -1000, 853, 1194,
	1194, 1194, 1219, 114, 112, 108, -7, 13634, -1000, 252,
	-7, 6068, 6068, -1000, -1000, 251, -1000, 124, 11428, 22,
	-1000, 6580, -1000, 700, 1116, 698, 691, 1111, -107, 13146,
	13634, 13634, 581, 15098, -1000, 1108, 101, 1106, -1000, -15,
	1105, -1000, -27, -1000, -1000, -1000, -1000, -1000, -1000, 251,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11682, 852, 11682, -1000, -1000, 1251, -1000,
	-1000, 10, -1, 935, 1014, 9406, 9152, 1156, 1104, -1000,
	-1000, -1000, 19, 3748, 13634, 1078, 11682, 13634, 13634, 13634,
	-1000, 13634, -1000, 924, -1000, 13634, -1000, -2, -3, -1000,
	14854, -1000, 102, -1000, 244, 889, 14610, 1122, 874, -1000,
	853, -1000, 832, 918, 7110, 7878, 108, -1000, -1000, 108,
	108, 7878, -1000, -1000, 13634, -7, 1247, 13634, 119, -1000,
	19221, -1000, -1000, 7878, 7878, 7878, 7878, 7878, 748, -1000,
	-1000, -1000, 4514, -1000, -1000, 22, 241, 264, -1000, -1000,
	239, 22, -1000, -1000, -1000, -1000, 238, 1351, 374, -1000,
	-1000, -1000, 7878, 325, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1069, 237, 233, -1000, -1000, -1000, -1000,
	232, 231, 226, 225, 222, 218, 215, 214, 212, 209,
	208, 207, 205, 727, -1000, 344, -1000, -1000, 344, 344,
	-1000, 190, 190, 194, -1000, -1000, -1000, 190, -1000, -1000,
	-1000, 323, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 204,
	119, -1000, -1000, -1000, 13634, 22, -1000, -1000, -1000, 7878,
	3493, -31, -1000, 19724, -1000, -23, 811, -1000, 12658, 1193,
	1188, 1169, 13146, 480, 476, 13634, 13634, 334, 76, 1241,
	76, 10920, -1000, 13634, 13634, -1000, 13634, -1000, -1000, 13634,
	13634, 13634, 6, 12170, 475, -18, 11926, 13634, -1000, 8,
	-1000, -1000, 1051, 396, 723, 971, 630, -1000, -1000, -1000,
	-1000, -9, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1303, -1000, -1000, -1000, -1000, 1331, -9, -1000,
	-1000, -1000, -1000, -1000, 1350, -1000, -1000, -1000, -1000, 3748,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13634, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 723, 971, -1000, -1000, 13146, 12414,
	1103, 812, 868, -1000, -1000, 296, 1102, -1000, -1000, -1000,
	-1000, 19724, -1000, 19724, 695, 977, -1000, 977, -11, -1000,
	19060, -1000, 202, -33, -1000, 334, 6068, 10666, 20255, 13634,
	510, 7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878,
	7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878,
	7878, 7878, 972, 450, 624, 738, 189, 3748, -1000, 1295,
	1295, 1295, 19998, 19998, 186, 7, 18726, -13, 22, -1000,
	-1000, 5794, 5538, 22, 4002, -1000, 682, 1328, 338, 19724,
	1083, 1020, 200, 111, 110, 7878, 734, 7878, 8134, 7878,
	7878, 4770, 7878, 7878, 7878, 7878, 7878, 7878, -1000, 197,
	-1000, -1000, -1000, -1000, 1324, -1000, -1000, 1318, -1000, 499,
	430, 1315, 334, 106, -1000, 2338, -1000, -1000, 6580, -1000,
	651, 13634, 13634, 13634, -1000, -1000, 866, 14366, -1000, 20255,
	13634, -1000, 196, 195, 954, 951, 13634, 13634, 14122, 13878,
	13634, 654, 13634, 13634, 634, -1000, 613, 7878, 703, -1000,
	10158, 354, 13634, 683, 117, -1000, -1000, -1000, 291, 13634,
	-1000, -1000, -1000, 101, -1000, -15, -1000, -1000, 13634, 11926,
	-18, -19, -1000, -1000, 13634, 971, -1000, -1000, -1000, 565,
	-1000, 719, -1000, 9660, -1000, -1000, -1000, 682, -1000, -24,
	-1000, -1000, -1000, -1000, 99, -20, -1000, -1000, -1000, -1000,
	13634, 261, 13634, 13634, 1101, 1349, 13634, -1000, -1000, -1000,
	7878, -1000, -1000, -1000, 6, 13634, -1000, 1018, -1000, -21,
	1066, -116, 12902, -1000, 9904, -1000, 1258, -1000, -1000, -1000,
	-1000, 78, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 194, 727, 190, 190, 190, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 323, -1000, 344, 344, 344,
	-1000, -1000, -1000, 312, 753, 753, 1253, 1253, 1253, 1622,
	1622, 1983, 442, 20078, 20078, 20078, 427, 459, 459, 20078,
	20078, 20078, 19998, 19773, 175, 7878, 449, 725, 189, 7878,
	-1000, 808, -1000, -1000, -1000, 1046, 188, 8134, 8134, -1000,
	-1000, -1000, 4514, -1000, -1000, 182, 7878, -1000, 7878, -32,
	-92, -1000, 19724, -1000, -38, -1000, -1000, -17, 7878, 7878,
	7878, 96, -1000, 441, -1000, 426, 424, 420, -1000, 181,
	95, 508, -1000, 7878, 757, 179, 173, 7878, -1000, -1000,
	19694, 88, 1041, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	85, 19675, 84, 2292, -1000, 8134, 8134, 8134, 4514, 161,
	83, 19031, -104, 19608, 6836, 6836, 6836, 82, 19410, 7878,
	-104, 2817, 2731, 2621, -39, -40, -46, 1313, -47, 80,
	310, 307, 74, 1018, -1000, -1000, 7878, -1000, -1000, -1000,
	415, 408, 1097, -1000, 857, -1000, 574, 7878, 13634, 159,
	157, 713, -1000, 1096, 769, 1093, 769, -1000, -23, 676,
	-1000, -1000, 405, -1000, 6068, 19724, -1000, 615, 1171, -48,
	-1000, -1000, -1000, 6068, 334, 10920, 6580, -54, -1000, -24,
	-1000, -24, -1000, -1000, -1000, -1000, -1000, -1000, 13634, -1000,
	12414, 156, 13634, 153, 146, 13634, -1000, 1122, -1000, 67,
	-1000, -1000, -1000, -1000, -1000, 1006, 1214, 10666, 975, 961,
	10666, 1039, 759, 759, 759, -1000, 12902, 3225, -1000, -1000,
	13634, 145, 10412, 64, 1066, 270, 268, -1000, 1311, 7878,
	175, 7878, 8134, 8134, -1000, 175, -1000, -1000, -1000, -1000,
	1037, 144, 7878, 20255, 20041, 19961, -62, 5282, -26, 18699,
	7878, -1000, -1000, 264, -1000, 63, 6324, -1000, 19331, 3,
	3, -1000, 899, 732, 674, 591, 1310, 1347, 1098, -1000,
	7878, 19383, -1000, 11174, 340, 763, 18680, 20255, -1000, 7878,
	-1000, 1034, 7878, -1000, 20255, 8134, 8134, 8134, 8134, 8134,
	8134, 8134, 8134, 8134, 8134, 8134, 8134, 8134, 8134, 8134,
	8134, 8134, 8134, 970, 8134, 1280, 1280, 1280, -28, 5026,
	-1000, 1042, 1034, 7878, 7878, 20255, 62, 61, 58, -1000,
	7878, -104, 7878, 7878, 7878, -1000, -1000, -1000, 53, -1000,
	1309, -1000, -1000, -1000, -1000, 1006, 18747, 13634, 13634, 13634,
	1089, 1620, -1000, 18417, -64, 13634, 13634, -1000, 938, 969,
	380, 13634, -1000, 13634, -1000, 13634, 13634, 13634, 13634, -35,
	6068, 177, 6, 13634, -35, 613, -1000, -1000, 290, -1000,
	-1000, 8642, 143, 12414, 8642, 802, -1000, -1000, 328, 7878,
	7878, 1066, 10666, 10666, 1269, 957, 10666, -1000, -1000, -1000,
	-1000, -1000, -1000, 956, 140, 13634, 12902, 411, 1300, 52,
	1254, 175, 2847, 337, 7878, 20255, 2927, -66, -1000, 7878,
	7878, -1000, -68, -1000, 7878, -1000, 19724, -1000, 1336, 7878,
	50, 47, 46, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45, -1000, -1000, 19724, 7878, -1000, -1000, 17782, 7878, 42,
	-1000, 41, 19724, 1042, 19724, -1000, 566, 566, 1280, 1280,
	1280, 473, 473, 1095, 715, 795, 795, 795, 414, 502,
	502, 795, 795, 795, 1029, 942, 138, 20011, 7878, -70,
	-1000, -1000, -1000, 19724, 19724, 40, -1000, -1000, -1000, -104,
	2452, 18396, 18369, -1000, 39, 328, -1000, -1000, -1000, -1000,
	13634, -1000, 13634, -1000, 13634, 844, -1000, -1000, 943, 137,
	8134, 13634, -1000, 707, -74, -76, 842, -1000, 840, 7878,
	-1000, 20255, 769, 769, -1000, 402, 401, -1000, -35, 1127,
	13634, 1167, -1000, -1000, -1000, 136, -81, -1000, 178, 1186,
	7878, -1000, -1000, 135, 8642, 35, -82, 13634, -1000, 13634,
	19724, -104, -1000, 1269, -1000, 134, 7878, 10666, -1000, -141,
	-1000, 274, -1000, 13634, -83, -1000, -1000, 255, 254, -1000,
	7878, 7878, 2927, -87, -1000, 20255, 175, 175, -1000, 18350,
	-1000, 19331, -1000, -1000, -1000, -1000, 19724, 735, -1000, 18087,
	-1000, -1000, -1000, 8134, 1026, 133, 20255, 18066, -1000, -1000,
	7878, -1000, -1000, -1000, -1000, -1000, 858, -1000, -1000, -1000,
	7878, 20011, 130, -1000, 129, -1000, -1000, -1000, 670, -1000,
	-1000, 19724, 1200, -1000, -1000, 13634, 13634, 464, -95, 13634,
	-1000, -1000, 4258, 707, 8642, 1190, 22, 13634, 1190, 18039,
	4002, -99, -1000, 707, 126, -91, -1000, 1236, -1000, 13634,
	19724, -1000, 956, -1000, 3748, -110, -1000, -1000, -1000, 175,
	175, -1000, -1000, -1000, 29, 763, 1213, -1000, 2952, 8134,
	20255, -118, -1000, 18020, -1000, 2895, 902, 13634, 13634, 13634,
	369, 13634, -1000, -1000, 579, -1000, 334, -1000, -1000, -1000,
	-1000, -1000, -1000, 1186, -17, 707, -1000, 8642, 13634, 118,
	-119, -1000, -1000, -1000, -1000, 687, 7878, 2952, -123, -1000,
	-1000, -1000, 771, 697, 28, -124, 116, -1000, 7878, -1000,
	10920, -1000, 1190, 27, -1000, -125, -1000, -1000, -1000, 26,
	7622, 7622, -104, -1000, -1000, 793, 785, 538, -1000, -1000,
	-1000, -1000, -1000, 902, 13634, 19724, -105, -1000, -1000, 707,
	-1000, -1000, -1000, 8388, 831, 597, 19012, -1000, -1000, 1131,
	-1000, 373, 929, 929, 771, -133, -1000, -1000, 1261, -1000,
	-1000, -1000, -1000, -1000, -1000, 1268, -1000, -1000, 964, -1000,
	-1000, -1000, 7366, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1545, 1544, 1235, 1542, 1541, 1540, 1530, 1529, 102,
	1528, 1527, 121, 1525, 96, 1524, 1522, 1521, 1516, 44,
	1515, 1514, 1513, 1512, 1509, 94, 38, 165, 1749, 149,
	1507, 1505, 1504, 10, 105, 92, 1500, 42, 68, 99,
	110, 705, 69, 1498, 1497, 132, 28, 13, 117, 88,
	136, 135, 126, 1493, 1486, 1485, 36, 1482, 1481, 1477,
	1476, 51, 19, 1475, 15, 26, 1474, 1473, 95, 1472,
	100, 113, 29, 114, 83, 1471, 50, 11, 65, 1470,
	32, 1469, 25, 75, 133, 1468, 47, 150, 67, 24,
	59, 1467, 1463, 1459, 1458, 89, 81, 54, 1455, 1454,
	74, 1452, 123, 127, 1451, 1450, 116, 1448, 1445, 1443,
	615, 1439, 1438, 561, 7, 35, 70, 5, 112, 108,
	16, 1437, 20, 1436, 1321, 723, 700, 1434, 53, 43,
	77, 58, 60, 23, 1432, 103, 1429, 1428, 1424, 1422,
	1420, 76, 1418, 71, 129, 33, 39, 78, 21, 22,
	82, 109, 139, 107, 1417, 119, 1415, 37, 1414, 1411,
	642, 98, 1410, 1409, 1408, 629, 468, 281, 101, 1407,
	1406, 228, 201, 1405, 1403, 80, 1401, 1400, 137, 1399,
	128, 46, 1398, 115, 1397, 87, 1393, 0, 45, 40,
	1392, 125, 73, 1391, 1390, 1389, 14, 2, 8, 3,
	6, 4, 27, 17, 1388, 1387, 120, 90, 1384, 138,
	1383, 1381, 30, 1380, 1379, 18, 1377, 12, 1376, 9,
	1, 1375, 134, 1374, 86, 1368, 1273, 1360, 131, 1359,
	1358, 1270, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	73, 73, 72, 72, 75, 75, 11, 11, 12, 12,
	12, 12, 156, 156, 155, 13, 18, 222, 222, 222,
	226, 226, 227, 227, 228, 228, 228, 228, 228, 228,
	228, 224, 224, 21, 21, 21, 21, 110, 110, 112,
	112, 112, 112, 40, 109, 109, 109, 109, 111, 111,
	111, 111, 180, 178, 178, 185, 185, 185, 53, 53,
	53, 53, 53, 54, 54, 54, 177, 177, 177, 177,
	186, 186, 186, 186, 186, 186, 55, 55, 55, 184,
	184, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 179, 179, 223, 223, 225,
	225, 8, 8, 56, 56, 57, 57, 116, 116, 116,
	115, 194, 194, 195, 195, 195, 196, 196, 196, 196,
	196, 196, 196, 193, 193, 191, 191, 192, 192, 192,
	192, 229, 229, 114, 114, 60, 60, 199, 199, 199,
	199, 197, 197, 197, 197, 197, 200, 198, 201, 201,
	201, 201, 201, 144, 144, 144, 24, 7, 7, 99,
	99, 64, 64, 148, 148, 148, 47, 47, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	100, 100, 101, 101, 16, 20, 23, 23, 23, 23,
	23, 231, 231, 44, 44, 44, 44, 45, 45, 113,
	113, 113, 113, 113, 39, 6, 6, 38, 38, 14,
	14, 14, 14, 14, 50, 50, 106, 106, 106, 108,
	108, 107, 107, 107, 86, 86, 25, 77, 77, 78,
	78, 154, 79, 79, 19, 19, 28, 28, 26, 26,
	26, 26, 26, 26, 27, 27, 29, 29, 29, 29,
	29, 29, 29, 207, 207, 207, 209, 209, 206, 15,
	15, 15, 15, 208, 208, 230, 230, 87, 87, 87,
	59, 58, 58, 62, 62, 61, 63, 63, 147, 84,
	84, 84, 84, 102, 103, 103, 104, 104, 105, 105,
	83, 83, 131, 131, 30, 30, 68, 68, 69, 69,
	122, 122, 123, 123, 121, 121, 121, 149, 149, 149,
	149, 150, 150, 150, 150, 150, 150, 145, 145, 145,
	145, 146, 146, 90, 90, 90, 90, 88, 88, 89,
	89, 151, 151, 151, 151, 85, 85, 152, 152, 152,
	117, 117, 157, 157, 157, 67, 67, 67, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 159,
	159, 159, 159, 161, 161, 161, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 162,
	162, 169, 169, 170, 170, 171, 172, 163, 163, 164,
	164, 165, 166, 173, 173, 173, 173, 175, 175, 167,
	167, 167, 167, 167, 168, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 97,
	97, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 202, 202, 202, 202, 202, 202, 202, 204,
	204, 205, 205, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 210, 210,
	211, 211, 212, 212, 213, 213, 215, 216, 216, 216,
	217, 221, 221, 214, 214, 218, 218, 218, 219, 219,
	220, 220, 220, 220, 220, 135, 135, 135, 136, 136,
	137, 74, 74, 133, 133, 132, 132, 132, 134, 134,
	91, 174, 174, 174, 174, 174, 174, 174, 92, 92,
	98, 93, 93, 94, 94, 94, 94, 94, 94, 128,
	129, 95, 95, 95, 130, 130, 138, 142, 142, 141,
	140, 140, 139, 139, 120, 120, 120, 120, 119, 118,
	80, 80, 232, 232, 143, 143, 81, 81, 82, 76,
	76, 153, 153, 153, 153, 70, 70, 52, 52, 71,
	71, 48, 48, 51, 49, 49, 49, 49, 65, 65,
	66, 66, 46, 46, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 176, 176, 176, 41, 41,
	41, 42, 42, 43, 43, 182, 182, 182, 183, 183,
	183, 183, 181, 181, 181, 181, 181, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 6,
	6, 8, 5, 7, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 0, 8, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 2,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 2, 0, 1, 3,
	3, 1, 1, 3, 2, 4, 0, 3, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 2, 2, 1, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -208, 83, 90, 103, 190,
	197, -26, -28, 205, 206, 29, 213, 52, 86, 192,
	187, 232, 58, -207, -29, -27, 277, 253, 259, 200,
	-30, 219, 246, 280, 219, 70, 114, 78, 118, 240,
	239, 70, 114, 219, -12, 277, -19, -14, -25, -9,
	-226, 18, -227, -228, 58, 83, 103, 200, 118, 78,
	239, -226, -45, 197, -41, 4, -187, -189, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 94, 95, 97, 99, 104, 109, 110,
	115, 118, 126, 128, 129, 134, 137, 140, 142, 143,
	144, 145, 146, 148, 149, 151, 153, 150, 156, 158,
	159, 165, 168, 171, 172, 175, 178, 179, 180, 182,
	183, 187, 185, 186, 188, 190, 192, 193, 195, 198,
	199, 202, 203, 205, 206, 208, 210, 212, 213, 216,
	214, 220, 221, 228, 232, 233, 234, 235, 238, 239,
	240, 243, 244, 245, 249, 254, 255, 256, 257, 30,
	31, 32, 34, 35, 38, 39, 43, 44, 45, 47,
	72, 74, 75, 89, 91, 96, 105, 107, 111, 112,
	119, 120, 121, 123, 132, 155, 157, 166, 170, 174,
	176, 181, 194, 201, 209, 215, 217, 223, 224, 225,
	229, 230, 246, 247, -110, 137, 203, 228, -111, -109,
	-180, 223, 146, -72, -41, 197, 4, 70, 51, 71,
	104, 114, 115, 129, 220, 223, 228, 18, 58, -231,
	228, 228, -231, -231, -44, 228, 226, -45, -230, 219,
	219, -99, 70, 237, -27, -29, -28, -61, -62, 236,
	122, 88, 164, -26, -28, -207, -209, 182, -206, -41,
	-209, -58, -59, 18, 80, 281, -151, -48, 162, -41,
	-82, 277, -3, -151, 111, -41, -51, 111, -48, 101,
	124, 124, -152, -151, -41, 111, -52, 111, -51, -73,
	111, -72, -156, -155, -183, 4, -187, -189, -188, 246,
	49, 59, 102, 117, 125, 127, 133, 135, 147, 167,
	169, 191, 207, 161, 281, 161, -41, -110, 45, -110,
	-112, -39, -40, 126, 178, 226, 262, 101, 257, -55,
	5, 76, -75, 279, 101, -223, 161, 101, 101, 101,
	-179, 101, 257, 126, 178, 219, -113, -39, -40, -113,
	226, -45, -85, -151, -72, 111, 114, -41, 111, -61,
	-62, -84, -102, -103, 136, 160, -87, 18, 80, -87,
	-87, 37, 278, 278, 281, -209, -66, 277, -76, -153,
	-124, 270, -126, 268, 269, 274, 152, 258, -135, -48,
	-127, 9, 277, -138, -204, -28, 89, 24, -136, -137,
	194, -41, 7, 8, 5, 6, -46, -159, -168, 231,
	92, 154, 41, -202, -203, 4, -187, -182, -160, -170,
	-164, -167, 123, 49, 63, 66, 64, 67, 204, 241,
	42, 91, 170, 174, 217, 229, 230, 111, 155, 112,
	47, 105, 132, 82, 31, 32, 34, 35, 43, 44,
	72, 74, 75, 96, 119, 120, 121, 157, 181, 209,
	215, 224, 225, 247, -188, -171, -172, -165, -166, -173,
	-76, -82, 270, -48, 277, -80, -120, -119, -118, 275,
	279, -81, -143, -124, 76, -35, 185, -34, 17, 19,
	83, 244, 89, 185, 185, 89, 282, -152, -50, -48,
	-50, 205, -41, 25, 89, -37, 281, 40, 188, 89,
	281, 89, 278, 281, -222, -71, 219, 70, -49, -41,
	270, -228, -222, 25, 281, 281, 134, -54, 140, 151,
	109, -178, 76, -185, -177, -144, 9, 231, 92, 161,
	-184, 8, 269, -176, -183, 5, 7, 268, -178, 76,
	61, -186, 5, 4, -168, -144, 76, 137, 123, 279,
	-181, 4, -187, -189, -188, -190, 18, 20, 21, 22,
	23, 24, 25, 26, 27, 36, 41, 42, 46, 48,
	50, 56, 58, 62, 63, 64, 65, 66, 67, 76,
	77, 79, 80, 81, 84, 86, 88, 92, 93, 98,
	100, 101, 103, 106, 108, 113, 114, 116, 122, 124,
	130, 131, 136, 138, 139, 152, 154, 160, 161, 162,
	163, 164, 173, 177, 184, 189, 200, 204, 211, 218,
	219, 222, 226, 227, 231, 236, 237, 241, 242, 248,
	250, 251, 252, 253, -180, -225, 98, -222, -180, -180,
	-180, -180, 134, -180, 281, 281, -45, -37, 281, 277,
	152, -42, 111, -41, -38, 85, 152, -84, -103, -102,
	-104, -124, 18, -124, -126, -27, -27, -27, -63, -147,
	-124, -206, 25, -65, -41, -68, 281, 101, 10, 48,
	28, 268, 269, 270, 271, 272, 265, 266, 267, 264,
	260, 261, 262, 54, 141, 196, 12, 13, 14, 22,
	163, 135, 258, 207, 125, 30, 113, 25, 4, -124,
	-124, -124, -124, -124, 169, -28, -124, -74, -80, -28,
	-132, 275, 277, -80, 277, 5, 5, 277, -139, -124,
	-210, 254, 98, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 176, -175,
	249, -175, -175, -161, 277, -161, -162, 277, -161, 255,
	259, 277, -68, -48, -120, -124, -181, 270, 281, 278,
	281, 226, -100, 56, 50, -115, 111, 50, -191, -41,
	56, -192, 46, 237, 177, 100, -100, 56, -100, 56,
	56, -151, 226, 226, -51, -41, -117, 251, -106, -19,
	277, 76, 25, -106, -77, -78, -154, -79, -48, 277,
	-41, -41, -51, -52, -72, -73, -12, -155, 226, 281,
	-71, -65, -119, -118, 101, 228, -40, -39, -53, 180,
	210, 186, 202, 281, 8, 7, 7, 5, -181, -224,
	-41, -40, -39, -151, -56, -57, -116, -115, -193, -191,
	114, 237, 89, 161, 152, 262, 89, -105, 194, 195,
	281, -33, 26, 79, 277, 281, 278, -117, -153, -69,
	-149, -151, -28, -150, 277, -157, -158, -160, -169, -163,
	-167, -168, 33, 39, 38, 221, 201, 119, 120, 121,
	209, 31, 181, 96, 82, 75, 74, 157, 35, 34,
	-171, -172, -165, -166, 72, 224, 225, 32, 44, 43,
	247, 215, -72, 223, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, 135, 207, 30, 113, 226,
	154, 152, 231, 92, 238, 80, 158, -232, 218, 27,
	-130, -28, 277, -181, -135, 194, 277, 278, 281, -74,
	-134, 276, -124, -132, -74, 278, 278, -74, 248, 18,
	80, 270, -96, 256, 144, 73, 110, 143, -97, 199,
	7, -142, -141, 250, -211, 94, 106, 277, 278, 278,
	-124, -91, -174, 4, 256, 144, 73, 110, 143, 199,
	-92, -124, -93, -125, -126, 268, 269, 274, 277, 194,
	-94, -124, -74, -124, 36, 131, 227, -95, -124, 101,
	-74, -124, -124, -124, -74, -74, -74, 277, 7, 7,
	223, 223, 7, -117, 278, 276, 285, -143, -34, -48,
	-41, -41, 152, -115, 111, -157, -41, 277, 277, 128,
	128, -41, -41, 111, -41, 111, -41, -41, -35, 185,
	-41, -41, 185, -86, 189, -124, -86, -108, 161, -70,
	-48, 246, -41, 189, -68, 281, 262, -70, -37, -224,
	-49, -224, -39, 235, 53, 180, -185, -96, 281, 278,
	281, -42, 114, -72, -48, 89, 5, -41, -147, -15,
	-19, -14, -25, -9, -41, -83, 106, 281, 59, -90,
	127, 147, 102, 133, 191, 117, -121, 282, -146, -145,
	25, -41, -28, -150, -149, -67, 24, -96, 277, 257,
	-124, 226, -232, 218, -130, -124, 154, 231, 92, 238,
	80, 158, 101, 277, -125, -125, -74, 277, -74, -124,
	281, 276, 276, 281, 278, -62, 281, -61, -124, -74,
	-74, 278, 226, 226, 226, 226, 277, 278, -140, -141,
	84, -124, -216, 168, 277, 277, -124, 25, 278, 101,
	278, -98, 173, 278, 10, 268, 269, 270, 271, 272,
	265, 266, 267, 264, 260, 261, 262, 54, 141, 196,
	12, 13, 14, 125, 113, -125, -125, -125, -74, 277,
	278, -128, -129, 101, 98, 25, -95, -95, -95, 278,
	101, -74, 281, 281, 281, 278, 278, 278, 7, 278,
	281, 278, 257, 257, 278, -83, -124, 226, 226, 89,
	152, -194, -192, -124, -65, 277, 277, -32, 83, 205,
	-101, 89, -37, 89, -37, 226, -100, 56, 226, -76,
	189, 55, 278, 281, -76, -117, -78, -143, 278, -41,
	-116, 277, -42, 277, 277, -41, -38, 278, -131, 108,
	37, -149, 127, 127, -149, -90, 127, -88, 167, -88,
	-88, -146, -181, 283, -41, 277, 278, 275, 275, 7,
	-124, -124, -125, -125, 101, 277, -124, -133, -157, 22,
	22, 278, -74, 278, 281, 278, -124, -132, 278, 248,
	-62, -62, -62, 144, 110, 143, -97, 143, -97, -97,
	7, 5, 86, -124, 222, -217, -41, 277, 251, -61,
	278, -157, -124, -128, -124, -157, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, 80, 152, 158, -125, 281, -74,
	278, -129, -128, -124, -124, -157, 278, 278, 278, -74,
	-124, -124, -124, 278, 7, -131, 276, -41, -41, -115,
	89, -195, 56, -196, 48, 152, 154, 237, 177, 46,
	76, 184, 278, 278, -65, -65, 152, 76, 152, 76,
	69, 233, -41, -41, -48, -41, -41, -41, -76, -107,
	277, 161, -19, -48, -86, 262, -64, -148, -41, -205,
	277, -202, -203, -46, 277, -56, -64, 161, -212, 252,
	-124, -74, -149, -149, -89, 242, 161, 127, -149, -123,
	-122, 99, 150, 277, -65, -145, 276, 7, 7, 278,
	22, 22, -124, -133, 278, 281, -124, -124, 278, -124,
	5, -124, 278, 278, 278, 278, -124, -221, -41, -124,
	278, 278, -129, 101, 80, 158, 277, -124, 278, 278,
	281, 278, 278, 278, -212, -115, -41, -72, 154, 128,
	277, -125, -48, -114, -229, 57, 216, 278, 278, 154,
	154, -124, -157, -37, -37, 226, 226, 81, -65, 56,
	-82, -28, 277, 278, 281, -47, -80, 48, -47, -124,
	277, -64, 278, 278, -48, -213, -215, -41, -89, 277,
	-124, -149, 281, 284, 262, -65, 278, 276, 276, -124,
	-124, 278, -157, 278, -62, -214, 172, 278, -125, 101,
	277, -133, 278, -124, -196, -124, -43, 277, 277, 184,
	-36, 48, -41, -41, 239, 153, 278, -41, -114, -148,
	-33, -72, -33, 278, -74, 278, -114, 277, 281, 25,
	-65, -122, -181, 278, 278, -62, 37, -125, -133, 278,
	278, 278, -199, 142, -41, -65, -48, -31, 242, -72,
	205, -117, -47, -62, -114, -64, -215, -217, 278, -218,
	179, 195, -74, 278, -197, -200, -198, 161, 102, 171,
	208, 278, 278, -60, 277, -124, -77, -33, 278, 278,
	278, -219, -220, 30, 234, 61, -124, -219, -198, 161,
	-200, 161, 239, 78, -199, -65, -117, -114, -220, 175,
	97, 194, 175, 97, -201, 149, 188, 40, 205, -201,
	-197, 278, 22, 16, 154, 76, -220,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 324, 0, 0,
	0, 294, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 326, 220, 323, -2, 334, 0, 0, 0, 332,
	308, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 245, 828, 258, 738, 739, 740, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 93, 795, 832, 843, 98, 108,
	0, 897, -2, 112, 62, 828, 141, 142, 0, 144,
	158, 0, 0, 0, 156, 0, 0, 153, 0, 263,
	251, 263, 248, 249, 250, 253, 0, 244, 0, 325,
	0, 0, 0, 219, -2, 304, 305, -2, 0, 329,
	329, 329, 0, 0, 305, 0, 313, 818, 316, 721,
	314, 0, 0, 331, 330, 0, 309, 391, 0, 711,
	354, 0, 2, 0, 878, 0, 0, 878, 0, 0,
	0, 0, 0, 397, 54, 878, 45, 878, 707, 58,
	878, 60, 0, 72, 74, 748, 749, 750, 751, 902,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 0, 0, 0, 257, 94, 868, 96,
	97, 99, 100, 0, 0, 0, 0, 0, 0, 111,
	136, 137, 63, 0, 0, 160, 0, 0, 0, 0,
	149, 0, 150, 0, 152, 0, 246, 259, 260, 247,
	0, 255, 45, 395, 0, 878, 742, 268, 878, -2,
	0, 300, 341, 342, 0, 0, 0, 327, 328, 0,
	0, 0, 296, 297, 0, 315, 0, 0, 357, 699,
	703, 704, 481, 0, 0, 0, 0, 0, 0, 560,
	561, 562, 0, 564, 565, 566, 873, 0, 570, 571,
	892, 711, 724, 725, 726, 727, 0, 0, 0, 732,
	733, 734, 683, 609, 580, -2, -2, 722, 419, 420,
	421, 422, -2, 904, 584, 586, 588, 589, 590, 591,
	0, 874, 888, 889, 896, 900, 901, 878, 885, 879,
	869, 876, 884, 778, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 747, 443, 444, 449, 450, 452,
	357, 355, 392, 393, 0, 712, 690, 684, 685, 0,
	0, 0, 696, 694, 695, 22, 241, 24, 0, 241,
	241, 0, 0, 0, 0, 0, 0, 401, 0, 274,
	0, 0, 398, 0, 0, 56, 0, 43, 44, 0,
	0, 0, 324, 0, 0, 77, 0, 774, 709, 714,
	717, 83, 0, 0, 0, 0, 0, 103, 123, 124,
	125, 104, 106, 113, 115, 116, 117, 126, 127, 128,
	129, 213, 0, 215, 139, 140, 735, 0, 105, 107,
	109, 110, 130, 131, 0, 133, 134, 135, 464, 0,
	64, 752, 753, 754, 755, 756, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 143, 145, 0, 157, 146, 147,
	148, 155, 151, 154, 0, 0, 254, 216, 0, 164,
	0, 0, 878, 741, 265, 0, 0, 303, 339, 340,
	343, 346, 347, 344, 481, 310, 311, 312, 335, 336,
	230, 317, 0, 0, 718, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 693, 0, 0, 702, 485,
	486, 487, 508, 509, 0, -2, 641, 0, 567, 568,
	569, 0, 0, -2, 0, 729, 478, 0, 0, 682,
	611, 0, 0, 0, 0, 0, 0, 0, 662, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 433, 446,
	457, 454, 453, 435, 0, 434, 432, 0, 436, 0,
	0, 0, 401, 0, 691, 0, 688, 689, 0, 698,
	0, 0, 0, 0, 240, 26, 878, 0, 36, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 713, 285, 0, 285, 276,
	0, 0, 0, 272, 357, 287, 289, 290, 0, 0,
	399, 55, 708, 45, 61, 59, 67, 73, 0, 0,
	78, 79, 715, 716, 0, 0, 101, 102, 264, 0,
	120, 0, 122, 0, 214, 737, 736, 478, 65, 159,
	91, 261, 262, 396, 0, 163, 165, 167, 168, 169,
	742, 0, 0, 0, 0, 0, 0, 345, 348, 349,
	0, 338, 228, 229, 324, 0, 720, 351, 700, 356,
	358, 366, 382, 369, 0, 482, 407, 408, 409, 410,
	411, 478, 414, 415, 416, 417, 418, 426, 427, 428,
	429, 430, 431, 440, 0, 425, 425, 425, 437, 438,
	441, 442, 447, 448, 459, 460, 462, 458, 458, 458,
	455, 456, 483, 0, 488, 489, 490, 491, 492, 493,
	494, 495, 496, -2, -2, -2, 500, 501, 502, -2,
	-2, -2, 506, 507, -2, 0, 0, 693, 0, 0,
	514, 0, 517, 519, 521, 0, 0, 0, 0, 692,
	531, 674, 0, 701, 516, 0, 0, 563, 0, 0,
	0, 647, 641, 648, 0, -2, 572, 334, 0, 0,
	0, 0, 730, 465, 466, 467, 468, 469, 470, 479,
	0, 681, 677, 0, 619, 0, 0, 0, 585, 587,
	0, 0, 0, 651, 652, 653, 654, 655, 656, 657,
	0, 0, 0, 0, 533, 0, 0, 0, 0, 892,
	0, 641, 667, 0, 0, 0, 0, 0, 641, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 394, 686, 0, 697, 25, 232,
	0, 0, 0, 28, 878, 172, 0, 0, 0, 0,
	0, 243, 37, 878, 45, 878, 45, 38, 23, 241,
	231, 234, 0, 53, 0, 400, 269, 270, 0, 0,
	705, 278, 275, 0, 401, 0, 0, 0, 57, 75,
	710, 76, 95, 118, 119, 121, 114, 132, 0, 161,
	0, 0, 742, 0, 0, 0, 267, 268, 337, 0,
	319, 320, 321, 322, 719, 353, 0, 0, 0, 0,
	0, 0, 388, 388, 388, 386, 382, 0, 368, 381,
	0, 380, -2, 369, 0, 402, 404, 412, 0, 0,
	-2, 0, 0, 0, 532, -2, 515, 518, 520, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 642,
	0, 645, 646, 0, -2, 0, 0, 333, 334, 334,
	334, 578, 0, 0, 0, 0, 0, 0, 0, 678,
	0, 0, 579, 0, 0, 0, 0, 0, 593, 0,
	594, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 536, 537, 0, 0,
	596, 665, 666, 0, 0, 0, 0, 0, 0, 601,
	0, 672, 0, 0, 0, 605, 606, 607, 0, 423,
	0, 439, 461, 463, 451, 353, 0, 0, 0, 0,
	0, 170, 185, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 34, 0, 40, 0, 0, 0, 0, 284,
	0, 283, 0, 0, 273, 285, 288, 291, 0, 92,
	166, 0, 0, 164, 0, 0, 266, 318, 613, 0,
	0, 359, 0, 0, 0, 0, 0, 383, 387, 384,
	385, 367, 364, 0, 378, 0, 371, 0, 0, 0,
	484, -2, 0, 0, 0, 0, -2, 0, 643, 0,
	0, 675, 0, 636, 0, -2, 642, 649, 573, 0,
	0, 0, 0, 471, 472, 473, 474, 475, 476, 477,
	0, 731, 676, 680, 0, 617, 618, 622, 0, 0,
	583, 0, 650, 659, 660, 534, 538, 539, 540, 541,
	542, 543, 544, 545, 546, -2, -2, -2, 550, 551,
	552, -2, -2, -2, 0, 0, 0, 661, 0, 0,
	639, 663, 664, 669, 670, 0, 598, 599, 600, 671,
	0, 0, 0, 445, 0, 613, 687, 236, 238, 27,
	0, 171, 0, 174, 0, 0, 177, 178, 0, 0,
	0, 0, 187, 194, 0, 0, 0, 42, 0, 0,
	242, 0, 45, 45, 233, 0, 0, 235, 271, 0,
	0, 0, 277, 706, 286, 0, 0, 221, 227, 227,
	0, 581, 582, 0, 0, 0, 0, 0, 306, 0,
	352, 350, 372, 0, 374, 0, 0, 0, 376, 0,
	362, 0, 361, 0, 0, 370, 405, 0, 0, 413,
	0, 0, -2, 0, 525, 0, -2, -2, 635, 642,
	728, 334, 574, 576, 577, 480, 679, 624, 621, 0,
	608, 592, 658, 0, 0, 0, 0, 642, 638, 597,
	0, 603, 604, 424, 307, 29, 0, 175, 176, 179,
	0, 181, 744, 188, 0, 191, 192, 189, 0, 31,
	32, 41, 47, 33, 39, 0, 0, 0, 0, 0,
	292, 293, 0, 194, 0, 230, 723, 0, 230, 0,
	0, 0, 162, 194, 0, 612, 614, 0, 373, 0,
	390, 375, 0, 365, 0, 0, 379, 406, 403, -2,
	-2, 526, 644, 637, 0, 334, 0, 610, -2, 0,
	0, 0, 640, 0, 173, 0, 200, 0, 0, 0,
	49, 0, 237, 239, 0, 280, 401, 282, 183, 222,
	223, 226, 224, 227, 334, 194, 217, 0, 0, 0,
	0, 363, 360, 377, 575, 627, 0, -2, 0, 558,
	602, 180, 205, 0, 0, 0, 196, 35, 0, 46,
	0, 281, 230, 0, 184, 0, 615, 616, 389, 0,
	0, 0, 623, 559, 182, 201, 202, 0, 197, 198,
	199, 743, 193, 200, 0, 48, 401, 225, 573, 194,
	620, 625, 628, -2, 846, 771, 0, 626, 203, 0,
	204, 0, 0, 0, 205, 0, 279, 218, 0, 630,
	631, 632, 633, 634, 206, 0, 209, 210, 0, 207,
	190, 195, 0, 208, 211, 212, 629,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 266, 3, 272, 267, 3,
	277, 278, 270, 268, 281, 269, 279, 271, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 285, 280,
	260, 262, 261, 3, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 275, 3, 276, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 283, 264, 284, 274,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 263, 57603, 273, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:666
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:672
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:678
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:708
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:714
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:764
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:782
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:789
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:840
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:841
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:844
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:845
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:993
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1240
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1402
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1513
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1552
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1563
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1652
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1656
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1723
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1766
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1860
		{
			unimplementedWithIssue(6637)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1867
		{
			unimplementedWithIssue(6637)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1909
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = []string(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2168
		{
			unimplemented()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2181
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = true
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = false
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = false
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = true
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2209
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2309
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2450
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.str = astFullJoin
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.str = astLeftJoin
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.str = astRightJoin
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.str = astInnerJoin
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2538
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2628
		{
			unimplementedWithIssue(2115)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			unimplementedWithIssue(2115)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			unimplementedWithIssue(2115)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2633
		{
			unimplementedWithIssue(2115)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2634
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2642
		{
			unimplemented()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2659
		{
			unimplementedWithIssue(4491)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2687
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = nil
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2804
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2831
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2871
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2919
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3322
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3323
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3364
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3405
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3449
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3450
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3453
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3454
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3458
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3459
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3471
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3475
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3486
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3487
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3491
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3512
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3513
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3841
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3998
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4034
		{
			unimplemented()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = DNull
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.str = ""
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
