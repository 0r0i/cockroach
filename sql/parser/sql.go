// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:259
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FORCE_INDEX = 57440
const FOREIGN = 57441
const FROM = 57442
const FULL = 57443
const GRANT = 57444
const GRANTS = 57445
const GREATEST = 57446
const GROUP = 57447
const GROUPING = 57448
const HAVING = 57449
const HIGH = 57450
const HOUR = 57451
const IF = 57452
const IFNULL = 57453
const IN = 57454
const INDEX = 57455
const INDEXES = 57456
const INITIALLY = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NO_INDEX_JOIN = 57491
const NORMAL = 57492
const NOT = 57493
const NOTHING = 57494
const NULL = 57495
const NULLIF = 57496
const NULLS = 57497
const NUMERIC = 57498
const OF = 57499
const OFF = 57500
const OFFSET = 57501
const ON = 57502
const ONLY = 57503
const OR = 57504
const ORDER = 57505
const ORDINALITY = 57506
const OUT = 57507
const OUTER = 57508
const OVER = 57509
const OVERLAPS = 57510
const OVERLAY = 57511
const PARTIAL = 57512
const PARTITION = 57513
const PLACING = 57514
const POSITION = 57515
const PRECEDING = 57516
const PRECISION = 57517
const PRIMARY = 57518
const PRIORITY = 57519
const RANGE = 57520
const READ = 57521
const REAL = 57522
const RECURSIVE = 57523
const REF = 57524
const REFERENCES = 57525
const RENAME = 57526
const REPEATABLE = 57527
const RELEASE = 57528
const RESTRICT = 57529
const RETURNING = 57530
const REVOKE = 57531
const RIGHT = 57532
const ROLLBACK = 57533
const ROLLUP = 57534
const ROW = 57535
const ROWS = 57536
const RSHIFT = 57537
const SAVEPOINT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TO = 57565
const TRAILING = 57566
const TRANSACTION = 57567
const TREAT = 57568
const TRIM = 57569
const TRUE = 57570
const TRUNCATE = 57571
const TYPE = 57572
const UNBOUNDED = 57573
const UNCOMMITTED = 57574
const UNION = 57575
const UNIQUE = 57576
const UNKNOWN = 57577
const UPDATE = 57578
const USER = 57579
const USING = 57580
const VALID = 57581
const VALIDATE = 57582
const VALUE = 57583
const VALUES = 57584
const VARCHAR = 57585
const VARIADIC = 57586
const VARYING = 57587
const WHEN = 57588
const WHERE = 57589
const WINDOW = 57590
const WITH = 57591
const WITHIN = 57592
const WITHOUT = 57593
const YEAR = 57594
const ZONE = 57595
const NOT_LA = 57596
const WITH_LA = 57597
const POSTFIXOP = 57598
const UMINUS = 57599

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4224

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	276, 21,
	-2, 318,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 289,
	160, 289,
	188, 289,
	274, 289,
	276, 289,
	-2, 299,
	-1, 44,
	1, 292,
	160, 292,
	188, 292,
	274, 292,
	276, 292,
	-2, 298,
	-1, 53,
	1, 21,
	276, 21,
	-2, 318,
	-1, 237,
	1, 138,
	276, 138,
	-2, 790,
	-1, 268,
	135, 328,
	159, 328,
	-2, 295,
	-1, 271,
	135, 327,
	159, 327,
	-2, 293,
	-1, 381,
	135, 327,
	159, 327,
	-2, 296,
	-1, 438,
	273, 735,
	-2, 730,
	-1, 439,
	273, 736,
	-2, 731,
	-1, 445,
	6, 454,
	273, 454,
	-2, 871,
	-1, 467,
	6, 424,
	-2, 848,
	-1, 468,
	6, 451,
	273, 451,
	-2, 849,
	-1, 469,
	6, 432,
	-2, 850,
	-1, 470,
	6, 431,
	-2, 851,
	-1, 471,
	6, 451,
	273, 451,
	-2, 854,
	-1, 472,
	6, 451,
	273, 451,
	-2, 855,
	-1, 473,
	6, 452,
	-2, 858,
	-1, 474,
	6, 419,
	-2, 859,
	-1, 475,
	6, 419,
	-2, 860,
	-1, 476,
	6, 434,
	-2, 863,
	-1, 477,
	6, 420,
	-2, 868,
	-1, 478,
	6, 421,
	-2, 869,
	-1, 479,
	6, 422,
	-2, 870,
	-1, 480,
	6, 419,
	-2, 874,
	-1, 481,
	6, 425,
	-2, 879,
	-1, 482,
	6, 423,
	-2, 881,
	-1, 483,
	6, 453,
	-2, 885,
	-1, 484,
	6, 449,
	273, 449,
	-2, 889,
	-1, 742,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	233, 299,
	-2, 556,
	-1, 750,
	273, 715,
	-2, 704,
	-1, 944,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 487,
	-1, 945,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 488,
	-1, 946,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 489,
	-1, 950,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 493,
	-1, 951,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 494,
	-1, 952,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 495,
	-1, 955,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 500,
	-1, 986,
	168, 626,
	-2, 629,
	-1, 1138,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	233, 299,
	-2, 376,
	-1, 1146,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 501,
	-1, 1151,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 502,
	-1, 1170,
	168, 625,
	-2, 628,
	-1, 1313,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 503,
	-1, 1318,
	124, 0,
	-2, 513,
	-1, 1327,
	168, 627,
	-2, 630,
	-1, 1367,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 537,
	-1, 1368,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 538,
	-1, 1369,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 539,
	-1, 1373,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 543,
	-1, 1374,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 544,
	-1, 1375,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 545,
	-1, 1473,
	124, 0,
	-2, 514,
	-1, 1477,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 517,
	-1, 1478,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 519,
	-1, 1560,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 518,
	-1, 1561,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 520,
	-1, 1569,
	124, 0,
	-2, 546,
	-1, 1608,
	124, 0,
	-2, 547,
	-1, 1653,
	30, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 847,
}

const sqlNprod = 981
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 19799

var sqlAct = [...]int{

	983, 1652, 1635, 1514, 1673, 1636, 1613, 1637, 1651, 828,
	884, 1577, 1536, 437, 1437, 436, 1347, 1405, 1319, 429,
	1461, 1547, 1438, 86, 1455, 294, 745, 1228, 238, 868,
	272, 821, 1449, 1135, 1082, 277, 31, 497, 580, 1290,
	1227, 999, 485, 1320, 14, 680, 747, 503, 1134, 829,
	1173, 1125, 871, 401, 1299, 525, 870, 1121, 487, 892,
	797, 806, 1003, 31, 1038, 971, 776, 968, 895, 993,
	780, 553, 65, 863, 538, 279, 43, 700, 20, 1087,
	10, 6, 702, 508, 369, 506, 431, 486, 320, 31,
	535, 314, 696, 411, 1041, 402, 271, 564, 498, 316,
	370, 499, 63, 43, 312, 282, 67, 321, 66, 68,
	309, 893, 384, 873, 385, 311, 44, 383, 81, 235,
	555, 551, 72, 45, 305, 534, 822, 527, 1553, 43,
	280, 1554, 826, 527, 276, 1649, 1643, 996, 1535, 888,
	1642, 1634, 1629, 888, 1476, 888, 1610, 1604, 1596, 1476,
	888, 1535, 1587, 276, 1562, 1535, 1092, 1476, 1557, 261,
	269, 888, 317, 290, 1168, 444, 297, 268, 489, 1169,
	703, 306, 300, 997, 1544, 1534, 49, 1535, 1535, 284,
	1519, 1518, 1499, 888, 888, 1166, 1479, 1475, 1133, 1166,
	1476, 705, 1415, 1323, 51, 888, 1166, 1281, 1276, 1245,
	1277, 1277, 1246, 1166, 703, 1243, 998, 995, 1166, 707,
	1242, 1241, 1170, 1166, 1166, 1166, 1167, 889, 517, 52,
	888, 1166, 488, 1599, 794, 532, 47, 793, 533, 706,
	1538, 704, 48, 49, 1380, 720, 1326, 1105, 795, 705,
	1123, 1107, 888, 843, 530, 979, 883, 857, 1172, 500,
	46, 51, 395, 501, 49, 49, 396, 707, 674, 673,
	545, 544, 1000, 337, 289, 500, 388, 1166, 53, 501,
	501, 579, 51, 51, 528, 356, 52, 706, 1650, 1648,
	528, 1605, 1543, 47, 1504, 1500, 403, 403, 1492, 48,
	1491, 1486, 1485, 376, 1484, 1483, 504, 52, 52, 382,
	439, 1470, 1395, 1390, 1432, 47, 1389, 64, 1109, 1388,
	1330, 48, 1308, 1289, 1248, 492, 994, 344, 1247, 381,
	496, 721, 1235, 1226, 1199, 1196, 1194, 1183, 46, 825,
	1578, 85, 1177, 345, 85, 1106, 1053, 1144, 976, 1010,
	491, 85, 1009, 395, 1200, 753, 394, 1092, 85, 85,
	1349, 1598, 85, 1579, 1571, 85, 85, 85, 1550, 1541,
	85, 85, 85, 85, 526, 319, 493, 1533, 1511, 721,
	677, 1497, 320, 320, 375, 1464, 722, 748, 1445, 373,
	583, 704, 1468, 85, 1317, 1307, 1287, 688, 690, 1286,
	1284, 321, 321, 1260, 697, 1259, 269, 1200, 1225, 584,
	1191, 1190, 1182, 268, 1163, 1159, 973, 736, 737, 738,
	739, 740, 397, 781, 784, 306, 743, 1431, 977, 1067,
	1066, 1048, 1008, 887, 722, 786, 774, 773, 518, 772,
	676, 771, 705, 770, 769, 768, 756, 705, 574, 767,
	766, 716, 713, 714, 715, 708, 709, 710, 711, 712,
	707, 750, 765, 500, 1145, 707, 764, 501, 763, 762,
	541, 761, 760, 751, 542, 749, 46, 678, 1067, 295,
	706, 568, 575, 399, 1214, 706, 1559, 664, 1558, 1310,
	668, 669, 670, 1309, 671, 667, 705, 365, 1555, 1436,
	1200, 675, 715, 708, 709, 710, 711, 712, 686, 685,
	684, 790, 698, 1093, 707, 269, 732, 351, 269, 269,
	744, 350, 692, 758, 1450, 693, 694, 822, 1350, 368,
	1186, 1004, 996, 777, 706, 583, 1089, 1619, 441, 1215,
	720, 85, 85, 1663, 789, 1586, 1662, 1423, 778, 779,
	791, 391, 392, 849, 584, 57, 782, 254, 573, 561,
	572, 785, 566, 275, 229, 31, 255, 320, 997, 838,
	314, 85, 800, 85, 824, 85, 1527, 85, 31, 1526,
	1272, 811, 813, 260, 787, 259, 321, 65, 509, 1252,
	510, 1251, 85, 1101, 58, 1181, 266, 274, 733, 1180,
	1179, 998, 995, 85, 1209, 1206, 1207, 1208, 1201, 1202,
	1203, 1204, 1205, 583, 85, 85, 934, 85, 43, 1178,
	728, 67, 754, 66, 68, 845, 721, 1147, 862, 1585,
	576, 960, 584, 803, 842, 816, 818, 844, 817, 276,
	851, 317, 819, 841, 348, 840, 839, 85, 846, 85,
	837, 847, 836, 372, 511, 850, 1467, 1000, 263, 319,
	319, 1201, 1202, 1203, 1204, 1205, 1516, 582, 85, 60,
	85, 85, 85, 85, 55, 85, 578, 970, 1621, 349,
	970, 722, 799, 85, 521, 1339, 1000, 853, 1271, 85,
	577, 730, 1004, 855, 1670, 1200, 708, 709, 710, 711,
	712, 1662, 70, 710, 711, 712, 1262, 85, 856, 273,
	85, 994, 61, 59, 527, 403, 854, 56, 958, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	729, 1000, 73, 264, 890, 933, 716, 713, 714, 715,
	708, 709, 710, 711, 712, 1200, 1203, 1204, 1205, 898,
	267, 1083, 78, 1081, 509, 515, 510, 74, 583, 866,
	705, 514, 1100, 1011, 924, 1022, 705, 1032, 1034, 1039,
	1042, 1043, 1044, 974, 865, 371, 75, 584, 707, 1580,
	1639, 881, 882, 789, 707, 340, 342, 1200, 789, 867,
	959, 77, 904, 923, 504, 984, 85, 807, 706, 1102,
	897, 512, 582, 347, 706, 1631, 62, 775, 567, 562,
	85, 54, 956, 1517, 85, 1214, 1263, 85, 85, 1052,
	511, 1632, 85, 1084, 85, 85, 346, 85, 1669, 1567,
	85, 85, 85, 799, 319, 975, 741, 85, 85, 798,
	405, 1056, 1300, 980, 985, 1269, 988, 366, 1064, 1640,
	810, 528, 1189, 276, 1638, 1062, 1149, 1014, 1661, 969,
	1024, 1033, 1659, 924, 1448, 1086, 877, 1045, 1046, 1047,
	1215, 903, 359, 76, 926, 1214, 338, 386, 347, 1057,
	582, 320, 1336, 957, 697, 1641, 509, 336, 510, 387,
	721, 904, 923, 1095, 1128, 1614, 721, 1521, 412, 367,
	321, 387, 1077, 1254, 1376, 1110, 1668, 1495, 1520, 1131,
	79, 1091, 1509, 1094, 1061, 1337, 1096, 1214, 1097, 1298,
	1108, 1078, 1098, 31, 1676, 1129, 1017, 809, 925, 1103,
	1215, 1104, 1116, 1419, 1099, 878, 1206, 1207, 1208, 1201,
	1202, 1203, 1204, 1205, 1335, 722, 683, 679, 386, 672,
	291, 722, 511, 291, 1683, 302, 1140, 1146, 291, 546,
	302, 1151, 1018, 43, 1510, 1139, 1118, 85, 1117, 1119,
	903, 1000, 1215, 926, 1143, 1377, 1114, 512, 85, 85,
	1165, 1378, 1069, 1130, 1496, 808, 1068, 1458, 1295, 782,
	1174, 785, 1294, 346, 304, 1019, 1016, 779, 778, 1201,
	1202, 1203, 1204, 1205, 85, 1187, 796, 85, 1418, 1192,
	716, 713, 714, 715, 708, 709, 710, 711, 712, 1171,
	708, 709, 710, 711, 712, 1150, 1148, 925, 550, 1462,
	743, 1682, 1674, 274, 378, 582, 1039, 1039, 1039, 1422,
	1208, 1201, 1202, 1203, 1204, 1205, 1421, 1291, 1122, 73,
	1007, 1020, 1570, 507, 1494, 1229, 1250, 1316, 1195, 548,
	1158, 848, 703, 364, 362, 1185, 361, 1257, 1162, 78,
	549, 1675, 1164, 360, 74, 357, 303, 1156, 1230, 759,
	1463, 666, 1006, 1402, 403, 1175, 1176, 1677, 1154, 1267,
	1265, 1253, 1112, 75, 504, 879, 876, 85, 85, 85,
	1232, 1233, 1234, 85, 531, 1015, 85, 529, 77, 512,
	1249, 524, 85, 85, 85, 85, 85, 516, 85, 85,
	1274, 1420, 513, 1278, 1224, 1344, 85, 1256, 85, 1266,
	1528, 1268, 389, 1663, 85, 1237, 287, 1273, 353, 1270,
	570, 1280, 1279, 85, 85, 1258, 1312, 799, 1313, 85,
	1152, 1530, 815, 814, 1157, 1285, 1275, 583, 319, 1318,
	885, 291, 1124, 799, 1283, 1538, 3, 1328, 1582, 812,
	1607, 1600, 1304, 1328, 1292, 85, 584, 85, 85, 1297,
	85, 1303, 393, 1293, 1301, 1302, 1296, 1345, 705, 85,
	76, 494, 827, 699, 390, 85, 1354, 85, 288, 1356,
	543, 966, 291, 520, 1128, 1332, 1333, 1334, 354, 1124,
	1142, 1680, 964, 886, 1681, 1200, 1329, 705, 924, 1131,
	296, 1338, 1340, 1341, 69, 1153, 706, 79, 691, 1126,
	1385, 1386, 1155, 858, 900, 1129, 859, 1353, 1355, 1392,
	1393, 1394, 1351, 1411, 1357, 1406, 904, 923, 1469, 1127,
	1396, 1128, 924, 1404, 80, 1383, 253, 1342, 1324, 924,
	1311, 705, 1244, 1457, 1051, 1050, 1131, 1049, 1001, 1384,
	860, 1481, 962, 1412, 961, 1387, 1126, 1343, 967, 707,
	904, 923, 1129, 861, 752, 262, 1515, 904, 923, 1397,
	924, 71, 1451, 1130, 256, 257, 1127, 665, 1443, 706,
	1442, 1443, 1447, 1442, 1444, 358, 1401, 1444, 1488, 1630,
	1188, 1566, 31, 1435, 1546, 1005, 1446, 1473, 904, 923,
	1381, 1433, 1477, 1478, 757, 903, 25, 1480, 926, 1440,
	417, 1391, 1482, 900, 1403, 1255, 1474, 1416, 1417, 872,
	1130, 1456, 1466, 585, 571, 560, 440, 1487, 1407, 963,
	1408, 1490, 363, 554, 1453, 1454, 965, 563, 1459, 903,
	1013, 490, 926, 442, 901, 443, 903, 902, 85, 926,
	783, 1411, 430, 1410, 899, 315, 924, 830, 1002, 1184,
	1413, 1498, 925, 1493, 755, 1465, 416, 1452, 422, 421,
	981, 413, 1460, 85, 788, 1132, 343, 903, 233, 234,
	926, 1412, 1085, 1430, 904, 923, 85, 823, 85, 880,
	85, 687, 291, 85, 1264, 302, 925, 265, 1197, 1031,
	832, 1023, 1522, 925, 85, 302, 1021, 85, 302, 1012,
	1505, 1409, 374, 85, 582, 1508, 502, 85, 831, 85,
	400, 355, 1540, 424, 891, 1443, 1529, 1442, 1141, 398,
	695, 1444, 286, 1539, 925, 1506, 285, 869, 1551, 1443,
	1542, 1442, 1531, 352, 547, 1444, 1537, 1523, 852, 519,
	258, 1581, 1560, 1561, 83, 1618, 1407, 239, 1408, 1549,
	1524, 1525, 924, 903, 83, 1261, 926, 50, 19, 17,
	85, 283, 283, 16, 15, 293, 13, 12, 293, 299,
	293, 1410, 1574, 293, 307, 293, 239, 11, 1413, 18,
	904, 923, 1576, 1565, 1115, 9, 1572, 8, 1552, 7,
	1563, 24, 23, 22, 5, 1575, 339, 4, 2, 1,
	0, 0, 0, 0, 504, 924, 0, 0, 1589, 0,
	925, 0, 1556, 0, 0, 0, 0, 1591, 1597, 1443,
	1593, 1442, 85, 85, 85, 1444, 924, 0, 1590, 1409,
	85, 85, 0, 904, 923, 0, 85, 1592, 85, 0,
	85, 85, 85, 85, 1602, 789, 291, 0, 85, 583,
	0, 0, 0, 0, 904, 923, 0, 85, 0, 903,
	1609, 0, 926, 0, 1603, 85, 85, 1606, 584, 85,
	1625, 0, 291, 0, 0, 0, 1025, 1623, 85, 85,
	0, 1620, 1443, 1626, 1442, 0, 0, 1628, 1444, 1622,
	1645, 1627, 0, 0, 0, 0, 1624, 0, 1601, 1644,
	924, 1646, 1656, 1656, 1647, 0, 1595, 0, 0, 0,
	0, 1657, 903, 1660, 1658, 926, 925, 0, 0, 0,
	85, 1664, 0, 1666, 1656, 1667, 1615, 1616, 904, 923,
	0, 0, 705, 903, 0, 0, 926, 1679, 1678, 0,
	0, 0, 0, 0, 239, 239, 0, 1200, 1665, 0,
	707, 1656, 1684, 0, 0, 0, 0, 0, 900, 0,
	1200, 0, 1216, 1217, 1218, 1058, 0, 0, 0, 925,
	706, 0, 1633, 85, 83, 85, 293, 85, 239, 0,
	379, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	925, 1213, 900, 0, 1088, 283, 0, 0, 0, 900,
	0, 0, 1088, 0, 1213, 0, 293, 903, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 293, 293, 85,
	522, 85, 0, 0, 0, 0, 0, 0, 0, 85,
	900, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 0,
	539, 1200, 539, 1216, 1217, 1218, 0, 0, 0, 0,
	0, 0, 721, 1472, 925, 291, 0, 241, 0, 0,
	0, 239, 0, 539, 239, 239, 239, 1214, 239, 1025,
	1025, 252, 0, 0, 0, 0, 83, 0, 0, 0,
	1214, 0, 682, 0, 0, 1213, 0, 85, 85, 1160,
	1161, 85, 0, 0, 0, 0, 0, 0, 0, 85,
	283, 0, 0, 701, 243, 0, 900, 722, 0, 0,
	0, 85, 0, 0, 0, 0, 582, 0, 0, 0,
	0, 0, 1215, 242, 244, 0, 0, 1025, 1025, 1025,
	0, 0, 0, 0, 0, 1215, 0, 0, 0, 85,
	85, 85, 0, 85, 0, 0, 0, 1221, 1222, 1223,
	0, 0, 0, 0, 0, 1219, 245, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 246, 247, 0, 0,
	0, 1214, 0, 713, 714, 715, 708, 709, 710, 711,
	712, 248, 85, 0, 0, 0, 0, 1209, 1206, 1207,
	1208, 1201, 1202, 1203, 1204, 1205, 1210, 1211, 1212, 293,
	1209, 1206, 1207, 1208, 1201, 1202, 1203, 1204, 1205, 0,
	418, 32, 900, 804, 0, 0, 0, 293, 0, 0,
	293, 820, 0, 0, 0, 293, 1215, 834, 835, 0,
	293, 0, 0, 293, 239, 239, 0, 0, 32, 0,
	539, 701, 0, 0, 0, 0, 0, 0, 0, 1025,
	1025, 832, 0, 0, 270, 0, 0, 278, 0, 0,
	0, 0, 0, 0, 32, 900, 0, 0, 0, 1314,
	1315, 249, 0, 0, 250, 278, 0, 0, 251, 0,
	0, 0, 291, 0, 0, 291, 900, 1210, 1211, 1212,
	0, 1209, 1206, 1207, 1208, 1201, 1202, 1203, 1204, 1205,
	0, 0, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
	0, 1025, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	0, 1379, 0, 0, 914, 929, 905, 922, 921, 0,
	0, 907, 906, 0, 0, 0, 931, 930, 0, 0,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 804, 0, 0, 927, 0, 919, 918, 0,
	0, 0, 0, 0, 0, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 916, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 910, 911, 912, 0, 578, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 291, 0, 0, 291, 0, 0,
	705, 0, 723, 724, 725, 0, 0, 0, 0, 920,
	0, 0, 726, 0, 0, 0, 0, 0, 707, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 915, 0, 0, 0, 0, 706, 0,
	293, 1059, 1060, 0, 720, 0, 804, 0, 0, 1065,
	0, 0, 0, 1025, 0, 1070, 1071, 1073, 1075, 1076,
	913, 1079, 1080, 0, 0, 0, 909, 0, 0, 293,
	0, 1090, 908, 1512, 0, 928, 0, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 539, 0, 0,
	0, 0, 864, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 731, 0, 0, 0, 682, 0,
	239, 293, 0, 1113, 728, 0, 0, 0, 0, 0,
	721, 0, 1120, 0, 0, 1025, 0, 0, 1137, 270,
	293, 0, 270, 270, 0, 0, 0, 1545, 0, 0,
	0, 0, 727, 0, 0, 1569, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	746, 0, 0, 0, 705, 0, 723, 724, 725, 0,
	0, 0, 0, 0, 0, 722, 726, 0, 0, 0,
	0, 0, 707, 0, 732, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 705, 0, 723, 724, 725,
	0, 1025, 706, 0, 0, 0, 0, 726, 720, 0,
	0, 0, 0, 707, 0, 732, 0, 0, 0, 0,
	0, 1608, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 729, 0, 717, 718, 719, 720,
	716, 713, 714, 715, 708, 709, 710, 711, 712, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	32, 1055, 0, 0, 0, 0, 733, 0, 0, 1617,
	0, 0, 0, 32, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 721, 0, 0, 733, 0, 0,
	0, 701, 0, 0, 0, 0, 0, 0, 0, 731,
	832, 0, 0, 0, 0, 0, 727, 0, 0, 728,
	0, 0, 0, 0, 0, 721, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1282,
	0, 804, 0, 682, 0, 0, 1288, 727, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 293, 0, 730,
	293, 0, 0, 0, 0, 705, 1137, 723, 724, 725,
	1306, 0, 1137, 0, 0, 0, 0, 726, 0, 0,
	722, 0, 0, 707, 0, 732, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 729, 720,
	717, 718, 719, 0, 716, 713, 714, 715, 708, 709,
	710, 711, 712, 1348, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 717, 718, 719, 894, 716, 713, 714, 715, 708,
	709, 710, 711, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 1240, 0, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 705, 731,
	723, 724, 725, 0, 0, 1399, 1400, 804, 0, 728,
	726, 0, 0, 701, 701, 721, 707, 0, 732, 1424,
	0, 1425, 0, 293, 1427, 1428, 1429, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 706, 727, 1439, 0,
	804, 1439, 720, 0, 0, 0, 0, 0, 293, 293,
	0, 0, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 1137, 0, 0, 0, 0, 0, 0, 0,
	722, 0, 0, 705, 0, 723, 724, 725, 0, 0,
	730, 0, 0, 0, 0, 726, 278, 0, 0, 0,
	0, 707, 0, 732, 0, 0, 0, 0, 0, 0,
	733, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 706, 731, 0, 0, 0, 0, 720, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 721, 729,
	0, 717, 718, 719, 0, 716, 713, 714, 715, 708,
	709, 710, 711, 712, 0, 0, 0, 0, 32, 0,
	727, 0, 1239, 0, 0, 0, 804, 1138, 1507, 0,
	239, 1200, 0, 1216, 1217, 1218, 0, 293, 0, 0,
	0, 0, 0, 1471, 0, 733, 0, 0, 0, 0,
	0, 0, 0, 722, 0, 1439, 0, 731, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 728, 0, 1439,
	0, 0, 293, 721, 1548, 1213, 0, 0, 0, 0,
	0, 0, 293, 0, 0, 0, 0, 0, 701, 0,
	972, 0, 0, 0, 0, 727, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 717, 718, 719, 0, 716, 713,
	714, 715, 708, 709, 710, 711, 712, 0, 722, 0,
	0, 0, 0, 0, 0, 1238, 0, 0, 730, 0,
	0, 0, 0, 0, 0, 1219, 0, 0, 0, 0,
	1583, 1584, 0, 0, 1588, 0, 0, 0, 0, 1439,
	742, 1214, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 717,
	718, 719, 0, 716, 713, 714, 715, 708, 709, 710,
	711, 712, 701, 701, 293, 0, 239, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 1215, 0, 0, 0,
	0, 0, 1439, 1548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1210, 1211, 1212,
	0, 1209, 1206, 1207, 1208, 1201, 1202, 1203, 1204, 1205,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 32, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 894, 894, 124, 0, 894,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 292, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 240, 157, 158,
	49, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 51, 169,
	170, 0, 223, 224, 0, 0, 171, 225, 226, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 0, 0,
	178, 179, 180, 322, 228, 0, 181, 0, 0, 0,
	47, 182, 183, 184, 185, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 1532, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 87, 88, 586, 89, 587, 588,
	589, 590, 591, 592, 593, 594, 90, 91, 186, 187,
	188, 92, 189, 190, 595, 93, 191, 192, 94, 596,
	597, 193, 194, 195, 598, 196, 599, 323, 600, 95,
	96, 97, 0, 98, 601, 99, 602, 324, 100, 101,
	603, 604, 605, 606, 607, 608, 102, 103, 104, 105,
	197, 106, 198, 199, 609, 610, 107, 611, 612, 613,
	108, 109, 614, 615, 742, 616, 200, 110, 201, 617,
	618, 111, 112, 202, 113, 619, 114, 620, 621, 325,
	622, 115, 203, 623, 204, 624, 116, 117, 205, 206,
	625, 626, 118, 627, 326, 119, 207, 208, 209, 628,
	210, 629, 327, 120, 328, 121, 122, 630, 631, 211,
	329, 123, 330, 632, 124, 633, 634, 125, 0, 126,
	127, 128, 129, 130, 331, 131, 132, 135, 133, 635,
	134, 636, 212, 136, 213, 137, 138, 637, 638, 639,
	640, 641, 139, 214, 332, 140, 333, 215, 141, 142,
	642, 216, 143, 217, 643, 144, 145, 146, 218, 147,
	148, 644, 150, 151, 149, 152, 645, 153, 334, 154,
	155, 219, 156, 0, 240, 157, 158, 646, 159, 160,
	647, 161, 162, 335, 163, 220, 164, 648, 165, 166,
	168, 221, 167, 222, 649, 650, 169, 170, 651, 223,
	224, 652, 653, 171, 225, 226, 654, 172, 173, 174,
	175, 655, 656, 176, 177, 657, 658, 178, 179, 180,
	227, 228, 659, 181, 660, 661, 662, 663, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 87, 88,
	586, 89, 587, 588, 589, 590, 591, 592, 593, 594,
	90, 91, 186, 187, 188, 92, 189, 190, 595, 93,
	191, 192, 94, 596, 597, 193, 194, 195, 598, 196,
	599, 323, 600, 95, 96, 97, 0, 98, 601, 99,
	602, 324, 100, 101, 603, 604, 605, 606, 607, 608,
	102, 103, 104, 105, 197, 106, 198, 199, 609, 610,
	107, 611, 612, 613, 108, 109, 614, 615, 0, 616,
	200, 110, 201, 617, 618, 111, 112, 202, 113, 619,
	114, 620, 621, 325, 622, 115, 203, 623, 204, 624,
	116, 117, 205, 206, 625, 626, 118, 627, 326, 119,
	207, 208, 209, 628, 210, 629, 327, 120, 328, 121,
	122, 630, 631, 211, 329, 123, 330, 632, 124, 633,
	634, 125, 0, 126, 127, 128, 129, 130, 331, 131,
	132, 135, 133, 635, 134, 636, 212, 136, 213, 137,
	138, 637, 638, 639, 640, 641, 139, 214, 332, 140,
	333, 215, 141, 142, 642, 216, 143, 217, 643, 144,
	145, 146, 218, 147, 148, 644, 150, 151, 149, 152,
	645, 153, 334, 154, 155, 219, 156, 0, 240, 157,
	158, 646, 159, 160, 647, 161, 162, 335, 163, 220,
	164, 648, 165, 166, 168, 221, 167, 222, 649, 650,
	169, 170, 651, 223, 224, 652, 653, 171, 225, 226,
	654, 172, 173, 174, 175, 655, 656, 176, 177, 657,
	658, 178, 179, 180, 227, 228, 659, 181, 660, 661,
	662, 663, 182, 183, 184, 185, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 87,
	88, 586, 89, 587, 588, 589, 590, 591, 592, 593,
	594, 90, 91, 186, 187, 188, 92, 189, 190, 595,
	93, 191, 192, 94, 596, 597, 193, 194, 195, 598,
	196, 599, 323, 600, 95, 96, 97, 0, 98, 601,
	99, 602, 324, 100, 101, 603, 604, 605, 606, 607,
	608, 102, 103, 104, 105, 197, 106, 198, 199, 609,
	610, 107, 611, 612, 613, 108, 109, 614, 615, 0,
	616, 200, 110, 201, 617, 618, 111, 112, 202, 113,
	619, 114, 620, 621, 325, 622, 115, 203, 623, 204,
	624, 116, 117, 205, 206, 625, 626, 118, 627, 326,
	119, 207, 208, 209, 628, 210, 629, 327, 120, 328,
	121, 122, 630, 631, 211, 329, 123, 330, 632, 124,
	633, 634, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 635, 134, 636, 212, 136, 213,
	137, 138, 637, 638, 639, 640, 641, 139, 214, 332,
	140, 333, 215, 141, 142, 642, 216, 143, 217, 643,
	144, 145, 146, 218, 147, 148, 644, 150, 151, 149,
	152, 645, 153, 334, 154, 155, 219, 156, 0, 240,
	157, 158, 646, 159, 160, 647, 161, 162, 335, 163,
	220, 164, 648, 165, 166, 168, 221, 167, 222, 649,
	650, 169, 170, 651, 223, 224, 652, 653, 171, 225,
	226, 654, 172, 173, 174, 175, 655, 656, 176, 177,
	657, 658, 178, 179, 180, 227, 228, 659, 181, 660,
	661, 662, 663, 182, 183, 184, 185, 438, 426, 427,
	428, 425, 414, 0, 0, 0, 0, 0, 0, 87,
	88, 990, 89, 0, 0, 0, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 991, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 325, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 326,
	119, 477, 478, 479, 0, 445, 0, 327, 120, 328,
	121, 122, 0, 0, 465, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 332,
	140, 333, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 423, 156, 0, 240,
	157, 158, 0, 159, 160, 451, 161, 162, 335, 163,
	482, 164, 0, 165, 166, 168, 221, 167, 457, 0,
	0, 169, 170, 0, 223, 483, 0, 0, 171, 458,
	459, 432, 172, 173, 174, 175, 0, 0, 176, 177,
	452, 0, 178, 179, 180, 227, 484, 989, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 410, 0, 438,
	426, 427, 428, 425, 414, 0, 0, 406, 407, 992,
	0, 87, 88, 408, 89, 0, 415, 987, 0, 420,
	0, 0, 0, 90, 91, 186, 467, 468, 92, 469,
	470, 0, 93, 191, 192, 94, 435, 453, 471, 472,
	195, 0, 463, 0, 446, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 324, 100, 101, 0, 447, 449,
	0, 448, 450, 102, 103, 104, 105, 473, 106, 474,
	475, 505, 0, 107, 0, 0, 0, 466, 109, 0,
	0, 0, 0, 419, 110, 454, 433, 0, 111, 112,
	476, 113, 0, 114, 0, 0, 325, 0, 115, 464,
	0, 204, 0, 116, 117, 460, 462, 0, 0, 118,
	0, 326, 119, 477, 478, 479, 0, 445, 0, 327,
	120, 328, 121, 122, 0, 0, 465, 329, 123, 330,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 331, 131, 132, 135, 133, 409, 134, 434, 461,
	136, 480, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 332, 140, 333, 455, 141, 142, 0, 456, 143,
	217, 0, 144, 145, 146, 481, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 334, 154, 155, 423, 156,
	0, 240, 157, 158, 49, 159, 160, 451, 161, 162,
	335, 163, 482, 164, 0, 165, 166, 168, 221, 167,
	457, 0, 51, 169, 170, 0, 223, 483, 0, 0,
	171, 458, 459, 432, 172, 173, 174, 175, 0, 0,
	176, 177, 452, 0, 178, 179, 180, 322, 484, 0,
	181, 0, 0, 0, 47, 182, 183, 184, 185, 410,
	48, 438, 426, 427, 428, 425, 414, 0, 0, 406,
	407, 0, 0, 87, 88, 408, 89, 0, 415, 0,
	0, 420, 0, 0, 0, 90, 91, 186, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 324, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 325, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 326, 119, 477, 478, 479, 0, 445,
	0, 327, 120, 328, 121, 122, 0, 0, 465, 329,
	123, 330, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 331, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 332, 140, 333, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 334, 154, 155,
	423, 156, 0, 240, 157, 158, 49, 159, 160, 451,
	161, 162, 335, 163, 482, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 51, 169, 170, 0, 223, 483,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 322,
	484, 0, 181, 0, 0, 0, 47, 182, 183, 184,
	185, 410, 48, 438, 426, 427, 428, 425, 414, 0,
	0, 406, 407, 0, 0, 87, 88, 408, 89, 0,
	415, 0, 0, 420, 0, 0, 0, 90, 91, 186,
	467, 468, 92, 469, 470, 1035, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 324, 100,
	101, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 0, 0, 107, 0, 0,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 0, 114, 0, 1040,
	325, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 326, 119, 477, 478, 479,
	0, 445, 0, 327, 120, 328, 121, 122, 0, 1036,
	465, 329, 123, 330, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 331, 131, 132, 135, 133,
	409, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 332, 140, 333, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 334,
	154, 155, 423, 156, 0, 240, 157, 158, 0, 159,
	160, 451, 161, 162, 335, 163, 482, 164, 0, 165,
	166, 168, 221, 167, 457, 0, 0, 169, 170, 0,
	223, 483, 0, 1037, 171, 458, 459, 432, 172, 173,
	174, 175, 0, 0, 176, 177, 452, 0, 178, 179,
	180, 227, 484, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 410, 0, 438, 426, 427, 428, 425,
	414, 0, 0, 406, 407, 0, 0, 87, 88, 408,
	89, 0, 415, 0, 0, 420, 0, 0, 0, 90,
	91, 186, 467, 468, 92, 469, 470, 0, 93, 191,
	192, 94, 435, 453, 471, 472, 195, 0, 463, 0,
	446, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	324, 100, 101, 0, 447, 449, 0, 448, 450, 102,
	103, 104, 105, 473, 106, 474, 475, 0, 0, 107,
	0, 0, 0, 466, 109, 0, 0, 0, 0, 419,
	110, 454, 433, 0, 111, 112, 476, 113, 0, 114,
	0, 0, 325, 0, 115, 464, 0, 204, 0, 116,
	117, 460, 462, 0, 0, 118, 0, 326, 119, 477,
	478, 479, 0, 445, 0, 327, 120, 328, 121, 122,
	0, 0, 465, 329, 123, 330, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 331, 131, 132,
	135, 133, 409, 134, 434, 461, 136, 480, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 332, 140, 333,
	455, 141, 142, 0, 456, 143, 217, 0, 144, 145,
	146, 481, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 334, 154, 155, 423, 156, 0, 240, 157, 158,
	0, 159, 160, 451, 161, 162, 335, 163, 482, 164,
	0, 165, 166, 168, 221, 167, 457, 0, 0, 169,
	170, 0, 223, 483, 0, 0, 171, 458, 459, 432,
	172, 173, 174, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 227, 484, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 410, 0, 438, 426, 427,
	428, 425, 414, 0, 0, 406, 407, 0, 0, 87,
	88, 408, 89, 0, 415, 1382, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 325, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 326,
	119, 477, 478, 479, 0, 445, 0, 327, 120, 328,
	121, 122, 0, 0, 465, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 332,
	140, 333, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 423, 156, 0, 240,
	157, 158, 0, 159, 160, 451, 161, 162, 335, 163,
	482, 164, 0, 165, 166, 168, 221, 167, 457, 0,
	0, 169, 170, 0, 223, 483, 0, 0, 171, 458,
	459, 432, 172, 173, 174, 175, 0, 0, 176, 177,
	452, 0, 178, 179, 180, 227, 484, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 410, 0, 438,
	426, 427, 428, 425, 414, 0, 0, 406, 407, 0,
	0, 87, 88, 408, 89, 0, 415, 1325, 0, 420,
	0, 0, 0, 90, 91, 186, 467, 468, 92, 469,
	470, 0, 93, 191, 192, 94, 435, 453, 471, 472,
	195, 0, 463, 0, 446, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 324, 100, 101, 0, 447, 449,
	0, 448, 450, 102, 103, 104, 105, 473, 106, 474,
	475, 0, 0, 107, 0, 0, 0, 466, 109, 0,
	0, 0, 0, 419, 110, 454, 433, 0, 111, 112,
	476, 113, 0, 114, 0, 0, 325, 0, 115, 464,
	0, 204, 0, 116, 117, 460, 462, 0, 0, 118,
	0, 326, 119, 477, 478, 479, 0, 445, 0, 327,
	120, 328, 121, 122, 0, 0, 465, 329, 123, 330,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 331, 131, 132, 135, 133, 409, 134, 434, 461,
	136, 480, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 332, 140, 333, 455, 141, 142, 0, 456, 143,
	217, 0, 144, 145, 146, 481, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 334, 154, 155, 423, 156,
	0, 240, 157, 158, 0, 159, 160, 451, 161, 162,
	335, 163, 482, 164, 0, 165, 166, 168, 221, 167,
	457, 0, 0, 169, 170, 0, 223, 483, 0, 0,
	171, 458, 459, 432, 172, 173, 174, 175, 0, 0,
	176, 177, 452, 0, 178, 179, 180, 227, 484, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 410,
	0, 438, 426, 427, 428, 425, 414, 0, 0, 406,
	407, 0, 0, 87, 88, 408, 89, 0, 415, 986,
	0, 420, 0, 0, 0, 90, 91, 186, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 324, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 325, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 326, 119, 477, 478, 479, 0, 445,
	0, 327, 120, 328, 121, 122, 0, 0, 465, 329,
	123, 330, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 331, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 332, 140, 333, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 334, 154, 155,
	423, 156, 0, 240, 157, 158, 0, 159, 160, 451,
	161, 162, 335, 163, 482, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 0, 169, 170, 0, 223, 483,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 227,
	484, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 407, 0, 0, 0, 0, 408, 748, 982,
	415, 438, 426, 427, 428, 425, 414, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 420, 0, 0, 0, 90, 91, 186, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 324, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 325, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 326, 119, 477, 478, 479, 0, 445,
	0, 327, 120, 328, 121, 122, 0, 0, 465, 329,
	123, 330, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 331, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 332, 140, 333, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 334, 154, 155,
	423, 156, 0, 240, 157, 158, 0, 159, 160, 451,
	161, 162, 335, 163, 482, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 0, 169, 170, 0, 223, 483,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 227,
	484, 1331, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 438, 426, 427, 428, 425, 414, 0,
	0, 406, 407, 0, 0, 87, 88, 408, 89, 0,
	415, 0, 0, 420, 0, 0, 0, 90, 91, 186,
	467, 468, 92, 469, 470, 0, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 324, 100,
	101, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 505, 0, 107, 0, 0,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 0, 114, 0, 0,
	325, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 326, 119, 477, 478, 479,
	0, 445, 0, 327, 120, 328, 121, 122, 0, 0,
	465, 329, 123, 330, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 331, 131, 132, 135, 133,
	409, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 332, 140, 333, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 334,
	154, 155, 423, 156, 0, 240, 157, 158, 0, 159,
	160, 451, 161, 162, 335, 163, 482, 164, 0, 165,
	166, 168, 221, 167, 457, 0, 0, 169, 170, 0,
	223, 483, 0, 0, 171, 458, 459, 432, 172, 173,
	174, 175, 0, 0, 176, 177, 452, 0, 178, 179,
	180, 227, 484, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 410, 0, 438, 426, 427, 428, 425,
	414, 0, 0, 406, 407, 0, 0, 87, 88, 408,
	89, 0, 415, 0, 0, 420, 0, 0, 0, 90,
	91, 186, 467, 468, 92, 469, 470, 0, 93, 191,
	192, 94, 435, 453, 471, 472, 195, 0, 463, 0,
	446, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	324, 100, 101, 0, 447, 449, 0, 448, 450, 102,
	103, 104, 105, 473, 106, 474, 475, 0, 0, 107,
	0, 0, 0, 466, 109, 0, 0, 0, 0, 419,
	110, 454, 433, 0, 111, 112, 476, 113, 0, 114,
	0, 0, 325, 0, 115, 464, 0, 204, 0, 116,
	117, 460, 462, 0, 0, 118, 0, 326, 119, 477,
	478, 479, 0, 445, 0, 327, 120, 328, 121, 122,
	0, 0, 465, 329, 123, 330, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 331, 131, 132,
	135, 133, 409, 134, 434, 461, 136, 480, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 332, 140, 333,
	455, 141, 142, 0, 456, 143, 217, 0, 144, 145,
	146, 481, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 334, 154, 155, 423, 156, 0, 240, 157, 158,
	0, 159, 160, 451, 161, 162, 335, 163, 482, 164,
	0, 165, 166, 168, 221, 167, 457, 0, 0, 169,
	170, 0, 223, 483, 0, 0, 171, 458, 459, 432,
	172, 173, 174, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 227, 484, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 410, 0, 438, 426, 427,
	428, 425, 414, 0, 0, 406, 407, 404, 0, 87,
	88, 408, 89, 0, 415, 0, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 1040, 325, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 326,
	119, 477, 478, 479, 0, 445, 0, 327, 120, 328,
	121, 122, 0, 0, 465, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 332,
	140, 333, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 423, 156, 0, 240,
	157, 158, 0, 159, 160, 451, 161, 162, 335, 163,
	482, 164, 0, 165, 166, 168, 221, 167, 457, 0,
	0, 169, 170, 0, 223, 483, 0, 0, 171, 458,
	459, 432, 172, 173, 174, 175, 0, 0, 176, 177,
	452, 0, 178, 179, 180, 227, 484, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 407, 0,
	0, 0, 0, 408, 0, 0, 415, 438, 426, 427,
	428, 425, 414, 0, 0, 0, 0, 0, 0, 87,
	88, 689, 89, 0, 0, 0, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 325, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 326,
	119, 477, 478, 479, 0, 445, 0, 327, 120, 328,
	121, 122, 0, 0, 465, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 332,
	140, 333, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 423, 156, 0, 240,
	157, 158, 0, 159, 160, 451, 161, 162, 335, 163,
	482, 164, 0, 165, 166, 168, 221, 167, 457, 0,
	0, 169, 170, 0, 223, 483, 0, 0, 171, 458,
	459, 432, 172, 173, 174, 175, 0, 0, 176, 177,
	452, 0, 178, 179, 180, 227, 484, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 410, 0, 438,
	426, 427, 428, 425, 414, 0, 0, 406, 407, 0,
	0, 87, 88, 408, 89, 0, 415, 0, 0, 420,
	0, 0, 0, 90, 91, 186, 467, 468, 92, 469,
	470, 0, 93, 191, 192, 94, 435, 453, 471, 472,
	195, 0, 463, 0, 446, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 324, 100, 1655, 0, 447, 449,
	0, 448, 450, 102, 103, 104, 105, 473, 106, 474,
	475, 0, 0, 107, 0, 0, 0, 466, 109, 0,
	0, 0, 0, 419, 110, 454, 433, 0, 111, 112,
	476, 113, 0, 114, 0, 0, 325, 0, 115, 464,
	0, 204, 0, 116, 117, 460, 462, 0, 0, 118,
	0, 326, 119, 477, 478, 479, 0, 445, 0, 327,
	120, 328, 121, 122, 0, 0, 465, 329, 123, 330,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 331, 131, 132, 135, 133, 409, 134, 434, 461,
	136, 480, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 332, 140, 333, 455, 141, 142, 0, 456, 143,
	217, 0, 144, 145, 146, 481, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 334, 154, 155, 423, 156,
	0, 240, 157, 158, 0, 159, 160, 451, 161, 162,
	335, 163, 482, 164, 0, 165, 166, 168, 221, 167,
	457, 0, 0, 169, 170, 0, 223, 483, 0, 0,
	171, 458, 459, 432, 172, 173, 1654, 175, 0, 0,
	176, 177, 452, 0, 178, 179, 180, 227, 484, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 410,
	0, 438, 426, 427, 428, 425, 414, 0, 0, 406,
	407, 0, 0, 87, 88, 408, 89, 0, 415, 0,
	0, 420, 0, 0, 0, 90, 91, 1653, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 324, 100, 1655, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 325, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 326, 119, 477, 478, 479, 0, 445,
	0, 327, 120, 328, 121, 122, 0, 0, 465, 329,
	123, 330, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 331, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 332, 140, 333, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 334, 154, 155,
	423, 156, 0, 240, 157, 158, 0, 159, 160, 451,
	161, 162, 335, 163, 482, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 0, 169, 170, 0, 223, 483,
	0, 0, 171, 458, 459, 432, 172, 173, 1654, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 227,
	484, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 438, 426, 427, 428, 425, 414, 0,
	0, 406, 407, 0, 0, 87, 88, 408, 89, 0,
	415, 0, 0, 420, 0, 0, 0, 90, 91, 186,
	467, 468, 92, 469, 470, 0, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 324, 100,
	101, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 0, 0, 107, 0, 0,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 0, 114, 0, 0,
	325, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 326, 119, 477, 478, 479,
	0, 445, 0, 327, 120, 328, 121, 122, 0, 0,
	465, 329, 123, 330, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 331, 131, 132, 135, 133,
	409, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 332, 140, 333, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 334,
	154, 155, 423, 156, 0, 240, 157, 158, 0, 159,
	160, 451, 161, 162, 335, 163, 482, 164, 0, 165,
	166, 168, 221, 167, 457, 0, 0, 169, 170, 0,
	223, 483, 0, 0, 171, 458, 459, 432, 172, 173,
	174, 175, 0, 0, 176, 177, 452, 0, 178, 179,
	180, 227, 484, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 410, 0, 438, 426, 427, 428, 425,
	414, 0, 0, 406, 407, 0, 0, 87, 88, 408,
	89, 0, 415, 0, 0, 420, 0, 0, 0, 90,
	91, 186, 467, 468, 92, 469, 470, 0, 93, 191,
	192, 94, 435, 453, 471, 472, 195, 0, 463, 0,
	446, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	324, 100, 101, 0, 447, 449, 0, 448, 450, 102,
	103, 104, 105, 473, 106, 474, 475, 0, 0, 107,
	0, 0, 0, 466, 109, 0, 0, 0, 0, 419,
	110, 454, 433, 0, 111, 112, 476, 113, 0, 114,
	0, 0, 325, 0, 115, 464, 0, 204, 0, 116,
	117, 460, 462, 0, 0, 118, 0, 326, 119, 477,
	478, 479, 0, 445, 0, 327, 120, 328, 121, 122,
	0, 0, 465, 329, 123, 330, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 331, 131, 132,
	135, 133, 0, 134, 434, 461, 136, 480, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 332, 140, 333,
	455, 141, 142, 0, 456, 143, 217, 0, 144, 145,
	146, 481, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 334, 154, 155, 1030, 156, 0, 240, 157, 158,
	0, 159, 160, 451, 161, 162, 335, 163, 482, 164,
	0, 165, 166, 168, 221, 167, 457, 0, 0, 169,
	170, 0, 223, 483, 0, 0, 171, 458, 459, 432,
	172, 173, 174, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 227, 484, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 438, 426, 427, 428, 425,
	414, 0, 0, 0, 0, 1026, 1027, 87, 88, 0,
	89, 1028, 0, 0, 1029, 420, 0, 0, 0, 90,
	91, 0, 467, 468, 92, 469, 470, 0, 93, 191,
	192, 94, 435, 453, 471, 472, 195, 0, 463, 0,
	446, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	324, 100, 1655, 0, 447, 449, 0, 448, 450, 102,
	103, 104, 105, 473, 106, 474, 475, 0, 0, 107,
	0, 0, 0, 466, 109, 0, 0, 0, 0, 419,
	110, 454, 433, 0, 111, 112, 476, 113, 0, 114,
	0, 0, 325, 0, 115, 464, 0, 204, 0, 116,
	117, 460, 462, 0, 0, 118, 0, 326, 119, 477,
	478, 479, 0, 445, 0, 0, 120, 328, 121, 122,
	0, 0, 465, 329, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 331, 131, 132,
	135, 133, 409, 134, 434, 461, 136, 480, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 332, 140, 333,
	455, 141, 142, 0, 456, 143, 217, 0, 144, 145,
	146, 481, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 334, 154, 155, 423, 156, 0, 240, 157, 158,
	0, 159, 160, 451, 161, 162, 0, 163, 482, 164,
	0, 165, 166, 168, 221, 167, 457, 0, 0, 169,
	170, 0, 223, 483, 0, 0, 171, 458, 459, 432,
	172, 173, 1654, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 227, 484, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 407, 87, 88, 0,
	89, 408, 0, 0, 415, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 453, 193, 194, 195, 0, 463, 0,
	446, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	324, 100, 101, 0, 447, 449, 0, 448, 450, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 454, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 325, 0, 115, 464, 0, 204, 0, 116,
	117, 460, 462, 0, 0, 118, 0, 326, 119, 207,
	208, 209, 0, 210, 0, 327, 120, 328, 121, 122,
	0, 0, 465, 329, 123, 330, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 331, 131, 132,
	135, 133, 0, 134, 0, 461, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 332, 140, 333,
	455, 141, 142, 0, 456, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 334, 154, 155, 219, 156, 0, 240, 157, 158,
	0, 159, 160, 451, 161, 162, 335, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 457, 0, 0, 169,
	170, 0, 223, 224, 0, 0, 171, 458, 459, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 227, 228, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 1441, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	323, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	324, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 325, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 326, 119, 207,
	208, 209, 0, 210, 0, 327, 120, 328, 121, 122,
	0, 0, 211, 329, 123, 330, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 331, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 332, 140, 333,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 334, 154, 155, 219, 156, 0, 240, 157, 158,
	49, 159, 160, 0, 161, 162, 335, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 51, 169,
	170, 0, 223, 224, 0, 0, 171, 225, 226, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 0, 0,
	178, 179, 180, 322, 228, 0, 181, 0, 0, 0,
	47, 182, 183, 184, 185, 0, 48, 318, 561, 565,
	0, 566, 556, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 46, 0, 0, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 323, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 569,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 558, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 325, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 326,
	119, 207, 208, 209, 0, 210, 0, 327, 120, 328,
	121, 122, 0, 0, 211, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 559, 0, 0, 0, 139, 214, 332,
	140, 333, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 335, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 557, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 318, 561, 565,
	0, 566, 556, 0, 0, 0, 0, 567, 562, 87,
	88, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 323, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 552,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 558, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 325, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 326,
	119, 207, 208, 209, 0, 210, 0, 327, 120, 328,
	121, 122, 0, 0, 211, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 559, 0, 0, 0, 139, 214, 332,
	140, 333, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 335, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 557, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 318, 561, 565,
	0, 566, 556, 0, 0, 0, 0, 567, 562, 87,
	88, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 323, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 558, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 325, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 326,
	119, 207, 208, 209, 0, 210, 0, 327, 120, 328,
	121, 122, 0, 0, 211, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 559, 0, 0, 0, 139, 214, 332,
	140, 333, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 335, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 557, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 84, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 567, 562, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 49, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	51, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 322, 228, 0, 181, 0,
	0, 0, 47, 182, 183, 184, 185, 84, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 46, 0, 1136, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 395, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 292, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 896, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 833, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 1349, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 495, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 537, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	536, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 540,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 318, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 540,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 323, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 324, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 325, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 326,
	119, 207, 208, 209, 0, 210, 0, 327, 120, 328,
	121, 122, 0, 0, 211, 329, 123, 330, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 331,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 332,
	140, 333, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 334, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 335, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 807,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 805,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 810, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 874, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 809,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 875, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 84, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 807,
	196, 0, 0, 802, 95, 96, 97, 0, 98, 805,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 810, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 801, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 809,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 808, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 84, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 0, 1136, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 292, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 298, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 292, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 1074, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 1072, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 1063, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 681, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 82,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 523, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 0, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 380, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 377, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 341, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 237, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 236, 224, 0, 0, 232, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 237, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 236, 224, 0, 0, 232, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 313, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 310, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 308, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 301, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 281, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 230,
	0, 0, 125, 0, 126, 127, 128, 129, 237, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 240,
	157, 158, 0, 159, 231, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 236, 224, 0, 0, 232, 225,
	226, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 0, 0, 216, 143, 217, 0,
	144, 0, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 0, 0, 240,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 0, 0, 171, 225,
	226, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 227, 228, 705, 181, 723,
	724, 725, 0, 182, 183, 184, 185, 0, 0, 726,
	0, 0, 0, 0, 0, 707, 705, 732, 723, 724,
	725, 0, 0, 0, 0, 0, 0, 0, 726, 0,
	0, 0, 0, 0, 707, 706, 732, 0, 0, 0,
	0, 720, 0, 705, 0, 723, 724, 725, 0, 0,
	0, 0, 0, 0, 706, 726, 0, 0, 0, 0,
	720, 707, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 0, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 0, 733, 0,
	0, 728, 0, 0, 0, 0, 0, 721, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 733, 721, 0, 0, 727,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 727, 0,
	0, 0, 0, 721, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 727, 0, 0, 0, 0,
	0, 722, 705, 0, 723, 724, 725, 0, 0, 0,
	0, 730, 0, 0, 726, 0, 0, 0, 0, 0,
	707, 0, 732, 0, 0, 0, 0, 0, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 730, 0,
	706, 729, 0, 717, 718, 719, 720, 716, 713, 714,
	715, 708, 709, 710, 711, 712, 0, 0, 0, 0,
	729, 1611, 717, 718, 719, 0, 716, 713, 714, 715,
	708, 709, 710, 711, 712, 0, 0, 0, 0, 1200,
	1594, 1216, 1217, 1218, 0, 0, 0, 729, 0, 717,
	718, 719, 0, 716, 713, 714, 715, 708, 709, 710,
	711, 712, 0, 0, 733, 0, 0, 1573, 0, 705,
	0, 723, 724, 725, 0, 0, 731, 0, 0, 0,
	0, 726, 0, 1213, 0, 0, 728, 707, 0, 732,
	0, 0, 721, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 0, 720, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 0, 723, 724, 725, 0, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 707, 0, 732, 0, 0, 705, 722, 723, 724,
	725, 0, 0, 1219, 0, 0, 0, 730, 726, 0,
	0, 706, 0, 0, 707, 0, 732, 720, 0, 1214,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 706, 0, 0, 0, 0, 0,
	720, 0, 0, 728, 0, 0, 0, 0, 0, 721,
	0, 0, 0, 0, 0, 0, 729, 0, 717, 718,
	719, 0, 716, 713, 714, 715, 708, 709, 710, 711,
	712, 727, 0, 0, 1215, 733, 1568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 733, 0,
	0, 0, 0, 721, 722, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 727, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 1210, 1211, 1212, 0, 1209,
	1206, 1207, 1208, 1201, 1202, 1203, 1204, 1205, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	0, 0, 0, 729, 0, 717, 718, 719, 730, 716,
	713, 714, 715, 708, 709, 710, 711, 712, 0, 0,
	0, 722, 0, 1564, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 705, 0, 723, 724, 725, 0,
	0, 0, 0, 0, 0, 0, 726, 0, 0, 0,
	0, 0, 707, 0, 732, 0, 0, 729, 0, 717,
	718, 719, 0, 716, 713, 714, 715, 708, 709, 710,
	711, 712, 706, 0, 0, 0, 0, 1503, 720, 0,
	729, 0, 717, 718, 719, 0, 716, 713, 714, 715,
	708, 709, 710, 711, 712, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 705, 0,
	723, 724, 725, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 0, 0, 0, 707, 0, 732, 0,
	0, 705, 0, 723, 724, 725, 733, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 706, 0, 731, 707,
	0, 732, 720, 0, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 0, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 705, 0, 723, 724, 725,
	733, 0, 0, 0, 0, 0, 0, 726, 0, 722,
	0, 0, 731, 707, 0, 732, 0, 0, 0, 730,
	0, 0, 728, 733, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 706, 0, 731, 0, 0, 0, 720,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	727, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	717, 718, 719, 727, 716, 713, 714, 715, 708, 709,
	710, 711, 712, 722, 0, 0, 0, 0, 1414, 0,
	0, 0, 705, 730, 723, 724, 725, 733, 0, 0,
	0, 0, 0, 0, 726, 0, 722, 0, 0, 731,
	707, 0, 732, 0, 0, 0, 730, 0, 0, 728,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 0,
	706, 0, 0, 0, 0, 0, 720, 0, 0, 0,
	0, 0, 729, 0, 717, 718, 719, 727, 716, 713,
	714, 715, 708, 709, 710, 711, 712, 0, 0, 0,
	0, 0, 1352, 0, 0, 729, 0, 717, 718, 719,
	0, 716, 713, 714, 715, 708, 709, 710, 711, 712,
	722, 0, 0, 0, 0, 1327, 0, 0, 0, 705,
	730, 723, 724, 725, 733, 0, 0, 0, 0, 0,
	0, 726, 0, 0, 0, 0, 731, 707, 0, 732,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 729,
	0, 717, 718, 719, 727, 716, 713, 714, 715, 708,
	709, 710, 711, 712, 0, 0, 0, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 0, 0, 705, 0,
	723, 724, 725, 0, 0, 1672, 0, 722, 0, 0,
	726, 0, 0, 0, 0, 0, 707, 730, 732, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 706, 0, 0, 0,
	0, 0, 720, 728, 0, 0, 0, 0, 0, 721,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 717, 718,
	719, 727, 716, 713, 714, 715, 708, 709, 710, 711,
	712, 0, 0, 1671, 1398, 1230, 0, 705, 1229, 723,
	724, 725, 0, 0, 0, 0, 0, 0, 0, 726,
	733, 0, 0, 885, 722, 707, 0, 732, 0, 0,
	0, 735, 731, 0, 730, 0, 0, 705, 0, 723,
	724, 725, 728, 0, 0, 706, 0, 0, 721, 726,
	0, 720, 734, 0, 0, 707, 0, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 706, 886, 0, 0, 0,
	0, 720, 0, 729, 0, 717, 718, 719, 0, 716,
	713, 714, 715, 708, 709, 710, 711, 712, 0, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 730, 705, 0, 723, 724, 725, 0,
	0, 731, 0, 0, 0, 0, 726, 0, 0, 0,
	0, 728, 707, 0, 732, 0, 0, 721, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 706, 0, 0, 0, 0, 0, 720, 727,
	0, 728, 729, 0, 717, 718, 719, 721, 716, 713,
	714, 715, 708, 709, 710, 711, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 722, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 730, 723, 724, 725, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 733, 0, 0, 707,
	0, 732, 722, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 728, 706,
	0, 0, 0, 0, 721, 720, 0, 0, 0, 0,
	0, 729, 0, 717, 718, 719, 0, 716, 713, 714,
	715, 708, 709, 710, 711, 712, 727, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 717, 718, 719, 0, 716, 713, 714,
	715, 708, 709, 710, 711, 712, 0, 0, 705, 722,
	723, 724, 725, 733, 0, 0, 0, 0, 0, 730,
	726, 0, 0, 0, 0, 731, 707, 0, 732, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 721, 0, 0, 0, 0, 706, 0, 0, 0,
	0, 0, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 0, 729, 0,
	717, 718, 719, 0, 716, 713, 714, 715, 708, 709,
	710, 711, 712, 0, 0, 705, 0, 723, 724, 725,
	0, 0, 0, 0, 0, 0, 722, 726, 1236, 0,
	1231, 0, 0, 707, 0, 732, 730, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 731, 706, 0, 0, 0, 0, 0, 720,
	0, 0, 728, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 717, 718, 719,
	727, 716, 713, 714, 715, 708, 709, 710, 711, 712,
	0, 0, 705, 0, 723, 724, 725, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 733, 0, 0,
	707, 0, 732, 722, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 728,
	706, 0, 0, 0, 0, 721, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 717, 718, 719, 0, 716, 713,
	714, 715, 708, 709, 710, 711, 712, 0, 0, 705,
	722, 723, 724, 725, 733, 0, 0, 0, 0, 0,
	730, 726, 0, 0, 1193, 0, 731, 707, 0, 732,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 0,
	21, 0, 0, 0, 727, 0, 0, 0, 0, 729,
	35, 717, 718, 719, 1198, 716, 713, 714, 715, 708,
	709, 710, 711, 712, 705, 0, 723, 724, 725, 0,
	0, 0, 0, 37, 0, 0, 726, 722, 0, 42,
	0, 0, 707, 0, 732, 0, 0, 730, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 706, 731, 26, 0, 38, 0, 720, 0,
	27, 0, 0, 728, 0, 0, 0, 0, 0, 721,
	0, 0, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 717, 718,
	719, 727, 716, 713, 714, 715, 708, 709, 710, 711,
	712, 705, 0, 723, 724, 725, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 733, 0, 0, 707,
	0, 732, 0, 0, 722, 0, 0, 0, 731, 0,
	0, 0, 0, 705, 730, 723, 724, 725, 728, 706,
	0, 0, 0, 0, 721, 720, 0, 0, 0, 0,
	0, 707, 0, 732, 0, 0, 0, 40, 0, 0,
	29, 1200, 39, 1216, 1217, 1218, 727, 30, 0, 0,
	49, 706, 0, 1322, 33, 34, 0, 720, 0, 0,
	0, 0, 36, 729, 0, 717, 718, 719, 51, 716,
	713, 714, 715, 708, 709, 710, 711, 712, 0, 722,
	41, 0, 0, 733, 0, 1213, 0, 0, 0, 730,
	0, 0, 0, 52, 0, 731, 0, 0, 0, 0,
	47, 0, 0, 0, 0, 728, 48, 0, 0, 0,
	0, 721, 0, 0, 0, 733, 705, 0, 723, 724,
	725, 0, 0, 0, 46, 0, 0, 731, 0, 0,
	0, 0, 0, 0, 707, 0, 732, 728, 729, 0,
	717, 718, 719, 721, 716, 713, 714, 715, 708, 709,
	710, 711, 712, 0, 706, 1219, 0, 0, 0, 0,
	720, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	1200, 1214, 1216, 1217, 1218, 0, 730, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	1200, 0, 1216, 1217, 1218, 0, 0, 0, 730, 0,
	0, 0, 0, 0, 1213, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 729, 1215, 717, 718, 719,
	0, 716, 713, 714, 715, 708, 709, 710, 711, 712,
	728, 0, 0, 0, 1213, 0, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 717,
	718, 719, 0, 716, 713, 714, 715, 708, 709, 710,
	711, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1219, 0, 0, 1210, 1211, 1212,
	0, 1209, 1206, 1207, 1208, 1201, 1202, 1203, 1204, 1205,
	1214, 722, 1220, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 1219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1215, 0, 0, 0, 0,
	729, 0, 717, 718, 719, 0, 716, 713, 714, 715,
	708, 709, 710, 711, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1210, 1211, 1212, 0,
	1209, 1206, 1207, 1208, 1201, 1202, 1203, 1204, 1205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1210, 1211, 1212, 0,
	1209, 1206, 1207, 1208, 1201, 1202, 1203, 1204, 1205,
}
var sqlPact = [...]int{

	19191, -1000, -8, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 594, -1000, -1000, -1000, 467, 589, 34, 674, 674,
	14483, -1000, -1000, 17013, 1793, 322, 331, 322, 322, 350,
	14483, 431, 516, 55, -1000, 466, -23, 16783, 13333, 1118,
	-13, 12873, 196, 19191, 13103, 13333, 16553, 976, 871, 12873,
	16323, 16093, 15863, -1000, 8981, -1000, -1000, -1000, -1000, 727,
	-1000, -14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	716, -1000, 13333, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15633, 15403, 701, -1000, -1000, 411, 254, 1132, -1000, 0,
	-1000, -1000, -1000, 975, -1000, 712, 973, 966, 964, 963,
	234, 722, -1000, 701, -1000, 701, -1000, -1000, -1000, 420,
	14483, -1000, 12873, -1000, 15173, 921, 14943, -1000, 466, -1000,
	-1000, -1000, 742, 1114, 1114, 1114, 1145, 72, 69, 55,
	-21, 13333, -1000, 200, -21, 6701, 6701, -1000, -1000, 196,
	-1000, 100, 11223, -6, -1000, 6449, -1000, 869, 1034, 577,
	571, 1029, -60, 12873, 13333, 471, 14713, -1000, 1023, 87,
	1019, -1000, -33, 1016, -1000, -49, -1000, -1000, -1000, -1000,
	-1000, -1000, 196, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11473, 991, 11473, -1000,
	-1000, 1175, -1000, -1000, -16, -17, 826, 920, 9483, 9233,
	1079, 544, -1000, -1000, -1000, -4, 3913, 13333, 984, 11473,
	13333, 13333, 13333, -1000, 13333, -1000, 816, -1000, -1000, -18,
	-19, -1000, 14483, -1000, 93, -1000, 194, 796, 14253, -1000,
	795, -1000, 742, -1000, 730, 813, 7223, 7979, 55, -1000,
	-1000, 55, 55, 7979, -1000, -1000, 13333, -21, 1168, 13333,
	962, -46, -1000, 18627, -1000, -1000, 7979, 7979, 7979, 7979,
	7979, 668, -1000, -1000, -1000, 4667, -1000, -1000, -6, 193,
	106, -1000, -1000, 192, -6, -1000, -1000, -1000, -1000, 190,
	1278, 339, -1000, -1000, -1000, 7979, 263, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 982, 189, 188, -1000,
	-1000, -1000, -1000, 186, 185, 183, 179, 167, 166, 162,
	161, 160, 158, 156, 154, 153, 632, -1000, 278, -1000,
	-1000, 278, 278, -1000, 140, 140, 141, -1000, -1000, -1000,
	140, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	152, 104, -1000, -1000, -1000, 13333, -6, -1000, -1000, -1000,
	7979, 3662, -50, -1000, 19224, -1000, -39, 783, -1000, 12403,
	1113, 1097, 1096, 12873, 405, 403, 13333, 13333, 270, 56,
	1167, 10723, -1000, 13333, 13333, -1000, 13333, -1000, -1000, 13333,
	13333, 13333, -23, 11933, 401, -34, 11703, 13333, -1000, -5,
	-1000, -1000, 961, 318, 626, 868, 498, -1000, -1000, -1000,
	-1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1228, -1000, -1000, -1000, -1000, 1262, -30, -1000,
	-1000, -1000, -1000, -1000, 1277, -1000, -1000, -1000, -1000, 3913,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13333, -1000, -1000, -1000,
	-1000, -1000, -1000, 626, 868, -1000, -1000, 12873, 12163, 1008,
	706, 784, -1000, 1007, -1000, -1000, -1000, -1000, 19224, -1000,
	19224, 588, 912, -1000, 912, -31, -1000, 18597, -1000, 150,
	-57, -1000, 270, 10473, 6701, 2053, 13333, 385, 7979, 7979,
	7979, 7979, 7979, 7979, 7979, 7979, 7979, 7979, 7979, 7979,
	7979, 7979, 7979, 7979, 7979, 7979, 7979, 7979, 7979, 678,
	398, 1121, 643, 133, 3913, -1000, 1207, 1207, 1207, 19343,
	19343, 145, -22, 18235, -32, -6, -1000, -1000, 5927, 5675,
	-6, 4163, -1000, 449, 1260, 275, 19224, 989, 945, 149,
	68, 65, 7979, 853, 7979, 8231, 7979, 7979, 4919, 7979,
	7979, 7979, 7979, 7979, 7979, -1000, 148, -1000, -1000, -1000,
	-1000, 1259, -1000, -1000, 1257, -1000, 1256, 270, 62, -1000,
	2190, -1000, -1000, 6449, -1000, 561, 13333, 13333, 13333, -1000,
	-1000, 763, 14023, -1000, 2053, 13333, -1000, 147, 146, 859,
	855, 13333, 13333, 13793, 13563, 13333, 737, 13333, 13333, 569,
	-1000, 563, 7979, 705, -1000, 9973, 284, 13333, 70, -1000,
	-1000, -1000, 245, 13333, -1000, -1000, -1000, 87, -1000, -33,
	-1000, -1000, 13333, 11703, -34, -35, -1000, -1000, 13333, 868,
	-1000, -1000, -1000, 530, -1000, 620, -1000, 9733, -1000, -1000,
	-1000, 449, -1000, -40, -1000, -1000, -1000, -1000, 61, -36,
	-1000, -1000, -1000, -1000, 13333, 195, 13333, 13333, 1004, 13333,
	-1000, -1000, -1000, 7979, -1000, -1000, -1000, -23, 13333, -1000,
	943, -37, 1150, -90, 12643, -1000, 3111, -1000, -1000, 1186,
	-1000, -1000, -1000, -1000, 64, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 141, 632, 140, 140,
	140, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 278,
	278, 278, -1000, -1000, 201, 427, 427, 1251, 1251, 1251,
	229, 229, 756, 1652, 476, 476, 476, 750, 422, 422,
	476, 476, 476, 19343, 19311, 181, 7979, 394, 640, 133,
	7979, -1000, 997, -1000, -1000, -1000, 960, 132, 8231, 8231,
	-1000, -1000, -1000, 4667, -1000, -1000, 131, 7979, -1000, 7979,
	-56, -108, -1000, 19224, -1000, -62, -1000, -1000, -29, 7979,
	7979, 7979, 58, -1000, 386, -1000, 367, 366, 362, -1000,
	129, 53, 436, -1000, 7979, 685, 128, 127, 7979, -1000,
	-1000, 19149, 52, 958, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 51, 19052, 50, 19530, -1000, 8231, 8231, 8231, 4667,
	125, 49, 18508, -74, 18965, 6953, 6953, 6953, 48, 18888,
	7979, -74, 2678, 2565, 2395, -63, -64, -69, 1254, -75,
	44, 40, 943, -1000, -1000, 7979, -1000, -1000, -1000, 358,
	356, 1003, -1000, 752, -1000, 751, 7979, 13333, 122, 120,
	613, -1000, 1002, 664, 1001, 664, -1000, -39, 622, -1000,
	-1000, 347, -1000, 6701, 19224, 563, 1101, -76, -1000, -1000,
	-1000, 270, 10723, 6449, -77, -1000, -40, -1000, -40, -1000,
	-1000, -1000, -1000, -1000, -1000, 13333, -1000, 12163, 117, 13333,
	116, 113, 13333, -1000, -1000, 39, -1000, -1000, -1000, -1000,
	-1000, 940, 1137, 10473, 866, 862, 10473, 793, 676, 676,
	676, -1000, 12643, 3398, -1000, -1000, 13333, 112, 10223, 38,
	1150, 212, 208, -1000, 1252, 7979, 181, 7979, 8231, 8231,
	-1000, 181, -1000, -1000, -1000, -1000, 957, 111, 7979, 2053,
	19500, 19371, -81, 5423, -41, 18161, 7979, -1000, -1000, 106,
	-1000, 36, 6197, -1000, 18704, -10, -10, -1000, 801, 773,
	533, 478, 1249, 1271, 1040, -1000, 7979, 18791, -1000, 10973,
	271, 690, 18138, 2053, -1000, 7979, -1000, 955, 7979, -1000,
	2053, 8231, 8231, 8231, 8231, 8231, 8231, 8231, 8231, 8231,
	8231, 8231, 8231, 8231, 8231, 8231, 8231, 8231, 8231, 824,
	8231, 1205, 1205, 1205, -43, 5171, -1000, 981, 955, 7979,
	7979, 2053, 35, 32, 29, -1000, 7979, -74, 7979, 7979,
	7979, -1000, -1000, -1000, 28, -1000, 1242, -1000, -1000, 940,
	18332, 13333, 13333, 13333, 995, 1197, -1000, 18064, -82, 13333,
	13333, -1000, 857, 970, 307, 13333, -1000, 13333, -1000, 13333,
	13333, 13333, 13333, -46, -1000, 144, -23, 13333, 563, -1000,
	-1000, 231, -1000, -1000, 8731, 105, 12163, 8731, 704, -1000,
	266, 7979, 7979, 1150, 10473, 10473, 1103, 861, 10473, -1000,
	-1000, -1000, -1000, -1000, -1000, 931, 102, 13333, 12643, 374,
	1240, 27, 1178, 181, 2841, 1771, 7979, 2053, 19446, -87,
	-1000, 7979, 7979, -1000, -88, -1000, 7979, -1000, 19224, -1000,
	1265, 7979, 21, 20, 18, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17, -1000, -1000, 19224, 7979, -1000, -1000, 17243,
	7979, 16, -1000, 14, 19224, 981, 19224, -1000, 480, 480,
	1205, 1205, 1205, 777, 777, 735, 675, 1667, 1667, 1667,
	334, 387, 387, 1667, 1667, 1667, 954, 827, 98, 17759,
	7979, -92, -1000, -1000, -1000, 19224, 19224, 11, -1000, -1000,
	-1000, -74, 2364, 17866, 17843, -1000, 10, 266, -1000, -1000,
	-1000, -1000, 13333, -1000, 13333, -1000, 13333, 759, -1000, -1000,
	837, 95, 8231, 13333, -1000, 599, -93, -94, 755, -1000,
	744, 7979, -1000, 2053, 664, 664, -1000, 346, 343, -1000,
	1049, 8731, 1095, -1000, -1000, -1000, 94, -99, -1000, 182,
	1117, 7979, -1000, -1000, 86, 8731, 8, -100, 13333, -1000,
	13333, 19224, -74, -1000, 1103, -1000, 85, 7979, 10473, -1000,
	-149, -1000, 230, -1000, 13333, -116, -1000, -1000, 206, 204,
	-1000, 7979, 7979, 19446, -120, -1000, 2053, 181, 181, -1000,
	17789, -1000, 18704, -1000, -1000, -1000, -1000, 19224, 658, -1000,
	17682, -1000, -1000, -1000, 8231, 952, 81, 2053, 17523, -1000,
	-1000, 7979, -1000, -1000, -1000, -1000, -1000, 1325, -1000, -1000,
	-1000, 7979, 17759, 57, -1000, 80, -1000, -1000, -1000, 596,
	-1000, -1000, 19224, 1120, -1000, -1000, 13333, 13333, 383, -122,
	13333, -1000, -1000, 4415, 599, 8731, 1134, -6, 13333, 1134,
	17496, 4163, -126, -1000, 599, 78, -54, -1000, 1146, -1000,
	13333, 19224, -1000, 931, -1000, 3913, -127, -1000, -1000, -1000,
	181, 181, -1000, -1000, -1000, 7, 690, 1133, -1000, 1680,
	8231, 2053, -128, -1000, 17477, -1000, 2753, 754, 13333, 13333,
	13333, 289, 13333, -1000, -1000, 465, -1000, 270, -1000, -1000,
	-1000, -1000, -1000, -1000, 1117, -29, 599, -1000, 8731, 13333,
	77, -132, -1000, -1000, -1000, -1000, 627, 7979, 1680, -133,
	-1000, -1000, -1000, 694, 679, -134, -138, 57, -1000, 7979,
	-1000, 10723, -1000, 1134, 5, -1000, -139, -1000, -1000, -1000,
	4, 7727, 7727, -74, -1000, -1000, 702, 698, 455, -1000,
	-1000, -1000, -1000, -1000, 754, 19224, -121, -1000, -1000, 599,
	-1000, -1000, -1000, 8481, 732, 491, 18429, -1000, -1000, 1055,
	-1000, 300, 884, 884, 694, -1000, -1000, 1189, -1000, -1000,
	-1000, -1000, -1000, -1000, 1198, -1000, -1000, 878, -1000, -1000,
	7475, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1529, 1528, 1166, 1527, 1524, 1523, 1522, 1521, 81,
	1519, 1517, 102, 1515, 80, 1514, 1509, 1507, 1497, 44,
	1496, 1494, 1493, 1489, 1488, 78, 35, 123, 1950, 116,
	1487, 1485, 1475, 10, 83, 85, 1471, 55, 84, 100,
	1443, 45, 1470, 118, 19, 12, 898, 74, 1469, 115,
	110, 1468, 1464, 1463, 29, 1457, 1456, 1452, 11, 50,
	30, 1450, 14, 77, 1449, 1448, 82, 1444, 79, 90,
	28, 104, 94, 1441, 53, 1440, 9, 49, 1438, 26,
	1436, 25, 57, 117, 1432, 34, 266, 54, 24, 51,
	1429, 1426, 1421, 1419, 64, 69, 41, 1418, 1417, 60,
	1414, 112, 114, 1411, 1409, 1407, 1403, 1402, 1399, 554,
	1398, 1396, 519, 3, 52, 56, 31, 101, 98, 37,
	1395, 20, 1392, 0, 860, 840, 1391, 40, 27, 65,
	39, 46, 18, 1390, 93, 1389, 1388, 1386, 1384, 1379,
	62, 1378, 47, 120, 33, 48, 92, 22, 59, 68,
	111, 124, 95, 1377, 99, 1375, 43, 1374, 1372, 528,
	70, 1370, 1367, 1365, 222, 168, 165, 86, 1364, 1363,
	87, 58, 1361, 1360, 66, 1357, 1353, 121, 1352, 119,
	38, 1346, 97, 1345, 71, 1344, 300, 42, 23, 1343,
	113, 61, 1339, 1335, 1334, 17, 2, 7, 6, 5,
	4, 15, 13, 1330, 1329, 105, 75, 1326, 130, 1324,
	1315, 32, 1314, 1311, 21, 1310, 16, 1309, 8, 1,
	1308, 125, 1305, 73, 1297, 1224, 1291, 122, 1286, 1285,
	1256, 67,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 31, 31, 37, 37, 37, 36, 36, 32, 32,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	71, 71, 70, 70, 73, 73, 11, 11, 12, 12,
	12, 12, 155, 155, 154, 13, 18, 221, 221, 221,
	225, 225, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 223, 223, 21, 21, 21, 21, 109, 109, 111,
	111, 111, 111, 39, 108, 108, 108, 108, 110, 110,
	110, 110, 179, 177, 177, 184, 184, 184, 51, 51,
	51, 51, 51, 52, 52, 52, 176, 176, 176, 176,
	185, 185, 185, 185, 185, 185, 53, 53, 53, 183,
	183, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 178, 178, 222, 222, 224, 224,
	8, 8, 54, 54, 55, 55, 115, 115, 115, 114,
	193, 193, 194, 194, 194, 195, 195, 195, 195, 195,
	195, 195, 192, 192, 190, 190, 191, 191, 191, 191,
	228, 228, 113, 113, 58, 58, 198, 198, 198, 198,
	196, 196, 196, 196, 196, 199, 197, 200, 200, 200,
	200, 200, 143, 143, 143, 24, 7, 7, 98, 98,
	62, 62, 147, 147, 147, 45, 45, 33, 33, 33,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 99,
	99, 100, 100, 16, 20, 23, 23, 23, 23, 23,
	230, 230, 42, 42, 42, 42, 43, 43, 112, 112,
	112, 112, 112, 38, 6, 6, 14, 48, 48, 105,
	105, 105, 107, 107, 107, 106, 106, 106, 85, 85,
	25, 76, 76, 77, 77, 153, 78, 78, 19, 19,
	28, 28, 26, 26, 26, 26, 26, 26, 27, 27,
	29, 29, 29, 29, 29, 29, 29, 206, 206, 206,
	208, 208, 205, 15, 15, 15, 15, 207, 207, 229,
	229, 86, 86, 86, 57, 56, 56, 60, 60, 59,
	61, 61, 146, 83, 83, 83, 83, 101, 102, 102,
	103, 103, 104, 104, 82, 82, 130, 130, 30, 30,
	66, 66, 67, 67, 121, 121, 122, 122, 120, 120,
	120, 148, 148, 148, 148, 149, 149, 149, 149, 149,
	149, 144, 144, 144, 144, 145, 145, 89, 89, 89,
	89, 87, 87, 88, 88, 150, 150, 150, 150, 84,
	84, 151, 151, 151, 116, 116, 156, 156, 156, 65,
	65, 65, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 158, 158, 158, 158, 160, 160, 160,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 161, 161, 168, 168, 169, 169, 170,
	171, 162, 162, 163, 163, 164, 165, 172, 172, 172,
	174, 174, 166, 166, 167, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 96,
	96, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 201, 201, 201, 201, 201, 201, 201, 203,
	203, 204, 204, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 209, 209,
	210, 210, 211, 211, 212, 212, 214, 215, 215, 215,
	216, 220, 220, 213, 213, 217, 217, 217, 218, 218,
	219, 219, 219, 219, 219, 134, 134, 134, 135, 135,
	136, 72, 72, 132, 132, 131, 131, 131, 133, 133,
	90, 173, 173, 173, 173, 173, 173, 173, 91, 91,
	97, 92, 92, 93, 93, 93, 93, 93, 93, 127,
	128, 94, 94, 94, 129, 129, 137, 141, 141, 140,
	139, 139, 138, 138, 119, 119, 119, 119, 118, 117,
	79, 79, 231, 231, 142, 142, 80, 80, 81, 75,
	75, 74, 74, 152, 152, 152, 152, 68, 68, 50,
	50, 69, 69, 46, 46, 49, 47, 47, 47, 47,
	63, 63, 64, 64, 44, 44, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 175, 175, 175,
	40, 40, 40, 41, 41, 181, 181, 181, 182, 182,
	182, 182, 180, 180, 180, 180, 180, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 2, 0, 2, 0, 2, 0,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 3,
	2, 0, 3, 1, 2, 2, 1, 1, 2, 4,
	2, 5, 6, 7, 3, 1, 4, 5, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 10, 13, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 3, 6, 7, 1, 3, 1,
	4, 2, 8, 5, 0, 4, 3, 0, 2, 0,
	8, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	2, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 2, 2, 1,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -207, 83, 89, 102, 189,
	196, -26, -28, 203, 204, 29, 211, 52, 85, 191,
	186, 229, 58, -206, -29, -27, 273, 249, 255, 199,
	-30, 217, 242, 276, 217, 70, 113, 78, 117, 236,
	70, 113, 217, -12, 273, -19, -14, -25, -9, -225,
	18, -226, -227, 58, 83, 102, 199, 117, 78, 236,
	-225, -43, 196, -40, 4, -186, -188, 16, 17, 19,
	28, 29, 33, 37, 40, 51, 52, 53, 55, 57,
	60, 61, 68, 69, 70, 71, 73, 78, 82, 83,
	89, 93, 94, 96, 98, 103, 108, 109, 114, 117,
	125, 127, 128, 133, 136, 139, 141, 142, 143, 144,
	145, 147, 148, 150, 152, 149, 155, 157, 158, 164,
	167, 170, 171, 174, 177, 178, 179, 181, 182, 186,
	184, 185, 187, 189, 191, 192, 194, 197, 198, 200,
	201, 203, 204, 206, 208, 210, 211, 214, 212, 218,
	219, 225, 229, 230, 231, 232, 235, 236, 239, 240,
	241, 245, 250, 251, 252, 253, 30, 31, 32, 34,
	35, 38, 39, 43, 44, 45, 47, 72, 74, 75,
	88, 90, 95, 104, 106, 110, 111, 118, 119, 120,
	122, 131, 154, 156, 165, 169, 173, 175, 180, 193,
	207, 213, 215, 221, 222, 226, 227, 242, 243, -109,
	136, 201, 225, -110, -108, -179, 221, 145, -70, -40,
	196, 4, 70, 51, 71, 103, 113, 114, 128, 218,
	221, 225, 18, -230, 225, 225, -230, -230, -42, 225,
	223, -43, -229, 217, 217, -98, 70, 234, -27, -29,
	-28, -59, -60, 233, 121, 87, 163, -26, -28, -206,
	-208, 181, -205, -40, -208, -56, -57, 18, 80, 277,
	-150, -46, 161, -40, -81, 273, -3, -150, 110, -40,
	-49, 110, -46, 100, 123, -151, -150, -40, 110, -50,
	110, -49, -71, 110, -70, -155, -154, -182, 4, -186,
	-188, -187, 242, 49, 59, 101, 116, 124, 126, 132,
	134, 146, 166, 168, 190, 205, 160, 277, 160, -40,
	-109, 45, -109, -111, -38, -39, 125, 177, 223, 258,
	100, 253, -53, 6, 76, -73, 275, 100, -222, 160,
	100, 100, 100, -178, 100, 253, 125, 177, -112, -38,
	-39, -112, 223, -43, -84, -150, -70, 110, 113, -40,
	110, -59, -60, -83, -101, -102, 135, 159, -86, 18,
	80, -86, -86, 37, 274, 274, 277, -208, -64, 273,
	-75, -74, -152, -123, 266, -125, 264, 265, 270, 151,
	254, -134, -46, -126, 9, 273, -137, -203, -28, 88,
	24, -135, -136, 193, -40, 8, 5, 6, 7, -44,
	-158, -167, 228, 91, 153, 41, -201, -202, 4, -186,
	-181, -159, -169, -163, -166, 122, 49, 63, 66, 64,
	67, 202, 237, 42, 90, 169, 173, 215, 226, 227,
	110, 154, 111, 47, 104, 131, 82, 31, 32, 34,
	35, 43, 44, 72, 74, 75, 95, 118, 119, 120,
	156, 180, 207, 222, 243, -187, -170, -171, -164, -165,
	-172, -74, -81, 266, -46, 273, -79, -119, -118, -117,
	271, 275, -80, -142, -123, 76, -35, 184, -34, 17,
	19, 83, 240, 88, 184, 184, 88, 278, -151, -48,
	-46, 203, -40, 25, 88, -37, 277, 40, 187, 88,
	277, 88, 274, 277, -221, -69, 217, 70, -47, -40,
	266, -227, -221, 25, 277, 277, 133, -52, 139, 150,
	108, -177, 76, -184, -176, -143, 9, 228, 91, 160,
	-183, 5, 265, -175, -182, 6, 8, 264, -177, 76,
	61, -185, 6, 4, -167, -143, 76, 136, 122, 275,
	-180, 4, -186, -188, -187, -189, 18, 20, 21, 22,
	23, 24, 25, 26, 27, 36, 41, 42, 46, 48,
	50, 56, 58, 62, 63, 64, 65, 66, 67, 76,
	77, 79, 80, 81, 84, 85, 87, 91, 92, 97,
	99, 100, 102, 105, 107, 112, 113, 115, 121, 123,
	129, 130, 135, 137, 138, 151, 153, 159, 160, 161,
	162, 163, 172, 176, 183, 188, 199, 202, 209, 216,
	217, 220, 223, 224, 228, 233, 234, 237, 238, 244,
	246, 247, 248, 249, -179, -224, 97, -221, -179, -179,
	-179, -179, 133, 277, 277, -43, -37, 277, 273, 151,
	-41, 110, -40, 151, -83, -102, -101, -103, -123, 18,
	-123, -125, -27, -27, -27, -61, -146, -123, -205, 25,
	-63, -40, -66, 100, 277, 10, 48, 28, 264, 265,
	266, 267, 268, 261, 262, 263, 260, 256, 257, 258,
	54, 140, 195, 12, 13, 14, 22, 162, 134, 254,
	205, 124, 30, 112, 25, 4, -123, -123, -123, -123,
	-123, 168, -28, -123, -72, -79, -28, -131, 271, 273,
	-79, 273, 6, 6, 273, -138, -123, -209, 250, 97,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 175, -174, 245, -174, -174,
	-160, 273, -160, -161, 273, -160, 273, -66, -46, -119,
	-123, -180, 266, 277, 274, 277, 223, -99, 56, 50,
	-114, 110, 50, -190, -40, 56, -191, 46, 234, 176,
	99, -99, 56, -99, 56, 56, -150, 223, 223, -49,
	-40, -116, 247, -105, -19, 273, 76, 25, -76, -77,
	-153, -78, -46, 273, -40, -40, -49, -50, -70, -71,
	-12, -154, 223, 277, -69, -63, -118, -117, 100, 225,
	-39, -38, -51, 179, 208, 185, 200, 277, 5, 8,
	8, 6, -180, -223, -40, -39, -38, -150, -54, -55,
	-115, -114, -192, -190, 113, 234, 88, 160, 151, 88,
	-104, 193, 194, 277, -33, 26, 79, 273, 277, 274,
	-116, -67, -148, -150, -28, -149, 273, -152, -156, -157,
	-159, -168, -162, -166, -167, 33, 39, 38, 219, 213,
	118, 119, 120, 207, 31, 180, 95, 82, 75, 74,
	156, 35, 34, -170, -171, -164, -165, 72, 222, 32,
	44, 43, 243, -70, 221, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, 134, 205, 30, 112,
	223, 153, 151, 228, 91, 235, 80, 157, -231, 216,
	27, -129, -28, 273, -180, -134, 193, 273, 274, 277,
	-72, -133, 272, -123, -131, -72, 274, 274, -72, 244,
	18, 80, 266, -95, 252, 143, 73, 109, 142, -96,
	198, 8, -141, -140, 246, -210, 93, 105, 273, 274,
	274, -123, -90, -173, 4, 252, 143, 73, 109, 142,
	198, -91, -123, -92, -124, -125, 264, 265, 270, 273,
	193, -93, -123, -72, -123, 36, 130, 224, -94, -123,
	100, -72, -123, -123, -123, -72, -72, -72, 273, 8,
	8, 8, -116, 274, 272, 281, -142, -34, -46, -40,
	-40, 151, -114, 110, -156, -40, 273, 273, 127, 127,
	-40, -40, 110, -40, 110, -40, -40, -35, 184, -40,
	-40, 184, -85, 188, -123, -107, 160, -68, -46, 242,
	-40, -66, 277, 258, -68, -37, -223, -47, -223, -38,
	232, 53, 179, -184, -95, 277, 274, 277, -41, 113,
	-70, -46, 88, -40, -146, -15, -19, -14, -25, -9,
	-40, -82, 105, 277, 59, -89, 126, 146, 101, 132,
	190, 116, -120, 278, -145, -144, 25, -40, -28, -149,
	-148, -65, 24, -95, 273, 253, -123, 223, -231, 216,
	-129, -123, 153, 228, 91, 235, 80, 157, 100, 273,
	-124, -124, -72, 273, -72, -123, 277, 272, 272, 277,
	274, -60, 277, -59, -123, -72, -72, 274, 223, 223,
	223, 223, 273, 274, -139, -140, 84, -123, -215, 167,
	273, 273, -123, 25, 274, 100, 274, -97, 172, 274,
	10, 264, 265, 266, 267, 268, 261, 262, 263, 260,
	256, 257, 258, 54, 140, 195, 12, 13, 14, 124,
	112, -124, -124, -124, -72, 273, 274, -127, -128, 100,
	97, 25, -94, -94, -94, 274, 100, -72, 277, 277,
	277, 274, 274, 274, 8, 274, 277, 274, 274, -82,
	-123, 223, 223, 88, 151, -193, -191, -123, -63, 273,
	273, -31, 83, 203, -100, 88, -37, 88, -37, 223,
	-99, 56, 223, -74, -85, 55, 274, 277, -116, -77,
	-142, 274, -40, -115, 273, -41, 273, 273, -40, 274,
	-130, 107, 37, -148, 126, 126, -148, -89, 126, -87,
	166, -87, -87, -145, -180, 279, -40, 273, 274, 271,
	271, 8, -123, -123, -124, -124, 100, 273, -123, -132,
	-156, 22, 22, 274, -72, 274, 277, 274, -123, -131,
	274, 244, -60, -60, -60, 143, 109, 142, -96, 142,
	-96, -96, 8, 6, 85, -123, 220, -216, -40, 273,
	247, -59, 274, -156, -123, -127, -123, -156, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, 80, 151, 157, -124,
	277, -72, 274, -128, -127, -123, -123, -156, 274, 274,
	274, -72, -123, -123, -123, 274, 8, -130, 272, -40,
	-40, -114, 88, -194, 56, -195, 48, 151, 153, 234,
	176, 46, 76, 183, 274, 274, -63, -63, 151, 76,
	151, 76, 69, 230, -40, -40, -46, -40, -40, -40,
	-106, 273, 160, -19, -46, -85, 258, -62, -147, -40,
	-204, 273, -201, -202, -44, 273, -54, -62, 160, -211,
	248, -123, -72, -148, -148, -88, 238, 160, 126, -148,
	-122, -121, 98, 149, 273, -63, -144, 272, 8, 8,
	274, 22, 22, -123, -132, 274, 277, -123, -123, 274,
	-123, 6, -123, 274, 274, 274, 274, -123, -220, -40,
	-123, 274, 274, -128, 100, 80, 157, 273, -123, 274,
	274, 277, 274, 274, 274, -211, -114, -40, -70, 153,
	127, 273, -124, -46, -113, -228, 57, 214, 274, 274,
	153, 153, -123, -156, -37, -37, 223, 223, 81, -62,
	56, -81, -28, 273, 274, 277, -45, -79, 48, -45,
	-123, 273, -62, 274, 274, -46, -212, -214, -40, -88,
	273, -123, -148, 277, 280, 258, -63, 274, 272, 272,
	-123, -123, 274, -156, 274, -60, -213, 171, 274, -124,
	100, 273, -132, 274, -123, -195, -123, -58, 273, 273,
	183, -36, 48, -40, -40, 236, 152, 274, -40, -113,
	-147, -33, -70, -33, 274, -72, 274, -113, 273, 277,
	25, -63, -121, -180, 274, 274, -60, 37, -124, -132,
	274, 274, 274, -198, 141, -63, -63, -46, -32, 238,
	-70, 203, -116, -45, -60, -113, -62, -214, -216, 274,
	-217, 178, 194, -72, 274, -196, -199, -197, 160, 101,
	170, 206, 274, 274, -58, -123, -76, -33, 274, 274,
	274, -218, -219, 30, 231, 61, -123, -218, -197, 160,
	-199, 160, 236, 78, -198, -116, -113, -219, 174, 96,
	193, 174, 96, -200, 148, 187, 40, 203, -200, -196,
	22, 16, 153, 76, -219,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 318, 0, 0,
	0, 288, -2, 0, 0, 251, 0, 251, 251, 255,
	0, 320, 219, 317, -2, 328, 0, 0, 0, 326,
	302, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 70, 71, 0,
	80, 81, 82, 84, 85, 86, 87, 88, 89, 90,
	0, 244, 817, 257, 730, 731, 732, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 93,
	784, 821, 832, 98, 108, 0, 884, -2, 112, 62,
	817, 141, 142, 0, 144, 157, 0, 0, 0, 155,
	0, 0, 153, 262, 250, 262, 247, 248, 249, 252,
	0, 243, 0, 319, 0, 0, 0, 218, -2, 298,
	299, -2, 0, 323, 323, 323, 0, 0, 299, 0,
	307, 807, 310, 713, 308, 690, 0, 325, 324, 0,
	303, 385, 0, 703, 348, 0, 2, 0, 866, 0,
	0, 866, 0, 0, 0, 0, 391, 54, 866, 45,
	866, 699, 58, 866, 60, 0, 72, 74, 738, 739,
	740, 741, 888, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 0, 0, 0, 256,
	94, 856, 96, 97, 99, 100, 0, 0, 0, 0,
	0, 0, 111, 136, 137, 63, 0, 0, 159, 0,
	0, 0, 0, 149, 0, 150, 0, 152, 245, 258,
	259, 246, 0, 254, 45, 389, 0, 866, 734, 264,
	866, -2, 0, 294, 335, 336, 0, 0, 0, 321,
	322, 0, 0, 0, 290, 291, 0, 309, 0, 0,
	351, 689, 691, 695, 696, 471, 0, 0, 0, 0,
	0, 0, 550, 551, 552, 0, 554, 555, 556, 861,
	0, 560, 561, 880, 703, 716, 717, 718, 719, 0,
	0, 0, 724, 725, 726, 673, 599, 570, -2, -2,
	714, 413, 414, 415, 416, -2, 890, 574, 576, 578,
	579, 580, 581, 0, 862, 876, 877, 883, 886, 887,
	866, 873, 867, 857, 864, 872, 768, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 737, 437, 438, 443, 444,
	446, 351, 349, 386, 387, 0, 704, 680, 674, 675,
	0, 0, 0, 686, 684, 685, 22, 240, 24, 0,
	240, 240, 0, 0, 0, 0, 0, 0, 395, 0,
	267, 0, 392, 0, 0, 56, 0, 43, 44, 0,
	0, 0, 318, 0, 0, 77, 0, 764, 701, 706,
	709, 83, 0, 0, 0, 0, 0, 103, 123, 124,
	125, 104, 106, 113, 115, 116, 117, 126, 127, 128,
	129, 212, 0, 214, 139, 140, 727, 0, 105, 107,
	109, 110, 130, 131, 0, 133, 134, 135, 454, 0,
	64, 742, 743, 744, 745, 746, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 143, 145, 0, 156, 146, 147,
	148, 154, 151, 0, 0, 253, 215, 0, 163, 0,
	0, 866, 733, 0, 297, 333, 334, 337, 340, 341,
	338, 471, 304, 305, 306, 329, 330, 229, 311, 0,
	0, 710, 395, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 0, 694, 475, 476, 477, 498,
	499, 0, -2, 631, 0, 557, 558, 559, 0, 0,
	-2, 0, 721, 468, 0, 0, 672, 601, 0, 0,
	0, 0, 0, 0, 0, 652, 658, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 440, 450, 448, 447,
	429, 0, 428, 426, 0, 430, 0, 395, 0, 681,
	0, 678, 679, 0, 688, 0, 0, 0, 0, 239,
	26, 866, 0, 36, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	705, 279, 0, 274, 269, 0, 0, 0, 351, 281,
	283, 284, 0, 0, 393, 55, 700, 45, 61, 59,
	67, 73, 0, 0, 78, 79, 707, 708, 0, 0,
	101, 102, 263, 0, 120, 0, 122, 0, 213, 729,
	728, 468, 65, 158, 91, 260, 261, 390, 0, 162,
	164, 166, 167, 168, 734, 0, 0, 0, 0, 0,
	339, 342, 343, 0, 332, 227, 228, 318, 0, 712,
	345, 350, 352, 360, 376, 363, 0, 692, 472, 401,
	402, 403, 404, 405, 468, 408, 409, 410, 411, 412,
	420, 421, 422, 423, 424, 425, 434, 0, 419, 419,
	419, 431, 432, 435, 436, 441, 442, 452, 453, 451,
	451, 451, 449, 473, 0, 478, 479, 480, 481, 482,
	483, 484, 485, 486, -2, -2, -2, 490, 491, 492,
	-2, -2, -2, 496, 497, -2, 0, 0, 683, 0,
	0, 504, 0, 507, 509, 511, 0, 0, 0, 0,
	682, 521, 664, 0, 693, 506, 0, 0, 553, 0,
	0, 0, 637, 631, 638, 0, -2, 562, 328, 0,
	0, 0, 0, 722, 455, 456, 457, 458, 459, 460,
	469, 0, 671, 667, 0, 609, 0, 0, 0, 575,
	577, 0, 0, 0, 641, 642, 643, 644, 645, 646,
	647, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	880, 0, 631, 657, 0, 0, 0, 0, 0, 631,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 388, 676, 0, 687, 25, 231, 0,
	0, 0, 28, 866, 171, 0, 0, 0, 0, 0,
	242, 37, 866, 45, 866, 45, 38, 23, 240, 230,
	233, 0, 53, 0, 394, 279, 0, 0, 697, 271,
	268, 395, 0, 0, 0, 57, 75, 702, 76, 95,
	118, 119, 121, 114, 132, 0, 160, 0, 0, 734,
	0, 0, 0, 265, 331, 0, 313, 314, 315, 316,
	711, 347, 0, 0, 0, 0, 0, 0, 382, 382,
	382, 380, 376, 0, 362, 375, 0, 374, -2, 363,
	0, 396, 398, 406, 0, 0, -2, 0, 0, 0,
	522, -2, 505, 508, 510, 512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 632, 0, 635, 636, 0,
	-2, 0, 0, 327, 328, 328, 328, 568, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 0, 569, 0,
	0, 0, 0, 0, 583, 0, 584, 0, 0, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 527, 0, 0, 586, 655, 656, 0,
	0, 0, 0, 0, 0, 591, 0, 662, 0, 0,
	0, 595, 596, 597, 0, 417, 0, 433, 445, 347,
	0, 0, 0, 0, 0, 169, 184, 0, 0, 0,
	0, 30, 0, 0, 0, 0, 34, 0, 40, 0,
	0, 0, 0, 278, 266, 277, 0, 0, 279, 282,
	285, 0, 92, 165, 0, 0, 163, 0, 0, 312,
	603, 0, 0, 353, 0, 0, 0, 0, 0, 377,
	381, 378, 379, 361, 358, 0, 372, 0, 365, 0,
	0, 0, 474, -2, 0, 0, 0, 0, -2, 0,
	633, 0, 0, 665, 0, 626, 0, -2, 632, 639,
	563, 0, 0, 0, 0, 461, 462, 463, 464, 465,
	466, 467, 0, 723, 666, 670, 0, 607, 608, 612,
	0, 0, 573, 0, 640, 649, 650, 524, 528, 529,
	530, 531, 532, 533, 534, 535, 536, -2, -2, -2,
	540, 541, 542, -2, -2, -2, 0, 0, 0, 651,
	0, 0, 629, 653, 654, 659, 660, 0, 588, 589,
	590, 661, 0, 0, 0, 439, 0, 603, 677, 235,
	237, 27, 0, 170, 0, 173, 0, 0, 176, 177,
	0, 0, 0, 0, 186, 193, 0, 0, 0, 42,
	0, 0, 241, 0, 45, 45, 232, 0, 0, 234,
	0, 0, 0, 270, 698, 280, 0, 0, 220, 226,
	226, 0, 571, 572, 0, 0, 0, 0, 0, 300,
	0, 346, 344, 366, 0, 368, 0, 0, 0, 370,
	0, 356, 0, 355, 0, 0, 364, 399, 0, 0,
	407, 0, 0, -2, 0, 515, 0, -2, -2, 625,
	632, 720, 328, 564, 566, 567, 470, 669, 614, 611,
	0, 598, 582, 648, 0, 0, 0, 0, 632, 628,
	587, 0, 593, 594, 418, 301, 29, 0, 174, 175,
	178, 0, 180, 195, 187, 0, 190, 191, 188, 0,
	31, 32, 41, 47, 33, 39, 0, 0, 0, 0,
	0, 286, 287, 0, 193, 0, 229, 715, 0, 229,
	0, 0, 0, 161, 193, 0, 602, 604, 0, 367,
	0, 384, 369, 0, 359, 0, 0, 373, 400, 397,
	-2, -2, 516, 634, 627, 0, 328, 0, 600, -2,
	0, 0, 0, 630, 0, 172, 0, 199, 0, 0,
	0, 49, 0, 236, 238, 0, 273, 395, 276, 182,
	221, 222, 225, 223, 226, 328, 193, 216, 0, 0,
	0, 0, 357, 354, 371, 565, 617, 0, -2, 0,
	548, 592, 179, 204, 0, 0, 0, 195, 35, 0,
	46, 0, 275, 229, 0, 183, 0, 605, 606, 383,
	0, 0, 0, 613, 549, 181, 200, 201, 0, 196,
	197, 198, 194, 192, 199, 48, 395, 224, 563, 193,
	610, 615, 618, -2, 835, 761, 0, 616, 202, 0,
	203, 0, 0, 0, 204, 272, 217, 0, 620, 621,
	622, 623, 624, 205, 0, 208, 209, 0, 206, 189,
	0, 207, 210, 211, 619,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 262, 3, 268, 263, 3,
	273, 274, 266, 264, 277, 265, 275, 267, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 281, 276,
	256, 258, 257, 3, 278, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 271, 3, 272, 261, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 279, 260, 280, 270,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 259, 269,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:647
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:653
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:659
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:679
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:695
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:716
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:721
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:731
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:735
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:737
		{
			unimplemented()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:739
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:752
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:761
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:774
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:775
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:780
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:783
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:784
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:788
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[3].union.tableWithIdxList(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[5].union.tableWithIdxList(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = DBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = DBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = []string(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1369
		{
			unimplemented()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1371
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1382
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1439
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = []string(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1478
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1489
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = true
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = false
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = Ascending
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = Descending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = true
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = false
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.str = ""
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.str = ""
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1799
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			unimplemented()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2045
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2065
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = true
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = false
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2093
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.str = astFullJoin
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.str = astLeftJoin
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.str = astRightJoin
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.str = astInnerJoin
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2512
		{
			unimplemented()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			unimplemented()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			unimplemented()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2517
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2526
		{
			unimplemented()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = IntVal{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2708
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &DateType{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			unimplemented()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			unimplemented()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2729
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2744
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2772
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3147
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3148
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3189
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3207
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3230
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3274
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3275
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3278
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3279
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3284
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3287
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3296
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3300
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3312
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3326
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3330
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3667
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3831
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3867
		{
			unimplemented()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = DBool(true)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = DBool(false)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = DNull
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
