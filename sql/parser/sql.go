// Code generated by go yacc.
//line sql.y:22
package parser

import __yyfmt__ "fmt"

//line sql.y:22
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:30
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           int64
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HOUR = 57447
const IF = 57448
const IFNULL = 57449
const IN = 57450
const INDEX = 57451
const INITIALLY = 57452
const INNER = 57453
const INSERT = 57454
const INT = 57455
const INT64 = 57456
const INTEGER = 57457
const INTERSECT = 57458
const INTERVAL = 57459
const INTO = 57460
const IS = 57461
const ISOLATION = 57462
const JOIN = 57463
const KEY = 57464
const LATERAL = 57465
const LEADING = 57466
const LEAST = 57467
const LEFT = 57468
const LEVEL = 57469
const LIKE = 57470
const LIMIT = 57471
const LOCAL = 57472
const LOCALTIME = 57473
const LOCALTIMESTAMP = 57474
const LSHIFT = 57475
const MATCH = 57476
const MINUTE = 57477
const MONTH = 57478
const NAME = 57479
const NAMES = 57480
const NATURAL = 57481
const NEXT = 57482
const NO = 57483
const NOT = 57484
const NOTHING = 57485
const NULL = 57486
const NULLIF = 57487
const NULLS = 57488
const NUMERIC = 57489
const OF = 57490
const OFF = 57491
const OFFSET = 57492
const ON = 57493
const ONLY = 57494
const OR = 57495
const ORDER = 57496
const ORDINALITY = 57497
const OUT = 57498
const OUTER = 57499
const OVER = 57500
const OVERLAPS = 57501
const OVERLAY = 57502
const PARTIAL = 57503
const PARTITION = 57504
const PLACING = 57505
const POSITION = 57506
const PRECEDING = 57507
const PRECISION = 57508
const PRIMARY = 57509
const RANGE = 57510
const READ = 57511
const REAL = 57512
const RECURSIVE = 57513
const REF = 57514
const REFERENCES = 57515
const RENAME = 57516
const REPEATABLE = 57517
const RESTRICT = 57518
const RETURNING = 57519
const REVOKE = 57520
const RIGHT = 57521
const ROLLBACK = 57522
const ROLLUP = 57523
const ROW = 57524
const ROWS = 57525
const RSHIFT = 57526
const SEARCH = 57527
const SECOND = 57528
const SELECT = 57529
const SERIALIZABLE = 57530
const SESSION = 57531
const SESSION_USER = 57532
const SET = 57533
const SHOW = 57534
const SIMILAR = 57535
const SIMPLE = 57536
const SMALLINT = 57537
const SNAPSHOT = 57538
const SOME = 57539
const SQL = 57540
const STRICT = 57541
const STRING = 57542
const STORING = 57543
const SUBSTRING = 57544
const SYMMETRIC = 57545
const TABLE = 57546
const TABLES = 57547
const TEXT = 57548
const THEN = 57549
const TIME = 57550
const TIMESTAMP = 57551
const TO = 57552
const TRAILING = 57553
const TRANSACTION = 57554
const TREAT = 57555
const TRIM = 57556
const TRUE = 57557
const TRUNCATE = 57558
const TYPE = 57559
const UNBOUNDED = 57560
const UNCOMMITTED = 57561
const UNION = 57562
const UNIQUE = 57563
const UNKNOWN = 57564
const UPDATE = 57565
const USER = 57566
const USING = 57567
const VALID = 57568
const VALIDATE = 57569
const VALUE = 57570
const VALUES = 57571
const VARCHAR = 57572
const VARIADIC = 57573
const VARYING = 57574
const WHEN = 57575
const WHERE = 57576
const WINDOW = 57577
const WITH = 57578
const WITHIN = 57579
const WITHOUT = 57580
const YEAR = 57581
const ZONE = 57582
const NOT_LA = 57583
const WITH_LA = 57584
const POSTFIXOP = 57585
const UMINUS = 57586

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlMaxDepth = 200

//line sql.y:3668

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	263, 19,
	-2, 290,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 261,
	151, 261,
	261, 261,
	263, 261,
	-2, 271,
	-1, 38,
	1, 264,
	151, 264,
	261, 264,
	263, 264,
	-2, 270,
	-1, 47,
	1, 19,
	263, 19,
	-2, 290,
	-1, 83,
	1, 128,
	263, 128,
	-2, 739,
	-1, 234,
	129, 300,
	150, 300,
	-2, 267,
	-1, 237,
	129, 299,
	150, 299,
	-2, 265,
	-1, 339,
	129, 299,
	150, 299,
	-2, 268,
	-1, 396,
	260, 689,
	-2, 684,
	-1, 397,
	260, 690,
	-2, 685,
	-1, 403,
	6, 418,
	260, 418,
	-2, 812,
	-1, 425,
	6, 388,
	-2, 791,
	-1, 426,
	6, 415,
	260, 415,
	-2, 792,
	-1, 427,
	6, 396,
	-2, 793,
	-1, 428,
	6, 395,
	-2, 794,
	-1, 429,
	6, 415,
	260, 415,
	-2, 796,
	-1, 430,
	6, 415,
	260, 415,
	-2, 797,
	-1, 431,
	6, 416,
	-2, 799,
	-1, 432,
	6, 383,
	-2, 800,
	-1, 433,
	6, 383,
	-2, 801,
	-1, 434,
	6, 398,
	-2, 804,
	-1, 435,
	6, 384,
	-2, 809,
	-1, 436,
	6, 385,
	-2, 810,
	-1, 437,
	6, 386,
	-2, 811,
	-1, 438,
	6, 383,
	-2, 815,
	-1, 439,
	6, 389,
	-2, 820,
	-1, 440,
	6, 387,
	-2, 822,
	-1, 441,
	6, 417,
	-2, 826,
	-1, 442,
	6, 413,
	260, 413,
	-2, 830,
	-1, 683,
	85, 271,
	116, 271,
	129, 271,
	150, 271,
	154, 271,
	220, 271,
	-2, 520,
	-1, 691,
	260, 669,
	-2, 663,
	-1, 877,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 451,
	-1, 878,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 452,
	-1, 879,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 453,
	-1, 883,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 457,
	-1, 884,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 458,
	-1, 885,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 459,
	-1, 888,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 464,
	-1, 919,
	159, 590,
	-2, 593,
	-1, 1066,
	85, 271,
	116, 271,
	129, 271,
	150, 271,
	154, 271,
	220, 271,
	-2, 341,
	-1, 1074,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 465,
	-1, 1079,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 466,
	-1, 1098,
	159, 589,
	-2, 592,
	-1, 1236,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 467,
	-1, 1241,
	119, 0,
	-2, 477,
	-1, 1250,
	159, 591,
	-2, 594,
	-1, 1290,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 501,
	-1, 1291,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 502,
	-1, 1292,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 503,
	-1, 1296,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 507,
	-1, 1297,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 508,
	-1, 1298,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 509,
	-1, 1391,
	119, 0,
	-2, 478,
	-1, 1395,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 481,
	-1, 1396,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 483,
	-1, 1475,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 482,
	-1, 1476,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 484,
	-1, 1484,
	119, 0,
	-2, 510,
	-1, 1521,
	119, 0,
	-2, 511,
	-1, 1566,
	30, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 790,
}

const sqlNprod = 922
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 17972

var sqlAct = [...]int{

	916, 1565, 1548, 1526, 762, 1586, 1549, 769, 1550, 1564,
	1432, 1362, 818, 1492, 1465, 238, 1270, 1242, 1363, 1457,
	1328, 1062, 1377, 802, 686, 1216, 641, 395, 1371, 394,
	455, 1156, 13, 387, 265, 1155, 1101, 805, 621, 1054,
	688, 804, 770, 748, 460, 1225, 826, 971, 739, 445,
	1243, 936, 481, 84, 932, 904, 243, 28, 59, 1050,
	901, 829, 717, 721, 926, 637, 88, 1065, 643, 245,
	37, 799, 499, 463, 18, 465, 237, 360, 491, 10,
	510, 526, 28, 6, 286, 282, 369, 248, 342, 57,
	341, 81, 807, 343, 501, 37, 827, 38, 497, 490,
	61, 389, 66, 39, 28, 60, 763, 242, 275, 62,
	284, 458, 242, 1094, 353, 456, 458, 37, 457, 443,
	456, 644, 1096, 457, 767, 290, 1562, 1097, 1459, 1456,
	929, 1514, 1095, 644, 279, 235, 1022, 1094, 483, 287,
	444, 234, 261, 1303, 1556, 268, 483, 822, 1555, 1547,
	276, 822, 1394, 1542, 1523, 1249, 822, 1394, 1128, 974,
	1144, 1145, 1146, 1517, 930, 1505, 822, 1502, 822, 1477,
	1456, 1472, 1394, 1455, 822, 1034, 1456, 1452, 291, 1437,
	822, 1436, 822, 1417, 822, 1397, 1094, 1393, 1094, 1338,
	1394, 43, 822, 1246, 931, 928, 1094, 737, 1206, 1202,
	1141, 482, 482, 1173, 1171, 1052, 1174, 1094, 45, 1170,
	1169, 1098, 1094, 1094, 1094, 823, 736, 1100, 822, 735,
	488, 43, 1094, 489, 1036, 822, 482, 486, 912, 817,
	792, 645, 1128, 46, 1144, 1145, 1146, 43, 45, 354,
	41, 307, 260, 43, 1390, 933, 42, 47, 525, 321,
	340, 1563, 1561, 1518, 45, 1454, 1422, 361, 361, 1418,
	45, 1410, 1409, 46, 40, 1038, 1404, 461, 1403, 1402,
	41, 339, 1401, 1388, 1141, 484, 42, 1355, 1318, 46,
	397, 1142, 402, 484, 334, 46, 41, 1313, 1022, 454,
	1312, 1311, 42, 1253, 58, 450, 1231, 909, 927, 1215,
	645, 1207, 1176, 1175, 1163, 370, 646, 447, 1154, 1127,
	766, 87, 1124, 1122, 1111, 1105, 40, 1474, 1035, 1072,
	1473, 986, 87, 87, 648, 333, 87, 943, 942, 87,
	87, 87, 1143, 353, 87, 87, 87, 87, 352, 289,
	458, 1147, 647, 235, 456, 629, 631, 457, 1493, 234,
	796, 262, 638, 1272, 262, 1142, 271, 87, 87, 262,
	1513, 281, 1494, 482, 1486, 677, 678, 679, 680, 681,
	276, 618, 694, 1468, 684, 910, 1462, 1451, 1128, 1429,
	290, 290, 474, 1415, 1382, 617, 1354, 1360, 529, 1386,
	1240, 1138, 1139, 1140, 697, 1137, 1134, 1135, 1136, 1129,
	1130, 1131, 1132, 1133, 1230, 1213, 1143, 691, 495, 1212,
	494, 521, 1210, 514, 610, 1188, 1000, 614, 520, 615,
	1187, 1153, 1119, 1118, 613, 1110, 1091, 1087, 906, 662,
	722, 625, 627, 291, 291, 725, 626, 1128, 1000, 999,
	981, 530, 639, 941, 235, 821, 727, 235, 235, 1128,
	633, 715, 714, 634, 635, 713, 712, 711, 710, 734,
	709, 708, 707, 706, 705, 1138, 1139, 1140, 704, 1137,
	1134, 1135, 1136, 1129, 1130, 1131, 1132, 1133, 703, 1141,
	663, 702, 1073, 701, 692, 730, 690, 40, 619, 266,
	357, 689, 719, 720, 1233, 1232, 451, 723, 1357, 1023,
	1128, 1142, 726, 328, 742, 316, 699, 1372, 765, 87,
	763, 87, 1273, 87, 937, 718, 753, 755, 728, 359,
	785, 59, 1114, 529, 529, 1532, 1019, 1575, 87, 466,
	446, 467, 28, 685, 262, 1501, 1346, 1576, 731, 733,
	779, 284, 246, 346, 87, 28, 656, 649, 650, 651,
	652, 653, 1143, 311, 87, 87, 290, 87, 37, 745,
	1142, 1029, 225, 61, 778, 646, 232, 758, 60, 452,
	287, 784, 62, 780, 782, 1445, 530, 530, 781, 262,
	476, 1444, 646, 648, 1200, 255, 1180, 87, 1179, 87,
	1109, 741, 529, 468, 289, 289, 1108, 1199, 646, 1107,
	648, 647, 528, 87, 797, 87, 87, 798, 87, 291,
	1106, 1143, 281, 1075, 281, 1500, 648, 87, 647, 1129,
	1130, 1131, 1132, 1133, 893, 783, 695, 760, 759, 867,
	281, 741, 229, 315, 647, 87, 903, 740, 87, 399,
	1385, 903, 1534, 477, 1262, 530, 361, 51, 824, 933,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 1583, 241, 937, 1137, 1134, 1135, 1136, 1129, 1130,
	1131, 1132, 1133, 52, 1575, 1014, 1011, 363, 472, 646,
	1129, 1130, 1131, 1132, 1133, 933, 857, 832, 466, 1589,
	467, 866, 230, 240, 944, 662, 955, 648, 965, 967,
	972, 975, 976, 977, 1434, 801, 1544, 730, 1495, 233,
	1190, 662, 730, 831, 471, 647, 815, 816, 1030, 1028,
	917, 1545, 716, 985, 87, 483, 461, 528, 528, 469,
	1128, 242, 529, 1131, 1132, 1133, 313, 87, 838, 682,
	466, 87, 467, 1197, 87, 1482, 663, 907, 87, 729,
	87, 87, 468, 87, 1015, 1128, 87, 87, 87, 908,
	289, 1117, 663, 87, 87, 1226, 262, 449, 331, 761,
	989, 314, 995, 773, 349, 350, 242, 856, 777, 1551,
	355, 281, 1574, 738, 53, 530, 857, 997, 281, 1582,
	1572, 1587, 1370, 1259, 891, 1017, 528, 239, 651, 652,
	653, 345, 1077, 990, 468, 54, 811, 902, 638, 957,
	654, 655, 656, 649, 650, 651, 652, 653, 49, 324,
	1191, 1025, 1010, 1260, 749, 308, 1588, 306, 1021, 649,
	650, 651, 652, 653, 1439, 1018, 929, 1037, 838, 913,
	918, 1590, 921, 1024, 1045, 1026, 55, 1552, 1027, 290,
	1435, 1032, 788, 1142, 1039, 1031, 1413, 966, 789, 50,
	1581, 1299, 484, 978, 979, 980, 1596, 1068, 28, 1438,
	930, 791, 892, 1043, 933, 344, 752, 856, 1142, 790,
	1074, 37, 1067, 87, 1079, 1061, 1047, 1427, 1342, 87,
	87, 1046, 889, 1071, 1182, 1048, 345, 464, 469, 994,
	931, 928, 291, 1093, 1143, 723, 1258, 726, 812, 624,
	1553, 620, 616, 1102, 262, 87, 720, 719, 87, 837,
	649, 650, 651, 652, 653, 1300, 1414, 1099, 1115, 1143,
	1128, 1301, 1120, 519, 507, 518, 1595, 512, 1078, 1527,
	262, 56, 1076, 1554, 859, 1345, 528, 751, 344, 496,
	469, 933, 1344, 684, 48, 1428, 1341, 890, 1002, 972,
	972, 972, 1001, 1380, 1221, 1220, 312, 1137, 1134, 1135,
	1136, 1129, 1130, 1131, 1132, 1133, 329, 1113, 274, 1178,
	240, 336, 1051, 1217, 940, 1485, 1412, 1157, 1239, 1123,
	1185, 1086, 786, 1134, 1135, 1136, 1129, 1130, 1131, 1132,
	1133, 750, 644, 522, 927, 327, 1160, 1161, 1162, 87,
	87, 87, 325, 322, 461, 87, 1203, 1186, 87, 837,
	1343, 273, 1158, 632, 87, 87, 87, 87, 87, 700,
	87, 87, 1184, 612, 991, 1177, 939, 87, 1325, 87,
	347, 1195, 1053, 1193, 859, 87, 524, 1181, 1041, 1194,
	1198, 1196, 1057, 1142, 87, 1204, 1090, 87, 1205, 523,
	1092, 813, 281, 289, 1235, 1060, 1236, 1211, 1209, 810,
	281, 1267, 487, 1103, 1104, 1224, 485, 1241, 480, 87,
	1058, 87, 87, 1057, 87, 1251, 1223, 473, 382, 1219,
	470, 1251, 1222, 87, 1227, 1228, 1060, 1446, 87, 87,
	348, 87, 1576, 258, 1143, 1268, 1055, 1040, 1255, 1256,
	1257, 1058, 1152, 75, 1277, 318, 516, 1279, 1084, 85,
	1448, 757, 1201, 1165, 1056, 819, 262, 857, 1252, 1082,
	249, 249, 1459, 1059, 264, 741, 1497, 264, 270, 264,
	1515, 756, 264, 277, 264, 85, 1274, 3, 1308, 1309,
	741, 1278, 1261, 1263, 1264, 1520, 754, 1315, 1316, 1317,
	1053, 857, 1276, 259, 1059, 85, 85, 858, 857, 1280,
	1136, 1129, 1130, 1131, 1132, 1133, 820, 1306, 1218, 838,
	513, 508, 1307, 319, 1080, 646, 646, 1334, 1085, 1329,
	309, 310, 351, 1320, 768, 267, 640, 1327, 1070, 857,
	1310, 1057, 1593, 648, 1339, 1340, 1594, 1128, 1373, 1324,
	947, 63, 646, 838, 1060, 1387, 793, 1335, 856, 794,
	838, 647, 647, 1319, 1055, 1356, 1361, 1359, 1265, 1058,
	1391, 1368, 1234, 1367, 224, 1395, 1396, 1369, 1172, 74,
	1398, 1247, 1056, 1384, 1033, 1400, 984, 1383, 1392, 28,
	983, 838, 856, 982, 1379, 1081, 934, 1375, 1376, 856,
	1405, 1381, 1083, 899, 1408, 795, 1399, 858, 226, 227,
	1358, 87, 1266, 693, 897, 228, 834, 950, 1433, 65,
	857, 611, 1059, 323, 1406, 1330, 1543, 1331, 1116, 1481,
	856, 1464, 938, 87, 1416, 698, 23, 1365, 375, 1326,
	1411, 1183, 806, 1304, 531, 87, 517, 87, 506, 87,
	1333, 951, 87, 398, 1314, 326, 1336, 264, 773, 85,
	500, 337, 509, 87, 946, 448, 87, 895, 1378, 894,
	400, 835, 838, 900, 87, 1440, 249, 87, 401, 1423,
	836, 952, 949, 724, 388, 833, 285, 771, 262, 935,
	1112, 262, 264, 1424, 696, 374, 1447, 1461, 380, 379,
	837, 914, 264, 264, 1332, 478, 371, 79, 1374, 80,
	1469, 856, 1368, 1426, 1367, 1460, 834, 1453, 1369, 1458,
	1475, 1476, 1449, 1016, 958, 859, 857, 1441, 87, 1467,
	1442, 1443, 953, 1353, 837, 264, 764, 264, 814, 1471,
	896, 837, 628, 1192, 231, 1125, 1480, 898, 964, 956,
	1489, 85, 954, 264, 85, 332, 85, 1470, 459, 859,
	1491, 772, 358, 1487, 320, 623, 859, 945, 825, 1069,
	356, 636, 837, 257, 857, 1478, 1490, 256, 838, 803,
	317, 787, 461, 249, 475, 948, 642, 330, 1496, 1531,
	87, 87, 87, 1504, 1189, 857, 1506, 859, 87, 87,
	1508, 44, 17, 1510, 87, 1507, 87, 16, 87, 87,
	87, 87, 15, 14, 1368, 12, 1367, 856, 11, 730,
	1369, 87, 1044, 87, 9, 1516, 838, 1519, 8, 7,
	22, 87, 87, 1349, 1522, 87, 21, 1535, 20, 5,
	4, 87, 87, 1509, 2, 1, 1536, 838, 0, 0,
	1528, 1529, 0, 837, 0, 1539, 262, 262, 1538, 1540,
	262, 1537, 1541, 1558, 0, 856, 857, 0, 0, 64,
	0, 1368, 1559, 1367, 1557, 1569, 1569, 1369, 859, 0,
	1560, 1533, 264, 87, 0, 1570, 856, 1573, 1571, 0,
	0, 1577, 0, 0, 1578, 746, 0, 1569, 1580, 264,
	1334, 0, 264, 1579, 0, 0, 264, 67, 775, 776,
	1592, 264, 1591, 0, 264, 85, 85, 0, 838, 958,
	958, 264, 642, 0, 1569, 1597, 0, 72, 0, 0,
	1335, 0, 68, 0, 0, 0, 87, 0, 87, 0,
	87, 0, 0, 0, 0, 0, 0, 87, 858, 67,
	69, 0, 1512, 0, 0, 0, 0, 856, 0, 837,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 72,
	0, 87, 1431, 0, 68, 0, 0, 958, 958, 958,
	0, 87, 858, 87, 859, 0, 0, 0, 0, 858,
	0, 87, 69, 87, 0, 0, 0, 0, 1330, 0,
	1331, 376, 29, 0, 0, 71, 1463, 837, 0, 0,
	1546, 0, 0, 0, 0, 0, 262, 214, 0, 0,
	858, 0, 0, 1333, 0, 0, 0, 29, 837, 1336,
	0, 223, 859, 0, 0, 0, 0, 0, 70, 236,
	0, 800, 244, 0, 0, 0, 0, 264, 746, 29,
	0, 1088, 1089, 859, 0, 87, 87, 834, 0, 87,
	244, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 264, 73, 0, 85, 1332, 0, 87,
	70, 215, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 958, 958, 0, 0, 834, 837,
	0, 858, 0, 0, 87, 87, 87, 0, 87, 1149,
	1150, 1151, 0, 218, 0, 0, 73, 0, 0, 0,
	0, 0, 219, 0, 859, 87, 0, 0, 0, 834,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 958, 958, 958,
	958, 958, 958, 958, 958, 958, 958, 958, 958, 958,
	958, 958, 958, 958, 958, 0, 958, 264, 992, 993,
	773, 0, 0, 746, 0, 0, 998, 0, 0, 0,
	0, 0, 1003, 1004, 1006, 1008, 1009, 0, 1012, 1013,
	0, 0, 0, 0, 0, 264, 0, 1020, 0, 0,
	0, 0, 0, 264, 0, 0, 0, 858, 0, 0,
	834, 0, 800, 0, 0, 800, 0, 0, 220, 0,
	0, 221, 0, 0, 0, 222, 1237, 1238, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 623, 0, 85,
	264, 0, 1042, 0, 0, 0, 0, 236, 0, 0,
	0, 1049, 0, 0, 0, 858, 1064, 1064, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 0, 1302, 646,
	0, 664, 665, 666, 0, 0, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 834, 648, 0, 673,
	0, 0, 0, 0, 0, 0, 646, 0, 664, 665,
	666, 0, 0, 0, 0, 647, 0, 0, 667, 0,
	0, 661, 0, 0, 648, 0, 673, 858, 236, 0,
	0, 236, 236, 958, 0, 0, 0, 1128, 0, 1144,
	1145, 1146, 647, 0, 834, 0, 0, 0, 661, 1389,
	0, 0, 0, 0, 0, 683, 0, 0, 0, 687,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 662, 0, 674, 0, 0, 0, 0, 642,
	958, 0, 0, 0, 0, 672, 0, 0, 0, 0,
	0, 0, 668, 0, 669, 0, 0, 0, 0, 662,
	0, 264, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 1208, 0, 746, 1147, 623, 0, 668,
	1214, 0, 0, 663, 0, 0, 0, 29, 0, 0,
	1142, 264, 671, 0, 264, 1430, 0, 0, 0, 0,
	29, 0, 1229, 0, 0, 1064, 0, 0, 0, 0,
	663, 0, 0, 958, 0, 0, 0, 0, 0, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	670, 1143, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 0, 1271, 0, 987, 0,
	0, 0, 0, 0, 0, 988, 0, 670, 0, 658,
	659, 660, 1484, 657, 654, 655, 656, 649, 650, 651,
	652, 653, 0, 0, 0, 19, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 32, 0, 0, 0, 0,
	1138, 1139, 1140, 0, 1137, 1134, 1135, 1136, 1129, 1130,
	1131, 1132, 1133, 0, 0, 0, 33, 0, 1322, 1323,
	746, 0, 36, 0, 0, 0, 642, 642, 0, 0,
	0, 0, 1347, 0, 1348, 0, 264, 1350, 1351, 1352,
	0, 0, 0, 0, 0, 1521, 0, 24, 0, 642,
	0, 746, 1364, 25, 0, 0, 828, 0, 0, 264,
	264, 0, 0, 264, 0, 26, 0, 0, 0, 642,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 646, 0, 664, 665,
	666, 1407, 0, 0, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 0, 648, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 0, 27, 0, 34, 646, 661, 664,
	665, 666, 0, 43, 0, 0, 0, 30, 31, 667,
	0, 0, 0, 0, 746, 648, 1425, 673, 85, 0,
	45, 0, 0, 0, 0, 264, 0, 0, 244, 0,
	0, 0, 35, 647, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 1364, 646, 46, 664, 665, 666, 642,
	0, 0, 41, 0, 674, 646, 667, 0, 42, 264,
	0, 1466, 648, 0, 673, 672, 0, 0, 0, 264,
	0, 642, 0, 648, 669, 0, 40, 0, 0, 662,
	647, 0, 0, 29, 0, 0, 661, 0, 0, 0,
	646, 647, 1066, 0, 0, 674, 0, 661, 0, 668,
	0, 0, 0, 0, 0, 0, 672, 0, 648, 0,
	673, 0, 0, 0, 0, 669, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 0, 647, 0, 0, 0,
	663, 0, 661, 1498, 1499, 0, 0, 1503, 0, 671,
	668, 0, 674, 0, 0, 1364, 0, 0, 85, 0,
	0, 0, 0, 672, 905, 0, 0, 642, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 662, 683, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 662, 0,
	671, 0, 642, 642, 264, 0, 85, 670, 674, 658,
	659, 660, 0, 657, 654, 655, 656, 649, 650, 651,
	652, 653, 1364, 1466, 0, 0, 0, 0, 669, 0,
	1168, 0, 0, 662, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 264, 683, 0, 0, 671, 670, 663,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 0, 0, 0, 0, 0, 0, 0,
	0, 1167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 0, 670, 0, 658, 659, 660,
	0, 657, 654, 655, 656, 649, 650, 651, 652, 653,
	0, 0, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 828, 0, 0,
	0, 670, 0, 0, 0, 0, 0, 657, 654, 655,
	656, 649, 650, 651, 652, 653, 396, 384, 385, 386,
	383, 372, 0, 0, 0, 0, 0, 0, 89, 90,
	923, 91, 0, 0, 0, 0, 378, 0, 0, 0,
	92, 93, 174, 425, 426, 94, 427, 428, 0, 95,
	179, 96, 393, 411, 429, 430, 0, 421, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 431, 108, 432, 433, 0, 0, 109, 0,
	924, 0, 424, 111, 0, 0, 0, 0, 377, 112,
	412, 391, 0, 113, 114, 434, 115, 0, 0, 0,
	295, 0, 116, 422, 0, 190, 0, 117, 418, 420,
	0, 0, 0, 296, 118, 435, 436, 437, 0, 403,
	0, 297, 119, 298, 120, 0, 0, 423, 299, 121,
	300, 0, 250, 0, 29, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 392, 419, 129, 438,
	130, 131, 828, 828, 0, 0, 828, 132, 200, 302,
	133, 303, 413, 134, 135, 0, 414, 136, 203, 0,
	137, 138, 439, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 381, 147, 0, 148, 149, 0,
	150, 252, 409, 151, 152, 305, 153, 440, 154, 0,
	155, 157, 207, 156, 415, 0, 0, 158, 159, 0,
	254, 441, 0, 0, 253, 416, 417, 390, 160, 161,
	162, 163, 0, 0, 164, 165, 410, 0, 166, 167,
	168, 212, 442, 922, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 365, 925, 0, 0, 0, 366,
	0, 0, 373, 920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 828, 0, 0, 89, 90, 532, 91, 533,
	534, 535, 536, 537, 538, 539, 540, 92, 93, 174,
	175, 176, 94, 177, 178, 541, 95, 179, 96, 542,
	543, 180, 181, 544, 182, 545, 293, 546, 97, 98,
	99, 0, 100, 547, 101, 548, 294, 102, 103, 549,
	550, 551, 552, 553, 554, 104, 105, 106, 107, 183,
	108, 184, 185, 555, 556, 109, 557, 558, 559, 110,
	111, 560, 561, 683, 562, 186, 112, 187, 563, 564,
	113, 114, 188, 115, 565, 566, 567, 295, 568, 116,
	189, 569, 190, 570, 117, 191, 192, 571, 572, 573,
	296, 118, 193, 194, 195, 574, 196, 575, 297, 119,
	298, 120, 576, 577, 197, 299, 121, 300, 578, 250,
	579, 580, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 581, 128, 582, 198, 129, 199, 130, 131, 583,
	584, 585, 586, 587, 132, 200, 302, 133, 303, 201,
	134, 135, 588, 202, 136, 203, 589, 137, 138, 204,
	139, 140, 590, 141, 142, 143, 591, 144, 304, 145,
	146, 205, 147, 0, 148, 149, 592, 150, 252, 593,
	151, 152, 305, 153, 206, 154, 594, 155, 157, 207,
	156, 208, 595, 596, 158, 159, 597, 254, 209, 598,
	599, 253, 210, 211, 600, 160, 161, 162, 163, 601,
	602, 164, 165, 603, 604, 166, 167, 168, 212, 213,
	605, 169, 606, 607, 608, 609, 170, 171, 172, 173,
	0, 527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 89, 90, 532, 91, 533, 534, 535,
	536, 537, 538, 539, 540, 92, 93, 174, 175, 176,
	94, 177, 178, 541, 95, 179, 96, 542, 543, 180,
	181, 544, 182, 545, 293, 546, 97, 98, 99, 0,
	100, 547, 101, 548, 294, 102, 103, 549, 550, 551,
	552, 553, 554, 104, 105, 106, 107, 183, 108, 184,
	185, 555, 556, 109, 557, 558, 559, 110, 111, 560,
	561, 0, 562, 186, 112, 187, 563, 564, 113, 114,
	188, 115, 565, 566, 567, 295, 568, 116, 189, 569,
	190, 570, 117, 191, 192, 571, 572, 573, 296, 118,
	193, 194, 195, 574, 196, 575, 297, 119, 298, 120,
	576, 577, 197, 299, 121, 300, 578, 250, 579, 580,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 581,
	128, 582, 198, 129, 199, 130, 131, 583, 584, 585,
	586, 587, 132, 200, 302, 133, 303, 201, 134, 135,
	588, 202, 136, 203, 589, 137, 138, 204, 139, 140,
	590, 141, 142, 143, 591, 144, 304, 145, 146, 205,
	147, 0, 148, 149, 592, 150, 252, 593, 151, 152,
	305, 153, 206, 154, 594, 155, 157, 207, 156, 208,
	595, 596, 158, 159, 597, 254, 209, 598, 599, 253,
	210, 211, 600, 160, 161, 162, 163, 601, 602, 164,
	165, 603, 604, 166, 167, 168, 212, 213, 605, 169,
	606, 607, 608, 609, 170, 171, 172, 173, 396, 384,
	385, 386, 383, 372, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 378, 0,
	0, 0, 92, 93, 174, 425, 426, 94, 427, 428,
	0, 95, 179, 96, 393, 411, 429, 430, 0, 421,
	0, 404, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 103, 0, 405, 407, 0, 406, 408,
	104, 105, 106, 107, 431, 108, 432, 433, 462, 0,
	109, 0, 0, 0, 424, 111, 0, 0, 0, 0,
	377, 112, 412, 391, 0, 113, 114, 434, 115, 0,
	0, 0, 295, 0, 116, 422, 0, 190, 0, 117,
	418, 420, 0, 0, 0, 296, 118, 435, 436, 437,
	0, 403, 0, 297, 119, 298, 120, 0, 0, 423,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 367, 128, 392, 419,
	129, 438, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 413, 134, 135, 0, 414, 136,
	203, 0, 137, 138, 439, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 381, 147, 0, 148,
	149, 43, 150, 252, 409, 151, 152, 305, 153, 440,
	154, 0, 155, 157, 207, 156, 415, 0, 45, 158,
	159, 0, 254, 441, 0, 0, 253, 416, 417, 390,
	160, 161, 162, 163, 0, 0, 164, 165, 410, 0,
	166, 167, 168, 292, 442, 0, 169, 0, 0, 0,
	41, 170, 171, 172, 173, 368, 42, 396, 384, 385,
	386, 383, 372, 0, 0, 364, 365, 0, 0, 89,
	90, 366, 91, 0, 373, 0, 0, 378, 0, 0,
	0, 92, 93, 174, 425, 426, 94, 427, 428, 0,
	95, 179, 96, 393, 411, 429, 430, 0, 421, 0,
	404, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 405, 407, 0, 406, 408, 104,
	105, 106, 107, 431, 108, 432, 433, 0, 0, 109,
	0, 0, 0, 424, 111, 0, 0, 0, 0, 377,
	112, 412, 391, 0, 113, 114, 434, 115, 0, 0,
	0, 295, 0, 116, 422, 0, 190, 0, 117, 418,
	420, 0, 0, 0, 296, 118, 435, 436, 437, 0,
	403, 0, 297, 119, 298, 120, 0, 0, 423, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 367, 128, 392, 419, 129,
	438, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 413, 134, 135, 0, 414, 136, 203,
	0, 137, 138, 439, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 381, 147, 0, 148, 149,
	43, 150, 252, 409, 151, 152, 305, 153, 440, 154,
	0, 155, 157, 207, 156, 415, 0, 45, 158, 159,
	0, 254, 441, 0, 0, 253, 416, 417, 390, 160,
	161, 162, 163, 0, 0, 164, 165, 410, 0, 166,
	167, 168, 292, 442, 0, 169, 0, 0, 0, 41,
	170, 171, 172, 173, 368, 42, 396, 384, 385, 386,
	383, 372, 0, 0, 364, 365, 0, 0, 89, 90,
	366, 91, 0, 373, 0, 0, 378, 0, 0, 0,
	92, 93, 174, 425, 426, 94, 427, 428, 968, 95,
	179, 96, 393, 411, 429, 430, 0, 421, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 431, 108, 432, 433, 0, 0, 109, 0,
	0, 0, 424, 111, 0, 0, 0, 0, 377, 112,
	412, 391, 0, 113, 114, 434, 115, 0, 0, 973,
	295, 0, 116, 422, 0, 190, 0, 117, 418, 420,
	0, 0, 0, 296, 118, 435, 436, 437, 0, 403,
	0, 297, 119, 298, 120, 0, 969, 423, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 392, 419, 129, 438,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 413, 134, 135, 0, 414, 136, 203, 0,
	137, 138, 439, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 381, 147, 0, 148, 149, 0,
	150, 252, 409, 151, 152, 305, 153, 440, 154, 0,
	155, 157, 207, 156, 415, 0, 0, 158, 159, 0,
	254, 441, 0, 970, 253, 416, 417, 390, 160, 161,
	162, 163, 0, 0, 164, 165, 410, 0, 166, 167,
	168, 212, 442, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 368, 0, 396, 384, 385, 386, 383,
	372, 0, 0, 364, 365, 0, 0, 89, 90, 366,
	91, 0, 373, 0, 0, 378, 0, 0, 0, 92,
	93, 174, 425, 426, 94, 427, 428, 0, 95, 179,
	96, 393, 411, 429, 430, 0, 421, 0, 404, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 405, 407, 0, 406, 408, 104, 105, 106,
	107, 431, 108, 432, 433, 0, 0, 109, 0, 0,
	0, 424, 111, 0, 0, 0, 0, 377, 112, 412,
	391, 0, 113, 114, 434, 115, 0, 0, 0, 295,
	0, 116, 422, 0, 190, 0, 117, 418, 420, 0,
	0, 0, 296, 118, 435, 436, 437, 0, 403, 0,
	297, 119, 298, 120, 0, 0, 423, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 367, 128, 392, 419, 129, 438, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 413, 134, 135, 0, 414, 136, 203, 0, 137,
	138, 439, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 381, 147, 0, 148, 149, 0, 150,
	252, 409, 151, 152, 305, 153, 440, 154, 0, 155,
	157, 207, 156, 415, 0, 0, 158, 159, 0, 254,
	441, 0, 0, 253, 416, 417, 390, 160, 161, 162,
	163, 0, 0, 164, 165, 410, 0, 166, 167, 168,
	212, 442, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 368, 0, 396, 384, 385, 386, 383, 372,
	0, 0, 364, 365, 0, 0, 89, 90, 366, 91,
	0, 373, 1305, 0, 378, 0, 0, 0, 92, 93,
	174, 425, 426, 94, 427, 428, 0, 95, 179, 96,
	393, 411, 429, 430, 0, 421, 0, 404, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 103,
	0, 405, 407, 0, 406, 408, 104, 105, 106, 107,
	431, 108, 432, 433, 0, 0, 109, 0, 0, 0,
	424, 111, 0, 0, 0, 0, 377, 112, 412, 391,
	0, 113, 114, 434, 115, 0, 0, 0, 295, 0,
	116, 422, 0, 190, 0, 117, 418, 420, 0, 0,
	0, 296, 118, 435, 436, 437, 0, 403, 0, 297,
	119, 298, 120, 0, 0, 423, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 392, 419, 129, 438, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	413, 134, 135, 0, 414, 136, 203, 0, 137, 138,
	439, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 381, 147, 0, 148, 149, 0, 150, 252,
	409, 151, 152, 305, 153, 440, 154, 0, 155, 157,
	207, 156, 415, 0, 0, 158, 159, 0, 254, 441,
	0, 0, 253, 416, 417, 390, 160, 161, 162, 163,
	0, 0, 164, 165, 410, 0, 166, 167, 168, 212,
	442, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 368, 0, 396, 384, 385, 386, 383, 372, 0,
	0, 364, 365, 0, 0, 89, 90, 366, 91, 0,
	373, 1248, 0, 378, 0, 0, 0, 92, 93, 174,
	425, 426, 94, 427, 428, 0, 95, 179, 96, 393,
	411, 429, 430, 0, 421, 0, 404, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	405, 407, 0, 406, 408, 104, 105, 106, 107, 431,
	108, 432, 433, 0, 0, 109, 0, 0, 0, 424,
	111, 0, 0, 0, 0, 377, 112, 412, 391, 0,
	113, 114, 434, 115, 0, 0, 0, 295, 0, 116,
	422, 0, 190, 0, 117, 418, 420, 0, 0, 0,
	296, 118, 435, 436, 437, 0, 403, 0, 297, 119,
	298, 120, 0, 0, 423, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 392, 419, 129, 438, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 413,
	134, 135, 0, 414, 136, 203, 0, 137, 138, 439,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 381, 147, 0, 148, 149, 0, 150, 252, 409,
	151, 152, 305, 153, 440, 154, 0, 155, 157, 207,
	156, 415, 0, 0, 158, 159, 0, 254, 441, 0,
	0, 253, 416, 417, 390, 160, 161, 162, 163, 0,
	0, 164, 165, 410, 0, 166, 167, 168, 212, 442,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	368, 0, 396, 384, 385, 386, 383, 372, 0, 0,
	364, 365, 0, 0, 89, 90, 366, 91, 0, 373,
	919, 0, 378, 0, 0, 0, 92, 93, 174, 425,
	426, 94, 427, 428, 0, 95, 179, 96, 393, 411,
	429, 430, 0, 421, 0, 404, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 294, 102, 103, 0, 405,
	407, 0, 406, 408, 104, 105, 106, 107, 431, 108,
	432, 433, 0, 0, 109, 0, 0, 0, 424, 111,
	0, 0, 0, 0, 377, 112, 412, 391, 0, 113,
	114, 434, 115, 0, 0, 0, 295, 0, 116, 422,
	0, 190, 0, 117, 418, 420, 0, 0, 0, 296,
	118, 435, 436, 437, 0, 403, 0, 297, 119, 298,
	120, 0, 0, 423, 299, 121, 300, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 301, 126, 127,
	367, 128, 392, 419, 129, 438, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 302, 133, 303, 413, 134,
	135, 0, 414, 136, 203, 0, 137, 138, 439, 139,
	140, 0, 141, 142, 143, 0, 144, 304, 145, 146,
	381, 147, 0, 148, 149, 0, 150, 252, 409, 151,
	152, 305, 153, 440, 154, 0, 155, 157, 207, 156,
	415, 0, 0, 158, 159, 0, 254, 441, 0, 0,
	253, 416, 417, 390, 160, 161, 162, 163, 0, 0,
	164, 165, 410, 0, 166, 167, 168, 212, 442, 0,
	169, 0, 0, 0, 0, 170, 171, 172, 173, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	365, 0, 0, 0, 0, 366, 689, 915, 373, 396,
	384, 385, 386, 383, 372, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 378,
	0, 0, 0, 92, 93, 174, 425, 426, 94, 427,
	428, 0, 95, 179, 96, 393, 411, 429, 430, 0,
	421, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 431, 108, 432, 433, 0,
	0, 109, 0, 0, 0, 424, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 434, 115,
	0, 0, 0, 295, 0, 116, 422, 0, 190, 0,
	117, 418, 420, 0, 0, 0, 296, 118, 435, 436,
	437, 0, 403, 0, 297, 119, 298, 120, 0, 0,
	423, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 367, 128, 392,
	419, 129, 438, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 413, 134, 135, 0, 414,
	136, 203, 0, 137, 138, 439, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 381, 147, 0,
	148, 149, 0, 150, 252, 409, 151, 152, 305, 153,
	440, 154, 0, 155, 157, 207, 156, 415, 0, 0,
	158, 159, 0, 254, 441, 0, 0, 253, 416, 417,
	390, 160, 161, 162, 163, 0, 0, 164, 165, 410,
	0, 166, 167, 168, 212, 442, 1254, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 368, 0, 396, 384,
	385, 386, 383, 372, 0, 0, 364, 365, 0, 0,
	89, 90, 366, 91, 0, 373, 0, 0, 378, 0,
	0, 0, 92, 93, 174, 425, 426, 94, 427, 428,
	0, 95, 179, 96, 393, 411, 429, 430, 0, 421,
	0, 404, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 103, 0, 405, 407, 0, 406, 408,
	104, 105, 106, 107, 431, 108, 432, 433, 462, 0,
	109, 0, 0, 0, 424, 111, 0, 0, 0, 0,
	377, 112, 412, 391, 0, 113, 114, 434, 115, 0,
	0, 0, 295, 0, 116, 422, 0, 190, 0, 117,
	418, 420, 0, 0, 0, 296, 118, 435, 436, 437,
	0, 403, 0, 297, 119, 298, 120, 0, 0, 423,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 367, 128, 392, 419,
	129, 438, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 413, 134, 135, 0, 414, 136,
	203, 0, 137, 138, 439, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 381, 147, 0, 148,
	149, 0, 150, 252, 409, 151, 152, 305, 153, 440,
	154, 0, 155, 157, 207, 156, 415, 0, 0, 158,
	159, 0, 254, 441, 0, 0, 253, 416, 417, 390,
	160, 161, 162, 163, 0, 0, 164, 165, 410, 0,
	166, 167, 168, 212, 442, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 368, 0, 396, 384, 385,
	386, 383, 372, 0, 0, 364, 365, 0, 0, 89,
	90, 366, 91, 0, 373, 0, 0, 378, 0, 0,
	0, 92, 93, 174, 425, 426, 94, 427, 428, 0,
	95, 179, 96, 393, 411, 429, 430, 0, 421, 0,
	404, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 405, 407, 0, 406, 408, 104,
	105, 106, 107, 431, 108, 432, 433, 0, 0, 109,
	0, 0, 0, 424, 111, 0, 0, 0, 0, 377,
	112, 412, 391, 0, 113, 114, 434, 115, 0, 0,
	973, 295, 0, 116, 422, 0, 190, 0, 117, 418,
	420, 0, 0, 0, 296, 118, 435, 436, 437, 0,
	403, 0, 297, 119, 298, 120, 0, 0, 423, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 367, 128, 392, 419, 129,
	438, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 413, 134, 135, 0, 414, 136, 203,
	0, 137, 138, 439, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 381, 147, 0, 148, 149,
	0, 150, 252, 409, 151, 152, 305, 153, 440, 154,
	0, 155, 157, 207, 156, 415, 0, 0, 158, 159,
	0, 254, 441, 0, 0, 253, 416, 417, 390, 160,
	161, 162, 163, 0, 0, 164, 165, 410, 0, 166,
	167, 168, 212, 442, 0, 169, 0, 0, 0, 0,
	170, 171, 172, 173, 368, 0, 396, 384, 385, 386,
	383, 372, 0, 0, 364, 365, 0, 0, 89, 90,
	366, 91, 0, 373, 0, 0, 378, 0, 0, 0,
	92, 93, 174, 425, 426, 94, 427, 428, 0, 95,
	179, 96, 393, 411, 429, 430, 0, 421, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 431, 108, 432, 433, 0, 0, 109, 0,
	0, 0, 424, 111, 0, 0, 0, 0, 377, 112,
	412, 391, 0, 113, 114, 434, 115, 0, 0, 0,
	295, 0, 116, 422, 0, 190, 0, 117, 418, 420,
	0, 0, 0, 296, 118, 435, 436, 437, 0, 403,
	0, 297, 119, 298, 120, 0, 0, 423, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 392, 419, 129, 438,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 413, 134, 135, 0, 414, 136, 203, 0,
	137, 138, 439, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 381, 147, 0, 148, 149, 0,
	150, 252, 409, 151, 152, 305, 153, 440, 154, 0,
	155, 157, 207, 156, 415, 0, 0, 158, 159, 0,
	254, 441, 0, 0, 253, 416, 417, 390, 160, 161,
	162, 163, 0, 0, 164, 165, 410, 0, 166, 167,
	168, 212, 442, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 365, 362, 0, 0, 0, 366,
	0, 0, 373, 396, 384, 385, 386, 383, 372, 0,
	0, 0, 0, 0, 0, 89, 90, 630, 91, 0,
	0, 0, 0, 378, 0, 0, 0, 92, 93, 174,
	425, 426, 94, 427, 428, 0, 95, 179, 96, 393,
	411, 429, 430, 0, 421, 0, 404, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	405, 407, 0, 406, 408, 104, 105, 106, 107, 431,
	108, 432, 433, 0, 0, 109, 0, 0, 0, 424,
	111, 0, 0, 0, 0, 377, 112, 412, 391, 0,
	113, 114, 434, 115, 0, 0, 0, 295, 0, 116,
	422, 0, 190, 0, 117, 418, 420, 0, 0, 0,
	296, 118, 435, 436, 437, 0, 403, 0, 297, 119,
	298, 120, 0, 0, 423, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 392, 419, 129, 438, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 413,
	134, 135, 0, 414, 136, 203, 0, 137, 138, 439,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 381, 147, 0, 148, 149, 0, 150, 252, 409,
	151, 152, 305, 153, 440, 154, 0, 155, 157, 207,
	156, 415, 0, 0, 158, 159, 0, 254, 441, 0,
	0, 253, 416, 417, 390, 160, 161, 162, 163, 0,
	0, 164, 165, 410, 0, 166, 167, 168, 212, 442,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	368, 0, 396, 384, 385, 386, 383, 372, 0, 0,
	364, 365, 0, 0, 89, 90, 366, 91, 0, 373,
	0, 0, 378, 0, 0, 0, 92, 93, 174, 425,
	426, 94, 427, 428, 0, 95, 179, 96, 393, 411,
	429, 430, 0, 421, 0, 404, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 294, 102, 1568, 0, 405,
	407, 0, 406, 408, 104, 105, 106, 107, 431, 108,
	432, 433, 0, 0, 109, 0, 0, 0, 424, 111,
	0, 0, 0, 0, 377, 112, 412, 391, 0, 113,
	114, 434, 115, 0, 0, 0, 295, 0, 116, 422,
	0, 190, 0, 117, 418, 420, 0, 0, 0, 296,
	118, 435, 436, 437, 0, 403, 0, 297, 119, 298,
	120, 0, 0, 423, 299, 121, 300, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 301, 126, 127,
	367, 128, 392, 419, 129, 438, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 302, 133, 303, 413, 134,
	135, 0, 414, 136, 203, 0, 137, 138, 439, 139,
	140, 0, 141, 142, 143, 0, 144, 304, 145, 146,
	381, 147, 0, 148, 149, 0, 150, 252, 409, 151,
	152, 305, 153, 440, 154, 0, 155, 157, 207, 156,
	415, 0, 0, 158, 159, 0, 254, 441, 0, 0,
	253, 416, 417, 390, 160, 161, 1567, 163, 0, 0,
	164, 165, 410, 0, 166, 167, 168, 212, 442, 0,
	169, 0, 0, 0, 0, 170, 171, 172, 173, 368,
	0, 396, 384, 385, 386, 383, 372, 0, 0, 364,
	365, 0, 0, 89, 90, 366, 91, 0, 373, 0,
	0, 378, 0, 0, 0, 92, 93, 1566, 425, 426,
	94, 427, 428, 0, 95, 179, 96, 393, 411, 429,
	430, 0, 421, 0, 404, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 1568, 0, 405, 407,
	0, 406, 408, 104, 105, 106, 107, 431, 108, 432,
	433, 0, 0, 109, 0, 0, 0, 424, 111, 0,
	0, 0, 0, 377, 112, 412, 391, 0, 113, 114,
	434, 115, 0, 0, 0, 295, 0, 116, 422, 0,
	190, 0, 117, 418, 420, 0, 0, 0, 296, 118,
	435, 436, 437, 0, 403, 0, 297, 119, 298, 120,
	0, 0, 423, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 367,
	128, 392, 419, 129, 438, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 413, 134, 135,
	0, 414, 136, 203, 0, 137, 138, 439, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 381,
	147, 0, 148, 149, 0, 150, 252, 409, 151, 152,
	305, 153, 440, 154, 0, 155, 157, 207, 156, 415,
	0, 0, 158, 159, 0, 254, 441, 0, 0, 253,
	416, 417, 390, 160, 161, 1567, 163, 0, 0, 164,
	165, 410, 0, 166, 167, 168, 212, 442, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 368, 0,
	396, 384, 385, 386, 383, 372, 0, 0, 364, 365,
	0, 0, 89, 90, 366, 91, 0, 373, 0, 0,
	378, 0, 0, 0, 92, 93, 174, 425, 426, 94,
	427, 428, 0, 95, 179, 96, 393, 411, 429, 430,
	0, 421, 0, 404, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 405, 407, 0,
	406, 408, 104, 105, 106, 107, 431, 108, 432, 433,
	0, 0, 109, 0, 0, 0, 424, 111, 0, 0,
	0, 0, 377, 112, 412, 391, 0, 113, 114, 434,
	115, 0, 0, 0, 295, 0, 116, 422, 0, 190,
	0, 117, 418, 420, 0, 0, 0, 296, 118, 435,
	436, 437, 0, 403, 0, 297, 119, 298, 120, 0,
	0, 423, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 367, 128,
	392, 419, 129, 438, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 413, 134, 135, 0,
	414, 136, 203, 0, 137, 138, 439, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 381, 147,
	0, 148, 149, 0, 150, 252, 409, 151, 152, 305,
	153, 440, 154, 0, 155, 157, 207, 156, 415, 0,
	0, 158, 159, 0, 254, 441, 0, 0, 253, 416,
	417, 390, 160, 161, 162, 163, 0, 0, 164, 165,
	410, 0, 166, 167, 168, 212, 442, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 368, 0, 396,
	384, 385, 386, 383, 372, 0, 0, 364, 365, 0,
	0, 89, 90, 366, 91, 0, 373, 0, 0, 378,
	0, 0, 0, 92, 93, 174, 425, 426, 94, 427,
	428, 0, 95, 179, 96, 393, 411, 429, 430, 0,
	421, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 431, 108, 432, 433, 0,
	0, 109, 0, 0, 0, 424, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 434, 115,
	0, 0, 0, 295, 0, 116, 422, 0, 190, 0,
	117, 418, 420, 0, 0, 0, 296, 118, 435, 436,
	437, 0, 403, 0, 297, 119, 298, 120, 0, 0,
	423, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 0, 128, 392,
	419, 129, 438, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 413, 134, 135, 0, 414,
	136, 203, 0, 137, 138, 439, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 963, 147, 0,
	148, 149, 0, 150, 252, 409, 151, 152, 305, 153,
	440, 154, 0, 155, 157, 207, 156, 415, 0, 0,
	158, 159, 0, 254, 441, 0, 0, 253, 416, 417,
	390, 160, 161, 162, 163, 0, 0, 164, 165, 410,
	0, 166, 167, 168, 212, 442, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 396, 384, 385, 386,
	383, 372, 0, 0, 0, 0, 959, 960, 89, 90,
	0, 91, 961, 0, 0, 962, 378, 0, 0, 0,
	92, 93, 0, 425, 426, 94, 427, 428, 0, 95,
	179, 96, 393, 411, 429, 430, 0, 421, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 1568, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 431, 108, 432, 433, 0, 0, 109, 0,
	0, 0, 424, 111, 0, 0, 0, 0, 377, 112,
	412, 391, 0, 113, 114, 434, 115, 0, 0, 0,
	295, 0, 116, 422, 0, 190, 0, 117, 418, 420,
	0, 0, 0, 296, 118, 435, 436, 437, 0, 403,
	0, 0, 119, 298, 120, 0, 0, 423, 299, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 392, 419, 129, 438,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 413, 134, 135, 0, 414, 136, 203, 0,
	137, 138, 439, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 381, 147, 0, 148, 149, 0,
	150, 252, 409, 151, 152, 0, 153, 440, 154, 0,
	155, 157, 207, 156, 415, 0, 0, 158, 159, 0,
	254, 441, 0, 0, 253, 416, 417, 390, 160, 161,
	1567, 163, 0, 0, 164, 165, 410, 0, 166, 167,
	168, 212, 442, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 396, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 365, 89, 90, 0, 91, 366,
	0, 0, 373, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	411, 180, 181, 0, 421, 0, 404, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	405, 407, 0, 406, 408, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 412, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 295, 0, 116,
	422, 0, 190, 0, 117, 418, 420, 0, 0, 0,
	296, 118, 193, 194, 195, 0, 196, 0, 297, 119,
	298, 120, 0, 0, 423, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 0, 128, 0, 419, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 413,
	134, 135, 0, 414, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 409,
	151, 152, 305, 153, 206, 154, 0, 155, 157, 207,
	156, 415, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 416, 417, 0, 160, 161, 162, 163, 0,
	0, 164, 165, 410, 0, 166, 167, 168, 212, 213,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 1366,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 293, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 295, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 296, 118, 193,
	194, 195, 0, 196, 0, 297, 119, 298, 120, 0,
	0, 197, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 205, 147,
	0, 148, 149, 43, 150, 252, 0, 151, 152, 305,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	45, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 0, 164, 165,
	0, 0, 166, 167, 168, 292, 213, 0, 169, 0,
	0, 0, 41, 170, 171, 172, 173, 0, 42, 288,
	507, 511, 0, 512, 502, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 40, 0, 0, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 293, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 515,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 504, 0, 113, 114, 188, 115,
	0, 0, 0, 295, 0, 116, 189, 0, 190, 0,
	117, 191, 192, 0, 0, 0, 296, 118, 193, 194,
	195, 0, 196, 0, 297, 119, 298, 120, 0, 0,
	197, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 505, 0, 0, 0,
	132, 200, 302, 133, 303, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 305, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	503, 160, 161, 162, 163, 0, 0, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 288, 507, 511, 0,
	512, 502, 0, 0, 0, 0, 513, 508, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 293,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 498, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 504, 0, 113, 114, 188, 115, 0, 0, 0,
	295, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 296, 118, 193, 194, 195, 0, 196,
	0, 297, 119, 298, 120, 0, 0, 197, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 505, 0, 0, 0, 132, 200, 302,
	133, 303, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 305, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 503, 160, 161,
	162, 163, 0, 0, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 288, 507, 511, 0, 512, 502, 0,
	0, 0, 0, 513, 508, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 293, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 504, 0,
	113, 114, 188, 115, 0, 0, 0, 295, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 0, 0,
	296, 118, 193, 194, 195, 0, 196, 0, 297, 119,
	298, 120, 0, 0, 197, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	505, 0, 0, 0, 132, 200, 302, 133, 303, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 305, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 503, 160, 161, 162, 163, 0,
	0, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	86, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	513, 508, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 263, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 43, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	45, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 0, 164, 165,
	0, 0, 166, 167, 168, 292, 213, 0, 169, 0,
	0, 0, 41, 170, 171, 172, 173, 86, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 830, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	43, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 45, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 0, 164, 165, 0, 0, 166,
	167, 168, 292, 213, 0, 169, 0, 0, 0, 41,
	170, 171, 172, 173, 86, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 40, 0, 1063, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 353, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 263,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 0, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 830, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 0, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 774, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 0, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 1272, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 0,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 0, 0, 0, 0, 170, 171, 172, 173, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 453, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 293, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 295, 0, 116, 189, 0, 190, 0,
	117, 191, 192, 0, 0, 0, 296, 118, 193, 194,
	195, 0, 196, 0, 297, 119, 298, 120, 0, 0,
	197, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 305, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 749, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 747, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 752, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 808, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 751,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 809, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 86, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 749, 182, 0, 0, 744, 97, 98,
	99, 0, 100, 747, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 752, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 743, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 751, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	750, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	86, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 1063, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 86, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 89,
	90, 0, 91, 170, 171, 172, 173, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 263, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 493, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 492, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 269, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 263,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 1007, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 86, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 89, 90, 0, 91, 170, 171,
	172, 173, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 1005, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 996, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 622, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 479, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	0, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	86, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 89, 90, 0, 91, 170, 171, 172, 173,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 338, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 86, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 89,
	90, 0, 91, 170, 171, 172, 173, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 335,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 83, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 82, 209,
	0, 0, 78, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 283, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	280, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 278, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 86, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 89, 90, 0, 91, 170, 171,
	172, 173, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 272, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 191, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 247, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 76, 0, 0, 0, 122, 123, 124, 125,
	83, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 77, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	82, 209, 0, 0, 78, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 0, 0, 202, 136, 203, 0, 0, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 0, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	0, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	646, 169, 664, 665, 666, 0, 170, 171, 172, 173,
	0, 0, 667, 0, 0, 0, 0, 0, 648, 0,
	673, 0, 0, 0, 0, 0, 646, 0, 664, 665,
	666, 0, 0, 0, 0, 0, 647, 0, 667, 0,
	0, 0, 661, 0, 648, 0, 673, 646, 0, 664,
	665, 666, 0, 0, 0, 0, 0, 0, 0, 667,
	0, 0, 647, 0, 0, 648, 0, 673, 661, 0,
	0, 0, 0, 0, 0, 646, 0, 664, 665, 666,
	0, 0, 0, 647, 0, 0, 0, 667, 0, 661,
	0, 0, 0, 648, 0, 673, 0, 0, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 647, 0, 0, 0, 0, 0, 661, 669, 0,
	0, 0, 0, 662, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 672, 0, 0, 0, 0,
	0, 0, 0, 668, 669, 674, 0, 0, 0, 662,
	0, 0, 0, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 668,
	662, 0, 0, 674, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 672, 0, 0, 0, 0, 0,
	668, 0, 0, 669, 0, 0, 0, 0, 662, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 670, 0, 658, 659, 660, 0, 657, 654, 655,
	656, 649, 650, 651, 652, 653, 0, 0, 0, 663,
	0, 0, 0, 0, 1166, 0, 0, 670, 671, 658,
	659, 660, 0, 657, 654, 655, 656, 649, 650, 651,
	652, 653, 0, 0, 0, 0, 0, 1525, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 0, 0, 0, 0, 0, 1524, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 658, 659,
	660, 0, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 646, 0, 664, 665, 666, 1511, 0, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 0, 648,
	646, 673, 664, 665, 666, 0, 0, 0, 0, 0,
	0, 0, 667, 0, 0, 0, 0, 647, 648, 0,
	673, 0, 0, 661, 0, 0, 0, 646, 0, 664,
	665, 666, 0, 0, 0, 0, 647, 0, 0, 667,
	0, 0, 661, 0, 0, 648, 0, 673, 0, 0,
	0, 0, 0, 646, 0, 664, 665, 666, 0, 0,
	0, 0, 0, 647, 0, 667, 0, 0, 0, 661,
	0, 648, 0, 673, 0, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	672, 0, 0, 0, 0, 661, 0, 0, 674, 669,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 662, 668, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 668, 0, 669, 0, 0, 0, 0,
	662, 674, 0, 0, 0, 663, 0, 0, 0, 0,
	0, 0, 672, 0, 671, 0, 0, 0, 0, 0,
	668, 669, 0, 0, 663, 0, 662, 0, 0, 0,
	0, 0, 0, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 668, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 670, 0, 658, 659, 660, 0, 657, 654,
	655, 656, 649, 650, 651, 652, 653, 663, 0, 0,
	0, 670, 1488, 658, 659, 660, 671, 657, 654, 655,
	656, 649, 650, 651, 652, 653, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 646,
	0, 664, 665, 666, 1421, 0, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 0, 648, 646, 673,
	664, 665, 666, 0, 0, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 647, 648, 0, 673, 0,
	0, 661, 0, 0, 0, 646, 0, 664, 665, 666,
	0, 0, 0, 0, 647, 0, 0, 667, 0, 0,
	661, 0, 0, 648, 0, 673, 0, 0, 0, 0,
	0, 646, 0, 664, 665, 666, 0, 0, 0, 0,
	0, 647, 0, 667, 0, 0, 0, 661, 0, 648,
	0, 673, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 647, 672, 0,
	0, 0, 0, 661, 0, 0, 674, 669, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 0, 669, 0, 0, 0,
	0, 662, 668, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 668, 0, 669, 0, 0, 0, 0, 662, 674,
	0, 0, 0, 663, 0, 0, 0, 0, 0, 0,
	672, 0, 671, 0, 0, 0, 0, 0, 668, 669,
	0, 0, 663, 0, 662, 0, 0, 0, 0, 0,
	0, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 663, 0, 0, 0, 670,
	1420, 658, 659, 660, 671, 657, 654, 655, 656, 649,
	650, 651, 652, 653, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 670, 0, 658, 659,
	660, 0, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 0, 0, 0, 0, 0, 1275, 0, 0, 0,
	0, 0, 670, 0, 658, 659, 660, 0, 657, 654,
	655, 656, 649, 650, 651, 652, 653, 646, 0, 664,
	665, 666, 1250, 0, 0, 0, 0, 0, 0, 667,
	0, 0, 0, 0, 0, 648, 646, 673, 664, 665,
	666, 0, 0, 0, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 647, 648, 0, 673, 0, 0, 661,
	0, 0, 0, 646, 0, 664, 665, 666, 0, 0,
	0, 0, 647, 0, 0, 667, 0, 0, 661, 0,
	0, 648, 0, 673, 0, 0, 0, 0, 0, 646,
	0, 664, 665, 666, 0, 0, 0, 0, 0, 647,
	0, 667, 0, 0, 0, 661, 0, 648, 0, 673,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 647, 672, 0, 0, 0,
	0, 661, 0, 0, 674, 669, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 672, 0, 1585, 0, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 662,
	668, 674, 0, 0, 0, 0, 646, 0, 0, 0,
	0, 0, 672, 0, 1158, 0, 1157, 0, 0, 668,
	0, 669, 0, 0, 648, 0, 662, 674, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 672, 0,
	671, 0, 647, 0, 0, 0, 668, 669, 0, 0,
	663, 0, 662, 0, 0, 0, 0, 0, 1584, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 0, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 663, 0, 0, 0, 670, 911, 658,
	659, 660, 671, 657, 654, 655, 656, 649, 650, 651,
	652, 653, 0, 0, 0, 1321, 0, 0, 0, 662,
	0, 0, 0, 0, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 646, 0, 664, 665, 666,
	663, 0, 0, 0, 0, 0, 0, 667, 676, 0,
	0, 819, 0, 648, 646, 673, 664, 665, 666, 0,
	0, 0, 0, 0, 0, 0, 667, 0, 0, 675,
	0, 647, 648, 0, 673, 0, 0, 661, 0, 0,
	0, 646, 0, 664, 665, 666, 0, 0, 0, 0,
	647, 0, 0, 667, 0, 0, 661, 0, 0, 648,
	0, 673, 820, 657, 654, 655, 656, 649, 650, 651,
	652, 653, 0, 0, 0, 0, 0, 647, 0, 0,
	0, 0, 0, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 674, 669, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 662, 668, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 0, 0, 0, 0, 0, 668, 0, 669,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 0, 668, 242, 0, 0, 663, 646,
	0, 664, 665, 666, 0, 0, 0, 671, 0, 0,
	0, 667, 0, 0, 0, 0, 0, 648, 0, 673,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 647, 670, 0, 658, 659,
	660, 661, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 0, 0, 0, 0, 670, 0, 658, 659, 660,
	0, 657, 654, 655, 656, 649, 650, 651, 652, 653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 658, 659, 660, 0, 657, 654,
	655, 656, 649, 650, 651, 652, 653, 674, 0, 0,
	0, 0, 0, 646, 0, 664, 665, 666, 672, 0,
	0, 0, 0, 0, 0, 667, 0, 669, 0, 0,
	0, 648, 662, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	0, 0, 668, 0, 0, 661, 0, 646, 0, 664,
	665, 666, 0, 0, 0, 0, 0, 0, 0, 667,
	0, 0, 1159, 0, 0, 648, 0, 673, 0, 0,
	0, 0, 0, 663, 0, 646, 0, 664, 665, 666,
	0, 0, 671, 647, 0, 0, 0, 667, 0, 661,
	1164, 0, 0, 648, 0, 673, 1269, 0, 0, 0,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 672, 0, 0, 0, 0, 661, 0, 0,
	0, 669, 0, 0, 0, 0, 662, 0, 0, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 674, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 0,
	662, 0, 0, 674, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 0, 672, 0, 671, 0, 0, 0,
	668, 0, 0, 669, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 1126, 0,
	671, 0, 0, 0, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 663,
	0, 0, 0, 0, 0, 0, 0, 646, 671, 664,
	665, 666, 0, 0, 0, 0, 0, 0, 0, 667,
	0, 0, 1121, 0, 0, 648, 0, 673, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 647, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 0, 670, 0, 658, 659,
	660, 0, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 0, 0, 0, 0, 0, 0, 0, 0, 646,
	0, 664, 665, 666, 0, 0, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 0, 648, 0, 673,
	646, 0, 664, 665, 666, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 647, 672, 0, 648, 0,
	673, 661, 0, 0, 0, 669, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 0, 647, 0, 0, 0,
	0, 0, 661, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 1128, 0, 1144, 1145, 1146, 0, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 663, 0, 646, 0, 664, 665, 666, 672, 0,
	671, 0, 0, 0, 1141, 0, 0, 669, 674, 0,
	0, 648, 662, 673, 0, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 647,
	0, 0, 668, 662, 0, 661, 0, 1128, 0, 1144,
	1145, 1146, 0, 0, 0, 0, 0, 0, 670, 1244,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 663, 0, 1128, 0, 1144, 1145, 1146,
	0, 1147, 671, 0, 0, 0, 0, 0, 0, 1141,
	0, 0, 0, 0, 663, 1142, 0, 0, 0, 0,
	0, 674, 0, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 669, 0, 0, 0, 0, 662, 0, 0, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 0, 1143, 0, 0, 0,
	0, 670, 0, 658, 659, 660, 1147, 657, 654, 655,
	656, 649, 650, 651, 652, 653, 0, 0, 0, 0,
	1142, 0, 0, 1148, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 0, 1147, 0, 671, 0, 1128, 0,
	1144, 1145, 1146, 0, 0, 0, 0, 0, 1142, 0,
	0, 0, 0, 0, 0, 1138, 1139, 1140, 0, 1137,
	1134, 1135, 1136, 1129, 1130, 1131, 1132, 1133, 0, 0,
	0, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	1141, 0, 0, 0, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1138, 1139, 1140, 0, 1137, 1134, 1135, 1136, 1129, 1130,
	1131, 1132, 1133, 0, 0, 0, 0, 1147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1138, 1139,
	1140, 1142, 1137, 1134, 1135, 1136, 1129, 1130, 1131, 1132,
	1133, 0, 847, 862, 839, 855, 854, 0, 0, 840,
	0, 0, 0, 864, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 1143, 852, 851, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 843, 844, 845, 0, 524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1138, 1139, 1140, 0, 1137, 1134, 1135, 1136, 1129,
	1130, 1131, 1132, 1133, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 841, 0, 0,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865,
}
var sqlPact = [...]int{

	2226, -1000, -16, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 760,
	-1000, -1000, -1000, 571, 747, 34, 1521, 1521, -1000, -1000,
	15002, 1683, 350, 350, 350, 428, 498, 56, -1000, 587,
	4, 14785, 11964, 1095, -22, 11313, 229, 2226, 11747, 11964,
	14568, 934, 870, 11313, 14351, 14134, 13917, -1000, 7846, -1000,
	-1000, -1000, -1000, 686, -1000, -23, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 684, -1000, 13700, 13700, 856, -1000,
	-1000, 536, 265, 1119, -1000, -13, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 926, -1000, 678, 925,
	918, 263, 866, -1000, 856, -1000, -1000, -1000, 11313, -1000,
	13483, 882, 13266, -1000, 587, -1000, -1000, -1000, 756, 1032,
	1032, 1032, 1165, 77, 72, 56, -25, 11964, -1000, 230,
	-1000, -1000, -1000, -1000, -1000, -25, 5922, 5922, -1000, -1000,
	229, -1000, 243, 10188, -142, -1000, 5444, -1000, 733, 1014,
	550, 514, 1011, 11313, 11964, 452, 13049, -1000, 1002, 99,
	1000, -1000, -37, 996, -1000, -41, -1000, -1000, -1000, -1000,
	-1000, -1000, 229, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11530, 1563, 11530, -1000,
	-1000, -1000, 832, 8322, 8085, 1067, 939, -1000, -1000, -1000,
	-14, 3277, 11964, 948, 11530, 11964, -1000, 11964, -1000, 795,
	-1000, -1000, 107, -1000, 228, 779, 12832, -1000, 777, -1000,
	756, -1000, 661, 829, 6179, 6896, 56, -1000, -1000, 56,
	56, 6896, -1000, -1000, 11964, -25, 1181, 11964, 915, -33,
	-1000, 16734, -1000, -1000, 6896, 6896, 6896, 6896, 6896, 590,
	-1000, -1000, -1000, 3753, -1000, -1000, -142, 227, 233, -1000,
	-1000, 226, -142, -1000, -1000, -1000, -1000, 224, 1277, 366,
	-1000, -1000, -1000, 6896, 269, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 944, 223, 221, -1000, -1000, -1000,
	-1000, 218, 208, 204, 203, 202, 201, 200, 198, 197,
	196, 195, 192, 191, 566, -1000, 283, -1000, -1000, 283,
	283, -1000, 170, 170, 175, -1000, -1000, -1000, 170, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 186, 36,
	-1000, -1000, -1000, 11964, -142, -1000, 3039, 3277, 6896, -45,
	-1000, 17339, -1000, -67, 583, -1000, 10869, 1112, 1097, 1077,
	11313, 418, 417, 11964, 276, 50, 1179, 9714, -1000, 11964,
	11964, -1000, 11964, -1000, -1000, 11964, 11964, 11964, 4, 10425,
	415, -38, 11964, 11964, -1000, 905, 693, -34, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1221, -1000,
	-1000, -1000, -1000, 1267, -34, -1000, -1000, -1000, -1000, -1000,
	344, -1000, -1000, -1000, -1000, 3277, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11964, -1000, -1000, -1000, -1000, -1000, 11313, 10642,
	993, 665, 776, -1000, 985, -1000, -1000, -1000, -1000, 17339,
	-1000, 17339, 544, 874, -1000, 874, -35, -1000, 16715, -1000,
	185, -46, -1000, 276, 9477, 5922, 17741, 11964, 421, 6896,
	6896, 6896, 6896, 6896, 6896, 6896, 6896, 6896, 6896, 6896,
	6896, 6896, 6896, 6896, 6896, 6896, 6896, 6896, 6896, 6896,
	774, 414, 1195, 614, 168, 3277, -1000, 1212, 1212, 1212,
	17360, 17360, 115, -147, 16397, -36, -142, -1000, -1000, 4948,
	4709, -142, 2742, -1000, 775, 1258, 281, 17339, 955, 892,
	183, 67, 66, 6896, 1216, 6896, 7135, 6896, 6896, 3992,
	6896, 6896, 6896, 6896, 6896, 6896, -1000, 180, -1000, -1000,
	-1000, -1000, 1255, -1000, -1000, 1252, -1000, 1248, 276, 60,
	-1000, -1000, -1000, -1000, 1959, 5444, -1000, 681, 11964, 11964,
	11964, -1000, -1000, 767, 12615, -1000, 17741, 11964, -1000, 179,
	178, 850, 846, 11964, 11964, 12398, 12181, 11964, 512, 11964,
	11964, 511, -1000, 6896, 654, -1000, 9023, 297, 11964, 24,
	-1000, -1000, -1000, 254, 11964, -1000, -1000, -1000, 99, -1000,
	-37, -1000, -1000, 11964, -38, -39, 11964, -1000, 510, 559,
	-1000, -1000, 8559, -1000, -1000, -1000, 775, 1246, -1000, -89,
	-1000, -1000, 57, -40, -1000, -1000, -1000, -1000, 11964, 156,
	11964, 11964, 972, 11964, -1000, -1000, -1000, 6896, -1000, -1000,
	-1000, 4, 11964, -1000, 890, -59, 995, 11096, 11096, -1000,
	8786, -1000, -1000, 1184, -1000, -1000, -1000, -1000, 59, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 175,
	566, 170, 170, 170, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 283, 283, 283, -1000, -1000, 242, 555, 555,
	1185, 1185, 1185, 296, 296, 588, 572, 2490, 2490, 2490,
	16546, 679, 679, 2490, 2490, 2490, 17360, 2444, 2455, 6896,
	403, 609, 168, 6896, -1000, 1050, -1000, -1000, -1000, 904,
	167, 7135, 7135, -1000, -1000, -1000, 3753, -1000, -1000, 166,
	6896, -1000, 6896, -127, -137, -1000, 17339, -1000, -50, -1000,
	-1000, -47, 6896, 6896, 6896, 54, -1000, 400, -1000, 389,
	386, 380, -1000, 165, 53, 440, -1000, 6896, 613, 163,
	162, 6896, -1000, -1000, 17267, 52, 902, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 51, 17085, 48, 17515, -1000, 7135,
	7135, 7135, 3753, 161, 47, 16469, -151, 17057, 5683, 5683,
	5683, 43, 17013, 6896, -151, 15440, 2397, 2356, -51, -52,
	-57, 1240, -58, 42, 41, 890, -1000, -1000, 6896, -1000,
	-1000, -1000, 378, 376, 971, -1000, 762, -1000, 790, 6896,
	11964, 160, 155, 639, -1000, 967, 696, 965, 696, -1000,
	-67, 543, -1000, -1000, 374, 17339, -1000, 1079, -62, -1000,
	-1000, 276, 9714, 5444, -63, -1000, -89, -89, -1000, -1000,
	-1000, -1000, -1000, 40, 11964, -1000, 10642, 152, 11964, 149,
	145, 11964, -1000, -1000, 38, -1000, -1000, -1000, -1000, -1000,
	889, 1151, 9477, 854, 853, 9477, 964, 618, 618, 618,
	-1000, -1000, -1000, 11964, 144, -1000, 9260, 35, 995, 237,
	236, -1000, 1234, 6896, 2455, 6896, 7135, 7135, -1000, 2455,
	-1000, -1000, -1000, -1000, 901, 130, 6896, 17741, 17487, 17412,
	-68, 4470, -109, 16151, 6896, -1000, -1000, 233, -1000, 32,
	5205, -1000, 16761, -42, -42, -1000, 780, 698, 509, 463,
	1230, 1276, 998, -1000, 6896, 16909, -1000, 9951, 278, 632,
	16125, 17741, -1000, 6896, -1000, 900, 6896, -1000, 17741, 7135,
	7135, 7135, 7135, 7135, 7135, 7135, 7135, 7135, 7135, 7135,
	7135, 7135, 7135, 7135, 7135, 7135, 7135, 793, 7135, 1207,
	1207, 1207, -121, 4231, -1000, 937, 900, 6896, 6896, 17741,
	30, 29, 26, -1000, 6896, -151, 6896, 6896, 6896, -1000,
	-1000, -1000, 17, -1000, 1225, -1000, -1000, 889, 16416, 11964,
	11964, 11964, 962, 1153, -1000, 16098, -72, 11964, 11964, -1000,
	824, 888, 319, 11964, -1000, 11964, -1000, 11964, 11964, 11964,
	11964, 126, 4, -1000, -1000, -1000, 253, 1274, -1000, -1000,
	11964, 127, 10642, 7609, 651, -1000, 272, 6896, 6896, 995,
	9477, 9477, 1113, 852, 9477, -1000, -1000, -1000, -1000, 124,
	11964, 11096, 381, 1217, 12, 1186, 2455, 2017, 222, 6896,
	17741, 17443, -74, -1000, 6896, 6896, -1000, -76, -1000, 6896,
	-1000, 17339, -1000, 1270, 6896, 11, 8, 7, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5, -1000, -1000, 17339, 6896,
	-1000, -1000, 15219, 6896, 1, -1000, 0, 17339, 937, 17339,
	-1000, 490, 490, 1207, 1207, 1207, 930, 930, 368, 755,
	427, 427, 427, 730, 439, 439, 427, 427, 427, 899,
	788, 123, 17628, 6896, -78, -1000, -1000, -1000, 17339, 17339,
	-2, -1000, -1000, -1000, -151, 1986, 16079, 15833, -1000, -5,
	272, -1000, -1000, -1000, -1000, 11964, -1000, 11964, -1000, 11964,
	753, -1000, -1000, 843, 119, 7135, 11964, -1000, 659, -80,
	-82, 735, -1000, 700, 6896, -1000, 17741, 696, 696, -1000,
	371, 365, -1000, 1028, 7609, 1076, -1000, 117, -1000, -84,
	11964, -6, -88, -1000, 82, 1096, 6896, -1000, -1000, 116,
	11964, -1000, 11964, 17339, -151, -1000, 1113, -1000, 113, 6896,
	9477, -1000, 11964, -90, -1000, -1000, 61, 58, -1000, 6896,
	6896, 17443, -92, -1000, 17741, 2455, 2455, -1000, 15807, -1000,
	16761, -1000, -1000, -1000, -1000, 17339, 593, -1000, 15780, -1000,
	-1000, -1000, 7135, 898, 104, 17741, 15761, -1000, -1000, 6896,
	-1000, -1000, -1000, -1000, -1000, 1526, -1000, -1000, -1000, 6896,
	17628, 88, -1000, 102, -1000, -1000, -1000, 545, -1000, -1000,
	17339, 1100, -1000, -1000, 11964, 11964, 392, -94, 11964, -1000,
	-1000, 3514, 659, -96, -1000, 659, 7609, 1109, -142, 11964,
	1109, 15515, 2742, 100, -133, -1000, 1125, -1000, 11964, 17339,
	-1000, -98, -1000, -1000, -1000, 2455, 2455, -1000, -1000, -1000,
	-8, 632, 1128, -1000, 148, 7135, 17741, -107, -1000, 15487,
	-1000, 15466, 815, 11964, 11964, 11964, 300, 11964, -1000, -1000,
	451, -1000, 276, -1000, -1000, 659, -1000, -1000, -1000, -1000,
	-1000, 1096, -47, 7609, 11964, 93, -108, -1000, -1000, 548,
	6896, 148, -112, -1000, -1000, -1000, 638, 759, -113, -117,
	88, -1000, 6896, -1000, 9714, -1000, -1000, 1109, -9, -135,
	-1000, -1000, -1000, -10, 6657, 6657, -151, -1000, -1000, 649,
	641, 461, -1000, -1000, -1000, -1000, -1000, 815, 17339, -128,
	-1000, -1000, 659, -1000, -1000, -1000, 7372, 705, 489, 16443,
	-1000, -1000, 1036, -1000, 304, 660, 660, 638, -1000, -1000,
	1190, -1000, -1000, -1000, -1000, -1000, -1000, 1200, -1000, -1000,
	802, -1000, -1000, 6418, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1515, 1514, 1157, 1510, 1509, 1508, 1506, 1500, 83,
	1499, 1498, 89, 1494, 79, 1492, 1488, 1485, 32, 1483,
	1482, 1477, 1472, 74, 56, 1671, 103, 97, 1471, 1464,
	1459, 12, 75, 73, 1458, 52, 1457, 553, 1098, 38,
	33, 19, 305, 1454, 1451, 1450, 23, 1449, 1447, 1443,
	13, 36, 15, 1441, 11, 26, 1440, 1439, 68, 1438,
	78, 53, 85, 159, 1437, 1434, 519, 1432, 7, 42,
	1431, 24, 1428, 34, 59, 90, 1425, 543, 45, 22,
	39, 1422, 1419, 1418, 47, 64, 54, 1415, 35, 31,
	1414, 48, 1413, 88, 93, 1412, 1408, 1406, 1403, 1393,
	1379, 1123, 1377, 10, 37, 41, 4, 30, 0, 819,
	687, 1376, 55, 25, 40, 17, 1371, 86, 1369, 1368,
	1365, 1364, 1360, 51, 1359, 44, 94, 21, 67, 65,
	18, 46, 61, 96, 108, 77, 1357, 84, 1356, 50,
	1355, 1354, 639, 63, 1353, 1350, 1348, 530, 307, 282,
	101, 1341, 1340, 140, 49, 1335, 1334, 62, 1332, 1330,
	98, 1325, 91, 81, 1323, 80, 1318, 72, 1316, 280,
	119, 66, 1314, 92, 43, 1312, 1311, 1309, 20, 2,
	8, 3, 6, 5, 29, 27, 1308, 1307, 87, 69,
	1306, 542, 1305, 1302, 28, 1301, 1299, 14, 1298, 16,
	1296, 9, 1, 1294, 99, 1293, 71, 1291, 1221, 1289,
	102, 1288, 1285, 1244, 60,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 62, 62,
	61, 61, 65, 65, 11, 11, 12, 12, 12, 12,
	138, 138, 137, 13, 17, 204, 204, 204, 208, 208,
	209, 209, 210, 210, 210, 210, 210, 210, 210, 206,
	206, 19, 19, 19, 101, 101, 100, 100, 100, 100,
	102, 102, 102, 102, 162, 160, 160, 167, 167, 167,
	44, 44, 44, 44, 44, 159, 159, 159, 159, 168,
	168, 168, 168, 168, 168, 168, 45, 45, 45, 166,
	166, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 161, 161, 205, 205, 207, 207, 8, 8, 46,
	46, 47, 47, 105, 105, 105, 104, 176, 176, 177,
	177, 177, 178, 178, 178, 178, 178, 178, 178, 175,
	175, 173, 173, 174, 174, 174, 174, 211, 211, 103,
	103, 50, 50, 181, 181, 181, 181, 179, 179, 179,
	179, 179, 182, 180, 183, 183, 183, 183, 183, 126,
	126, 126, 22, 7, 7, 90, 90, 54, 54, 130,
	130, 130, 41, 41, 31, 31, 31, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 91, 91, 92, 92,
	21, 21, 21, 213, 213, 36, 36, 37, 6, 6,
	14, 43, 43, 97, 97, 97, 99, 99, 99, 98,
	98, 98, 23, 68, 68, 69, 69, 136, 70, 70,
	18, 18, 25, 25, 24, 24, 24, 24, 24, 24,
	26, 26, 27, 27, 27, 27, 27, 27, 27, 189,
	189, 189, 191, 191, 188, 15, 15, 15, 15, 190,
	190, 212, 212, 77, 77, 77, 49, 48, 48, 52,
	52, 51, 53, 53, 129, 75, 75, 75, 75, 93,
	94, 94, 95, 95, 96, 96, 74, 74, 113, 113,
	28, 28, 58, 58, 59, 59, 131, 131, 131, 131,
	132, 132, 132, 132, 132, 132, 127, 127, 127, 127,
	128, 128, 80, 80, 80, 80, 78, 78, 79, 79,
	133, 133, 133, 133, 76, 76, 134, 134, 134, 106,
	106, 139, 139, 139, 57, 57, 57, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 143, 143, 143, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 144, 144, 151,
	151, 152, 152, 153, 154, 145, 145, 146, 146, 147,
	148, 155, 155, 155, 157, 157, 149, 149, 150, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 86, 86, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 184, 184, 184, 184,
	184, 184, 184, 186, 186, 187, 187, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 192, 192, 193, 193, 194, 194, 195, 195,
	197, 198, 198, 198, 199, 203, 203, 196, 196, 200,
	200, 200, 201, 201, 202, 202, 202, 202, 202, 117,
	117, 117, 118, 118, 119, 63, 63, 115, 115, 114,
	114, 114, 116, 116, 64, 156, 156, 156, 156, 156,
	156, 156, 81, 81, 87, 82, 82, 83, 83, 83,
	83, 83, 83, 88, 89, 84, 84, 84, 112, 112,
	120, 124, 124, 123, 122, 122, 121, 121, 107, 107,
	107, 107, 107, 71, 71, 214, 214, 125, 125, 72,
	72, 73, 67, 67, 66, 66, 135, 135, 135, 135,
	60, 60, 42, 42, 55, 55, 56, 56, 40, 40,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 158, 158, 158, 38, 38, 38, 39, 39, 164,
	164, 164, 165, 165, 165, 165, 163, 163, 163, 163,
	163, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 3, 3, 4,
	2, 2, 0, 2, 0, 2, 0, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 3, 2, 0, 3,
	1, 2, 2, 1, 1, 2, 4, 2, 5, 6,
	7, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	3, 2, 2, 1, 0, 1, 0, 3, 3, 6,
	6, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 7, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 2, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 4, 5, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 2, 2,
	2, 3, 5, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -190, 81, 87, 99, 178, -24, -25,
	191, 192, 29, 50, 180, 216, 56, -189, -27, -26,
	260, 236, 242, 187, -28, 204, 229, 263, 204, 68,
	109, 76, 112, 223, 68, 109, 204, -12, 260, -18,
	-14, -23, -9, -208, 18, -209, -210, 56, 81, 99,
	187, 112, 76, 223, -208, -101, 130, 189, 212, -102,
	-100, -162, 208, 138, -61, -38, 4, -169, -171, 16,
	17, 19, 28, 29, 33, 37, 39, 49, 50, 51,
	53, 55, 58, 59, 66, 67, 68, 69, 71, 76,
	80, 81, 87, 91, 92, 94, 100, 105, 112, 120,
	122, 127, 134, 135, 136, 137, 140, 141, 143, 146,
	148, 149, 155, 158, 161, 162, 165, 168, 169, 171,
	172, 174, 175, 176, 178, 180, 181, 183, 185, 186,
	188, 191, 192, 194, 196, 198, 201, 199, 205, 206,
	216, 217, 218, 219, 222, 223, 226, 227, 228, 232,
	237, 238, 239, 240, 30, 31, 32, 34, 35, 38,
	42, 43, 45, 70, 72, 73, 86, 88, 93, 101,
	103, 106, 107, 113, 114, 115, 117, 125, 145, 147,
	156, 160, 164, 166, 170, 182, 195, 200, 202, 209,
	213, 214, 229, 230, 4, 68, 49, 69, 100, 109,
	205, 208, 212, 18, -213, 212, -213, -213, -212, 204,
	204, -90, 68, 221, -26, -27, -25, -51, -52, 220,
	116, 85, 154, -24, -25, -189, -191, 171, -188, -38,
	130, 138, 189, 212, 208, -191, -48, -49, 18, 78,
	264, -133, -42, 152, -38, -73, 260, -3, -133, 106,
	-38, -42, 106, 97, 118, -134, -133, -38, 106, -60,
	106, -42, -62, 106, -61, -138, -137, -165, 4, -169,
	-171, -170, 229, 47, 57, 98, 111, 119, 121, 126,
	128, 139, 157, 159, 179, 193, 151, 264, 151, -101,
	-101, -37, 120, 210, 245, 97, 240, -45, 6, 74,
	-65, 262, 97, -205, 151, 97, -161, 97, 240, 120,
	-36, -37, -76, -133, -61, 106, 109, -38, 106, -51,
	-52, -75, -93, -94, 129, 150, -77, 18, 78, -77,
	-77, 37, 261, 261, 264, -191, -56, 260, -67, -66,
	-135, -108, 253, -110, 251, 252, 257, 142, 241, -117,
	-42, -111, 9, 260, -120, -186, -25, 86, 24, -118,
	-119, 182, -38, 8, 5, 6, 7, -40, -141, -150,
	215, 89, 144, 40, -184, -185, 4, -169, -164, -142,
	-152, -146, -149, 117, 47, 61, 64, 62, 65, 190,
	224, 41, 88, 160, 164, 202, 213, 214, 106, 145,
	107, 45, 101, 125, 80, 31, 32, 34, 35, 42,
	43, 70, 72, 73, 93, 113, 114, 115, 147, 170,
	195, 209, 230, -170, -153, -154, -147, -148, -155, -66,
	-73, 253, -42, 260, -71, -107, 262, 265, 258, -72,
	-125, -108, 74, -33, 174, -32, 17, 19, 81, 227,
	86, 174, 174, 86, -134, -43, -42, 191, -38, 25,
	86, -35, 264, 39, 176, 86, 264, 86, 261, 264,
	-204, -60, 204, 68, -210, -204, 127, -160, 74, -167,
	-159, -126, 9, 215, 89, 151, -166, 5, 252, -158,
	-165, 6, 8, 251, -160, 74, 59, -168, 6, 4,
	-150, -126, 74, 130, 117, 262, -163, 4, -169, -171,
	-170, -172, 18, 20, 21, 22, 23, 24, 25, 26,
	27, 36, 40, 41, 44, 46, 48, 54, 56, 60,
	61, 62, 63, 64, 65, 74, 75, 77, 78, 79,
	82, 83, 85, 89, 90, 95, 96, 97, 99, 102,
	104, 108, 109, 110, 116, 118, 123, 124, 129, 131,
	132, 142, 144, 150, 151, 152, 153, 154, 163, 167,
	173, 177, 187, 190, 197, 203, 204, 207, 210, 211,
	215, 220, 221, 224, 225, 231, 233, 234, 235, 236,
	-162, -207, 95, -204, -162, -162, 127, -35, 264, 260,
	142, -39, 106, -38, 142, -75, -94, -93, -95, -108,
	18, -108, -110, -26, -26, -26, -53, -129, -108, -188,
	25, -55, -38, -58, 97, 264, 10, 46, 28, 251,
	252, 253, 254, 255, 248, 249, 250, 247, 243, 244,
	245, 52, 133, 184, 12, 13, 14, 22, 153, 128,
	241, 193, 119, 30, 108, 25, 4, -108, -108, -108,
	-108, -108, 159, -25, -108, -63, -71, -25, -114, 258,
	260, -71, 260, 6, 6, 260, -121, -108, -192, 237,
	95, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 166, -157, 232, -157,
	-157, -143, 260, -143, -144, 260, -143, 260, -58, -42,
	-107, -163, 253, -163, -108, 264, 261, 264, 210, -91,
	54, 48, -104, 106, 48, -173, -38, 54, -174, 44,
	221, 167, 96, -91, 54, -91, 54, 54, -133, 210,
	210, -42, -106, 234, -97, -18, 260, 74, 25, -68,
	-69, -136, -70, -42, 260, -38, -38, -42, -60, -61,
	-62, -12, -137, 210, -60, -55, 97, -44, 169, 175,
	196, 188, 264, 5, 8, 8, 6, 260, -163, -206,
	-38, -133, -46, -47, -105, -104, -175, -173, 109, 221,
	86, 151, 142, 86, -96, 182, 183, 264, -31, 26,
	77, 260, 264, 261, -106, -59, -131, -133, -25, -132,
	260, -135, -139, -140, -142, -151, -145, -149, -150, 33,
	38, 206, 200, 113, 114, 115, 195, 31, 170, 93,
	80, 73, 72, 147, 35, 34, -153, -154, -147, -148,
	70, 209, 32, 43, 42, 230, -61, 208, -108, -108,
	-108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
	-108, -108, -108, -108, -108, -108, -108, -108, -108, 128,
	193, 30, 108, 210, 144, 142, 215, 89, 222, 78,
	148, -214, 203, 27, -112, -25, 260, -163, -117, 182,
	260, 261, 264, -63, -116, 259, -108, -114, -63, 261,
	261, -63, 231, 18, 78, 253, -85, 239, 136, 71,
	105, 135, -86, 186, 8, -124, -123, 233, -193, 91,
	102, 260, 261, 261, -108, -64, -156, 4, 239, 136,
	71, 105, 135, 186, -81, -108, -82, -109, -110, 251,
	252, 257, 260, 182, -83, -108, -63, -108, 36, 124,
	211, -84, -108, 97, -63, -108, -108, -108, -63, -63,
	-63, 260, 8, 8, 8, -106, 261, 259, 266, -125,
	-32, -42, -38, -38, 142, -104, 106, -139, -38, 260,
	260, 122, 122, -38, -38, 106, -38, 106, -38, -38,
	-33, 174, -38, -38, 174, -108, -99, 151, -60, 229,
	-38, -58, 264, 245, -60, -35, -206, -206, 219, 51,
	169, -167, -85, 8, 264, 261, 264, -39, 109, -61,
	-42, 86, -38, -129, -15, -18, -14, -23, -9, -38,
	-74, 102, 264, 57, -80, 121, 139, 98, 126, 179,
	111, -128, -127, 25, -38, -128, -25, -132, -131, -57,
	24, -85, 260, 240, -108, 210, -214, 203, -112, -108,
	144, 215, 89, 222, 78, 148, 97, 260, -109, -109,
	-63, 260, -63, -108, 264, 259, 259, 264, 261, -52,
	264, -51, -108, -63, -63, 261, 210, 210, 210, 210,
	260, 261, -122, -123, 82, -108, -198, 158, 260, 260,
	-108, 25, 261, 97, 261, -87, 163, 261, 10, 251,
	252, 253, 254, 255, 248, 249, 250, 247, 243, 244,
	245, 52, 133, 184, 12, 13, 14, 119, 108, -109,
	-109, -109, -63, 260, 261, -88, -89, 97, 95, 25,
	-84, -84, -84, 261, 97, -63, 264, 264, 264, 261,
	261, 261, 8, 261, 264, 261, 261, -74, -108, 210,
	210, 86, 142, -176, -174, -108, -55, 260, 260, -29,
	81, 191, -92, 86, -35, 86, -35, 210, -91, 54,
	210, 53, 261, -106, -69, -125, 261, 261, -38, -105,
	260, -39, 260, 260, -38, 261, -113, 104, 37, -131,
	121, 121, -131, -80, 121, -78, 157, -78, -78, -38,
	260, 261, 258, 258, 8, -108, -108, -109, -109, 97,
	260, -108, -115, -139, 22, 22, 261, -63, 261, 264,
	261, -108, -114, 261, 231, -52, -52, -52, 136, 105,
	135, -86, 135, -86, -86, 8, 6, 83, -108, 207,
	-199, -38, 260, 234, -51, 261, -139, -108, -88, -108,
	-139, -109, -109, -109, -109, -109, -109, -109, -109, -109,
	-109, -109, -109, -109, -109, -109, -109, -109, -109, 78,
	142, 148, -109, 264, -63, 261, -89, -88, -108, -108,
	-139, 261, 261, 261, -63, -108, -108, -108, 261, 8,
	-113, 259, -38, -38, -104, 86, -177, 54, -178, 46,
	142, 144, 221, 167, 44, 74, 173, 261, 261, -55,
	-55, 142, 74, 142, 74, 67, 217, -38, -38, -42,
	-38, -38, -38, -98, 260, 151, -18, 245, 6, -55,
	260, -46, -54, -130, -38, -187, 260, -184, -185, -40,
	151, -194, 235, -108, -63, -131, -131, -79, 225, 151,
	121, -131, 260, -55, -127, 259, 8, 8, 261, 22,
	22, -108, -115, 261, 264, -108, -108, 261, -108, 6,
	-108, 261, 261, 261, 261, -108, -203, -38, -108, 261,
	261, -89, 97, 78, 148, 260, -108, 261, 261, 264,
	261, 261, 261, -194, -104, -38, -61, 144, 122, 260,
	-109, -42, -103, -211, 55, 201, 261, 261, 144, 144,
	-108, -139, -35, -35, 210, 210, 79, -54, 54, -73,
	-25, 260, 261, -55, 261, 261, 264, -41, -71, 46,
	-41, -108, 260, -42, -195, -197, -38, -79, 260, -108,
	-131, -55, 261, 259, 259, -108, -108, 261, -139, 261,
	-52, -196, 162, 261, -109, 97, 260, -115, 261, -108,
	-178, -108, -50, 260, 260, 173, -34, 46, -38, -38,
	223, 143, 261, -38, -103, 261, -103, -130, -31, -61,
	-31, 261, -63, 260, 264, 25, -55, 261, 261, -52,
	37, -109, -115, 261, 261, 261, -181, 134, -55, -55,
	-42, -30, 225, -61, 191, -106, -103, -41, -52, -54,
	-197, -199, 261, -200, 168, 183, -63, 261, -179, -182,
	-180, 151, 98, 161, 194, 261, 261, -50, -108, -68,
	-31, 261, 261, 261, -201, -202, 30, 218, 59, -108,
	-201, -180, 151, -182, 151, 223, 76, -181, -106, -103,
	-202, 165, 94, 182, 165, 94, -183, 141, 176, 39,
	191, -183, -179, 22, 16, 144, 74, -202,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 290, 0, 0, 260, -2,
	0, 0, 234, 234, 234, 292, 206, 289, -2, 300,
	0, 0, 0, 298, 274, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 66,
	67, 68, 69, 0, 78, 79, 80, 82, 83, 84,
	85, 86, 87, 88, 0, 91, 734, 765, 775, 95,
	100, 0, 825, -2, 104, 60, 684, 685, 686, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 735, 736, 737, 738, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 826,
	827, 828, 829, 830, 131, 132, 0, 134, 144, 0,
	142, 0, 0, 140, 236, 233, 231, 232, 0, 291,
	0, 0, 0, 205, -2, 270, 271, -2, 0, 295,
	295, 295, 0, 0, 271, 0, 279, 753, 282, 667,
	734, 739, 765, 775, 825, 280, 653, 0, 297, 296,
	0, 275, 350, 0, 662, 320, 0, 2, 0, 807,
	0, 0, 807, 0, 0, 0, 356, 52, 807, 43,
	807, 660, 56, 807, 58, 0, 70, 72, 692, 693,
	694, 695, 829, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 0, 0, 0, 92,
	93, 94, 0, 0, 0, 0, 0, 103, 126, 127,
	61, 0, 0, 146, 0, 0, 137, 0, 138, 0,
	230, 235, 43, 354, 0, 807, 688, 238, 807, -2,
	0, 266, 307, 308, 0, 0, 0, 293, 294, 0,
	0, 0, 262, 263, 0, 281, 0, 0, 323, 652,
	654, 658, 659, 435, 0, 0, 0, 0, 0, 0,
	514, 515, 516, 0, 518, 519, 520, 802, 0, 524,
	525, 821, 662, 670, 671, 672, 673, 0, 0, 0,
	678, 679, 680, 637, 563, 534, -2, -2, 668, 377,
	378, 379, 380, -2, 831, 538, 540, 542, 543, 544,
	545, 0, 803, 817, 818, 824, 827, 828, 807, 814,
	808, 798, 805, 813, 722, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 691, 401, 402, 407, 408, 410, 323,
	321, 351, 352, 0, 663, 643, 0, 0, 0, 0,
	649, 647, 648, 20, 227, 22, 0, 227, 227, 0,
	0, 0, 0, 0, 360, 0, 241, 0, 357, 0,
	0, 54, 0, 41, 42, 0, 0, 0, 290, 0,
	0, 75, 0, 718, 81, 0, 0, 96, 98, 105,
	107, 108, 109, 115, 116, 117, 118, 199, 0, 201,
	129, 130, 681, 0, 97, 99, 101, 102, 119, 120,
	0, 123, 124, 125, 418, 0, 62, 696, 697, 698,
	699, 700, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	133, 135, 0, 143, 136, 141, 139, 202, 0, 150,
	0, 0, 807, 687, 0, 269, 305, 306, 309, 312,
	313, 310, 435, 276, 277, 278, 301, 302, 216, 283,
	0, 0, 664, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 646, 0, 0, 657, 439, 440, 441,
	462, 463, 0, -2, 595, 0, 521, 522, 523, 0,
	0, -2, 0, 675, 432, 0, 0, 636, 565, 0,
	0, 0, 0, 0, 0, 0, 616, 622, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 404, 414, 412,
	411, 393, 0, 392, 390, 0, 394, 0, 360, 0,
	644, 638, 639, 640, 0, 0, 651, 0, 0, 0,
	0, 226, 24, 807, 0, 34, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 248, 243, 0, 0, 0, 323,
	253, 255, 256, 0, 0, 358, 53, 661, 43, 59,
	57, 65, 71, 0, 76, 77, 0, 237, 0, 0,
	113, 114, 0, 200, 683, 682, 432, 0, 63, 145,
	89, 355, 0, 149, 151, 153, 154, 155, 688, 0,
	0, 0, 0, 0, 311, 314, 315, 0, 304, 214,
	215, 290, 0, 666, 317, 322, 324, 341, 341, 328,
	0, 655, 436, 366, 367, 368, 369, 370, 432, 373,
	374, 375, 376, 384, 385, 386, 387, 388, 389, 398,
	0, 383, 383, 383, 395, 396, 399, 400, 405, 406,
	416, 417, 415, 415, 415, 413, 437, 0, 442, 443,
	444, 445, 446, 447, 448, 449, 450, -2, -2, -2,
	454, 455, 456, -2, -2, -2, 460, 461, -2, 0,
	0, 646, 0, 0, 468, 0, 471, 473, 475, 0,
	0, 0, 0, 645, 485, 628, 0, 656, 470, 0,
	0, 517, 0, 0, 0, 601, 595, 602, 0, -2,
	526, 300, 0, 0, 0, 0, 676, 419, 420, 421,
	422, 423, 424, 433, 0, 635, 631, 0, 573, 0,
	0, 0, 539, 541, 0, 0, 0, 605, 606, 607,
	608, 609, 610, 611, 0, 0, 0, 0, 487, 0,
	0, 0, 0, 821, 0, 595, 621, 0, 0, 0,
	0, 0, 595, 0, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 353, 641, 0, 650,
	23, 218, 0, 0, 0, 26, 807, 158, 0, 0,
	0, 0, 0, 229, 35, 807, 43, 807, 43, 36,
	21, 227, 217, 220, 0, 359, 240, 0, 0, 245,
	242, 360, 0, 0, 0, 55, 73, 74, 110, 111,
	112, 106, 121, 0, 0, 147, 0, 0, 688, 0,
	0, 0, 239, 303, 0, 285, 286, 287, 288, 665,
	319, 0, 0, 0, 0, 0, 0, 347, 347, 347,
	345, 326, 340, 0, 339, 327, -2, 328, 0, 361,
	363, 371, 0, 0, -2, 0, 0, 0, 486, -2,
	469, 472, 474, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 599, 600, 0, -2, 0,
	0, 299, 300, 300, 300, 532, 0, 0, 0, 0,
	0, 0, 0, 632, 0, 0, 533, 0, 0, 0,
	0, 0, 547, 0, 548, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 489,
	490, 491, 0, 0, 550, 619, 620, 0, 0, 0,
	0, 0, 0, 555, 0, 626, 0, 0, 0, 559,
	560, 561, 0, 381, 0, 397, 409, 319, 0, 0,
	0, 0, 0, 156, 171, 0, 0, 0, 0, 28,
	0, 0, 0, 0, 32, 0, 38, 0, 0, 0,
	0, 251, 0, 252, 254, 257, 0, 0, 90, 152,
	0, 0, 150, 0, 0, 284, 567, 0, 0, 325,
	0, 0, 0, 0, 0, 342, 346, 343, 344, 337,
	0, 330, 0, 0, 0, 438, -2, 0, 0, 0,
	0, -2, 0, 597, 0, 0, 629, 0, 590, 0,
	-2, 596, 603, 527, 0, 0, 0, 0, 425, 426,
	427, 428, 429, 430, 431, 0, 677, 630, 634, 0,
	571, 572, 576, 0, 0, 537, 0, 604, 613, 614,
	488, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	-2, -2, -2, 504, 505, 506, -2, -2, -2, 0,
	0, 0, 615, 0, 0, 593, 617, 618, 623, 624,
	0, 552, 553, 554, 625, 0, 0, 0, 403, 0,
	567, 642, 222, 224, 25, 0, 157, 0, 160, 0,
	0, 163, 164, 0, 0, 0, 0, 173, 180, 0,
	0, 0, 40, 0, 0, 228, 0, 43, 43, 219,
	0, 0, 221, 0, 0, 0, 244, 0, 122, 0,
	0, 0, 0, 207, 213, 213, 0, 535, 536, 0,
	0, 272, 0, 318, 316, 331, 0, 333, 0, 0,
	0, 335, 0, 0, 329, 364, 0, 0, 372, 0,
	0, -2, 0, 479, 0, -2, -2, 589, 596, 674,
	300, 528, 530, 531, 434, 633, 578, 575, 0, 562,
	546, 612, 0, 0, 0, 0, 596, 592, 551, 0,
	557, 558, 382, 273, 27, 0, 161, 162, 165, 0,
	167, 182, 174, 0, 177, 178, 175, 0, 29, 30,
	39, 45, 31, 37, 0, 0, 0, 0, 0, 258,
	259, 0, 180, 0, 148, 180, 0, 216, 669, 0,
	216, 0, 0, 0, 566, 568, 0, 332, 0, 349,
	334, 0, 338, 365, 362, -2, -2, 480, 598, 591,
	0, 300, 0, 564, -2, 0, 0, 0, 594, 0,
	159, 0, 186, 0, 0, 0, 47, 0, 223, 225,
	0, 247, 360, 250, 169, 180, 203, 208, 209, 212,
	210, 213, 300, 0, 0, 0, 0, 336, 529, 581,
	0, -2, 0, 512, 556, 166, 191, 0, 0, 0,
	182, 33, 0, 44, 0, 249, 170, 216, 0, 0,
	569, 570, 348, 0, 0, 0, 577, 513, 168, 187,
	188, 0, 183, 184, 185, 181, 179, 186, 46, 360,
	211, 527, 180, 574, 579, 582, -2, 778, 715, 0,
	580, 189, 0, 190, 0, 0, 0, 191, 246, 204,
	0, 584, 585, 586, 587, 588, 192, 0, 195, 196,
	0, 193, 176, 0, 194, 197, 198, 583,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 249, 3, 255, 250, 3,
	260, 261, 253, 251, 264, 252, 262, 254, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 266, 263,
	243, 245, 244, 3, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 258, 3, 259, 248, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 247, 3, 257,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 246, 256,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lookahead func() int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.lookahead()
}

func sqlNewParser() sqlParser {
	p := &sqlParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqllval sqlSymType
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := make([]sqlSymType, sqlMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlchar := -1
	sqltoken := -1 // sqlchar translated into internal numbering
	sqlrcvr.lookahead = func() int { return sqlchar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlchar = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlchar < 0 {
		sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlchar = -1
		sqltoken = -1
		sqlVAL = sqllval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlchar < 0 {
			sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlchar = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:439
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:445
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:451
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:470
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:479
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:485
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:489
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:495
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:499
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:506
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:511
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:516
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:521
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:525
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:527
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:529
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:532
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:537
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:542
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:545
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:549
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:551
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:554
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:559
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:564
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:565
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:568
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:569
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:570
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:574
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:578
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:589
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:596
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:600
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:604
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:608
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:612
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:616
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:622
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:626
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:632
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:636
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:642
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:646
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:653
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:657
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:663
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:672
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:676
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:686
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:700
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:704
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:710
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:720
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[2].isoLevel}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:822
		{
			unimplemented()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:857
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.expr = DBool(true)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.expr = DBool(false)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			unimplemented()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			unimplemented()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:898
		{
			unimplemented()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:899
		{
			unimplemented()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			unimplemented()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			unimplemented()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			unimplemented()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:907
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.stmt = nil
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.stmt = nil
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.qname = nil
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.targetListPtr = nil
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.strs = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.tblDefs = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.colQuals = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1098
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: NameList(sqlDollar[4].strs),
				Storing: sqlDollar[6].strs,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: NameList(sqlDollar[5].strs),
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1135
		{
			unimplemented()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1155
		{
			unimplemented()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.strs = nil
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.strs = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			unimplemented()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1193
		{
			unimplemented()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1194
		{
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			unimplemented()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1205
		{
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1214
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1217
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1218
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.expr = IntVal(sqlDollar[1].ival)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].strs,
				Storing: sqlDollar[10].strs,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].strs,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.boolVal = true
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.boolVal = false
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			// TODO(pmattis): Support opt_asc_desc.
			sqlVAL.str = sqlDollar[1].str
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1295
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1298
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1299
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.dir = Ascending
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.dir = Descending
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.dir = DefaultDirection
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.stmt = nil
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.stmt = nil
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.boolVal = true
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.boolVal = false
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1365
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1366
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1385
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.isoLevel = UnspecifiedIsolation
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.stmt = &Insert{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1441
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1442
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1446
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1448
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{StarSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1693
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			unimplemented()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1714
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.boolVal = true
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.boolVal = false
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.boolVal = false
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.boolVal = true
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1738
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.orderBy = nil
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.expr = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.groupBy = nil
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.expr = nil
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.tblExprs = nil
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1970
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.str = ""
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.str = astFullJoin
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.str = astLeftJoin
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.str = astRightJoin
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.str = astInnerJoin
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2009
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.expr = nil
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2102
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2107
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2108
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2116
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival), Scale: int(sqlDollar[4].ival)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.ival = 0
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2293
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2294
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.colType = &DateType{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2313
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			unimplemented()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
			unimplemented()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2317
		{
			unimplemented()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			unimplemented()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			unimplemented()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			unimplemented()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			unimplemented()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2730
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2734
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2735
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2736
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2738
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Distinct: true, Exprs: sqlDollar[4].exprs}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			unimplemented()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			unimplemented()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			unimplemented()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2808
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2809
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2810
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2811
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2834
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2835
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2838
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2839
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2844
		{
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			unimplemented()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2854
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2856
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2860
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2872
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2876
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2885
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2886
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2896
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2897
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2898
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.expr = Row(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.expr = Row(nil)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.expr = Array(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3041
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3050
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3066
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3069
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.expr = nil
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.expr = nil
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3171
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.selExprs = nil
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.selExpr = StarSelectExpr()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3286
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.expr = IntVal(sqlDollar[1].ival)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3322
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3333
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.expr = DBool(true)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.expr = DBool(false)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.expr = DNull
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.ival = +sqlDollar[2].ival
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.ival = -sqlDollar[2].ival
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
