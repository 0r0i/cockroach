// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PLACING = 57533
const POSITION = 57534
const PRECEDING = 57535
const PRECISION = 57536
const PREPARE = 57537
const PRIMARY = 57538
const PRIORITY = 57539
const RANGE = 57540
const READ = 57541
const REAL = 57542
const RECURSIVE = 57543
const REF = 57544
const REFERENCES = 57545
const RENAME = 57546
const REPEATABLE = 57547
const RELEASE = 57548
const RESTRICT = 57549
const RETURNING = 57550
const REVOKE = 57551
const RIGHT = 57552
const ROLLBACK = 57553
const ROLLUP = 57554
const ROW = 57555
const ROWS = 57556
const RSHIFT = 57557
const SAVEPOINT = 57558
const SEARCH = 57559
const SECOND = 57560
const SELECT = 57561
const SERIAL = 57562
const SERIALIZABLE = 57563
const SESSION = 57564
const SESSION_USER = 57565
const SET = 57566
const SHOW = 57567
const SIMILAR = 57568
const SIMPLE = 57569
const SMALLINT = 57570
const SMALLSERIAL = 57571
const SNAPSHOT = 57572
const SOME = 57573
const SPLIT = 57574
const SQL = 57575
const START = 57576
const STDIN = 57577
const STRICT = 57578
const STRING = 57579
const STORING = 57580
const SUBSTRING = 57581
const SYMMETRIC = 57582
const SYSTEM = 57583
const TABLE = 57584
const TABLES = 57585
const TEXT = 57586
const THEN = 57587
const TIME = 57588
const TIMESTAMP = 57589
const TIMESTAMPTZ = 57590
const TO = 57591
const TRAILING = 57592
const TRANSACTION = 57593
const TREAT = 57594
const TRIM = 57595
const TRUE = 57596
const TRUNCATE = 57597
const TYPE = 57598
const UNBOUNDED = 57599
const UNCOMMITTED = 57600
const UNION = 57601
const UNIQUE = 57602
const UNKNOWN = 57603
const UPDATE = 57604
const UPSERT = 57605
const USER = 57606
const USING = 57607
const VALID = 57608
const VALIDATE = 57609
const VALUE = 57610
const VALUES = 57611
const VARCHAR = 57612
const VARIADIC = 57613
const VIEW = 57614
const VARYING = 57615
const WHEN = 57616
const WHERE = 57617
const WINDOW = 57618
const WITH = 57619
const WITHIN = 57620
const WITHOUT = 57621
const YEAR = 57622
const ZONE = 57623
const NOT_LA = 57624
const WITH_LA = 57625
const AS_LA = 57626
const POSTFIXOP = 57627
const UMINUS = 57628

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4858

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	305, 27,
	-2, 374,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	1, 349,
	178, 349,
	208, 349,
	303, 349,
	305, 349,
	-2, 359,
	-1, 58,
	1, 352,
	178, 352,
	208, 352,
	303, 352,
	305, 352,
	-2, 358,
	-1, 67,
	1, 27,
	305, 27,
	-2, 374,
	-1, 387,
	1, 173,
	305, 173,
	-2, 876,
	-1, 421,
	153, 384,
	177, 384,
	-2, 355,
	-1, 424,
	153, 383,
	177, 383,
	-2, 353,
	-1, 543,
	153, 383,
	177, 383,
	-2, 356,
	-1, 599,
	302, 814,
	-2, 807,
	-1, 600,
	302, 815,
	-2, 808,
	-1, 606,
	5, 519,
	302, 519,
	-2, 967,
	-1, 630,
	5, 485,
	-2, 941,
	-1, 631,
	5, 513,
	302, 513,
	-2, 943,
	-1, 632,
	5, 493,
	-2, 944,
	-1, 633,
	5, 492,
	-2, 945,
	-1, 634,
	5, 513,
	302, 513,
	-2, 948,
	-1, 635,
	5, 513,
	302, 513,
	-2, 949,
	-1, 636,
	5, 514,
	-2, 952,
	-1, 637,
	5, 479,
	-2, 953,
	-1, 638,
	5, 479,
	-2, 954,
	-1, 639,
	5, 495,
	-2, 958,
	-1, 640,
	5, 480,
	-2, 963,
	-1, 641,
	5, 481,
	-2, 964,
	-1, 642,
	5, 482,
	-2, 965,
	-1, 643,
	5, 483,
	-2, 966,
	-1, 644,
	5, 479,
	-2, 970,
	-1, 645,
	5, 486,
	-2, 975,
	-1, 646,
	5, 484,
	-2, 978,
	-1, 647,
	5, 511,
	302, 511,
	-2, 980,
	-1, 648,
	5, 515,
	-2, 983,
	-1, 649,
	5, 517,
	-2, 984,
	-1, 650,
	5, 510,
	302, 510,
	-2, 988,
	-1, 895,
	97, 359,
	139, 359,
	153, 359,
	177, 359,
	181, 359,
	259, 359,
	-2, 631,
	-1, 903,
	302, 792,
	-2, 781,
	-1, 1103,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 554,
	-1, 1104,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 555,
	-1, 1105,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 556,
	-1, 1109,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 560,
	-1, 1110,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 561,
	-1, 1111,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 562,
	-1, 1114,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 567,
	-1, 1120,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 569,
	-1, 1123,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 574,
	-1, 1124,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 575,
	-1, 1125,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 576,
	-1, 1150,
	186, 703,
	-2, 706,
	-1, 1173,
	114, 719,
	302, 814,
	-2, 807,
	-1, 1174,
	114, 720,
	-2, 937,
	-1, 1175,
	114, 721,
	-2, 874,
	-1, 1176,
	114, 722,
	-2, 847,
	-1, 1177,
	114, 723,
	-2, 862,
	-1, 1178,
	114, 724,
	-2, 873,
	-1, 1179,
	114, 725,
	-2, 907,
	-1, 1325,
	97, 359,
	139, 359,
	153, 359,
	177, 359,
	181, 359,
	259, 359,
	-2, 432,
	-1, 1329,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 568,
	-1, 1330,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 570,
	-1, 1335,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 571,
	-1, 1353,
	186, 702,
	-2, 705,
	-1, 1517,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 572,
	-1, 1522,
	142, 0,
	-2, 586,
	-1, 1530,
	186, 704,
	-2, 707,
	-1, 1564,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 612,
	-1, 1565,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 613,
	-1, 1566,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 614,
	-1, 1570,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 618,
	-1, 1571,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 619,
	-1, 1572,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 620,
	-1, 1676,
	142, 0,
	-2, 587,
	-1, 1679,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 590,
	-1, 1680,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 592,
	-1, 1767,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 591,
	-1, 1768,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 593,
	-1, 1775,
	142, 0,
	-2, 621,
	-1, 1820,
	142, 0,
	-2, 622,
	-1, 1872,
	35, 0,
	127, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 940,
}

const sqlNprod = 1083
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25056

var sqlAct = [...]int{

	600, 1871, 1852, 1719, 1484, 1894, 1826, 1853, 1870, 1854,
	820, 1202, 989, 1541, 1742, 981, 1755, 258, 711, 598,
	597, 1075, 1668, 1084, 1641, 388, 1642, 1601, 1662, 74,
	590, 1410, 712, 459, 44, 19, 446, 898, 260, 74,
	74, 74, 1057, 1053, 74, 1655, 1322, 74, 1052, 1321,
	425, 562, 1251, 1409, 1506, 74, 1056, 663, 1496, 900,
	1312, 827, 74, 74, 1356, 824, 74, 1021, 696, 74,
	74, 74, 249, 990, 959, 1083, 666, 950, 1306, 1160,
	1136, 1199, 1133, 1087, 1005, 432, 57, 1014, 775, 682,
	842, 759, 530, 1170, 668, 430, 1047, 26, 572, 15,
	531, 460, 7, 563, 461, 756, 935, 786, 931, 480,
	458, 471, 1060, 848, 435, 546, 473, 474, 247, 9,
	547, 58, 57, 545, 424, 8, 75, 375, 6, 573,
	4, 59, 755, 777, 254, 385, 253, 651, 773, 255,
	366, 983, 689, 467, 433, 550, 378, 529, 698, 592,
	257, 257, 698, 57, 1762, 1085, 256, 1763, 71, 698,
	986, 982, 251, 1886, 261, 250, 1079, 252, 851, 852,
	1868, 1860, 1320, 1741, 1079, 262, 429, 1850, 1845, 422,
	1011, 1079, 413, 429, 1822, 1816, 452, 1011, 1079, 421,
	678, 854, 1262, 56, 56, 444, 1351, 1806, 451, 454,
	1741, 1352, 1796, 1769, 653, 1079, 1011, 437, 1766, 1350,
	1752, 1079, 853, 1741, 1024, 851, 852, 1018, 868, 35,
	35, 443, 1749, 1740, 449, 1079, 1741, 36, 36, 1724,
	1723, 1263, 1079, 1079, 63, 850, 1701, 1681, 854, 1024,
	1024, 1024, 1310, 74, 74, 74, 74, 74, 1678, 483,
	1628, 1011, 1627, 1024, 1810, 1024, 849, 65, 1613, 853,
	1019, 1079, 1526, 1470, 1309, 1024, 978, 859, 1744, 1309,
	1464, 476, 476, 978, 1427, 1425, 1577, 1428, 1024, 652,
	851, 852, 1424, 430, 66, 1024, 1423, 1353, 1291, 1024,
	1024, 1079, 61, 1529, 1289, 63, 1020, 1017, 62, 1080,
	948, 1355, 1079, 854, 1033, 1292, 1079, 1024, 1024, 699,
	1026, 1144, 1023, 699, 859, 1024, 869, 60, 65, 1010,
	699, 463, 1011, 977, 853, 947, 978, 706, 946, 462,
	707, 1074, 557, 463, 1041, 1633, 558, 815, 814, 767,
	766, 495, 442, 63, 462, 66, 63, 63, 463, 1869,
	67, 800, 515, 61, 1022, 1866, 481, 1859, 1817, 62,
	1750, 1706, 74, 1702, 477, 1694, 65, 1693, 1692, 65,
	65, 1687, 444, 870, 454, 484, 1686, 74, 985, 859,
	74, 74, 1685, 1639, 1592, 1587, 485, 1586, 1585, 1532,
	1515, 1495, 1474, 66, 1432, 1429, 66, 66, 468, 1417,
	1408, 1379, 1376, 1375, 61, 61, 1373, 1361, 702, 456,
	62, 62, 697, 74, 1360, 74, 1016, 74, 74, 818,
	74, 1294, 1290, 1262, 906, 1216, 60, 849, 1167, 60,
	248, 1638, 1166, 851, 852, 74, 557, 556, 1015, 1141,
	823, 1543, 537, 539, 1836, 1809, 74, 864, 861, 862,
	863, 855, 856, 857, 858, 860, 854, 880, 74, 1632,
	1472, 851, 852, 1788, 260, 74, 74, 74, 1786, 74,
	1777, 1759, 544, 1747, 1738, 503, 1716, 853, 1699, 658,
	1671, 686, 1649, 504, 854, 1521, 543, 1514, 74, 1492,
	1490, 657, 684, 1380, 1381, 74, 1489, 74, 855, 856,
	857, 858, 860, 753, 880, 853, 1487, 1637, 483, 483,
	1444, 1443, 1407, 765, 462, 1369, 260, 74, 463, 74,
	74, 74, 74, 74, 74, 74, 498, 500, 1142, 74,
	1368, 1347, 859, 801, 74, 1343, 1138, 1278, 1243, 1242,
	534, 74, 1230, 701, 444, 1229, 704, 851, 852, 1209,
	822, 1165, 1078, 936, 422, 532, 939, 943, 929, 74,
	566, 928, 74, 927, 421, 857, 858, 860, 926, 880,
	536, 925, 901, 553, 554, 660, 924, 923, 922, 559,
	921, 869, 920, 919, 918, 1380, 1381, 683, 897, 917,
	261, 853, 1386, 1230, 444, 690, 690, 457, 916, 915,
	914, 262, 913, 904, 817, 846, 1380, 1381, 688, 691,
	902, 430, 60, 819, 447, 561, 501, 444, 491, 489,
	468, 1272, 1271, 903, 674, 659, 1764, 509, 1636, 763,
	605, 851, 852, 1264, 484, 484, 762, 1069, 870, 718,
	1431, 1430, 261, 708, 797, 485, 485, 790, 1328, 525,
	941, 805, 802, 262, 942, 806, 807, 808, 809, 810,
	796, 816, 74, 832, 813, 510, 911, 831, 830, 1656,
	74, 982, 422, 844, 74, 422, 422, 1544, 74, 74,
	1364, 1161, 838, 243, 1386, 839, 840, 659, 932, 1258,
	1438, 1832, 1795, 74, 741, 74, 74, 669, 74, 670,
	1883, 74, 1882, 74, 74, 1386, 74, 1285, 483, 412,
	1621, 411, 953, 861, 862, 863, 855, 856, 857, 858,
	860, 907, 880, 1032, 669, 984, 670, 984, 999, 476,
	419, 476, 406, 1396, 1659, 244, 407, 1732, 1731, 1458,
	1435, 1434, 249, 933, 934, 937, 1006, 1331, 964, 966,
	880, 940, 1277, 1276, 1471, 1275, 1274, 428, 74, 74,
	795, 794, 507, 788, 783, 1121, 1025, 975, 671, 740,
	972, 944, 669, 533, 670, 1757, 1382, 1383, 1384, 1385,
	1387, 1213, 956, 528, 1794, 1212, 1092, 487, 415, 1459,
	1397, 945, 57, 1247, 973, 671, 57, 680, 1834, 427,
	508, 260, 1028, 444, 254, 74, 253, 454, 1008, 255,
	1007, 1135, 998, 1009, 997, 481, 692, 1003, 1046, 74,
	74, 1000, 993, 1001, 74, 1002, 256, 454, 1479, 969,
	454, 1185, 251, 988, 484, 250, 880, 252, 1018, 1135,
	798, 429, 937, 671, 940, 485, 952, 245, 1721, 70,
	1446, 74, 1455, 239, 74, 851, 852, 1022, 934, 933,
	1035, 1161, 1029, 1027, 1081, 1030, 1891, 1034, 1382, 1383,
	1384, 1385, 1387, 960, 676, 1882, 1340, 246, 854, 1091,
	1311, 1019, 1847, 952, 1089, 1090, 1022, 1476, 260, 951,
	1338, 1384, 1385, 1387, 416, 1252, 747, 1902, 1848, 853,
	240, 69, 675, 1462, 1856, 1139, 1284, 1241, 1050, 1260,
	799, 1245, 420, 1145, 1149, 1049, 1152, 1020, 1017, 426,
	880, 367, 698, 1477, 417, 1897, 1789, 261, 1315, 1172,
	1172, 1183, 684, 1194, 963, 1072, 1073, 684, 262, 1206,
	1207, 1208, 372, 672, 679, 1286, 1318, 368, 444, 506,
	74, 74, 74, 1082, 859, 667, 74, 1313, 1336, 74,
	1215, 1148, 1341, 1316, 930, 74, 74, 74, 74, 74,
	672, 369, 1890, 74, 1051, 1022, 74, 1314, 1857, 74,
	444, 1022, 1447, 1773, 1739, 894, 74, 1367, 74, 371,
	1227, 1664, 1507, 1140, 1157, 74, 429, 1855, 1223, 549,
	1037, 718, 718, 869, 1217, 74, 1039, 364, 1256, 505,
	1131, 1881, 1180, 68, 261, 1879, 1858, 962, 672, 1333,
	430, 1722, 1040, 1317, 1129, 262, 74, 74, 242, 241,
	1654, 1038, 74, 1500, 1067, 548, 1254, 1016, 1252, 1453,
	526, 1337, 483, 1218, 1270, 1895, 1240, 1134, 1339, 789,
	784, 367, 518, 1118, 1783, 1889, 741, 741, 1903, 549,
	870, 496, 74, 506, 74, 655, 74, 1266, 74, 1267,
	1268, 74, 372, 494, 370, 1257, 949, 368, 1663, 1219,
	74, 961, 1908, 699, 1265, 1697, 1896, 74, 1227, 74,
	1127, 1297, 1126, 1726, 527, 1725, 1132, 1380, 1381, 1714,
	1296, 369, 1298, 1898, 1437, 1226, 1222, 718, 1249, 1617,
	837, 1068, 1327, 1573, 1006, 683, 654, 373, 1281, 371,
	717, 1609, 1280, 430, 683, 1283, 829, 1293, 1282, 1295,
	1287, 740, 740, 1288, 444, 821, 1620, 863, 855, 856,
	857, 858, 860, 1619, 880, 1116, 1119, 1395, 1475, 1827,
	1346, 812, 548, 1610, 1348, 1669, 768, 1715, 1232, 1231,
	1269, 718, 741, 1304, 57, 1303, 1358, 1359, 484, 1907,
	1115, 1698, 1326, 430, 1665, 1128, 1008, 602, 1007, 485,
	585, 1009, 1130, 1502, 1501, 505, 1380, 1381, 1315, 1398,
	1399, 1400, 466, 1574, 1616, 465, 1386, 1299, 540, 1575,
	1334, 1332, 1406, 1354, 370, 718, 1318, 772, 1485, 72,
	1670, 427, 1712, 1419, 1640, 1497, 741, 1505, 444, 358,
	359, 360, 1307, 1316, 377, 430, 1164, 389, 1618, 1776,
	1696, 74, 1411, 1713, 1520, 377, 1395, 740, 1605, 1363,
	1606, 770, 436, 436, 1117, 1396, 72, 373, 1374, 72,
	72, 455, 771, 1342, 1456, 1457, 1248, 1031, 976, 524,
	741, 523, 522, 74, 74, 1608, 521, 520, 519, 516,
	464, 1412, 1611, 912, 1442, 804, 1163, 1466, 1414, 1415,
	1416, 1851, 1824, 1317, 1598, 1386, 1451, 1449, 1436, 1300,
	74, 740, 1070, 74, 1433, 74, 1065, 1004, 705, 703,
	700, 74, 1397, 1440, 1461, 1450, 695, 1452, 1491, 677,
	74, 673, 1465, 1538, 74, 828, 1733, 1076, 1401, 1454,
	74, 260, 1469, 551, 74, 1883, 74, 440, 512, 1607,
	792, 3, 1735, 1499, 1396, 740, 1467, 1503, 1511, 1468,
	968, 952, 1463, 1478, 1480, 1481, 1240, 967, 952, 1486,
	1744, 1791, 1819, 1498, 965, 555, 1811, 363, 971, 1527,
	1488, 970, 1523, 405, 1494, 1652, 1066, 1064, 74, 1510,
	987, 1508, 1509, 845, 1077, 1504, 1391, 1388, 1389, 1390,
	1382, 1383, 1384, 1385, 1387, 764, 710, 1013, 1905, 1906,
	552, 1397, 993, 444, 441, 1380, 1381, 851, 852, 448,
	374, 1043, 1042, 1593, 1547, 1548, 1482, 513, 1534, 1535,
	1536, 1473, 1531, 1552, 1553, 408, 409, 1426, 1273, 1578,
	1214, 1211, 1210, 72, 469, 72, 389, 389, 1158, 1044,
	1588, 1550, 1812, 1683, 1545, 74, 74, 74, 1537, 444,
	1301, 1580, 1045, 444, 74, 74, 1584, 261, 905, 414,
	74, 1720, 74, 365, 74, 74, 74, 803, 262, 74,
	517, 1392, 1393, 1394, 1581, 1391, 1388, 1389, 1390, 1382,
	1383, 1384, 1385, 1387, 1846, 1689, 1366, 1754, 1772, 1597,
	1162, 1186, 717, 717, 910, 34, 1644, 1614, 1615, 578,
	74, 74, 1594, 718, 1599, 1439, 1059, 1058, 263, 793,
	1634, 782, 74, 74, 601, 776, 74, 1647, 1646, 785,
	1658, 1171, 1647, 1646, 1630, 74, 74, 1653, 1648, 1635,
	656, 718, 718, 1648, 603, 1660, 1661, 715, 604, 1666,
	718, 718, 716, 1650, 938, 591, 713, 479, 1308, 1651,
	1677, 991, 492, 1159, 74, 1362, 908, 577, 741, 583,
	582, 1146, 488, 574, 1667, 743, 1319, 497, 1672, 47,
	389, 389, 1673, 718, 502, 383, 384, 1255, 1631, 1071,
	833, 1448, 418, 1377, 490, 1192, 741, 741, 1184, 1181,
	535, 662, 1695, 1624, 992, 741, 741, 514, 717, 1261,
	1012, 560, 841, 377, 439, 72, 438, 389, 389, 74,
	541, 74, 1054, 74, 74, 511, 742, 769, 1036, 410,
	1785, 1225, 74, 1901, 1790, 436, 1445, 1831, 741, 64,
	25, 23, 22, 740, 21, 20, 72, 18, 1710, 17,
	16, 444, 444, 74, 24, 444, 14, 13, 72, 12,
	1707, 1708, 717, 11, 10, 72, 72, 72, 33, 693,
	32, 740, 740, 31, 1728, 74, 30, 74, 29, 1745,
	740, 740, 5, 2, 1, 0, 74, 714, 72, 1647,
	1646, 718, 74, 1736, 1748, 760, 1734, 760, 0, 0,
	1648, 1743, 0, 0, 0, 0, 717, 0, 1751, 1761,
	1758, 1729, 1730, 740, 1186, 1186, 0, 389, 0, 760,
	389, 389, 389, 389, 389, 811, 0, 851, 852, 389,
	0, 0, 0, 74, 377, 1765, 0, 0, 1778, 0,
	0, 826, 0, 0, 1787, 0, 741, 0, 0, 0,
	854, 0, 74, 74, 0, 1771, 74, 1781, 0, 436,
	74, 1718, 847, 0, 1799, 74, 0, 0, 1186, 1186,
	1186, 853, 0, 0, 0, 1807, 1808, 0, 0, 1805,
	74, 1647, 1646, 0, 1801, 260, 0, 1803, 1800, 0,
	1802, 718, 1648, 430, 0, 0, 0, 684, 1782, 0,
	0, 0, 1815, 0, 1753, 1814, 0, 74, 0, 74,
	74, 0, 74, 0, 0, 444, 1821, 0, 0, 0,
	0, 740, 0, 1813, 1837, 0, 859, 0, 0, 0,
	1840, 74, 1835, 1841, 0, 0, 0, 1833, 0, 1838,
	0, 0, 0, 1818, 0, 1844, 741, 1843, 0, 1647,
	1646, 1849, 1829, 0, 1842, 74, 0, 74, 0, 0,
	1648, 1861, 72, 0, 754, 1867, 0, 1863, 0, 718,
	957, 0, 74, 0, 72, 869, 1839, 1876, 72, 974,
	1865, 0, 1880, 1878, 0, 0, 0, 0, 1884, 0,
	0, 0, 1887, 72, 1888, 995, 996, 0, 72, 1885,
	1864, 72, 0, 389, 389, 0, 389, 1900, 0, 1899,
	0, 261, 1904, 1186, 1186, 0, 0, 0, 0, 0,
	0, 740, 262, 0, 741, 0, 0, 1909, 0, 0,
	0, 0, 870, 0, 1380, 1381, 0, 743, 743, 1830,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 760, 847,
	0, 0, 0, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
	1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
	1186, 1186, 0, 1186, 993, 1344, 1345, 0, 742, 742,
	0, 0, 0, 0, 717, 0, 0, 0, 0, 740,
	0, 0, 741, 0, 0, 1048, 864, 861, 862, 863,
	855, 856, 857, 858, 860, 0, 880, 0, 0, 72,
	1055, 0, 717, 717, 847, 0, 0, 0, 0, 0,
	0, 717, 717, 1386, 0, 0, 0, 1311, 0, 1403,
	1404, 1405, 0, 743, 0, 0, 0, 0, 0, 714,
	714, 72, 0, 0, 389, 1380, 1381, 0, 1398, 1399,
	1400, 579, 45, 0, 717, 0, 0, 0, 0, 0,
	0, 1675, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 1396, 851, 852, 1315, 871, 872, 873, 881,
	882, 883, 0, 0, 742, 0, 0, 743, 45, 874,
	0, 0, 0, 1318, 0, 1395, 854, 0, 885, 1380,
	1381, 0, 0, 0, 1313, 0, 0, 0, 0, 423,
	1316, 0, 431, 0, 0, 0, 0, 853, 0, 45,
	0, 0, 0, 868, 1314, 0, 0, 0, 0, 1397,
	0, 743, 0, 0, 0, 0, 0, 0, 742, 0,
	72, 1220, 1221, 0, 1386, 714, 957, 0, 0, 1228,
	0, 0, 0, 0, 0, 1233, 1234, 1236, 1238, 1239,
	0, 0, 717, 1244, 0, 0, 1246, 0, 0, 72,
	1317, 0, 859, 0, 1518, 1519, 72, 1401, 1259, 0,
	0, 1186, 742, 0, 0, 72, 0, 0, 0, 0,
	878, 886, 0, 1396, 0, 72, 0, 0, 1386, 714,
	0, 0, 0, 0, 0, 884, 1390, 1382, 1383, 1384,
	1385, 1387, 0, 0, 0, 876, 1048, 760, 0, 0,
	0, 869, 1048, 0, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 714, 1576, 0, 0, 1396, 0, 0,
	1397, 0, 826, 0, 826, 0, 389, 0, 72, 0,
	0, 1302, 717, 0, 0, 0, 0, 1186, 1380, 1381,
	1305, 1398, 1399, 1400, 0, 0, 0, 1324, 870, 72,
	0, 0, 0, 0, 1674, 0, 0, 0, 0, 879,
	0, 851, 852, 564, 564, 0, 0, 0, 0, 0,
	431, 0, 664, 0, 1397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 854, 0, 0, 685, 1395, 0,
	1392, 1393, 1394, 0, 1391, 1388, 1389, 1390, 1382, 1383,
	1384, 1385, 1387, 0, 0, 853, 0, 0, 0, 0,
	717, 0, 0, 0, 0, 877, 0, 1186, 865, 866,
	867, 0, 864, 861, 862, 863, 855, 856, 857, 858,
	860, 0, 880, 0, 0, 0, 0, 1386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1391, 1388,
	1389, 1390, 1382, 1383, 1384, 1385, 1387, 0, 851, 852,
	859, 871, 872, 873, 881, 882, 883, 0, 0, 0,
	1401, 0, 0, 834, 836, 0, 0, 0, 0, 0,
	843, 854, 0, 885, 0, 0, 1396, 0, 717, 743,
	0, 847, 889, 890, 891, 892, 893, 0, 0, 0,
	0, 896, 853, 0, 0, 0, 0, 0, 868, 869,
	0, 0, 0, 0, 0, 0, 0, 743, 743, 0,
	0, 909, 1717, 72, 72, 0, 743, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 1397, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 957, 423, 826, 0, 859, 0, 743,
	0, 1493, 0, 0, 0, 0, 870, 0, 742, 742,
	72, 0, 0, 0, 72, 878, 886, 742, 742, 0,
	1324, 0, 0, 0, 1513, 0, 1324, 0, 0, 0,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 714, 0, 0, 0, 0, 869, 0, 1775, 0,
	742, 0, 0, 1392, 1393, 1394, 0, 1391, 1388, 1389,
	1390, 1382, 1383, 1384, 1385, 1387, 0, 0, 1542, 714,
	714, 0, 0, 0, 0, 0, 0, 0, 714, 714,
	0, 0, 0, 0, 855, 856, 857, 858, 860, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 743, 0, 0,
	0, 714, 423, 0, 879, 423, 423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1820, 0,
	0, 0, 0, 0, 0, 1595, 1596, 957, 895, 0,
	0, 0, 899, 0, 847, 847, 0, 0, 0, 0,
	1622, 0, 1623, 0, 72, 1625, 1626, 0, 742, 1629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 865, 866, 867, 0, 864, 861, 862,
	863, 855, 856, 857, 858, 860, 0, 880, 1643, 0,
	847, 1055, 0, 1643, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 72, 0, 0, 72, 743, 0, 0,
	0, 0, 0, 0, 564, 847, 1324, 0, 0, 714,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 0, 1120, 1690, 1122, 1123, 1124, 1125, 0,
	0, 45, 0, 45, 0, 0, 0, 0, 742, 1380,
	1381, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	1168, 1169, 0, 0, 1182, 743, 1193, 1195, 1200, 1203,
	1204, 1205, 0, 0, 0, 0, 0, 0, 0, 957,
	1609, 1709, 1602, 389, 1711, 0, 0, 0, 0, 0,
	1600, 664, 72, 0, 1604, 0, 0, 0, 0, 714,
	0, 0, 0, 0, 0, 0, 1380, 1381, 0, 1398,
	1399, 1400, 1610, 847, 0, 0, 742, 0, 0, 0,
	0, 0, 1525, 0, 0, 1250, 0, 1253, 0, 0,
	1643, 0, 1603, 0, 0, 72, 0, 1756, 1386, 0,
	0, 0, 0, 743, 0, 0, 72, 0, 0, 0,
	0, 0, 847, 0, 0, 0, 1395, 0, 0, 0,
	851, 852, 0, 871, 872, 873, 881, 882, 883, 1279,
	0, 0, 0, 0, 0, 0, 874, 714, 0, 0,
	0, 0, 0, 854, 0, 885, 0, 1396, 0, 0,
	0, 0, 1086, 826, 742, 0, 0, 1605, 0, 1606,
	0, 0, 0, 0, 853, 1386, 0, 0, 0, 0,
	868, 0, 1792, 1793, 0, 0, 1797, 0, 0, 843,
	1798, 0, 1643, 0, 1608, 389, 0, 0, 1137, 0,
	0, 1611, 0, 0, 0, 0, 0, 0, 1401, 0,
	847, 0, 0, 0, 1397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1396, 714, 0, 0, 0, 859,
	1329, 1330, 0, 0, 0, 0, 1335, 1828, 0, 847,
	72, 0, 389, 0, 0, 0, 0, 878, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1607, 1349,
	1643, 1756, 884, 0, 0, 0, 0, 0, 1357, 0,
	1380, 1381, 876, 1398, 1399, 1400, 1365, 0, 869, 0,
	1370, 1397, 0, 0, 0, 72, 0, 847, 0, 1388,
	1389, 1390, 1382, 1383, 1384, 1385, 1387, 431, 0, 0,
	875, 0, 1877, 0, 0, 896, 0, 0, 0, 0,
	0, 1200, 1200, 1200, 0, 0, 0, 0, 0, 0,
	1395, 0, 0, 0, 851, 852, 0, 871, 872, 873,
	881, 882, 883, 0, 0, 870, 0, 0, 0, 0,
	874, 0, 0, 0, 1441, 0, 879, 854, 0, 885,
	0, 1392, 1393, 1394, 0, 1391, 1388, 1389, 1390, 1382,
	1383, 1384, 1385, 1387, 0, 0, 0, 564, 853, 1386,
	0, 0, 0, 0, 868, 564, 45, 0, 45, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 877, 0, 0, 865, 866, 867, 0, 864,
	861, 862, 863, 855, 856, 857, 858, 860, 1396, 880,
	0, 979, 0, 859, 0, 0, 0, 0, 0, 0,
	980, 1137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 886, 1516, 0, 0, 1517, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 884, 1522, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	1279, 0, 869, 0, 0, 1397, 0, 0, 0, 1539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1549,
	0, 0, 0, 1551, 875, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1582, 1583, 0, 870,
	0, 0, 0, 0, 0, 1589, 1590, 1591, 0, 0,
	879, 0, 0, 0, 0, 1392, 1393, 1394, 0, 1391,
	1388, 1389, 1390, 1382, 1383, 1384, 1385, 1387, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1380, 1381,
	0, 1398, 1399, 1400, 0, 0, 877, 0, 0, 865,
	866, 867, 0, 864, 861, 862, 863, 855, 856, 857,
	858, 860, 1657, 880, 0, 0, 0, 0, 0, 0,
	1703, 1086, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1676, 0, 0, 1395, 1679,
	1680, 0, 0, 0, 1682, 0, 851, 852, 1684, 871,
	872, 873, 881, 882, 883, 1688, 0, 0, 0, 1691,
	0, 0, 874, 0, 0, 0, 0, 0, 0, 854,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1386, 0, 0,
	853, 0, 1700, 0, 0, 0, 868, 390, 0, 0,
	0, 0, 0, 0, 0, 27, 1402, 0, 0, 0,
	0, 0, 0, 0, 0, 403, 49, 0, 0, 0,
	1401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1727, 0, 1396, 0, 0, 0,
	51, 0, 0, 0, 0, 859, 28, 0, 56, 0,
	392, 0, 0, 0, 0, 397, 398, 0, 0, 404,
	1746, 0, 0, 878, 886, 0, 0, 40, 0, 0,
	0, 391, 393, 0, 35, 0, 45, 52, 884, 1760,
	0, 39, 36, 0, 0, 0, 0, 0, 876, 1767,
	1768, 0, 0, 1397, 869, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 0,
	394, 0, 0, 1086, 1086, 0, 875, 1086, 1780, 0,
	0, 0, 0, 395, 396, 0, 0, 0, 0, 0,
	0, 1784, 0, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 1392, 1393, 1394, 0, 1391, 1388, 1389,
	1390, 1382, 1383, 1384, 1385, 1387, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 42, 0, 53, 0, 0, 0, 0, 43, 0,
	0, 63, 0, 0, 0, 0, 46, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 877, 0,
	0, 865, 866, 867, 65, 864, 861, 862, 863, 855,
	856, 857, 858, 860, 0, 880, 400, 55, 0, 401,
	0, 0, 1422, 0, 402, 0, 0, 1862, 1737, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 1875, 1875, 45, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 1875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 76, 77, 278, 78, 279, 280, 281, 282, 189,
	283, 284, 285, 286, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 287, 82, 196, 197, 83, 288, 289,
	198, 199, 200, 290, 201, 291, 264, 292, 84, 85,
	86, 0, 87, 293, 88, 89, 90, 294, 265, 91,
	92, 295, 296, 297, 298, 299, 300, 93, 94, 95,
	96, 202, 97, 203, 204, 301, 98, 302, 99, 303,
	304, 305, 100, 101, 306, 102, 307, 0, 308, 205,
	103, 104, 206, 207, 309, 310, 311, 105, 106, 208,
	0, 107, 312, 108, 313, 314, 266, 315, 109, 209,
	316, 210, 317, 110, 111, 112, 211, 212, 268, 318,
	115, 319, 113, 320, 267, 114, 213, 214, 215, 216,
	321, 217, 322, 269, 116, 270, 117, 118, 323, 324,
	218, 271, 119, 272, 325, 120, 326, 327, 121, 0,
	122, 123, 124, 125, 126, 273, 127, 128, 131, 129,
	328, 130, 329, 219, 132, 220, 133, 134, 330, 331,
	332, 333, 334, 135, 221, 274, 136, 275, 222, 137,
	138, 139, 335, 223, 140, 224, 141, 336, 142, 143,
	144, 225, 145, 146, 337, 148, 149, 147, 150, 338,
	151, 276, 152, 153, 226, 154, 0, 155, 156, 157,
	339, 227, 158, 159, 340, 160, 161, 277, 162, 228,
	229, 163, 341, 169, 164, 165, 166, 168, 230, 167,
	231, 342, 170, 343, 171, 172, 344, 232, 233, 234,
	345, 346, 173, 235, 236, 347, 174, 175, 176, 177,
	348, 349, 178, 179, 180, 350, 351, 181, 182, 183,
	237, 238, 352, 353, 184, 354, 355, 356, 357, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	76, 77, 278, 78, 279, 280, 281, 282, 189, 283,
	284, 285, 286, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 287, 82, 196, 197, 83, 288, 289, 198,
	199, 200, 290, 201, 291, 264, 292, 84, 85, 86,
	0, 87, 293, 88, 89, 90, 294, 265, 91, 92,
	295, 296, 297, 298, 299, 300, 93, 94, 95, 96,
	202, 97, 203, 204, 301, 98, 302, 99, 303, 304,
	305, 100, 101, 306, 102, 307, 0, 308, 205, 103,
	104, 206, 207, 309, 310, 311, 105, 106, 208, 0,
	107, 312, 108, 313, 314, 266, 315, 109, 209, 316,
	210, 317, 110, 111, 112, 211, 212, 268, 318, 115,
	319, 113, 320, 267, 114, 213, 214, 215, 216, 321,
	217, 322, 269, 116, 270, 117, 118, 323, 324, 218,
	271, 119, 272, 325, 120, 326, 327, 121, 0, 122,
	123, 124, 125, 126, 273, 127, 128, 131, 129, 328,
	130, 329, 219, 132, 220, 133, 134, 330, 331, 332,
	333, 334, 135, 221, 274, 136, 275, 222, 137, 138,
	139, 335, 223, 140, 224, 141, 336, 142, 143, 144,
	225, 145, 146, 337, 148, 149, 147, 150, 338, 151,
	276, 152, 153, 226, 154, 0, 155, 156, 157, 339,
	227, 158, 159, 340, 160, 161, 277, 162, 228, 229,
	163, 341, 169, 164, 165, 166, 168, 230, 167, 231,
	342, 170, 343, 171, 172, 344, 232, 233, 234, 345,
	346, 173, 235, 236, 347, 174, 175, 176, 177, 348,
	349, 178, 179, 180, 350, 351, 181, 182, 183, 237,
	238, 352, 353, 184, 354, 355, 356, 357, 185, 186,
	187, 188, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 76, 77,
	278, 78, 279, 280, 281, 282, 189, 283, 284, 285,
	286, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	287, 82, 196, 197, 83, 288, 289, 198, 199, 200,
	290, 201, 291, 264, 292, 84, 85, 86, 0, 87,
	293, 88, 89, 90, 294, 265, 91, 92, 295, 296,
	297, 298, 299, 300, 93, 94, 95, 96, 202, 97,
	203, 204, 301, 98, 302, 99, 303, 304, 305, 100,
	101, 306, 102, 307, 0, 308, 205, 103, 104, 206,
	207, 309, 310, 311, 105, 106, 208, 0, 107, 312,
	108, 313, 314, 266, 315, 109, 209, 316, 210, 317,
	110, 111, 112, 211, 212, 268, 318, 115, 319, 113,
	320, 267, 114, 213, 214, 215, 216, 321, 217, 322,
	269, 116, 270, 117, 118, 323, 324, 218, 271, 119,
	272, 325, 120, 326, 327, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 328, 130, 329,
	219, 132, 220, 133, 134, 330, 331, 332, 333, 334,
	135, 221, 274, 136, 275, 222, 137, 138, 139, 335,
	223, 140, 224, 141, 336, 142, 143, 144, 225, 145,
	146, 337, 148, 149, 147, 150, 338, 151, 276, 152,
	153, 226, 154, 0, 155, 156, 157, 339, 227, 158,
	159, 340, 160, 161, 277, 162, 228, 229, 163, 341,
	169, 164, 165, 166, 168, 230, 167, 231, 342, 170,
	343, 171, 172, 344, 232, 233, 234, 345, 346, 173,
	235, 236, 347, 174, 175, 176, 177, 348, 349, 178,
	179, 180, 350, 351, 181, 182, 183, 237, 238, 352,
	353, 184, 354, 355, 356, 357, 185, 186, 187, 188,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 1154, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 0, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	0, 98, 0, 99, 0, 1155, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 0, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 0, 171,
	172, 0, 232, 648, 649, 0, 0, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 237, 650, 1153, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	568, 1156, 0, 0, 0, 569, 0, 0, 576, 1151,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 0, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	665, 98, 0, 99, 0, 0, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 0, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 63, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 65, 171,
	172, 0, 232, 648, 649, 0, 0, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 486, 650, 0, 0, 184,
	0, 0, 0, 61, 185, 186, 187, 188, 571, 62,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 567,
	568, 0, 0, 0, 0, 569, 76, 77, 576, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 0, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	0, 98, 0, 99, 0, 0, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 0, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 63, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 65, 171,
	172, 0, 232, 648, 649, 0, 0, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 486, 650, 0, 0, 184,
	0, 0, 0, 61, 185, 186, 187, 188, 571, 62,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 567,
	568, 0, 0, 0, 0, 569, 76, 77, 576, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 1196, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	0, 98, 0, 99, 0, 0, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	1201, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 1197, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 0, 171,
	172, 0, 232, 648, 649, 0, 1198, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 237, 650, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 571, 0,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 567,
	568, 0, 0, 0, 0, 569, 76, 77, 576, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 0, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	0, 98, 0, 99, 0, 0, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 0, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 0, 171,
	172, 0, 232, 648, 649, 0, 0, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 237, 650, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	568, 0, 0, 0, 0, 569, 0, 0, 576, 1579,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 0, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	0, 98, 0, 99, 0, 0, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 0, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 0, 171,
	172, 0, 232, 648, 649, 0, 0, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 237, 650, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	568, 0, 0, 0, 0, 569, 0, 0, 576, 1528,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 0, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	0, 98, 0, 99, 0, 0, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 0, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 0, 171,
	172, 0, 232, 648, 649, 0, 0, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 237, 650, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	568, 0, 0, 0, 0, 569, 0, 0, 576, 1150,
	599, 588, 589, 586, 587, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 615, 581, 0, 0, 0, 79,
	80, 190, 630, 192, 631, 81, 632, 633, 0, 82,
	196, 197, 83, 596, 614, 634, 635, 200, 0, 626,
	0, 607, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 608, 610, 0,
	609, 611, 93, 94, 95, 96, 636, 97, 637, 638,
	0, 98, 0, 99, 0, 0, 0, 629, 101, 0,
	102, 0, 0, 0, 580, 103, 104, 616, 617, 594,
	0, 0, 105, 106, 639, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 627, 0, 210, 0, 110, 111,
	112, 623, 625, 268, 0, 115, 0, 113, 0, 267,
	114, 640, 641, 642, 643, 0, 606, 0, 269, 116,
	270, 117, 118, 0, 0, 628, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 570, 130, 595, 624, 132,
	644, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	274, 136, 275, 618, 137, 138, 139, 0, 619, 140,
	224, 141, 0, 142, 143, 144, 645, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 584,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 612,
	160, 161, 277, 162, 646, 229, 163, 0, 169, 164,
	165, 166, 168, 647, 167, 620, 0, 170, 0, 171,
	172, 0, 232, 648, 649, 0, 0, 173, 621, 622,
	593, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	613, 0, 181, 182, 183, 237, 650, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 571, 0,
	0, 0, 0, 599, 588, 589, 586, 587, 575, 567,
	568, 0, 0, 0, 0, 569, 901, 1147, 576, 76,
	77, 0, 78, 0, 0, 0, 0, 615, 581, 0,
	0, 0, 79, 80, 190, 630, 192, 631, 81, 632,
	633, 0, 82, 196, 197, 83, 596, 614, 634, 635,
	200, 0, 626, 0, 607, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 265, 91, 92, 0,
	608, 610, 0, 609, 611, 93, 94, 95, 96, 636,
	97, 637, 638, 0, 98, 0, 99, 0, 0, 0,
	629, 101, 0, 102, 0, 0, 0, 580, 103, 104,
	616, 617, 594, 0, 0, 105, 106, 639, 0, 107,
	0, 108, 0, 0, 266, 0, 109, 627, 0, 210,
	0, 110, 111, 112, 623, 625, 268, 0, 115, 0,
	113, 0, 267, 114, 640, 641, 642, 643, 0, 606,
	0, 269, 116, 270, 117, 118, 0, 0, 628, 271,
	119, 272, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 273, 127, 128, 131, 129, 570, 130,
	595, 624, 132, 644, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 274, 136, 275, 618, 137, 138, 139,
	0, 619, 140, 224, 141, 0, 142, 143, 144, 645,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 276,
	152, 153, 584, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 612, 160, 161, 277, 162, 646, 229, 163,
	0, 169, 164, 165, 166, 168, 647, 167, 620, 0,
	170, 0, 171, 172, 0, 232, 648, 649, 0, 0,
	173, 621, 622, 593, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 613, 0, 181, 182, 183, 237, 650,
	0, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 571, 0, 599, 588, 589, 586, 587, 575, 0,
	0, 0, 567, 568, 565, 0, 0, 0, 569, 76,
	77, 576, 78, 0, 0, 0, 0, 615, 581, 0,
	0, 0, 79, 80, 190, 630, 192, 631, 81, 632,
	633, 0, 82, 196, 197, 83, 596, 614, 634, 635,
	200, 0, 626, 0, 607, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 265, 91, 92, 0,
	608, 610, 0, 609, 611, 93, 94, 95, 96, 636,
	97, 637, 638, 0, 98, 0, 99, 0, 0, 0,
	629, 101, 0, 102, 0, 0, 0, 580, 103, 104,
	616, 617, 594, 0, 0, 105, 106, 639, 0, 107,
	0, 108, 0, 0, 266, 0, 109, 627, 0, 210,
	0, 110, 111, 112, 623, 625, 268, 0, 115, 0,
	113, 0, 267, 114, 640, 641, 642, 643, 0, 606,
	0, 269, 116, 270, 117, 118, 0, 0, 628, 271,
	119, 272, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 273, 127, 128, 131, 129, 570, 130,
	595, 624, 132, 644, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 274, 136, 275, 618, 137, 138, 139,
	0, 619, 140, 224, 141, 0, 142, 143, 144, 645,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 276,
	152, 153, 584, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 612, 160, 161, 277, 162, 646, 229, 163,
	0, 169, 164, 165, 166, 168, 647, 167, 620, 0,
	170, 0, 171, 172, 0, 232, 648, 649, 0, 0,
	173, 621, 622, 593, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 613, 0, 181, 182, 183, 237, 650,
	1533, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 571, 0, 599, 588, 589, 586, 587, 575, 0,
	0, 0, 567, 568, 0, 0, 0, 0, 569, 76,
	77, 576, 78, 0, 0, 0, 0, 615, 581, 0,
	0, 0, 79, 80, 190, 630, 192, 631, 81, 632,
	633, 0, 82, 196, 197, 83, 596, 614, 634, 635,
	200, 0, 626, 0, 607, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 265, 91, 92, 0,
	608, 610, 0, 609, 611, 93, 94, 95, 96, 636,
	97, 637, 638, 665, 98, 0, 99, 0, 0, 0,
	629, 101, 0, 102, 0, 0, 0, 580, 103, 104,
	616, 617, 594, 0, 0, 105, 106, 639, 0, 107,
	0, 108, 0, 0, 266, 0, 109, 627, 0, 210,
	0, 110, 111, 112, 623, 625, 268, 0, 115, 0,
	113, 0, 267, 114, 640, 641, 642, 643, 0, 606,
	0, 269, 116, 270, 117, 118, 0, 0, 628, 271,
	119, 272, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 273, 127, 128, 131, 129, 570, 130,
	595, 624, 132, 644, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 274, 136, 275, 618, 137, 138, 139,
	0, 619, 140, 224, 141, 0, 142, 143, 144, 645,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 276,
	152, 153, 584, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 612, 160, 161, 277, 162, 646, 229, 163,
	0, 169, 164, 165, 166, 168, 647, 167, 620, 0,
	170, 0, 171, 172, 0, 232, 648, 649, 0, 0,
	173, 621, 622, 593, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 613, 0, 181, 182, 183, 237, 650,
	0, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 571, 0, 599, 588, 589, 586, 587, 575, 0,
	0, 0, 567, 568, 0, 0, 0, 0, 569, 76,
	77, 576, 78, 0, 0, 0, 0, 615, 581, 0,
	0, 0, 79, 80, 190, 630, 192, 631, 81, 632,
	633, 0, 82, 196, 197, 83, 596, 614, 634, 635,
	200, 0, 626, 0, 607, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 265, 91, 92, 0,
	608, 610, 0, 609, 611, 93, 94, 95, 96, 636,
	97, 637, 638, 0, 98, 0, 99, 0, 0, 0,
	629, 101, 0, 102, 0, 0, 0, 580, 103, 104,
	616, 617, 594, 0, 0, 105, 106, 639, 0, 107,
	0, 108, 0, 1201, 266, 0, 109, 627, 0, 210,
	0, 110, 111, 112, 623, 625, 268, 0, 115, 0,
	113, 0, 267, 114, 640, 641, 642, 643, 0, 606,
	0, 269, 116, 270, 117, 118, 0, 0, 628, 271,
	119, 272, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 273, 127, 128, 131, 129, 570, 130,
	595, 624, 132, 644, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 274, 136, 275, 618, 137, 138, 139,
	0, 619, 140, 224, 141, 0, 142, 143, 144, 645,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 276,
	152, 153, 584, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 612, 160, 161, 277, 162, 646, 229, 163,
	0, 169, 164, 165, 166, 168, 647, 167, 620, 0,
	170, 0, 171, 172, 0, 232, 648, 649, 0, 0,
	173, 621, 622, 593, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 613, 0, 181, 182, 183, 237, 650,
	0, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 571, 0, 0, 0, 0, 599, 588, 589, 586,
	587, 575, 567, 568, 0, 0, 0, 0, 569, 0,
	0, 576, 76, 77, 835, 78, 0, 0, 0, 0,
	615, 581, 0, 0, 0, 79, 80, 190, 630, 192,
	631, 81, 632, 633, 0, 82, 196, 197, 83, 596,
	614, 634, 635, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 92, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 636, 97, 637, 638, 0, 98, 0, 99,
	0, 0, 0, 629, 101, 0, 102, 0, 0, 0,
	580, 103, 104, 616, 617, 594, 0, 0, 105, 106,
	639, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 112, 623, 625, 268,
	0, 115, 0, 113, 0, 267, 114, 640, 641, 642,
	643, 0, 606, 0, 269, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 570, 130, 595, 624, 132, 644, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 645, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 584, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 612, 160, 161, 277, 162,
	646, 229, 163, 0, 169, 164, 165, 166, 168, 647,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 648,
	649, 0, 0, 173, 621, 622, 593, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 650, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 571, 0, 599, 588, 589, 586,
	587, 575, 0, 0, 0, 567, 568, 0, 0, 0,
	0, 569, 76, 77, 576, 78, 0, 0, 0, 0,
	615, 581, 0, 0, 0, 79, 80, 190, 630, 192,
	631, 81, 632, 633, 0, 82, 196, 197, 83, 596,
	614, 634, 635, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 1874, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 636, 97, 637, 638, 0, 98, 0, 99,
	0, 0, 0, 629, 101, 0, 102, 0, 0, 0,
	580, 103, 104, 616, 617, 594, 0, 0, 105, 106,
	639, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 112, 623, 625, 268,
	0, 115, 0, 113, 0, 267, 114, 640, 641, 642,
	643, 0, 606, 0, 269, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 570, 130, 595, 624, 132, 644, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 645, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 584, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 612, 160, 161, 277, 162,
	646, 229, 163, 0, 169, 164, 165, 166, 168, 647,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 648,
	649, 0, 0, 173, 621, 622, 593, 174, 175, 1873,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 650, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 571, 0, 599, 588, 589, 586,
	587, 575, 0, 0, 0, 567, 568, 0, 0, 0,
	0, 569, 76, 77, 576, 78, 0, 0, 0, 0,
	615, 581, 0, 0, 0, 79, 80, 1872, 630, 192,
	631, 81, 632, 633, 0, 82, 196, 197, 83, 596,
	614, 634, 635, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 1874, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 636, 97, 637, 638, 0, 98, 0, 99,
	0, 0, 0, 629, 101, 0, 102, 0, 0, 0,
	580, 103, 104, 616, 617, 594, 0, 0, 105, 106,
	639, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 112, 623, 625, 268,
	0, 115, 0, 113, 0, 267, 114, 640, 641, 642,
	643, 0, 606, 0, 269, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 570, 130, 595, 624, 132, 644, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 645, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 584, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 612, 160, 161, 277, 162,
	646, 229, 163, 0, 169, 164, 165, 166, 168, 647,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 648,
	649, 0, 0, 173, 621, 622, 593, 174, 175, 1873,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 650, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 571, 0, 599, 588, 589, 586,
	587, 575, 0, 0, 0, 567, 568, 0, 0, 0,
	0, 569, 76, 77, 576, 78, 0, 0, 0, 0,
	615, 581, 0, 0, 0, 79, 80, 190, 630, 192,
	631, 81, 632, 633, 0, 82, 196, 197, 83, 596,
	614, 634, 635, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 92, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 636, 97, 637, 638, 0, 98, 0, 99,
	0, 0, 0, 629, 101, 0, 102, 0, 0, 0,
	580, 103, 104, 616, 617, 594, 0, 0, 105, 106,
	639, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 112, 623, 625, 268,
	0, 115, 0, 113, 0, 267, 114, 640, 641, 642,
	643, 0, 606, 0, 269, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 570, 130, 595, 624, 132, 644, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 645, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 584, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 612, 160, 161, 277, 162,
	646, 229, 163, 0, 169, 164, 165, 166, 168, 647,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 648,
	649, 0, 0, 173, 621, 622, 593, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 650, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 571, 0, 1173, 588, 589, 586,
	587, 575, 0, 0, 0, 567, 568, 0, 0, 0,
	0, 569, 76, 77, 576, 78, 0, 0, 0, 0,
	615, 581, 0, 0, 0, 79, 80, 190, 630, 192,
	631, 81, 632, 633, 0, 82, 196, 197, 83, 596,
	614, 634, 635, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 92, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 636, 1176, 637, 638, 0, 98, 0, 99,
	0, 0, 0, 629, 101, 0, 102, 0, 0, 0,
	580, 103, 104, 616, 617, 594, 0, 0, 105, 106,
	639, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 1177, 623, 625, 268,
	0, 115, 0, 113, 0, 267, 114, 640, 641, 642,
	643, 0, 606, 0, 269, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 1178, 1175, 125, 126, 273, 127, 128, 131,
	129, 570, 130, 595, 624, 132, 644, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 645, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 584, 154, 0, 155, 156,
	1179, 0, 227, 158, 159, 612, 160, 161, 277, 162,
	646, 229, 163, 0, 169, 164, 165, 166, 168, 647,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 648,
	649, 0, 0, 173, 621, 622, 593, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 650, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 1174, 188, 571, 0, 599, 588, 589, 586,
	587, 575, 0, 0, 0, 567, 568, 0, 0, 0,
	0, 569, 76, 77, 576, 78, 0, 0, 0, 0,
	615, 581, 0, 0, 0, 79, 80, 190, 630, 192,
	631, 81, 632, 633, 0, 82, 196, 197, 83, 596,
	614, 634, 635, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 92, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 636, 97, 637, 638, 0, 98, 0, 99,
	0, 0, 0, 629, 101, 0, 102, 0, 0, 0,
	580, 103, 104, 616, 617, 594, 0, 0, 105, 106,
	639, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 112, 623, 625, 268,
	0, 115, 0, 113, 0, 267, 114, 640, 641, 642,
	643, 0, 606, 0, 269, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 0, 130, 595, 624, 132, 644, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 645, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 1191, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 612, 160, 161, 277, 162,
	646, 229, 163, 0, 169, 164, 165, 166, 168, 647,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 648,
	649, 0, 0, 173, 621, 622, 593, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 650, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 599, 588, 589, 586,
	587, 575, 0, 0, 0, 1187, 1188, 0, 0, 0,
	0, 1189, 76, 77, 1190, 78, 0, 0, 0, 0,
	615, 581, 0, 0, 0, 79, 80, 0, 630, 192,
	631, 81, 632, 633, 0, 82, 196, 197, 83, 596,
	614, 634, 635, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 1874, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 636, 97, 637, 638, 0, 98, 0, 99,
	0, 0, 0, 629, 101, 0, 102, 0, 0, 0,
	580, 103, 104, 616, 617, 594, 0, 0, 105, 106,
	639, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 112, 623, 625, 0,
	0, 115, 0, 113, 0, 267, 114, 640, 641, 642,
	643, 0, 606, 0, 0, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 570, 130, 595, 624, 132, 644, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 645, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 584, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 612, 160, 161, 0, 162,
	646, 229, 163, 0, 169, 164, 165, 166, 168, 647,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 648,
	649, 0, 0, 173, 621, 622, 593, 174, 175, 1873,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 650, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 599, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 568, 0, 0, 0,
	0, 569, 76, 77, 576, 78, 0, 0, 0, 0,
	615, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	614, 198, 199, 200, 0, 626, 0, 607, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 92, 0, 608, 610, 0, 609, 611, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 616, 617, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	627, 0, 210, 0, 110, 111, 112, 623, 625, 268,
	0, 115, 0, 113, 0, 267, 114, 213, 214, 215,
	216, 0, 217, 0, 269, 116, 270, 117, 118, 0,
	0, 628, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 0, 130, 0, 624, 132, 220, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 618,
	137, 138, 139, 0, 619, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 226, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 612, 160, 161, 277, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 620, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 621, 622, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 613, 0, 181, 182,
	183, 237, 238, 0, 0, 184, 482, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 1645, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 264, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 211, 212, 268,
	0, 115, 0, 113, 0, 267, 114, 213, 214, 215,
	216, 0, 217, 0, 269, 116, 270, 117, 118, 0,
	0, 218, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 274, 136, 275, 222,
	137, 138, 139, 0, 223, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 226, 154, 0, 155, 156,
	157, 63, 227, 158, 159, 0, 160, 161, 277, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 65, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 486, 238, 0, 0, 184, 0, 0, 0, 61,
	185, 186, 187, 188, 0, 62, 482, 787, 0, 788,
	783, 778, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 77, 60, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 264, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 265,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 791, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 780, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 266, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 211, 212, 268,
	0, 115, 0, 113, 0, 267, 114, 213, 214, 215,
	216, 0, 217, 0, 269, 116, 270, 117, 118, 0,
	0, 218, 271, 119, 272, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	781, 0, 0, 0, 135, 221, 274, 136, 275, 222,
	137, 138, 139, 0, 223, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 276, 152, 153, 226, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 0, 160, 161, 277, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 779, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 237, 238, 482, 787, 184, 788, 783, 778, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 789, 784, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 264, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 265, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 774, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 207, 780, 0, 0, 105, 106, 208, 0, 107,
	0, 108, 0, 0, 266, 0, 109, 209, 0, 210,
	0, 110, 111, 112, 211, 212, 268, 0, 115, 0,
	113, 0, 267, 114, 213, 214, 215, 216, 0, 217,
	0, 269, 116, 270, 117, 118, 0, 0, 218, 271,
	119, 272, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 273, 127, 128, 131, 129, 0, 130,
	0, 219, 132, 220, 133, 134, 0, 781, 0, 0,
	0, 135, 221, 274, 136, 275, 222, 137, 138, 139,
	0, 223, 140, 224, 141, 0, 142, 143, 144, 225,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 276,
	152, 153, 226, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 0, 160, 161, 277, 162, 228, 229, 163,
	0, 169, 164, 165, 166, 168, 230, 167, 231, 0,
	170, 0, 171, 172, 0, 232, 233, 234, 0, 0,
	173, 235, 236, 779, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 237, 238,
	482, 787, 184, 788, 783, 778, 0, 185, 186, 187,
	188, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 789, 784, 189, 0, 0, 0, 0, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 264, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 265, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 780,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 266, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 211, 212, 268, 0, 115, 0, 113, 0, 267,
	114, 213, 214, 215, 216, 0, 217, 0, 269, 116,
	270, 117, 118, 0, 0, 218, 271, 119, 272, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	273, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 781, 0, 0, 0, 135, 221,
	274, 136, 275, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 276, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	160, 161, 277, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 232, 233, 234, 0, 0, 173, 235, 236,
	779, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 789,
	784, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 211, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 445, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 63, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 65, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 486, 238, 0, 0, 184, 73, 0, 0,
	61, 185, 186, 187, 188, 0, 62, 0, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 1088, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 211, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 63, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 65, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 486, 238, 0, 0, 184, 73, 0, 0,
	61, 185, 186, 187, 188, 0, 62, 0, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 1323, 0, 60, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 211, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 0, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 0, 0, 184, 0, 73, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 557, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 445, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 0, 0, 184, 73, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 1088, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 0, 0, 184, 0, 73,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 681, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 0, 0, 184, 73,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 994, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 0, 0, 184, 73,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 1543, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 0, 0, 184, 73,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 661, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 758, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 757, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 0, 73, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	761, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 211, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 0, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 0, 482, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 761, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 264, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 265, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 207, 0, 0, 0, 105, 106, 208,
	0, 107, 0, 108, 0, 0, 266, 0, 109, 209,
	0, 210, 0, 110, 111, 112, 211, 212, 268, 0,
	115, 0, 113, 0, 267, 114, 213, 214, 215, 216,
	0, 217, 0, 269, 116, 270, 117, 118, 0, 0,
	218, 271, 119, 272, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 273, 127, 128, 131, 129,
	0, 130, 0, 219, 132, 220, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 274, 136, 275, 222, 137,
	138, 139, 0, 223, 140, 224, 141, 0, 142, 143,
	144, 225, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 276, 152, 153, 226, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 0, 160, 161, 277, 162, 228,
	229, 163, 0, 169, 164, 165, 166, 168, 230, 167,
	231, 0, 170, 0, 171, 172, 0, 232, 233, 234,
	0, 0, 173, 235, 236, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	237, 238, 73, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	960, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	958, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	207, 0, 1063, 0, 105, 106, 208, 0, 107, 0,
	108, 963, 0, 0, 0, 109, 209, 0, 210, 0,
	110, 111, 112, 211, 212, 0, 0, 115, 1061, 113,
	0, 0, 114, 213, 214, 215, 216, 0, 217, 0,
	0, 116, 0, 117, 118, 0, 0, 218, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	219, 132, 220, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 0, 136, 0, 222, 137, 138, 139, 0,
	223, 140, 224, 141, 962, 142, 143, 144, 225, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 226, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 0, 160, 161, 0, 162, 228, 229, 163, 0,
	169, 164, 165, 166, 168, 230, 167, 231, 0, 170,
	0, 171, 172, 0, 232, 233, 234, 0, 0, 173,
	235, 236, 0, 174, 175, 176, 177, 0, 1062, 178,
	179, 180, 0, 0, 181, 182, 183, 237, 238, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 960, 201, 0,
	0, 955, 84, 85, 86, 0, 87, 958, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 963, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	954, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 962, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 961, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 73, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 1323, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 211, 212, 0,
	0, 115, 0, 113, 0, 0, 114, 213, 214, 215,
	216, 0, 217, 0, 0, 116, 0, 117, 118, 0,
	0, 218, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 0, 136, 0, 222,
	137, 138, 139, 0, 223, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 226, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 0, 160, 161, 0, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 237, 238, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 207, 0, 0, 0, 105, 106, 208, 0, 107,
	0, 108, 0, 0, 0, 0, 109, 209, 0, 210,
	0, 110, 111, 112, 211, 212, 0, 0, 115, 0,
	113, 0, 0, 114, 213, 214, 215, 216, 0, 217,
	0, 0, 116, 0, 117, 118, 0, 0, 218, 0,
	119, 0, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 0, 127, 128, 131, 129, 0, 130,
	0, 219, 132, 220, 133, 134, 0, 0, 445, 0,
	0, 135, 221, 0, 136, 0, 222, 137, 138, 139,
	0, 223, 140, 224, 141, 0, 142, 143, 144, 225,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 226, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 0, 160, 161, 0, 162, 228, 229, 163,
	0, 169, 164, 165, 166, 168, 230, 167, 231, 0,
	170, 0, 171, 172, 0, 232, 233, 234, 0, 0,
	173, 235, 236, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 237, 238,
	73, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 0,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 709, 212, 0, 0, 115, 0, 113, 0, 0,
	114, 213, 214, 215, 216, 0, 217, 0, 0, 116,
	0, 117, 118, 0, 0, 218, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 0, 445, 0, 0, 135, 221,
	0, 136, 0, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	160, 161, 0, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 232, 233, 234, 0, 0, 173, 235, 236,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 493, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 211, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 0, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 73, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 0, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 207, 0, 0, 0, 105, 106, 208, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 209, 0,
	210, 0, 110, 111, 112, 450, 212, 0, 0, 115,
	0, 113, 0, 0, 114, 213, 214, 215, 216, 0,
	217, 0, 0, 116, 0, 117, 118, 0, 0, 218,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 219, 132, 220, 133, 134, 0, 0, 445,
	0, 0, 135, 221, 0, 136, 0, 222, 137, 138,
	139, 0, 223, 140, 224, 141, 0, 142, 143, 144,
	225, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 226, 154, 0, 155, 156, 157, 0,
	227, 158, 159, 0, 160, 161, 0, 162, 228, 229,
	163, 0, 169, 164, 165, 166, 168, 230, 167, 231,
	0, 170, 0, 171, 172, 0, 232, 233, 234, 0,
	0, 173, 235, 236, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 237,
	238, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 362,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 211, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 361, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 73, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 207, 0, 0, 0, 105, 106, 208,
	0, 107, 0, 108, 0, 0, 0, 0, 109, 209,
	0, 210, 0, 110, 111, 112, 1237, 212, 0, 0,
	115, 0, 113, 0, 0, 114, 213, 214, 215, 216,
	0, 217, 0, 0, 116, 0, 117, 118, 0, 0,
	218, 0, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 0, 127, 128, 131, 129,
	0, 130, 0, 219, 132, 220, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 0, 136, 0, 222, 137,
	138, 139, 0, 223, 140, 224, 141, 0, 142, 143,
	144, 225, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 226, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 0, 160, 161, 0, 162, 228,
	229, 163, 0, 169, 164, 165, 166, 168, 230, 167,
	231, 0, 170, 0, 171, 172, 0, 232, 233, 234,
	0, 0, 173, 235, 236, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	237, 238, 73, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	207, 0, 0, 0, 105, 106, 208, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 209, 0, 210, 0,
	110, 111, 112, 1235, 212, 0, 0, 115, 0, 113,
	0, 0, 114, 213, 214, 215, 216, 0, 217, 0,
	0, 116, 0, 117, 118, 0, 0, 218, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	219, 132, 220, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 0, 136, 0, 222, 137, 138, 139, 0,
	223, 140, 224, 141, 0, 142, 143, 144, 225, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 226, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 0, 160, 161, 0, 162, 228, 229, 163, 0,
	169, 164, 165, 166, 168, 230, 167, 231, 0, 170,
	0, 171, 172, 0, 232, 233, 234, 0, 0, 173,
	235, 236, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 237, 238, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	1224, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 73, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 825, 212, 0,
	0, 115, 0, 113, 0, 0, 114, 213, 214, 215,
	216, 0, 217, 0, 0, 116, 0, 117, 118, 0,
	0, 218, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 0, 136, 0, 222,
	137, 138, 139, 0, 223, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 226, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 0, 160, 161, 0, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 237, 238, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 207, 0, 0, 0, 105, 106, 208, 0, 107,
	0, 108, 0, 0, 0, 0, 109, 209, 0, 210,
	0, 110, 111, 112, 211, 212, 0, 0, 115, 0,
	113, 0, 0, 114, 213, 214, 215, 216, 0, 217,
	0, 0, 116, 0, 117, 118, 0, 0, 218, 0,
	119, 0, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 0, 127, 128, 131, 129, 0, 130,
	0, 219, 132, 220, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 0, 136, 0, 222, 137, 138, 139,
	0, 223, 140, 224, 141, 0, 142, 143, 144, 225,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 226, 154, 0, 376, 156, 157, 0, 227,
	158, 159, 0, 160, 161, 0, 162, 228, 229, 163,
	0, 169, 164, 165, 166, 168, 230, 167, 231, 0,
	170, 0, 171, 172, 0, 232, 233, 234, 0, 0,
	173, 235, 236, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 237, 238,
	73, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 694, 0, 0, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 0,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 211, 212, 0, 0, 115, 0, 113, 0, 0,
	114, 213, 214, 215, 216, 0, 217, 0, 0, 116,
	0, 117, 118, 0, 0, 218, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	0, 136, 0, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	0, 161, 0, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 232, 233, 234, 0, 0, 173, 235, 236,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 542, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 0, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 73, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 0, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 207, 0, 0, 0, 105, 106, 208, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 209, 0,
	210, 0, 110, 111, 112, 538, 212, 0, 0, 115,
	0, 113, 0, 0, 114, 213, 214, 215, 216, 0,
	217, 0, 0, 116, 0, 117, 118, 0, 0, 218,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 219, 132, 220, 133, 134, 0, 0, 0,
	0, 0, 135, 221, 0, 136, 0, 222, 137, 138,
	139, 0, 223, 140, 224, 141, 0, 142, 143, 144,
	225, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 226, 154, 0, 155, 156, 157, 0,
	227, 158, 159, 0, 160, 161, 0, 162, 228, 229,
	163, 0, 169, 164, 165, 166, 168, 230, 167, 231,
	0, 170, 0, 171, 172, 0, 232, 233, 234, 0,
	0, 173, 235, 236, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 237,
	238, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 499, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 211, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	387, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 386, 233, 234, 0, 0, 382, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 73, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 387, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	386, 233, 234, 0, 0, 382, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 207, 0, 0, 0, 105, 106, 208,
	0, 107, 0, 108, 0, 0, 0, 0, 109, 209,
	0, 210, 0, 110, 111, 112, 478, 212, 0, 0,
	115, 0, 113, 0, 0, 114, 213, 214, 215, 216,
	0, 217, 0, 0, 116, 0, 117, 118, 0, 0,
	218, 0, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 0, 127, 128, 131, 129,
	0, 130, 0, 219, 132, 220, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 0, 136, 0, 222, 137,
	138, 139, 0, 223, 140, 224, 141, 0, 142, 143,
	144, 225, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 226, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 0, 160, 161, 0, 162, 228,
	229, 163, 0, 169, 164, 165, 166, 168, 230, 167,
	231, 0, 170, 0, 171, 172, 0, 232, 233, 234,
	0, 0, 173, 235, 236, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	237, 238, 73, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	207, 0, 0, 0, 105, 106, 208, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 209, 0, 210, 0,
	110, 111, 112, 475, 212, 0, 0, 115, 0, 113,
	0, 0, 114, 213, 214, 215, 216, 0, 217, 0,
	0, 116, 0, 117, 118, 0, 0, 218, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	219, 132, 220, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 0, 136, 0, 222, 137, 138, 139, 0,
	223, 140, 224, 141, 0, 142, 143, 144, 225, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 226, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 0, 160, 161, 0, 162, 228, 229, 163, 0,
	169, 164, 165, 166, 168, 230, 167, 231, 0, 170,
	0, 171, 172, 0, 232, 233, 234, 0, 0, 173,
	235, 236, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 237, 238, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	472, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 73, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 470, 212, 0,
	0, 115, 0, 113, 0, 0, 114, 213, 214, 215,
	216, 0, 217, 0, 0, 116, 0, 117, 118, 0,
	0, 218, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 0, 136, 0, 222,
	137, 138, 139, 0, 223, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 226, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 0, 160, 161, 0, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 237, 238, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 207, 0, 0, 0, 105, 106, 208, 0, 107,
	0, 108, 0, 0, 0, 0, 109, 209, 0, 210,
	0, 110, 111, 112, 453, 212, 0, 0, 115, 0,
	113, 0, 0, 114, 213, 214, 215, 216, 0, 217,
	0, 0, 116, 0, 117, 118, 0, 0, 218, 0,
	119, 0, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 0, 127, 128, 131, 129, 0, 130,
	0, 219, 132, 220, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 0, 136, 0, 222, 137, 138, 139,
	0, 223, 140, 224, 141, 0, 142, 143, 144, 225,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 226, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 0, 160, 161, 0, 162, 228, 229, 163,
	0, 169, 164, 165, 166, 168, 230, 167, 231, 0,
	170, 0, 171, 172, 0, 232, 233, 234, 0, 0,
	173, 235, 236, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 237, 238,
	73, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 0,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 211, 212, 0, 0, 115, 0, 113, 0, 0,
	114, 213, 214, 215, 216, 0, 217, 0, 0, 116,
	0, 117, 118, 0, 0, 218, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	0, 136, 0, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 434, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	160, 161, 0, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 232, 233, 234, 0, 0, 173, 235, 236,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 211, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 379, 0, 0,
	121, 0, 122, 123, 124, 125, 387, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 381, 154, 0, 155,
	156, 157, 0, 227, 158, 380, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 386,
	233, 234, 0, 0, 382, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 73, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 0, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 207, 0, 0, 0, 105, 106, 208, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 209, 0,
	210, 0, 110, 111, 112, 211, 212, 0, 0, 115,
	0, 113, 0, 0, 114, 213, 214, 215, 216, 0,
	217, 0, 0, 116, 0, 117, 118, 0, 0, 218,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 219, 132, 220, 133, 134, 0, 0, 0,
	0, 0, 135, 221, 0, 136, 0, 222, 137, 138,
	0, 0, 223, 140, 224, 141, 0, 142, 0, 144,
	225, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 226, 0, 0, 155, 156, 157, 0,
	227, 158, 159, 0, 160, 161, 0, 162, 228, 229,
	163, 0, 169, 164, 165, 166, 168, 230, 167, 231,
	0, 170, 0, 171, 172, 0, 232, 233, 234, 0,
	0, 173, 235, 236, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 237,
	238, 0, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 851, 852, 0, 871, 872, 873, 881, 882,
	883, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 0, 854, 0, 885, 851, 852,
	0, 871, 872, 873, 881, 882, 883, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 853, 0, 0, 0,
	0, 854, 868, 885, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 871, 872, 873, 881, 882, 883, 0,
	0, 0, 853, 0, 0, 0, 874, 0, 868, 0,
	0, 0, 0, 854, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 853, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 878, 886, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 875, 0, 0, 0, 869, 878, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 876, 0, 0, 0, 0, 870, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 879, 865, 866, 867,
	0, 864, 861, 862, 863, 855, 856, 857, 858, 860,
	0, 880, 0, 0, 0, 0, 0, 0, 1421, 0,
	877, 0, 0, 865, 866, 867, 0, 864, 861, 862,
	863, 855, 856, 857, 858, 860, 0, 880, 0, 0,
	0, 0, 1380, 1381, 1420, 1398, 1399, 1400, 0, 0,
	0, 0, 877, 0, 0, 865, 866, 867, 1524, 864,
	861, 862, 863, 855, 856, 857, 858, 860, 0, 880,
	0, 0, 0, 0, 851, 852, 1372, 871, 872, 873,
	881, 882, 883, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 1395, 0, 0, 0, 0, 854, 0, 885,
	851, 852, 0, 871, 872, 873, 881, 882, 883, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 853, 0,
	0, 0, 0, 854, 868, 885, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 871, 872, 873, 881, 882,
	883, 1386, 0, 0, 853, 0, 0, 0, 874, 0,
	868, 0, 0, 0, 0, 854, 0, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 1401, 0, 853, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	1396, 878, 886, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 878, 886, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 875, 0, 0, 1397, 869, 878,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 876, 0, 0, 0, 0, 870,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 870, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 1392, 1393, 1394,
	0, 1391, 1388, 1389, 1390, 1382, 1383, 1384, 1385, 1387,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 879, 865,
	866, 867, 0, 864, 861, 862, 863, 855, 856, 857,
	858, 860, 0, 880, 0, 0, 0, 1825, 0, 0,
	0, 0, 877, 0, 0, 865, 866, 867, 0, 864,
	861, 862, 863, 855, 856, 857, 858, 860, 0, 880,
	0, 0, 0, 1823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 865, 866, 867,
	0, 864, 861, 862, 863, 855, 856, 857, 858, 860,
	0, 880, 0, 851, 852, 1804, 871, 872, 873, 881,
	882, 883, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 0, 0, 854, 0, 885, 851,
	852, 0, 871, 872, 873, 881, 882, 883, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 853, 0, 0,
	0, 0, 854, 868, 885, 0, 0, 0, 0, 0,
	0, 851, 852, 0, 871, 872, 873, 881, 882, 883,
	0, 0, 0, 853, 0, 0, 0, 874, 0, 868,
	0, 0, 0, 0, 854, 0, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 853, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 886, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 878, 886, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 875, 0, 0, 0, 869, 878, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 876, 0, 0, 0, 0, 870, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 870, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 879, 865, 866,
	867, 0, 864, 861, 862, 863, 855, 856, 857, 858,
	860, 0, 880, 0, 0, 0, 1779, 0, 0, 0,
	0, 877, 0, 0, 865, 866, 867, 0, 864, 861,
	862, 863, 855, 856, 857, 858, 860, 0, 880, 0,
	0, 0, 1774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 865, 866, 867, 0,
	864, 861, 862, 863, 855, 856, 857, 858, 860, 0,
	880, 0, 851, 852, 1770, 871, 872, 873, 881, 882,
	883, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 0, 854, 0, 885, 851, 852,
	0, 871, 872, 873, 881, 882, 883, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 853, 0, 0, 0,
	0, 854, 868, 885, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 871, 872, 873, 881, 882, 883, 0,
	0, 0, 853, 0, 0, 0, 874, 0, 868, 0,
	0, 0, 0, 854, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 853, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 878, 886, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 875, 0, 0, 0, 869, 878, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 876, 0, 0, 0, 0, 870, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 879, 865, 866, 867,
	0, 864, 861, 862, 863, 855, 856, 857, 858, 860,
	0, 880, 0, 0, 0, 1705, 0, 0, 0, 0,
	877, 0, 0, 865, 866, 867, 0, 864, 861, 862,
	863, 855, 856, 857, 858, 860, 0, 880, 0, 0,
	0, 1704, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 865, 866, 867, 0, 864,
	861, 862, 863, 855, 856, 857, 858, 860, 0, 880,
	0, 851, 852, 1612, 871, 872, 873, 881, 882, 883,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 0, 0, 0, 854, 0, 885, 851, 852, 0,
	871, 872, 873, 881, 882, 883, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 853, 0, 0, 0, 0,
	854, 868, 885, 0, 0, 0, 0, 0, 0, 851,
	852, 0, 871, 872, 873, 881, 882, 883, 0, 0,
	0, 853, 0, 0, 0, 874, 0, 868, 0, 0,
	0, 0, 854, 0, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 853, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 886,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 878, 886, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 884,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 875, 0, 0, 0, 869, 878, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 876, 0, 0, 0, 0, 870, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 870, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 879, 865, 866, 867, 0,
	864, 861, 862, 863, 855, 856, 857, 858, 860, 0,
	880, 0, 0, 0, 1546, 0, 0, 0, 0, 877,
	0, 0, 865, 866, 867, 0, 864, 861, 862, 863,
	855, 856, 857, 858, 860, 0, 880, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 865, 866, 867, 0, 864, 861,
	862, 863, 855, 856, 857, 858, 860, 0, 880, 0,
	851, 852, 1143, 871, 872, 873, 881, 882, 883, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 0, 0,
	0, 0, 0, 854, 0, 885, 851, 852, 0, 871,
	872, 873, 881, 882, 883, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 853, 0, 0, 0, 0, 854,
	868, 885, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 871, 872, 873, 881, 882, 883, 0, 0, 0,
	853, 0, 0, 0, 874, 0, 868, 0, 0, 0,
	0, 854, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 853, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 886, 0,
	0, 0, 0, 0, 0, 859, 1893, 0, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 878, 886, 0, 0, 0, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 884, 1412,
	0, 0, 1411, 0, 0, 0, 0, 0, 876, 0,
	875, 0, 0, 0, 869, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	876, 0, 0, 0, 0, 870, 869, 0, 0, 1892,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 870, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 879, 865, 866, 867, 0, 864,
	861, 862, 863, 855, 856, 857, 858, 860, 0, 880,
	0, 1460, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 865, 866, 867, 0, 864, 861, 862, 863, 855,
	856, 857, 858, 860, 0, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 865, 866, 867, 0, 864, 861, 862,
	863, 855, 856, 857, 858, 860, 0, 880, 851, 852,
	0, 871, 872, 873, 881, 882, 883, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 0, 888, 1076,
	0, 854, 0, 885, 851, 852, 0, 871, 872, 873,
	881, 882, 883, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 853, 0, 887, 0, 0, 854, 868, 885,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 871,
	872, 873, 881, 882, 883, 0, 0, 0, 853, 0,
	0, 0, 874, 0, 868, 0, 1077, 0, 0, 854,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	853, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 878, 886, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 875, 0,
	0, 0, 869, 878, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 0, 0, 0, 875, 0, 0, 0, 876, 0,
	0, 0, 0, 870, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 429, 0, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 879, 865, 866, 867, 0, 864, 861, 862,
	863, 855, 856, 857, 858, 860, 0, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 865,
	866, 867, 0, 864, 861, 862, 863, 855, 856, 857,
	858, 860, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 865, 866, 867, 0, 864, 861, 862, 863, 855,
	856, 857, 858, 860, 0, 880, 851, 852, 0, 871,
	872, 873, 881, 882, 883, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 0, 0, 854,
	0, 885, 851, 852, 0, 871, 872, 873, 881, 882,
	883, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	853, 0, 0, 0, 0, 854, 868, 885, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 871, 872, 873,
	881, 882, 883, 0, 0, 0, 853, 0, 0, 0,
	874, 0, 868, 0, 1413, 0, 0, 854, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 853, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 886, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 1418, 0, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 878,
	886, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 875, 0, 0, 0,
	869, 878, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 876, 0, 0, 0,
	0, 870, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 870, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	879, 865, 866, 867, 0, 864, 861, 862, 863, 855,
	856, 857, 858, 860, 0, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 865, 866, 867,
	0, 864, 861, 862, 863, 855, 856, 857, 858, 860,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 865,
	866, 867, 0, 864, 861, 862, 863, 855, 856, 857,
	858, 860, 0, 880, 851, 852, 0, 871, 872, 873,
	881, 882, 883, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 0, 0, 0, 0, 854, 0, 885,
	851, 852, 0, 871, 872, 873, 881, 882, 883, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 853, 0,
	1371, 0, 0, 854, 868, 885, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 871, 872, 873, 881, 882,
	883, 0, 0, 0, 853, 0, 0, 0, 874, 0,
	868, 0, 0, 0, 0, 854, 0, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 853, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 886, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 878, 886, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 875, 0, 0, 0, 869, 878,
	886, 0, 0, 851, 852, 1378, 871, 872, 873, 881,
	882, 883, 0, 0, 884, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 876, 0, 854, 0, 885, 870,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 875, 868, 0, 870, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 879, 865,
	866, 867, 859, 864, 861, 862, 863, 855, 856, 857,
	858, 860, 0, 880, 0, 0, 0, 0, 0, 0,
	878, 886, 877, 0, 0, 865, 866, 867, 0, 864,
	861, 862, 863, 855, 856, 857, 858, 860, 0, 880,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 869, 0, 0, 877, 0, 0, 865, 866, 867,
	0, 864, 861, 862, 863, 855, 856, 857, 858, 860,
	0, 880, 0, 0, 0, 0, 0, 851, 852, 0,
	0, 0, 0, 881, 882, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	854, 0, 885, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 879,
	0, 853, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 859, 0, 865, 866,
	867, 0, 864, 861, 862, 863, 855, 856, 857, 858,
	860, 0, 880, 0, 878, 886, 0, 0, 0, 0,
	0, 731, 725, 748, 719, 739, 738, 0, 0, 721,
	720, 0, 0, 0, 750, 749, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 736, 735, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 0, 0, 0, 0,
	726, 727, 728, 729, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 864, 861, 862, 863,
	855, 856, 857, 858, 860, 732, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 730, 724, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 0, 0, 722,
	0, 0, 745, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 751,
}
var sqlPact = [...]int{

	3412, -1000, 45, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 771, 16464, -1000,
	-1000, -1000, -1000, -1000, 766, 605, 128, 4328, 16464, 16464,
	16197, 985, 985, 17799, -1000, -1000, 21003, -1000, 3423, 481,
	485, 481, 481, 460, 17799, 546, 652, 124, -1000, 660,
	15, 20736, 16464, 1305, 36, 15129, 312, 3412, 15930, 20469,
	16464, 295, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1156,
	1054, 1051, 15129, 20202, 19935, 19668, 19401, -1000, 10282, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 545, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 317, 316,
	-1000, 15663, -1000, 895, -1000, 35, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 883, -1000, 16464, -1000, -1000, 19134,
	18867, 314, 866, -1000, -1000, 513, 384, 1323, -1000, 48,
	-1000, -1000, 1155, -1000, 874, 1154, 1153, 1152, 1148, 1147,
	1145, 368, 897, -1000, 541, 866, -1000, 866, -1000, -1000,
	-1000, 524, 17799, -1000, 15129, -1000, 18600, 16464, 1068, 18333,
	-1000, 660, -1000, -1000, -1000, 882, 1301, 1301, 1301, 1312,
	134, 133, 124, 30, 16464, -1000, 313, 30, 6929, 6929,
	-1000, -1000, 312, -1000, 330, 13255, -1000, 7489, -1000, 751,
	1213, 392, 670, 1211, -117, 740, 562, 12444, 44, -1000,
	-1000, -1000, 8892, 4050, 15129, 16464, 16464, 592, 18066, -1000,
	1208, 106, 1202, -1000, 102, 1201, -1000, 102, 1200, 24,
	-1000, -1000, -1000, -1000, -1000, -1000, 312, 15396, 1356, 24785,
	-1000, 8892, -1000, -1000, 13525, 855, 13525, -1000, -1000, 1355,
	-1000, 8892, -1000, 34, 33, 1005, 1084, 10829, 10562, 1261,
	756, -1000, -1000, -1000, 47, 4328, 16464, 1164, 13525, 16464,
	16464, 16464, 16464, 16464, 16464, -1000, 1000, -1000, 16464, -1000,
	32, 31, -1000, 17799, -1000, 113, -1000, 311, 966, 138,
	17532, 1221, 957, -1000, 882, -1000, 822, 999, 8052, 8892,
	124, -1000, -1000, 124, 124, 8892, -1000, -1000, 16464, 30,
	1343, 16464, 121, -1000, 23664, -1000, -1000, 8892, 8892, 8892,
	8892, 8892, 799, -1000, -1000, -1000, 5186, -1000, -1000, 44,
	310, 272, -1000, -1000, 308, 44, -1000, -1000, -1000, -1000,
	301, 1443, 419, -1000, -1000, -1000, 8892, 388, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1162, 300, 298,
	-1000, -1000, -1000, -1000, 297, 296, 287, 282, 281, 280,
	278, 276, 275, 274, 269, 266, 261, 259, 256, 770,
	-1000, 415, -1000, -1000, 415, 415, -1000, 251, 251, 254,
	-1000, -1000, -1000, -1000, 251, -1000, -1000, -1000, 371, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 255, 121, -1000, -1000,
	-1000, 16464, 22, -1000, 24392, -1000, -6, 827, -1000, 14595,
	1292, 1285, 1278, 15129, 1328, 1325, 521, 16464, 16464, 518,
	-1000, 1144, 20, -1000, -1000, 2850, -1000, -1000, 396, 76,
	1340, 76, 12715, -1000, 16464, 16464, -1000, 16464, -1000, -1000,
	16464, -1000, 16464, 16464, -1000, 16464, 127, 14061, 676, 1199,
	15, 16, -1000, 1358, -1000, -1000, -1000, -1000, 136, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 254, 770, 251, 251, 251, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 371, -1000, -1000, 415, 415,
	415, -1000, -1000, 9, 24392, 517, 4, 13793, 16464, -1000,
	17, -1000, -1000, 1143, 472, 1, 752, 1042, 801, -1000,
	-1000, -1000, -1000, 28, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1394, -1000, -1000, -1000, -1000, 1422,
	28, -1000, -1000, -1000, -1000, -1000, 1437, -1000, -1000, -1000,
	4328, -1000, -1000, -1000, 16464, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 752, 1042, -1000, -1000, 15129, 14328,
	1337, 1198, 1336, 16464, 856, 942, -1000, -1000, 350, 1194,
	-1000, -1000, -1000, -1000, 24392, -1000, 24392, 722, 1072, -1000,
	1072, 25, -1000, 23638, -1000, 250, -4, -1000, 396, 6929,
	12174, 24785, 24785, 16464, 540, 8892, 8892, 8892, 8892, 8892,
	8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892,
	8892, 8892, 8892, 8892, 8892, 8892, 8892, 1018, 8892, 516,
	8892, 8892, 8892, 8892, 921, 807, 234, 4328, -1000, 621,
	621, 621, 2368, 2368, 226, 29, 22999, 5, 44, -1000,
	-1000, 6646, 6346, 44, 4606, -1000, 757, 1421, 407, 24392,
	1170, 1107, 249, 129, 125, 8892, 8892, 9172, 9172, 8892,
	9452, 8892, 8892, 5466, 8892, 8892, 8892, 8892, 8892, 8892,
	-1000, 247, -1000, -1000, -1000, -1000, 1415, -1000, -1000, 1414,
	-1000, 539, 535, 1413, 396, 122, 7489, -1000, 676, 16464,
	16464, 16464, -1000, -1000, 937, 17265, 936, 24785, 16464, -1000,
	243, 240, 1014, 1013, 16464, 16464, 16998, 16731, 16464, 703,
	237, 236, 16464, 707, -1000, 16464, 558, 1142, 16464, -1000,
	8892, 687, 8892, 830, -1000, 11633, 420, 16464, 701, 117,
	-1000, -1000, -1000, 346, 16464, -1000, -1000, -1000, 106, -1000,
	102, 102, -1000, -1000, 15129, -1000, -1000, -1000, -1000, -1000,
	-1000, 24785, 322, 321, -1000, 1411, 507, -1000, 506, 504,
	503, -1000, 235, -1000, 8892, 16464, 13793, 4, 0, -1000,
	-1000, 16464, 1042, -1000, -1000, -1000, -1000, 648, -1000, 746,
	-1000, 11096, -1000, -1000, -1000, 757, -1000, -12, -1000, -1000,
	-1000, -1000, 119, -15, -1, 24785, -1000, -1000, -1000, -1000,
	-1000, 16464, 291, 16464, 15, 16464, 15, 16464, 1191, 1435,
	16464, -1000, -1000, -1000, 8892, -1000, -1000, -1000, 15, 16464,
	-1000, 1103, -1000, -42, 1950, -135, 14862, -1000, 11363, -1000,
	-1000, -1000, 367, 270, 270, 451, 451, 451, 451, 845,
	845, 2271, 423, 24687, 24687, 24687, 1697, 205, 205, 24687,
	24687, 24687, 2368, 2053, 158, 8892, 8892, 498, 779, 234,
	158, 8892, 1387, 158, 158, 158, -1000, 787, -1000, -1000,
	-1000, 1139, 233, 9452, 9452, -1000, -1000, -1000, 5186, -1000,
	-1000, 229, 8892, -1000, 8892, -92, -105, -1000, -1000, -16,
	-1000, -1000, -5, 8892, 8892, 8892, 111, -1000, 104, 587,
	-1000, 8892, 802, 228, 213, 8892, -1000, -1000, 24360, 21600,
	103, 1134, -65, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	100, 99, 24334, -65, 98, 3308, -1000, 9452, 9452, 9452,
	5186, 210, 97, 23348, -65, 24044, 7769, 7769, 7769, 96,
	24012, 8892, -65, 21568, 21542, 3366, -17, -21, -28, 1410,
	-29, 92, 360, 359, 91, 1103, -1000, -1000, -1000, -1000,
	492, 491, 1190, -1000, 935, -1000, 424, -1000, 821, 8892,
	16464, 209, 208, 758, -1000, 1189, 876, 1188, 876, -1000,
	-6, 790, 8892, 8892, -1000, 490, -1000, -1000, 554, -1000,
	23290, -1000, 6929, 24392, -1000, 695, 1281, -33, -1000, -1000,
	6929, 396, 12715, 12174, 7489, -40, -1000, -1000, -1000, 676,
	-1000, 453, 1404, 89, 987, 763, 668, 639, 1399, 24392,
	-12, -1000, -12, -1000, -1000, -1000, -1000, -1000, -1000, 16464,
	1079, -1000, 14328, 204, 16464, 194, -1000, 188, -1000, 187,
	16464, -1000, 1221, -1000, 88, -1000, 1094, 1310, -1000, 12174,
	858, 1040, 1039, 12174, 1073, 808, 808, 808, -1000, 14862,
	3761, -1000, -1000, 16464, 185, 11903, 87, 1950, 8892, 158,
	158, 8892, 9452, 9452, -1000, 158, -1000, -1000, -1000, -1000,
	1120, 183, 8892, 24785, 21862, 2796, -41, 6046, -13, 22967,
	-1000, -1000, 272, -1000, 86, 7209, -1000, 23696, 2, 2,
	-1000, 1433, 1218, -1000, 8892, 23986, -1000, 12985, 402, 815,
	22941, 24785, 24785, -1000, 8892, -1000, -1000, 1118, 8892, -1000,
	24785, 24785, 9452, 9452, 9452, 9452, 9452, 9452, 9452, 9452,
	9452, 9452, 9452, 9452, 9452, 9452, 9452, 9452, 9452, 9452,
	9452, 1024, 9452, 1385, 1385, 1385, -30, 5746, -1000, 1160,
	1118, 8892, 8892, 24785, 85, 84, 82, -1000, 8892, -65,
	8892, 8892, 8892, -1000, -1000, -1000, 81, -1000, 1396, -1000,
	-1000, -1000, -1000, 1094, 16464, 16464, 16464, 1186, -1000, 2728,
	-1000, 22650, -45, 16464, 16464, -1000, 1025, 1059, 454, 16464,
	-1000, 16464, -1000, 16464, 16464, 16464, -51, -53, 16464, -1000,
	-1000, -50, 6929, 157, 15, -50, 687, -1000, -37, -1000,
	341, -1000, 206, 130, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 80, -1000, -1000, 1086, -1000, 10012, 180, 16464,
	14328, 1335, 10012, 852, -1000, -1000, 393, 8892, 8892, 1950,
	493, 12174, 12174, 813, 1030, 12174, -1000, -1000, -1000, -1000,
	-1000, -1000, 1043, 178, 16464, 14862, 537, 158, 2248, 2025,
	8892, 24785, 24513, -55, 8892, 8892, -1000, -66, -1000, 8892,
	-1000, -1000, 1428, 8892, 79, 73, 68, -1000, -1000, 24392,
	8892, -1000, -1000, 21270, 8892, 65, -1000, 64, 62, 24392,
	1160, 24392, -1000, -1000, 596, 596, 1385, 1385, 1385, 1385,
	1904, 1904, 575, 2729, 1087, 1087, 1087, 2079, 483, 483,
	1087, 1087, 1087, 1116, 996, 176, 1176, 8892, -67, -1000,
	-1000, -1000, 24392, 24392, 60, -1000, -1000, -1000, -65, 3044,
	22618, 22592, -1000, 58, 393, -1000, -1000, -1000, 16464, -1000,
	16464, -1000, 16464, 16464, 1108, 928, -1000, -1000, 1012, 174,
	9452, 16464, -1000, 783, -73, -74, 924, -1000, 922, 8892,
	-1000, 24785, 876, 876, -1000, 489, 488, -1000, -1000, -1000,
	-50, 1226, 16464, 1270, -1000, -1000, 172, -1000, -1000, -1000,
	796, -80, -1000, 214, 1296, 8892, -1000, -1000, 171, 10012,
	-81, 57, 15, -93, 16464, -1000, 16464, 24392, -65, 529,
	-1000, 813, -1000, 169, 8892, 12174, -1000, -152, -1000, 339,
	-1000, 16464, -95, -1000, 8892, 8892, 24513, -100, -1000, 158,
	158, -1000, 22301, -1000, 23696, -1000, -1000, -1000, 24392, 793,
	-1000, 22269, -1000, -1000, -1000, -1000, 9452, 1115, 168, 24785,
	22243, -1000, -1000, 8892, -1000, -1000, -1000, -1000, -1000, 1069,
	-1000, -1000, 16464, 885, -1000, -1000, 8892, 1176, 166, 1079,
	161, -1000, -1000, -1000, 723, -1000, -1000, 24392, 1297, -1000,
	-1000, 16464, 16464, 522, -101, 16464, -1000, -1000, 4906, 16464,
	783, 10012, 1286, 44, 16464, 1286, 21952, 4606, -106, -1000,
	1079, -1000, 783, 143, -52, -1000, 1326, 1427, -1000, 16464,
	24392, -1000, 1043, -1000, 4328, -118, -1000, 158, 158, -1000,
	-1000, 55, 815, 1309, -1000, 2990, 9452, 24785, -119, -1000,
	21920, -1000, -1000, 1184, 21894, 990, 16464, -1000, 16464, 16464,
	426, 16464, -1000, -1000, 574, -1000, 396, -1000, 142, 1079,
	-1000, -1000, -1000, -1000, 1296, -5, 783, -1000, 1079, 10012,
	16464, 139, -1000, -125, -1000, -1000, -1000, -1000, 684, 8892,
	2990, -126, -1000, -1000, 1177, -1000, 819, 789, 54, -132,
	138, -1000, 8892, -1000, 12715, -1000, 16464, -1000, 1286, 52,
	1079, -1000, -133, -1000, -1000, -1000, 46, 8612, 8612, -65,
	-1000, 16464, -1000, 837, 833, 613, -1000, -1000, -1000, -1000,
	-1000, 990, 24392, -114, -140, -1000, -1000, -1000, 783, -1000,
	-1000, -1000, 9732, 862, 653, 23316, -1000, -1000, -1000, 1238,
	-1000, 440, 879, 879, 819, -1000, 851, 1079, 1362, -1000,
	-1000, -1000, -1000, -1000, -1000, 1369, -1000, -1000, 998, -1000,
	-1000, -1000, -1000, -1000, -1000, 8332, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1664, 1663, 1331, 130, 1662, 128, 1658, 1656, 1653,
	1650, 1648, 102, 125, 119, 118, 1644, 1643, 84, 1639,
	1637, 1636, 99, 1634, 1630, 1629, 35, 1627, 1625, 1624,
	1622, 1621, 1620, 97, 34, 131, 2041, 121, 1619, 1617,
	1616, 21, 94, 76, 1614, 68, 1613, 1611, 61, 92,
	100, 1180, 65, 1610, 1609, 127, 30, 14, 129, 91,
	142, 116, 111, 1608, 1607, 1605, 48, 1602, 4, 1596,
	1594, 10, 64, 50, 1592, 24, 43, 1591, 1590, 113,
	1589, 75, 89, 105, 25, 117, 11, 1587, 51, 12,
	73, 1584, 37, 1581, 36, 78, 123, 1580, 52, 145,
	54, 28, 60, 93, 1579, 1578, 1575, 81, 1574, 87,
	67, 1573, 1572, 77, 1571, 115, 120, 1570, 1569, 141,
	1568, 1567, 1566, 146, 1565, 1564, 147, 1559, 3, 42,
	56, 15, 104, 101, 33, 1556, 22, 1554, 1844, 831,
	560, 1553, 53, 31, 80, 58, 59, 18, 1552, 1551,
	98, 1550, 1549, 1547, 1546, 1545, 79, 1543, 57, 133,
	46, 49, 90, 26, 23, 83, 155, 143, 103, 1541,
	1538, 109, 1537, 32, 1536, 1535, 1177, 106, 1534, 1532,
	1528, 1116, 1065, 630, 149, 1527, 1524, 279, 204, 1520,
	1511, 108, 1509, 1505, 138, 135, 17, 1504, 107, 1501,
	88, 1499, 0, 137, 126, 1498, 112, 74, 1497, 1496,
	1495, 1494, 27, 2, 9, 6, 7, 5, 20, 19,
	1489, 1486, 114, 85, 1485, 144, 1484, 1480, 1478, 45,
	1477, 16, 1476, 13, 1475, 1474, 8, 1, 132, 1460,
	96, 1457, 1357, 1453, 140, 1451, 1449, 1363, 82,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	43, 43, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 40, 40, 45,
	45, 45, 47, 47, 44, 44, 39, 39, 5, 5,
	5, 6, 6, 6, 6, 6, 12, 13, 13, 13,
	13, 13, 13, 13, 13, 85, 85, 84, 84, 87,
	87, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 172, 172, 171, 17, 148, 148, 18, 18, 18,
	18, 19, 108, 108, 20, 20, 20, 20, 21, 25,
	238, 238, 238, 242, 242, 243, 243, 244, 244, 244,
	244, 244, 244, 244, 240, 240, 28, 28, 28, 28,
	28, 127, 123, 123, 125, 125, 125, 125, 50, 122,
	122, 122, 122, 124, 124, 124, 124, 195, 194, 194,
	200, 200, 200, 63, 63, 63, 63, 63, 64, 64,
	64, 193, 193, 193, 193, 201, 201, 201, 201, 201,
	201, 65, 65, 65, 199, 199, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 16, 239, 239, 241, 241, 30, 30,
	9, 9, 10, 10, 66, 66, 67, 67, 130, 130,
	130, 130, 68, 68, 46, 46, 46, 129, 210, 210,
	211, 211, 211, 211, 211, 211, 212, 212, 212, 212,
	212, 212, 212, 208, 208, 209, 206, 206, 207, 207,
	207, 207, 245, 245, 128, 128, 71, 71, 215, 215,
	215, 215, 213, 213, 213, 213, 213, 216, 214, 217,
	217, 217, 217, 217, 159, 159, 159, 32, 11, 8,
	8, 112, 112, 75, 75, 163, 163, 163, 57, 57,
	41, 41, 41, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 113, 113, 114, 114, 23, 27, 31, 31,
	31, 31, 31, 247, 247, 54, 54, 54, 54, 55,
	55, 126, 126, 126, 126, 126, 49, 7, 7, 48,
	48, 22, 22, 22, 22, 22, 60, 60, 119, 119,
	119, 121, 121, 120, 120, 120, 98, 98, 33, 80,
	80, 89, 89, 90, 90, 169, 91, 91, 26, 26,
	36, 36, 34, 34, 34, 34, 34, 34, 35, 35,
	37, 37, 37, 37, 37, 37, 37, 223, 223, 223,
	225, 225, 222, 224, 224, 246, 246, 99, 99, 99,
	70, 69, 69, 73, 73, 72, 74, 74, 162, 96,
	96, 96, 96, 115, 116, 116, 117, 117, 118, 118,
	95, 95, 145, 145, 38, 38, 79, 79, 81, 81,
	136, 136, 137, 137, 135, 135, 135, 164, 164, 164,
	164, 165, 165, 165, 165, 165, 165, 160, 160, 160,
	160, 161, 161, 170, 170, 102, 102, 102, 102, 100,
	100, 101, 101, 166, 166, 166, 166, 97, 97, 167,
	167, 167, 131, 131, 173, 173, 173, 78, 78, 78,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 175, 175, 175, 175, 177, 177, 177,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 178, 178, 185, 185, 186, 186,
	187, 188, 179, 179, 180, 180, 181, 182, 189, 189,
	189, 189, 191, 191, 183, 183, 183, 183, 183, 184,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 110, 110, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 218, 218, 218,
	218, 218, 218, 218, 220, 220, 221, 221, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 226, 226, 227, 227, 229,
	229, 230, 230, 231, 232, 232, 232, 233, 234, 234,
	228, 228, 235, 235, 235, 236, 236, 237, 237, 237,
	237, 237, 150, 150, 150, 151, 151, 152, 86, 86,
	147, 147, 146, 146, 146, 149, 149, 103, 103, 190,
	190, 190, 190, 190, 190, 190, 104, 104, 104, 111,
	105, 105, 106, 106, 106, 106, 106, 106, 142, 143,
	107, 107, 107, 144, 144, 153, 157, 157, 156, 155,
	155, 154, 154, 134, 134, 134, 134, 133, 132, 92,
	92, 248, 248, 158, 158, 93, 93, 94, 88, 88,
	168, 168, 168, 168, 82, 82, 62, 62, 83, 83,
	58, 58, 61, 59, 59, 59, 59, 76, 76, 77,
	77, 56, 56, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 192, 192, 192, 51, 51, 51,
	52, 52, 53, 53, 197, 197, 197, 198, 198, 198,
	198, 196, 196, 196, 196, 196, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 2, 4, 2, 2, 0, 2, 0, 8, 8,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 4, 7, 3,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 2,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 1, 1, 3, 2, 4, 0, 3, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -17, -19, -20, -21, -22, -24, -25, -27, -26,
	-28, -29, -30, -31, -23, -32, -33, 23, 64, -7,
	-8, -9, -10, -11, -224, 92, 100, 122, 195, 99,
	85, 116, 209, 216, -34, -36, 224, -127, 225, 34,
	234, 58, 95, 211, 206, 255, 66, -223, -37, -35,
	302, 277, 283, 219, -38, 242, 269, 305, 242, 130,
	78, -58, -51, 4, -202, -204, 20, 21, 23, 33,
	34, 39, 43, 46, 57, 58, 59, 61, 63, 64,
	65, 68, 69, 76, 77, 78, 79, 81, 85, 87,
	91, 92, 94, 99, 100, 106, 107, 110, 112, 117,
	122, 123, 124, 131, 134, 129, 143, 145, 146, 151,
	154, 157, 159, 160, 161, 162, 163, 165, 166, 168,
	170, 167, 173, 175, 176, 182, 185, 188, 189, 190,
	193, 195, 197, 198, 199, 201, 202, 206, 204, 205,
	207, 209, 211, 212, 214, 216, 217, 218, 221, 222,
	224, 225, 227, 230, 233, 234, 235, 238, 236, 232,
	241, 243, 244, 251, 255, 256, 257, 258, 261, 262,
	263, 266, 267, 268, 273, 278, 279, 280, 281, 28,
	35, 36, 37, 38, 40, 41, 44, 45, 49, 50,
	51, 53, 80, 82, 83, 98, 101, 102, 108, 118,
	120, 125, 126, 135, 136, 137, 138, 140, 149, 172,
	174, 183, 187, 192, 194, 200, 213, 220, 228, 229,
	237, 239, 246, 247, 248, 252, 253, 269, 270, 87,
	134, 263, 262, 78, 130, 242, 272, -15, 302, -26,
	-6, -13, -4, -22, -33, -12, -14, 23, -196, 4,
	-202, -204, -203, -205, 55, 67, 115, 133, 127, 142,
	144, 150, 152, 164, 184, 186, 210, 226, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 42, 47, 48,
	52, 54, 56, 62, 66, 70, 71, 72, 73, 74,
	75, 84, 86, 88, 89, 90, 93, 95, 97, 103,
	104, 105, 111, 113, 114, 116, 119, 121, 128, 130,
	132, 139, 141, 147, 148, 153, 155, 156, 169, 171,
	177, 178, 179, 180, 181, 191, 196, 203, 208, 219,
	223, 231, 240, 242, 245, 249, 250, 254, 259, 260,
	264, 265, 271, 272, 274, 275, 276, 277, -51, -51,
	-51, 195, 22, -242, 22, -243, -244, 66, 92, 116,
	219, 134, 87, 262, -242, -55, 216, -51, -123, 154,
	222, 213, 251, -124, -122, -195, 246, 163, -84, -51,
	4, 78, 57, 79, 117, 130, 131, 62, 63, 146,
	243, 246, 251, 22, 66, -247, 251, 251, -247, -247,
	-54, 251, 249, -55, -246, 242, 242, 272, -112, 78,
	260, -35, -37, -36, -72, -73, 259, 139, 97, 181,
	-34, -36, -223, -225, 201, -222, -51, -225, -69, -70,
	22, 89, 306, -166, -58, 179, -94, 302, -3, -166,
	125, -58, -61, 125, -58, -51, 114, 302, -92, -134,
	-133, -132, 300, 304, 114, 141, 141, -167, -166, -51,
	125, -62, 125, -61, -85, 125, -84, -85, 125, -172,
	-171, -198, 4, -202, -204, -203, 269, 242, -148, 302,
	-108, 302, -51, 22, 178, 306, 178, -51, -123, 51,
	-123, 302, -125, -49, -50, 143, 197, 249, 287, 114,
	281, -65, 5, 84, -87, 304, 114, -239, 178, 114,
	114, 114, 114, 114, 114, 281, 143, 197, 242, -126,
	-49, -50, -126, 249, -55, -97, -166, -84, 125, -84,
	130, -51, 125, -72, -73, -96, -115, -116, 153, 177,
	-99, 22, 89, -99, -99, 43, 303, 303, 306, -225,
	-77, 302, -88, -168, -138, 295, -140, 293, 294, 299,
	169, 282, -150, -58, -141, 9, 302, -153, -220, -36,
	98, 29, -151, -152, 213, -51, 7, 8, 5, 6,
	-56, -175, -184, 254, 103, 171, 47, -218, -219, 4,
	-202, -197, -176, -186, -180, -183, 140, 55, 71, 74,
	72, 75, 223, 264, 48, 28, 101, 102, 187, 192,
	239, 252, 253, 125, 172, 126, 53, 118, 149, 91,
	36, 38, 40, 41, 49, 50, 80, 82, 83, 108,
	135, 136, 137, 138, 174, 200, 228, 237, 247, 248,
	270, -203, -187, -188, -181, -182, -189, -88, -94, 295,
	-58, 302, -93, -158, -138, 84, -43, 204, -42, 21,
	23, 92, 267, 98, 232, 232, 204, 98, 307, 204,
	235, 303, -82, -58, -134, -138, -196, 295, -167, -60,
	-58, -60, 224, -51, 30, 98, -45, 306, 46, 207,
	98, -45, 306, 98, -45, 98, 303, 306, -166, 125,
	30, -147, -173, -174, -176, -185, -179, -183, -184, 39,
	45, 44, 244, 220, 229, 37, 135, 136, 137, 138,
	228, 36, 200, 108, 91, 83, 82, 174, 41, 40,
	-187, -188, -181, -182, 80, 247, 248, 140, 38, 50,
	49, 270, 237, -86, -138, -238, -83, 242, 78, -59,
	-51, 295, -244, -238, 30, -86, 306, 306, 151, -64,
	157, 168, 123, -194, 84, -200, -193, -159, 9, 254,
	103, 178, -199, 8, 294, -192, -198, 5, 7, 293,
	-194, 84, 69, -201, 5, 4, -184, -159, 84, 154,
	304, -196, -195, -241, 111, -238, -195, -195, -195, -195,
	-195, -51, 151, -195, 306, 306, -55, -45, 306, 302,
	-71, 169, -71, 302, -52, 125, -51, -48, 94, 169,
	-96, -116, -115, -117, -138, 22, -138, -140, -35, -35,
	-35, -74, -162, -138, -222, 30, -76, -51, -79, 306,
	114, 10, 11, 54, 33, 293, 294, 295, 296, 109,
	297, 290, 291, 292, 289, 285, 286, 287, 60, 158,
	215, 13, 14, 15, 26, 180, 152, 282, 127, 226,
	299, 16, 17, 18, 142, 35, 128, 30, 4, -138,
	-138, -138, -138, -138, 186, -36, -138, -86, -92, -36,
	-146, 300, 302, -92, 302, 5, 5, 302, -154, -138,
	-226, 278, 111, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	194, -191, 273, -191, -191, -177, 302, -177, -178, 302,
	-177, 279, 283, 302, -79, -58, 306, 303, 306, 249,
	-113, 62, 56, -129, 125, 56, -206, -51, 62, -207,
	52, 260, 196, 113, -113, 62, -113, 62, 62, -166,
	33, 33, 249, -61, -51, 249, 114, 303, 306, 301,
	310, -131, 275, -119, -26, 302, 84, 30, -119, -89,
	-90, -169, -91, -58, 302, -51, -51, -61, -62, -84,
	-85, -85, -15, -171, 98, -18, -26, -22, -33, -12,
	303, 306, -78, 29, -109, 302, 280, 161, 81, 124,
	160, -110, 218, 303, 306, 249, 306, -83, -76, -133,
	-132, 114, 251, 303, -50, -49, -63, 199, 230, 205,
	221, 306, 8, 7, 7, 5, -196, -240, -51, -50,
	-49, -166, -66, -76, -67, -51, -130, -129, -208, -209,
	-206, 130, 260, 104, 30, 98, 30, 178, 169, 287,
	98, -118, 213, 214, 306, -41, 31, 88, 302, 306,
	303, -131, -168, -81, -164, -166, -36, -165, 302, -173,
	-173, -84, 246, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, 152, 127, 226, 35, 128,
	-138, 249, -138, -138, -138, -138, 171, 169, 254, 103,
	261, 89, 175, -248, 240, 32, -144, -36, 302, -196,
	-150, 213, 302, 303, 306, -86, -149, 301, -146, -86,
	303, 303, -86, 271, 22, 89, 295, -109, 7, -157,
	-156, 274, -227, 106, 119, 302, 303, 303, -138, -138,
	-103, -190, -86, 4, 280, 161, 81, 124, 160, 218,
	-103, -104, -138, -86, -105, -139, -140, 293, 294, 299,
	302, 213, -106, -138, -86, -138, 42, 148, 250, -107,
	-138, 114, -86, -138, -138, -138, -86, -86, -86, 302,
	7, 7, 246, 246, 7, -131, 303, -158, -42, -58,
	-51, -51, 169, -129, 125, -47, 169, -173, -51, 302,
	302, 145, 145, -51, -51, 125, -51, 125, -51, -51,
	-43, 204, 302, 302, -51, 204, -51, 235, 114, -58,
	-138, -98, 208, -138, -98, -121, 178, -82, 269, -51,
	208, -80, 306, 114, 287, -82, -45, -45, -45, -166,
	-173, 300, 300, 7, 249, 249, 249, 249, 302, -138,
	-240, -59, -240, -49, 258, 59, 199, -200, -109, 306,
	303, 303, 306, -52, 130, -52, -26, -84, -26, -58,
	98, 5, -51, -162, -18, -51, -95, 119, -170, 306,
	284, 67, -102, 144, 164, 115, 150, 210, 133, -135,
	307, -161, -160, 30, -51, -36, -165, -164, 281, -138,
	-138, 249, -248, 240, -144, -138, 171, 254, 103, 261,
	89, 175, 114, 302, -139, -139, -86, 302, -86, -138,
	301, 301, 306, 303, -73, 306, -72, -138, -86, -86,
	303, 303, -155, -156, 93, -138, -232, 185, 302, 302,
	-138, 30, 306, 303, 114, 303, 303, -111, 191, 303,
	10, 11, 293, 294, 295, 296, 109, 297, 290, 291,
	292, 289, 285, 286, 287, 60, 158, 215, 13, 14,
	15, 142, 128, -139, -139, -139, -86, 302, 303, -142,
	-143, 114, 111, 30, -107, -107, -107, 303, 114, -86,
	306, 306, 306, 303, 303, 303, 7, 303, 306, 303,
	281, 281, 303, -95, 249, 249, 98, 169, 266, -210,
	-207, -138, -76, 302, 302, -40, 92, 224, -114, 98,
	-45, 98, -45, 249, -113, 62, -86, -86, 249, 235,
	301, -88, 208, 61, 303, -88, -131, -90, -81, -158,
	303, 301, 7, 7, 303, 161, 124, 160, -110, 160,
	-110, -110, 7, -51, -68, 129, -130, 302, -52, 302,
	302, -71, 302, -51, -48, 303, -145, 121, 43, -164,
	175, 144, 144, -164, -102, 144, -100, 184, -100, -100,
	-161, -196, 308, -51, 302, 303, -138, -138, -139, -139,
	114, 302, -138, -147, 26, 26, 303, -86, 303, 306,
	303, -146, 303, 271, -73, -73, -73, 5, 95, -138,
	245, -233, -51, 302, 275, -72, 303, -173, -173, -138,
	-142, -138, -173, -173, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, 89, 169, 175, -139, 306, -86, 303,
	-143, -142, -138, -138, -173, 303, 303, 303, -86, -138,
	-138, -138, 303, 7, -145, -51, -51, -129, 98, -211,
	62, -212, 54, 104, 66, 169, 171, 260, 196, 52,
	84, 203, 303, 303, -76, -76, 169, 84, 169, 84,
	77, 256, -51, -51, -58, -51, -51, 303, 303, -51,
	-88, -120, 302, 178, -26, -98, 287, 301, 301, 303,
	128, -75, -163, -51, -221, 302, -218, -219, -56, 302,
	-76, -66, 30, -75, 178, -229, 276, -138, -86, 241,
	-164, -164, -101, 265, 178, 144, -164, -137, -136, 112,
	167, 302, -76, -160, 26, 26, -138, -147, 303, -138,
	-138, 303, -138, 5, -138, 303, 303, 303, -138, -234,
	-51, -138, 303, 303, 303, -143, 114, 89, 175, 302,
	-138, 303, 303, 306, 303, 303, 303, -229, -129, -51,
	-84, -51, 104, 125, 171, 145, 302, -139, -58, -128,
	-245, 65, 238, 303, 303, 171, 171, -138, -173, -45,
	-45, 249, 249, 90, -76, 62, -94, -36, 302, 188,
	303, 306, -57, -92, 54, -57, -138, 302, -75, 303,
	303, -26, 303, -58, -230, -231, -51, 246, -101, 302,
	-138, -164, 306, 309, 287, -76, 303, -138, -138, 303,
	303, -73, -228, 190, 303, -139, 114, 302, -147, 303,
	-138, -212, -52, 169, -138, -53, 302, -68, 302, 203,
	-44, 54, -51, -51, 262, 170, 303, -51, -51, -128,
	-163, -41, -84, -41, 303, -86, 303, -68, -128, 302,
	306, 30, 5, -76, -136, -196, 303, 303, -73, 43,
	-139, -147, 303, 303, 98, 303, -215, 159, -51, -76,
	-58, -39, 265, -84, 224, -131, 302, -68, -57, -73,
	-128, -68, -75, -231, -233, 303, -235, 198, 214, -86,
	303, 104, -213, -216, -214, 178, 115, 189, 227, 303,
	303, -71, -138, -89, -76, -41, 303, -68, 303, 303,
	-236, -237, 35, 257, 69, -138, -236, -51, -214, 178,
	-216, 178, 262, 87, -215, -131, 303, -128, -237, 193,
	110, 213, 193, 110, -217, 166, 207, 46, 224, -217,
	-213, -46, 46, 207, -68, 26, 20, 171, 84, -237,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 0, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 348, -2, 0, 130, 0, 304,
	0, 304, 304, 308, 0, 376, 272, 373, -2, 384,
	0, 0, 0, 382, 362, 0, 0, -2, 0, 0,
	0, 0, 780, 807, 808, 809, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 83,
	84, 85, 86, 87, 88, 89, 90, 0, 193, 821,
	822, 823, 824, 825, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 96, 103,
	104, 891, 106, 0, 113, 114, 115, 117, 118, 119,
	120, 121, 122, 123, 0, 297, 905, 310, 126, 870,
	909, 976, 923, 133, 143, 0, 982, -2, 147, 77,
	176, 177, 0, 179, 195, 0, 0, 0, 0, 0,
	187, 0, 0, 191, 0, 315, 303, 315, 300, 301,
	302, 305, 0, 296, 0, 375, 0, 0, 0, 0,
	271, -2, 358, 359, -2, 0, 379, 379, 379, 0,
	0, 359, 0, 367, 895, 370, 790, 368, 0, 0,
	381, 380, 0, 363, 443, 0, 404, 0, 2, 0,
	961, 443, 0, 961, 0, 0, 0, 0, 781, 759,
	753, 754, 0, 0, 0, 0, 0, 0, 449, 67,
	961, 51, 961, 776, 51, 961, 75, 51, 961, 0,
	91, 93, 817, 818, 819, 820, 987, 0, 0, 0,
	101, 0, 105, 107, 0, 0, 0, 309, 127, 950,
	129, 0, 132, 134, 135, 0, 0, 0, 0, 0,
	0, 146, 171, 172, 78, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 190, 0, 298,
	311, 312, 299, 0, 307, 51, 447, 247, 961, 247,
	811, 320, 961, -2, 0, 354, 391, 392, 0, 0,
	0, 377, 378, 0, 0, 0, 350, 351, 0, 369,
	0, 0, 407, 768, 772, 773, 536, 0, 0, 0,
	0, 0, 0, 625, 626, 627, 0, 629, 630, 631,
	955, 0, 635, 636, 976, 780, 793, 794, 795, 796,
	0, 0, 0, 801, 802, 803, 752, 676, 645, -2,
	-2, 791, 473, 474, 475, 476, -2, 989, 649, 651,
	653, 654, 655, 656, 0, 939, 956, 957, 972, 973,
	981, 985, 986, 961, 969, 962, 951, 959, 968, 850,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 816, 498, 499, 504, 505, 507, 407, 405, 444,
	445, 0, 0, 765, 763, 764, 28, 293, 30, 0,
	293, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 774, 760, 0, 757, 758, 453, 0,
	326, 0, 0, 450, 0, 0, 69, 0, 49, 50,
	0, 71, 0, 0, 73, 0, 374, 0, 0, 961,
	374, 0, 710, 459, 460, 461, 462, 463, 533, 466,
	467, 468, 469, 470, 471, 472, 480, 481, 482, 483,
	484, 485, 486, 495, 0, 479, 479, 479, 492, 493,
	496, 497, 502, 503, 514, 515, 517, 519, 513, 513,
	513, 510, 511, 0, 708, 0, 110, 0, 845, 778,
	783, 784, 116, 0, 0, 0, 0, 0, 0, 138,
	158, 159, 160, 139, 141, 148, 150, 151, 152, 161,
	162, 163, 164, 264, 0, 266, 174, 175, 804, 0,
	140, 142, 144, 145, 165, 166, 0, 168, 169, 170,
	0, 79, 178, 180, 0, 194, 181, 182, 183, 184,
	185, 186, 189, 192, 0, 0, 306, 267, 0, 205,
	0, 0, 0, 0, 0, 961, 810, 317, 0, 0,
	357, 389, 390, 393, 396, 397, 394, 536, 364, 365,
	366, 385, 386, 282, 371, 0, 0, 787, 453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 771, 541,
	542, 543, 565, 566, 0, -2, 708, 0, 632, 633,
	634, 0, 0, -2, 0, 798, 533, 0, 0, 751,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 501, 512, 509, 508, 490, 0, 489, 487, 0,
	491, 0, 0, 0, 453, 0, 0, 767, 0, 0,
	0, 0, 292, 32, 961, 0, 53, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 782, 0, 0, 0, 0, 755,
	0, 337, 0, 337, 328, 0, 0, 0, 324, 340,
	341, 343, 344, 0, 0, 451, 68, 777, 51, 76,
	51, 51, 82, 92, 0, 94, 97, 98, 99, 100,
	95, 0, 454, 456, 464, 0, 520, 521, 522, 523,
	524, 525, 534, 102, 0, 0, 0, 111, 112, 785,
	786, 0, 0, 131, 136, 137, 316, 0, 155, 0,
	157, 0, 265, 806, 805, 533, 80, 196, 124, 313,
	314, 448, 0, 0, 204, 787, 206, 208, 209, 210,
	211, 811, 0, 811, 0, 0, 0, 0, 0, 0,
	0, 395, 398, 399, 0, 388, 280, 281, 374, 0,
	789, 401, 769, 434, 408, 416, 432, 419, 0, 537,
	538, 539, 0, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, -2, -2, -2, 557, 558, 559, -2,
	-2, -2, 563, 564, -2, 0, 0, 0, 762, 0,
	-2, 0, 573, -2, -2, -2, 577, 0, 580, 582,
	584, 0, 0, 0, 0, 761, 594, 743, 0, 770,
	579, 0, 0, 628, 0, 0, 0, 714, 715, 0,
	-2, 637, 384, 0, 0, 0, 0, 799, 0, 750,
	746, 0, 686, 0, 0, 0, 650, 652, 0, 0,
	0, 0, 718, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 708, 728, 0, 0, 596, 0, 0, 0,
	0, 976, 0, 708, 736, 0, 0, 0, 0, 0,
	708, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 446, 766, 31, 284,
	0, 0, 0, 34, 961, 42, 0, 219, 0, 0,
	0, 0, 0, 295, 43, 961, 51, 961, 51, 44,
	29, 293, 0, 0, 286, 0, 283, 59, 0, 775,
	0, 66, 0, 452, 321, 322, 0, 0, 330, 327,
	0, 453, 0, 0, 0, 0, 70, 72, 74, 0,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 709,
	108, 779, 109, 128, 153, 154, 156, 149, 167, 0,
	213, 246, 0, 0, 811, 0, 202, 247, 268, 0,
	0, 319, 320, 387, 0, 788, 403, 0, 406, 0,
	0, 0, 0, 0, 0, 440, 440, 440, 438, 432,
	0, 418, 431, 0, 430, -2, 419, 0, 0, -2,
	-2, 0, 0, 0, 595, -2, 578, 581, 583, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 709,
	712, 713, 0, -2, 0, 0, 383, 384, 384, 384,
	643, 0, 0, 747, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 659, 0, 660, 661, 0, 0, 662,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 599, 600, 601, 0, 0, 663, 734,
	735, 0, 0, 0, 0, 0, 0, 668, 0, 741,
	0, 0, 0, 672, 673, 674, 0, 477, 0, 494,
	516, 518, 506, 403, 0, 0, 0, 0, 52, 217,
	236, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	40, 0, 46, 0, 0, 0, 0, 0, 0, 60,
	756, 336, 0, 335, 0, 325, 337, 342, 339, 345,
	0, 457, 0, 0, 465, 526, 527, 528, 529, 530,
	531, 532, 0, 125, 200, 0, 207, 0, 0, 0,
	205, 0, 0, 0, 318, 372, 680, 0, 0, 409,
	0, 0, 0, 0, 0, 0, 435, 439, 436, 437,
	417, 414, 0, 428, 0, 421, 540, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 744, 0, 703, 0,
	-2, 716, 638, 0, 0, 0, 0, 800, 745, 749,
	0, 684, 685, 689, 0, 0, 648, 0, 0, 717,
	727, 729, 597, 598, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, -2, -2, -2, 615, 616, 617,
	-2, -2, -2, 0, 0, 0, 730, 0, 0, 706,
	732, 733, 738, 739, 0, 665, 666, 667, 740, 0,
	0, 0, 500, 0, 680, 288, 290, 33, 0, 218,
	0, 221, 0, 0, 0, 0, 227, 228, 0, 0,
	0, 0, 238, 245, 0, 0, 0, 48, 0, 0,
	294, 0, 51, 51, 285, 0, 0, 198, 199, 287,
	323, 0, 0, 0, 329, 338, 0, 458, 455, 535,
	0, 0, 273, 279, 279, 0, 646, 647, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 402, 400, 0,
	422, 0, 424, 0, 0, 0, 426, 0, 412, 0,
	411, 0, 0, 420, 0, 0, -2, 0, 588, -2,
	-2, 702, 709, 797, 384, 639, 641, 642, 748, 691,
	688, 0, 675, 657, 658, 726, 0, 0, 0, 0,
	709, 705, 664, 0, 670, 671, 478, 361, 35, 0,
	222, 223, 811, 0, 226, 229, 0, 231, 813, 213,
	0, 242, 243, 240, 0, 37, 38, 47, 55, 39,
	45, 0, 0, 0, 0, 0, 346, 347, 0, 0,
	245, 0, 282, 792, 0, 282, 0, 0, 0, 235,
	213, 203, 245, 0, 679, 681, 0, 0, 423, 0,
	442, 425, 0, 415, 0, 0, 429, -2, -2, 589,
	704, 0, 384, 0, 677, -2, 0, 0, 0, 707,
	0, 220, 224, 0, 0, 251, 0, 239, 0, 0,
	57, 0, 289, 291, 0, 332, 453, 334, 0, 213,
	274, 275, 278, 276, 279, 384, 245, 201, 213, 0,
	0, 0, 433, 0, 413, 410, 427, 640, 694, 0,
	-2, 0, 623, 669, 0, 230, 256, 0, 0, 0,
	247, 41, 0, 54, 0, 333, 0, 233, 282, 0,
	213, 269, 0, 682, 683, 441, 0, 0, 0, 690,
	624, 0, 232, 252, 253, 0, 248, 249, 250, 812,
	244, 251, 56, 453, 0, 277, 638, 234, 245, 687,
	692, 695, -2, 926, 842, 0, 693, 225, 254, 0,
	255, 0, 0, 0, 256, 331, 216, 213, 0, 697,
	698, 699, 700, 701, 257, 0, 260, 261, 0, 258,
	241, 212, 214, 215, 270, 0, 259, 262, 263, 696,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 291, 3, 297, 292, 3,
	302, 303, 295, 293, 306, 294, 304, 296, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 310, 305,
	285, 287, 286, 3, 307, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 300, 3, 301, 290, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 308, 289, 309, 299,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 288, 57628, 298, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:735
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:741
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:851
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			unimplementedWithIssue(2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			unimplemented()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{ /* SKIP DOC */
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			unimplemented()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			unimplemented()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = Low
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = Normal
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = High
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			unimplemented()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1435
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = DropDefault
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1842
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1846
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1950
		{
			unimplemented()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			unimplemented()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1954
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = Ascending
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = Descending
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = true
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = false
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.str = ""
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.str = ""
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2158
		{
			unimplementedWithIssue(6637)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2165
		{
			unimplementedWithIssue(6637)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2207
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			unimplementedWithIssue(7841)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2237
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2473
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = true
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = false
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = false
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = true
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &From{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.str = astFullJoin
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astLeftJoin
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.str = astRightJoin
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.str = astInnerJoin
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			unimplementedWithIssue(2115)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			unimplementedWithIssue(2115)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			unimplementedWithIssue(2115)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			unimplementedWithIssue(2115)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3010
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = nil
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3131
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3203
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3251
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3283
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3694
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3695
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3787
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3832
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3836
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = Window(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.str = ""
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3924
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3925
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			unimplemented()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			unimplemented()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4276
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4432
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4468
		{
			unimplemented()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = DNull
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.str = ""
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
