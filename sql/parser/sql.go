// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VARYING = 57612
const WHEN = 57613
const WHERE = 57614
const WINDOW = 57615
const WITH = 57616
const WITHIN = 57617
const WITHOUT = 57618
const YEAR = 57619
const ZONE = 57620
const NOT_LA = 57621
const WITH_LA = 57622
const AS_LA = 57623
const POSTFIXOP = 57624
const UMINUS = 57625

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4720

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	302, 26,
	-2, 363,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	1, 338,
	176, 338,
	206, 338,
	300, 338,
	302, 338,
	-2, 348,
	-1, 55,
	1, 341,
	176, 341,
	206, 341,
	300, 341,
	302, 341,
	-2, 347,
	-1, 64,
	1, 26,
	302, 26,
	-2, 363,
	-1, 281,
	1, 167,
	302, 167,
	-2, 861,
	-1, 314,
	151, 373,
	175, 373,
	-2, 344,
	-1, 317,
	151, 372,
	175, 372,
	-2, 342,
	-1, 447,
	151, 372,
	175, 372,
	-2, 345,
	-1, 503,
	299, 800,
	-2, 793,
	-1, 504,
	299, 801,
	-2, 794,
	-1, 510,
	5, 508,
	299, 508,
	-2, 951,
	-1, 533,
	5, 474,
	-2, 926,
	-1, 534,
	5, 502,
	299, 502,
	-2, 928,
	-1, 535,
	5, 482,
	-2, 929,
	-1, 536,
	5, 481,
	-2, 930,
	-1, 537,
	5, 502,
	299, 502,
	-2, 933,
	-1, 538,
	5, 502,
	299, 502,
	-2, 934,
	-1, 539,
	5, 503,
	-2, 937,
	-1, 540,
	5, 468,
	-2, 938,
	-1, 541,
	5, 468,
	-2, 939,
	-1, 542,
	5, 484,
	-2, 942,
	-1, 543,
	5, 469,
	-2, 947,
	-1, 544,
	5, 470,
	-2, 948,
	-1, 545,
	5, 471,
	-2, 949,
	-1, 546,
	5, 472,
	-2, 950,
	-1, 547,
	5, 468,
	-2, 954,
	-1, 548,
	5, 475,
	-2, 959,
	-1, 549,
	5, 473,
	-2, 962,
	-1, 550,
	5, 500,
	299, 500,
	-2, 964,
	-1, 551,
	5, 504,
	-2, 967,
	-1, 552,
	5, 506,
	-2, 968,
	-1, 553,
	5, 499,
	299, 499,
	-2, 972,
	-1, 878,
	97, 348,
	137, 348,
	151, 348,
	175, 348,
	179, 348,
	257, 348,
	-2, 620,
	-1, 886,
	299, 778,
	-2, 767,
	-1, 1081,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 543,
	-1, 1082,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 544,
	-1, 1083,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 545,
	-1, 1087,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 549,
	-1, 1088,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 550,
	-1, 1089,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 551,
	-1, 1092,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 556,
	-1, 1098,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 558,
	-1, 1101,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 563,
	-1, 1102,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 564,
	-1, 1103,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 565,
	-1, 1128,
	184, 691,
	-2, 694,
	-1, 1294,
	97, 348,
	137, 348,
	151, 348,
	175, 348,
	179, 348,
	257, 348,
	-2, 421,
	-1, 1298,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 557,
	-1, 1299,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 559,
	-1, 1304,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 560,
	-1, 1322,
	184, 690,
	-2, 693,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 561,
	-1, 1489,
	140, 0,
	-2, 575,
	-1, 1497,
	184, 692,
	-2, 695,
	-1, 1531,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 601,
	-1, 1532,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 602,
	-1, 1533,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 603,
	-1, 1537,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 607,
	-1, 1538,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 608,
	-1, 1539,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 609,
	-1, 1643,
	140, 0,
	-2, 576,
	-1, 1646,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 579,
	-1, 1647,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 581,
	-1, 1733,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 580,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 582,
	-1, 1741,
	140, 0,
	-2, 610,
	-1, 1786,
	140, 0,
	-2, 611,
	-1, 1839,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 925,
}

const sqlNprod = 1066
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24373

var sqlAct = [...]int{

	504, 1838, 683, 1818, 1792, 1451, 1686, 1862, 1820, 963,
	1819, 1837, 971, 1508, 1709, 1721, 1635, 352, 318, 1053,
	589, 1609, 1629, 1622, 282, 807, 1608, 41, 71, 502,
	501, 696, 494, 1568, 829, 1036, 71, 71, 71, 881,
	1291, 71, 1033, 1224, 71, 1463, 1325, 1290, 1377, 339,
	466, 1378, 71, 1473, 883, 810, 18, 1281, 1035, 71,
	71, 566, 569, 71, 1002, 1061, 71, 71, 71, 941,
	932, 972, 1275, 1174, 1114, 1138, 1111, 325, 54, 25,
	986, 1065, 825, 72, 995, 323, 1062, 760, 1028, 554,
	571, 243, 744, 697, 435, 14, 1063, 7, 476, 353,
	354, 741, 467, 317, 585, 436, 771, 917, 371, 351,
	9, 8, 54, 913, 248, 6, 4, 241, 450, 367,
	831, 965, 1039, 364, 328, 55, 449, 366, 451, 269,
	247, 56, 249, 279, 762, 758, 260, 360, 676, 740,
	326, 477, 54, 454, 1728, 250, 245, 1729, 964, 685,
	244, 246, 1869, 685, 999, 1057, 322, 322, 1854, 336,
	685, 1057, 342, 1835, 1826, 1816, 1708, 1057, 992, 68,
	1811, 1788, 1782, 1057, 992, 1057, 1236, 1289, 1320, 1235,
	315, 307, 1772, 1321, 1762, 1708, 314, 1057, 1735, 834,
	835, 992, 1319, 1732, 345, 1000, 1057, 1005, 1718, 1716,
	330, 1708, 1057, 1707, 337, 833, 1708, 344, 347, 581,
	1691, 1690, 837, 1057, 1057, 1668, 1648, 1645, 1005, 1005,
	992, 1595, 60, 1594, 1005, 1580, 1005, 1493, 1057, 1005,
	1005, 1001, 998, 836, 1437, 1776, 1279, 960, 71, 71,
	71, 71, 832, 374, 1431, 62, 1395, 960, 1393, 1396,
	1392, 1005, 1391, 1005, 1322, 1005, 71, 1005, 1278, 968,
	1278, 1058, 1711, 496, 1057, 369, 1014, 251, 1544, 1005,
	323, 71, 63, 1004, 71, 71, 1005, 1496, 1261, 58,
	1324, 1005, 930, 991, 1263, 59, 992, 842, 959, 1003,
	929, 960, 691, 928, 1057, 692, 1007, 1122, 355, 1052,
	1022, 461, 356, 462, 57, 800, 799, 71, 686, 71,
	53, 71, 686, 71, 1348, 1349, 752, 751, 400, 686,
	335, 355, 64, 434, 356, 356, 375, 785, 71, 420,
	1836, 1833, 376, 448, 361, 442, 33, 1348, 1349, 71,
	1366, 1367, 1368, 1825, 34, 1783, 1717, 1673, 1669, 372,
	997, 71, 1661, 1642, 834, 835, 1660, 592, 71, 71,
	71, 447, 71, 1600, 1659, 1654, 1235, 1653, 1652, 587,
	688, 408, 996, 1458, 1606, 1559, 1554, 837, 1553, 337,
	1552, 347, 409, 560, 1499, 561, 1482, 1363, 1462, 1441,
	1400, 1397, 60, 71, 1385, 832, 1376, 1347, 836, 1344,
	71, 1342, 71, 1119, 1330, 441, 689, 1265, 1329, 1262,
	684, 1191, 1354, 374, 374, 62, 1145, 803, 1348, 1349,
	1177, 592, 71, 1144, 71, 71, 71, 71, 71, 71,
	71, 461, 889, 460, 71, 1354, 439, 349, 1828, 71,
	593, 786, 63, 802, 805, 71, 594, 1510, 1802, 58,
	337, 315, 842, 1775, 361, 59, 60, 314, 1348, 1349,
	1364, 60, 1754, 71, 457, 458, 71, 1369, 463, 838,
	839, 840, 841, 843, 967, 863, 1752, 1743, 1605, 62,
	563, 1725, 1714, 1364, 62, 1705, 1599, 1683, 1666, 693,
	1638, 1120, 586, 1616, 1488, 675, 375, 375, 678, 337,
	677, 677, 376, 376, 593, 355, 63, 1439, 323, 356,
	594, 63, 1481, 1459, 1456, 1454, 1354, 1365, 58, 1411,
	1410, 1375, 1338, 1337, 59, 1316, 556, 1312, 1116, 886,
	834, 835, 1250, 1216, 337, 1215, 1203, 747, 57, 1202,
	1365, 748, 1184, 57, 1143, 1056, 918, 921, 925, 775,
	782, 911, 910, 837, 909, 787, 1354, 908, 791, 792,
	793, 794, 795, 790, 907, 71, 906, 798, 801, 905,
	815, 1348, 1349, 71, 836, 813, 904, 71, 1203, 814,
	315, 71, 71, 315, 315, 903, 821, 827, 902, 822,
	823, 1356, 1357, 1358, 1350, 1351, 1352, 1353, 1355, 834,
	835, 901, 900, 1604, 1364, 1348, 1349, 899, 935, 1360,
	1361, 1362, 898, 1359, 1356, 1357, 1358, 1350, 1351, 1352,
	1353, 1355, 897, 350, 896, 437, 562, 555, 887, 885,
	57, 340, 465, 834, 835, 470, 840, 841, 843, 406,
	863, 396, 1457, 836, 946, 948, 394, 884, 1244, 919,
	1243, 915, 916, 1730, 577, 922, 837, 1603, 703, 1237,
	414, 1365, 1047, 1399, 923, 1398, 834, 835, 924, 1354,
	1150, 1297, 430, 951, 415, 894, 1623, 836, 999, 781,
	71, 926, 71, 71, 964, 71, 1333, 1511, 71, 272,
	71, 71, 1139, 374, 1798, 938, 914, 1231, 1350, 1351,
	1352, 1353, 1355, 1354, 234, 1849, 927, 1588, 955, 572,
	321, 573, 1013, 804, 981, 369, 562, 1364, 337, 1000,
	1348, 1349, 347, 1366, 1367, 1368, 890, 1761, 1257, 509,
	306, 842, 305, 966, 300, 966, 1641, 1358, 1350, 1351,
	1352, 1353, 1355, 71, 71, 1850, 312, 1153, 243, 235,
	320, 301, 987, 934, 1699, 1001, 998, 1698, 1425, 1422,
	942, 572, 572, 573, 573, 1403, 1402, 1723, 1300, 54,
	1363, 248, 1249, 54, 1365, 989, 375, 1248, 1009, 852,
	574, 1247, 376, 1246, 1099, 1006, 592, 247, 1154, 249,
	71, 988, 322, 990, 412, 957, 954, 1160, 1438, 372,
	970, 984, 250, 245, 71, 71, 1027, 244, 246, 983,
	982, 980, 979, 1003, 438, 1188, 863, 738, 1354, 1760,
	945, 975, 1187, 1070, 1155, 1152, 347, 750, 919, 347,
	922, 413, 574, 574, 71, 1626, 853, 71, 433, 392,
	309, 1059, 1113, 1426, 1008, 1010, 1011, 1016, 916, 915,
	1369, 1350, 1351, 1352, 1353, 1355, 238, 1015, 1113, 934,
	1688, 1069, 1043, 1220, 1139, 933, 1364, 583, 1800, 593,
	319, 592, 67, 679, 997, 594, 1003, 237, 236, 685,
	834, 835, 1156, 1050, 1051, 863, 1859, 1352, 1353, 1355,
	1214, 1117, 1225, 1429, 1413, 1031, 1233, 1229, 1218, 587,
	1032, 880, 944, 837, 587, 1030, 239, 1309, 310, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 1849, 863,
	1307, 726, 66, 1365, 836, 1256, 313, 1225, 1067, 1068,
	558, 579, 71, 71, 71, 1060, 1190, 1096, 71, 1126,
	1018, 71, 570, 1151, 1420, 337, 1020, 71, 71, 71,
	71, 71, 863, 575, 593, 71, 1813, 1446, 71, 578,
	594, 71, 1021, 403, 405, 582, 943, 1822, 71, 1755,
	71, 1019, 1814, 1198, 1135, 337, 1118, 71, 842, 1258,
	411, 1443, 251, 1239, 912, 1240, 71, 1305, 410, 1858,
	1192, 1310, 1360, 1361, 1362, 323, 1359, 1356, 1357, 1358,
	1350, 1351, 1352, 1353, 1355, 575, 575, 71, 71, 1227,
	1280, 1739, 1865, 71, 1213, 1003, 1706, 1444, 240, 877,
	1336, 1193, 725, 374, 1414, 53, 852, 1094, 1097, 452,
	431, 1689, 1474, 1200, 65, 322, 1821, 1848, 686, 1846,
	1823, 71, 411, 71, 1621, 71, 71, 1045, 1302, 71,
	931, 33, 1093, 453, 1749, 423, 453, 1284, 71, 34,
	401, 399, 1693, 1467, 1112, 71, 1264, 71, 1266, 1267,
	1306, 1857, 1230, 1194, 1287, 1003, 557, 1308, 1824, 489,
	1875, 1238, 1241, 853, 432, 1282, 1242, 1692, 1681, 820,
	1109, 1285, 1584, 1664, 323, 1252, 1405, 1197, 703, 703,
	1253, 1254, 1222, 1107, 1046, 1283, 375, 69, 1255, 586,
	1259, 1260, 376, 987, 1540, 252, 253, 254, 586, 1631,
	271, 812, 806, 283, 702, 1587, 1095, 337, 1442, 261,
	1863, 271, 1586, 1793, 54, 1272, 989, 1273, 329, 329,
	1636, 452, 69, 797, 323, 69, 69, 348, 1295, 1323,
	266, 1286, 988, 1296, 990, 262, 757, 844, 845, 846,
	838, 839, 840, 841, 843, 1874, 863, 753, 1105, 1682,
	1104, 1864, 1303, 1301, 1110, 1583, 60, 1665, 263, 1205,
	1204, 780, 779, 1284, 773, 768, 1632, 1268, 1866, 1469,
	755, 1468, 1541, 323, 1637, 265, 410, 359, 1542, 62,
	1287, 756, 320, 703, 71, 358, 1630, 444, 337, 1452,
	1607, 1472, 1417, 1332, 1419, 1585, 1464, 1285, 1276, 1142,
	1679, 1742, 1663, 1379, 1487, 1343, 63, 1311, 1221, 1012,
	1380, 958, 429, 58, 428, 427, 71, 71, 1409, 59,
	1680, 426, 1576, 425, 1433, 1382, 1383, 1384, 424, 421,
	834, 835, 357, 1106, 895, 789, 703, 1141, 242, 1817,
	1108, 783, 71, 1401, 71, 1790, 71, 1565, 1418, 1416,
	71, 1407, 1404, 837, 1577, 811, 1428, 1286, 1269, 71,
	264, 1048, 1044, 71, 1432, 1421, 985, 690, 1505, 71,
	592, 1455, 687, 71, 836, 71, 682, 580, 576, 1436,
	851, 1700, 1435, 455, 1213, 1123, 1127, 1434, 1130, 1054,
	1478, 1850, 1445, 1447, 1448, 732, 333, 69, 362, 69,
	283, 417, 1453, 267, 1169, 728, 777, 1461, 3, 784,
	1181, 1182, 1183, 1280, 1702, 397, 1477, 71, 950, 1475,
	1476, 1471, 1711, 934, 1490, 1501, 1502, 1503, 842, 949,
	402, 1430, 934, 283, 283, 1757, 1785, 1572, 947, 1573,
	299, 726, 726, 1465, 459, 1466, 1055, 953, 952, 1470,
	456, 1777, 969, 593, 828, 257, 1498, 975, 337, 594,
	1284, 749, 695, 334, 1575, 1512, 271, 994, 69, 506,
	283, 1578, 445, 341, 1517, 1872, 852, 1287, 1873, 1560,
	418, 1348, 1349, 71, 71, 71, 1449, 329, 1282, 302,
	303, 71, 71, 1440, 1285, 268, 1394, 71, 69, 71,
	337, 71, 71, 71, 337, 1245, 71, 1548, 1283, 1547,
	69, 834, 835, 1189, 1514, 1515, 1186, 69, 69, 69,
	1564, 680, 1519, 1520, 1185, 1581, 1582, 1561, 1574, 1024,
	1023, 1136, 1025, 853, 1778, 1650, 1504, 71, 71, 1270,
	1026, 888, 725, 725, 308, 1687, 726, 774, 769, 71,
	71, 727, 69, 71, 1286, 1551, 259, 1602, 788, 745,
	1597, 745, 71, 71, 1614, 1613, 1620, 1615, 1601, 1614,
	1613, 1617, 1615, 422, 1656, 1812, 1335, 1738, 1720, 1140,
	1618, 283, 893, 745, 283, 283, 283, 283, 283, 796,
	32, 71, 1611, 283, 482, 1619, 1639, 1566, 271, 726,
	1644, 1406, 1038, 1640, 809, 1037, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 595, 863, 1315, 1161, 778,
	767, 1317, 329, 505, 761, 830, 770, 1149, 559, 507,
	700, 508, 701, 1327, 1328, 1627, 1628, 920, 495, 1633,
	698, 370, 1591, 1277, 702, 702, 71, 725, 71, 1662,
	71, 71, 973, 1137, 1331, 891, 703, 481, 487, 71,
	486, 1124, 393, 478, 1634, 1674, 1374, 1288, 44, 407,
	277, 278, 1696, 1697, 1677, 1228, 1598, 1387, 258, 1049,
	71, 1675, 816, 1415, 703, 703, 311, 1345, 395, 1167,
	337, 337, 703, 703, 337, 1159, 1157, 1148, 440, 565,
	725, 974, 71, 419, 71, 1234, 1712, 993, 464, 824,
	1827, 332, 331, 71, 1701, 1034, 1423, 1424, 416, 71,
	754, 1017, 261, 1715, 69, 703, 1614, 1613, 304, 1615,
	1710, 1724, 939, 1703, 1751, 1756, 69, 1412, 1797, 61,
	69, 956, 24, 266, 22, 21, 20, 19, 262, 702,
	1737, 17, 16, 1731, 15, 23, 13, 12, 11, 10,
	71, 31, 1695, 30, 29, 28, 5, 2, 1, 0,
	0, 263, 1753, 0, 0, 0, 0, 0, 1744, 71,
	71, 0, 0, 71, 0, 1748, 0, 71, 265, 0,
	1747, 0, 71, 0, 1765, 0, 0, 0, 0, 1727,
	1685, 0, 702, 1773, 0, 1774, 71, 739, 587, 1767,
	1766, 592, 1769, 323, 0, 0, 1768, 1494, 1614, 1613,
	0, 1615, 0, 0, 0, 1780, 0, 1161, 1161, 0,
	0, 1781, 703, 71, 0, 71, 71, 1784, 71, 69,
	1779, 977, 978, 1719, 69, 728, 728, 69, 0, 283,
	283, 1803, 1801, 0, 337, 1787, 0, 71, 0, 1806,
	1807, 0, 1799, 0, 699, 1804, 0, 0, 0, 1795,
	1805, 1810, 1809, 264, 0, 0, 1545, 0, 1161, 1161,
	1161, 71, 1808, 71, 0, 1614, 1613, 1555, 1615, 0,
	0, 0, 1834, 1830, 593, 0, 0, 0, 71, 0,
	594, 0, 745, 830, 1832, 0, 1843, 0, 1845, 71,
	0, 1847, 1851, 0, 0, 0, 267, 1831, 0, 726,
	1853, 1856, 1855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 1868, 0, 1870, 1867, 834,
	835, 1871, 0, 1852, 0, 0, 0, 726, 726, 1029,
	728, 0, 0, 0, 1876, 726, 726, 0, 0, 0,
	0, 0, 837, 69, 939, 0, 1625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1796, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 726, 1313,
	1314, 727, 727, 69, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 1161, 1161, 0,
	725, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	1371, 1372, 1373, 0, 0, 0, 0, 0, 725, 725,
	0, 0, 0, 0, 0, 0, 725, 725, 0, 0,
	0, 0, 0, 1348, 1349, 0, 1161, 1161, 1161, 1161,
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
	1161, 1161, 1161, 1161, 1161, 852, 1161, 703, 0, 725,
	0, 69, 1195, 1196, 0, 726, 727, 939, 0, 0,
	1201, 0, 0, 834, 835, 0, 1206, 1207, 1209, 1211,
	1212, 0, 0, 1363, 1217, 0, 0, 1219, 0, 0,
	69, 0, 702, 0, 0, 0, 837, 69, 0, 1232,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 468,
	468, 0, 853, 0, 0, 69, 0, 836, 567, 727,
	702, 702, 0, 0, 0, 0, 0, 0, 702, 702,
	1576, 1354, 1569, 588, 0, 0, 1029, 745, 0, 0,
	1567, 0, 1029, 0, 1571, 0, 0, 0, 0, 1485,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 1577, 0, 0, 726, 725, 0, 0, 0,
	809, 842, 809, 0, 283, 69, 0, 0, 1271, 1364,
	0, 1570, 0, 0, 0, 1771, 0, 1274, 846, 838,
	839, 840, 841, 843, 1293, 863, 69, 0, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 0, 1543, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 819, 0, 0, 0, 0, 1365, 826, 0, 0,
	0, 0, 0, 726, 0, 1572, 0, 1573, 0, 872,
	873, 874, 875, 876, 0, 0, 1815, 0, 879, 0,
	0, 0, 0, 1161, 0, 0, 725, 0, 702, 0,
	0, 0, 1575, 0, 699, 699, 853, 0, 892, 1578,
	0, 0, 0, 0, 1348, 1349, 0, 1366, 1367, 1368,
	0, 0, 0, 728, 0, 0, 0, 0, 1348, 1349,
	1492, 1366, 1367, 1368, 0, 0, 0, 0, 0, 1359,
	1356, 1357, 1358, 1350, 1351, 1352, 1353, 1355, 0, 0,
	726, 728, 728, 0, 0, 0, 0, 0, 0, 728,
	728, 0, 0, 830, 1363, 0, 1574, 0, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 1363, 1161,
	0, 0, 0, 838, 839, 840, 841, 843, 0, 863,
	0, 0, 728, 0, 0, 69, 69, 0, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 0, 1354, 0, 0, 1348, 1349, 0, 1366, 1367,
	1368, 1450, 0, 939, 0, 809, 1354, 0, 0, 1460,
	0, 1491, 0, 0, 0, 483, 42, 0, 69, 0,
	0, 0, 69, 0, 1369, 0, 0, 0, 1293, 0,
	0, 725, 1480, 0, 1293, 1684, 0, 0, 1161, 0,
	1364, 0, 699, 0, 0, 1363, 0, 0, 0, 727,
	42, 0, 0, 0, 1364, 0, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 324, 0, 0, 1509, 727, 727, 728,
	42, 0, 0, 0, 0, 727, 727, 0, 0, 0,
	0, 0, 0, 1354, 0, 0, 0, 1365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1365, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 1741, 0, 0, 0, 1369, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 0, 0, 0,
	0, 1364, 1562, 1563, 939, 0, 0, 0, 0, 0,
	830, 830, 0, 0, 0, 0, 1589, 0, 1590, 0,
	69, 1592, 1593, 0, 0, 1596, 1360, 1361, 1362, 0,
	1359, 1356, 1357, 1358, 1350, 1351, 1352, 1353, 1355, 728,
	1360, 1361, 1362, 0, 1359, 1356, 1357, 1358, 1350, 1351,
	1352, 1353, 1355, 0, 1610, 0, 830, 939, 1365, 1610,
	1786, 0, 0, 0, 0, 0, 0, 0, 69, 69,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	468, 830, 1293, 0, 0, 727, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 0, 1098,
	1657, 1100, 1101, 1102, 1103, 0, 0, 728, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 1361, 1362,
	0, 1359, 1356, 1357, 1358, 1350, 1351, 1352, 1353, 1355,
	0, 0, 0, 0, 0, 0, 1146, 1147, 0, 1158,
	0, 1168, 1170, 1175, 1178, 1179, 1180, 0, 1348, 1349,
	0, 1366, 1367, 1368, 0, 939, 0, 1676, 0, 283,
	1678, 0, 0, 0, 0, 0, 567, 0, 69, 0,
	834, 835, 0, 0, 0, 727, 864, 865, 866, 0,
	0, 0, 0, 0, 728, 0, 0, 0, 0, 830,
	0, 316, 0, 837, 0, 868, 0, 0, 1363, 0,
	1223, 0, 1226, 0, 0, 0, 1610, 0, 0, 0,
	0, 69, 699, 1722, 836, 0, 0, 0, 0, 0,
	851, 0, 69, 0, 0, 0, 0, 0, 830, 0,
	1348, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 699, 0, 1251, 0, 0, 1354, 0, 699, 699,
	0, 0, 0, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1370, 0, 0, 0, 842, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 1369, 0,
	0, 699, 0, 0, 0, 861, 869, 0, 1758, 1759,
	826, 0, 1763, 0, 1364, 0, 1764, 0, 1610, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 830, 852, 0, 0, 0,
	316, 0, 0, 316, 316, 0, 0, 0, 1354, 0,
	727, 1298, 1299, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 1794, 0, 830, 69, 878, 283, 0, 0,
	882, 1365, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 1610, 1722, 0, 0, 1326,
	0, 0, 0, 853, 0, 0, 1364, 1334, 0, 0,
	0, 1339, 0, 0, 862, 0, 0, 0, 699, 0,
	69, 0, 830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 0, 1844, 0, 1175,
	1175, 1175, 0, 0, 0, 0, 0, 0, 830, 0,
	1360, 1361, 1362, 0, 1359, 1356, 1357, 1358, 1350, 1351,
	1352, 1353, 1355, 1365, 0, 0, 0, 0, 0, 860,
	1408, 0, 0, 0, 0, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 0, 0, 0,
	0, 0, 0, 468, 0, 0, 0, 0, 0, 0,
	0, 468, 0, 0, 0, 567, 0, 0, 0, 834,
	835, 284, 854, 855, 856, 864, 865, 866, 699, 0,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 297,
	0, 0, 837, 0, 868, 0, 1359, 1356, 1357, 1358,
	1350, 1351, 1352, 1353, 1355, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 286, 1483, 0, 0, 1484, 291,
	292, 0, 42, 298, 42, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 285, 287, 42, 0, 0,
	0, 42, 1251, 0, 0, 0, 699, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 1516, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 861, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 1549, 1550, 859,
	0, 293, 0, 0, 0, 852, 1556, 1557, 1558, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 468, 0, 0,
	0, 42, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 853, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 862, 0, 837, 0, 868, 0, 1064,
	0, 0, 1624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 294, 0,
	0, 295, 851, 0, 0, 1643, 296, 0, 0, 1646,
	1647, 0, 0, 0, 1649, 1115, 0, 0, 1651, 0,
	0, 0, 0, 0, 0, 1655, 0, 0, 860, 1658,
	0, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 0, 961, 0, 0,
	842, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 1667, 0, 0, 0, 0, 861, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 1694, 0, 0, 0, 0, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1713, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1349, 0, 1366, 1367, 1368, 0, 0, 0, 0, 1726,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 1733,
	1734, 0, 0, 0, 0, 0, 862, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 1746, 1363,
	837, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 1750, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 1294, 0, 0, 0, 0, 851, 0, 0,
	0, 860, 0, 567, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 1354, 863, 0,
	0, 0, 0, 1115, 0, 1670, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 842, 0, 0, 0, 1369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 869, 0, 1364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 878, 0, 852, 0, 0, 1829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1842, 1842, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 1365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 1064, 0, 0, 0, 0, 0, 0, 0,
	1842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1360, 1361, 1362, 0, 1359, 1356, 1357, 1358, 1350,
	1351, 1352, 1353, 1355, 1064, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 0, 0, 0, 0, 0,
	1390, 0, 0, 0, 0, 0, 0, 0, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 0,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 1841, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 42, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 0,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 42, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 1064, 1064, 116, 0, 1064, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 0, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 1840,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 0, 1704,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	473, 0, 0, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 596, 75, 597, 598, 599, 600, 185,
	601, 602, 603, 604, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 605, 79, 192, 193, 80, 606, 607,
	194, 195, 196, 608, 197, 609, 378, 610, 81, 82,
	83, 878, 84, 611, 85, 86, 87, 612, 379, 88,
	89, 613, 614, 615, 616, 617, 618, 90, 91, 92,
	93, 198, 94, 199, 200, 619, 95, 620, 96, 621,
	622, 623, 97, 98, 624, 99, 625, 0, 626, 201,
	100, 101, 202, 627, 628, 629, 102, 103, 203, 0,
	104, 630, 105, 631, 632, 380, 633, 106, 204, 634,
	205, 635, 107, 108, 206, 207, 382, 636, 111, 637,
	109, 638, 381, 110, 208, 209, 210, 211, 639, 212,
	640, 383, 112, 384, 113, 114, 641, 642, 213, 385,
	115, 386, 643, 116, 644, 645, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 646, 126,
	647, 214, 128, 215, 129, 130, 648, 649, 650, 651,
	652, 131, 216, 388, 132, 389, 217, 133, 134, 135,
	653, 218, 136, 219, 137, 654, 138, 139, 140, 220,
	141, 142, 655, 144, 145, 143, 146, 656, 147, 390,
	148, 149, 221, 150, 0, 151, 152, 153, 657, 222,
	154, 155, 658, 156, 157, 391, 158, 223, 224, 159,
	659, 165, 160, 161, 162, 164, 225, 163, 226, 660,
	166, 661, 167, 168, 662, 227, 228, 229, 663, 664,
	169, 230, 231, 665, 170, 171, 172, 173, 666, 667,
	174, 175, 176, 668, 669, 177, 178, 179, 232, 233,
	670, 180, 671, 672, 673, 674, 181, 182, 183, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 73, 74, 596,
	75, 597, 598, 599, 600, 185, 601, 602, 603, 604,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 605,
	79, 192, 193, 80, 606, 607, 194, 195, 196, 608,
	197, 609, 378, 610, 81, 82, 83, 0, 84, 611,
	85, 86, 87, 612, 379, 88, 89, 613, 614, 615,
	616, 617, 618, 90, 91, 92, 93, 198, 94, 199,
	200, 619, 95, 620, 96, 621, 622, 623, 97, 98,
	624, 99, 625, 0, 626, 201, 100, 101, 202, 627,
	628, 629, 102, 103, 203, 0, 104, 630, 105, 631,
	632, 380, 633, 106, 204, 634, 205, 635, 107, 108,
	206, 207, 382, 636, 111, 637, 109, 638, 381, 110,
	208, 209, 210, 211, 639, 212, 640, 383, 112, 384,
	113, 114, 641, 642, 213, 385, 115, 386, 643, 116,
	644, 645, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 646, 126, 647, 214, 128, 215,
	129, 130, 648, 649, 650, 651, 652, 131, 216, 388,
	132, 389, 217, 133, 134, 135, 653, 218, 136, 219,
	137, 654, 138, 139, 140, 220, 141, 142, 655, 144,
	145, 143, 146, 656, 147, 390, 148, 149, 221, 150,
	0, 151, 152, 153, 657, 222, 154, 155, 658, 156,
	157, 391, 158, 223, 224, 159, 659, 165, 160, 161,
	162, 164, 225, 163, 226, 660, 166, 661, 167, 168,
	662, 227, 228, 229, 663, 664, 169, 230, 231, 665,
	170, 171, 172, 173, 666, 667, 174, 175, 176, 668,
	669, 177, 178, 179, 232, 233, 670, 180, 671, 672,
	673, 674, 181, 182, 183, 184, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 73, 74, 596, 75, 597, 598, 599, 600,
	185, 601, 602, 603, 604, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 605, 79, 192, 193, 80, 606,
	607, 194, 195, 196, 608, 197, 609, 378, 610, 81,
	82, 83, 0, 84, 611, 85, 86, 87, 612, 379,
	88, 89, 613, 614, 615, 616, 617, 618, 90, 91,
	92, 93, 198, 94, 199, 200, 619, 95, 620, 96,
	621, 622, 623, 97, 98, 624, 99, 625, 0, 626,
	201, 100, 101, 202, 627, 628, 629, 102, 103, 203,
	0, 104, 630, 105, 631, 632, 380, 633, 106, 204,
	634, 205, 635, 107, 108, 206, 207, 382, 636, 111,
	637, 109, 638, 381, 110, 208, 209, 210, 211, 639,
	212, 640, 383, 112, 384, 113, 114, 641, 642, 213,
	385, 115, 386, 643, 116, 644, 645, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 646,
	126, 647, 214, 128, 215, 129, 130, 648, 649, 650,
	651, 652, 131, 216, 388, 132, 389, 217, 133, 134,
	135, 653, 218, 136, 219, 137, 654, 138, 139, 140,
	220, 141, 142, 655, 144, 145, 143, 146, 656, 147,
	390, 148, 149, 221, 150, 0, 151, 152, 153, 657,
	222, 154, 155, 658, 156, 157, 391, 158, 223, 224,
	159, 659, 165, 160, 161, 162, 164, 225, 163, 226,
	660, 166, 661, 167, 168, 662, 227, 228, 229, 663,
	664, 169, 230, 231, 665, 170, 171, 172, 173, 666,
	667, 174, 175, 176, 668, 669, 177, 178, 179, 232,
	233, 670, 180, 671, 672, 673, 674, 181, 182, 183,
	184, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 1132,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 1133, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 1131, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 472, 1134,
	0, 0, 0, 473, 0, 0, 480, 1129, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 568, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 60, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 62, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 377, 553, 0, 180, 0, 0, 0, 58, 181,
	182, 183, 184, 475, 59, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	473, 73, 74, 480, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 60, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 62, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 377, 553,
	0, 180, 0, 0, 0, 58, 181, 182, 183, 184,
	475, 59, 503, 492, 493, 490, 491, 479, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 473, 73, 74,
	480, 75, 0, 0, 0, 0, 519, 485, 0, 0,
	0, 76, 77, 186, 533, 188, 534, 78, 535, 536,
	1171, 79, 192, 193, 80, 500, 518, 537, 538, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 89, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 539, 94,
	540, 541, 0, 95, 0, 96, 0, 0, 0, 532,
	98, 0, 99, 0, 0, 0, 484, 100, 101, 520,
	498, 0, 0, 102, 103, 542, 0, 104, 0, 105,
	0, 1176, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 543, 544, 545, 546, 0, 510, 0, 383, 112,
	384, 113, 114, 0, 1172, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 474, 126, 499, 527, 128,
	547, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 548, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 488,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 516,
	156, 157, 391, 158, 549, 224, 159, 0, 165, 160,
	161, 162, 164, 550, 163, 523, 0, 166, 0, 167,
	168, 0, 227, 551, 552, 0, 1173, 169, 524, 525,
	497, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 232, 553, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 475, 0, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 473, 73, 74, 480, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 473, 0, 0, 480, 1546, 503, 492, 493, 490,
	491, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	519, 485, 0, 0, 0, 76, 77, 186, 533, 188,
	534, 78, 535, 536, 0, 79, 192, 193, 80, 500,
	518, 537, 538, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 539, 94, 540, 541, 0, 95, 0, 96,
	0, 0, 0, 532, 98, 0, 99, 0, 0, 0,
	484, 100, 101, 520, 498, 0, 0, 102, 103, 542,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 543, 544, 545, 546, 0,
	510, 0, 383, 112, 384, 113, 114, 0, 0, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 474,
	126, 499, 527, 128, 547, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	548, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 488, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 516, 156, 157, 391, 158, 549, 224,
	159, 0, 165, 160, 161, 162, 164, 550, 163, 523,
	0, 166, 0, 167, 168, 0, 227, 551, 552, 0,
	0, 169, 524, 525, 497, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 232,
	553, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 473, 0,
	0, 480, 1495, 503, 492, 493, 490, 491, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 186, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 89, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 382, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 383,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 474, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	488, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	516, 156, 157, 391, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 0,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 232, 553, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 473, 0, 0, 480, 1128,
	503, 492, 493, 490, 491, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 475, 0, 0, 0, 0,
	503, 492, 493, 490, 491, 479, 471, 472, 0, 0,
	0, 0, 473, 884, 1125, 480, 73, 74, 0, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 475, 0, 503, 492, 493,
	490, 491, 479, 0, 0, 0, 471, 472, 469, 0,
	0, 0, 473, 73, 74, 480, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 1500, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 475, 0, 503, 492, 493, 490, 491, 479,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 473,
	73, 74, 480, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 568, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 473, 73, 74, 480,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	1176, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 0, 0,
	0, 503, 492, 493, 490, 491, 479, 471, 472, 0,
	0, 0, 0, 473, 0, 0, 480, 73, 74, 818,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 473, 73, 74, 480, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 1841, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 1840,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	473, 73, 74, 480, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 1839, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	1841, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 0, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 1840, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 232, 553,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	475, 0, 503, 492, 493, 490, 491, 479, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 473, 73, 74,
	480, 75, 0, 0, 0, 0, 519, 485, 0, 0,
	0, 76, 77, 186, 533, 188, 534, 78, 535, 536,
	0, 79, 192, 193, 80, 500, 518, 537, 538, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 89, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 539, 94,
	540, 541, 0, 95, 0, 96, 0, 0, 0, 532,
	98, 0, 99, 0, 0, 0, 484, 100, 101, 520,
	498, 0, 0, 102, 103, 542, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 543, 544, 545, 546, 0, 510, 0, 383, 112,
	384, 113, 114, 0, 0, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 474, 126, 499, 527, 128,
	547, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 548, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 488,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 516,
	156, 157, 391, 158, 549, 224, 159, 0, 165, 160,
	161, 162, 164, 550, 163, 523, 0, 166, 0, 167,
	168, 0, 227, 551, 552, 0, 0, 169, 524, 525,
	497, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 232, 553, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 475, 0, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 473, 73, 74, 480, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 0, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 1166, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 0, 1162, 1163, 0, 0, 0,
	0, 1164, 73, 74, 1165, 75, 0, 0, 0, 0,
	519, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	518, 194, 195, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 520, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 208, 209, 210, 211, 0,
	212, 0, 383, 112, 384, 113, 114, 0, 0, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 0,
	126, 0, 527, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 516, 156, 157, 391, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 523,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 524, 525, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 232,
	233, 0, 180, 373, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 1612, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 378, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 382, 0, 111, 0, 109, 0,
	381, 110, 208, 209, 210, 211, 0, 212, 0, 383,
	112, 384, 113, 114, 0, 0, 213, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	221, 150, 0, 151, 152, 153, 60, 222, 154, 155,
	0, 156, 157, 391, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 62,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 377, 233, 0, 180,
	0, 0, 0, 58, 181, 182, 183, 184, 0, 59,
	373, 772, 0, 773, 768, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 57, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 378, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	776, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 765, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 382, 0, 111, 0, 109, 0, 381, 110, 208,
	209, 210, 211, 0, 212, 0, 383, 112, 384, 113,
	114, 0, 0, 213, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 766, 0, 0, 0, 131, 216, 388, 132,
	389, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	391, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 764, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 373, 772, 0, 773, 768,
	763, 0, 0, 0, 0, 0, 774, 769, 0, 0,
	0, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 378, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 759, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 765, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 382, 0, 111, 0,
	109, 0, 381, 110, 208, 209, 210, 211, 0, 212,
	0, 383, 112, 384, 113, 114, 0, 0, 213, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 766, 0, 0,
	0, 131, 216, 388, 132, 389, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 391, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 764, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 0, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	373, 772, 0, 773, 768, 763, 0, 0, 0, 0,
	0, 774, 769, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 378, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 765, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 382, 0, 111, 0, 109, 0, 381, 110, 208,
	209, 210, 211, 0, 212, 0, 383, 112, 384, 113,
	114, 0, 0, 213, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 766, 0, 0, 0, 131, 216, 388, 132,
	389, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	391, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 764, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 774, 769, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 338, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 60, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 62, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 0, 177,
	178, 179, 377, 233, 0, 180, 70, 0, 0, 58,
	181, 182, 183, 184, 0, 59, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 1066, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 60,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 62, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 377,
	233, 0, 180, 70, 0, 0, 58, 181, 182, 183,
	184, 0, 59, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 1292,
	0, 57, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 232, 233, 0, 180,
	0, 70, 0, 0, 181, 182, 183, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 461,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 338, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 232, 233, 0, 180, 70, 0,
	0, 0, 181, 182, 183, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 1066, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 0, 180, 0, 70, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 584, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 0, 180, 70, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 976, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 232, 233, 0, 180,
	70, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 1510, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 0, 180, 70, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 564, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 743, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 742, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	232, 233, 70, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 746, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 373, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	746, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 378, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 382, 0,
	111, 0, 109, 0, 381, 110, 208, 209, 210, 211,
	0, 212, 0, 383, 112, 384, 113, 114, 0, 0,
	213, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 391, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 942, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 940, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 1042, 0, 102, 103, 203,
	0, 104, 0, 105, 945, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	1040, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 944, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	1041, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 942, 197, 0, 0, 937, 81, 82,
	83, 0, 84, 940, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 945, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 936, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 944, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 943,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	1292, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 338, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 694, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 338, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 398,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 343,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 338, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 256, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 255, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 1210, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 1208, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 1199, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 808, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 270, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 681, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	0, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	446, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 443,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 404, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 281, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 280,
	228, 229, 0, 0, 276, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 281, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 280, 228,
	229, 0, 0, 276, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 368, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 365, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 363, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 346, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 327, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	273, 0, 0, 117, 0, 118, 119, 120, 121, 281,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 275,
	150, 0, 151, 152, 153, 0, 222, 154, 274, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 280, 228, 229, 0, 0, 276, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 0, 0, 218, 136, 219,
	137, 0, 138, 0, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 0,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	0, 868, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 0, 0, 0, 857, 0,
	836, 0, 0, 0, 0, 837, 851, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 861, 869, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 858, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 853, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 862, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 0, 0, 0, 0, 0, 1389,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 0,
	842, 0, 0, 0, 0, 1388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 869, 0,
	0, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 867, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 859, 0, 837, 0, 868, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	858, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 862, 0, 0, 842,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	0, 868, 0, 0, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 867, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 858,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 853, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 862, 867, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 859, 0, 837, 0,
	868, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 858, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 853,
	0, 1791, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 858, 0, 0, 1789, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	837, 0, 868, 0, 0, 0, 834, 835, 853, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 862,
	0, 836, 857, 0, 0, 0, 0, 851, 0, 837,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 842, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 861, 869, 0, 1770, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 861, 869, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 834, 835,
	853, 854, 855, 856, 864, 865, 866, 0, 0, 0,
	0, 862, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 837, 0, 868, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 836, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 0, 0, 1745, 0, 0,
	0, 0, 0, 0, 0, 860, 842, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 861, 869, 0, 1740, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 867, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 859, 0,
	837, 0, 868, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 858, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 862, 0, 0, 842, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 0, 868, 0, 0,
	0, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 867, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 858, 0, 0, 1736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 869, 0,
	853, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 862, 867, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 859, 0, 837, 0, 868, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	858, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 853, 0, 1672, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 858,
	0, 0, 1671, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 0, 0, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 837, 0, 868, 0,
	0, 0, 834, 835, 853, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 862, 0, 836, 857, 0,
	0, 0, 0, 851, 0, 837, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 842, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 861, 869,
	0, 1579, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 861, 869, 852,
	0, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 859, 0, 837, 0, 868, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	858, 851, 0, 0, 834, 835, 853, 854, 855, 856,
	864, 865, 866, 0, 0, 0, 0, 862, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 837, 0, 868,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 836, 842,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 0,
	0, 0, 860, 0, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 859, 0, 1513, 0, 0, 0, 852, 0, 0,
	0, 860, 842, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 861,
	869, 0, 1497, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 0, 0, 867, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 859, 0, 837, 0, 868, 0,
	852, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 836, 0, 0,
	0, 0, 858, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 862, 0,
	860, 842, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 861, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 852,
	0, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 858, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 0, 853, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 862, 837, 0,
	868, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 836,
	0, 0, 0, 0, 837, 851, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 851, 860, 0, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 1427, 0, 842, 1861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 1380, 0, 0, 1379, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 861, 869, 0, 0,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 858, 0, 0, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 1860, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	0, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 853, 0, 0, 857, 0, 0,
	0, 0, 1054, 0, 837, 862, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 851, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 1055,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 871, 842,
	0, 0, 0, 0, 834, 835, 0, 854, 855, 856,
	864, 865, 866, 0, 0, 0, 861, 869, 0, 0,
	857, 0, 0, 0, 870, 0, 0, 837, 0, 868,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 852, 836, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 842, 0, 853, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 862, 837, 0, 868, 861,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 836, 0, 0,
	0, 0, 0, 851, 859, 0, 0, 0, 0, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 858, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 0,
	0, 842, 0, 0, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 853, 861, 869,
	0, 0, 857, 0, 0, 0, 0, 0, 862, 837,
	0, 868, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 852,
	836, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 0, 0, 0, 842, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 862, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 858, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 0, 0, 0, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 853,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	862, 868, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 0, 0, 0, 857, 1507,
	836, 0, 1381, 0, 0, 837, 851, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 842, 0, 0, 0, 0, 1386,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 861, 869, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 858, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 853, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 862, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 0,
	842, 0, 0, 0, 0, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 0, 0, 861, 869, 0,
	0, 857, 0, 0, 0, 1340, 0, 0, 837, 0,
	868, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 852, 836,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 835, 0, 854, 855, 856,
	864, 865, 866, 842, 0, 853, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 862, 837, 0, 868,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 836, 0,
	0, 0, 0, 0, 851, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 858, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 0,
	0, 0, 842, 0, 0, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 0, 0, 0, 853, 861,
	869, 857, 0, 0, 0, 0, 0, 0, 837, 862,
	868, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 836,
	852, 0, 0, 0, 0, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 842, 0, 834, 835, 853, 854, 855,
	856, 864, 865, 866, 0, 0, 0, 0, 862, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 837, 0,
	868, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 836,
	0, 852, 0, 0, 0, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	861, 869, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 27,
	0, 53, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	37, 863, 0, 0, 0, 0, 0, 33, 0, 0,
	49, 0, 0, 0, 36, 34, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	716, 710, 733, 704, 724, 723, 0, 0, 706, 705,
	0, 0, 0, 735, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 0, 729, 0, 721, 720, 35, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 0, 51,
	0, 0, 39, 0, 50, 0, 0, 0, 0, 40,
	0, 718, 60, 0, 0, 0, 0, 43, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 711, 712, 713,
	714, 0, 732, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 59, 722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 717, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 0, 0, 0, 0, 0, 0, 0,
	715, 709, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 730,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 736,
}
var sqlPact = [...]int{

	23995, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 794, 15984, -1000, -1000,
	-1000, -1000, 617, 778, 959, 15984, 15984, 15725, 1576, 1576,
	17279, -1000, -1000, 20128, -1000, 2967, 485, 502, 485, 485,
	483, 17279, 600, 668, 239, -1000, 613, 5, 19869, 15984,
	1294, 17, 14689, 332, 23995, 15466, 19610, 15984, 324, 24,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1139, 1066, 1058, 14689, 19351, 19092,
	18833, -1000, 9899, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 599, 347, 342, -1000, 15207, -1000, 885, -1000, 15,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 884, -1000,
	15984, -1000, -1000, 18574, 18315, 340, 847, -1000, -1000, 547,
	396, 1316, -1000, 28, -1000, -1000, 1136, -1000, 879, 1135,
	1130, 1128, 1122, 1121, 1119, 394, 889, -1000, 598, 847,
	-1000, 847, -1000, -1000, -1000, 567, 17279, -1000, 14689, -1000,
	18056, 1079, 17797, -1000, 613, -1000, -1000, -1000, 878, 1281,
	1281, 1281, 1321, 133, 131, 239, 0, 15984, -1000, 333,
	0, 7136, 7136, -1000, -1000, 332, -1000, 334, 12856, -1000,
	7690, -1000, 740, 1200, 424, 729, 1199, -95, 763, 634,
	12054, 24, -1000, -1000, -1000, 9078, 4287, 14689, 15984, 15984,
	651, 17538, -1000, 1198, 107, 1194, -1000, 103, 1189, -1000,
	-8, -1000, -1000, -1000, -1000, -1000, -1000, 332, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14948, 1352, 24104, -1000, 9078, -1000, -1000, 13123,
	1063, 13123, -1000, -1000, 1351, -1000, 9078, -1000, 14, 13,
	1018, 1035, 10451, 10176, 1257, 1177, -1000, -1000, -1000, 26,
	4562, 15984, 1145, 13123, 15984, 15984, 15984, 15984, 15984, 15984,
	-1000, 994, -1000, 15984, -1000, 3, 2, -1000, 17279, -1000,
	114, -1000, 414, 955, 17020, 1181, 954, -1000, 878, -1000,
	881, 990, 8247, 9078, 239, -1000, -1000, 239, 239, 9078,
	-1000, -1000, 15984, 0, 1344, 15984, 92, -1000, 22894, -1000,
	-1000, 9078, 9078, 9078, 9078, 9078, 835, -1000, -1000, -1000,
	5411, -1000, -1000, 24, 331, 350, -1000, -1000, 330, 24,
	-1000, -1000, -1000, -1000, 329, 1456, 427, -1000, -1000, -1000,
	9078, 400, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1144, 325, 323, -1000, -1000, -1000, -1000, 313, 308,
	303, 302, 289, 286, 277, 270, 267, 265, 258, 255,
	253, 252, 792, -1000, 426, -1000, -1000, 426, 426, -1000,
	247, 247, 248, -1000, -1000, -1000, -1000, 247, -1000, -1000,
	-1000, 388, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 249,
	92, -1000, -1000, -1000, 15984, -10, -1000, 23684, -1000, -21,
	803, -1000, 14171, 1296, 1287, 1276, 14689, 1335, 1334, 549,
	15984, 15984, 548, -1000, 1118, -12, -1000, -1000, 2959, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 412, 175, 1342, 175, 12322,
	-1000, 15984, 15984, -1000, 15984, -1000, -1000, 15984, -1000, 15984,
	15984, 244, 13653, 741, 1188, 5, -17, -1000, 1358, -1000,
	-1000, -1000, -1000, 73, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, 792,
	247, 247, 247, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	388, -1000, -1000, 426, 426, 426, -1000, -1000, -27, 23684,
	538, -7, 13388, 15984, -1000, 23, -1000, -1000, 1116, 463,
	-34, 785, 1055, 743, -1000, -1000, -1000, -1000, -3, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1442,
	-1000, -1000, -1000, -1000, 1445, -3, -1000, -1000, -1000, -1000,
	-1000, 1455, -1000, -1000, -1000, 4562, -1000, -1000, -1000, 15984,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 785,
	1055, -1000, -1000, 14689, 13912, 5, 1184, 871, 937, -1000,
	-1000, 378, 1183, -1000, -1000, -1000, -1000, 23684, -1000, 23684,
	672, 1065, -1000, 1065, -4, -1000, 22791, -1000, 246, -39,
	-1000, 412, 7136, 11787, 24104, 24104, 15984, 579, 9078, 9078,
	9078, 9078, 9078, 9078, 9078, 9078, 9078, 9078, 9078, 9078,
	9078, 9078, 9078, 9078, 9078, 9078, 9078, 9078, 9078, 9078,
	902, 9078, 537, 9078, 9078, 9078, 9078, 1001, 826, 229,
	4562, -1000, 656, 656, 656, 23885, 23885, 192, 1, 22264,
	-6, 24, -1000, -1000, 6856, 6559, 24, 4837, -1000, 597,
	1444, 421, 23684, 1152, 1101, 245, 123, 116, 9078, 9078,
	666, 9078, 9355, 9078, 9078, 5688, 9078, 9078, 9078, 9078,
	9078, 9078, -1000, 243, -1000, -1000, -1000, -1000, 1437, -1000,
	-1000, 1429, -1000, 578, 571, 1426, 412, 111, 7690, -1000,
	741, 15984, 15984, 15984, -1000, -1000, 930, 16761, -1000, 24104,
	15984, -1000, 240, 237, 1037, 1036, 15984, 15984, 16502, 16243,
	15984, 688, 236, 234, 15984, 696, -1000, 15984, 630, 1115,
	15984, -1000, 9078, 686, 9078, 721, -1000, 11252, 430, 15984,
	690, 63, -1000, -1000, -1000, 375, 15984, -1000, -1000, -1000,
	107, -1000, 103, -1000, -1000, 14689, -1000, -1000, -1000, -1000,
	-1000, -1000, 24104, 353, 351, -1000, 1418, 536, -1000, 534,
	530, 525, -1000, 233, -1000, 9078, 15984, 13388, -7, -9,
	-1000, -1000, 15984, 1055, -1000, -1000, -1000, -1000, 669, -1000,
	782, -1000, 10726, -1000, -1000, -1000, 597, -1000, -25, -1000,
	-1000, -1000, -1000, 109, -19, -1000, -1000, -1000, -1000, -1000,
	15984, 279, 15984, -1000, 15984, 15984, 1180, 1454, 15984, -1000,
	-1000, -1000, 9078, -1000, -1000, -1000, 5, 15984, -1000, 1100,
	-1000, -45, 1266, -127, 14430, -1000, 10985, -1000, -1000, -1000,
	393, 344, 344, 520, 520, 520, 520, 1849, 1849, 2013,
	870, 2650, 2650, 2650, 623, 179, 179, 2650, 2650, 2650,
	23885, 23785, 1240, 9078, 9078, 521, 810, 229, 1240, 9078,
	1421, 1240, 1240, 1240, -1000, 818, -1000, -1000, -1000, 1114,
	228, 9355, 9355, -1000, -1000, -1000, 5411, -1000, -1000, 226,
	9078, -1000, 9078, -106, -120, -1000, -1000, -46, -1000, -1000,
	-23, 9078, 9078, 9078, 108, -1000, 104, 593, -1000, 9078,
	837, 224, 223, 9078, -1000, -1000, 23595, 20872, 101, 1112,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 99, 23492, 97,
	2628, -1000, 9355, 9355, 9355, 5411, 222, 96, 22601, -74,
	23302, 7967, 7967, 7967, 94, 23276, 9078, -74, 20682, 20656,
	3367, -48, -50, -52, 1409, -54, 91, 387, 385, 90,
	1100, -1000, -1000, -1000, -1000, 519, 518, 1174, -1000, 929,
	-1000, 708, 9078, 15984, 221, 220, 802, -1000, 1171, 833,
	1170, 833, -1000, -21, 697, 9078, 9078, -1000, 511, -1000,
	-1000, 610, -1000, 22383, -1000, 7136, 23684, -1000, 687, 1290,
	-56, -1000, -1000, 7136, 412, 12322, 11787, 7690, -66, -1000,
	-1000, 741, -1000, 500, 1406, 89, 969, 859, 799, 660,
	1399, 23684, -25, -1000, -25, -1000, -1000, -1000, -1000, -1000,
	-1000, 15984, 1082, 13912, 216, 15984, 215, 343, 214, 15984,
	-1000, 1181, -1000, 88, -1000, 1096, 1320, -1000, 11787, 890,
	1049, 1047, 11787, 1069, 850, 850, 850, -1000, 14430, 4001,
	-1000, -1000, 15984, 213, 11519, 86, 1266, 9078, 1240, 1240,
	9078, 9355, 9355, -1000, 1240, -1000, -1000, -1000, -1000, 1111,
	195, 9078, 24104, 2325, 2224, -73, 6262, -26, 22092, -1000,
	-1000, 350, -1000, 84, 7413, -1000, 22983, -22, -22, -1000,
	1451, 1193, -1000, 9078, 23086, -1000, 12589, 415, 856, 22063,
	24104, 24104, -1000, 9078, -1000, 1110, 9078, -1000, 24104, 24104,
	9355, 9355, 9355, 9355, 9355, 9355, 9355, 9355, 9355, 9355,
	9355, 9355, 9355, 9355, 9355, 9355, 9355, 9355, 9355, 1025,
	9355, 1391, 1391, 1391, -35, 5965, -1000, 1120, 1110, 9078,
	9078, 24104, 80, 78, 76, -1000, 9078, -74, 9078, 9078,
	9078, -1000, -1000, -1000, 75, -1000, 1392, -1000, -1000, -1000,
	-1000, 1096, 15984, 15984, 15984, 1169, 2028, -1000, 21891, -75,
	15984, 15984, -1000, 1008, 1048, 453, 15984, -1000, 15984, -1000,
	15984, 15984, 15984, -77, -79, 15984, -1000, -1000, -61, 7136,
	187, 5, -61, 686, -1000, -43, -1000, 373, -1000, 305,
	180, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 74,
	-1000, -1000, 1084, -1000, 9632, 194, 15984, 13912, 5, 9632,
	868, -1000, -1000, 403, 9078, 9078, 1266, 596, 11787, 11787,
	943, 1044, 11787, -1000, -1000, -1000, -1000, -1000, -1000, 1029,
	191, 15984, 14430, 589, 1240, 710, 327, 9078, 24104, 22211,
	-83, 9078, 9078, -1000, -84, -1000, 9078, -1000, -1000, 1450,
	9078, 68, 67, 65, -1000, -1000, 23684, 9078, -1000, -1000,
	20387, 9078, 64, -1000, 56, 52, 23684, 1120, 23684, -1000,
	-1000, 595, 595, 1391, 1391, 1391, 1391, 448, 448, 561,
	304, 1973, 1973, 1973, 2710, 408, 408, 1973, 1973, 1973,
	1109, 1004, 189, 3339, 9078, -85, -1000, -1000, -1000, 23684,
	23684, 48, -1000, -1000, -1000, -74, 3152, 21772, 21687, -1000,
	47, 403, -1000, -1000, -1000, 15984, -1000, 15984, -1000, 15984,
	15984, 1117, 919, -1000, -1000, 1026, 188, 9355, 15984, -1000,
	795, -89, -90, 918, -1000, 893, 9078, -1000, 24104, 833,
	833, -1000, 510, 507, -1000, -1000, -1000, -61, 1211, 15984,
	1272, -1000, -1000, 186, -1000, -1000, -1000, 830, -97, -1000,
	208, 1288, 9078, -1000, -1000, 183, 9632, -101, 46, -1000,
	-102, 15984, -1000, 15984, 23684, -74, 523, -1000, 943, -1000,
	182, 9078, 11787, -1000, -159, -1000, 369, -1000, 15984, -107,
	-1000, 9078, 9078, 22211, -112, -1000, 1240, 1240, -1000, 21568,
	-1000, 22983, -1000, -1000, -1000, 23684, 823, -1000, 21396, -1000,
	-1000, -1000, -1000, 9355, 1108, 178, 24104, 21367, -1000, -1000,
	9078, -1000, -1000, -1000, -1000, -1000, 1190, -1000, -1000, 15984,
	887, -1000, -1000, 9078, 3339, 177, 1082, 163, -1000, -1000,
	-1000, 768, -1000, -1000, 23684, 1301, -1000, -1000, 15984, 15984,
	559, -116, 15984, -1000, -1000, 5134, 15984, 795, 9632, 1278,
	24, 15984, 1278, 21195, 4837, -118, -1000, 1082, 795, 154,
	-68, -1000, 1341, 1449, -1000, 15984, 23684, -1000, 1029, -1000,
	4562, -128, -1000, 1240, 1240, -1000, -1000, 45, 856, 1313,
	-1000, 2238, 9355, 24104, -129, -1000, 21076, -1000, -1000, 1167,
	20991, 976, 15984, -1000, 15984, 15984, 431, 15984, -1000, -1000,
	646, -1000, 412, -1000, 149, 1082, -1000, -1000, -1000, -1000,
	1288, -23, 795, -1000, 1082, 9632, 15984, 148, -1000, -130,
	-1000, -1000, -1000, -1000, 760, 9078, 2238, -135, -1000, -1000,
	1156, -1000, 860, 853, 43, -136, 139, -1000, 9078, -1000,
	12322, -1000, 15984, -1000, 1278, 31, 1082, -1000, -137, -1000,
	-1000, -1000, 30, 8801, 8801, -74, -1000, 15984, -1000, 863,
	861, 658, -1000, -1000, -1000, -1000, -1000, 976, 15984, 23684,
	-124, -142, -1000, -1000, -1000, 795, -1000, -1000, -1000, 3674,
	880, 675, 22575, -1000, -1000, -1000, 1224, -1000, 445, 966,
	966, 860, -148, -1000, 833, 1082, 1369, -1000, -1000, -1000,
	-1000, -1000, -1000, 1378, -1000, -1000, 996, -1000, -1000, -1000,
	-1000, -1000, 8524, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1688, 1687, 1328, 116, 1686, 115, 1685, 1684, 1683,
	1681, 97, 111, 110, 117, 1679, 80, 1678, 1677, 1676,
	95, 1675, 1674, 1672, 56, 1671, 1667, 1666, 1665, 1664,
	1662, 79, 27, 131, 2355, 125, 1659, 1658, 1657, 19,
	90, 62, 1655, 2, 55, 94, 105, 1079, 25, 1654,
	1648, 129, 32, 14, 141, 92, 138, 127, 123, 1641,
	1640, 1638, 42, 1635, 5, 1632, 1631, 1630, 46, 18,
	1629, 26, 34, 1628, 1627, 120, 1625, 65, 104, 101,
	24, 119, 420, 1623, 50, 12, 71, 1621, 39, 1619,
	49, 72, 126, 1618, 43, 143, 53, 22, 57, 1617,
	1616, 1615, 1609, 73, 1608, 84, 64, 1607, 1606, 70,
	1603, 118, 128, 1602, 1599, 121, 1596, 1595, 1591, 689,
	1590, 1589, 323, 1588, 6, 35, 58, 9, 100, 99,
	17, 1587, 16, 1584, 1727, 797, 635, 1583, 48, 51,
	74, 45, 54, 31, 1582, 1581, 98, 1580, 1578, 1577,
	1575, 1574, 75, 1573, 61, 134, 40, 47, 82, 21,
	86, 81, 96, 137, 102, 1572, 1563, 108, 1561, 93,
	1560, 1558, 1389, 107, 1557, 1552, 1551, 1076, 930, 729,
	263, 1550, 1549, 627, 526, 1548, 1547, 113, 1546, 1544,
	135, 133, 20, 1543, 106, 1540, 87, 1539, 0, 89,
	83, 1535, 122, 69, 1525, 1522, 1521, 1517, 33, 3,
	8, 4, 10, 7, 30, 29, 1514, 1512, 124, 77,
	1510, 140, 1502, 1499, 23, 1498, 1497, 15, 1496, 13,
	1495, 11, 1, 1494, 139, 1493, 88, 1478, 1375, 1476,
	136, 1465, 1464, 1360, 76,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 41,
	41, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 38, 38, 43, 43,
	43, 42, 42, 37, 37, 5, 5, 5, 6, 6,
	6, 6, 11, 12, 12, 12, 12, 12, 12, 81,
	81, 80, 80, 83, 83, 13, 13, 14, 14, 14,
	14, 14, 14, 14, 14, 168, 168, 167, 15, 144,
	144, 16, 16, 16, 16, 17, 104, 104, 18, 18,
	18, 18, 19, 23, 234, 234, 234, 238, 238, 239,
	239, 240, 240, 240, 240, 240, 240, 240, 236, 236,
	26, 26, 26, 26, 26, 123, 119, 119, 121, 121,
	121, 121, 46, 118, 118, 118, 118, 120, 120, 120,
	120, 191, 190, 190, 196, 196, 196, 59, 59, 59,
	59, 59, 60, 60, 60, 189, 189, 189, 189, 197,
	197, 197, 197, 197, 197, 61, 61, 61, 195, 195,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 235, 235, 237,
	237, 28, 28, 9, 9, 10, 10, 62, 62, 63,
	63, 126, 126, 126, 126, 64, 64, 125, 206, 206,
	207, 207, 207, 207, 207, 207, 208, 208, 208, 208,
	208, 208, 208, 204, 204, 205, 202, 202, 203, 203,
	203, 203, 241, 241, 124, 124, 67, 67, 211, 211,
	211, 211, 209, 209, 209, 209, 209, 212, 210, 213,
	213, 213, 213, 213, 155, 155, 155, 30, 8, 8,
	108, 108, 71, 71, 159, 159, 159, 53, 53, 39,
	39, 39, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 109, 109, 110, 110, 21, 25, 29, 29, 29,
	29, 29, 243, 243, 50, 50, 50, 50, 51, 51,
	122, 122, 122, 122, 122, 45, 7, 7, 44, 44,
	20, 20, 20, 20, 20, 56, 56, 115, 115, 115,
	117, 117, 116, 116, 116, 94, 94, 31, 76, 76,
	85, 85, 86, 86, 165, 87, 87, 24, 24, 34,
	34, 32, 32, 32, 32, 32, 32, 33, 33, 35,
	35, 35, 35, 35, 35, 35, 219, 219, 219, 221,
	221, 218, 220, 220, 242, 242, 95, 95, 95, 66,
	65, 65, 69, 69, 68, 70, 70, 158, 92, 92,
	92, 92, 111, 112, 112, 113, 113, 114, 114, 91,
	91, 141, 141, 36, 36, 75, 75, 77, 77, 132,
	132, 133, 133, 131, 131, 131, 160, 160, 160, 160,
	161, 161, 161, 161, 161, 161, 156, 156, 156, 156,
	157, 157, 166, 166, 98, 98, 98, 98, 96, 96,
	97, 97, 162, 162, 162, 162, 93, 93, 163, 163,
	163, 127, 127, 169, 169, 169, 74, 74, 74, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 171, 171, 171, 171, 173, 173, 173, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 174, 174, 181, 181, 182, 182, 183,
	184, 175, 175, 176, 176, 177, 178, 185, 185, 185,
	185, 187, 187, 179, 179, 179, 179, 179, 180, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 106, 106, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 214, 214, 214, 214,
	214, 214, 214, 216, 216, 217, 217, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 222, 222, 223, 223, 224, 224, 225,
	225, 227, 228, 228, 228, 229, 233, 233, 226, 226,
	230, 230, 230, 231, 231, 232, 232, 232, 232, 232,
	146, 146, 146, 147, 147, 148, 82, 82, 143, 143,
	142, 142, 142, 145, 145, 99, 186, 186, 186, 186,
	186, 186, 186, 100, 100, 107, 101, 101, 102, 102,
	102, 102, 102, 102, 138, 139, 103, 103, 103, 140,
	140, 149, 153, 153, 152, 151, 151, 150, 150, 130,
	130, 130, 130, 129, 128, 88, 88, 244, 244, 154,
	154, 89, 89, 90, 84, 84, 164, 164, 164, 164,
	78, 78, 58, 58, 79, 79, 54, 54, 57, 55,
	55, 55, 55, 72, 72, 73, 73, 52, 52, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	188, 188, 188, 47, 47, 47, 48, 48, 49, 49,
	193, 193, 193, 194, 194, 194, 194, 192, 192, 192,
	192, 192, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 2, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 4, 6, 7, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 4, 2, 4, 4, 4, 4, 4, 4,
	4, 2, 3, 4, 3, 2, 4, 2, 0, 2,
	0, 8, 8, 7, 10, 5, 8, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 3, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-15, -17, -18, -19, -20, -22, -23, -25, -24, -26,
	-27, -28, -29, -21, -30, -31, 23, 64, -7, -8,
	-9, -10, -220, 92, 100, 193, 99, 85, 115, 207,
	214, -32, -34, 222, -123, 223, 34, 232, 58, 95,
	209, 204, 253, 66, -219, -35, -33, 299, 274, 280,
	217, -36, 240, 267, 302, 240, 128, 78, -54, -47,
	4, -198, -200, 20, 21, 23, 33, 34, 39, 43,
	46, 57, 58, 59, 61, 63, 64, 65, 68, 69,
	76, 77, 78, 79, 81, 85, 87, 91, 92, 94,
	99, 100, 105, 106, 109, 111, 116, 121, 122, 129,
	132, 127, 141, 143, 144, 149, 152, 155, 157, 158,
	159, 160, 161, 163, 164, 166, 168, 165, 171, 173,
	174, 180, 183, 186, 187, 188, 191, 193, 195, 196,
	197, 199, 200, 204, 202, 203, 205, 207, 209, 210,
	212, 214, 215, 216, 219, 220, 222, 223, 225, 228,
	231, 232, 233, 236, 234, 230, 239, 241, 242, 249,
	253, 254, 255, 256, 259, 260, 261, 264, 265, 266,
	270, 275, 276, 277, 278, 28, 35, 36, 37, 38,
	40, 41, 44, 45, 49, 50, 51, 53, 80, 82,
	83, 98, 101, 107, 117, 119, 123, 124, 133, 134,
	135, 136, 138, 147, 170, 172, 181, 185, 190, 192,
	198, 211, 218, 226, 227, 235, 237, 244, 245, 246,
	250, 251, 267, 268, 87, 132, 261, 260, 78, 128,
	240, -14, 299, -24, -6, -12, -4, -20, -31, -11,
	-13, 23, -47, -47, -47, 193, 22, -238, 22, -239,
	-240, 66, 92, 115, 217, 132, 87, 260, -238, -51,
	214, -47, -119, 152, 220, 211, 249, -120, -118, -191,
	244, 161, -80, -47, 4, 78, 57, 79, 116, 128,
	129, 62, 63, 144, 241, 244, 249, 22, 66, -243,
	249, 249, -243, -243, -50, 249, 247, -51, -242, 240,
	240, -108, 78, 258, -33, -35, -34, -68, -69, 257,
	137, 97, 179, -32, -34, -219, -221, 199, -218, -47,
	-221, -65, -66, 22, 89, 303, -162, -54, 177, -90,
	299, -3, -162, 123, -54, -57, 123, -54, -47, 113,
	299, -88, -130, -129, -128, 297, 301, 113, 139, 139,
	-163, -162, -47, 123, -58, 123, -57, -81, 123, -80,
	-168, -167, -194, 4, -198, -200, -199, 267, 55, 67,
	114, 131, 125, 140, 142, 148, 150, 162, 182, 184,
	208, 224, 240, -144, 299, -104, 299, -47, 22, 176,
	303, 176, -47, -119, 51, -119, 299, -121, -45, -46,
	141, 195, 247, 284, 113, 278, -61, 5, 84, -83,
	301, 113, -235, 176, 113, 113, 113, 113, 113, 113,
	278, 141, 195, 240, -122, -45, -46, -122, 247, -51,
	-93, -162, -80, 123, 128, -47, 123, -68, -69, -92,
	-111, -112, 151, 175, -95, 22, 89, -95, -95, 43,
	300, 300, 303, -221, -73, 299, -84, -164, -134, 292,
	-136, 290, 291, 296, 167, 279, -146, -54, -137, 9,
	299, -149, -216, -34, 98, 29, -147, -148, 211, -47,
	7, 8, 5, 6, -52, -171, -180, 252, 102, 169,
	47, -214, -215, 4, -198, -193, -172, -182, -176, -179,
	138, 55, 71, 74, 72, 75, 221, 262, 48, 28,
	101, 185, 190, 237, 250, 251, 123, 170, 124, 53,
	117, 147, 91, 36, 38, 40, 41, 49, 50, 80,
	82, 83, 107, 133, 134, 135, 136, 172, 198, 226,
	235, 245, 246, 268, -199, -183, -184, -177, -178, -185,
	-84, -90, 292, -54, 299, -89, -154, -134, 84, -41,
	202, -40, 21, 23, 92, 265, 98, 230, 230, 202,
	98, 304, 202, 233, 300, -78, -54, -130, -134, -192,
	292, 4, -198, -200, -199, -201, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 42, 47, 48, 52, 54,
	56, 62, 66, 70, 71, 72, 73, 74, 75, 84,
	86, 88, 89, 90, 93, 95, 97, 102, 103, 104,
	110, 112, 113, 115, 118, 120, 126, 128, 130, 137,
	139, 145, 146, 151, 153, 154, 167, 169, 175, 176,
	177, 178, 179, 189, 194, 201, 206, 217, 221, 229,
	238, 240, 243, 247, 248, 252, 257, 258, 262, 263,
	269, 271, 272, 273, 274, -163, -56, -54, -56, 222,
	-47, 30, 98, -43, 303, 46, 205, 98, -43, 303,
	98, 300, 303, -162, 123, 30, -143, -169, -170, -172,
	-181, -175, -179, -180, 39, 45, 44, 242, 218, 227,
	37, 133, 134, 135, 136, 226, 36, 198, 107, 91,
	83, 82, 172, 41, 40, -183, -184, -177, -178, 80,
	245, 246, 138, 38, 50, 49, 268, 235, -82, -134,
	-234, -79, 240, 78, -55, -47, 292, -240, -234, 30,
	-82, 303, 303, 149, -60, 155, 166, 121, -190, 84,
	-196, -189, -155, 9, 252, 102, 176, -195, 8, 291,
	-188, -194, 5, 7, 290, -190, 84, 69, -197, 5,
	4, -180, -155, 84, 152, 301, -192, -191, -237, 110,
	-234, -191, -191, -191, -191, -191, -47, 149, -191, 303,
	303, -51, -43, 303, 299, 30, 167, -48, 123, -47,
	-44, 94, 167, -92, -112, -111, -113, -134, 22, -134,
	-136, -33, -33, -33, -70, -158, -134, -218, 30, -72,
	-47, -75, 303, 113, 10, 11, 54, 33, 290, 291,
	292, 293, 108, 294, 287, 288, 289, 286, 282, 283,
	284, 60, 156, 213, 13, 14, 15, 26, 178, 150,
	279, 125, 224, 296, 16, 17, 18, 140, 35, 126,
	30, 4, -134, -134, -134, -134, -134, 184, -34, -134,
	-82, -88, -34, -142, 297, 299, -88, 299, 5, 5,
	299, -150, -134, -222, 275, 110, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 192, -187, 270, -187, -187, -173, 299, -173,
	-174, 299, -173, 276, 280, 299, -75, -54, 303, 300,
	303, 247, -109, 62, 56, -125, 123, 56, -202, -47,
	62, -203, 52, 258, 194, 112, -109, 62, -109, 62,
	62, -162, 33, 33, 247, -57, -47, 247, 113, 300,
	303, 298, 307, -127, 272, -115, -24, 299, 84, 30,
	-115, -85, -86, -165, -87, -54, 299, -47, -47, -57,
	-58, -80, -81, -14, -167, 98, -16, -24, -20, -31,
	-11, 300, 303, -74, 29, -105, 299, 277, 159, 81,
	122, 158, -106, 216, 300, 303, 247, 303, -79, -72,
	-129, -128, 113, 249, 300, -46, -45, -59, 197, 228,
	203, 219, 303, 8, 7, 7, 5, -192, -236, -47,
	-46, -45, -162, -62, -63, -126, -125, -204, -205, -202,
	128, 258, 103, -24, 98, 176, 167, 284, 98, -114,
	211, 212, 303, -39, 31, 88, 299, 303, 300, -127,
	-164, -77, -160, -162, -34, -161, 299, -169, -169, -80,
	244, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, 150, 125, 224, 35, 126, -134, 247,
	-134, -134, -134, -134, 169, 167, 252, 102, 259, 89,
	173, -244, 238, 32, -140, -34, 299, -192, -146, 211,
	299, 300, 303, -82, -145, 298, -142, -82, 300, 300,
	-82, 269, 22, 89, 292, -105, 7, -153, -152, 271,
	-223, 105, 118, 299, 300, 300, -134, -134, -99, -186,
	4, 277, 159, 81, 122, 158, 216, -100, -134, -101,
	-135, -136, 290, 291, 296, 299, 211, -102, -134, -82,
	-134, 42, 146, 248, -103, -134, 113, -82, -134, -134,
	-134, -82, -82, -82, 299, 7, 7, 244, 244, 7,
	-127, 300, -154, -40, -54, -47, -47, 167, -125, 123,
	-169, -47, 299, 299, 143, 143, -47, -47, 123, -47,
	123, -47, -47, -41, 202, 299, 299, -47, 202, -47,
	233, 113, -54, -134, -94, 206, -134, -94, -117, 176,
	-78, 267, -47, 206, -76, 303, 113, 284, -78, -43,
	-43, -162, -169, 297, 297, 7, 247, 247, 247, 247,
	299, -134, -236, -55, -236, -45, 256, 59, 197, -196,
	-105, 303, 300, 303, -48, 128, -48, -80, -54, 98,
	5, -47, -158, -16, -47, -91, 118, -166, 303, 281,
	67, -98, 142, 162, 114, 148, 208, 131, -131, 304,
	-157, -156, 30, -47, -34, -161, -160, 278, -134, -134,
	247, -244, 238, -140, -134, 169, 252, 102, 259, 89,
	173, 113, 299, -135, -135, -82, 299, -82, -134, 298,
	298, 303, 300, -69, 303, -68, -134, -82, -82, 300,
	300, -151, -152, 93, -134, -228, 183, 299, 299, -134,
	30, 303, 300, 113, 300, -107, 189, 300, 10, 11,
	290, 291, 292, 293, 108, 294, 287, 288, 289, 286,
	282, 283, 284, 60, 156, 213, 13, 14, 15, 140,
	126, -135, -135, -135, -82, 299, 300, -138, -139, 113,
	110, 30, -103, -103, -103, 300, 113, -82, 303, 303,
	303, 300, 300, 300, 7, 300, 303, 300, 278, 278,
	300, -91, 247, 247, 98, 167, -206, -203, -134, -72,
	299, 299, -38, 92, 222, -110, 98, -43, 98, -43,
	247, -109, 62, -82, -82, 247, 233, 298, -84, 206,
	61, 300, -84, -127, -86, -77, -154, 300, 298, 7,
	7, 300, 159, 122, 158, -106, 158, -106, -106, 7,
	-47, -64, 127, -126, 299, -48, 299, 299, 30, 299,
	-47, -44, 300, -141, 120, 43, -160, 173, 142, 142,
	-160, -98, 142, -96, 182, -96, -96, -157, -192, 305,
	-47, 299, 300, -134, -134, -135, -135, 113, 299, -134,
	-143, 26, 26, 300, -82, 300, 303, 300, -142, 300,
	269, -69, -69, -69, 5, 95, -134, 243, -229, -47,
	299, 272, -68, 300, -169, -169, -134, -138, -134, -169,
	-169, -135, -135, -135, -135, -135, -135, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
	89, 167, 173, -135, 303, -82, 300, -139, -138, -134,
	-134, -169, 300, 300, 300, -82, -134, -134, -134, 300,
	7, -141, -47, -47, -125, 98, -207, 62, -208, 54,
	103, 66, 167, 169, 258, 194, 52, 84, 201, 300,
	300, -72, -72, 167, 84, 167, 84, 77, 254, -47,
	-47, -54, -47, -47, 300, 300, -47, -84, -116, 299,
	176, -24, -94, 284, 298, 298, 300, 126, -71, -159,
	-47, -217, 299, -214, -215, -52, 299, -72, -62, -24,
	-71, 176, -224, 273, -134, -82, 239, -160, -160, -97,
	263, 176, 142, -160, -133, -132, 111, 165, 299, -72,
	-156, 26, 26, -134, -143, 300, -134, -134, 300, -134,
	5, -134, 300, 300, 300, -134, -233, -47, -134, 300,
	300, 300, -139, 113, 89, 173, 299, -134, 300, 300,
	303, 300, 300, 300, -224, -125, -47, -80, -47, 103,
	123, 169, 143, 299, -135, -54, -124, -241, 65, 236,
	300, 300, 169, 169, -134, -169, -43, -43, 247, 247,
	90, -72, 62, -90, -34, 299, 186, 300, 303, -53,
	-88, 54, -53, -134, 299, -71, 300, 300, 300, -54,
	-225, -227, -47, 244, -97, 299, -134, -160, 303, 306,
	284, -72, 300, -134, -134, 300, 300, -69, -226, 188,
	300, -135, 113, 299, -143, 300, -134, -208, -48, 167,
	-134, -49, 299, -64, 299, 201, -42, 54, -47, -47,
	260, 168, 300, -47, -47, -124, -159, -39, -80, -39,
	300, -82, 300, -64, -124, 299, 303, 30, 5, -72,
	-132, -192, 300, 300, -69, 43, -135, -143, 300, 300,
	98, 300, -211, 157, -47, -72, -54, -37, 263, -80,
	222, -127, 299, -64, -53, -69, -124, -64, -71, -227,
	-229, 300, -230, 196, 212, -82, 300, 103, -209, -212,
	-210, 176, 114, 187, 225, 300, 300, -67, 299, -134,
	-85, -72, -39, 300, -64, 300, 300, -231, -232, 35,
	255, 69, -134, -231, -47, -210, 176, -212, 176, 260,
	87, -211, -72, -127, 300, -124, -232, 191, 109, 211,
	191, 109, -213, 164, 205, 46, 222, -213, -209, 300,
	-43, -64, 26, 20, 169, 84, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 58, 59,
	60, 61, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 337, -2, 0, 124, 0, 293, 0, 293, 293,
	297, 0, 365, 261, 362, -2, 373, 0, 0, 0,
	371, 351, 0, 0, -2, 0, 0, 0, 0, 766,
	793, 794, 795, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 77, 78, 79, 80, 81, 82, 83,
	84, 0, 90, 97, 98, 876, 100, 0, 107, 108,
	109, 111, 112, 113, 114, 115, 116, 117, 0, 286,
	890, 299, 120, 855, 894, 960, 908, 127, 137, 0,
	966, -2, 141, 71, 170, 171, 0, 173, 188, 0,
	0, 0, 0, 0, 181, 0, 0, 185, 0, 304,
	292, 304, 289, 290, 291, 294, 0, 285, 0, 364,
	0, 0, 0, 260, -2, 347, 348, -2, 0, 368,
	368, 368, 0, 0, 348, 0, 356, 880, 359, 776,
	357, 0, 0, 370, 369, 0, 352, 432, 0, 393,
	0, 2, 0, 945, 432, 0, 945, 0, 0, 0,
	0, 767, 745, 739, 740, 0, 0, 0, 0, 0,
	0, 438, 63, 945, 50, 945, 762, 50, 945, 69,
	0, 85, 87, 803, 804, 805, 806, 971, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 0, 0, 0, 95, 0, 99, 101, 0,
	0, 0, 298, 121, 935, 123, 0, 126, 128, 129,
	0, 0, 0, 0, 0, 0, 140, 165, 166, 72,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 184, 0, 287, 300, 301, 288, 0, 296,
	50, 436, 0, 945, 797, 309, 945, -2, 0, 343,
	380, 381, 0, 0, 0, 366, 367, 0, 0, 0,
	339, 340, 0, 358, 0, 0, 396, 754, 758, 759,
	525, 0, 0, 0, 0, 0, 0, 614, 615, 616,
	0, 618, 619, 620, 940, 0, 624, 625, 960, 766,
	779, 780, 781, 782, 0, 0, 0, 787, 788, 789,
	738, 664, 634, -2, -2, 777, 462, 463, 464, 465,
	-2, 973, 638, 640, 642, 643, 644, 645, 0, 924,
	941, 956, 957, 965, 969, 970, 945, 953, 946, 936,
	943, 952, 836, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 802, 487, 488, 493, 494, 496,
	396, 394, 433, 434, 0, 0, 751, 749, 750, 27,
	282, 29, 0, 282, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 760, 746, 0, 743,
	744, 807, 808, 809, 810, 811, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 442, 0, 315, 0, 0,
	439, 0, 0, 65, 0, 48, 49, 0, 67, 0,
	0, 363, 0, 0, 945, 363, 0, 698, 448, 449,
	450, 451, 452, 522, 455, 456, 457, 458, 459, 460,
	461, 469, 470, 471, 472, 473, 474, 475, 484, 0,
	468, 468, 468, 481, 482, 485, 486, 491, 492, 503,
	504, 506, 508, 502, 502, 502, 499, 500, 0, 696,
	0, 104, 0, 831, 764, 769, 770, 110, 0, 0,
	0, 0, 0, 0, 132, 152, 153, 154, 133, 135,
	142, 144, 145, 146, 155, 156, 157, 158, 254, 0,
	256, 168, 169, 790, 0, 134, 136, 138, 139, 159,
	160, 0, 162, 163, 164, 0, 73, 172, 174, 0,
	187, 175, 176, 177, 178, 179, 180, 183, 186, 0,
	0, 295, 257, 0, 198, 0, 0, 0, 945, 796,
	306, 0, 0, 346, 378, 379, 382, 385, 386, 383,
	525, 353, 354, 355, 374, 375, 271, 360, 0, 0,
	773, 442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	0, 757, 530, 531, 532, 554, 555, 0, -2, 696,
	0, 621, 622, 623, 0, 0, -2, 0, 784, 522,
	0, 0, 737, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 723, 0, 0, 0, 0, 0, 0,
	0, 0, 477, 490, 501, 498, 497, 479, 0, 478,
	476, 0, 480, 0, 0, 0, 442, 0, 0, 753,
	0, 0, 0, 0, 281, 31, 945, 0, 41, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 741, 0, 326, 0, 326, 317, 0, 0, 0,
	313, 329, 330, 332, 333, 0, 0, 440, 64, 763,
	50, 70, 50, 76, 86, 0, 88, 91, 92, 93,
	94, 89, 0, 443, 445, 453, 0, 509, 510, 511,
	512, 513, 514, 523, 96, 0, 0, 0, 105, 106,
	771, 772, 0, 0, 125, 130, 131, 305, 0, 149,
	0, 151, 0, 255, 792, 791, 522, 74, 189, 118,
	302, 303, 437, 0, 197, 199, 201, 202, 203, 204,
	797, 0, 797, 195, 0, 0, 0, 0, 0, 384,
	387, 388, 0, 377, 269, 270, 363, 0, 775, 390,
	755, 423, 397, 405, 421, 408, 0, 526, 527, 528,
	0, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, -2, -2, -2, 546, 547, 548, -2, -2, -2,
	552, 553, -2, 0, 0, 0, 748, 0, -2, 0,
	562, -2, -2, -2, 566, 0, 569, 571, 573, 0,
	0, 0, 0, 747, 583, 729, 0, 756, 568, 0,
	0, 617, 0, 0, 0, 702, 703, 0, -2, 626,
	373, 0, 0, 0, 0, 785, 0, 736, 732, 0,
	674, 0, 0, 0, 639, 641, 0, 0, 0, 0,
	706, 707, 708, 709, 710, 711, 712, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 960, 0, 696, 722,
	0, 0, 0, 0, 0, 696, 0, 728, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	390, 435, 752, 30, 273, 0, 0, 0, 33, 945,
	209, 0, 0, 0, 0, 0, 284, 42, 945, 50,
	945, 50, 43, 28, 282, 0, 0, 275, 0, 272,
	56, 0, 761, 0, 62, 0, 441, 310, 311, 0,
	0, 319, 316, 0, 442, 0, 0, 0, 0, 66,
	68, 0, 699, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 102, 765, 103, 122, 147, 148, 150, 143,
	161, 0, 206, 0, 0, 797, 0, 0, 0, 0,
	308, 309, 376, 0, 774, 392, 0, 395, 0, 0,
	0, 0, 0, 0, 429, 429, 429, 427, 421, 0,
	407, 420, 0, 419, -2, 408, 0, 0, -2, -2,
	0, 0, 0, 584, -2, 567, 570, 572, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 700,
	701, 0, -2, 0, 0, 372, 373, 373, 373, 632,
	0, 0, 733, 0, 0, 633, 0, 0, 0, 0,
	0, 0, 648, 0, 649, 0, 0, 650, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 588, 589, 590, 0, 0, 651, 720, 721, 0,
	0, 0, 0, 0, 0, 656, 0, 727, 0, 0,
	0, 660, 661, 662, 0, 466, 0, 483, 505, 507,
	495, 392, 0, 0, 0, 0, 207, 226, 0, 0,
	0, 0, 35, 0, 0, 0, 0, 39, 0, 45,
	0, 0, 0, 0, 0, 0, 57, 742, 325, 0,
	324, 0, 314, 326, 331, 328, 334, 0, 446, 0,
	0, 454, 515, 516, 517, 518, 519, 520, 521, 0,
	119, 193, 0, 200, 0, 0, 0, 198, 0, 0,
	0, 307, 361, 668, 0, 0, 398, 0, 0, 0,
	0, 0, 0, 424, 428, 425, 426, 406, 403, 0,
	417, 0, 410, 529, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 730, 0, 691, 0, -2, 704, 627,
	0, 0, 0, 0, 786, 731, 735, 0, 672, 673,
	677, 0, 0, 637, 0, 0, 705, 714, 715, 586,
	587, 591, 592, 593, 594, 595, 596, 597, 598, 599,
	600, -2, -2, -2, 604, 605, 606, -2, -2, -2,
	0, 0, 0, 716, 0, 0, 694, 718, 719, 724,
	725, 0, 653, 654, 655, 726, 0, 0, 0, 489,
	0, 668, 277, 279, 32, 0, 208, 0, 211, 0,
	0, 0, 0, 217, 218, 0, 0, 0, 0, 228,
	235, 0, 0, 0, 47, 0, 0, 283, 0, 50,
	50, 274, 0, 0, 191, 192, 276, 312, 0, 0,
	0, 318, 327, 0, 447, 444, 524, 0, 0, 262,
	268, 268, 0, 635, 636, 0, 0, 0, 0, 196,
	0, 0, 349, 0, 391, 389, 0, 411, 0, 413,
	0, 0, 0, 415, 0, 401, 0, 400, 0, 0,
	409, 0, 0, -2, 0, 577, -2, -2, 690, 697,
	783, 373, 628, 630, 631, 734, 679, 676, 0, 663,
	646, 647, 713, 0, 0, 0, 0, 697, 693, 652,
	0, 658, 659, 467, 350, 34, 0, 212, 213, 797,
	0, 216, 219, 0, 221, 799, 206, 0, 232, 233,
	230, 0, 36, 37, 46, 52, 38, 44, 0, 0,
	0, 0, 0, 335, 336, 0, 0, 235, 0, 271,
	778, 0, 271, 0, 0, 0, 225, 206, 235, 0,
	667, 669, 0, 0, 412, 0, 431, 414, 0, 404,
	0, 0, 418, -2, -2, 578, 692, 0, 373, 0,
	665, -2, 0, 0, 0, 695, 0, 210, 214, 0,
	0, 241, 0, 229, 0, 0, 54, 0, 278, 280,
	0, 321, 442, 323, 0, 206, 263, 264, 267, 265,
	268, 373, 235, 194, 206, 0, 0, 0, 422, 0,
	402, 399, 416, 629, 682, 0, -2, 0, 612, 657,
	0, 220, 246, 0, 0, 0, 237, 40, 0, 51,
	0, 322, 0, 223, 271, 0, 206, 258, 0, 670,
	671, 430, 0, 0, 0, 678, 613, 0, 222, 242,
	243, 0, 238, 239, 240, 798, 234, 241, 0, 53,
	442, 0, 266, 627, 224, 235, 675, 680, 683, -2,
	911, 828, 0, 681, 215, 244, 0, 245, 0, 0,
	0, 246, 0, 320, 50, 206, 0, 685, 686, 687,
	688, 689, 247, 0, 250, 251, 0, 248, 231, 236,
	205, 259, 0, 249, 252, 253, 684,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 288, 3, 294, 289, 3,
	299, 300, 292, 290, 303, 291, 301, 293, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 307, 302,
	282, 284, 283, 3, 304, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 297, 3, 298, 287, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 305, 286, 306, 296,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 285,
	57625, 295, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:720
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:761
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:835
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:842
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:844
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			unimplementedWithIssue(2473)
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:890
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			unimplemented()
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:894
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{ /* SKIP DOC */
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{ /* SKIP DOC */
		}
	case 125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			unimplemented()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = Low
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = Normal
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = High
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1392
		{
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1557
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1782
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1788
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = true
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = false
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1872
		{
			unimplemented()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1873
		{
			unimplemented()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			unimplemented()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1877
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = Ascending
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = Descending
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1944
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1987
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.str = ""
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.str = ""
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2081
		{
			unimplementedWithIssue(6637)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2088
		{
			unimplementedWithIssue(6637)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2130
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			unimplementedWithIssue(7841)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2160
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			unimplemented()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
			unimplemented()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			unimplemented()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2394
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2397
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2398
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = true
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = false
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = false
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = true
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2425
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2426
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &From{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.str = astFullJoin
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.str = astLeftJoin
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.str = astRightJoin
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.str = astInnerJoin
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2861
		{
			unimplementedWithIssue(2115)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			unimplementedWithIssue(2115)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2865
		{
			unimplementedWithIssue(2115)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2866
		{
			unimplementedWithIssue(2115)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2867
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			unimplemented()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2931
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = nil
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3052
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3084
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3124
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3159
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3168
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3172
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3204
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3615
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3616
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3657
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3747
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3750
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3751
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3756
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3768
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3772
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3784
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3788
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3796
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3798
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3802
		{
			unimplemented()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			unimplemented()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4140
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4141
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4297
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4333
		{
			unimplemented()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = DNull
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.str = ""
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
