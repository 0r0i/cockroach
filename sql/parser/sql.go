// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:291
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIGSERIAL = 57375
const BIT = 57376
const BLOB = 57377
const BOOL = 57378
const BOOLEAN = 57379
const BOTH = 57380
const BY = 57381
const BYTEA = 57382
const BYTES = 57383
const CASCADE = 57384
const CASE = 57385
const CAST = 57386
const CHAR = 57387
const CHARACTER = 57388
const CHARACTERISTICS = 57389
const CHECK = 57390
const COALESCE = 57391
const COLLATE = 57392
const COLLATION = 57393
const COLUMN = 57394
const COLUMNS = 57395
const COMMIT = 57396
const COMMITTED = 57397
const CONCAT = 57398
const CONFLICT = 57399
const CONSTRAINT = 57400
const CONSTRAINTS = 57401
const COVERING = 57402
const CREATE = 57403
const CROSS = 57404
const CUBE = 57405
const CURRENT = 57406
const CURRENT_CATALOG = 57407
const CURRENT_DATE = 57408
const CURRENT_ROLE = 57409
const CURRENT_TIME = 57410
const CURRENT_TIMESTAMP = 57411
const CURRENT_USER = 57412
const CYCLE = 57413
const DATA = 57414
const DATABASE = 57415
const DATABASES = 57416
const DATE = 57417
const DAY = 57418
const DEC = 57419
const DECIMAL = 57420
const DEFAULT = 57421
const DEALLOCATE = 57422
const DEFERRABLE = 57423
const DELETE = 57424
const DESC = 57425
const DISTINCT = 57426
const DO = 57427
const DOUBLE = 57428
const DROP = 57429
const ELSE = 57430
const ENCODING = 57431
const END = 57432
const ESCAPE = 57433
const EXCEPT = 57434
const EXISTS = 57435
const EXECUTE = 57436
const EXPLAIN = 57437
const EXTRACT = 57438
const FALSE = 57439
const FAMILY = 57440
const FETCH = 57441
const FILTER = 57442
const FIRST = 57443
const FLOAT = 57444
const FLOORDIV = 57445
const FOLLOWING = 57446
const FOR = 57447
const FORCE_INDEX = 57448
const FOREIGN = 57449
const FROM = 57450
const FULL = 57451
const GRANT = 57452
const GRANTS = 57453
const GREATEST = 57454
const GROUP = 57455
const GROUPING = 57456
const HAVING = 57457
const HIGH = 57458
const HOUR = 57459
const IF = 57460
const IFNULL = 57461
const IN = 57462
const INDEX = 57463
const INDEXES = 57464
const INITIALLY = 57465
const INNER = 57466
const INSERT = 57467
const INT = 57468
const INT64 = 57469
const INTEGER = 57470
const INTERSECT = 57471
const INTERVAL = 57472
const INTO = 57473
const IS = 57474
const ISOLATION = 57475
const JOIN = 57476
const KEY = 57477
const KEYS = 57478
const LATERAL = 57479
const LEADING = 57480
const LEAST = 57481
const LEFT = 57482
const LEVEL = 57483
const LIKE = 57484
const LIMIT = 57485
const LOCAL = 57486
const LOCALTIME = 57487
const LOCALTIMESTAMP = 57488
const LOW = 57489
const LSHIFT = 57490
const MATCH = 57491
const MINUTE = 57492
const MONTH = 57493
const NAME = 57494
const NAMES = 57495
const NATURAL = 57496
const NEXT = 57497
const NO = 57498
const NO_INDEX_JOIN = 57499
const NORMAL = 57500
const NOT = 57501
const NOTHING = 57502
const NULL = 57503
const NULLIF = 57504
const NULLS = 57505
const NUMERIC = 57506
const OF = 57507
const OFF = 57508
const OFFSET = 57509
const ON = 57510
const ONLY = 57511
const OR = 57512
const ORDER = 57513
const ORDINALITY = 57514
const OUT = 57515
const OUTER = 57516
const OVER = 57517
const OVERLAPS = 57518
const OVERLAY = 57519
const PARTIAL = 57520
const PARTITION = 57521
const PLACING = 57522
const POSITION = 57523
const PRECEDING = 57524
const PRECISION = 57525
const PREPARE = 57526
const PRIMARY = 57527
const PRIORITY = 57528
const RANGE = 57529
const READ = 57530
const REAL = 57531
const RECURSIVE = 57532
const REF = 57533
const REFERENCES = 57534
const RENAME = 57535
const REPEATABLE = 57536
const RELEASE = 57537
const RESTRICT = 57538
const RETURNING = 57539
const REVOKE = 57540
const RIGHT = 57541
const ROLLBACK = 57542
const ROLLUP = 57543
const ROW = 57544
const ROWS = 57545
const RSHIFT = 57546
const SAVEPOINT = 57547
const SEARCH = 57548
const SECOND = 57549
const SELECT = 57550
const SERIAL = 57551
const SERIALIZABLE = 57552
const SESSION = 57553
const SESSION_USER = 57554
const SET = 57555
const SHOW = 57556
const SIMILAR = 57557
const SIMPLE = 57558
const SMALLINT = 57559
const SMALLSERIAL = 57560
const SNAPSHOT = 57561
const SOME = 57562
const SQL = 57563
const START = 57564
const STRICT = 57565
const STRING = 57566
const STORING = 57567
const SUBSTRING = 57568
const SYMMETRIC = 57569
const SYSTEM = 57570
const TABLE = 57571
const TABLES = 57572
const TEXT = 57573
const THEN = 57574
const TIME = 57575
const TIMESTAMP = 57576
const TIMESTAMPTZ = 57577
const TO = 57578
const TRAILING = 57579
const TRANSACTION = 57580
const TREAT = 57581
const TRIM = 57582
const TRUE = 57583
const TRUNCATE = 57584
const TYPE = 57585
const UNBOUNDED = 57586
const UNCOMMITTED = 57587
const UNION = 57588
const UNIQUE = 57589
const UNKNOWN = 57590
const UPDATE = 57591
const UPSERT = 57592
const USER = 57593
const USING = 57594
const VALID = 57595
const VALIDATE = 57596
const VALUE = 57597
const VALUES = 57598
const VARCHAR = 57599
const VARIADIC = 57600
const VARYING = 57601
const WHEN = 57602
const WHERE = 57603
const WINDOW = 57604
const WITH = 57605
const WITHIN = 57606
const WITHOUT = 57607
const YEAR = 57608
const ZONE = 57609
const NOT_LA = 57610
const WITH_LA = 57611
const AS_LA = 57612
const POSTFIXOP = 57613
const UMINUS = 57614

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4605

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	291, 24,
	-2, 351,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 326,
	168, 326,
	197, 326,
	289, 326,
	291, 326,
	-2, 336,
	-1, 51,
	1, 329,
	168, 329,
	197, 329,
	289, 329,
	291, 329,
	-2, 335,
	-1, 60,
	1, 24,
	291, 24,
	-2, 351,
	-1, 269,
	1, 161,
	291, 161,
	-2, 838,
	-1, 302,
	143, 361,
	167, 361,
	-2, 332,
	-1, 305,
	143, 360,
	167, 360,
	-2, 330,
	-1, 427,
	143, 360,
	167, 360,
	-2, 333,
	-1, 483,
	288, 779,
	-2, 772,
	-1, 484,
	288, 780,
	-2, 773,
	-1, 490,
	5, 495,
	288, 495,
	-2, 924,
	-1, 513,
	5, 461,
	-2, 900,
	-1, 514,
	5, 489,
	288, 489,
	-2, 902,
	-1, 515,
	5, 469,
	-2, 903,
	-1, 516,
	5, 468,
	-2, 904,
	-1, 517,
	5, 489,
	288, 489,
	-2, 907,
	-1, 518,
	5, 489,
	288, 489,
	-2, 908,
	-1, 519,
	5, 490,
	-2, 911,
	-1, 520,
	5, 456,
	-2, 912,
	-1, 521,
	5, 456,
	-2, 913,
	-1, 522,
	5, 471,
	-2, 916,
	-1, 523,
	5, 457,
	-2, 921,
	-1, 524,
	5, 458,
	-2, 922,
	-1, 525,
	5, 459,
	-2, 923,
	-1, 526,
	5, 456,
	-2, 927,
	-1, 527,
	5, 462,
	-2, 932,
	-1, 528,
	5, 460,
	-2, 935,
	-1, 529,
	5, 487,
	288, 487,
	-2, 937,
	-1, 530,
	5, 491,
	-2, 940,
	-1, 531,
	5, 493,
	-2, 941,
	-1, 532,
	5, 486,
	288, 486,
	-2, 945,
	-1, 845,
	92, 336,
	129, 336,
	143, 336,
	167, 336,
	171, 336,
	246, 336,
	-2, 599,
	-1, 853,
	288, 757,
	-2, 746,
	-1, 1043,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 529,
	-1, 1044,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 530,
	-1, 1045,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 531,
	-1, 1049,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 535,
	-1, 1050,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 536,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 537,
	-1, 1054,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 542,
	-1, 1084,
	176, 670,
	-2, 673,
	-1, 1244,
	92, 336,
	129, 336,
	143, 336,
	167, 336,
	171, 336,
	246, 336,
	-2, 409,
	-1, 1248,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 543,
	-1, 1253,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 544,
	-1, 1271,
	176, 669,
	-2, 672,
	-1, 1425,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 545,
	-1, 1430,
	132, 0,
	-2, 555,
	-1, 1438,
	176, 671,
	-2, 674,
	-1, 1471,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 580,
	-1, 1472,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 581,
	-1, 1473,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 582,
	-1, 1477,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 586,
	-1, 1478,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 587,
	-1, 1479,
	12, 0,
	13, 0,
	14, 0,
	271, 0,
	272, 0,
	273, 0,
	-2, 588,
	-1, 1583,
	132, 0,
	-2, 556,
	-1, 1586,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 559,
	-1, 1587,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 561,
	-1, 1671,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 560,
	-1, 1672,
	31, 0,
	120, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 562,
	-1, 1679,
	132, 0,
	-2, 589,
	-1, 1720,
	132, 0,
	-2, 590,
	-1, 1768,
	31, 0,
	142, 0,
	215, 0,
	268, 0,
	-2, 899,
}

const sqlNprod = 1038
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 22399

var sqlAct = [...]int{

	484, 1748, 1624, 1789, 1767, 1725, 927, 1749, 1766, 935,
	1750, 1016, 1133, 1449, 1646, 1659, 802, 676, 306, 482,
	481, 1575, 1556, 270, 37, 1546, 1567, 474, 1509, 848,
	545, 1025, 84, 84, 84, 1241, 587, 84, 1547, 85,
	84, 328, 1561, 1405, 1240, 1000, 997, 1274, 84, 1326,
	1176, 1414, 783, 1325, 17, 84, 84, 1231, 850, 84,
	554, 551, 84, 84, 84, 999, 780, 936, 84, 84,
	84, 84, 912, 354, 1227, 446, 533, 1130, 311, 903,
	1094, 1067, 1070, 1028, 23, 73, 313, 50, 950, 959,
	650, 13, 1026, 798, 349, 992, 6, 311, 634, 1182,
	305, 415, 804, 456, 574, 447, 546, 535, 556, 547,
	880, 966, 355, 416, 631, 78, 661, 50, 884, 351,
	347, 8, 77, 346, 7, 5, 4, 79, 71, 1003,
	431, 344, 430, 257, 316, 929, 630, 652, 648, 429,
	248, 267, 567, 963, 314, 340, 434, 50, 928, 356,
	310, 324, 80, 51, 331, 75, 74, 76, 52, 310,
	341, 1666, 457, 576, 1667, 588, 1796, 1239, 806, 1020,
	576, 576, 81, 1763, 1756, 1747, 1645, 1020, 956, 1188,
	1741, 295, 1722, 1020, 964, 956, 932, 334, 1716, 352,
	1706, 1020, 1697, 1645, 1673, 1020, 1670, 956, 969, 1020,
	318, 81, 1656, 1653, 303, 1645, 1654, 1644, 1629, 302,
	1645, 1020, 476, 1628, 49, 565, 1020, 965, 962, 1608,
	1588, 325, 969, 969, 325, 1585, 336, 1710, 956, 805,
	325, 1520, 336, 56, 1020, 1434, 1269, 1484, 969, 807,
	29, 1270, 1382, 49, 84, 1377, 1376, 1343, 30, 1377,
	1344, 806, 1341, 1340, 58, 969, 969, 1437, 809, 84,
	835, 1339, 84, 84, 969, 1271, 1213, 1268, 969, 29,
	1021, 1273, 969, 1020, 967, 978, 901, 30, 969, 808,
	969, 59, 1648, 968, 955, 823, 969, 956, 54, 900,
	582, 1229, 899, 583, 55, 84, 1215, 84, 1020, 84,
	971, 84, 1078, 548, 1015, 986, 441, 549, 442, 414,
	774, 773, 642, 53, 450, 56, 84, 577, 641, 379,
	323, 428, 422, 60, 577, 577, 548, 84, 549, 675,
	549, 399, 814, 961, 1765, 56, 58, 1762, 84, 84,
	84, 1297, 84, 1755, 1717, 1655, 1613, 1609, 1601, 836,
	427, 1600, 1188, 1599, 1594, 960, 58, 544, 1593, 1592,
	1545, 56, 1499, 59, 1538, 540, 387, 1494, 1493, 1492,
	54, 831, 84, 1440, 1423, 1404, 55, 824, 388, 84,
	1386, 84, 58, 59, 1348, 1345, 1333, 1324, 628, 421,
	56, 1296, 354, 354, 1293, 931, 539, 1291, 640, 1279,
	678, 84, 1278, 84, 84, 84, 84, 84, 84, 59,
	84, 58, 1214, 580, 84, 53, 54, 1075, 1217, 84,
	575, 777, 55, 1147, 1101, 84, 1100, 441, 419, 856,
	341, 355, 355, 825, 1302, 805, 440, 1758, 59, 679,
	1451, 53, 1709, 84, 833, 54, 84, 1689, 1688, 1681,
	1662, 55, 579, 1651, 1643, 437, 438, 1621, 1606, 325,
	443, 1578, 1554, 1429, 584, 1422, 1401, 303, 356, 356,
	72, 1400, 302, 847, 1399, 1397, 680, 1360, 1359, 1312,
	1323, 616, 569, 566, 1537, 311, 1384, 1297, 1287, 542,
	1286, 1265, 1261, 1072, 1202, 1161, 1160, 832, 1140, 853,
	325, 568, 568, 1076, 819, 816, 817, 818, 810, 811,
	812, 813, 815, 1099, 1019, 885, 888, 638, 548, 892,
	637, 878, 549, 877, 1297, 776, 1314, 1315, 1316, 876,
	875, 665, 672, 534, 325, 1313, 1582, 874, 873, 764,
	872, 871, 761, 870, 84, 765, 766, 767, 768, 769,
	678, 770, 775, 869, 868, 772, 1297, 867, 84, 866,
	865, 787, 84, 864, 788, 84, 84, 897, 786, 863,
	1311, 84, 1297, 84, 84, 895, 84, 800, 854, 84,
	1302, 84, 84, 852, 354, 1161, 594, 807, 303, 679,
	53, 303, 303, 794, 778, 329, 795, 796, 445, 417,
	385, 375, 1311, 906, 945, 349, 809, 671, 373, 1306,
	1298, 1299, 1300, 1301, 1303, 1544, 1543, 1302, 851, 1196,
	1195, 1297, 930, 355, 930, 1312, 680, 808, 882, 883,
	1116, 541, 1668, 84, 84, 393, 1542, 73, 917, 919,
	886, 951, 893, 1189, 1010, 889, 1317, 1573, 890, 1302,
	973, 1347, 891, 1346, 922, 1247, 410, 394, 861, 1562,
	356, 928, 1312, 1452, 260, 1302, 1095, 78, 1282, 50,
	881, 953, 1184, 50, 77, 1731, 678, 1777, 952, 79,
	814, 1313, 1778, 954, 1696, 64, 1528, 909, 925, 294,
	1209, 293, 977, 991, 1312, 300, 288, 289, 1637, 943,
	352, 1636, 946, 948, 80, 934, 894, 75, 74, 76,
	944, 947, 857, 807, 1302, 679, 1372, 1352, 1313, 1351,
	1249, 1258, 1201, 1297, 325, 824, 1200, 336, 65, 886,
	1199, 889, 809, 939, 1256, 883, 882, 1198, 336, 1059,
	970, 336, 974, 489, 980, 975, 924, 972, 793, 923,
	1313, 418, 680, 808, 1742, 979, 1298, 1299, 1300, 1301,
	1303, 1144, 1143, 391, 84, 1032, 1383, 557, 413, 558,
	371, 913, 297, 1695, 1626, 1713, 1362, 1733, 84, 84,
	557, 825, 558, 309, 570, 1308, 1309, 1310, 967, 1307,
	1304, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1254, 1069,
	392, 1069, 1259, 1744, 1013, 1014, 814, 84, 1786, 84,
	1181, 1022, 1177, 1690, 1391, 1374, 1302, 1186, 1175, 1745,
	308, 1307, 1304, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	916, 563, 1031, 1388, 562, 1210, 390, 559, 678, 1177,
	1095, 1298, 1299, 1300, 1301, 1303, 557, 68, 558, 1777,
	559, 298, 67, 66, 537, 1073, 810, 811, 812, 813,
	815, 1312, 310, 879, 1079, 1083, 1389, 1086, 905, 301,
	996, 967, 536, 1677, 1371, 844, 995, 679, 1255, 895,
	1208, 1297, 576, 1125, 895, 1257, 1285, 994, 310, 1137,
	1138, 1139, 1300, 1301, 1303, 69, 469, 62, 1415, 486,
	1146, 963, 1363, 84, 84, 84, 1751, 615, 915, 84,
	1082, 1023, 84, 1776, 680, 616, 559, 1313, 84, 84,
	84, 84, 84, 967, 84, 84, 382, 384, 82, 241,
	242, 433, 84, 259, 84, 1774, 271, 307, 1560, 1627,
	325, 84, 964, 1172, 259, 63, 1091, 1008, 1074, 402,
	84, 317, 317, 1792, 1156, 327, 311, 1785, 327, 333,
	327, 1150, 380, 389, 327, 342, 327, 271, 378, 325,
	914, 84, 84, 1030, 1302, 965, 962, 84, 432, 1665,
	1179, 411, 1631, 1171, 812, 813, 815, 354, 1307, 1304,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1106, 1251, 1630,
	1068, 1354, 433, 70, 560, 84, 1480, 84, 84, 84,
	1151, 1065, 84, 1752, 1604, 1619, 390, 560, 616, 1312,
	594, 84, 555, 1155, 1063, 1057, 355, 905, 84, 249,
	84, 1219, 967, 904, 412, 1784, 577, 1800, 1187, 1527,
	1190, 1524, 1193, 1009, 785, 779, 1526, 1576, 1387, 1191,
	254, 1192, 1369, 61, 311, 250, 670, 669, 1726, 663,
	658, 1246, 432, 356, 616, 1152, 1204, 1790, 1620, 1109,
	1205, 1216, 1206, 1218, 951, 1313, 1158, 1211, 251, 1207,
	1212, 1481, 1753, 560, 771, 1264, 1061, 1482, 1060, 1266,
	643, 961, 1066, 253, 1183, 1605, 647, 311, 1577, 1163,
	1162, 1276, 1277, 1183, 953, 1272, 50, 1791, 1225, 1224,
	1110, 952, 325, 1245, 1058, 1570, 954, 593, 1410, 1799,
	1754, 1523, 1194, 594, 1793, 1409, 1525, 645, 389, 339,
	338, 673, 308, 424, 1322, 1406, 1055, 1228, 646, 1250,
	376, 1252, 1098, 1111, 1108, 1335, 311, 1304, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 381, 246, 982, 271, 271,
	1328, 1680, 84, 984, 1603, 1327, 1428, 1292, 1062, 594,
	1260, 1220, 976, 409, 1281, 1064, 252, 407, 1358, 985,
	406, 405, 622, 404, 1117, 403, 400, 337, 983, 84,
	862, 259, 325, 327, 1379, 271, 674, 425, 763, 249,
	1112, 1097, 1506, 1367, 1365, 1330, 1331, 1332, 1353, 1056,
	1221, 902, 317, 1011, 84, 1007, 84, 255, 84, 949,
	254, 1349, 84, 327, 581, 250, 578, 573, 618, 564,
	84, 1446, 1356, 84, 327, 327, 327, 561, 571, 84,
	678, 784, 1638, 84, 1778, 84, 617, 667, 251, 1017,
	1640, 1381, 1370, 1373, 1171, 921, 1380, 1419, 435, 1107,
	321, 1408, 1378, 253, 1411, 1375, 3, 807, 327, 1648,
	396, 1230, 1366, 590, 1368, 635, 1403, 635, 1435, 679,
	1692, 1396, 1719, 1418, 1398, 1407, 84, 1416, 1417, 439,
	807, 1412, 1711, 933, 1442, 1443, 1444, 271, 1431, 635,
	271, 271, 271, 271, 271, 1018, 271, 808, 905, 809,
	271, 1390, 1392, 1393, 920, 259, 680, 801, 1234, 807,
	639, 782, 905, 586, 436, 1234, 322, 330, 918, 1439,
	808, 664, 659, 1237, 1798, 1453, 1485, 958, 809, 317,
	1237, 615, 803, 1232, 397, 287, 252, 1495, 1458, 1235,
	1413, 939, 84, 84, 84, 1797, 1235, 1297, 245, 808,
	84, 84, 807, 1233, 988, 987, 84, 1500, 84, 616,
	84, 84, 84, 84, 1394, 1487, 1521, 1522, 84, 1385,
	1488, 1342, 1117, 1117, 1197, 1145, 1142, 255, 1141, 1092,
	290, 291, 325, 1501, 256, 325, 989, 616, 616, 1505,
	84, 84, 1764, 1590, 1445, 616, 1222, 990, 1236, 855,
	84, 84, 814, 296, 84, 1236, 1625, 1552, 1551, 247,
	1564, 1552, 1551, 84, 84, 1553, 762, 1559, 401, 1553,
	1541, 1539, 1596, 1117, 1117, 1117, 1743, 616, 1284, 1579,
	327, 1565, 1566, 1676, 615, 1571, 1658, 1558, 1096, 860,
	1535, 28, 84, 1549, 910, 1455, 1456, 824, 327, 1580,
	462, 327, 926, 1460, 1507, 1355, 1584, 327, 1002, 941,
	942, 1001, 327, 681, 594, 327, 668, 271, 271, 657,
	485, 408, 651, 660, 1105, 538, 487, 591, 488, 592,
	615, 887, 475, 589, 350, 1491, 1572, 937, 1093, 1280,
	858, 461, 594, 594, 467, 466, 1080, 84, 1602, 84,
	594, 84, 84, 825, 372, 458, 1574, 1238, 40, 84,
	386, 265, 266, 1180, 1536, 1012, 789, 1364, 299, 635,
	803, 1294, 1531, 374, 1617, 1123, 1115, 616, 84, 1113,
	1540, 1104, 594, 420, 1614, 629, 550, 938, 398, 1024,
	957, 593, 1615, 444, 1639, 1555, 797, 1757, 320, 319,
	998, 84, 395, 84, 1649, 1117, 1117, 644, 981, 292,
	1687, 84, 325, 325, 1552, 1551, 325, 1691, 1647, 84,
	1652, 1361, 1553, 1730, 1641, 816, 817, 818, 810, 811,
	812, 813, 815, 1661, 57, 1669, 22, 20, 19, 18,
	16, 15, 1664, 14, 21, 12, 11, 10, 9, 27,
	1675, 26, 25, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 2, 1117, 1634, 1635, 616, 84, 84, 1,
	0, 84, 594, 1682, 0, 1685, 0, 1699, 0, 84,
	1230, 0, 0, 0, 593, 84, 0, 0, 1701, 1708,
	993, 1703, 618, 84, 1705, 1552, 1551, 0, 311, 678,
	0, 0, 1702, 1553, 327, 910, 0, 1707, 895, 1712,
	617, 1623, 0, 0, 1700, 0, 1715, 0, 1714, 84,
	84, 84, 0, 84, 1633, 1718, 0, 1234, 1262, 1263,
	593, 0, 0, 327, 1734, 271, 1728, 590, 679, 1737,
	0, 84, 1237, 0, 616, 0, 1732, 0, 1721, 1735,
	0, 0, 1232, 1657, 1736, 1740, 1739, 0, 1235, 1552,
	1551, 0, 1746, 325, 84, 1738, 0, 1553, 0, 0,
	0, 594, 1233, 1760, 0, 680, 0, 1761, 0, 1319,
	1320, 1321, 0, 0, 1772, 0, 1569, 0, 1775, 84,
	1773, 0, 0, 1779, 0, 618, 1782, 1781, 0, 0,
	0, 0, 0, 1783, 0, 1780, 1516, 0, 1510, 0,
	0, 1795, 1794, 617, 0, 0, 1508, 1236, 0, 616,
	0, 0, 0, 0, 0, 615, 0, 0, 0, 327,
	1153, 1154, 1801, 0, 0, 910, 0, 1517, 1159, 0,
	590, 618, 0, 0, 1164, 1165, 1167, 1169, 1170, 594,
	1173, 1174, 0, 615, 615, 0, 1511, 0, 327, 617,
	1185, 615, 1117, 0, 0, 0, 0, 327, 0, 0,
	1568, 0, 0, 1516, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 1729, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 615, 0, 448, 448, 993, 635, 0,
	0, 0, 0, 993, 1517, 552, 0, 0, 0, 0,
	0, 1426, 1427, 0, 0, 0, 0, 1512, 0, 1513,
	0, 0, 0, 0, 594, 0, 939, 0, 0, 0,
	0, 782, 0, 782, 271, 327, 0, 0, 1223, 0,
	0, 0, 0, 1515, 0, 0, 0, 1226, 1117, 0,
	1518, 0, 0, 0, 1243, 0, 327, 0, 0, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 0, 1483,
	0, 0, 807, 0, 1512, 0, 1513, 0, 0, 0,
	0, 0, 0, 615, 0, 0, 0, 0, 0, 0,
	807, 809, 826, 827, 828, 1514, 0, 0, 790, 792,
	1515, 0, 829, 0, 0, 799, 0, 1518, 0, 809,
	0, 835, 808, 0, 0, 1117, 0, 839, 840, 841,
	842, 843, 0, 0, 0, 593, 846, 0, 0, 0,
	808, 0, 0, 0, 0, 0, 823, 0, 0, 0,
	1297, 0, 1314, 1315, 1316, 0, 859, 0, 0, 0,
	463, 38, 1581, 593, 593, 0, 0, 0, 0, 0,
	0, 593, 1514, 0, 0, 814, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 803, 0,
	0, 38, 615, 814, 0, 0, 1311, 807, 0, 0,
	0, 0, 0, 593, 0, 0, 0, 0, 0, 0,
	836, 304, 0, 0, 312, 327, 809, 0, 0, 0,
	824, 38, 834, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 831, 312, 0, 0, 0, 808, 824, 0,
	1395, 0, 910, 1302, 782, 0, 618, 807, 1402, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 0, 327,
	830, 0, 0, 0, 617, 1243, 809, 0, 0, 1421,
	615, 1243, 1317, 0, 618, 618, 825, 0, 1622, 0,
	0, 0, 618, 0, 0, 0, 0, 808, 1312, 0,
	814, 590, 617, 617, 825, 0, 0, 0, 0, 0,
	617, 0, 0, 593, 0, 833, 0, 0, 0, 0,
	0, 0, 1450, 0, 618, 0, 0, 0, 0, 590,
	590, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 617, 0, 0, 824, 0, 0, 0, 0,
	814, 0, 0, 0, 1313, 615, 0, 819, 816, 817,
	818, 810, 811, 812, 813, 815, 0, 0, 832, 590,
	0, 820, 821, 822, 1679, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 0, 0, 0, 0, 1503, 1504,
	910, 0, 1610, 0, 0, 0, 803, 803, 0, 0,
	0, 825, 1529, 0, 1530, 0, 327, 1532, 1533, 1534,
	0, 0, 593, 0, 327, 0, 0, 0, 0, 0,
	0, 1308, 1309, 1310, 618, 1307, 1304, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1548, 0, 1557, 910, 1548, 0,
	0, 0, 617, 0, 0, 0, 327, 327, 0, 0,
	327, 1720, 0, 0, 0, 0, 0, 0, 0, 803,
	1243, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 0, 0, 0, 818, 810, 811, 812, 813,
	815, 0, 0, 0, 304, 0, 0, 0, 1597, 0,
	593, 448, 0, 0, 0, 0, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 0, 0,
	0, 0, 0, 618, 0, 0, 810, 811, 812, 813,
	815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 617, 0, 910, 0, 1616, 0, 271, 1618, 0,
	0, 1102, 1103, 0, 1114, 327, 1124, 1126, 1131, 1134,
	1135, 1136, 0, 0, 0, 593, 0, 0, 590, 0,
	0, 0, 0, 0, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 1297, 0, 1314, 1315,
	1316, 1548, 0, 0, 0, 0, 272, 327, 1433, 1660,
	0, 618, 0, 0, 0, 304, 0, 327, 304, 304,
	285, 0, 0, 0, 1178, 803, 0, 0, 0, 617,
	0, 0, 807, 0, 826, 827, 828, 0, 0, 0,
	0, 845, 1311, 0, 829, 849, 0, 0, 0, 0,
	0, 809, 0, 835, 0, 274, 590, 0, 0, 0,
	279, 280, 0, 286, 0, 1203, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 273, 275, 0, 823, 0,
	0, 0, 0, 1693, 1694, 0, 618, 1698, 0, 1302,
	0, 0, 1548, 0, 0, 271, 0, 0, 0, 0,
	0, 1557, 0, 0, 617, 0, 0, 0, 0, 803,
	0, 799, 0, 276, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 277, 278, 814, 0, 0, 0, 0,
	0, 590, 0, 0, 1312, 1727, 803, 327, 281, 271,
	0, 0, 836, 0, 0, 0, 0, 0, 38, 0,
	38, 1248, 0, 0, 834, 1253, 1548, 1660, 0, 0,
	0, 0, 0, 38, 831, 0, 0, 38, 0, 0,
	824, 0, 0, 0, 1267, 0, 0, 0, 0, 0,
	327, 0, 0, 1275, 0, 0, 0, 0, 0, 0,
	1313, 1283, 830, 0, 0, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 1131, 1131, 1131, 825, 0, 0, 0,
	0, 0, 282, 0, 0, 283, 0, 833, 0, 0,
	284, 0, 0, 0, 0, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1357, 1308, 1309, 1310,
	0, 1307, 1304, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	0, 0, 0, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 448, 0, 0, 552, 0, 807, 0, 0,
	832, 0, 0, 820, 821, 822, 0, 819, 816, 817,
	818, 810, 811, 812, 813, 815, 809, 0, 0, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 1149, 0,
	807, 0, 826, 827, 828, 0, 0, 808, 0, 0,
	0, 0, 829, 823, 0, 0, 0, 0, 0, 809,
	0, 835, 0, 1424, 0, 1425, 807, 0, 826, 827,
	828, 0, 0, 0, 0, 0, 1430, 0, 829, 0,
	808, 0, 0, 0, 0, 809, 823, 835, 0, 1203,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	814, 0, 0, 0, 0, 0, 808, 1027, 1457, 0,
	0, 1459, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 1489, 1490, 824, 0, 0, 0, 0,
	836, 0, 1496, 1497, 1498, 0, 0, 0, 0, 814,
	0, 0, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 836, 1297, 824, 1314,
	1315, 1316, 0, 0, 0, 0, 0, 0, 834, 1432,
	448, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	830, 825, 0, 0, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1563, 1311, 0, 0, 830, 0, 0, 0,
	0, 0, 312, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1583, 833, 0, 0, 1586, 1587,
	0, 0, 0, 1589, 0, 0, 0, 1591, 0, 0,
	825, 0, 0, 0, 1595, 0, 0, 0, 1598, 0,
	1302, 833, 819, 816, 817, 818, 810, 811, 812, 813,
	815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 1317,
	1607, 820, 821, 822, 0, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 0, 1312, 0, 0, 0, 0,
	38, 0, 1338, 0, 832, 0, 0, 820, 821, 822,
	1244, 819, 816, 817, 818, 810, 811, 812, 813, 815,
	0, 0, 1632, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	807, 0, 826, 827, 828, 0, 1650, 0, 0, 0,
	0, 1313, 829, 845, 0, 0, 0, 0, 0, 809,
	0, 835, 0, 0, 0, 1663, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1671, 1672, 0,
	808, 0, 0, 0, 0, 0, 823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 1684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1686, 1308, 1309,
	1310, 0, 1307, 1304, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 0, 0, 814, 0, 0, 0, 0, 0, 552,
	807, 0, 826, 827, 828, 0, 0, 0, 0, 0,
	836, 0, 829, 0, 0, 0, 0, 0, 0, 809,
	0, 835, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 824, 0,
	808, 0, 0, 0, 0, 0, 823, 0, 0, 1297,
	0, 1314, 1315, 1316, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 1297, 0, 1314, 1315, 1316, 0, 0,
	1027, 0, 0, 1027, 0, 0, 0, 0, 0, 0,
	0, 1297, 0, 1314, 1315, 1316, 0, 1759, 0, 0,
	0, 0, 0, 814, 825, 1311, 0, 0, 0, 0,
	1771, 1771, 0, 0, 807, 833, 826, 827, 828, 1311,
	836, 0, 0, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 834, 809, 1771, 835, 0, 1311, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 1302, 0, 808, 0, 0, 0, 0, 0,
	823, 0, 0, 1771, 0, 0, 1302, 0, 832, 0,
	830, 820, 821, 822, 0, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 1302, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 1317, 0, 1312, 0, 0,
	0, 1318, 0, 0, 825, 0, 0, 814, 0, 0,
	0, 1312, 0, 1317, 0, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 38, 0, 1312,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 0, 824, 1313, 0, 0, 0, 0, 0, 0,
	1027, 1027, 0, 0, 1027, 0, 0, 1313, 832, 0,
	0, 820, 821, 822, 830, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 0, 1313, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	1308, 1309, 1310, 0, 1307, 1304, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 0, 1308, 1309, 1310, 0, 1307, 1304,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 0, 0, 0,
	0, 0, 1308, 1309, 1310, 0, 1307, 1304, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 820, 821, 822, 0, 819,
	816, 817, 818, 810, 811, 812, 813, 815, 0, 0,
	0, 1502, 0, 1642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1027, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 677, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 682, 88, 683, 684,
	685, 686, 193, 687, 688, 689, 690, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 691, 92, 200, 201,
	93, 692, 693, 202, 203, 204, 694, 205, 695, 358,
	696, 94, 95, 96, 845, 97, 697, 98, 99, 698,
	359, 100, 101, 699, 700, 701, 702, 703, 704, 102,
	103, 104, 105, 206, 106, 207, 208, 705, 107, 706,
	108, 707, 708, 709, 109, 110, 710, 111, 711, 0,
	712, 209, 112, 113, 210, 713, 714, 715, 114, 115,
	211, 0, 116, 716, 117, 717, 718, 360, 719, 118,
	212, 720, 213, 721, 119, 120, 214, 215, 722, 723,
	121, 724, 361, 122, 216, 217, 218, 725, 219, 726,
	362, 123, 363, 124, 125, 727, 728, 220, 364, 126,
	365, 729, 127, 730, 731, 128, 0, 129, 130, 131,
	132, 133, 366, 134, 135, 138, 136, 732, 137, 733,
	221, 139, 222, 140, 141, 734, 735, 736, 737, 738,
	142, 223, 367, 143, 368, 224, 144, 145, 739, 225,
	146, 226, 147, 740, 148, 149, 150, 227, 151, 152,
	741, 154, 155, 153, 156, 742, 157, 369, 158, 159,
	228, 160, 0, 161, 162, 163, 743, 229, 164, 165,
	744, 166, 167, 370, 168, 230, 231, 169, 745, 170,
	171, 173, 232, 172, 233, 746, 174, 747, 175, 176,
	748, 234, 235, 236, 749, 750, 177, 237, 238, 751,
	178, 179, 180, 181, 752, 753, 182, 183, 184, 754,
	755, 185, 186, 187, 239, 240, 756, 188, 757, 758,
	759, 760, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 677, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 86, 87, 682, 88, 683, 684, 685,
	686, 193, 687, 688, 689, 690, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 691, 92, 200, 201, 93,
	692, 693, 202, 203, 204, 694, 205, 695, 358, 696,
	94, 95, 96, 0, 97, 697, 98, 99, 698, 359,
	100, 101, 699, 700, 701, 702, 703, 704, 102, 103,
	104, 105, 206, 106, 207, 208, 705, 107, 706, 108,
	707, 708, 709, 109, 110, 710, 111, 711, 0, 712,
	209, 112, 113, 210, 713, 714, 715, 114, 115, 211,
	0, 116, 716, 117, 717, 718, 360, 719, 118, 212,
	720, 213, 721, 119, 120, 214, 215, 722, 723, 121,
	724, 361, 122, 216, 217, 218, 725, 219, 726, 362,
	123, 363, 124, 125, 727, 728, 220, 364, 126, 365,
	729, 127, 730, 731, 128, 0, 129, 130, 131, 132,
	133, 366, 134, 135, 138, 136, 732, 137, 733, 221,
	139, 222, 140, 141, 734, 735, 736, 737, 738, 142,
	223, 367, 143, 368, 224, 144, 145, 739, 225, 146,
	226, 147, 740, 148, 149, 150, 227, 151, 152, 741,
	154, 155, 153, 156, 742, 157, 369, 158, 159, 228,
	160, 0, 161, 162, 163, 743, 229, 164, 165, 744,
	166, 167, 370, 168, 230, 231, 169, 745, 170, 171,
	173, 232, 172, 233, 746, 174, 747, 175, 176, 748,
	234, 235, 236, 749, 750, 177, 237, 238, 751, 178,
	179, 180, 181, 752, 753, 182, 183, 184, 754, 755,
	185, 186, 187, 239, 240, 756, 188, 757, 758, 759,
	760, 189, 190, 191, 192, 0, 0, 677, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 86,
	87, 682, 88, 683, 684, 685, 686, 193, 687, 688,
	689, 690, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 691, 92, 200, 201, 93, 692, 693, 202, 203,
	204, 694, 205, 695, 358, 696, 94, 95, 96, 0,
	97, 697, 98, 99, 698, 359, 100, 101, 699, 700,
	701, 702, 703, 704, 102, 103, 104, 105, 206, 106,
	207, 208, 705, 107, 706, 108, 707, 708, 709, 109,
	110, 710, 111, 711, 0, 712, 209, 112, 113, 210,
	713, 714, 715, 114, 115, 211, 0, 116, 716, 117,
	717, 718, 360, 719, 118, 212, 720, 213, 721, 119,
	120, 214, 215, 722, 723, 121, 724, 361, 122, 216,
	217, 218, 725, 219, 726, 362, 123, 363, 124, 125,
	727, 728, 220, 364, 126, 365, 729, 127, 730, 731,
	128, 0, 129, 130, 131, 132, 133, 366, 134, 135,
	138, 136, 732, 137, 733, 221, 139, 222, 140, 141,
	734, 735, 736, 737, 738, 142, 223, 367, 143, 368,
	224, 144, 145, 739, 225, 146, 226, 147, 740, 148,
	149, 150, 227, 151, 152, 741, 154, 155, 153, 156,
	742, 157, 369, 158, 159, 228, 160, 0, 161, 162,
	163, 743, 229, 164, 165, 744, 166, 167, 370, 168,
	230, 231, 169, 745, 170, 171, 173, 232, 172, 233,
	746, 174, 747, 175, 176, 748, 234, 235, 236, 749,
	750, 177, 237, 238, 751, 178, 179, 180, 181, 752,
	753, 182, 183, 184, 754, 755, 185, 186, 187, 239,
	240, 756, 188, 757, 758, 759, 760, 189, 190, 191,
	192, 483, 472, 473, 470, 471, 459, 0, 0, 0,
	0, 0, 0, 86, 87, 1088, 88, 0, 0, 0,
	0, 499, 465, 0, 0, 0, 89, 90, 194, 513,
	196, 514, 91, 515, 516, 0, 92, 200, 201, 93,
	480, 498, 517, 518, 204, 0, 509, 0, 491, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 492, 494, 0, 493, 495, 102, 103,
	104, 105, 519, 106, 520, 521, 0, 107, 0, 108,
	0, 1089, 0, 512, 110, 0, 111, 0, 0, 0,
	464, 112, 113, 500, 478, 0, 0, 114, 115, 522,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 510,
	0, 213, 0, 119, 120, 506, 508, 0, 0, 121,
	0, 361, 122, 523, 524, 525, 0, 490, 0, 362,
	123, 363, 124, 125, 0, 0, 511, 364, 126, 365,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 366, 134, 135, 138, 136, 454, 137, 479, 507,
	139, 526, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 367, 143, 368, 501, 144, 145, 0, 502, 146,
	226, 147, 0, 148, 149, 150, 527, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 369, 158, 159, 468,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 496,
	166, 167, 370, 168, 528, 231, 169, 0, 170, 171,
	173, 529, 172, 503, 0, 174, 0, 175, 176, 0,
	234, 530, 531, 0, 0, 177, 504, 505, 477, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 497, 0,
	185, 186, 187, 239, 532, 1087, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 455, 0, 0, 483, 472,
	473, 470, 471, 459, 0, 0, 451, 452, 1090, 0,
	86, 87, 453, 88, 0, 460, 1085, 0, 499, 465,
	0, 0, 0, 89, 90, 194, 513, 196, 514, 91,
	515, 516, 0, 92, 200, 201, 93, 480, 498, 517,
	518, 204, 0, 509, 0, 491, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 359, 100, 101, 0,
	492, 494, 0, 493, 495, 102, 103, 104, 105, 519,
	106, 520, 521, 553, 107, 0, 108, 0, 0, 0,
	512, 110, 0, 111, 0, 0, 0, 464, 112, 113,
	500, 478, 0, 0, 114, 115, 522, 0, 116, 0,
	117, 0, 0, 360, 0, 118, 510, 0, 213, 0,
	119, 120, 506, 508, 0, 0, 121, 0, 361, 122,
	523, 524, 525, 0, 490, 0, 362, 123, 363, 124,
	125, 0, 0, 511, 364, 126, 365, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 366, 134,
	135, 138, 136, 454, 137, 479, 507, 139, 526, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 367, 143,
	368, 501, 144, 145, 0, 502, 146, 226, 147, 0,
	148, 149, 150, 527, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 369, 158, 159, 468, 160, 0, 161,
	162, 163, 56, 229, 164, 165, 496, 166, 167, 370,
	168, 528, 231, 169, 0, 170, 171, 173, 529, 172,
	503, 0, 174, 58, 175, 176, 0, 234, 530, 531,
	0, 0, 177, 504, 505, 477, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 497, 0, 185, 186, 187,
	357, 532, 0, 188, 0, 0, 0, 54, 189, 190,
	191, 192, 455, 55, 0, 483, 472, 473, 470, 471,
	459, 0, 0, 451, 452, 0, 0, 86, 87, 453,
	88, 0, 460, 0, 0, 499, 465, 0, 0, 0,
	89, 90, 194, 513, 196, 514, 91, 515, 516, 0,
	92, 200, 201, 93, 480, 498, 517, 518, 204, 0,
	509, 0, 491, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 492, 494, 0,
	493, 495, 102, 103, 104, 105, 519, 106, 520, 521,
	0, 107, 0, 108, 0, 0, 0, 512, 110, 0,
	111, 0, 0, 0, 464, 112, 113, 500, 478, 0,
	0, 114, 115, 522, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 510, 0, 213, 0, 119, 120, 506,
	508, 0, 0, 121, 0, 361, 122, 523, 524, 525,
	0, 490, 0, 362, 123, 363, 124, 125, 0, 0,
	511, 364, 126, 365, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 366, 134, 135, 138, 136,
	454, 137, 479, 507, 139, 526, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 367, 143, 368, 501, 144,
	145, 0, 502, 146, 226, 147, 0, 148, 149, 150,
	527, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	369, 158, 159, 468, 160, 0, 161, 162, 163, 56,
	229, 164, 165, 496, 166, 167, 370, 168, 528, 231,
	169, 0, 170, 171, 173, 529, 172, 503, 0, 174,
	58, 175, 176, 0, 234, 530, 531, 0, 0, 177,
	504, 505, 477, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 497, 0, 185, 186, 187, 357, 532, 0,
	188, 0, 0, 0, 54, 189, 190, 191, 192, 455,
	55, 0, 483, 472, 473, 470, 471, 459, 0, 0,
	451, 452, 0, 0, 86, 87, 453, 88, 0, 460,
	0, 0, 499, 465, 0, 0, 0, 89, 90, 194,
	513, 196, 514, 91, 515, 516, 1127, 92, 200, 201,
	93, 480, 498, 517, 518, 204, 0, 509, 0, 491,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	359, 100, 101, 0, 492, 494, 0, 493, 495, 102,
	103, 104, 105, 519, 106, 520, 521, 0, 107, 0,
	108, 0, 0, 0, 512, 110, 0, 111, 0, 0,
	0, 464, 112, 113, 500, 478, 0, 0, 114, 115,
	522, 0, 116, 0, 117, 0, 1132, 360, 0, 118,
	510, 0, 213, 0, 119, 120, 506, 508, 0, 0,
	121, 0, 361, 122, 523, 524, 525, 0, 490, 0,
	362, 123, 363, 124, 125, 0, 1128, 511, 364, 126,
	365, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 366, 134, 135, 138, 136, 454, 137, 479,
	507, 139, 526, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 367, 143, 368, 501, 144, 145, 0, 502,
	146, 226, 147, 0, 148, 149, 150, 527, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 369, 158, 159,
	468, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	496, 166, 167, 370, 168, 528, 231, 169, 0, 170,
	171, 173, 529, 172, 503, 0, 174, 0, 175, 176,
	0, 234, 530, 531, 0, 1129, 177, 504, 505, 477,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 497,
	0, 185, 186, 187, 239, 532, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 455, 483, 472, 473,
	470, 471, 459, 0, 0, 0, 0, 451, 452, 86,
	87, 0, 88, 453, 0, 0, 460, 499, 465, 0,
	0, 0, 89, 90, 194, 513, 196, 514, 91, 515,
	516, 0, 92, 200, 201, 93, 480, 498, 517, 518,
	204, 0, 509, 0, 491, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 492,
	494, 0, 493, 495, 102, 103, 104, 105, 519, 106,
	520, 521, 0, 107, 0, 108, 0, 0, 0, 512,
	110, 0, 111, 0, 0, 0, 464, 112, 113, 500,
	478, 0, 0, 114, 115, 522, 0, 116, 0, 117,
	0, 0, 360, 0, 118, 510, 0, 213, 0, 119,
	120, 506, 508, 0, 0, 121, 0, 361, 122, 523,
	524, 525, 0, 490, 0, 362, 123, 363, 124, 125,
	0, 0, 511, 364, 126, 365, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 366, 134, 135,
	138, 136, 454, 137, 479, 507, 139, 526, 140, 141,
	0, 0, 0, 0, 0, 142, 223, 367, 143, 368,
	501, 144, 145, 0, 502, 146, 226, 147, 0, 148,
	149, 150, 527, 151, 152, 0, 154, 155, 153, 156,
	0, 157, 369, 158, 159, 468, 160, 0, 161, 162,
	163, 0, 229, 164, 165, 496, 166, 167, 370, 168,
	528, 231, 169, 0, 170, 171, 173, 529, 172, 503,
	0, 174, 0, 175, 176, 0, 234, 530, 531, 0,
	0, 177, 504, 505, 477, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 497, 0, 185, 186, 187, 239,
	532, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 455, 0, 0, 483, 472, 473, 470, 471, 459,
	0, 0, 451, 452, 0, 0, 86, 87, 453, 88,
	0, 460, 1486, 0, 499, 465, 0, 0, 0, 89,
	90, 194, 513, 196, 514, 91, 515, 516, 0, 92,
	200, 201, 93, 480, 498, 517, 518, 204, 0, 509,
	0, 491, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 359, 100, 101, 0, 492, 494, 0, 493,
	495, 102, 103, 104, 105, 519, 106, 520, 521, 0,
	107, 0, 108, 0, 0, 0, 512, 110, 0, 111,
	0, 0, 0, 464, 112, 113, 500, 478, 0, 0,
	114, 115, 522, 0, 116, 0, 117, 0, 0, 360,
	0, 118, 510, 0, 213, 0, 119, 120, 506, 508,
	0, 0, 121, 0, 361, 122, 523, 524, 525, 0,
	490, 0, 362, 123, 363, 124, 125, 0, 0, 511,
	364, 126, 365, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 366, 134, 135, 138, 136, 454,
	137, 479, 507, 139, 526, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 367, 143, 368, 501, 144, 145,
	0, 502, 146, 226, 147, 0, 148, 149, 150, 527,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 369,
	158, 159, 468, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 496, 166, 167, 370, 168, 528, 231, 169,
	0, 170, 171, 173, 529, 172, 503, 0, 174, 0,
	175, 176, 0, 234, 530, 531, 0, 0, 177, 504,
	505, 477, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 497, 0, 185, 186, 187, 239, 532, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 455, 0,
	0, 483, 472, 473, 470, 471, 459, 0, 0, 451,
	452, 0, 0, 86, 87, 453, 88, 0, 460, 1436,
	0, 499, 465, 0, 0, 0, 89, 90, 194, 513,
	196, 514, 91, 515, 516, 0, 92, 200, 201, 93,
	480, 498, 517, 518, 204, 0, 509, 0, 491, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 492, 494, 0, 493, 495, 102, 103,
	104, 105, 519, 106, 520, 521, 0, 107, 0, 108,
	0, 0, 0, 512, 110, 0, 111, 0, 0, 0,
	464, 112, 113, 500, 478, 0, 0, 114, 115, 522,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 510,
	0, 213, 0, 119, 120, 506, 508, 0, 0, 121,
	0, 361, 122, 523, 524, 525, 0, 490, 0, 362,
	123, 363, 124, 125, 0, 0, 511, 364, 126, 365,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 366, 134, 135, 138, 136, 454, 137, 479, 507,
	139, 526, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 367, 143, 368, 501, 144, 145, 0, 502, 146,
	226, 147, 0, 148, 149, 150, 527, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 369, 158, 159, 468,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 496,
	166, 167, 370, 168, 528, 231, 169, 0, 170, 171,
	173, 529, 172, 503, 0, 174, 0, 175, 176, 0,
	234, 530, 531, 0, 0, 177, 504, 505, 477, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 497, 0,
	185, 186, 187, 239, 532, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 455, 0, 0, 483, 472,
	473, 470, 471, 459, 0, 0, 451, 452, 0, 0,
	86, 87, 453, 88, 0, 460, 1084, 0, 499, 465,
	0, 0, 0, 89, 90, 194, 513, 196, 514, 91,
	515, 516, 0, 92, 200, 201, 93, 480, 498, 517,
	518, 204, 0, 509, 0, 491, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 359, 100, 101, 0,
	492, 494, 0, 493, 495, 102, 103, 104, 105, 519,
	106, 520, 521, 0, 107, 0, 108, 0, 0, 0,
	512, 110, 0, 111, 0, 0, 0, 464, 112, 113,
	500, 478, 0, 0, 114, 115, 522, 0, 116, 0,
	117, 0, 0, 360, 0, 118, 510, 0, 213, 0,
	119, 120, 506, 508, 0, 0, 121, 0, 361, 122,
	523, 524, 525, 0, 490, 0, 362, 123, 363, 124,
	125, 0, 0, 511, 364, 126, 365, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 366, 134,
	135, 138, 136, 454, 137, 479, 507, 139, 526, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 367, 143,
	368, 501, 144, 145, 0, 502, 146, 226, 147, 0,
	148, 149, 150, 527, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 369, 158, 159, 468, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 496, 166, 167, 370,
	168, 528, 231, 169, 0, 170, 171, 173, 529, 172,
	503, 0, 174, 0, 175, 176, 0, 234, 530, 531,
	0, 0, 177, 504, 505, 477, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 497, 0, 185, 186, 187,
	239, 532, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 455, 483, 472, 473, 470, 471, 459, 0,
	0, 0, 0, 451, 452, 86, 87, 0, 88, 453,
	851, 1081, 460, 499, 465, 0, 0, 0, 89, 90,
	194, 513, 196, 514, 91, 515, 516, 0, 92, 200,
	201, 93, 480, 498, 517, 518, 204, 0, 509, 0,
	491, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 101, 0, 492, 494, 0, 493, 495,
	102, 103, 104, 105, 519, 106, 520, 521, 0, 107,
	0, 108, 0, 0, 0, 512, 110, 0, 111, 0,
	0, 0, 464, 112, 113, 500, 478, 0, 0, 114,
	115, 522, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 510, 0, 213, 0, 119, 120, 506, 508, 0,
	0, 121, 0, 361, 122, 523, 524, 525, 0, 490,
	0, 362, 123, 363, 124, 125, 0, 0, 511, 364,
	126, 365, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 366, 134, 135, 138, 136, 454, 137,
	479, 507, 139, 526, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 367, 143, 368, 501, 144, 145, 0,
	502, 146, 226, 147, 0, 148, 149, 150, 527, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 369, 158,
	159, 468, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 496, 166, 167, 370, 168, 528, 231, 169, 0,
	170, 171, 173, 529, 172, 503, 0, 174, 0, 175,
	176, 0, 234, 530, 531, 0, 0, 177, 504, 505,
	477, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	497, 0, 185, 186, 187, 239, 532, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 455, 0, 0,
	483, 472, 473, 470, 471, 459, 0, 0, 451, 452,
	449, 0, 86, 87, 453, 88, 0, 460, 0, 0,
	499, 465, 0, 0, 0, 89, 90, 194, 513, 196,
	514, 91, 515, 516, 0, 92, 200, 201, 93, 480,
	498, 517, 518, 204, 0, 509, 0, 491, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 492, 494, 0, 493, 495, 102, 103, 104,
	105, 519, 106, 520, 521, 0, 107, 0, 108, 0,
	0, 0, 512, 110, 0, 111, 0, 0, 0, 464,
	112, 113, 500, 478, 0, 0, 114, 115, 522, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 510, 0,
	213, 0, 119, 120, 506, 508, 0, 0, 121, 0,
	361, 122, 523, 524, 525, 0, 490, 0, 362, 123,
	363, 124, 125, 0, 0, 511, 364, 126, 365, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	366, 134, 135, 138, 136, 454, 137, 479, 507, 139,
	526, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	367, 143, 368, 501, 144, 145, 0, 502, 146, 226,
	147, 0, 148, 149, 150, 527, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 369, 158, 159, 468, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 496, 166,
	167, 370, 168, 528, 231, 169, 0, 170, 171, 173,
	529, 172, 503, 0, 174, 0, 175, 176, 0, 234,
	530, 531, 0, 0, 177, 504, 505, 477, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 497, 0, 185,
	186, 187, 239, 532, 1441, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 455, 483, 472, 473, 470, 471,
	459, 0, 0, 0, 0, 451, 452, 86, 87, 0,
	88, 453, 0, 0, 460, 499, 465, 0, 0, 0,
	89, 90, 194, 513, 196, 514, 91, 515, 516, 0,
	92, 200, 201, 93, 480, 498, 517, 518, 204, 0,
	509, 0, 491, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 492, 494, 0,
	493, 495, 102, 103, 104, 105, 519, 106, 520, 521,
	553, 107, 0, 108, 0, 0, 0, 512, 110, 0,
	111, 0, 0, 0, 464, 112, 113, 500, 478, 0,
	0, 114, 115, 522, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 510, 0, 213, 0, 119, 120, 506,
	508, 0, 0, 121, 0, 361, 122, 523, 524, 525,
	0, 490, 0, 362, 123, 363, 124, 125, 0, 0,
	511, 364, 126, 365, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 366, 134, 135, 138, 136,
	454, 137, 479, 507, 139, 526, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 367, 143, 368, 501, 144,
	145, 0, 502, 146, 226, 147, 0, 148, 149, 150,
	527, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	369, 158, 159, 468, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 496, 166, 167, 370, 168, 528, 231,
	169, 0, 170, 171, 173, 529, 172, 503, 0, 174,
	0, 175, 176, 0, 234, 530, 531, 0, 0, 177,
	504, 505, 477, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 497, 0, 185, 186, 187, 239, 532, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 455,
	483, 472, 473, 470, 471, 459, 0, 0, 0, 0,
	451, 452, 86, 87, 0, 88, 453, 0, 0, 460,
	499, 465, 0, 0, 0, 89, 90, 194, 513, 196,
	514, 91, 515, 516, 0, 92, 200, 201, 93, 480,
	498, 517, 518, 204, 0, 509, 0, 491, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 492, 494, 0, 493, 495, 102, 103, 104,
	105, 519, 106, 520, 521, 0, 107, 0, 108, 0,
	0, 0, 512, 110, 0, 111, 0, 0, 0, 464,
	112, 113, 500, 478, 0, 0, 114, 115, 522, 0,
	116, 0, 117, 0, 1132, 360, 0, 118, 510, 0,
	213, 0, 119, 120, 506, 508, 0, 0, 121, 0,
	361, 122, 523, 524, 525, 0, 490, 0, 362, 123,
	363, 124, 125, 0, 0, 511, 364, 126, 365, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	366, 134, 135, 138, 136, 454, 137, 479, 507, 139,
	526, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	367, 143, 368, 501, 144, 145, 0, 502, 146, 226,
	147, 0, 148, 149, 150, 527, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 369, 158, 159, 468, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 496, 166,
	167, 370, 168, 528, 231, 169, 0, 170, 171, 173,
	529, 172, 503, 0, 174, 0, 175, 176, 0, 234,
	530, 531, 0, 0, 177, 504, 505, 477, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 497, 0, 185,
	186, 187, 239, 532, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 455, 483, 472, 473, 470, 471,
	459, 0, 0, 0, 0, 451, 452, 86, 87, 791,
	88, 453, 0, 0, 460, 499, 465, 0, 0, 0,
	89, 90, 194, 513, 196, 514, 91, 515, 516, 0,
	92, 200, 201, 93, 480, 498, 517, 518, 204, 0,
	509, 0, 491, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 492, 494, 0,
	493, 495, 102, 103, 104, 105, 519, 106, 520, 521,
	0, 107, 0, 108, 0, 0, 0, 512, 110, 0,
	111, 0, 0, 0, 464, 112, 113, 500, 478, 0,
	0, 114, 115, 522, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 510, 0, 213, 0, 119, 120, 506,
	508, 0, 0, 121, 0, 361, 122, 523, 524, 525,
	0, 490, 0, 362, 123, 363, 124, 125, 0, 0,
	511, 364, 126, 365, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 366, 134, 135, 138, 136,
	454, 137, 479, 507, 139, 526, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 367, 143, 368, 501, 144,
	145, 0, 502, 146, 226, 147, 0, 148, 149, 150,
	527, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	369, 158, 159, 468, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 496, 166, 167, 370, 168, 528, 231,
	169, 0, 170, 171, 173, 529, 172, 503, 0, 174,
	0, 175, 176, 0, 234, 530, 531, 0, 0, 177,
	504, 505, 477, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 497, 0, 185, 186, 187, 239, 532, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 455,
	483, 472, 473, 470, 471, 459, 0, 0, 0, 0,
	451, 452, 86, 87, 0, 88, 453, 0, 0, 460,
	499, 465, 0, 0, 0, 89, 90, 194, 513, 196,
	514, 91, 515, 516, 0, 92, 200, 201, 93, 480,
	498, 517, 518, 204, 0, 509, 0, 491, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	1770, 0, 492, 494, 0, 493, 495, 102, 103, 104,
	105, 519, 106, 520, 521, 0, 107, 0, 108, 0,
	0, 0, 512, 110, 0, 111, 0, 0, 0, 464,
	112, 113, 500, 478, 0, 0, 114, 115, 522, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 510, 0,
	213, 0, 119, 120, 506, 508, 0, 0, 121, 0,
	361, 122, 523, 524, 525, 0, 490, 0, 362, 123,
	363, 124, 125, 0, 0, 511, 364, 126, 365, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	366, 134, 135, 138, 136, 454, 137, 479, 507, 139,
	526, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	367, 143, 368, 501, 144, 145, 0, 502, 146, 226,
	147, 0, 148, 149, 150, 527, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 369, 158, 159, 468, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 496, 166,
	167, 370, 168, 528, 231, 169, 0, 170, 171, 173,
	529, 172, 503, 0, 174, 0, 175, 176, 0, 234,
	530, 531, 0, 0, 177, 504, 505, 477, 178, 179,
	1769, 181, 0, 0, 182, 183, 184, 497, 0, 185,
	186, 187, 239, 532, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 455, 483, 472, 473, 470, 471,
	459, 0, 0, 0, 0, 451, 452, 86, 87, 0,
	88, 453, 0, 0, 460, 499, 465, 0, 0, 0,
	89, 90, 1768, 513, 196, 514, 91, 515, 516, 0,
	92, 200, 201, 93, 480, 498, 517, 518, 204, 0,
	509, 0, 491, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 1770, 0, 492, 494, 0,
	493, 495, 102, 103, 104, 105, 519, 106, 520, 521,
	0, 107, 0, 108, 0, 0, 0, 512, 110, 0,
	111, 0, 0, 0, 464, 112, 113, 500, 478, 0,
	0, 114, 115, 522, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 510, 0, 213, 0, 119, 120, 506,
	508, 0, 0, 121, 0, 361, 122, 523, 524, 525,
	0, 490, 0, 362, 123, 363, 124, 125, 0, 0,
	511, 364, 126, 365, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 366, 134, 135, 138, 136,
	454, 137, 479, 507, 139, 526, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 367, 143, 368, 501, 144,
	145, 0, 502, 146, 226, 147, 0, 148, 149, 150,
	527, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	369, 158, 159, 468, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 496, 166, 167, 370, 168, 528, 231,
	169, 0, 170, 171, 173, 529, 172, 503, 0, 174,
	0, 175, 176, 0, 234, 530, 531, 0, 0, 177,
	504, 505, 477, 178, 179, 1769, 181, 0, 0, 182,
	183, 184, 497, 0, 185, 186, 187, 239, 532, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 455,
	483, 472, 473, 470, 471, 459, 0, 0, 0, 0,
	451, 452, 86, 87, 0, 88, 453, 0, 0, 460,
	499, 465, 0, 0, 0, 89, 90, 194, 513, 196,
	514, 91, 515, 516, 0, 92, 200, 201, 93, 480,
	498, 517, 518, 204, 0, 509, 0, 491, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 492, 494, 0, 493, 495, 102, 103, 104,
	105, 519, 106, 520, 521, 0, 107, 0, 108, 0,
	0, 0, 512, 110, 0, 111, 0, 0, 0, 464,
	112, 113, 500, 478, 0, 0, 114, 115, 522, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 510, 0,
	213, 0, 119, 120, 506, 508, 0, 0, 121, 0,
	361, 122, 523, 524, 525, 0, 490, 0, 362, 123,
	363, 124, 125, 0, 0, 511, 364, 126, 365, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	366, 134, 135, 138, 136, 454, 137, 479, 507, 139,
	526, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	367, 143, 368, 501, 144, 145, 0, 502, 146, 226,
	147, 0, 148, 149, 150, 527, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 369, 158, 159, 468, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 496, 166,
	167, 370, 168, 528, 231, 169, 0, 170, 171, 173,
	529, 172, 503, 0, 174, 0, 175, 176, 0, 234,
	530, 531, 0, 0, 177, 504, 505, 477, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 497, 0, 185,
	186, 187, 239, 532, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 455, 483, 472, 473, 470, 471,
	459, 0, 0, 0, 0, 451, 452, 86, 87, 0,
	88, 453, 0, 0, 460, 499, 465, 0, 0, 0,
	89, 90, 194, 513, 196, 514, 91, 515, 516, 0,
	92, 200, 201, 93, 480, 498, 517, 518, 204, 0,
	509, 0, 491, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 492, 494, 0,
	493, 495, 102, 103, 104, 105, 519, 106, 520, 521,
	0, 107, 0, 108, 0, 0, 0, 512, 110, 0,
	111, 0, 0, 0, 464, 112, 113, 500, 478, 0,
	0, 114, 115, 522, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 510, 0, 213, 0, 119, 120, 506,
	508, 0, 0, 121, 0, 361, 122, 523, 524, 525,
	0, 490, 0, 362, 123, 363, 124, 125, 0, 0,
	511, 364, 126, 365, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 366, 134, 135, 138, 136,
	0, 137, 479, 507, 139, 526, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 367, 143, 368, 501, 144,
	145, 0, 502, 146, 226, 147, 0, 148, 149, 150,
	527, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	369, 158, 159, 1122, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 496, 166, 167, 370, 168, 528, 231,
	169, 0, 170, 171, 173, 529, 172, 503, 0, 174,
	0, 175, 176, 0, 234, 530, 531, 0, 0, 177,
	504, 505, 477, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 497, 0, 185, 186, 187, 239, 532, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	483, 472, 473, 470, 471, 459, 0, 0, 0, 0,
	1118, 1119, 86, 87, 0, 88, 1120, 0, 0, 1121,
	499, 465, 0, 0, 0, 89, 90, 0, 513, 196,
	514, 91, 515, 516, 0, 92, 200, 201, 93, 480,
	498, 517, 518, 204, 0, 509, 0, 491, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	1770, 0, 492, 494, 0, 493, 495, 102, 103, 104,
	105, 519, 106, 520, 521, 0, 107, 0, 108, 0,
	0, 0, 512, 110, 0, 111, 0, 0, 0, 464,
	112, 113, 500, 478, 0, 0, 114, 115, 522, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 510, 0,
	213, 0, 119, 120, 506, 508, 0, 0, 121, 0,
	361, 122, 523, 524, 525, 0, 490, 0, 0, 123,
	363, 124, 125, 0, 0, 511, 364, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	366, 134, 135, 138, 136, 454, 137, 479, 507, 139,
	526, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	367, 143, 368, 501, 144, 145, 0, 502, 146, 226,
	147, 0, 148, 149, 150, 527, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 369, 158, 159, 468, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 496, 166,
	167, 0, 168, 528, 231, 169, 0, 170, 171, 173,
	529, 172, 503, 0, 174, 0, 175, 176, 0, 234,
	530, 531, 0, 0, 177, 504, 505, 477, 178, 179,
	1769, 181, 0, 0, 182, 183, 184, 497, 0, 185,
	186, 187, 239, 532, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 452, 86, 87, 0,
	88, 453, 0, 0, 460, 499, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 498, 202, 203, 204, 0,
	509, 0, 491, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 492, 494, 0,
	493, 495, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 500, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 510, 0, 213, 0, 119, 120, 506,
	508, 0, 0, 121, 0, 361, 122, 216, 217, 218,
	0, 219, 0, 362, 123, 363, 124, 125, 0, 0,
	511, 364, 126, 365, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 366, 134, 135, 138, 136,
	0, 137, 0, 507, 139, 222, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 367, 143, 368, 501, 144,
	145, 0, 502, 146, 226, 147, 0, 148, 149, 150,
	227, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	369, 158, 159, 228, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 496, 166, 167, 370, 168, 230, 231,
	169, 0, 170, 171, 173, 232, 172, 503, 0, 174,
	0, 175, 176, 0, 234, 235, 236, 0, 0, 177,
	504, 505, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 497, 0, 185, 186, 187, 239, 240, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 1550,
	193, 0, 0, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 358, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	361, 122, 216, 217, 218, 0, 219, 0, 362, 123,
	363, 124, 125, 0, 0, 220, 364, 126, 365, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	366, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	367, 143, 368, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 369, 158, 159, 228, 160,
	0, 161, 162, 163, 56, 229, 164, 165, 0, 166,
	167, 370, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 58, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 357, 240, 0, 188, 0, 0, 0, 54,
	189, 190, 191, 192, 0, 55, 353, 662, 0, 663,
	658, 653, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 53, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 358, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 359, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 666, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 655,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 360, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 361, 122, 216, 217,
	218, 0, 219, 0, 362, 123, 363, 124, 125, 0,
	0, 220, 364, 126, 365, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 366, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	656, 0, 0, 0, 142, 223, 367, 143, 368, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 369, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 370, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 654, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 353, 662, 0, 663, 658, 653, 0, 0, 0,
	0, 664, 659, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 358, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 649, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 655, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 212,
	0, 213, 0, 119, 120, 214, 215, 0, 0, 121,
	0, 361, 122, 216, 217, 218, 0, 219, 0, 362,
	123, 363, 124, 125, 0, 0, 220, 364, 126, 365,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 366, 134, 135, 138, 136, 0, 137, 0, 221,
	139, 222, 140, 141, 0, 656, 0, 0, 0, 142,
	223, 367, 143, 368, 224, 144, 145, 0, 225, 146,
	226, 147, 0, 148, 149, 150, 227, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 369, 158, 159, 228,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 0,
	166, 167, 370, 168, 230, 231, 169, 0, 170, 171,
	173, 232, 172, 233, 0, 174, 0, 175, 176, 0,
	234, 235, 236, 0, 0, 177, 237, 238, 654, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 0,
	185, 186, 187, 239, 240, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 0, 353, 662, 0, 663,
	658, 653, 0, 0, 0, 0, 664, 659, 86, 87,
	0, 88, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 358, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 359, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 655,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 360, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 361, 122, 216, 217,
	218, 0, 219, 0, 362, 123, 363, 124, 125, 0,
	0, 220, 364, 126, 365, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 366, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	656, 0, 0, 0, 142, 223, 367, 143, 368, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 369, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 370, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 654, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	193, 664, 659, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 326, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 56, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 58, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 357, 240, 0, 188, 0, 0, 0, 54,
	189, 190, 191, 192, 0, 55, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 1029, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	56, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 58, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 357, 240,
	0, 188, 0, 0, 0, 54, 189, 190, 191, 192,
	0, 55, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	53, 0, 193, 0, 1242, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 193, 441, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 326, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	1029, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 214, 215, 0, 0, 121,
	0, 0, 122, 216, 217, 218, 0, 219, 0, 0,
	123, 0, 124, 125, 0, 0, 220, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 221,
	139, 222, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 0, 143, 0, 224, 144, 145, 0, 225, 146,
	226, 147, 0, 148, 149, 150, 227, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 0, 158, 159, 228,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 0,
	166, 167, 0, 168, 230, 231, 169, 0, 170, 171,
	173, 232, 172, 233, 0, 174, 0, 175, 176, 0,
	234, 235, 236, 0, 0, 177, 237, 238, 0, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 0,
	185, 186, 187, 239, 240, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 940, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	1451, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 214, 215, 0, 0, 121,
	0, 0, 122, 216, 217, 218, 0, 219, 0, 0,
	123, 0, 124, 125, 0, 0, 220, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 221,
	139, 222, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 0, 143, 0, 224, 144, 145, 0, 225, 146,
	226, 147, 0, 148, 149, 150, 227, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 0, 158, 159, 228,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 0,
	166, 167, 0, 168, 230, 231, 169, 0, 170, 171,
	173, 232, 172, 233, 0, 174, 0, 175, 176, 0,
	234, 235, 236, 0, 0, 177, 237, 238, 0, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 0,
	185, 186, 187, 239, 240, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 543, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 633, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 632, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	193, 0, 0, 636, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 353, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 0, 636, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 358, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 359, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 360,
	0, 118, 212, 0, 213, 0, 119, 120, 214, 215,
	0, 0, 121, 0, 361, 122, 216, 217, 218, 0,
	219, 0, 362, 123, 363, 124, 125, 0, 0, 220,
	364, 126, 365, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 366, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 367, 143, 368, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 369,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 370, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 913, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 911, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 1006, 0, 114, 115, 211, 0, 116, 0,
	117, 916, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 214, 215, 0, 1004, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 915,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 1005, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 913, 205, 0, 0,
	908, 94, 95, 96, 0, 97, 911, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 916, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 907, 215, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 915, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 914, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 193, 0, 1242, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 326, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 212, 0, 213, 0, 119, 120, 585, 215,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 326,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 377, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 214, 215, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 332, 215, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 326, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	244, 88, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 243, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 212, 0, 213, 0, 119, 120, 1168, 215,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 1166, 215, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 1157, 215, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	781, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 258, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 572, 0, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 212, 0, 213, 0, 119, 120, 214, 215,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 0, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 426, 215, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 423, 215, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 383,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 269, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 268, 235, 236, 0, 0,
	264, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 269,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 268,
	235, 236, 0, 0, 264, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 212, 0, 213, 0, 119, 120, 348, 215,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 345, 215, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 343, 215, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	335, 215, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 315, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 212, 0, 213, 0, 119, 120, 214, 215,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 261, 0, 0, 128, 0, 129,
	130, 131, 132, 269, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 263, 160, 0, 161, 162, 163, 0, 229,
	164, 262, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 268, 235, 236, 0, 0, 264, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 214, 215, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 0, 0, 225, 146, 226, 147, 0,
	148, 0, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 0, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 807, 188, 826, 827, 828, 0, 189, 190,
	191, 192, 0, 0, 829, 0, 0, 0, 0, 0,
	0, 809, 807, 835, 826, 827, 828, 0, 0, 0,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 0,
	0, 809, 808, 835, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 807, 0, 826, 827, 828, 0, 0,
	0, 0, 808, 0, 0, 829, 0, 0, 823, 0,
	0, 0, 809, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 814, 0, 0, 0, 823,
	0, 0, 807, 0, 826, 827, 828, 0, 0, 0,
	0, 0, 836, 0, 829, 814, 0, 0, 0, 0,
	0, 809, 0, 835, 834, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 831, 0, 0, 0, 0, 0,
	824, 0, 808, 0, 834, 0, 814, 0, 823, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	824, 0, 830, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 831, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 814, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 836, 830, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	832, 0, 830, 820, 821, 822, 0, 819, 816, 817,
	818, 810, 811, 812, 813, 815, 0, 0, 0, 0,
	832, 1724, 0, 820, 821, 822, 0, 819, 816, 817,
	818, 810, 811, 812, 813, 815, 825, 0, 0, 0,
	0, 1723, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 832, 0, 0, 820, 821, 822, 0, 819, 816,
	817, 818, 810, 811, 812, 813, 815, 0, 0, 0,
	0, 0, 1704, 0, 0, 0, 807, 0, 826, 827,
	828, 0, 0, 0, 0, 0, 0, 0, 829, 0,
	0, 0, 0, 0, 0, 809, 0, 835, 0, 0,
	832, 0, 0, 820, 821, 822, 0, 819, 816, 817,
	818, 810, 811, 812, 813, 815, 808, 0, 0, 0,
	0, 1683, 823, 0, 807, 0, 826, 827, 828, 0,
	0, 0, 0, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 0, 809, 0, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 826, 827,
	828, 0, 0, 0, 808, 0, 0, 0, 829, 814,
	823, 0, 0, 0, 0, 809, 807, 835, 826, 827,
	828, 0, 0, 0, 0, 0, 836, 0, 829, 0,
	0, 0, 0, 0, 0, 809, 808, 835, 834, 0,
	0, 0, 823, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 824, 0, 808, 814, 0, 0,
	0, 0, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 814,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 836, 0, 0, 814,
	825, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 833, 0, 0, 830, 0, 836, 0, 831, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 824, 0, 830, 0, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 832, 0, 830, 820, 821, 822,
	0, 819, 816, 817, 818, 810, 811, 812, 813, 815,
	825, 0, 0, 0, 0, 1678, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 832, 0, 0, 820, 821, 822, 0, 819,
	816, 817, 818, 810, 811, 812, 813, 815, 0, 0,
	0, 0, 0, 1674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 820, 821, 822,
	0, 819, 816, 817, 818, 810, 811, 812, 813, 815,
	0, 0, 0, 0, 832, 1612, 0, 820, 821, 822,
	0, 819, 816, 817, 818, 810, 811, 812, 813, 815,
	807, 0, 826, 827, 828, 1611, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 809,
	807, 835, 826, 827, 828, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 809,
	808, 835, 0, 0, 0, 0, 823, 0, 0, 0,
	0, 807, 0, 826, 827, 828, 0, 0, 0, 0,
	808, 0, 0, 829, 0, 0, 823, 0, 0, 0,
	809, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 814, 0, 0, 0, 823, 0, 0,
	807, 0, 826, 827, 828, 0, 0, 0, 0, 0,
	836, 0, 829, 814, 0, 0, 0, 0, 0, 809,
	0, 835, 834, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 831, 0, 0, 0, 0, 0, 824, 0,
	808, 0, 834, 0, 814, 0, 823, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 824, 0,
	830, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 831, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 814, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	836, 830, 0, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	830, 820, 821, 822, 0, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 0, 0, 0, 0, 832, 1519,
	0, 820, 821, 822, 0, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 825, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 832,
	0, 0, 820, 821, 822, 0, 819, 816, 817, 818,
	810, 811, 812, 813, 815, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 807, 0, 826, 827, 828, 0,
	0, 0, 0, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 0, 809, 0, 835, 0, 0, 832, 0,
	0, 820, 821, 822, 0, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 808, 0, 0, 0, 0, 1077,
	823, 0, 0, 807, 0, 826, 827, 828, 0, 0,
	0, 0, 0, 0, 0, 829, 0, 0, 0, 0,
	0, 0, 809, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 826, 827, 828, 0,
	0, 0, 0, 808, 0, 0, 829, 814, 1788, 823,
	0, 1017, 0, 809, 0, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 834, 0, 0, 0,
	823, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 814, 0, 1328, 0,
	0, 1327, 0, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 836, 830, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 1787, 814, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 824, 0, 0, 836, 0, 0, 0, 825, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 833,
	0, 0, 0, 830, 0, 0, 831, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 832, 0, 0, 820, 821, 822, 0, 819,
	816, 817, 818, 810, 811, 812, 813, 815, 825, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 807, 833,
	826, 827, 828, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 837, 0, 0, 809, 0, 835,
	0, 832, 0, 0, 820, 821, 822, 0, 819, 816,
	817, 818, 810, 811, 812, 813, 815, 0, 808, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 820, 821, 822, 0, 819,
	816, 817, 818, 810, 811, 812, 813, 815, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	826, 827, 828, 0, 0, 0, 0, 0, 0, 0,
	829, 814, 0, 0, 0, 0, 0, 809, 807, 835,
	826, 827, 828, 0, 0, 0, 0, 0, 836, 0,
	829, 0, 0, 0, 0, 0, 0, 809, 808, 835,
	834, 0, 0, 0, 823, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 0, 824, 0, 808, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 814, 825, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 833, 0, 0, 0, 0, 836, 0,
	831, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 0, 824, 0, 830, 310,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 830, 820,
	821, 822, 0, 819, 816, 817, 818, 810, 811, 812,
	813, 815, 825, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 807, 0, 826, 827, 828,
	0, 0, 825, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 0, 833, 809, 0, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 832, 0, 0, 820,
	821, 822, 0, 819, 816, 817, 818, 810, 811, 812,
	813, 815, 0, 0, 0, 0, 832, 0, 0, 820,
	821, 822, 0, 819, 816, 817, 818, 810, 811, 812,
	813, 815, 807, 0, 826, 827, 828, 0, 814, 0,
	0, 0, 0, 1334, 829, 0, 0, 0, 1329, 0,
	0, 809, 0, 835, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 831, 823, 0,
	0, 0, 0, 824, 0, 0, 0, 807, 0, 826,
	827, 828, 0, 0, 0, 0, 0, 0, 0, 829,
	0, 0, 0, 0, 0, 830, 809, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 808, 807, 0,
	826, 827, 828, 823, 0, 0, 0, 0, 0, 825,
	829, 0, 836, 0, 1289, 0, 0, 809, 0, 835,
	833, 0, 0, 0, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 808, 0,
	824, 0, 0, 0, 823, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 832, 0, 0, 820, 821, 822, 834,
	819, 816, 817, 818, 810, 811, 812, 813, 815, 831,
	0, 814, 0, 0, 0, 824, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 836, 0,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 0,
	834, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	831, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	807, 0, 826, 827, 828, 0, 0, 0, 0, 0,
	0, 825, 829, 0, 0, 0, 0, 0, 830, 809,
	832, 835, 833, 820, 821, 822, 0, 819, 816, 817,
	818, 810, 811, 812, 813, 815, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 0, 823, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 820, 821,
	822, 0, 819, 816, 817, 818, 810, 811, 812, 813,
	815, 0, 0, 814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 832, 0, 0, 820,
	821, 822, 834, 819, 816, 817, 818, 810, 811, 812,
	813, 815, 831, 0, 0, 24, 0, 0, 824, 0,
	0, 0, 0, 0, 0, 0, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 807, 0, 826, 827, 828, 0, 0, 0, 0,
	0, 0, 0, 829, 825, 0, 33, 0, 0, 0,
	809, 0, 835, 29, 0, 833, 45, 0, 0, 0,
	32, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 34, 823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 820, 821, 822, 0, 819, 816, 817, 818, 810,
	811, 812, 813, 815, 814, 0, 0, 807, 0, 826,
	827, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 809, 0, 835, 0,
	31, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 831, 35, 0, 46, 808, 0, 824,
	0, 36, 0, 823, 56, 0, 0, 0, 0, 39,
	41, 807, 0, 826, 827, 828, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	809, 0, 835, 0, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 808, 59, 0, 0, 825, 0, 823, 0, 54,
	0, 0, 0, 0, 0, 55, 833, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 836, 820, 821, 822, 0, 819, 816, 817, 818,
	810, 811, 812, 813, 815, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 0, 824,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 606, 601, 623, 595, 614, 613, 0,
	0, 597, 596, 0, 0, 0, 625, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 619, 0, 611, 610,
	0, 0, 0, 0, 0, 832, 833, 609, 820, 821,
	822, 0, 819, 816, 817, 818, 810, 811, 812, 813,
	815, 0, 0, 608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 603, 604,
	0, 622, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 820, 821, 822, 0, 819, 816, 817, 818,
	810, 811, 812, 813, 815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	599, 0, 0, 0, 0, 0, 0, 0, 605, 600,
	0, 0, 0, 0, 0, 627, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 620, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626,
}
var sqlPact = [...]int{

	21806, -1000, 32, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 824, -1000, -1000, -1000, 603, 774,
	182, 15176, 15176, 14922, 1138, 1138, 16446, -1000, -1000, 19240,
	-1000, 2452, 458, 459, 458, 458, 453, 16446, 543, 622,
	127, -1000, 691, 25, 18986, 15176, 1242, 28, 13906, 307,
	21806, 14668, 15176, 18732, 1079, 999, 998, 13906, 18478, 18224,
	17970, -1000, 9476, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 541, 320, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 313, -1000, 14414, -1000, 800, -1000, 27, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 794, -1000, 15176, -1000,
	-1000, 17716, 17462, 312, 830, -1000, -1000, 527, 390, 1265,
	-1000, 41, -1000, -1000, 1078, -1000, 781, 1077, 1075, 1073,
	1072, 1069, 1065, 389, 848, -1000, 539, 830, -1000, 830,
	-1000, -1000, -1000, 515, 16446, -1000, 13906, -1000, 17208, 1012,
	16954, -1000, 691, -1000, -1000, -1000, 835, 1240, 1240, 1240,
	1250, 147, 138, 127, 16, 15176, -1000, 310, 16, 6559,
	6559, -1000, -1000, 307, -1000, 350, 12117, 40, -1000, 7091,
	-1000, 829, 1144, 641, 638, 1136, -78, 13906, 15176, 15176,
	571, 16700, -1000, 1134, 128, 1133, -1000, 121, 1131, -1000,
	1, -1000, -1000, -1000, -1000, -1000, -1000, 307, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14160, 1297, 22141, -1000, 8416, -1000, -1000, 12382, 968,
	12382, -1000, -1000, 1294, -1000, 8416, -1000, 26, 20, 949,
	980, 10007, 9742, 1183, 1052, -1000, -1000, -1000, 39, 4163,
	15176, 1093, 12382, 15176, 15176, 15176, 15176, 15176, -1000, 15176,
	-1000, 943, -1000, 15176, -1000, 19, 18, -1000, 16446, -1000,
	129, -1000, 306, 886, 16192, 1152, 885, -1000, 835, -1000,
	764, 919, 7621, 8416, 127, -1000, -1000, 127, 127, 8416,
	-1000, -1000, 15176, 16, 1291, 15176, 143, -1000, 21068, -1000,
	-1000, 8416, 8416, 8416, 8416, 8416, 699, -1000, -1000, -1000,
	4961, -1000, -1000, 40, 302, 332, -1000, -1000, 295, 40,
	-1000, -1000, -1000, -1000, 290, 1404, 424, -1000, -1000, -1000,
	8416, 394, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1085, 281, 275, -1000, -1000, -1000, -1000, 272, 271,
	269, 266, 265, 255, 253, 252, 250, 249, 242, 241,
	235, 233, 680, -1000, 411, -1000, -1000, 411, 411, -1000,
	227, 227, 228, -1000, -1000, -1000, 227, -1000, -1000, -1000,
	383, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 231, 143,
	-1000, -1000, -1000, 15176, 40, -1000, -1000, -1000, 8416, 3897,
	0, -1000, 21680, -1000, -16, 975, -1000, 13398, 1270, 1256,
	1197, 13906, 513, 510, 15176, 15176, 400, 107, 1267, 107,
	11587, -1000, 15176, 15176, -1000, 15176, -1000, -1000, 15176, -1000,
	15176, 15176, 153, 12890, 763, 1126, 25, -5, -1000, 1312,
	-1000, -1000, -1000, -1000, 67, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 228, 680,
	227, 227, 227, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	383, -1000, -1000, 411, 411, 411, -1000, -1000, -6, 21680,
	504, 8, 12636, 15176, -1000, 38, -1000, -1000, 1064, 454,
	-14, 650, 995, 969, -1000, -1000, -1000, -1000, 13, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1357,
	-1000, -1000, -1000, -1000, 1389, 13, -1000, -1000, -1000, -1000,
	-1000, 1402, -1000, -1000, -1000, 4163, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15176, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 650, 995, -1000, -1000, 13906, 13144, 1122,
	779, 884, -1000, -1000, 371, 1120, -1000, -1000, -1000, -1000,
	21680, -1000, 21680, 602, 1003, -1000, 1003, 12, -1000, 20864,
	-1000, 226, -19, -1000, 400, 6559, 11322, 22141, 15176, 532,
	8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416,
	8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416,
	8416, 8416, 994, 503, 927, 773, 205, 4163, -1000, 1352,
	1352, 1352, 21957, 21957, 215, 17, 20550, 10, 40, -1000,
	-1000, 6294, 6027, 40, 4427, -1000, 825, 1382, 406, 21680,
	1101, 1029, 225, 137, 135, 8416, 8416, 993, 8416, 8681,
	8416, 8416, 5228, 8416, 8416, 8416, 8416, 8416, 8416, -1000,
	210, -1000, -1000, -1000, -1000, 1381, -1000, -1000, 1379, -1000,
	529, 528, 1378, 400, 134, -1000, 2472, -1000, -1000, 7091,
	-1000, 763, 15176, 15176, 15176, -1000, -1000, 864, 15938, -1000,
	22141, 15176, -1000, 208, 207, 965, 964, 15176, 15176, 15684,
	15430, 15176, 750, 15176, 15176, 625, -1000, 615, 8416, 642,
	-1000, 10792, 416, 15176, 620, 60, -1000, -1000, -1000, 370,
	15176, -1000, -1000, -1000, 128, -1000, 121, -1000, -1000, 13906,
	-1000, -1000, -1000, -1000, -1000, -1000, 22141, 334, 333, -1000,
	1377, 501, -1000, 494, 490, 486, -1000, 206, -1000, 8416,
	15176, 12636, 8, 6, -1000, -1000, 15176, 995, -1000, -1000,
	-1000, -1000, 635, -1000, 647, -1000, 10272, -1000, -1000, -1000,
	825, -1000, -26, -1000, -1000, -1000, -1000, 123, 4, -1000,
	-1000, -1000, -1000, -1000, 15176, 297, 15176, 15176, 15176, 1117,
	1401, 15176, -1000, -1000, -1000, 8416, -1000, -1000, -1000, 25,
	15176, -1000, 1024, -1000, -1, 1209, -126, 13652, -1000, 10526,
	-1000, -1000, 388, 703, 703, 1280, 1280, 1280, 1280, 2057,
	2057, 577, 1309, 229, 229, 229, 1942, 2107, 2107, 229,
	229, 229, 21957, 21861, 2727, 8416, 484, 771, 205, 8416,
	-1000, 637, -1000, -1000, -1000, 1062, 204, 8681, 8681, -1000,
	-1000, -1000, 4961, -1000, -1000, 203, 8416, -1000, 8416, -20,
	-51, -1000, -1000, -24, -1000, -1000, -21, 8416, 8416, 8416,
	113, -1000, 110, 580, -1000, 8416, 711, 202, 200, 8416,
	-1000, -1000, 21538, 3180, 108, 1059, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 105, 21497, 102, 3261, -1000, 8681, 8681,
	8681, 4961, 192, 98, 20833, -94, 21442, 7356, 7356, 7356,
	97, 21355, 8416, -94, 3080, 2786, 2760, -28, -36, -37,
	1374, -42, 96, 386, 384, 95, 1024, -1000, -1000, 8416,
	-1000, -1000, -1000, 483, 481, 1115, -1000, 842, -1000, 723,
	8416, 15176, 190, 189, 689, -1000, 1111, 840, 1110, 840,
	-1000, -16, 816, -1000, -1000, 480, -1000, 6559, 21680, -1000,
	618, 1208, -43, -1000, -1000, -1000, 6559, 400, 11587, 7091,
	-47, -1000, -1000, 763, -1000, 479, 1372, 91, 897, 716,
	664, 581, 1367, 21680, -26, -1000, -26, -1000, -1000, -1000,
	-1000, -1000, -1000, 15176, -1000, 13144, 187, 15176, 186, 183,
	178, 15176, -1000, 1152, -1000, 86, -1000, 1020, 1246, 11322,
	991, 984, 11322, 1216, 724, 724, 724, -1000, 13652, 3618,
	-1000, -1000, 15176, 177, 11058, 85, 1209, 8416, 2727, 8416,
	8681, 8681, -1000, 2727, -1000, -1000, -1000, -1000, 1058, 175,
	8416, 22141, 2897, 2436, -54, 5760, -35, 20501, -1000, -1000,
	332, -1000, 84, 6826, -1000, 21148, -12, -12, -1000, 1399,
	1141, -1000, 8416, 21168, -1000, 11852, 402, 717, 20470, 22141,
	22141, -1000, 8416, -1000, 1057, 8416, -1000, 22141, 8681, 8681,
	8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681,
	8681, 8681, 8681, 8681, 8681, 8681, 8681, 922, 8681, 1347,
	1347, 1347, -55, 5493, -1000, 1055, 1057, 8416, 8416, 22141,
	80, 79, 78, -1000, 8416, -94, 8416, 8416, 8416, -1000,
	-1000, -1000, 73, -1000, 1360, -1000, -1000, -1000, -1000, 1020,
	3284, 15176, 15176, 15176, 1109, 1728, -1000, 20450, -58, 15176,
	15176, -1000, 962, 967, 443, 15176, -1000, 15176, -1000, 15176,
	15176, 15176, 15176, -63, 6559, 196, 25, 15176, -63, 615,
	-1000, -1000, 363, -1000, 329, 328, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 71, -1000, -1000, 9211, 174, 15176,
	13144, 9211, 770, -1000, -1000, 397, 8416, 8416, 1209, 11322,
	11322, 1588, 981, 11322, -1000, -1000, -1000, -1000, 377, -1000,
	941, 173, 15176, 13652, 1257, 2727, 2010, 514, 8416, 22141,
	22011, -64, 8416, 8416, -1000, -69, -1000, 8416, -1000, -1000,
	1398, 8416, 70, 69, 65, -1000, -1000, 21680, 8416, -1000,
	-1000, 19494, 8416, 64, -1000, 62, 59, 21680, 1055, 21680,
	-1000, 611, 611, 1347, 1347, 1347, 1347, 331, 331, 477,
	871, 546, 546, 546, 713, 562, 562, 546, 546, 546,
	1056, 930, 170, 3243, 8416, -70, -1000, -1000, -1000, 21680,
	21680, 58, -1000, -1000, -1000, -94, 1960, 20176, 20156, -1000,
	57, 397, -1000, -1000, -1000, -1000, 15176, -1000, 15176, -1000,
	15176, 15176, 854, -1000, -1000, 933, 169, 8681, 15176, -1000,
	714, -76, -81, 838, -1000, 821, 8416, -1000, 22141, 840,
	840, -1000, 465, 462, -1000, -63, 1157, 15176, 1192, -1000,
	-1000, -1000, 166, -1000, -1000, -1000, -82, -1000, 232, 1219,
	8416, -1000, -1000, 165, 9211, -86, -1000, -1000, 56, -87,
	15176, -1000, 15176, 21680, -94, -1000, 1588, -1000, 162, 8416,
	11322, -1000, -1000, 814, -131, -1000, 359, -1000, 15176, -93,
	-1000, 8416, 8416, 22011, -95, -1000, 2727, 2727, -1000, 20124,
	-1000, 21148, -1000, -1000, -1000, 21680, 694, -1000, 20076, -1000,
	-1000, -1000, -1000, 8681, 1053, 161, 22141, 19842, -1000, -1000,
	8416, -1000, -1000, -1000, -1000, -1000, 1795, -1000, -1000, -1000,
	-1000, 8416, 3243, 160, -1000, 159, -1000, -1000, -1000, 621,
	-1000, -1000, 21680, 1230, -1000, -1000, 15176, 15176, 524, -97,
	15176, -1000, -1000, 4694, 714, 9211, 1222, 40, 15176, 1222,
	19793, 4427, -99, -1000, 15176, -1000, 714, 154, -65, -1000,
	1266, -1000, 15176, 21680, -1000, 547, 941, -1000, 4163, -101,
	-1000, 2727, 2727, -1000, -1000, 55, 717, 1243, -1000, 3229,
	8681, 22141, -107, -1000, 19762, -1000, 19742, 909, 15176, 15176,
	15176, 423, 15176, -1000, -1000, 564, -1000, 400, -1000, -1000,
	-1000, -1000, -1000, -1000, 1219, -21, 714, -1000, -1000, 9211,
	15176, 152, -109, 521, -1000, -1000, -1000, -1000, 616, 8416,
	3229, -114, -1000, -1000, -1000, 738, 904, 54, -115, 149,
	-1000, 8416, -1000, 11587, -1000, 1222, 48, -1000, -116, -1000,
	-1000, -1000, 1397, 45, 8151, 8151, -94, -1000, -1000, 767,
	745, 600, -1000, -1000, -1000, -1000, -1000, 909, 15176, 21680,
	-113, -1000, -1000, 714, -1000, -1000, -1000, -1000, 8946, 853,
	606, 20784, -1000, -1000, 1162, -1000, 428, 911, 911, 738,
	-123, -1000, -1000, 1333, -1000, -1000, -1000, -1000, -1000, -1000,
	1318, -1000, -1000, 958, -1000, -1000, -1000, 7886, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1639, 1632, 1266, 126, 125, 1612, 1611, 1609, 96,
	124, 121, 128, 1608, 88, 1607, 1606, 1605, 91, 1604,
	1603, 1601, 54, 1600, 1599, 1598, 1597, 1596, 84, 24,
	158, 2030, 153, 1594, 1583, 1581, 11, 108, 60, 1577,
	104, 52, 101, 113, 896, 66, 1570, 1569, 133, 27,
	14, 162, 98, 142, 123, 131, 1568, 1567, 1562, 46,
	1560, 1559, 1558, 1557, 47, 18, 1556, 25, 1555, 16,
	1553, 1550, 102, 1549, 99, 114, 23, 120, 12, 1548,
	75, 9, 67, 1547, 29, 1546, 41, 74, 139, 1543,
	50, 146, 51, 26, 57, 1541, 1539, 1536, 1535, 77,
	1533, 89, 111, 1531, 1528, 79, 1527, 132, 130, 1526,
	1525, 135, 1524, 1523, 1522, 664, 1521, 1520, 309, 1518,
	2, 45, 65, 6, 109, 106, 30, 1517, 21, 1516,
	1545, 630, 314, 1515, 53, 49, 82, 43, 58, 36,
	1514, 1506, 103, 1505, 1504, 1501, 1500, 1499, 80, 1498,
	61, 137, 35, 44, 93, 38, 22, 31, 83, 92,
	145, 105, 1497, 1496, 119, 1494, 165, 1493, 1492, 899,
	118, 1491, 1489, 1488, 872, 854, 743, 212, 1487, 1486,
	533, 107, 1485, 1484, 110, 1483, 1482, 138, 1481, 141,
	17, 1480, 116, 1479, 90, 1476, 0, 76, 39, 1473,
	129, 72, 1471, 1468, 1465, 1464, 28, 1, 10, 5,
	7, 3, 20, 19, 1460, 1453, 134, 86, 1451, 144,
	1449, 1448, 42, 1446, 1443, 15, 1438, 13, 1436, 8,
	4, 1432, 136, 1428, 95, 1426, 1358, 1419, 140, 1416,
	1413, 1345, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 140, 140, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 232, 232,
	232, 236, 236, 237, 237, 238, 238, 238, 238, 238,
	238, 238, 234, 234, 24, 24, 24, 24, 24, 119,
	115, 115, 117, 117, 117, 117, 43, 114, 114, 114,
	114, 116, 116, 116, 116, 189, 187, 187, 194, 194,
	194, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 195, 195, 195, 195, 195, 195, 58,
	58, 58, 193, 193, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	188, 188, 233, 233, 235, 235, 8, 8, 59, 59,
	60, 60, 122, 122, 122, 122, 121, 204, 204, 205,
	205, 205, 205, 206, 206, 206, 206, 206, 206, 206,
	202, 202, 203, 200, 200, 201, 201, 201, 201, 239,
	239, 120, 120, 63, 63, 209, 209, 209, 209, 207,
	207, 207, 207, 207, 210, 208, 211, 211, 211, 211,
	211, 151, 151, 151, 27, 7, 7, 104, 104, 67,
	67, 155, 155, 155, 68, 68, 156, 50, 50, 36,
	36, 36, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 105, 105, 106, 106, 19, 23, 26, 26, 26,
	26, 26, 241, 241, 47, 47, 47, 47, 48, 48,
	118, 118, 118, 118, 118, 42, 6, 6, 41, 41,
	18, 18, 18, 18, 18, 53, 53, 111, 111, 111,
	113, 113, 112, 112, 112, 90, 90, 28, 81, 81,
	82, 82, 162, 83, 83, 22, 22, 31, 31, 29,
	29, 29, 29, 29, 29, 30, 30, 32, 32, 32,
	32, 32, 32, 32, 217, 217, 217, 219, 219, 216,
	218, 218, 240, 240, 91, 91, 91, 62, 61, 61,
	65, 65, 64, 66, 66, 154, 88, 88, 88, 88,
	107, 108, 108, 109, 109, 110, 110, 87, 87, 137,
	137, 33, 33, 72, 72, 73, 73, 128, 128, 129,
	129, 127, 127, 127, 157, 157, 157, 157, 158, 158,
	158, 158, 158, 158, 152, 152, 152, 152, 153, 153,
	163, 163, 94, 94, 94, 94, 92, 92, 93, 93,
	159, 159, 159, 159, 89, 89, 160, 160, 160, 123,
	123, 166, 166, 166, 71, 71, 71, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	168, 168, 168, 168, 170, 170, 170, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	171, 171, 178, 178, 179, 179, 180, 181, 172, 172,
	173, 173, 174, 175, 182, 182, 182, 182, 184, 184,
	176, 176, 176, 176, 176, 177, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	102, 102, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 212, 212, 212, 212, 212,
	212, 212, 214, 214, 215, 215, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 220, 220, 221, 221, 222, 222, 223, 223,
	225, 226, 226, 226, 227, 231, 231, 224, 224, 228,
	228, 228, 229, 229, 230, 230, 230, 230, 230, 142,
	142, 142, 143, 143, 144, 78, 78, 139, 139, 138,
	138, 138, 141, 141, 95, 183, 183, 183, 183, 183,
	183, 183, 96, 96, 103, 97, 97, 98, 98, 98,
	98, 98, 98, 134, 135, 99, 99, 99, 136, 136,
	145, 149, 149, 148, 147, 147, 146, 146, 126, 126,
	126, 126, 125, 124, 84, 84, 242, 242, 150, 150,
	85, 85, 86, 80, 80, 161, 161, 161, 161, 74,
	74, 55, 55, 75, 75, 51, 51, 54, 52, 52,
	52, 52, 69, 69, 70, 70, 49, 49, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 185,
	185, 185, 44, 44, 44, 45, 45, 46, 46, 191,
	191, 191, 192, 192, 192, 192, 190, 190, 190, 190,
	190, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 2, 0, 3,
	1, 2, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 5, 3, 1, 4, 5, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 10, 13, 1, 0, 1,
	3, 3, 3, 5, 1, 3, 1, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 2, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 4, 5, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 2,
	2, 1, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -218, 87,
	95, 184, 94, 80, 110, 198, 205, -29, -31, 213,
	-119, 214, 30, 222, 54, 90, 200, 195, 242, 61,
	-217, -32, -30, 288, 263, 269, 208, -33, 229, 256,
	291, 229, 73, 121, 82, 125, 250, 249, 73, 121,
	229, -12, 288, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -196, -198, 16, 17, 19, 29,
	30, 35, 39, 42, 53, 54, 55, 57, 59, 60,
	63, 64, 71, 72, 73, 74, 76, 80, 82, 86,
	87, 89, 94, 95, 100, 101, 104, 106, 111, 116,
	117, 122, 125, 133, 135, 136, 141, 144, 147, 149,
	150, 151, 152, 153, 155, 156, 158, 160, 157, 163,
	165, 166, 172, 175, 178, 179, 182, 184, 186, 187,
	188, 190, 191, 195, 193, 194, 196, 198, 200, 201,
	203, 205, 206, 207, 210, 211, 213, 214, 216, 219,
	221, 222, 225, 223, 228, 230, 231, 238, 242, 243,
	244, 245, 248, 249, 250, 253, 254, 255, 259, 264,
	265, 266, 267, 24, 31, 32, 33, 34, 36, 37,
	40, 41, 45, 46, 47, 49, 75, 77, 78, 93,
	96, 102, 112, 114, 118, 119, 126, 127, 128, 130,
	139, 162, 164, 173, 177, 181, 183, 189, 202, 209,
	217, 218, 224, 226, 233, 234, 235, 239, 240, 256,
	257, -44, -44, 184, 18, -236, 18, -237, -238, 61,
	87, 110, 208, 125, 82, 249, -236, -48, 205, -44,
	-115, 144, 211, 202, 238, -116, -114, -189, 233, 153,
	-76, -44, 4, 73, 53, 74, 111, 121, 122, 58,
	59, 136, 230, 233, 238, 18, 61, -241, 238, 238,
	-241, -241, -47, 238, 236, -48, -240, 229, 229, -104,
	73, 247, -30, -32, -31, -64, -65, 246, 129, 92,
	171, -29, -31, -217, -219, 190, -216, -44, -219, -61,
	-62, 18, 84, 292, -159, -51, 169, -44, -86, 288,
	-3, -159, 118, -44, -54, 118, -51, 108, 131, 131,
	-160, -159, -44, 118, -55, 118, -54, -77, 118, -76,
	-165, -164, -192, 4, -196, -198, -197, 256, 51, 62,
	109, 124, 132, 134, 140, 142, 154, 174, 176, 199,
	215, 229, -140, 288, -100, 288, -44, 18, 168, 292,
	168, -44, -115, 47, -115, 288, -117, -42, -43, 133,
	186, 236, 273, 108, 267, -58, 5, 79, -79, 290,
	108, -233, 168, 108, 108, 108, 108, 108, -188, 108,
	267, 133, 186, 229, -118, -42, -43, -118, 236, -48,
	-89, -159, -76, 118, 121, -44, 118, -64, -65, -88,
	-107, -108, 143, 167, -91, 18, 84, -91, -91, 39,
	289, 289, 292, -219, -70, 288, -80, -161, -130, 281,
	-132, 279, 280, 285, 159, 268, -142, -51, -133, 9,
	288, -145, -214, -31, 93, 25, -143, -144, 202, -44,
	7, 8, 5, 6, -49, -168, -177, 241, 97, 161,
	43, -212, -213, 4, -196, -191, -169, -179, -173, -176,
	130, 51, 66, 69, 67, 70, 212, 251, 44, 24,
	96, 177, 181, 226, 239, 240, 118, 162, 119, 49,
	112, 139, 86, 32, 34, 36, 37, 45, 46, 75,
	77, 78, 102, 126, 127, 128, 164, 189, 217, 224,
	234, 235, 257, -197, -180, -181, -174, -175, -182, -80,
	-86, 281, -51, 288, -84, -126, -125, -124, 286, 290,
	-85, -150, -130, 79, -38, 193, -37, 17, 19, 87,
	254, 93, 193, 193, 93, 293, -160, -53, -51, -53,
	213, -44, 26, 93, -40, 292, 42, 196, 93, -40,
	292, 93, 289, 292, -159, 118, 26, -139, -166, -167,
	-169, -178, -172, -176, -177, 35, 41, 40, 231, 209,
	218, 33, 126, 127, 128, 217, 32, 189, 102, 86,
	78, 77, 164, 37, 36, -180, -181, -174, -175, 75,
	234, 235, 130, 34, 46, 45, 257, 224, -78, -130,
	-232, -75, 229, 73, -52, -44, 281, -238, -232, 26,
	-78, 292, 292, 141, -57, 147, 158, 116, -187, 79,
	-194, -186, -151, 9, 241, 97, 168, -193, 8, 280,
	-185, -192, 5, 7, 279, -187, 79, 64, -195, 5,
	4, -177, -151, 79, 144, 290, -190, 4, -196, -198,
	-197, -199, 18, 20, 21, 22, 23, 25, 26, 27,
	28, 38, 43, 44, 48, 50, 52, 58, 61, 65,
	66, 67, 68, 69, 70, 79, 81, 83, 84, 85,
	88, 90, 92, 97, 98, 99, 105, 107, 108, 110,
	113, 115, 120, 121, 123, 129, 131, 137, 138, 143,
	145, 146, 159, 161, 167, 168, 169, 170, 171, 180,
	185, 192, 197, 208, 212, 220, 227, 229, 232, 236,
	237, 241, 246, 247, 251, 252, 258, 260, 261, 262,
	263, -189, -235, 105, -232, -189, -189, -189, -189, -189,
	-189, 141, -189, 292, 292, -48, -40, 292, 288, 159,
	-45, 118, -44, -41, 89, 159, -88, -108, -107, -109,
	-130, 18, -130, -132, -30, -30, -30, -66, -154, -130,
	-216, 26, -69, -44, -72, 292, 108, 10, 50, 29,
	279, 280, 281, 282, 103, 283, 276, 277, 278, 275,
	271, 272, 273, 56, 148, 204, 12, 13, 14, 22,
	170, 142, 268, 215, 132, 31, 120, 26, 4, -130,
	-130, -130, -130, -130, 176, -31, -130, -78, -84, -31,
	-138, 286, 288, -84, 288, 5, 5, 288, -146, -130,
	-220, 264, 105, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 183,
	-184, 259, -184, -184, -170, 288, -170, -171, 288, -170,
	265, 269, 288, -72, -51, -126, -130, -190, 281, 292,
	289, 292, 236, -105, 58, 52, -121, 118, 52, -200,
	-44, 58, -201, 48, 247, 185, 107, -105, 58, -105,
	58, 58, -159, 236, 236, -54, -44, -123, 261, -111,
	-22, 288, 79, 26, -111, -81, -82, -162, -83, -51,
	288, -44, -44, -54, -55, -76, -77, -12, -164, 93,
	-14, -22, -18, -28, -9, 289, 292, -71, 25, -101,
	288, 266, 151, 76, 117, 150, -102, 207, 289, 292,
	236, 292, -75, -69, -125, -124, 108, 238, 289, -43,
	-42, -56, 188, 219, 194, 210, 292, 8, 7, 7,
	5, -190, -234, -44, -43, -42, -159, -59, -60, -122,
	-121, -202, -203, -200, 121, 247, 98, 93, 168, 159,
	273, 93, -110, 202, 203, 292, -36, 27, 83, 288,
	292, 289, -123, -161, -73, -157, -159, -31, -158, 288,
	-166, -76, 233, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, 142, 215, 31, 120, 236,
	161, 159, 241, 97, 248, 84, 165, -242, 227, 28,
	-136, -31, 288, -190, -142, 202, 288, 289, 292, -78,
	-141, 287, -138, -78, 289, 289, -78, 258, 18, 84,
	281, -101, 7, -149, -148, 260, -221, 100, 113, 288,
	289, 289, -130, -130, -95, -183, 4, 266, 151, 76,
	117, 150, 207, -96, -130, -97, -131, -132, 279, 280,
	285, 288, 202, -98, -130, -78, -130, 38, 138, 237,
	-99, -130, 108, -78, -130, -130, -130, -78, -78, -78,
	288, 7, 7, 233, 233, 7, -123, 289, 287, 296,
	-150, -37, -51, -44, -44, 159, -121, 118, -166, -44,
	288, 288, 135, 135, -44, -44, 118, -44, 118, -44,
	-44, -38, 193, -44, -44, 193, -90, 197, -130, -90,
	-113, 168, -74, -51, 256, -44, 197, -72, 292, 273,
	-74, -40, -40, -159, -166, 286, 286, 7, 236, 236,
	236, 236, 288, -130, -234, -52, -234, -42, 245, 55,
	188, -194, -101, 292, 289, 292, -45, 121, -45, -76,
	-51, 93, 5, -44, -154, -14, -44, -87, 113, 292,
	62, -94, 134, 154, 109, 140, 199, 124, -127, 293,
	-153, -152, 26, -44, -31, -158, -157, 267, -130, 236,
	-242, 227, -136, -130, 161, 241, 97, 248, 84, 165,
	108, 288, -131, -131, -78, 288, -78, -130, 287, 287,
	292, 289, -65, 292, -64, -130, -78, -78, 289, 289,
	-147, -148, 88, -130, -226, 175, 288, 288, -130, 26,
	292, 289, 108, 289, -103, 180, 289, 10, 279, 280,
	281, 282, 103, 283, 276, 277, 278, 275, 271, 272,
	273, 56, 148, 204, 12, 13, 14, 132, 120, -131,
	-131, -131, -78, 288, 289, -134, -135, 108, 105, 26,
	-99, -99, -99, 289, 108, -78, 292, 292, 292, 289,
	289, 289, 7, 289, 292, 289, 267, 267, 289, -87,
	-130, 236, 236, 93, 159, -204, -201, -130, -69, 288,
	288, -35, 87, 213, -106, 93, -40, 93, -40, 236,
	-105, 58, 236, -80, 197, 57, 289, 292, -80, -123,
	-82, -150, 289, 287, 7, 7, 289, 151, 117, 150,
	-102, 150, -102, -102, 7, -44, -122, 288, -45, 288,
	288, 288, -44, -41, 289, -137, 115, 39, -157, 134,
	134, -157, -94, 134, -92, 174, -92, -92, -153, -190,
	294, -44, 288, 289, -130, -130, -131, -131, 108, 288,
	-130, -139, 22, 22, 289, -78, 289, 292, 289, -138,
	289, 258, -65, -65, -65, 5, 90, -130, 232, -227,
	-44, 288, 261, -64, 289, -166, -166, -130, -134, -130,
	-166, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	84, 159, 165, -131, 292, -78, 289, -135, -134, -130,
	-130, -166, 289, 289, 289, -78, -130, -130, -130, 289,
	7, -137, 287, -44, -44, -121, 93, -205, 58, -206,
	50, 98, 159, 161, 247, 185, 48, 79, 192, 289,
	289, -69, -69, 159, 79, 159, 79, 72, 243, -44,
	-44, -51, -44, -44, -44, -80, -112, 288, 168, -22,
	-51, -90, 273, 287, 287, 289, -67, -155, -44, -215,
	288, -212, -213, -49, 288, -68, -156, -44, -59, -67,
	168, -222, 262, -130, -78, -157, -157, -93, 252, 168,
	134, -157, -163, 270, -129, -128, 106, 157, 288, -69,
	-152, 22, 22, -130, -139, 289, -130, -130, 289, -130,
	5, -130, 289, 289, 289, -130, -231, -44, -130, 289,
	289, 289, -135, 108, 84, 165, 288, -130, 289, 289,
	292, 289, 289, 289, -222, -121, -44, -76, -44, 161,
	135, 288, -131, -51, -120, -239, 60, 225, 289, 289,
	161, 161, -130, -166, -40, -40, 236, 236, 85, -69,
	58, -86, -31, 288, 289, 292, -50, -84, 50, -50,
	-130, 288, -67, 289, 292, 289, 289, -51, -223, -225,
	-44, -93, 288, -130, -157, 165, 292, 295, 273, -69,
	289, -130, -130, 289, 289, -65, -224, 179, 289, -131,
	108, 288, -139, 289, -130, -206, -130, -46, 288, 288,
	192, -39, 50, -44, -44, 249, 160, 289, -44, -120,
	-155, -36, -76, -36, 289, -78, 289, -156, -120, 288,
	292, 26, -69, 228, -128, -190, 289, 289, -65, 39,
	-131, -139, 289, 289, 289, -209, 149, -44, -69, -51,
	-34, 252, -76, 213, -123, -50, -65, -120, -67, -225,
	-227, 289, 233, -228, 187, 203, -78, 289, -207, -210,
	-208, 168, 109, 178, 216, 289, 289, -63, 288, -130,
	-81, -36, 289, 289, 5, 289, -229, -230, 31, 244,
	64, -130, -229, -208, 168, -210, 168, 249, 82, -209,
	-69, -123, -120, -230, 182, 104, 202, 182, 104, -211,
	156, 196, 42, 213, -211, -207, 289, 22, 16, 161,
	79, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	351, 0, 0, 0, 0, 0, 0, 325, -2, 0,
	118, 0, 283, 0, 283, 283, 287, 0, 353, 248,
	350, -2, 361, 0, 0, 0, 359, 339, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 772, 773, 774, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 91, 92, 852, 94, 0, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 111, 0, 276, 866, 289,
	114, 832, 870, 933, 882, 121, 131, 0, 939, -2,
	135, 65, 164, 165, 0, 167, 183, 0, 0, 0,
	0, 0, 181, 0, 0, 178, 0, 294, 282, 294,
	279, 280, 281, 284, 0, 275, 0, 352, 0, 0,
	0, 247, -2, 335, 336, -2, 0, 356, 356, 356,
	0, 0, 336, 0, 344, 856, 347, 755, 345, 0,
	0, 358, 357, 0, 340, 420, 0, 745, 381, 0,
	2, 0, 919, 0, 0, 919, 0, 0, 0, 0,
	0, 426, 57, 919, 48, 919, 741, 48, 919, 63,
	0, 79, 81, 782, 783, 784, 785, 944, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 0, 0, 0, 89, 0, 93, 95, 0, 0,
	0, 288, 115, 909, 117, 0, 120, 122, 123, 0,
	0, 0, 0, 0, 0, 134, 159, 160, 66, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 174, 0,
	175, 0, 177, 0, 277, 290, 291, 278, 0, 286,
	48, 424, 0, 919, 776, 299, 919, -2, 0, 331,
	368, 369, 0, 0, 0, 354, 355, 0, 0, 0,
	327, 328, 0, 346, 0, 0, 384, 733, 737, 738,
	512, 0, 0, 0, 0, 0, 0, 593, 594, 595,
	0, 597, 598, 599, 914, 0, 603, 604, 933, 745,
	758, 759, 760, 761, 0, 0, 0, 766, 767, 768,
	717, 643, 613, -2, -2, 756, 450, 451, 452, 453,
	-2, 946, 617, 619, 621, 622, 623, 624, 0, 898,
	915, 929, 930, 938, 942, 943, 919, 926, 920, 910,
	917, 925, 814, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 781, 474, 475, 480, 481, 483, 384,
	382, 421, 422, 0, 746, 724, 718, 719, 0, 0,
	0, 730, 728, 729, 25, 272, 27, 0, 272, 272,
	0, 0, 0, 0, 0, 0, 430, 0, 305, 0,
	0, 427, 0, 0, 59, 0, 46, 47, 0, 61,
	0, 0, 351, 0, 0, 919, 351, 0, 677, 436,
	437, 438, 439, 440, 509, 443, 444, 445, 446, 447,
	448, 449, 457, 458, 459, 460, 461, 462, 471, 0,
	456, 456, 456, 468, 469, 472, 473, 478, 479, 490,
	491, 493, 495, 489, 489, 489, 486, 487, 0, 675,
	0, 98, 0, 809, 743, 748, 751, 104, 0, 0,
	0, 0, 0, 0, 126, 146, 147, 148, 127, 129,
	136, 138, 139, 140, 149, 150, 151, 152, 241, 0,
	243, 162, 163, 769, 0, 128, 130, 132, 133, 153,
	154, 0, 156, 157, 158, 0, 67, 786, 787, 788,
	789, 790, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 166, 168, 0, 182, 169, 170, 171, 172, 173,
	180, 176, 179, 0, 0, 285, 244, 0, 189, 0,
	0, 919, 775, 296, 0, 0, 334, 366, 367, 370,
	373, 374, 371, 512, 341, 342, 343, 362, 363, 261,
	348, 0, 0, 752, 430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 0, 0, 736, 516,
	517, 518, 540, 541, 0, -2, 675, 0, 600, 601,
	602, 0, 0, -2, 0, 763, 509, 0, 0, 716,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 464,
	477, 488, 485, 484, 466, 0, 465, 463, 0, 467,
	0, 0, 0, 430, 0, 725, 0, 722, 723, 0,
	732, 0, 0, 0, 0, 271, 29, 919, 0, 39,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 316, 0, 316,
	307, 0, 0, 0, 303, 384, 318, 320, 321, 0,
	0, 428, 58, 742, 48, 64, 48, 70, 80, 0,
	82, 85, 86, 87, 88, 83, 0, 431, 433, 441,
	0, 496, 497, 498, 499, 500, 501, 510, 90, 0,
	0, 0, 99, 100, 749, 750, 0, 0, 119, 124,
	125, 295, 0, 143, 0, 145, 0, 242, 771, 770,
	509, 68, 184, 112, 292, 293, 425, 0, 188, 190,
	192, 193, 194, 195, 776, 0, 776, 0, 0, 0,
	0, 0, 372, 375, 376, 0, 365, 259, 260, 351,
	0, 754, 378, 734, 383, 385, 393, 409, 396, 0,
	513, 514, 0, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, -2, -2, -2, 532, 533, 534, -2,
	-2, -2, 538, 539, -2, 0, 0, 727, 0, 0,
	546, 0, 549, 551, 553, 0, 0, 0, 0, 726,
	563, 708, 0, 735, 548, 0, 0, 596, 0, 0,
	0, 681, 682, 0, -2, 605, 361, 0, 0, 0,
	0, 764, 0, 715, 711, 0, 653, 0, 0, 0,
	618, 620, 0, 0, 0, 0, 685, 686, 687, 688,
	689, 690, 691, 0, 0, 0, 0, 565, 0, 0,
	0, 0, 933, 0, 675, 701, 0, 0, 0, 0,
	0, 675, 0, 707, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 423, 720, 0,
	731, 28, 263, 0, 0, 0, 31, 919, 198, 0,
	0, 0, 0, 0, 274, 40, 919, 48, 919, 48,
	41, 26, 272, 262, 265, 0, 56, 0, 429, 300,
	301, 0, 0, 739, 309, 306, 0, 430, 0, 0,
	0, 60, 62, 0, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 676, 96, 744, 97, 116, 141, 142,
	144, 137, 155, 0, 186, 0, 0, 776, 0, 0,
	0, 0, 298, 299, 364, 0, 753, 380, 0, 0,
	0, 0, 0, 0, 417, 417, 417, 415, 409, 0,
	395, 408, 0, 407, -2, 396, 0, 0, -2, 0,
	0, 0, 564, -2, 547, 550, 552, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 676, 679, 680,
	0, -2, 0, 0, 360, 361, 361, 361, 611, 0,
	0, 712, 0, 0, 612, 0, 0, 0, 0, 0,
	0, 627, 0, 628, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	568, 569, 0, 0, 630, 699, 700, 0, 0, 0,
	0, 0, 0, 635, 0, 706, 0, 0, 0, 639,
	640, 641, 0, 454, 0, 470, 492, 494, 482, 380,
	0, 0, 0, 0, 0, 196, 213, 0, 0, 0,
	0, 33, 0, 0, 0, 0, 37, 0, 43, 0,
	0, 0, 0, 315, 0, 314, 0, 0, 304, 316,
	319, 322, 0, 434, 0, 0, 442, 502, 503, 504,
	505, 506, 507, 508, 0, 113, 191, 0, 0, 0,
	189, 0, 0, 297, 349, 647, 0, 0, 386, 0,
	0, 0, 0, 0, 412, 416, 413, 414, 411, 391,
	0, 405, 0, 398, 515, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 709, 0, 670, 0, -2, 683,
	606, 0, 0, 0, 0, 765, 710, 714, 0, 651,
	652, 656, 0, 0, 616, 0, 0, 684, 693, 694,
	566, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, -2, -2, -2, 583, 584, 585, -2, -2, -2,
	0, 0, 0, 695, 0, 0, 673, 697, 698, 703,
	704, 0, 632, 633, 634, 705, 0, 0, 0, 476,
	0, 647, 721, 267, 269, 30, 0, 197, 0, 200,
	0, 0, 0, 204, 205, 0, 0, 0, 0, 215,
	222, 0, 0, 0, 45, 0, 0, 273, 0, 48,
	48, 264, 0, 0, 266, 302, 0, 0, 0, 308,
	740, 317, 0, 435, 432, 511, 0, 249, 258, 258,
	0, 614, 615, 0, 0, 0, 254, 256, 0, 0,
	0, 337, 0, 379, 377, 399, 0, 401, 0, 0,
	0, 403, 394, 0, 0, 389, 0, 388, 0, 0,
	397, 0, 0, -2, 0, 557, -2, -2, 669, 676,
	762, 361, 607, 609, 610, 713, 658, 655, 0, 642,
	625, 626, 692, 0, 0, 0, 0, 676, 672, 631,
	0, 637, 638, 455, 338, 32, 0, 201, 202, 203,
	206, 0, 208, 778, 216, 0, 219, 220, 217, 0,
	34, 35, 44, 50, 36, 42, 0, 0, 0, 0,
	0, 323, 324, 0, 222, 0, 261, 757, 0, 261,
	0, 0, 0, 212, 0, 187, 222, 0, 646, 648,
	0, 400, 0, 419, 402, 0, 0, 392, 0, 0,
	406, -2, -2, 558, 671, 0, 361, 0, 644, -2,
	0, 0, 0, 674, 0, 199, 0, 228, 0, 0,
	0, 52, 0, 268, 270, 0, 311, 430, 313, 210,
	250, 251, 257, 252, 258, 361, 222, 255, 245, 0,
	0, 0, 0, 0, 390, 387, 404, 608, 661, 0,
	-2, 0, 591, 636, 207, 233, 0, 0, 0, 224,
	38, 0, 49, 0, 312, 261, 0, 211, 0, 649,
	650, 418, 0, 0, 0, 0, 657, 592, 209, 229,
	230, 0, 225, 226, 227, 777, 221, 228, 0, 51,
	430, 253, 606, 222, 410, 654, 659, 662, -2, 885,
	806, 0, 660, 231, 0, 232, 0, 0, 0, 233,
	0, 310, 246, 0, 664, 665, 666, 667, 668, 234,
	0, 237, 238, 0, 235, 218, 223, 0, 236, 239,
	240, 663,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 277, 3, 283, 278, 3,
	288, 289, 281, 279, 292, 280, 290, 282, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 296, 291,
	271, 273, 272, 3, 293, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 286, 3, 287, 276, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 294, 275, 295, 285,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 274, 57614, 284,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:693
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:699
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:812
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:866
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:867
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:870
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:871
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1098
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1354
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1648
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = []string(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []string(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1687
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1698
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = true
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = false
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1786
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1787
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1807
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = Ascending
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = Descending
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1874
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1916
		{
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1917
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.str = ""
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2011
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2018
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2060
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = []string(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2319
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2323
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = true
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = false
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = false
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = true
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2451
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.str = astFullJoin
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.str = astLeftJoin
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.str = astRightJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.str = astInnerJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2696
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			unimplementedWithIssue(2115)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			unimplementedWithIssue(2115)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2791
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2792
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2856
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = nil
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2901
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2973
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3000
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3040
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3088
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3121
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			unimplemented()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3509
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3510
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3569
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3570
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3596
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3640
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3641
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3644
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3645
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3650
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3678
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3682
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3691
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3692
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3696
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3705
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3706
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4033
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4189
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4225
		{
			unimplemented()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = DNull
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.str = ""
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
