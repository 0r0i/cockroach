// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXECUTE = 57433
const EXPLAIN = 57434
const EXTRACT = 57435
const FALSE = 57436
const FAMILY = 57437
const FETCH = 57438
const FILTER = 57439
const FIRST = 57440
const FLOAT = 57441
const FLOORDIV = 57442
const FOLLOWING = 57443
const FOR = 57444
const FORCE_INDEX = 57445
const FOREIGN = 57446
const FROM = 57447
const FULL = 57448
const GRANT = 57449
const GRANTS = 57450
const GREATEST = 57451
const GROUP = 57452
const GROUPING = 57453
const HAVING = 57454
const HIGH = 57455
const HOUR = 57456
const IF = 57457
const IFNULL = 57458
const IN = 57459
const INDEX = 57460
const INDEXES = 57461
const INITIALLY = 57462
const INNER = 57463
const INSERT = 57464
const INT = 57465
const INT64 = 57466
const INTEGER = 57467
const INTERSECT = 57468
const INTERVAL = 57469
const INTO = 57470
const IS = 57471
const ISOLATION = 57472
const JOIN = 57473
const KEY = 57474
const KEYS = 57475
const LATERAL = 57476
const LEADING = 57477
const LEAST = 57478
const LEFT = 57479
const LEVEL = 57480
const LIKE = 57481
const LIMIT = 57482
const LOCAL = 57483
const LOCALTIME = 57484
const LOCALTIMESTAMP = 57485
const LOW = 57486
const LSHIFT = 57487
const MATCH = 57488
const MINUTE = 57489
const MONTH = 57490
const NAME = 57491
const NAMES = 57492
const NATURAL = 57493
const NEXT = 57494
const NO = 57495
const NO_INDEX_JOIN = 57496
const NORMAL = 57497
const NOT = 57498
const NOTHING = 57499
const NULL = 57500
const NULLIF = 57501
const NULLS = 57502
const NUMERIC = 57503
const OF = 57504
const OFF = 57505
const OFFSET = 57506
const ON = 57507
const ONLY = 57508
const OR = 57509
const ORDER = 57510
const ORDINALITY = 57511
const OUT = 57512
const OUTER = 57513
const OVER = 57514
const OVERLAPS = 57515
const OVERLAY = 57516
const PARTIAL = 57517
const PARTITION = 57518
const PLACING = 57519
const POSITION = 57520
const PRECEDING = 57521
const PRECISION = 57522
const PREPARE = 57523
const PRIMARY = 57524
const PRIORITY = 57525
const RANGE = 57526
const READ = 57527
const REAL = 57528
const RECURSIVE = 57529
const REF = 57530
const REFERENCES = 57531
const RENAME = 57532
const REPEATABLE = 57533
const RELEASE = 57534
const RESTRICT = 57535
const RETURNING = 57536
const REVOKE = 57537
const RIGHT = 57538
const ROLLBACK = 57539
const ROLLUP = 57540
const ROW = 57541
const ROWS = 57542
const RSHIFT = 57543
const SAVEPOINT = 57544
const SEARCH = 57545
const SECOND = 57546
const SELECT = 57547
const SERIAL = 57548
const SERIALIZABLE = 57549
const SESSION = 57550
const SESSION_USER = 57551
const SET = 57552
const SHOW = 57553
const SIMILAR = 57554
const SIMPLE = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const SNAPSHOT = 57558
const SOME = 57559
const SQL = 57560
const START = 57561
const STRICT = 57562
const STRING = 57563
const STORING = 57564
const SUBSTRING = 57565
const SYMMETRIC = 57566
const SYSTEM = 57567
const TABLE = 57568
const TABLES = 57569
const TEXT = 57570
const THEN = 57571
const TIME = 57572
const TIMESTAMP = 57573
const TIMESTAMPTZ = 57574
const TO = 57575
const TRAILING = 57576
const TRANSACTION = 57577
const TREAT = 57578
const TRIM = 57579
const TRUE = 57580
const TRUNCATE = 57581
const TYPE = 57582
const UNBOUNDED = 57583
const UNCOMMITTED = 57584
const UNION = 57585
const UNIQUE = 57586
const UNKNOWN = 57587
const UPDATE = 57588
const UPSERT = 57589
const USER = 57590
const USING = 57591
const VALID = 57592
const VALIDATE = 57593
const VALUE = 57594
const VALUES = 57595
const VARCHAR = 57596
const VARIADIC = 57597
const VARYING = 57598
const WHEN = 57599
const WHERE = 57600
const WINDOW = 57601
const WITH = 57602
const WITHIN = 57603
const WITHOUT = 57604
const YEAR = 57605
const ZONE = 57606
const NOT_LA = 57607
const WITH_LA = 57608
const AS_LA = 57609
const POSTFIXOP = 57610
const UMINUS = 57611

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4542

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 23,
	288, 23,
	-2, 343,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	1, 318,
	165, 318,
	194, 318,
	286, 318,
	288, 318,
	-2, 328,
	-1, 49,
	1, 321,
	165, 321,
	194, 321,
	286, 321,
	288, 321,
	-2, 327,
	-1, 58,
	1, 23,
	288, 23,
	-2, 343,
	-1, 261,
	1, 156,
	288, 156,
	-2, 827,
	-1, 292,
	140, 353,
	164, 353,
	-2, 324,
	-1, 295,
	140, 352,
	164, 352,
	-2, 322,
	-1, 413,
	140, 352,
	164, 352,
	-2, 325,
	-1, 469,
	285, 770,
	-2, 763,
	-1, 470,
	285, 771,
	-2, 764,
	-1, 476,
	5, 487,
	285, 487,
	-2, 912,
	-1, 498,
	5, 453,
	-2, 888,
	-1, 499,
	5, 481,
	285, 481,
	-2, 890,
	-1, 500,
	5, 461,
	-2, 891,
	-1, 501,
	5, 460,
	-2, 892,
	-1, 502,
	5, 481,
	285, 481,
	-2, 895,
	-1, 503,
	5, 481,
	285, 481,
	-2, 896,
	-1, 504,
	5, 482,
	-2, 899,
	-1, 505,
	5, 448,
	-2, 900,
	-1, 506,
	5, 448,
	-2, 901,
	-1, 507,
	5, 463,
	-2, 904,
	-1, 508,
	5, 449,
	-2, 909,
	-1, 509,
	5, 450,
	-2, 910,
	-1, 510,
	5, 451,
	-2, 911,
	-1, 511,
	5, 448,
	-2, 915,
	-1, 512,
	5, 454,
	-2, 920,
	-1, 513,
	5, 452,
	-2, 923,
	-1, 514,
	5, 479,
	285, 479,
	-2, 925,
	-1, 515,
	5, 483,
	-2, 928,
	-1, 516,
	5, 485,
	-2, 929,
	-1, 517,
	5, 478,
	285, 478,
	-2, 933,
	-1, 828,
	89, 328,
	126, 328,
	140, 328,
	164, 328,
	168, 328,
	243, 328,
	-2, 591,
	-1, 836,
	285, 748,
	-2, 737,
	-1, 1025,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 521,
	-1, 1026,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 522,
	-1, 1027,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 523,
	-1, 1031,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 527,
	-1, 1032,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 528,
	-1, 1033,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 529,
	-1, 1036,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 534,
	-1, 1066,
	173, 661,
	-2, 664,
	-1, 1225,
	89, 328,
	126, 328,
	140, 328,
	164, 328,
	168, 328,
	243, 328,
	-2, 401,
	-1, 1229,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 535,
	-1, 1234,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 536,
	-1, 1252,
	173, 660,
	-2, 663,
	-1, 1405,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 537,
	-1, 1410,
	129, 0,
	-2, 547,
	-1, 1418,
	173, 662,
	-2, 665,
	-1, 1450,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 572,
	-1, 1451,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 573,
	-1, 1452,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 574,
	-1, 1456,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 578,
	-1, 1457,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 579,
	-1, 1458,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 580,
	-1, 1561,
	129, 0,
	-2, 548,
	-1, 1564,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 551,
	-1, 1565,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 553,
	-1, 1647,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 552,
	-1, 1648,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 554,
	-1, 1655,
	129, 0,
	-2, 581,
	-1, 1696,
	129, 0,
	-2, 582,
	-1, 1744,
	30, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 887,
}

const sqlNprod = 1026
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21491

var sqlAct = [...]int{

	470, 1743, 1724, 909, 1765, 1600, 1726, 1701, 1742, 1725,
	917, 1524, 1114, 1429, 1622, 785, 1635, 296, 1488, 468,
	467, 1553, 1534, 1545, 35, 998, 318, 460, 83, 1007,
	661, 82, 82, 262, 831, 82, 572, 1539, 82, 1306,
	979, 1525, 982, 1222, 530, 1385, 82, 1305, 1157, 1255,
	981, 1394, 536, 82, 82, 833, 539, 82, 1221, 432,
	82, 82, 82, 763, 918, 1212, 82, 82, 82, 82,
	1208, 344, 766, 1111, 894, 1076, 301, 1052, 885, 1049,
	1010, 941, 781, 16, 401, 443, 22, 932, 12, 635,
	974, 619, 1163, 433, 518, 301, 6, 559, 541, 345,
	295, 948, 339, 303, 48, 531, 402, 442, 532, 616,
	646, 341, 787, 71, 462, 69, 76, 337, 75, 866,
	8, 334, 7, 1008, 862, 5, 77, 4, 306, 985,
	415, 336, 911, 48, 416, 637, 249, 615, 417, 573,
	633, 240, 315, 552, 330, 315, 304, 326, 914, 420,
	78, 315, 73, 326, 49, 72, 50, 74, 1642, 910,
	1772, 1643, 48, 1002, 561, 346, 945, 1739, 1220, 561,
	1621, 561, 1732, 520, 790, 1002, 1723, 300, 300, 938,
	314, 342, 285, 321, 1717, 1698, 550, 1002, 938, 331,
	1169, 1692, 792, 324, 1002, 1682, 1673, 54, 1621, 1002,
	308, 1649, 951, 293, 938, 292, 946, 1646, 1632, 1629,
	1002, 1621, 1630, 791, 1620, 259, 1686, 1621, 56, 806,
	1605, 79, 1604, 1002, 788, 1002, 1585, 519, 1566, 951,
	1563, 951, 1498, 938, 1414, 1002, 789, 951, 1362, 947,
	944, 1357, 789, 1356, 1323, 57, 1357, 1324, 1463, 475,
	1321, 82, 52, 951, 82, 82, 1320, 1417, 53, 951,
	79, 47, 1319, 1252, 797, 951, 951, 1250, 1249, 1194,
	883, 1003, 1251, 951, 1002, 960, 54, 51, 951, 950,
	937, 882, 951, 938, 881, 82, 28, 82, 1210, 82,
	567, 82, 1196, 568, 29, 1002, 949, 56, 1254, 951,
	47, 953, 1624, 1060, 533, 997, 82, 427, 534, 807,
	414, 968, 428, 522, 757, 756, 562, 82, 627, 626,
	367, 562, 408, 562, 57, 28, 313, 58, 82, 82,
	82, 52, 82, 29, 533, 534, 660, 53, 534, 387,
	525, 375, 413, 1741, 1738, 1731, 1693, 54, 1631, 1590,
	1586, 1578, 529, 1577, 1572, 943, 913, 1516, 1571, 1570,
	1523, 1478, 82, 376, 1473, 808, 1472, 82, 56, 82,
	524, 1471, 315, 1420, 1403, 1384, 1366, 942, 613, 1328,
	344, 344, 1325, 1313, 1304, 1276, 625, 1273, 663, 82,
	1271, 82, 82, 82, 82, 57, 82, 1260, 1259, 1195,
	82, 1198, 527, 1128, 1083, 82, 1082, 54, 345, 345,
	407, 82, 565, 315, 553, 553, 664, 560, 839, 760,
	1169, 405, 1057, 1364, 427, 426, 788, 51, 56, 82,
	1734, 1431, 82, 1685, 1665, 564, 802, 799, 800, 801,
	793, 794, 795, 796, 798, 1664, 54, 315, 423, 424,
	1657, 331, 429, 1638, 1627, 57, 1619, 1597, 293, 830,
	292, 1583, 52, 1556, 1532, 1409, 1402, 56, 53, 1381,
	1380, 301, 551, 554, 346, 346, 1379, 1515, 579, 1377,
	1340, 1339, 665, 1303, 1268, 569, 1267, 51, 1246, 1242,
	836, 1054, 1183, 1142, 57, 521, 1141, 656, 1121, 1081,
	1001, 52, 867, 870, 759, 790, 623, 53, 1058, 622,
	874, 860, 859, 1277, 858, 857, 856, 855, 657, 854,
	853, 650, 852, 792, 851, 850, 70, 849, 749, 82,
	848, 1277, 847, 846, 837, 663, 533, 601, 834, 835,
	534, 758, 51, 82, 791, 769, 761, 82, 472, 1277,
	82, 82, 771, 449, 36, 770, 82, 783, 82, 82,
	436, 82, 1277, 664, 82, 879, 82, 82, 1142, 344,
	319, 431, 373, 365, 877, 293, 1291, 777, 293, 293,
	778, 779, 363, 36, 1277, 888, 1522, 1521, 1177, 1176,
	400, 600, 526, 381, 1644, 797, 1520, 345, 1170, 927,
	339, 992, 294, 1282, 746, 302, 1551, 750, 751, 752,
	1327, 753, 36, 578, 876, 755, 872, 1326, 82, 82,
	873, 1282, 899, 901, 302, 1228, 868, 864, 865, 665,
	396, 871, 315, 382, 955, 326, 912, 875, 912, 1282,
	807, 921, 1097, 844, 1540, 910, 326, 1432, 1292, 326,
	1263, 71, 1282, 1077, 76, 933, 75, 863, 935, 1165,
	934, 663, 1672, 346, 77, 252, 1292, 1707, 936, 1047,
	904, 48, 891, 1277, 1282, 48, 1754, 603, 1753, 342,
	930, 907, 1045, 929, 928, 926, 1506, 916, 78, 664,
	73, 973, 925, 72, 959, 74, 808, 1292, 840, 62,
	1363, 290, 895, 278, 1293, 1190, 284, 887, 283, 279,
	887, 1613, 962, 1351, 1612, 868, 886, 871, 542, 1352,
	543, 379, 1293, 299, 1332, 1331, 956, 954, 399, 957,
	1230, 1182, 1181, 961, 865, 864, 1718, 542, 361, 543,
	1180, 1179, 63, 1041, 1043, 542, 1042, 543, 952, 82,
	1048, 1671, 906, 1293, 287, 665, 905, 404, 380, 898,
	298, 82, 82, 1282, 1125, 1124, 1014, 802, 799, 800,
	801, 793, 794, 795, 796, 798, 1284, 1285, 1286, 1278,
	1279, 1280, 1281, 1283, 1689, 544, 1051, 1051, 1709, 66,
	82, 1004, 82, 1287, 1284, 1285, 1286, 1278, 1279, 1280,
	1281, 1283, 300, 1602, 544, 790, 555, 1368, 1292, 949,
	1762, 60, 544, 995, 996, 1278, 1279, 1280, 1281, 1283,
	561, 663, 1077, 792, 1666, 1013, 1044, 1286, 1278, 1279,
	1280, 1281, 1283, 1046, 1158, 241, 67, 897, 1039, 1728,
	1369, 1354, 977, 1753, 791, 1720, 315, 1061, 1065, 664,
	1068, 1055, 1280, 1281, 1283, 246, 288, 294, 61, 602,
	242, 1721, 1342, 976, 1293, 1106, 65, 64, 1167, 1156,
	403, 1118, 1119, 1120, 291, 315, 877, 297, 790, 1127,
	1162, 877, 1005, 243, 978, 82, 82, 82, 1371, 1349,
	1064, 82, 884, 1189, 82, 797, 792, 949, 245, 896,
	82, 82, 82, 82, 82, 579, 82, 82, 1729, 1158,
	1153, 790, 575, 1768, 82, 665, 82, 791, 540, 370,
	372, 1073, 548, 82, 547, 1040, 1494, 1191, 1489, 792,
	1012, 378, 82, 1137, 1131, 1056, 1487, 861, 301, 1278,
	1279, 1280, 1281, 1283, 68, 949, 1730, 1037, 1653, 377,
	791, 1761, 545, 82, 82, 827, 1495, 1266, 397, 82,
	1160, 1152, 1395, 1727, 601, 300, 59, 1603, 797, 344,
	1133, 545, 562, 419, 294, 1752, 1750, 294, 294, 545,
	776, 244, 1132, 1232, 1050, 1538, 1087, 82, 1343, 82,
	82, 82, 990, 1607, 82, 418, 390, 345, 368, 1164,
	828, 797, 378, 82, 832, 366, 1641, 579, 1164, 1606,
	82, 398, 82, 807, 1581, 1171, 1211, 315, 600, 419,
	1038, 790, 247, 1200, 1172, 1766, 1173, 1595, 1459, 1760,
	1168, 1505, 1139, 1334, 1502, 1490, 301, 1491, 1504, 792,
	578, 1227, 1136, 1185, 1188, 1186, 807, 991, 768, 1187,
	1197, 1776, 1199, 579, 1193, 1174, 1090, 1367, 1192, 762,
	791, 1493, 1215, 346, 1702, 1767, 601, 1245, 1496, 808,
	418, 1247, 754, 795, 796, 798, 1201, 1218, 1175, 301,
	1205, 628, 1769, 1257, 1258, 933, 1253, 1213, 935, 1206,
	934, 632, 1226, 1216, 1596, 1582, 1091, 315, 936, 1554,
	1144, 1143, 808, 1460, 603, 48, 36, 1214, 36, 1461,
	1548, 797, 601, 1501, 1390, 1302, 1389, 1503, 1233, 1231,
	600, 36, 630, 1492, 377, 36, 1315, 301, 1239, 1092,
	1089, 964, 1775, 631, 329, 328, 298, 966, 410, 1386,
	1215, 1237, 578, 82, 793, 794, 795, 796, 798, 1209,
	1555, 1262, 1217, 967, 1080, 1218, 1656, 1580, 1338, 1307,
	1408, 1272, 965, 1241, 958, 1393, 600, 395, 393, 392,
	82, 1216, 1359, 391, 799, 800, 801, 793, 794, 795,
	796, 798, 1310, 1311, 1312, 388, 1093, 327, 578, 1494,
	1308, 845, 748, 1079, 1485, 82, 1347, 82, 1329, 82,
	1345, 1333, 1202, 82, 455, 1235, 603, 993, 989, 1240,
	931, 82, 566, 563, 82, 1336, 558, 549, 1353, 1495,
	82, 663, 546, 1361, 82, 1426, 82, 1358, 1614, 767,
	1217, 1152, 1350, 1754, 1360, 80, 236, 384, 421, 251,
	1388, 311, 263, 1391, 652, 1088, 1346, 1376, 1348, 664,
	251, 1399, 603, 3, 999, 921, 1616, 307, 307, 1415,
	903, 317, 1378, 1355, 317, 323, 317, 82, 1396, 1397,
	317, 332, 317, 263, 1422, 1423, 1424, 1383, 1398, 1411,
	1392, 790, 1370, 1372, 1373, 1236, 602, 793, 794, 795,
	796, 798, 1238, 1624, 1668, 945, 315, 887, 1490, 315,
	1491, 422, 1695, 902, 312, 887, 1387, 1419, 1000, 385,
	790, 900, 320, 425, 1687, 665, 1464, 277, 1433, 915,
	791, 784, 1437, 624, 1493, 237, 571, 1474, 792, 940,
	1773, 1496, 82, 82, 82, 946, 1774, 1277, 790, 575,
	82, 82, 1479, 1009, 1374, 1466, 82, 1365, 82, 791,
	82, 82, 82, 82, 1467, 1499, 1500, 579, 82, 248,
	280, 281, 970, 969, 1322, 1178, 1126, 1123, 947, 944,
	1122, 1074, 971, 1053, 1740, 1480, 1484, 1568, 1425, 1203,
	82, 82, 972, 838, 286, 579, 1492, 1601, 602, 239,
	82, 82, 579, 1537, 82, 747, 389, 1530, 1529, 1574,
	1542, 1530, 1529, 82, 82, 1531, 1719, 1265, 1519, 1531,
	1435, 1652, 1098, 1634, 1513, 1078, 601, 1439, 1557, 1543,
	1544, 1536, 843, 1549, 579, 949, 27, 1527, 448, 1486,
	1335, 984, 82, 983, 602, 1509, 666, 653, 642, 471,
	1517, 575, 394, 1518, 601, 636, 1562, 1558, 645, 1470,
	1086, 601, 523, 655, 654, 369, 648, 643, 263, 263,
	473, 576, 474, 577, 869, 461, 574, 302, 340, 1550,
	600, 919, 1075, 1261, 841, 315, 315, 1579, 447, 315,
	453, 452, 1062, 601, 943, 362, 82, 575, 82, 251,
	82, 317, 578, 263, 444, 411, 1552, 82, 600, 1219,
	38, 374, 257, 258, 1161, 600, 1514, 994, 772, 1344,
	307, 289, 1274, 364, 1104, 1096, 82, 1094, 1591, 1085,
	578, 317, 406, 1594, 579, 535, 658, 578, 1592, 920,
	386, 1615, 317, 317, 317, 1006, 556, 600, 939, 82,
	430, 82, 1625, 1533, 1628, 780, 1733, 1617, 310, 82,
	309, 980, 1530, 1529, 383, 36, 603, 82, 629, 578,
	1531, 1623, 963, 282, 1663, 1225, 317, 1667, 1637, 1341,
	1706, 620, 1645, 620, 55, 21, 607, 19, 1640, 18,
	17, 15, 1599, 601, 603, 14, 13, 1651, 20, 11,
	659, 603, 10, 263, 1053, 620, 263, 263, 263, 9,
	263, 26, 25, 24, 263, 1610, 1611, 2, 828, 251,
	1098, 1098, 1661, 82, 82, 765, 1, 82, 0, 0,
	1658, 579, 0, 603, 1633, 82, 1675, 0, 0, 0,
	0, 82, 0, 307, 315, 0, 786, 600, 1684, 82,
	1681, 1530, 1529, 0, 301, 663, 1609, 0, 1677, 1531,
	0, 1679, 0, 1683, 1688, 0, 828, 0, 1678, 578,
	1098, 1098, 1098, 1676, 1690, 82, 82, 82, 877, 82,
	1694, 0, 0, 664, 0, 1691, 0, 1710, 0, 0,
	601, 1704, 0, 0, 0, 0, 0, 82, 1713, 0,
	0, 0, 1243, 1244, 1697, 1711, 0, 1714, 579, 1712,
	0, 1716, 1708, 1715, 0, 1530, 1529, 0, 1722, 0,
	82, 0, 0, 1531, 0, 0, 0, 0, 0, 0,
	1736, 0, 0, 603, 0, 649, 644, 0, 238, 0,
	1748, 0, 1749, 317, 600, 82, 1751, 1737, 602, 665,
	1757, 1755, 1299, 1300, 1301, 1758, 1759, 892, 0, 0,
	1756, 317, 1705, 0, 317, 908, 578, 601, 1771, 1770,
	317, 0, 923, 924, 1009, 317, 602, 1009, 317, 241,
	263, 263, 579, 602, 0, 1777, 1277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 575, 1098, 1098, 242, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 614, 0, 243, 0, 575,
	603, 0, 620, 786, 0, 0, 575, 0, 23, 0,
	0, 601, 245, 578, 0, 0, 0, 0, 40, 1098,
	1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
	1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 575, 1098,
	0, 0, 42, 0, 0, 0, 1282, 0, 47, 0,
	0, 0, 0, 0, 1406, 1407, 0, 0, 0, 0,
	790, 0, 0, 0, 0, 600, 0, 0, 0, 0,
	0, 0, 0, 28, 0, 0, 43, 603, 792, 0,
	31, 29, 0, 0, 0, 602, 0, 578, 0, 0,
	36, 1292, 0, 0, 0, 244, 32, 0, 0, 791,
	0, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	0, 1462, 0, 1009, 1009, 0, 0, 1009, 0, 0,
	0, 0, 0, 975, 0, 0, 247, 0, 575, 0,
	0, 0, 0, 0, 0, 317, 892, 1293, 0, 0,
	797, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	30, 0, 0, 0, 317, 0, 263, 0, 0, 0,
	0, 45, 602, 0, 33, 0, 44, 0, 0, 0,
	0, 34, 0, 0, 54, 807, 0, 0, 0, 37,
	39, 0, 0, 0, 0, 0, 1211, 0, 41, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 1287, 1284,
	1285, 1286, 1278, 1279, 1280, 1281, 1283, 790, 46, 809,
	810, 811, 0, 0, 0, 575, 1098, 0, 0, 812,
	0, 0, 57, 0, 0, 792, 0, 818, 0, 52,
	0, 808, 1215, 0, 1618, 53, 0, 0, 0, 602,
	0, 0, 0, 0, 0, 0, 791, 1218, 0, 317,
	1134, 1135, 806, 0, 51, 892, 0, 1213, 1140, 0,
	0, 0, 1009, 1216, 1145, 1146, 1148, 1150, 1151, 0,
	1154, 1155, 0, 0, 0, 0, 0, 1214, 317, 0,
	1166, 0, 0, 0, 0, 434, 434, 317, 0, 0,
	0, 1547, 575, 0, 0, 537, 317, 797, 1598, 0,
	0, 1098, 0, 0, 0, 801, 793, 794, 795, 796,
	798, 0, 0, 602, 819, 0, 0, 975, 620, 0,
	0, 0, 1217, 975, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 814, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 765, 263, 317, 0, 0, 1204, 0,
	0, 0, 0, 0, 813, 0, 575, 1207, 0, 0,
	0, 0, 0, 0, 1224, 1546, 317, 1098, 0, 0,
	0, 0, 0, 1655, 0, 0, 0, 0, 264, 1277,
	0, 1294, 1295, 1296, 773, 775, 0, 0, 808, 0,
	0, 782, 275, 0, 0, 0, 0, 0, 790, 816,
	809, 810, 811, 822, 823, 824, 825, 826, 0, 0,
	812, 0, 829, 0, 0, 0, 792, 0, 818, 0,
	0, 0, 0, 0, 1291, 0, 266, 0, 0, 0,
	0, 0, 842, 276, 0, 0, 0, 791, 0, 0,
	0, 0, 0, 806, 0, 265, 267, 0, 0, 1696,
	0, 0, 815, 0, 0, 803, 804, 805, 0, 802,
	799, 800, 801, 793, 794, 795, 796, 798, 0, 1282,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 0, 268, 0, 0, 0, 1298, 0, 797, 0,
	0, 0, 269, 270, 0, 0, 0, 786, 1297, 878,
	0, 0, 0, 0, 0, 819, 0, 271, 0, 0,
	0, 0, 0, 0, 1292, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 814, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1375,
	0, 892, 0, 765, 0, 813, 0, 1382, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 317, 0,
	1293, 0, 0, 0, 1224, 0, 0, 0, 1401, 0,
	1224, 0, 0, 0, 0, 0, 0, 0, 0, 808,
	790, 0, 809, 810, 811, 0, 0, 0, 0, 0,
	816, 272, 812, 0, 273, 0, 0, 0, 792, 274,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 0, 791,
	0, 0, 0, 0, 0, 806, 0, 1288, 1289, 1290,
	0, 1287, 1284, 1285, 1286, 1278, 1279, 1280, 1281, 1283,
	0, 0, 0, 815, 0, 0, 803, 804, 805, 0,
	802, 799, 800, 801, 793, 794, 795, 796, 798, 0,
	0, 0, 0, 0, 0, 0, 0, 1587, 0, 0,
	797, 0, 0, 0, 0, 0, 1482, 1483, 892, 0,
	0, 0, 0, 0, 786, 786, 0, 819, 0, 0,
	1507, 0, 1508, 0, 317, 1510, 1511, 1512, 0, 817,
	0, 0, 317, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	0, 0, 1526, 0, 1535, 892, 1526, 0, 0, 0,
	0, 0, 0, 0, 317, 317, 0, 813, 317, 0,
	0, 0, 0, 0, 434, 0, 0, 786, 1224, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 808, 0, 0, 0, 0, 1575, 0, 0, 0,
	0, 0, 816, 790, 0, 809, 810, 811, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 792, 0, 818, 1084, 0, 1095, 0, 1105, 1107,
	1112, 1115, 1116, 1117, 0, 0, 0, 0, 0, 0,
	0, 0, 791, 0, 0, 0, 0, 0, 806, 0,
	892, 0, 1593, 0, 263, 815, 0, 537, 803, 804,
	805, 317, 802, 799, 800, 801, 793, 794, 795, 796,
	798, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	786, 0, 0, 0, 0, 0, 1159, 0, 0, 790,
	0, 0, 0, 797, 0, 0, 0, 1526, 0, 0,
	0, 0, 0, 317, 0, 1636, 0, 792, 0, 818,
	819, 0, 1277, 317, 1294, 1295, 1296, 0, 0, 0,
	0, 786, 817, 0, 0, 0, 0, 1184, 791, 0,
	0, 0, 814, 0, 806, 0, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 782, 0, 0, 0, 1669, 1670, 797,
	0, 1674, 0, 0, 0, 0, 1526, 0, 0, 263,
	0, 0, 0, 0, 808, 1535, 819, 0, 0, 0,
	0, 0, 1282, 786, 0, 816, 0, 790, 0, 809,
	810, 811, 0, 1229, 0, 0, 0, 1234, 814, 812,
	0, 0, 0, 0, 807, 792, 0, 818, 0, 1703,
	786, 317, 0, 263, 0, 0, 1248, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 791, 1292, 0, 0,
	1526, 1636, 806, 1264, 0, 0, 0, 1269, 815, 0,
	0, 803, 804, 805, 0, 802, 799, 800, 801, 793,
	794, 795, 796, 798, 317, 0, 0, 0, 829, 0,
	808, 0, 1317, 0, 1112, 1112, 1112, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 0, 797, 0, 786,
	0, 0, 0, 1293, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 434, 0, 814, 0, 0, 0,
	0, 0, 807, 434, 815, 0, 537, 0, 0, 0,
	0, 802, 799, 800, 801, 793, 794, 795, 796, 798,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 0,
	1288, 1289, 1290, 0, 1287, 1284, 1285, 1286, 1278, 1279,
	1280, 1281, 1283, 0, 0, 0, 0, 0, 0, 0,
	790, 0, 809, 810, 811, 0, 0, 0, 808, 0,
	0, 0, 812, 0, 1404, 0, 1405, 0, 792, 816,
	818, 0, 0, 0, 0, 0, 0, 1410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 791,
	1184, 0, 0, 0, 0, 806, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 803, 804, 805, 0, 802,
	799, 800, 801, 793, 794, 795, 796, 798, 0, 0,
	797, 0, 0, 1468, 1469, 0, 1316, 0, 0, 0,
	0, 0, 1475, 1476, 1477, 0, 0, 819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 790, 0, 809, 810,
	811, 0, 1541, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 0, 792, 1277, 818, 1294, 1295, 1296,
	0, 808, 0, 0, 1561, 0, 0, 1560, 1564, 1565,
	0, 0, 816, 1567, 0, 791, 790, 1569, 809, 810,
	811, 806, 0, 0, 1573, 0, 0, 0, 1576, 0,
	0, 0, 0, 0, 792, 0, 818, 0, 0, 0,
	1291, 0, 1277, 0, 1294, 1295, 1296, 0, 0, 0,
	0, 0, 0, 0, 1559, 791, 0, 0, 0, 1584,
	0, 806, 0, 0, 0, 815, 797, 0, 803, 804,
	805, 0, 802, 799, 800, 801, 793, 794, 795, 796,
	798, 0, 0, 819, 0, 1282, 1700, 1291, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	1608, 0, 0, 0, 0, 814, 797, 0, 0, 0,
	0, 807, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 1626, 0, 0, 0, 0, 0,
	1292, 0, 1282, 813, 0, 817, 0, 0, 0, 0,
	0, 0, 0, 1639, 0, 814, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 1647, 1648, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1292, 816, 0,
	0, 0, 0, 1660, 0, 0, 1293, 0, 0, 0,
	0, 0, 0, 1662, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 0, 0, 0, 537, 0, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 815, 0, 1293, 803, 804, 805, 0, 802, 799,
	800, 801, 793, 794, 795, 796, 798, 0, 0, 0,
	0, 0, 1699, 1288, 1289, 1290, 0, 1287, 1284, 1285,
	1286, 1278, 1279, 1280, 1281, 1283, 0, 0, 0, 0,
	0, 815, 0, 0, 803, 804, 805, 0, 802, 799,
	800, 801, 793, 794, 795, 796, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 1290, 1735, 1287, 1284, 1285, 1286, 1278, 1279,
	1280, 1281, 1283, 0, 0, 0, 1747, 1747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1747,
	84, 85, 667, 86, 668, 669, 670, 671, 672, 673,
	674, 675, 87, 88, 189, 190, 191, 192, 89, 193,
	194, 676, 90, 195, 196, 91, 677, 678, 197, 198,
	199, 679, 200, 680, 348, 681, 92, 93, 94, 0,
	95, 682, 96, 683, 349, 97, 98, 684, 685, 686,
	687, 688, 689, 99, 100, 101, 102, 201, 103, 202,
	203, 690, 691, 104, 692, 693, 694, 105, 106, 695,
	107, 696, 0, 697, 204, 108, 109, 205, 698, 699,
	700, 110, 111, 206, 0, 112, 701, 113, 702, 703,
	350, 704, 114, 207, 705, 208, 706, 115, 116, 209,
	210, 707, 708, 117, 709, 351, 118, 211, 212, 213,
	710, 214, 711, 352, 119, 353, 120, 121, 712, 713,
	215, 354, 122, 355, 714, 123, 715, 716, 124, 0,
	125, 126, 127, 128, 129, 356, 130, 131, 134, 132,
	717, 133, 718, 216, 135, 217, 136, 137, 719, 720,
	721, 722, 723, 138, 218, 357, 139, 358, 219, 140,
	141, 724, 220, 142, 221, 143, 725, 144, 145, 146,
	222, 147, 148, 726, 150, 151, 149, 152, 727, 153,
	359, 154, 155, 223, 156, 0, 157, 158, 159, 728,
	224, 160, 161, 729, 162, 163, 360, 164, 225, 226,
	165, 730, 166, 167, 169, 227, 168, 228, 731, 170,
	732, 171, 172, 733, 229, 230, 231, 734, 735, 173,
	232, 233, 736, 174, 175, 176, 177, 737, 738, 178,
	179, 180, 739, 740, 181, 182, 183, 234, 235, 741,
	184, 742, 743, 744, 745, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 84, 85, 667, 86,
	668, 669, 670, 671, 672, 673, 674, 675, 87, 88,
	189, 190, 191, 192, 89, 193, 194, 676, 90, 195,
	196, 91, 677, 678, 197, 198, 199, 679, 200, 680,
	348, 681, 92, 93, 94, 0, 95, 682, 96, 683,
	349, 97, 98, 684, 685, 686, 687, 688, 689, 99,
	100, 101, 102, 201, 103, 202, 203, 690, 691, 104,
	692, 693, 694, 105, 106, 695, 107, 696, 0, 697,
	204, 108, 109, 205, 698, 699, 700, 110, 111, 206,
	0, 112, 701, 113, 702, 703, 350, 704, 114, 207,
	705, 208, 706, 115, 116, 209, 210, 707, 708, 117,
	709, 351, 118, 211, 212, 213, 710, 214, 711, 352,
	119, 353, 120, 121, 712, 713, 215, 354, 122, 355,
	714, 123, 715, 716, 124, 0, 125, 126, 127, 128,
	129, 356, 130, 131, 134, 132, 717, 133, 718, 216,
	135, 217, 136, 137, 719, 720, 721, 722, 723, 138,
	218, 357, 139, 358, 219, 140, 141, 724, 220, 142,
	221, 143, 725, 144, 145, 146, 222, 147, 148, 726,
	150, 151, 149, 152, 727, 153, 359, 154, 155, 223,
	156, 0, 157, 158, 159, 728, 224, 160, 161, 729,
	162, 163, 360, 164, 225, 226, 165, 730, 166, 167,
	169, 227, 168, 228, 731, 170, 732, 171, 172, 733,
	229, 230, 231, 734, 735, 173, 232, 233, 736, 174,
	175, 176, 177, 737, 738, 178, 179, 180, 739, 740,
	181, 182, 183, 234, 235, 741, 184, 742, 743, 744,
	745, 185, 186, 187, 188, 0, 0, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 880, 84,
	85, 667, 86, 668, 669, 670, 671, 672, 673, 674,
	675, 87, 88, 189, 190, 191, 192, 89, 193, 194,
	676, 90, 195, 196, 91, 677, 678, 197, 198, 199,
	679, 200, 680, 348, 681, 92, 93, 94, 0, 95,
	682, 96, 683, 349, 97, 98, 684, 685, 686, 687,
	688, 689, 99, 100, 101, 102, 201, 103, 202, 203,
	690, 691, 104, 692, 693, 694, 105, 106, 695, 107,
	696, 0, 697, 204, 108, 109, 205, 698, 699, 700,
	110, 111, 206, 0, 112, 701, 113, 702, 703, 350,
	704, 114, 207, 705, 208, 706, 115, 116, 209, 210,
	707, 708, 117, 709, 351, 118, 211, 212, 213, 710,
	214, 711, 352, 119, 353, 120, 121, 712, 713, 215,
	354, 122, 355, 714, 123, 715, 716, 124, 0, 125,
	126, 127, 128, 129, 356, 130, 131, 134, 132, 717,
	133, 718, 216, 135, 217, 136, 137, 719, 720, 721,
	722, 723, 138, 218, 357, 139, 358, 219, 140, 141,
	724, 220, 142, 221, 143, 725, 144, 145, 146, 222,
	147, 148, 726, 150, 151, 149, 152, 727, 153, 359,
	154, 155, 223, 156, 0, 157, 158, 159, 728, 224,
	160, 161, 729, 162, 163, 360, 164, 225, 226, 165,
	730, 166, 167, 169, 227, 168, 228, 731, 170, 732,
	171, 172, 733, 229, 230, 231, 734, 735, 173, 232,
	233, 736, 174, 175, 176, 177, 737, 738, 178, 179,
	180, 739, 740, 181, 182, 183, 234, 235, 741, 184,
	742, 743, 744, 745, 185, 186, 187, 188, 469, 458,
	459, 456, 457, 445, 0, 0, 0, 0, 0, 0,
	84, 85, 1070, 86, 0, 0, 0, 0, 451, 0,
	0, 0, 87, 88, 189, 498, 191, 499, 89, 500,
	501, 0, 90, 195, 196, 91, 466, 484, 502, 503,
	199, 0, 494, 0, 477, 0, 92, 93, 94, 0,
	95, 0, 96, 0, 349, 97, 98, 0, 478, 480,
	0, 479, 481, 99, 100, 101, 102, 504, 103, 505,
	506, 0, 0, 104, 0, 1071, 0, 497, 106, 0,
	107, 0, 0, 0, 450, 108, 109, 485, 464, 0,
	0, 110, 111, 507, 0, 112, 0, 113, 0, 0,
	350, 0, 114, 495, 0, 208, 0, 115, 116, 491,
	493, 0, 0, 117, 0, 351, 118, 508, 509, 510,
	0, 476, 0, 352, 119, 353, 120, 121, 0, 0,
	496, 354, 122, 355, 0, 123, 0, 0, 124, 0,
	125, 126, 127, 128, 129, 356, 130, 131, 134, 132,
	440, 133, 465, 492, 135, 511, 136, 137, 0, 0,
	0, 0, 0, 138, 218, 357, 139, 358, 486, 140,
	141, 0, 487, 142, 221, 143, 0, 144, 145, 146,
	512, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	359, 154, 155, 454, 156, 0, 157, 158, 159, 0,
	224, 160, 161, 482, 162, 163, 360, 164, 513, 226,
	165, 0, 166, 167, 169, 514, 168, 488, 0, 170,
	0, 171, 172, 0, 229, 515, 516, 0, 0, 173,
	489, 490, 463, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 483, 0, 181, 182, 183, 234, 517, 1069,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 441,
	0, 0, 469, 458, 459, 456, 457, 445, 0, 0,
	437, 438, 1072, 0, 84, 85, 439, 86, 0, 446,
	1067, 0, 451, 0, 0, 0, 87, 88, 189, 498,
	191, 499, 89, 500, 501, 0, 90, 195, 196, 91,
	466, 484, 502, 503, 199, 0, 494, 0, 477, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 349, 97,
	98, 0, 478, 480, 0, 479, 481, 99, 100, 101,
	102, 504, 103, 505, 506, 538, 0, 104, 0, 0,
	0, 497, 106, 0, 107, 0, 0, 0, 450, 108,
	109, 485, 464, 0, 0, 110, 111, 507, 0, 112,
	0, 113, 0, 0, 350, 0, 114, 495, 0, 208,
	0, 115, 116, 491, 493, 0, 0, 117, 0, 351,
	118, 508, 509, 510, 0, 476, 0, 352, 119, 353,
	120, 121, 0, 0, 496, 354, 122, 355, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 129, 356,
	130, 131, 134, 132, 440, 133, 465, 492, 135, 511,
	136, 137, 0, 0, 0, 0, 0, 138, 218, 357,
	139, 358, 486, 140, 141, 0, 487, 142, 221, 143,
	0, 144, 145, 146, 512, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 359, 154, 155, 454, 156, 0,
	157, 158, 159, 54, 224, 160, 161, 482, 162, 163,
	360, 164, 513, 226, 165, 0, 166, 167, 169, 514,
	168, 488, 0, 170, 56, 171, 172, 0, 229, 515,
	516, 0, 0, 173, 489, 490, 463, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 483, 0, 181, 182,
	183, 347, 517, 0, 184, 0, 0, 0, 52, 185,
	186, 187, 188, 441, 53, 0, 469, 458, 459, 456,
	457, 445, 0, 0, 437, 438, 0, 0, 84, 85,
	439, 86, 0, 446, 0, 0, 451, 0, 0, 0,
	87, 88, 189, 498, 191, 499, 89, 500, 501, 0,
	90, 195, 196, 91, 466, 484, 502, 503, 199, 0,
	494, 0, 477, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 349, 97, 98, 0, 478, 480, 0, 479,
	481, 99, 100, 101, 102, 504, 103, 505, 506, 0,
	0, 104, 0, 0, 0, 497, 106, 0, 107, 0,
	0, 0, 450, 108, 109, 485, 464, 0, 0, 110,
	111, 507, 0, 112, 0, 113, 0, 0, 350, 0,
	114, 495, 0, 208, 0, 115, 116, 491, 493, 0,
	0, 117, 0, 351, 118, 508, 509, 510, 0, 476,
	0, 352, 119, 353, 120, 121, 0, 0, 496, 354,
	122, 355, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 356, 130, 131, 134, 132, 440, 133,
	465, 492, 135, 511, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 357, 139, 358, 486, 140, 141, 0,
	487, 142, 221, 143, 0, 144, 145, 146, 512, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 359, 154,
	155, 454, 156, 0, 157, 158, 159, 54, 224, 160,
	161, 482, 162, 163, 360, 164, 513, 226, 165, 0,
	166, 167, 169, 514, 168, 488, 0, 170, 56, 171,
	172, 0, 229, 515, 516, 0, 0, 173, 489, 490,
	463, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	483, 0, 181, 182, 183, 347, 517, 0, 184, 0,
	0, 0, 52, 185, 186, 187, 188, 441, 53, 0,
	469, 458, 459, 456, 457, 445, 0, 0, 437, 438,
	0, 0, 84, 85, 439, 86, 0, 446, 0, 0,
	451, 0, 0, 0, 87, 88, 189, 498, 191, 499,
	89, 500, 501, 1108, 90, 195, 196, 91, 466, 484,
	502, 503, 199, 0, 494, 0, 477, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 349, 97, 98, 0,
	478, 480, 0, 479, 481, 99, 100, 101, 102, 504,
	103, 505, 506, 0, 0, 104, 0, 0, 0, 497,
	106, 0, 107, 0, 0, 0, 450, 108, 109, 485,
	464, 0, 0, 110, 111, 507, 0, 112, 0, 113,
	0, 1113, 350, 0, 114, 495, 0, 208, 0, 115,
	116, 491, 493, 0, 0, 117, 0, 351, 118, 508,
	509, 510, 0, 476, 0, 352, 119, 353, 120, 121,
	0, 1109, 496, 354, 122, 355, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 356, 130, 131,
	134, 132, 440, 133, 465, 492, 135, 511, 136, 137,
	0, 0, 0, 0, 0, 138, 218, 357, 139, 358,
	486, 140, 141, 0, 487, 142, 221, 143, 0, 144,
	145, 146, 512, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 359, 154, 155, 454, 156, 0, 157, 158,
	159, 0, 224, 160, 161, 482, 162, 163, 360, 164,
	513, 226, 165, 0, 166, 167, 169, 514, 168, 488,
	0, 170, 0, 171, 172, 0, 229, 515, 516, 0,
	1110, 173, 489, 490, 463, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 483, 0, 181, 182, 183, 234,
	517, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 441, 469, 458, 459, 456, 457, 445, 0, 0,
	0, 0, 437, 438, 84, 85, 0, 86, 439, 0,
	0, 446, 451, 0, 0, 0, 87, 88, 189, 498,
	191, 499, 89, 500, 501, 0, 90, 195, 196, 91,
	466, 484, 502, 503, 199, 0, 494, 0, 477, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 349, 97,
	98, 0, 478, 480, 0, 479, 481, 99, 100, 101,
	102, 504, 103, 505, 506, 0, 0, 104, 0, 0,
	0, 497, 106, 0, 107, 0, 0, 0, 450, 108,
	109, 485, 464, 0, 0, 110, 111, 507, 0, 112,
	0, 113, 0, 0, 350, 0, 114, 495, 0, 208,
	0, 115, 116, 491, 493, 0, 0, 117, 0, 351,
	118, 508, 509, 510, 0, 476, 0, 352, 119, 353,
	120, 121, 0, 0, 496, 354, 122, 355, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 129, 356,
	130, 131, 134, 132, 440, 133, 465, 492, 135, 511,
	136, 137, 0, 0, 0, 0, 0, 138, 218, 357,
	139, 358, 486, 140, 141, 0, 487, 142, 221, 143,
	0, 144, 145, 146, 512, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 359, 154, 155, 454, 156, 0,
	157, 158, 159, 0, 224, 160, 161, 482, 162, 163,
	360, 164, 513, 226, 165, 0, 166, 167, 169, 514,
	168, 488, 0, 170, 0, 171, 172, 0, 229, 515,
	516, 0, 0, 173, 489, 490, 463, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 483, 0, 181, 182,
	183, 234, 517, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 441, 0, 0, 469, 458, 459, 456,
	457, 445, 0, 0, 437, 438, 0, 0, 84, 85,
	439, 86, 0, 446, 1465, 0, 451, 0, 0, 0,
	87, 88, 189, 498, 191, 499, 89, 500, 501, 0,
	90, 195, 196, 91, 466, 484, 502, 503, 199, 0,
	494, 0, 477, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 349, 97, 98, 0, 478, 480, 0, 479,
	481, 99, 100, 101, 102, 504, 103, 505, 506, 0,
	0, 104, 0, 0, 0, 497, 106, 0, 107, 0,
	0, 0, 450, 108, 109, 485, 464, 0, 0, 110,
	111, 507, 0, 112, 0, 113, 0, 0, 350, 0,
	114, 495, 0, 208, 0, 115, 116, 491, 493, 0,
	0, 117, 0, 351, 118, 508, 509, 510, 0, 476,
	0, 352, 119, 353, 120, 121, 0, 0, 496, 354,
	122, 355, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 356, 130, 131, 134, 132, 440, 133,
	465, 492, 135, 511, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 357, 139, 358, 486, 140, 141, 0,
	487, 142, 221, 143, 0, 144, 145, 146, 512, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 359, 154,
	155, 454, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 482, 162, 163, 360, 164, 513, 226, 165, 0,
	166, 167, 169, 514, 168, 488, 0, 170, 0, 171,
	172, 0, 229, 515, 516, 0, 0, 173, 489, 490,
	463, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	483, 0, 181, 182, 183, 234, 517, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 441, 0, 0,
	469, 458, 459, 456, 457, 445, 0, 0, 437, 438,
	0, 0, 84, 85, 439, 86, 0, 446, 1416, 0,
	451, 0, 0, 0, 87, 88, 189, 498, 191, 499,
	89, 500, 501, 0, 90, 195, 196, 91, 466, 484,
	502, 503, 199, 0, 494, 0, 477, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 349, 97, 98, 0,
	478, 480, 0, 479, 481, 99, 100, 101, 102, 504,
	103, 505, 506, 0, 0, 104, 0, 0, 0, 497,
	106, 0, 107, 0, 0, 0, 450, 108, 109, 485,
	464, 0, 0, 110, 111, 507, 0, 112, 0, 113,
	0, 0, 350, 0, 114, 495, 0, 208, 0, 115,
	116, 491, 493, 0, 0, 117, 0, 351, 118, 508,
	509, 510, 0, 476, 0, 352, 119, 353, 120, 121,
	0, 0, 496, 354, 122, 355, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 356, 130, 131,
	134, 132, 440, 133, 465, 492, 135, 511, 136, 137,
	0, 0, 0, 0, 0, 138, 218, 357, 139, 358,
	486, 140, 141, 0, 487, 142, 221, 143, 0, 144,
	145, 146, 512, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 359, 154, 155, 454, 156, 0, 157, 158,
	159, 0, 224, 160, 161, 482, 162, 163, 360, 164,
	513, 226, 165, 0, 166, 167, 169, 514, 168, 488,
	0, 170, 0, 171, 172, 0, 229, 515, 516, 0,
	0, 173, 489, 490, 463, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 483, 0, 181, 182, 183, 234,
	517, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 441, 0, 0, 469, 458, 459, 456, 457, 445,
	0, 0, 437, 438, 0, 0, 84, 85, 439, 86,
	0, 446, 1066, 0, 451, 0, 0, 0, 87, 88,
	189, 498, 191, 499, 89, 500, 501, 0, 90, 195,
	196, 91, 466, 484, 502, 503, 199, 0, 494, 0,
	477, 0, 92, 93, 94, 0, 95, 0, 96, 0,
	349, 97, 98, 0, 478, 480, 0, 479, 481, 99,
	100, 101, 102, 504, 103, 505, 506, 0, 0, 104,
	0, 0, 0, 497, 106, 0, 107, 0, 0, 0,
	450, 108, 109, 485, 464, 0, 0, 110, 111, 507,
	0, 112, 0, 113, 0, 0, 350, 0, 114, 495,
	0, 208, 0, 115, 116, 491, 493, 0, 0, 117,
	0, 351, 118, 508, 509, 510, 0, 476, 0, 352,
	119, 353, 120, 121, 0, 0, 496, 354, 122, 355,
	0, 123, 0, 0, 124, 0, 125, 126, 127, 128,
	129, 356, 130, 131, 134, 132, 440, 133, 465, 492,
	135, 511, 136, 137, 0, 0, 0, 0, 0, 138,
	218, 357, 139, 358, 486, 140, 141, 0, 487, 142,
	221, 143, 0, 144, 145, 146, 512, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 359, 154, 155, 454,
	156, 0, 157, 158, 159, 0, 224, 160, 161, 482,
	162, 163, 360, 164, 513, 226, 165, 0, 166, 167,
	169, 514, 168, 488, 0, 170, 0, 171, 172, 0,
	229, 515, 516, 0, 0, 173, 489, 490, 463, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 483, 0,
	181, 182, 183, 234, 517, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 441, 469, 458, 459, 456,
	457, 445, 0, 0, 0, 0, 437, 438, 84, 85,
	0, 86, 439, 834, 1063, 446, 451, 0, 0, 0,
	87, 88, 189, 498, 191, 499, 89, 500, 501, 0,
	90, 195, 196, 91, 466, 484, 502, 503, 199, 0,
	494, 0, 477, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 349, 97, 98, 0, 478, 480, 0, 479,
	481, 99, 100, 101, 102, 504, 103, 505, 506, 0,
	0, 104, 0, 0, 0, 497, 106, 0, 107, 0,
	0, 0, 450, 108, 109, 485, 464, 0, 0, 110,
	111, 507, 0, 112, 0, 113, 0, 0, 350, 0,
	114, 495, 0, 208, 0, 115, 116, 491, 493, 0,
	0, 117, 0, 351, 118, 508, 509, 510, 0, 476,
	0, 352, 119, 353, 120, 121, 0, 0, 496, 354,
	122, 355, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 356, 130, 131, 134, 132, 440, 133,
	465, 492, 135, 511, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 357, 139, 358, 486, 140, 141, 0,
	487, 142, 221, 143, 0, 144, 145, 146, 512, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 359, 154,
	155, 454, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 482, 162, 163, 360, 164, 513, 226, 165, 0,
	166, 167, 169, 514, 168, 488, 0, 170, 0, 171,
	172, 0, 229, 515, 516, 0, 0, 173, 489, 490,
	463, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	483, 0, 181, 182, 183, 234, 517, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 441, 0, 0,
	469, 458, 459, 456, 457, 445, 0, 0, 437, 438,
	435, 0, 84, 85, 439, 86, 0, 446, 0, 0,
	451, 0, 0, 0, 87, 88, 189, 498, 191, 499,
	89, 500, 501, 0, 90, 195, 196, 91, 466, 484,
	502, 503, 199, 0, 494, 0, 477, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 349, 97, 98, 0,
	478, 480, 0, 479, 481, 99, 100, 101, 102, 504,
	103, 505, 506, 0, 0, 104, 0, 0, 0, 497,
	106, 0, 107, 0, 0, 0, 450, 108, 109, 485,
	464, 0, 0, 110, 111, 507, 0, 112, 0, 113,
	0, 0, 350, 0, 114, 495, 0, 208, 0, 115,
	116, 491, 493, 0, 0, 117, 0, 351, 118, 508,
	509, 510, 0, 476, 0, 352, 119, 353, 120, 121,
	0, 0, 496, 354, 122, 355, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 356, 130, 131,
	134, 132, 440, 133, 465, 492, 135, 511, 136, 137,
	0, 0, 0, 0, 0, 138, 218, 357, 139, 358,
	486, 140, 141, 0, 487, 142, 221, 143, 0, 144,
	145, 146, 512, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 359, 154, 155, 454, 156, 0, 157, 158,
	159, 0, 224, 160, 161, 482, 162, 163, 360, 164,
	513, 226, 165, 0, 166, 167, 169, 514, 168, 488,
	0, 170, 0, 171, 172, 0, 229, 515, 516, 0,
	0, 173, 489, 490, 463, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 483, 0, 181, 182, 183, 234,
	517, 1421, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 441, 469, 458, 459, 456, 457, 445, 0, 0,
	0, 0, 437, 438, 84, 85, 0, 86, 439, 0,
	0, 446, 451, 0, 0, 0, 87, 88, 189, 498,
	191, 499, 89, 500, 501, 0, 90, 195, 196, 91,
	466, 484, 502, 503, 199, 0, 494, 0, 477, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 349, 97,
	98, 0, 478, 480, 0, 479, 481, 99, 100, 101,
	102, 504, 103, 505, 506, 538, 0, 104, 0, 0,
	0, 497, 106, 0, 107, 0, 0, 0, 450, 108,
	109, 485, 464, 0, 0, 110, 111, 507, 0, 112,
	0, 113, 0, 0, 350, 0, 114, 495, 0, 208,
	0, 115, 116, 491, 493, 0, 0, 117, 0, 351,
	118, 508, 509, 510, 0, 476, 0, 352, 119, 353,
	120, 121, 0, 0, 496, 354, 122, 355, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 129, 356,
	130, 131, 134, 132, 440, 133, 465, 492, 135, 511,
	136, 137, 0, 0, 0, 0, 0, 138, 218, 357,
	139, 358, 486, 140, 141, 0, 487, 142, 221, 143,
	0, 144, 145, 146, 512, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 359, 154, 155, 454, 156, 0,
	157, 158, 159, 0, 224, 160, 161, 482, 162, 163,
	360, 164, 513, 226, 165, 0, 166, 167, 169, 514,
	168, 488, 0, 170, 0, 171, 172, 0, 229, 515,
	516, 0, 0, 173, 489, 490, 463, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 483, 0, 181, 182,
	183, 234, 517, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 441, 469, 458, 459, 456, 457, 445,
	0, 0, 0, 0, 437, 438, 84, 85, 0, 86,
	439, 0, 0, 446, 451, 0, 0, 0, 87, 88,
	189, 498, 191, 499, 89, 500, 501, 0, 90, 195,
	196, 91, 466, 484, 502, 503, 199, 0, 494, 0,
	477, 0, 92, 93, 94, 0, 95, 0, 96, 0,
	349, 97, 98, 0, 478, 480, 0, 479, 481, 99,
	100, 101, 102, 504, 103, 505, 506, 0, 0, 104,
	0, 0, 0, 497, 106, 0, 107, 0, 0, 0,
	450, 108, 109, 485, 464, 0, 0, 110, 111, 507,
	0, 112, 0, 113, 0, 1113, 350, 0, 114, 495,
	0, 208, 0, 115, 116, 491, 493, 0, 0, 117,
	0, 351, 118, 508, 509, 510, 0, 476, 0, 352,
	119, 353, 120, 121, 0, 0, 496, 354, 122, 355,
	0, 123, 0, 0, 124, 0, 125, 126, 127, 128,
	129, 356, 130, 131, 134, 132, 440, 133, 465, 492,
	135, 511, 136, 137, 0, 0, 0, 0, 0, 138,
	218, 357, 139, 358, 486, 140, 141, 0, 487, 142,
	221, 143, 0, 144, 145, 146, 512, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 359, 154, 155, 454,
	156, 0, 157, 158, 159, 0, 224, 160, 161, 482,
	162, 163, 360, 164, 513, 226, 165, 0, 166, 167,
	169, 514, 168, 488, 0, 170, 0, 171, 172, 0,
	229, 515, 516, 0, 0, 173, 489, 490, 463, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 483, 0,
	181, 182, 183, 234, 517, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 441, 469, 458, 459, 456,
	457, 445, 0, 0, 0, 0, 437, 438, 84, 85,
	774, 86, 439, 0, 0, 446, 451, 0, 0, 0,
	87, 88, 189, 498, 191, 499, 89, 500, 501, 0,
	90, 195, 196, 91, 466, 484, 502, 503, 199, 0,
	494, 0, 477, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 349, 97, 98, 0, 478, 480, 0, 479,
	481, 99, 100, 101, 102, 504, 103, 505, 506, 0,
	0, 104, 0, 0, 0, 497, 106, 0, 107, 0,
	0, 0, 450, 108, 109, 485, 464, 0, 0, 110,
	111, 507, 0, 112, 0, 113, 0, 0, 350, 0,
	114, 495, 0, 208, 0, 115, 116, 491, 493, 0,
	0, 117, 0, 351, 118, 508, 509, 510, 0, 476,
	0, 352, 119, 353, 120, 121, 0, 0, 496, 354,
	122, 355, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 356, 130, 131, 134, 132, 440, 133,
	465, 492, 135, 511, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 357, 139, 358, 486, 140, 141, 0,
	487, 142, 221, 143, 0, 144, 145, 146, 512, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 359, 154,
	155, 454, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 482, 162, 163, 360, 164, 513, 226, 165, 0,
	166, 167, 169, 514, 168, 488, 0, 170, 0, 171,
	172, 0, 229, 515, 516, 0, 0, 173, 489, 490,
	463, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	483, 0, 181, 182, 183, 234, 517, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 441, 469, 458,
	459, 456, 457, 445, 0, 0, 0, 0, 437, 438,
	84, 85, 0, 86, 439, 0, 0, 446, 451, 0,
	0, 0, 87, 88, 189, 498, 191, 499, 89, 500,
	501, 0, 90, 195, 196, 91, 466, 484, 502, 503,
	199, 0, 494, 0, 477, 0, 92, 93, 94, 0,
	95, 0, 96, 0, 349, 97, 1746, 0, 478, 480,
	0, 479, 481, 99, 100, 101, 102, 504, 103, 505,
	506, 0, 0, 104, 0, 0, 0, 497, 106, 0,
	107, 0, 0, 0, 450, 108, 109, 485, 464, 0,
	0, 110, 111, 507, 0, 112, 0, 113, 0, 0,
	350, 0, 114, 495, 0, 208, 0, 115, 116, 491,
	493, 0, 0, 117, 0, 351, 118, 508, 509, 510,
	0, 476, 0, 352, 119, 353, 120, 121, 0, 0,
	496, 354, 122, 355, 0, 123, 0, 0, 124, 0,
	125, 126, 127, 128, 129, 356, 130, 131, 134, 132,
	440, 133, 465, 492, 135, 511, 136, 137, 0, 0,
	0, 0, 0, 138, 218, 357, 139, 358, 486, 140,
	141, 0, 487, 142, 221, 143, 0, 144, 145, 146,
	512, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	359, 154, 155, 454, 156, 0, 157, 158, 159, 0,
	224, 160, 161, 482, 162, 163, 360, 164, 513, 226,
	165, 0, 166, 167, 169, 514, 168, 488, 0, 170,
	0, 171, 172, 0, 229, 515, 516, 0, 0, 173,
	489, 490, 463, 174, 175, 1745, 177, 0, 0, 178,
	179, 180, 483, 0, 181, 182, 183, 234, 517, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 441,
	469, 458, 459, 456, 457, 445, 0, 0, 0, 0,
	437, 438, 84, 85, 0, 86, 439, 0, 0, 446,
	451, 0, 0, 0, 87, 88, 1744, 498, 191, 499,
	89, 500, 501, 0, 90, 195, 196, 91, 466, 484,
	502, 503, 199, 0, 494, 0, 477, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 349, 97, 1746, 0,
	478, 480, 0, 479, 481, 99, 100, 101, 102, 504,
	103, 505, 506, 0, 0, 104, 0, 0, 0, 497,
	106, 0, 107, 0, 0, 0, 450, 108, 109, 485,
	464, 0, 0, 110, 111, 507, 0, 112, 0, 113,
	0, 0, 350, 0, 114, 495, 0, 208, 0, 115,
	116, 491, 493, 0, 0, 117, 0, 351, 118, 508,
	509, 510, 0, 476, 0, 352, 119, 353, 120, 121,
	0, 0, 496, 354, 122, 355, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 356, 130, 131,
	134, 132, 440, 133, 465, 492, 135, 511, 136, 137,
	0, 0, 0, 0, 0, 138, 218, 357, 139, 358,
	486, 140, 141, 0, 487, 142, 221, 143, 0, 144,
	145, 146, 512, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 359, 154, 155, 454, 156, 0, 157, 158,
	159, 0, 224, 160, 161, 482, 162, 163, 360, 164,
	513, 226, 165, 0, 166, 167, 169, 514, 168, 488,
	0, 170, 0, 171, 172, 0, 229, 515, 516, 0,
	0, 173, 489, 490, 463, 174, 175, 1745, 177, 0,
	0, 178, 179, 180, 483, 0, 181, 182, 183, 234,
	517, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 441, 469, 458, 459, 456, 457, 445, 0, 0,
	0, 0, 437, 438, 84, 85, 0, 86, 439, 0,
	0, 446, 451, 0, 0, 0, 87, 88, 189, 498,
	191, 499, 89, 500, 501, 0, 90, 195, 196, 91,
	466, 484, 502, 503, 199, 0, 494, 0, 477, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 349, 97,
	98, 0, 478, 480, 0, 479, 481, 99, 100, 101,
	102, 504, 103, 505, 506, 0, 0, 104, 0, 0,
	0, 497, 106, 0, 107, 0, 0, 0, 450, 108,
	109, 485, 464, 0, 0, 110, 111, 507, 0, 112,
	0, 113, 0, 0, 350, 0, 114, 495, 0, 208,
	0, 115, 116, 491, 493, 0, 0, 117, 0, 351,
	118, 508, 509, 510, 0, 476, 0, 352, 119, 353,
	120, 121, 0, 0, 496, 354, 122, 355, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 129, 356,
	130, 131, 134, 132, 440, 133, 465, 492, 135, 511,
	136, 137, 0, 0, 0, 0, 0, 138, 218, 357,
	139, 358, 486, 140, 141, 0, 487, 142, 221, 143,
	0, 144, 145, 146, 512, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 359, 154, 155, 454, 156, 0,
	157, 158, 159, 0, 224, 160, 161, 482, 162, 163,
	360, 164, 513, 226, 165, 0, 166, 167, 169, 514,
	168, 488, 0, 170, 0, 171, 172, 0, 229, 515,
	516, 0, 0, 173, 489, 490, 463, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 483, 0, 181, 182,
	183, 234, 517, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 441, 469, 458, 459, 456, 457, 445,
	0, 0, 0, 0, 437, 438, 84, 85, 0, 86,
	439, 0, 0, 446, 451, 0, 0, 0, 87, 88,
	189, 498, 191, 499, 89, 500, 501, 0, 90, 195,
	196, 91, 466, 484, 502, 503, 199, 0, 494, 0,
	477, 0, 92, 93, 94, 0, 95, 0, 96, 0,
	349, 97, 98, 0, 478, 480, 0, 479, 481, 99,
	100, 101, 102, 504, 103, 505, 506, 0, 0, 104,
	0, 0, 0, 497, 106, 0, 107, 0, 0, 0,
	450, 108, 109, 485, 464, 0, 0, 110, 111, 507,
	0, 112, 0, 113, 0, 0, 350, 0, 114, 495,
	0, 208, 0, 115, 116, 491, 493, 0, 0, 117,
	0, 351, 118, 508, 509, 510, 0, 476, 0, 352,
	119, 353, 120, 121, 0, 0, 496, 354, 122, 355,
	0, 123, 0, 0, 124, 0, 125, 126, 127, 128,
	129, 356, 130, 131, 134, 132, 0, 133, 465, 492,
	135, 511, 136, 137, 0, 0, 0, 0, 0, 138,
	218, 357, 139, 358, 486, 140, 141, 0, 487, 142,
	221, 143, 0, 144, 145, 146, 512, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 359, 154, 155, 1103,
	156, 0, 157, 158, 159, 0, 224, 160, 161, 482,
	162, 163, 360, 164, 513, 226, 165, 0, 166, 167,
	169, 514, 168, 488, 0, 170, 0, 171, 172, 0,
	229, 515, 516, 0, 0, 173, 489, 490, 463, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 483, 0,
	181, 182, 183, 234, 517, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 469, 458, 459, 456,
	457, 445, 0, 0, 0, 0, 1099, 1100, 84, 85,
	0, 86, 1101, 0, 0, 1102, 451, 0, 0, 0,
	87, 88, 0, 498, 191, 499, 89, 500, 501, 0,
	90, 195, 196, 91, 466, 484, 502, 503, 199, 0,
	494, 0, 477, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 349, 97, 1746, 0, 478, 480, 0, 479,
	481, 99, 100, 101, 102, 504, 103, 505, 506, 0,
	0, 104, 0, 0, 0, 497, 106, 0, 107, 0,
	0, 0, 450, 108, 109, 485, 464, 0, 0, 110,
	111, 507, 0, 112, 0, 113, 0, 0, 350, 0,
	114, 495, 0, 208, 0, 115, 116, 491, 493, 0,
	0, 117, 0, 351, 118, 508, 509, 510, 0, 476,
	0, 0, 119, 353, 120, 121, 0, 0, 496, 354,
	122, 0, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 356, 130, 131, 134, 132, 440, 133,
	465, 492, 135, 511, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 357, 139, 358, 486, 140, 141, 0,
	487, 142, 221, 143, 0, 144, 145, 146, 512, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 359, 154,
	155, 454, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 482, 162, 163, 0, 164, 513, 226, 165, 0,
	166, 167, 169, 514, 168, 488, 0, 170, 0, 171,
	172, 0, 229, 515, 516, 0, 0, 173, 489, 490,
	463, 174, 175, 1745, 177, 0, 0, 178, 179, 180,
	483, 0, 181, 182, 183, 234, 517, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 437, 438,
	84, 85, 0, 86, 439, 0, 0, 446, 0, 0,
	0, 0, 87, 88, 189, 190, 191, 192, 89, 193,
	194, 0, 90, 195, 196, 91, 0, 484, 197, 198,
	199, 0, 494, 0, 477, 0, 92, 93, 94, 0,
	95, 0, 96, 0, 349, 97, 98, 0, 478, 480,
	0, 479, 481, 99, 100, 101, 102, 201, 103, 202,
	203, 0, 0, 104, 0, 0, 0, 105, 106, 0,
	107, 0, 0, 0, 204, 108, 109, 485, 0, 0,
	0, 110, 111, 206, 0, 112, 0, 113, 0, 0,
	350, 0, 114, 495, 0, 208, 0, 115, 116, 491,
	493, 0, 0, 117, 0, 351, 118, 211, 212, 213,
	0, 214, 0, 352, 119, 353, 120, 121, 0, 0,
	496, 354, 122, 355, 0, 123, 0, 0, 124, 0,
	125, 126, 127, 128, 129, 356, 130, 131, 134, 132,
	0, 133, 0, 492, 135, 217, 136, 137, 0, 0,
	0, 0, 0, 138, 218, 357, 139, 358, 486, 140,
	141, 0, 487, 142, 221, 143, 0, 144, 145, 146,
	222, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	359, 154, 155, 223, 156, 0, 157, 158, 159, 0,
	224, 160, 161, 482, 162, 163, 360, 164, 225, 226,
	165, 0, 166, 167, 169, 227, 168, 488, 0, 170,
	0, 171, 172, 0, 229, 230, 231, 0, 0, 173,
	489, 490, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 483, 0, 181, 182, 183, 234, 235, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 0, 86, 0, 0, 0, 0, 1528,
	0, 0, 0, 87, 88, 189, 190, 191, 192, 89,
	193, 194, 0, 90, 195, 196, 91, 0, 0, 197,
	198, 199, 0, 200, 0, 348, 0, 92, 93, 94,
	0, 95, 0, 96, 0, 349, 97, 98, 0, 0,
	0, 0, 0, 0, 99, 100, 101, 102, 201, 103,
	202, 203, 0, 0, 104, 0, 0, 0, 105, 106,
	0, 107, 0, 0, 0, 204, 108, 109, 205, 0,
	0, 0, 110, 111, 206, 0, 112, 0, 113, 0,
	0, 350, 0, 114, 207, 0, 208, 0, 115, 116,
	209, 210, 0, 0, 117, 0, 351, 118, 211, 212,
	213, 0, 214, 0, 352, 119, 353, 120, 121, 0,
	0, 215, 354, 122, 355, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 356, 130, 131, 134,
	132, 0, 133, 0, 216, 135, 217, 136, 137, 0,
	0, 0, 0, 0, 138, 218, 357, 139, 358, 219,
	140, 141, 0, 220, 142, 221, 143, 0, 144, 145,
	146, 222, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 359, 154, 155, 223, 156, 0, 157, 158, 159,
	54, 224, 160, 161, 0, 162, 163, 360, 164, 225,
	226, 165, 0, 166, 167, 169, 227, 168, 228, 0,
	170, 56, 171, 172, 0, 229, 230, 231, 0, 0,
	173, 232, 233, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 347, 235,
	0, 184, 0, 0, 0, 52, 185, 186, 187, 188,
	0, 53, 343, 647, 0, 648, 643, 638, 0, 0,
	0, 0, 0, 0, 84, 85, 0, 86, 0, 0,
	51, 0, 0, 0, 0, 0, 87, 88, 189, 190,
	191, 192, 89, 193, 194, 0, 90, 195, 196, 91,
	0, 0, 197, 198, 199, 0, 200, 0, 348, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 349, 97,
	98, 0, 0, 0, 0, 0, 0, 99, 100, 101,
	102, 201, 103, 202, 203, 651, 0, 104, 0, 0,
	0, 105, 106, 0, 107, 0, 0, 0, 204, 108,
	109, 205, 640, 0, 0, 110, 111, 206, 0, 112,
	0, 113, 0, 0, 350, 0, 114, 207, 0, 208,
	0, 115, 116, 209, 210, 0, 0, 117, 0, 351,
	118, 211, 212, 213, 0, 214, 0, 352, 119, 353,
	120, 121, 0, 0, 215, 354, 122, 355, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 129, 356,
	130, 131, 134, 132, 0, 133, 0, 216, 135, 217,
	136, 137, 0, 641, 0, 0, 0, 138, 218, 357,
	139, 358, 219, 140, 141, 0, 220, 142, 221, 143,
	0, 144, 145, 146, 222, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 359, 154, 155, 223, 156, 0,
	157, 158, 159, 0, 224, 160, 161, 0, 162, 163,
	360, 164, 225, 226, 165, 0, 166, 167, 169, 227,
	168, 228, 0, 170, 0, 171, 172, 0, 229, 230,
	231, 0, 0, 173, 232, 233, 639, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 234, 235, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 343, 647, 0, 648, 643, 638,
	0, 0, 0, 0, 649, 644, 84, 85, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	189, 190, 191, 192, 89, 193, 194, 0, 90, 195,
	196, 91, 0, 0, 197, 198, 199, 0, 200, 0,
	348, 0, 92, 93, 94, 0, 95, 0, 96, 0,
	349, 97, 98, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 102, 201, 103, 202, 203, 634, 0, 104,
	0, 0, 0, 105, 106, 0, 107, 0, 0, 0,
	204, 108, 109, 205, 640, 0, 0, 110, 111, 206,
	0, 112, 0, 113, 0, 0, 350, 0, 114, 207,
	0, 208, 0, 115, 116, 209, 210, 0, 0, 117,
	0, 351, 118, 211, 212, 213, 0, 214, 0, 352,
	119, 353, 120, 121, 0, 0, 215, 354, 122, 355,
	0, 123, 0, 0, 124, 0, 125, 126, 127, 128,
	129, 356, 130, 131, 134, 132, 0, 133, 0, 216,
	135, 217, 136, 137, 0, 641, 0, 0, 0, 138,
	218, 357, 139, 358, 219, 140, 141, 0, 220, 142,
	221, 143, 0, 144, 145, 146, 222, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 359, 154, 155, 223,
	156, 0, 157, 158, 159, 0, 224, 160, 161, 0,
	162, 163, 360, 164, 225, 226, 165, 0, 166, 167,
	169, 227, 168, 228, 0, 170, 0, 171, 172, 0,
	229, 230, 231, 0, 0, 173, 232, 233, 639, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 234, 235, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 343, 647, 0, 648,
	643, 638, 0, 0, 0, 0, 649, 644, 84, 85,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 189, 190, 191, 192, 89, 193, 194, 0,
	90, 195, 196, 91, 0, 0, 197, 198, 199, 0,
	200, 0, 348, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 349, 97, 98, 0, 0, 0, 0, 0,
	0, 99, 100, 101, 102, 201, 103, 202, 203, 0,
	0, 104, 0, 0, 0, 105, 106, 0, 107, 0,
	0, 0, 204, 108, 109, 205, 640, 0, 0, 110,
	111, 206, 0, 112, 0, 113, 0, 0, 350, 0,
	114, 207, 0, 208, 0, 115, 116, 209, 210, 0,
	0, 117, 0, 351, 118, 211, 212, 213, 0, 214,
	0, 352, 119, 353, 120, 121, 0, 0, 215, 354,
	122, 355, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 356, 130, 131, 134, 132, 0, 133,
	0, 216, 135, 217, 136, 137, 0, 641, 0, 0,
	0, 138, 218, 357, 139, 358, 219, 140, 141, 0,
	220, 142, 221, 143, 0, 144, 145, 146, 222, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 359, 154,
	155, 223, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 0, 162, 163, 360, 164, 225, 226, 165, 0,
	166, 167, 169, 227, 168, 228, 0, 170, 0, 171,
	172, 0, 229, 230, 231, 0, 0, 173, 232, 233,
	639, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 234, 235, 81, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 84,
	85, 0, 86, 0, 0, 0, 0, 0, 649, 644,
	0, 87, 88, 189, 190, 191, 192, 89, 193, 194,
	0, 90, 195, 196, 91, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 0, 0, 97, 98, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 102, 201, 103, 202, 203,
	0, 0, 104, 0, 0, 0, 105, 106, 0, 107,
	0, 0, 0, 204, 108, 109, 205, 0, 0, 0,
	110, 111, 206, 0, 112, 0, 113, 0, 0, 0,
	0, 114, 207, 0, 208, 0, 115, 116, 209, 210,
	0, 0, 117, 0, 0, 118, 211, 212, 213, 0,
	214, 0, 0, 119, 0, 120, 121, 0, 0, 215,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 134, 132, 0,
	133, 0, 216, 135, 217, 136, 137, 0, 0, 316,
	0, 0, 138, 218, 0, 139, 0, 219, 140, 141,
	0, 220, 142, 221, 143, 0, 144, 145, 146, 222,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 223, 156, 0, 157, 158, 159, 54, 224,
	160, 161, 0, 162, 163, 0, 164, 225, 226, 165,
	0, 166, 167, 169, 227, 168, 228, 0, 170, 56,
	171, 172, 0, 229, 230, 231, 0, 0, 173, 232,
	233, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 347, 235, 0, 184,
	0, 0, 0, 52, 185, 186, 187, 188, 81, 53,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 0, 86, 0, 0, 0, 0, 1011, 0,
	0, 0, 87, 88, 189, 190, 191, 192, 89, 193,
	194, 0, 90, 195, 196, 91, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 0, 0, 97, 98, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 102, 201, 103, 202,
	203, 0, 0, 104, 0, 0, 0, 105, 106, 0,
	107, 0, 0, 0, 204, 108, 109, 205, 0, 0,
	0, 110, 111, 206, 0, 112, 0, 113, 0, 0,
	0, 0, 114, 207, 0, 208, 0, 115, 116, 209,
	210, 0, 0, 117, 0, 0, 118, 211, 212, 213,
	0, 214, 0, 0, 119, 0, 120, 121, 0, 0,
	215, 0, 122, 0, 0, 123, 0, 0, 124, 0,
	125, 126, 127, 128, 129, 0, 130, 131, 134, 132,
	0, 133, 0, 216, 135, 217, 136, 137, 0, 0,
	0, 0, 0, 138, 218, 0, 139, 0, 219, 140,
	141, 0, 220, 142, 221, 143, 0, 144, 145, 146,
	222, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 223, 156, 0, 157, 158, 159, 54,
	224, 160, 161, 0, 162, 163, 0, 164, 225, 226,
	165, 0, 166, 167, 169, 227, 168, 228, 0, 170,
	56, 171, 172, 0, 229, 230, 231, 0, 0, 173,
	232, 233, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 347, 235, 0,
	184, 0, 0, 0, 52, 185, 186, 187, 188, 81,
	53, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 0, 86, 0, 0, 0, 0, 51,
	1223, 0, 0, 87, 88, 189, 190, 191, 192, 89,
	193, 194, 0, 90, 195, 196, 91, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 0, 0, 97, 98, 0, 0,
	0, 0, 0, 0, 99, 100, 101, 102, 201, 103,
	202, 203, 0, 0, 104, 0, 0, 0, 105, 106,
	0, 107, 0, 0, 0, 204, 108, 109, 205, 0,
	0, 0, 110, 111, 206, 0, 112, 0, 113, 0,
	0, 0, 0, 114, 207, 0, 208, 0, 115, 116,
	209, 210, 0, 0, 117, 0, 0, 118, 211, 212,
	213, 0, 214, 0, 0, 119, 0, 120, 121, 0,
	0, 215, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 134,
	132, 0, 133, 0, 216, 135, 217, 136, 137, 0,
	0, 0, 0, 0, 138, 218, 0, 139, 0, 219,
	140, 141, 0, 220, 142, 221, 143, 0, 144, 145,
	146, 222, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 223, 156, 0, 157, 158, 159,
	0, 224, 160, 161, 0, 162, 163, 0, 164, 225,
	226, 165, 0, 166, 167, 169, 227, 168, 228, 0,
	170, 0, 171, 172, 0, 229, 230, 231, 0, 0,
	173, 232, 233, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 234, 235,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 0, 86, 0, 0, 0, 0,
	0, 427, 0, 0, 87, 88, 189, 190, 191, 192,
	89, 193, 194, 0, 90, 195, 196, 91, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 0, 97, 98, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 102, 201,
	103, 202, 203, 0, 0, 104, 0, 0, 0, 105,
	106, 0, 107, 0, 0, 0, 204, 108, 109, 205,
	0, 0, 0, 110, 111, 206, 0, 112, 0, 113,
	0, 0, 0, 0, 114, 207, 0, 208, 0, 115,
	116, 209, 210, 0, 0, 117, 0, 0, 118, 211,
	212, 213, 0, 214, 0, 0, 119, 0, 120, 121,
	0, 0, 215, 0, 122, 0, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 0, 130, 131,
	134, 132, 0, 133, 0, 216, 135, 217, 136, 137,
	0, 0, 316, 0, 0, 138, 218, 0, 139, 0,
	219, 140, 141, 0, 220, 142, 221, 143, 0, 144,
	145, 146, 222, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 223, 156, 0, 157, 158,
	159, 0, 224, 160, 161, 0, 162, 163, 0, 164,
	225, 226, 165, 0, 166, 167, 169, 227, 168, 228,
	0, 170, 0, 171, 172, 0, 229, 230, 231, 0,
	0, 173, 232, 233, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 234,
	235, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 0, 86, 0, 0, 0,
	0, 1011, 0, 0, 0, 87, 88, 189, 190, 191,
	192, 89, 193, 194, 0, 90, 195, 196, 91, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 0, 0, 97, 98,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 102,
	201, 103, 202, 203, 0, 0, 104, 0, 0, 0,
	105, 106, 0, 107, 0, 0, 0, 204, 108, 109,
	205, 0, 0, 0, 110, 111, 206, 0, 112, 0,
	113, 0, 0, 0, 0, 114, 207, 0, 208, 0,
	115, 116, 209, 210, 0, 0, 117, 0, 0, 118,
	211, 212, 213, 0, 214, 0, 0, 119, 0, 120,
	121, 0, 0, 215, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 134, 132, 0, 133, 0, 216, 135, 217, 136,
	137, 0, 0, 0, 0, 0, 138, 218, 0, 139,
	0, 219, 140, 141, 0, 220, 142, 221, 143, 0,
	144, 145, 146, 222, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 223, 156, 0, 157,
	158, 159, 0, 224, 160, 161, 0, 162, 163, 0,
	164, 225, 226, 165, 0, 166, 167, 169, 227, 168,
	228, 0, 170, 0, 171, 172, 0, 229, 230, 231,
	0, 0, 173, 232, 233, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	234, 235, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 0, 86, 0, 0,
	0, 0, 922, 0, 0, 0, 87, 88, 189, 190,
	191, 192, 89, 193, 194, 0, 90, 195, 196, 91,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 0, 97,
	98, 0, 0, 0, 0, 0, 0, 99, 100, 101,
	102, 201, 103, 202, 203, 0, 0, 104, 0, 0,
	0, 105, 106, 0, 107, 0, 0, 0, 204, 108,
	109, 205, 0, 0, 0, 110, 111, 206, 0, 112,
	0, 113, 0, 0, 0, 0, 114, 207, 0, 208,
	0, 115, 116, 209, 210, 0, 0, 117, 0, 0,
	118, 211, 212, 213, 0, 214, 0, 0, 119, 0,
	120, 121, 0, 0, 215, 0, 122, 0, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 129, 0,
	130, 131, 134, 132, 0, 133, 0, 216, 135, 217,
	136, 137, 0, 0, 0, 0, 0, 138, 218, 0,
	139, 0, 219, 140, 141, 0, 220, 142, 221, 143,
	0, 144, 145, 146, 222, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 223, 156, 0,
	157, 158, 159, 0, 224, 160, 161, 0, 162, 163,
	0, 164, 225, 226, 165, 0, 166, 167, 169, 227,
	168, 228, 0, 170, 0, 171, 172, 0, 229, 230,
	231, 0, 0, 173, 232, 233, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 234, 235, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 0, 86, 0,
	0, 0, 0, 1431, 0, 0, 0, 87, 88, 189,
	190, 191, 192, 89, 193, 194, 0, 90, 195, 196,
	91, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 0, 0,
	97, 98, 0, 0, 0, 0, 0, 0, 99, 100,
	101, 102, 201, 103, 202, 203, 0, 0, 104, 0,
	0, 0, 105, 106, 0, 107, 0, 0, 0, 204,
	108, 109, 205, 0, 0, 0, 110, 111, 206, 0,
	112, 0, 113, 0, 0, 0, 0, 114, 207, 0,
	208, 0, 115, 116, 209, 210, 0, 0, 117, 0,
	0, 118, 211, 212, 213, 0, 214, 0, 0, 119,
	0, 120, 121, 0, 0, 215, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 134, 132, 0, 133, 0, 216, 135,
	217, 136, 137, 0, 0, 0, 0, 0, 138, 218,
	0, 139, 0, 219, 140, 141, 0, 220, 142, 221,
	143, 0, 144, 145, 146, 222, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 223, 156,
	0, 157, 158, 159, 0, 224, 160, 161, 0, 162,
	163, 0, 164, 225, 226, 165, 0, 166, 167, 169,
	227, 168, 228, 0, 170, 0, 171, 172, 0, 229,
	230, 231, 0, 0, 173, 232, 233, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 234, 235, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 0, 86,
	0, 0, 0, 0, 528, 0, 0, 0, 87, 88,
	189, 190, 191, 192, 89, 193, 194, 0, 90, 195,
	196, 91, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 0,
	0, 97, 98, 0, 0, 0, 0, 0, 0, 99,
	100, 618, 102, 201, 103, 202, 203, 0, 0, 104,
	0, 0, 0, 105, 106, 0, 107, 0, 0, 0,
	204, 108, 109, 205, 0, 0, 0, 110, 111, 206,
	0, 112, 0, 113, 0, 0, 0, 0, 114, 207,
	0, 208, 0, 115, 116, 209, 210, 0, 0, 117,
	0, 0, 118, 211, 212, 213, 0, 214, 0, 0,
	119, 0, 120, 121, 0, 0, 215, 0, 122, 0,
	0, 123, 0, 0, 124, 0, 125, 126, 127, 128,
	129, 0, 130, 131, 134, 132, 0, 133, 0, 216,
	135, 217, 136, 137, 0, 0, 0, 0, 0, 138,
	218, 0, 139, 0, 219, 140, 141, 0, 220, 142,
	221, 143, 0, 144, 145, 146, 222, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 223,
	156, 0, 157, 158, 159, 0, 224, 160, 161, 0,
	162, 163, 0, 164, 225, 226, 165, 0, 166, 167,
	169, 227, 168, 228, 0, 170, 617, 171, 172, 0,
	229, 230, 231, 0, 0, 173, 232, 233, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 234, 235, 81, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 84, 85, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 621, 87,
	88, 189, 190, 191, 192, 89, 193, 194, 0, 90,
	195, 196, 91, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	0, 0, 97, 98, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 102, 201, 103, 202, 203, 0, 0,
	104, 0, 0, 0, 105, 106, 0, 107, 0, 0,
	0, 204, 108, 109, 205, 0, 0, 0, 110, 111,
	206, 0, 112, 0, 113, 0, 0, 0, 0, 114,
	207, 0, 208, 0, 115, 116, 209, 210, 0, 0,
	117, 0, 0, 118, 211, 212, 213, 0, 214, 0,
	0, 119, 0, 120, 121, 0, 0, 215, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 134, 132, 0, 133, 0,
	216, 135, 217, 136, 137, 0, 0, 0, 0, 0,
	138, 218, 0, 139, 0, 219, 140, 141, 0, 220,
	142, 221, 143, 0, 144, 145, 146, 222, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	223, 156, 0, 157, 158, 159, 0, 224, 160, 161,
	0, 162, 163, 0, 164, 225, 226, 165, 0, 166,
	167, 169, 227, 168, 228, 0, 170, 0, 171, 172,
	0, 229, 230, 231, 0, 0, 173, 232, 233, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 234, 235, 343, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 84, 85,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 621,
	87, 88, 189, 190, 191, 192, 89, 193, 194, 0,
	90, 195, 196, 91, 0, 0, 197, 198, 199, 0,
	200, 0, 348, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 349, 97, 98, 0, 0, 0, 0, 0,
	0, 99, 100, 101, 102, 201, 103, 202, 203, 0,
	0, 104, 0, 0, 0, 105, 106, 0, 107, 0,
	0, 0, 204, 108, 109, 205, 0, 0, 0, 110,
	111, 206, 0, 112, 0, 113, 0, 0, 350, 0,
	114, 207, 0, 208, 0, 115, 116, 209, 210, 0,
	0, 117, 0, 351, 118, 211, 212, 213, 0, 214,
	0, 352, 119, 353, 120, 121, 0, 0, 215, 354,
	122, 355, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 356, 130, 131, 134, 132, 0, 133,
	0, 216, 135, 217, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 357, 139, 358, 219, 140, 141, 0,
	220, 142, 221, 143, 0, 144, 145, 146, 222, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 359, 154,
	155, 223, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 0, 162, 163, 360, 164, 225, 226, 165, 0,
	166, 167, 169, 227, 168, 228, 0, 170, 0, 171,
	172, 0, 229, 230, 231, 0, 0, 173, 232, 233,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 234, 235, 81, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 84,
	85, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 189, 190, 191, 192, 89, 193, 194,
	0, 90, 195, 196, 91, 0, 0, 197, 198, 199,
	895, 200, 0, 0, 0, 92, 93, 94, 0, 95,
	893, 96, 0, 0, 97, 98, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 102, 201, 103, 202, 203,
	0, 0, 104, 0, 0, 0, 105, 106, 0, 107,
	0, 0, 0, 204, 108, 109, 205, 0, 988, 0,
	110, 111, 206, 0, 112, 0, 113, 898, 0, 0,
	0, 114, 207, 0, 208, 0, 115, 116, 209, 210,
	0, 986, 117, 0, 0, 118, 211, 212, 213, 0,
	214, 0, 0, 119, 0, 120, 121, 0, 0, 215,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 134, 132, 0,
	133, 0, 216, 135, 217, 136, 137, 0, 0, 0,
	0, 0, 138, 218, 0, 139, 0, 219, 140, 141,
	0, 220, 142, 221, 143, 897, 144, 145, 146, 222,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 223, 156, 0, 157, 158, 159, 0, 224,
	160, 161, 0, 162, 163, 0, 164, 225, 226, 165,
	0, 166, 167, 169, 227, 168, 228, 0, 170, 0,
	171, 172, 0, 229, 230, 231, 0, 0, 173, 232,
	233, 0, 174, 175, 176, 177, 0, 987, 178, 179,
	180, 0, 0, 181, 182, 183, 234, 235, 81, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	84, 85, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 189, 190, 191, 192, 89, 193,
	194, 0, 90, 195, 196, 91, 0, 0, 197, 198,
	199, 895, 200, 0, 0, 890, 92, 93, 94, 0,
	95, 893, 96, 0, 0, 97, 98, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 102, 201, 103, 202,
	203, 0, 0, 104, 0, 0, 0, 105, 106, 0,
	107, 0, 0, 0, 204, 108, 109, 205, 0, 0,
	0, 110, 111, 206, 0, 112, 0, 113, 898, 0,
	0, 0, 114, 207, 0, 208, 0, 115, 116, 889,
	210, 0, 0, 117, 0, 0, 118, 211, 212, 213,
	0, 214, 0, 0, 119, 0, 120, 121, 0, 0,
	215, 0, 122, 0, 0, 123, 0, 0, 124, 0,
	125, 126, 127, 128, 129, 0, 130, 131, 134, 132,
	0, 133, 0, 216, 135, 217, 136, 137, 0, 0,
	0, 0, 0, 138, 218, 0, 139, 0, 219, 140,
	141, 0, 220, 142, 221, 143, 897, 144, 145, 146,
	222, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 223, 156, 0, 157, 158, 159, 0,
	224, 160, 161, 0, 162, 163, 0, 164, 225, 226,
	165, 0, 166, 167, 169, 227, 168, 228, 0, 170,
	0, 171, 172, 0, 229, 230, 231, 0, 0, 173,
	232, 233, 0, 174, 175, 176, 177, 0, 896, 178,
	179, 180, 0, 0, 181, 182, 183, 234, 235, 81,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 84, 85, 0, 86, 0, 0, 0, 0, 0,
	1223, 0, 0, 87, 88, 189, 190, 191, 192, 89,
	193, 194, 0, 90, 195, 196, 91, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 0, 0, 97, 98, 0, 0,
	0, 0, 0, 0, 99, 100, 101, 102, 201, 103,
	202, 203, 0, 0, 104, 0, 0, 0, 105, 106,
	0, 107, 0, 0, 0, 204, 108, 109, 205, 0,
	0, 0, 110, 111, 206, 0, 112, 0, 113, 0,
	0, 0, 0, 114, 207, 0, 208, 0, 115, 116,
	209, 210, 0, 0, 117, 0, 0, 118, 211, 212,
	213, 0, 214, 0, 0, 119, 0, 120, 121, 0,
	0, 215, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 134,
	132, 0, 133, 0, 216, 135, 217, 136, 137, 0,
	0, 0, 0, 0, 138, 218, 0, 139, 0, 219,
	140, 141, 0, 220, 142, 221, 143, 0, 144, 145,
	146, 222, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 223, 156, 0, 157, 158, 159,
	0, 224, 160, 161, 0, 162, 163, 0, 164, 225,
	226, 165, 0, 166, 167, 169, 227, 168, 228, 0,
	170, 0, 171, 172, 0, 229, 230, 231, 0, 0,
	173, 232, 233, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 234, 235,
	81, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 84, 85, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 189, 190, 191, 192,
	89, 193, 194, 0, 90, 195, 196, 91, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 0, 97, 98, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 102, 201,
	103, 202, 203, 0, 0, 104, 0, 0, 0, 105,
	106, 0, 107, 0, 0, 0, 204, 108, 109, 205,
	0, 0, 0, 110, 111, 206, 0, 112, 0, 113,
	0, 0, 0, 0, 114, 207, 0, 208, 0, 115,
	116, 209, 210, 0, 0, 117, 0, 0, 118, 211,
	212, 213, 0, 214, 0, 0, 119, 0, 120, 121,
	0, 0, 215, 0, 122, 0, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 0, 130, 131,
	134, 132, 0, 133, 0, 216, 135, 217, 136, 137,
	0, 0, 316, 0, 0, 138, 218, 0, 139, 0,
	219, 140, 141, 0, 220, 142, 221, 143, 0, 144,
	145, 146, 222, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 223, 156, 0, 157, 158,
	159, 0, 224, 160, 161, 0, 162, 163, 0, 164,
	225, 226, 165, 0, 166, 167, 169, 227, 168, 228,
	0, 170, 0, 171, 172, 0, 229, 230, 231, 0,
	0, 173, 232, 233, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 234,
	235, 81, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 84, 85, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 189, 190, 191,
	192, 89, 193, 194, 0, 90, 195, 196, 91, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 0, 0, 97, 98,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 102,
	201, 103, 202, 203, 0, 0, 104, 0, 0, 0,
	105, 106, 0, 107, 0, 0, 0, 204, 108, 109,
	205, 0, 0, 0, 110, 111, 206, 0, 112, 0,
	113, 0, 0, 0, 0, 114, 207, 0, 208, 0,
	115, 116, 570, 210, 0, 0, 117, 0, 0, 118,
	211, 212, 213, 0, 214, 0, 0, 119, 0, 120,
	121, 0, 0, 215, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 134, 132, 0, 133, 0, 216, 135, 217, 136,
	137, 0, 0, 316, 0, 0, 138, 218, 0, 139,
	0, 219, 140, 141, 0, 220, 142, 221, 143, 0,
	144, 145, 146, 222, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 223, 156, 0, 157,
	158, 159, 0, 224, 160, 161, 0, 162, 163, 0,
	164, 225, 226, 165, 0, 166, 167, 169, 227, 168,
	228, 0, 170, 0, 171, 172, 0, 229, 230, 231,
	0, 0, 173, 232, 233, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	234, 235, 81, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 84, 85, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 189, 190,
	191, 192, 89, 193, 194, 0, 90, 195, 196, 91,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 0, 97,
	98, 0, 0, 0, 0, 0, 0, 99, 100, 101,
	102, 201, 103, 202, 203, 0, 0, 104, 0, 0,
	0, 105, 106, 0, 107, 0, 0, 0, 204, 108,
	109, 205, 0, 0, 0, 110, 111, 206, 0, 112,
	0, 113, 0, 0, 0, 0, 114, 207, 0, 208,
	0, 115, 116, 322, 210, 0, 0, 117, 0, 0,
	118, 211, 212, 213, 0, 214, 0, 0, 119, 0,
	120, 121, 0, 0, 215, 0, 122, 0, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 129, 0,
	130, 131, 134, 132, 0, 133, 0, 216, 135, 217,
	136, 137, 0, 0, 316, 0, 0, 138, 218, 0,
	139, 0, 219, 140, 141, 0, 220, 142, 221, 143,
	0, 144, 145, 146, 222, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 223, 156, 0,
	157, 158, 159, 0, 224, 160, 161, 0, 162, 163,
	0, 164, 225, 226, 165, 0, 166, 167, 169, 227,
	168, 228, 0, 170, 0, 171, 172, 0, 229, 230,
	231, 0, 0, 173, 232, 233, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 234, 235, 81, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 84, 85, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 189,
	190, 191, 192, 89, 193, 194, 0, 90, 195, 196,
	91, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 0, 0,
	97, 98, 0, 0, 0, 0, 0, 0, 99, 100,
	101, 102, 201, 103, 202, 203, 0, 0, 104, 0,
	0, 0, 105, 106, 0, 107, 0, 0, 0, 204,
	108, 109, 205, 0, 0, 0, 110, 111, 206, 0,
	112, 0, 113, 0, 0, 0, 0, 114, 207, 0,
	208, 0, 115, 116, 209, 210, 0, 0, 117, 0,
	0, 118, 211, 212, 213, 0, 214, 0, 0, 119,
	0, 120, 121, 0, 0, 215, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 134, 132, 0, 133, 0, 216, 135,
	217, 136, 137, 0, 0, 0, 0, 0, 138, 218,
	0, 139, 0, 219, 140, 141, 0, 220, 142, 221,
	143, 0, 144, 145, 146, 222, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 223, 156,
	0, 157, 158, 159, 0, 224, 160, 161, 0, 162,
	163, 0, 164, 225, 226, 165, 0, 166, 167, 169,
	227, 168, 228, 0, 170, 0, 171, 172, 0, 229,
	230, 231, 0, 0, 173, 232, 233, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 234, 235, 81, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 84, 85, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	189, 190, 191, 192, 89, 193, 194, 0, 90, 195,
	196, 91, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 0,
	0, 97, 98, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 102, 201, 103, 202, 203, 0, 0, 104,
	0, 0, 0, 105, 106, 0, 107, 0, 0, 0,
	204, 108, 109, 205, 0, 0, 0, 110, 111, 206,
	0, 112, 0, 113, 0, 0, 0, 0, 114, 207,
	0, 208, 0, 115, 116, 1149, 210, 0, 0, 117,
	0, 0, 118, 211, 212, 213, 0, 214, 0, 0,
	119, 0, 120, 121, 0, 0, 215, 0, 122, 0,
	0, 123, 0, 0, 124, 0, 125, 126, 127, 128,
	129, 0, 130, 131, 134, 132, 0, 133, 0, 216,
	135, 217, 136, 137, 0, 0, 0, 0, 0, 138,
	218, 0, 139, 0, 219, 140, 141, 0, 220, 142,
	221, 143, 0, 144, 145, 146, 222, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 223,
	156, 0, 157, 158, 159, 0, 224, 160, 161, 0,
	162, 163, 0, 164, 225, 226, 165, 0, 166, 167,
	169, 227, 168, 228, 0, 170, 0, 171, 172, 0,
	229, 230, 231, 0, 0, 173, 232, 233, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 234, 235, 81, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 84, 85, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 189, 190, 191, 192, 89, 193, 194, 0, 90,
	195, 196, 91, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	0, 0, 97, 98, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 102, 201, 103, 202, 203, 0, 0,
	104, 0, 0, 0, 105, 106, 0, 107, 0, 0,
	0, 204, 108, 109, 205, 0, 0, 0, 110, 111,
	206, 0, 112, 0, 113, 0, 0, 0, 0, 114,
	207, 0, 208, 0, 115, 116, 1147, 210, 0, 0,
	117, 0, 0, 118, 211, 212, 213, 0, 214, 0,
	0, 119, 0, 120, 121, 0, 0, 215, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 134, 132, 0, 133, 0,
	216, 135, 217, 136, 137, 0, 0, 0, 0, 0,
	138, 218, 0, 139, 0, 219, 140, 141, 0, 220,
	142, 221, 143, 0, 144, 145, 146, 222, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	223, 156, 0, 157, 158, 159, 0, 224, 160, 161,
	0, 162, 163, 0, 164, 225, 226, 165, 0, 166,
	167, 169, 227, 168, 228, 0, 170, 0, 171, 172,
	0, 229, 230, 231, 0, 0, 173, 232, 233, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 234, 235, 81, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 84, 85,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 189, 190, 191, 192, 89, 193, 194, 0,
	90, 195, 196, 91, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 0, 97, 98, 0, 0, 0, 0, 0,
	0, 99, 100, 101, 102, 201, 103, 202, 203, 0,
	0, 104, 0, 0, 0, 105, 106, 0, 107, 0,
	0, 0, 204, 108, 109, 205, 0, 0, 0, 110,
	111, 206, 0, 112, 0, 113, 0, 0, 0, 0,
	114, 207, 0, 208, 0, 115, 116, 1138, 210, 0,
	0, 117, 0, 0, 118, 211, 212, 213, 0, 214,
	0, 0, 119, 0, 120, 121, 0, 0, 215, 0,
	122, 0, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 0, 130, 131, 134, 132, 0, 133,
	0, 216, 135, 217, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 0, 139, 0, 219, 140, 141, 0,
	220, 142, 221, 143, 0, 144, 145, 146, 222, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 223, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 0, 162, 163, 0, 164, 225, 226, 165, 0,
	166, 167, 169, 227, 168, 228, 0, 170, 0, 171,
	172, 0, 229, 230, 231, 0, 0, 173, 232, 233,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 234, 235, 81, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 84,
	85, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 189, 190, 191, 192, 89, 193, 194,
	0, 90, 195, 196, 91, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 0, 0, 97, 98, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 102, 201, 103, 202, 203,
	0, 0, 104, 0, 0, 0, 105, 106, 0, 107,
	0, 0, 0, 204, 108, 109, 205, 0, 0, 0,
	110, 111, 206, 0, 112, 0, 113, 0, 0, 0,
	0, 114, 207, 0, 208, 0, 115, 116, 764, 210,
	0, 0, 117, 0, 0, 118, 211, 212, 213, 0,
	214, 0, 0, 119, 0, 120, 121, 0, 0, 215,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 134, 132, 0,
	133, 0, 216, 135, 217, 136, 137, 0, 0, 0,
	0, 0, 138, 218, 0, 139, 0, 219, 140, 141,
	0, 220, 142, 221, 143, 0, 144, 145, 146, 222,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 223, 156, 0, 157, 158, 159, 0, 224,
	160, 161, 0, 162, 163, 0, 164, 225, 226, 165,
	0, 166, 167, 169, 227, 168, 228, 0, 170, 0,
	171, 172, 0, 229, 230, 231, 0, 0, 173, 232,
	233, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 234, 235, 81, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	84, 85, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 189, 190, 191, 192, 89, 193,
	194, 0, 90, 195, 196, 91, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 0, 0, 97, 98, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 102, 201, 103, 202,
	203, 0, 0, 104, 0, 0, 0, 105, 106, 0,
	107, 0, 0, 0, 204, 108, 109, 205, 0, 0,
	0, 110, 111, 206, 0, 112, 0, 113, 0, 0,
	0, 0, 114, 207, 0, 208, 0, 115, 116, 209,
	210, 0, 0, 117, 0, 0, 118, 211, 212, 213,
	0, 214, 0, 0, 119, 0, 120, 121, 0, 0,
	215, 0, 122, 0, 0, 123, 0, 0, 124, 0,
	125, 126, 127, 128, 129, 0, 130, 131, 134, 132,
	0, 133, 0, 216, 135, 217, 136, 137, 0, 0,
	0, 0, 0, 138, 218, 0, 139, 0, 219, 140,
	141, 0, 220, 142, 221, 143, 0, 144, 145, 146,
	222, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 223, 156, 0, 250, 158, 159, 0,
	224, 160, 161, 0, 162, 163, 0, 164, 225, 226,
	165, 0, 166, 167, 169, 227, 168, 228, 0, 170,
	0, 171, 172, 0, 229, 230, 231, 0, 0, 173,
	232, 233, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 234, 235, 81,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 84, 85, 0, 86, 0, 0, 0, 0, 0,
	557, 0, 0, 87, 88, 189, 190, 191, 192, 89,
	193, 194, 0, 90, 195, 196, 91, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 0, 0, 97, 98, 0, 0,
	0, 0, 0, 0, 99, 100, 101, 102, 201, 103,
	202, 203, 0, 0, 104, 0, 0, 0, 105, 106,
	0, 107, 0, 0, 0, 204, 108, 109, 205, 0,
	0, 0, 110, 111, 206, 0, 112, 0, 113, 0,
	0, 0, 0, 114, 207, 0, 208, 0, 115, 116,
	209, 210, 0, 0, 117, 0, 0, 118, 211, 212,
	213, 0, 214, 0, 0, 119, 0, 120, 121, 0,
	0, 215, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 134,
	132, 0, 133, 0, 216, 135, 217, 136, 137, 0,
	0, 0, 0, 0, 138, 218, 0, 139, 0, 219,
	140, 141, 0, 220, 142, 221, 143, 0, 144, 145,
	146, 222, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 223, 156, 0, 157, 158, 159,
	0, 224, 160, 161, 0, 0, 163, 0, 164, 225,
	226, 165, 0, 166, 167, 169, 227, 168, 228, 0,
	170, 0, 171, 172, 0, 229, 230, 231, 0, 0,
	173, 232, 233, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 234, 235,
	81, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 84, 85, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 189, 190, 191, 192,
	89, 193, 194, 0, 90, 195, 196, 91, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 0, 97, 98, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 102, 201,
	103, 202, 203, 0, 0, 104, 0, 0, 0, 105,
	106, 0, 107, 0, 0, 0, 204, 108, 109, 205,
	0, 0, 0, 110, 111, 206, 0, 112, 0, 113,
	0, 0, 0, 0, 114, 207, 0, 208, 0, 115,
	116, 412, 210, 0, 0, 117, 0, 0, 118, 211,
	212, 213, 0, 214, 0, 0, 119, 0, 120, 121,
	0, 0, 215, 0, 122, 0, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 0, 130, 131,
	134, 132, 0, 133, 0, 216, 135, 217, 136, 137,
	0, 0, 0, 0, 0, 138, 218, 0, 139, 0,
	219, 140, 141, 0, 220, 142, 221, 143, 0, 144,
	145, 146, 222, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 223, 156, 0, 157, 158,
	159, 0, 224, 160, 161, 0, 162, 163, 0, 164,
	225, 226, 165, 0, 166, 167, 169, 227, 168, 228,
	0, 170, 0, 171, 172, 0, 229, 230, 231, 0,
	0, 173, 232, 233, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 234,
	235, 81, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 84, 85, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 189, 190, 191,
	192, 89, 193, 194, 0, 90, 195, 196, 91, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 0, 0, 97, 98,
	0, 0, 0, 0, 0, 0, 99, 100, 101, 102,
	201, 103, 202, 203, 0, 0, 104, 0, 0, 0,
	105, 106, 0, 107, 0, 0, 0, 204, 108, 109,
	205, 0, 0, 0, 110, 111, 206, 0, 112, 0,
	113, 0, 0, 0, 0, 114, 207, 0, 208, 0,
	115, 116, 409, 210, 0, 0, 117, 0, 0, 118,
	211, 212, 213, 0, 214, 0, 0, 119, 0, 120,
	121, 0, 0, 215, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 134, 132, 0, 133, 0, 216, 135, 217, 136,
	137, 0, 0, 0, 0, 0, 138, 218, 0, 139,
	0, 219, 140, 141, 0, 220, 142, 221, 143, 0,
	144, 145, 146, 222, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 223, 156, 0, 157,
	158, 159, 0, 224, 160, 161, 0, 162, 163, 0,
	164, 225, 226, 165, 0, 166, 167, 169, 227, 168,
	228, 0, 170, 0, 171, 172, 0, 229, 230, 231,
	0, 0, 173, 232, 233, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	234, 235, 81, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 84, 85, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 189, 190,
	191, 192, 89, 193, 194, 0, 90, 195, 196, 91,
	0, 0, 197, 198, 371, 0, 200, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 0, 0, 97,
	98, 0, 0, 0, 0, 0, 0, 99, 100, 101,
	102, 201, 103, 202, 203, 0, 0, 104, 0, 0,
	0, 105, 106, 0, 107, 0, 0, 0, 204, 108,
	109, 205, 0, 0, 0, 110, 111, 206, 0, 112,
	0, 113, 0, 0, 0, 0, 114, 207, 0, 208,
	0, 115, 116, 209, 210, 0, 0, 117, 0, 0,
	118, 211, 212, 213, 0, 214, 0, 0, 119, 0,
	120, 121, 0, 0, 215, 0, 122, 0, 0, 123,
	0, 0, 124, 0, 125, 126, 127, 128, 261, 0,
	130, 131, 134, 132, 0, 133, 0, 216, 135, 217,
	136, 137, 0, 0, 0, 0, 0, 138, 218, 0,
	139, 0, 219, 140, 141, 0, 220, 142, 221, 143,
	0, 144, 145, 146, 222, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 223, 156, 0,
	157, 158, 159, 0, 224, 160, 161, 0, 162, 163,
	0, 164, 225, 226, 165, 0, 166, 167, 169, 227,
	168, 228, 0, 170, 0, 171, 172, 0, 260, 230,
	231, 0, 0, 256, 232, 233, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 234, 235, 81, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 84, 85, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 189,
	190, 191, 192, 89, 193, 194, 0, 90, 195, 196,
	91, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 0, 0,
	97, 98, 0, 0, 0, 0, 0, 0, 99, 100,
	101, 102, 201, 103, 202, 203, 0, 0, 104, 0,
	0, 0, 105, 106, 0, 107, 0, 0, 0, 204,
	108, 109, 205, 0, 0, 0, 110, 111, 206, 0,
	112, 0, 113, 0, 0, 0, 0, 114, 207, 0,
	208, 0, 115, 116, 209, 210, 0, 0, 117, 0,
	0, 118, 211, 212, 213, 0, 214, 0, 0, 119,
	0, 120, 121, 0, 0, 215, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 261,
	0, 130, 131, 134, 132, 0, 133, 0, 216, 135,
	217, 136, 137, 0, 0, 0, 0, 0, 138, 218,
	0, 139, 0, 219, 140, 141, 0, 220, 142, 221,
	143, 0, 144, 145, 146, 222, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 223, 156,
	0, 157, 158, 159, 0, 224, 160, 161, 0, 162,
	163, 0, 164, 225, 226, 165, 0, 166, 167, 169,
	227, 168, 228, 0, 170, 0, 171, 172, 0, 260,
	230, 231, 0, 0, 256, 232, 233, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 234, 235, 81, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 84, 85, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	189, 190, 191, 192, 89, 193, 194, 0, 90, 195,
	196, 91, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 0,
	0, 97, 98, 0, 0, 0, 0, 0, 0, 99,
	100, 101, 102, 201, 103, 202, 203, 0, 0, 104,
	0, 0, 0, 105, 106, 0, 107, 0, 0, 0,
	204, 108, 109, 205, 0, 0, 0, 110, 111, 206,
	0, 112, 0, 113, 0, 0, 0, 0, 114, 207,
	0, 208, 0, 115, 116, 338, 210, 0, 0, 117,
	0, 0, 118, 211, 212, 213, 0, 214, 0, 0,
	119, 0, 120, 121, 0, 0, 215, 0, 122, 0,
	0, 123, 0, 0, 124, 0, 125, 126, 127, 128,
	129, 0, 130, 131, 134, 132, 0, 133, 0, 216,
	135, 217, 136, 137, 0, 0, 0, 0, 0, 138,
	218, 0, 139, 0, 219, 140, 141, 0, 220, 142,
	221, 143, 0, 144, 145, 146, 222, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 223,
	156, 0, 157, 158, 159, 0, 224, 160, 161, 0,
	162, 163, 0, 164, 225, 226, 165, 0, 166, 167,
	169, 227, 168, 228, 0, 170, 0, 171, 172, 0,
	229, 230, 231, 0, 0, 173, 232, 233, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 234, 235, 81, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 84, 85, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 189, 190, 191, 192, 89, 193, 194, 0, 90,
	195, 196, 91, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	0, 0, 97, 98, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 102, 201, 103, 202, 203, 0, 0,
	104, 0, 0, 0, 105, 106, 0, 107, 0, 0,
	0, 204, 108, 109, 205, 0, 0, 0, 110, 111,
	206, 0, 112, 0, 113, 0, 0, 0, 0, 114,
	207, 0, 208, 0, 115, 116, 335, 210, 0, 0,
	117, 0, 0, 118, 211, 212, 213, 0, 214, 0,
	0, 119, 0, 120, 121, 0, 0, 215, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 134, 132, 0, 133, 0,
	216, 135, 217, 136, 137, 0, 0, 0, 0, 0,
	138, 218, 0, 139, 0, 219, 140, 141, 0, 220,
	142, 221, 143, 0, 144, 145, 146, 222, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	223, 156, 0, 157, 158, 159, 0, 224, 160, 161,
	0, 162, 163, 0, 164, 225, 226, 165, 0, 166,
	167, 169, 227, 168, 228, 0, 170, 0, 171, 172,
	0, 229, 230, 231, 0, 0, 173, 232, 233, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 234, 235, 81, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 84, 85,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 189, 190, 191, 192, 89, 193, 194, 0,
	90, 195, 196, 91, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 0, 0, 97, 98, 0, 0, 0, 0, 0,
	0, 99, 100, 101, 102, 201, 103, 202, 203, 0,
	0, 104, 0, 0, 0, 105, 106, 0, 107, 0,
	0, 0, 204, 108, 109, 205, 0, 0, 0, 110,
	111, 206, 0, 112, 0, 113, 0, 0, 0, 0,
	114, 207, 0, 208, 0, 115, 116, 333, 210, 0,
	0, 117, 0, 0, 118, 211, 212, 213, 0, 214,
	0, 0, 119, 0, 120, 121, 0, 0, 215, 0,
	122, 0, 0, 123, 0, 0, 124, 0, 125, 126,
	127, 128, 129, 0, 130, 131, 134, 132, 0, 133,
	0, 216, 135, 217, 136, 137, 0, 0, 0, 0,
	0, 138, 218, 0, 139, 0, 219, 140, 141, 0,
	220, 142, 221, 143, 0, 144, 145, 146, 222, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 223, 156, 0, 157, 158, 159, 0, 224, 160,
	161, 0, 162, 163, 0, 164, 225, 226, 165, 0,
	166, 167, 169, 227, 168, 228, 0, 170, 0, 171,
	172, 0, 229, 230, 231, 0, 0, 173, 232, 233,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 234, 235, 81, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 84,
	85, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 189, 190, 191, 192, 89, 193, 194,
	0, 90, 195, 196, 91, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 0, 0, 97, 98, 0, 0, 0, 0,
	0, 0, 99, 100, 101, 102, 201, 103, 202, 203,
	0, 0, 104, 0, 0, 0, 105, 106, 0, 107,
	0, 0, 0, 204, 108, 109, 205, 0, 0, 0,
	110, 111, 206, 0, 112, 0, 113, 0, 0, 0,
	0, 114, 207, 0, 208, 0, 115, 116, 325, 210,
	0, 0, 117, 0, 0, 118, 211, 212, 213, 0,
	214, 0, 0, 119, 0, 120, 121, 0, 0, 215,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 134, 132, 0,
	133, 0, 216, 135, 217, 136, 137, 0, 0, 0,
	0, 0, 138, 218, 0, 139, 0, 219, 140, 141,
	0, 220, 142, 221, 143, 0, 144, 145, 146, 222,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 223, 156, 0, 157, 158, 159, 0, 224,
	160, 161, 0, 162, 163, 0, 164, 225, 226, 165,
	0, 166, 167, 169, 227, 168, 228, 0, 170, 0,
	171, 172, 0, 229, 230, 231, 0, 0, 173, 232,
	233, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 234, 235, 81, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	84, 85, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 189, 190, 191, 192, 89, 193,
	194, 0, 90, 195, 196, 91, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 0, 0, 97, 98, 0, 0, 0,
	0, 0, 0, 99, 100, 101, 102, 201, 103, 202,
	203, 0, 0, 104, 0, 0, 0, 105, 106, 0,
	107, 0, 0, 0, 204, 108, 109, 205, 0, 0,
	0, 110, 111, 206, 0, 112, 0, 113, 0, 0,
	0, 0, 114, 207, 0, 208, 0, 115, 116, 209,
	210, 0, 0, 117, 0, 0, 118, 211, 212, 213,
	0, 214, 0, 0, 119, 0, 120, 121, 0, 0,
	215, 0, 122, 0, 0, 123, 0, 0, 124, 0,
	125, 126, 127, 128, 129, 0, 130, 131, 134, 132,
	0, 133, 0, 216, 135, 217, 136, 137, 0, 0,
	0, 0, 0, 138, 218, 0, 139, 0, 219, 140,
	141, 0, 220, 142, 221, 143, 0, 144, 145, 146,
	222, 305, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 223, 156, 0, 157, 158, 159, 0,
	224, 160, 161, 0, 162, 163, 0, 164, 225, 226,
	165, 0, 166, 167, 169, 227, 168, 228, 0, 170,
	0, 171, 172, 0, 229, 230, 231, 0, 0, 173,
	232, 233, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 234, 235, 81,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 84, 85, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 189, 190, 191, 192, 89,
	193, 194, 0, 90, 195, 196, 91, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 0, 0, 97, 98, 0, 0,
	0, 0, 0, 0, 99, 100, 101, 102, 201, 103,
	202, 203, 0, 0, 104, 0, 0, 0, 105, 106,
	0, 107, 0, 0, 0, 204, 108, 109, 205, 0,
	0, 0, 110, 111, 206, 0, 112, 0, 113, 0,
	0, 0, 0, 114, 207, 0, 208, 0, 115, 116,
	209, 210, 0, 0, 117, 0, 0, 118, 211, 212,
	213, 0, 214, 0, 0, 119, 0, 120, 121, 0,
	0, 215, 0, 122, 0, 0, 253, 0, 0, 124,
	0, 125, 126, 127, 128, 261, 0, 130, 131, 134,
	132, 0, 133, 0, 216, 135, 217, 136, 137, 0,
	0, 0, 0, 0, 138, 218, 0, 139, 0, 219,
	140, 141, 0, 220, 142, 221, 143, 0, 144, 145,
	146, 222, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 255, 156, 0, 157, 158, 159,
	0, 224, 160, 254, 0, 162, 163, 0, 164, 225,
	226, 165, 0, 166, 167, 169, 227, 168, 228, 0,
	170, 0, 171, 172, 0, 260, 230, 231, 0, 0,
	256, 232, 233, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 234, 235,
	81, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 84, 85, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 189, 190, 191, 192,
	89, 193, 194, 0, 90, 195, 196, 91, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 0, 0, 97, 98, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 102, 201,
	103, 202, 203, 0, 0, 104, 0, 0, 0, 105,
	106, 0, 107, 0, 0, 0, 204, 108, 109, 205,
	0, 0, 0, 110, 111, 206, 0, 112, 0, 113,
	0, 0, 0, 0, 114, 207, 0, 208, 0, 115,
	116, 209, 210, 0, 0, 117, 0, 0, 118, 211,
	212, 213, 0, 214, 0, 0, 119, 0, 120, 121,
	0, 0, 215, 0, 122, 0, 0, 123, 0, 0,
	124, 0, 125, 126, 127, 128, 129, 0, 130, 131,
	134, 132, 0, 133, 0, 216, 135, 217, 136, 137,
	0, 0, 0, 0, 0, 138, 218, 0, 139, 0,
	219, 140, 0, 0, 220, 142, 221, 143, 0, 144,
	0, 146, 222, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 223, 0, 0, 157, 158,
	159, 0, 224, 160, 161, 0, 162, 163, 0, 164,
	225, 226, 165, 0, 166, 167, 169, 227, 168, 228,
	0, 170, 0, 171, 172, 0, 229, 230, 231, 0,
	0, 173, 232, 233, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 234,
	235, 790, 184, 809, 810, 811, 0, 185, 186, 187,
	188, 0, 0, 812, 0, 0, 0, 0, 0, 792,
	0, 818, 0, 0, 790, 0, 809, 810, 811, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	791, 0, 792, 0, 818, 0, 806, 790, 0, 809,
	810, 811, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 791, 0, 792, 0, 818, 0, 806,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 791, 0, 0, 0,
	0, 797, 806, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 819, 0, 0, 0, 0, 807, 797, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 819, 0, 0, 0, 813, 807,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 813, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 816, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 803,
	804, 805, 0, 802, 799, 800, 801, 793, 794, 795,
	796, 798, 0, 0, 0, 0, 0, 1680, 0, 815,
	0, 0, 803, 804, 805, 0, 802, 799, 800, 801,
	793, 794, 795, 796, 798, 0, 0, 0, 0, 0,
	1659, 0, 815, 0, 0, 803, 804, 805, 0, 802,
	799, 800, 801, 793, 794, 795, 796, 798, 790, 0,
	809, 810, 811, 1654, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 0, 792, 0, 818, 0,
	0, 790, 0, 809, 810, 811, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 0, 791, 0, 792,
	0, 818, 0, 806, 790, 0, 809, 810, 811, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	791, 0, 792, 0, 818, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 791, 0, 0, 0, 0, 797, 806,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 819, 0, 0, 0, 0,
	0, 797, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 819, 0,
	0, 0, 0, 807, 797, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 819, 0, 0, 0, 813, 807, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 813, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	816, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 815, 0, 0, 803, 804, 805, 0,
	802, 799, 800, 801, 793, 794, 795, 796, 798, 0,
	0, 0, 0, 0, 1650, 0, 815, 0, 0, 803,
	804, 805, 0, 802, 799, 800, 801, 793, 794, 795,
	796, 798, 0, 0, 0, 0, 0, 1589, 0, 815,
	0, 0, 803, 804, 805, 0, 802, 799, 800, 801,
	793, 794, 795, 796, 798, 790, 0, 809, 810, 811,
	1588, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 792, 0, 818, 0, 0, 790, 0,
	809, 810, 811, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 791, 0, 792, 0, 818, 0,
	806, 790, 0, 809, 810, 811, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 0, 791, 0, 792,
	0, 818, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 0, 0, 0, 797, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 0, 0, 797, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 819, 0, 0, 0, 0,
	807, 797, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 819, 0,
	0, 0, 813, 807, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 813, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 808, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 816, 813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 0, 0,
	815, 0, 0, 803, 804, 805, 0, 802, 799, 800,
	801, 793, 794, 795, 796, 798, 0, 0, 0, 0,
	0, 1497, 0, 815, 0, 0, 803, 804, 805, 0,
	802, 799, 800, 801, 793, 794, 795, 796, 798, 0,
	0, 0, 0, 0, 1434, 0, 815, 0, 0, 803,
	804, 805, 0, 802, 799, 800, 801, 793, 794, 795,
	796, 798, 790, 0, 809, 810, 811, 1418, 0, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	792, 0, 818, 0, 0, 790, 0, 809, 810, 811,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 791, 0, 792, 0, 818, 0, 806, 790, 0,
	809, 810, 811, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 791, 0, 792, 0, 818, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 791, 0, 0,
	0, 0, 797, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 797, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 819, 0, 0, 0, 0, 807, 797, 1764,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 819, 0, 0, 0, 813,
	807, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 813, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 808, 1763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 0, 0, 790, 0, 809, 810, 811, 808,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	816, 0, 792, 0, 818, 0, 0, 815, 0, 0,
	803, 804, 805, 0, 802, 799, 800, 801, 793, 794,
	795, 796, 798, 791, 0, 0, 0, 0, 1059, 806,
	815, 0, 0, 803, 804, 805, 0, 802, 799, 800,
	801, 793, 794, 795, 796, 798, 0, 0, 0, 1481,
	0, 0, 0, 815, 0, 0, 803, 804, 805, 0,
	802, 799, 800, 801, 793, 794, 795, 796, 798, 790,
	0, 809, 810, 811, 797, 0, 1308, 0, 0, 1307,
	0, 812, 0, 0, 0, 999, 0, 792, 0, 818,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 791, 0,
	0, 0, 0, 814, 806, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	0, 813, 0, 0, 821, 0, 0, 0, 0, 0,
	790, 0, 809, 810, 811, 0, 0, 0, 0, 797,
	0, 0, 812, 0, 0, 820, 0, 0, 792, 0,
	818, 0, 0, 0, 0, 808, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 817, 791,
	790, 0, 809, 810, 811, 806, 0, 0, 814, 0,
	0, 0, 812, 0, 807, 0, 0, 0, 792, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 0, 791,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 815,
	797, 0, 803, 804, 805, 0, 802, 799, 800, 801,
	793, 794, 795, 796, 798, 0, 0, 819, 0, 0,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 816, 790, 0, 809, 810, 811, 0, 0, 814,
	797, 0, 0, 0, 812, 807, 0, 0, 0, 0,
	792, 0, 818, 0, 0, 0, 0, 819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 817,
	0, 791, 0, 0, 0, 0, 0, 806, 0, 814,
	0, 0, 0, 0, 815, 807, 0, 803, 804, 805,
	0, 802, 799, 800, 801, 793, 794, 795, 796, 798,
	0, 808, 0, 0, 0, 0, 0, 813, 300, 0,
	0, 0, 816, 0, 790, 0, 809, 810, 811, 0,
	0, 0, 797, 0, 0, 0, 812, 0, 0, 1309,
	0, 0, 792, 0, 818, 0, 0, 0, 0, 819,
	0, 808, 0, 0, 0, 0, 790, 0, 809, 810,
	811, 817, 816, 791, 0, 0, 0, 0, 812, 806,
	0, 814, 0, 0, 792, 815, 818, 807, 803, 804,
	805, 0, 802, 799, 800, 801, 793, 794, 795, 796,
	798, 0, 0, 0, 0, 791, 0, 0, 0, 813,
	0, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 815, 0, 0, 803, 804,
	805, 0, 802, 799, 800, 801, 793, 794, 795, 796,
	798, 819, 0, 808, 0, 0, 0, 0, 790, 0,
	809, 810, 811, 817, 816, 0, 797, 0, 0, 0,
	812, 1314, 0, 814, 0, 0, 792, 0, 818, 807,
	0, 1428, 0, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 791, 0, 0,
	0, 813, 0, 806, 0, 814, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 0, 815, 0, 0,
	803, 804, 805, 0, 802, 799, 800, 801, 793, 794,
	795, 796, 798, 813, 0, 808, 0, 0, 0, 0,
	790, 0, 809, 810, 811, 0, 816, 0, 797, 0,
	0, 0, 812, 0, 0, 1270, 0, 0, 792, 0,
	818, 0, 0, 0, 0, 819, 0, 808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 816, 791,
	0, 0, 0, 0, 0, 806, 0, 814, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 0, 815,
	0, 0, 803, 804, 805, 0, 802, 799, 800, 801,
	793, 794, 795, 796, 798, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1275, 0, 0, 0, 0,
	797, 815, 0, 0, 803, 804, 805, 0, 802, 799,
	800, 801, 793, 794, 795, 796, 798, 819, 0, 808,
	0, 0, 0, 0, 790, 0, 809, 810, 811, 817,
	816, 0, 0, 0, 0, 0, 812, 0, 0, 814,
	0, 0, 792, 0, 818, 807, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 791, 0, 0, 0, 813, 1277, 806,
	1294, 1295, 1296, 0, 0, 0, 0, 0, 0, 0,
	1413, 0, 0, 815, 0, 0, 803, 804, 805, 0,
	802, 799, 800, 801, 793, 794, 795, 796, 798, 0,
	0, 808, 0, 0, 0, 790, 0, 809, 810, 811,
	0, 0, 816, 1291, 797, 0, 0, 812, 0, 0,
	0, 0, 0, 792, 0, 818, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 1277, 0,
	1294, 1295, 1296, 817, 791, 0, 0, 0, 0, 0,
	806, 0, 0, 814, 0, 0, 0, 0, 1282, 807,
	0, 0, 0, 0, 0, 815, 0, 0, 803, 804,
	805, 0, 802, 799, 800, 801, 793, 794, 795, 796,
	798, 813, 0, 1291, 0, 0, 0, 1297, 790, 0,
	809, 810, 811, 0, 0, 797, 0, 0, 0, 0,
	0, 0, 0, 1292, 0, 0, 792, 0, 818, 0,
	0, 0, 819, 0, 0, 808, 0, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 816, 791, 1282, 0,
	0, 0, 0, 806, 814, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1297, 1277, 1293,
	1294, 1295, 1296, 0, 0, 0, 0, 0, 0, 0,
	1412, 0, 0, 1292, 0, 0, 0, 0, 797, 815,
	0, 0, 803, 804, 805, 0, 802, 799, 800, 801,
	793, 794, 795, 796, 798, 819, 808, 0, 0, 0,
	0, 0, 0, 1291, 0, 0, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 0, 807, 0, 0, 1288, 1289, 1290, 1293,
	1287, 1284, 1285, 1286, 1278, 1279, 1280, 1281, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	815, 0, 0, 803, 804, 805, 0, 802, 799, 800,
	801, 793, 794, 795, 796, 798, 0, 1297, 0, 808,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 1292, 0, 0, 1288, 1289, 1290, 0,
	1287, 1284, 1285, 1286, 1278, 1279, 1280, 1281, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 586, 608,
	580, 599, 598, 0, 0, 582, 581, 0, 0, 0,
	610, 609, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 815, 0, 0, 803, 804, 805, 1293,
	802, 799, 800, 801, 793, 794, 795, 796, 798, 604,
	0, 596, 595, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	588, 589, 0, 607, 0, 0, 1288, 1289, 1290, 0,
	1287, 1284, 1285, 1286, 1278, 1279, 1280, 1281, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	590, 585, 0, 0, 0, 0, 0, 612, 0, 0,
	0, 0, 0, 0, 583, 0, 0, 605, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	611,
}
var sqlPact = [...]int{

	1809, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 740, -1000, -1000, -1000, 620, 718, 241,
	14489, 14489, 1710, 1710, 15744, -1000, -1000, 18505, -1000, 2224,
	468, 474, 468, 468, 473, 15744, 528, 630, 142, -1000,
	634, -8, 18254, 14489, 1223, 37, 13736, 285, 1809, 14238,
	14489, 18003, 1082, 1007, 1006, 13736, 17752, 17501, 17250, -1000,
	9365, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 512,
	297, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 288, 840, -1000, 31,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 833, -1000,
	14489, -1000, -1000, 16999, 16748, 287, 819, -1000, -1000, 488,
	369, 1232, -1000, 52, -1000, -1000, 1080, -1000, 831, 1068,
	1064, 1063, 1062, 366, 828, -1000, 502, 819, -1000, 819,
	-1000, -1000, -1000, 524, 15744, -1000, 13736, -1000, 16497, 1020,
	16246, -1000, 634, -1000, -1000, -1000, 855, 1220, 1220, 1220,
	1275, 139, 138, 142, 23, 14489, -1000, 286, 23, 6482,
	6482, -1000, -1000, 285, -1000, 314, 11969, 51, -1000, 7008,
	-1000, 728, 1132, 734, 732, 1127, -104, 13736, 14489, 14489,
	596, 15995, -1000, 1126, 128, 1123, -1000, 123, 1122, -1000,
	4, -1000, -1000, -1000, -1000, -1000, -1000, 285, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13987, 1301, 21236, -1000, 8318, 12230, 776, 12230, -1000,
	-1000, 1298, -1000, 8318, -1000, 30, 29, 943, 978, 9890,
	9628, 1182, 1449, -1000, -1000, -1000, 49, 4113, 14489, 1090,
	12230, 14489, 14489, 14489, -1000, 14489, -1000, 934, -1000, 14489,
	-1000, 26, 25, -1000, 15744, -1000, 130, -1000, 261, 903,
	15493, 1143, 892, -1000, 855, -1000, 809, 930, 7532, 8318,
	142, -1000, -1000, 142, 142, 8318, -1000, -1000, 14489, 23,
	1296, 14489, 137, -1000, 20350, -1000, -1000, 8318, 8318, 8318,
	8318, 8318, 782, -1000, -1000, -1000, 4902, -1000, -1000, 51,
	257, 255, -1000, -1000, 254, 51, -1000, -1000, -1000, -1000,
	249, 1378, 413, -1000, -1000, -1000, 8318, 382, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1089, 248, 247,
	-1000, -1000, -1000, -1000, 245, 242, 240, 239, 237, 235,
	234, 232, 231, 230, 229, 227, 226, 757, -1000, 401,
	-1000, -1000, 401, 401, -1000, 217, 217, 218, -1000, -1000,
	-1000, 217, -1000, -1000, -1000, 354, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 225, 137, -1000, -1000, -1000, 14489, 51,
	-1000, -1000, -1000, 8318, 3850, -5, -1000, 20864, -1000, -19,
	659, -1000, 13234, 1254, 1246, 1203, 13736, 523, 519, 14489,
	14489, 387, 71, 1294, 71, 11447, -1000, 14489, 14489, -1000,
	14489, -1000, -1000, 14489, -1000, 14489, 14489, 202, 12732, 701,
	1120, -8, -6, -1000, 1305, -1000, -1000, -1000, -1000, 92,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 218, 757, 217, 217, 217, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 354, -1000, -1000, 401, 401,
	401, -1000, -1000, -7, 20864, 515, 12, 12481, 14489, -1000,
	48, -1000, -1000, 1059, 459, -11, 748, 994, 946, -1000,
	-1000, -1000, -1000, 22, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1355, -1000, -1000, -1000, -1000, 1365,
	22, -1000, -1000, -1000, -1000, -1000, 1377, -1000, -1000, -1000,
	4113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14489, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 748, 994, -1000, -1000,
	13736, 12983, 1118, 827, 891, -1000, -1000, 331, 1117, -1000,
	-1000, -1000, -1000, 20864, -1000, 20864, 614, 1010, -1000, 1010,
	16, -1000, 20269, -1000, 215, -15, -1000, 387, 6482, 11186,
	21236, 14489, 536, 8318, 8318, 8318, 8318, 8318, 8318, 8318,
	8318, 8318, 8318, 8318, 8318, 8318, 8318, 8318, 8318, 8318,
	8318, 8318, 8318, 8318, 8318, 808, 510, 588, 760, 206,
	4113, -1000, 1328, 1328, 1328, 3226, 3226, 223, 21, 19952,
	14, 51, -1000, -1000, 6220, 5956, 51, 4374, -1000, 1221,
	1364, 396, 20864, 1096, 1044, 214, 120, 118, 8318, 982,
	8318, 8580, 8318, 8318, 5166, 8318, 8318, 8318, 8318, 8318,
	8318, -1000, 213, -1000, -1000, -1000, -1000, 1363, -1000, -1000,
	1360, -1000, 535, 534, 1359, 387, 117, -1000, 2037, -1000,
	-1000, 7008, -1000, 701, 14489, 14489, 14489, -1000, -1000, 886,
	15242, -1000, 21236, 14489, -1000, 211, 208, 969, 968, 14489,
	14489, 14991, 14740, 14489, 720, 14489, 14489, 679, -1000, 640,
	8318, 715, -1000, 10664, 406, 14489, 674, 131, -1000, -1000,
	-1000, 328, 14489, -1000, -1000, -1000, 128, -1000, 123, -1000,
	-1000, 13736, -1000, -1000, -1000, -1000, -1000, -1000, 21236, 306,
	305, -1000, 1358, 508, -1000, 507, 499, 498, -1000, 207,
	-1000, 8318, 14489, 12481, 12, 6, -1000, -1000, 14489, 994,
	-1000, -1000, -1000, -1000, 651, -1000, 742, -1000, 10152, -1000,
	-1000, -1000, 1221, -1000, -20, -1000, -1000, -1000, -1000, 113,
	3, -1000, -1000, -1000, -1000, -1000, 14489, 283, 14489, 14489,
	14489, 1112, 1374, 14489, -1000, -1000, -1000, 8318, -1000, -1000,
	-1000, -8, 14489, -1000, 1039, -1000, -1, 956, -122, 13485,
	-1000, 10403, -1000, -1000, 361, 795, 795, 1300, 1300, 1300,
	1300, 1870, 1870, 868, 901, 2719, 2719, 2719, 495, 1011,
	1011, 2719, 2719, 2719, 3226, 20945, 164, 8318, 497, 759,
	206, 8318, -1000, 1047, -1000, -1000, -1000, 1058, 204, 8580,
	8580, -1000, -1000, -1000, 4902, -1000, -1000, 203, 8318, -1000,
	8318, -16, -17, -1000, -1000, -23, -1000, -1000, 9, 8318,
	8318, 8318, 112, -1000, 111, 565, -1000, 8318, 785, 201,
	199, 8318, -1000, -1000, 20750, 104, 1056, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 101, 20668, 99, 2219, -1000, 8580,
	8580, 8580, 4902, 198, 98, 20184, -87, 20554, 7270, 7270,
	7270, 97, 20586, 8318, -87, 2837, 2633, 2430, -24, -30,
	-36, 1357, -42, 96, 353, 346, 93, 1039, -1000, -1000,
	8318, -1000, -1000, -1000, 492, 491, 1111, -1000, 877, -1000,
	655, 8318, 14489, 196, 195, 778, -1000, 1110, 779, 1106,
	779, -1000, -19, 656, -1000, -1000, 486, -1000, 6482, 20864,
	-1000, 647, 1207, -43, -1000, -1000, -1000, 6482, 387, 11447,
	7008, -48, -1000, -1000, 701, -1000, 416, 1340, 90, 909,
	693, 741, 605, 1337, 20864, -20, -1000, -20, -1000, -1000,
	-1000, -1000, -1000, -1000, 14489, -1000, 12983, 194, 14489, 191,
	185, 184, 14489, -1000, 1143, -1000, 89, -1000, 1027, 1268,
	11186, 985, 983, 11186, 1034, 791, 791, 791, -1000, 13485,
	3574, -1000, -1000, 14489, 181, 10925, 88, 956, 8318, 164,
	8318, 8580, 8580, -1000, 164, -1000, -1000, -1000, -1000, 1055,
	180, 8318, 21236, 21098, 20908, -52, 5692, -32, 19681, -1000,
	-1000, 255, -1000, 87, 6746, -1000, 20390, 10, 10, -1000,
	1373, 1138, -1000, 8318, 20472, -1000, 11708, 389, 797, 19658,
	21236, -1000, 8318, -1000, 1054, 8318, -1000, 21236, 8580, 8580,
	8580, 8580, 8580, 8580, 8580, 8580, 8580, 8580, 8580, 8580,
	8580, 8580, 8580, 8580, 8580, 8580, 8580, 947, 8580, 1327,
	1327, 1327, -41, 5428, -1000, 1088, 1054, 8318, 8318, 21236,
	85, 80, 78, -1000, 8318, -87, 8318, 8318, 8318, -1000,
	-1000, -1000, 75, -1000, 1335, -1000, -1000, -1000, -1000, 1027,
	19975, 14489, 14489, 14489, 1104, 879, -1000, 19635, -54, 14489,
	14489, -1000, 957, 961, 446, 14489, -1000, 14489, -1000, 14489,
	14489, 14489, 14489, -65, 6482, 192, -8, 14489, -65, 640,
	-1000, -1000, 326, -1000, 303, 302, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 74, -1000, -1000, 9104, 179, 14489,
	12983, 9104, 820, -1000, -1000, 385, 8318, 8318, 956, 11186,
	11186, 1966, 979, 11186, -1000, -1000, -1000, -1000, 339, -1000,
	996, 178, 14489, 13485, 1271, 164, 3252, 3205, 8318, 21236,
	21028, -56, 8318, 8318, -1000, -58, -1000, 8318, -1000, -1000,
	1372, 8318, 73, 72, 68, -1000, -1000, 20864, 8318, -1000,
	-1000, 18756, 8318, 67, -1000, 65, 20864, 1088, 20864, -1000,
	574, 574, 1327, 1327, 1327, 1327, 552, 552, 663, 503,
	521, 521, 521, 1766, 539, 539, 521, 521, 521, 1052,
	933, 176, 20978, 8318, -60, -1000, -1000, -1000, 20864, 20864,
	64, -1000, -1000, -1000, -87, 2238, 19364, 19341, -1000, 63,
	385, -1000, -1000, -1000, -1000, 14489, -1000, 14489, -1000, 14489,
	869, -1000, -1000, 962, 172, 8580, 14489, -1000, 745, -64,
	-66, 851, -1000, 835, 8318, -1000, 21236, 779, 779, -1000,
	481, 478, -1000, -65, 1146, 14489, 1199, -1000, -1000, -1000,
	171, -1000, -1000, -1000, -72, -1000, 253, 1244, 8318, -1000,
	-1000, 169, 9104, -77, -1000, -1000, 62, -78, 14489, -1000,
	14489, 20864, -87, -1000, 1966, -1000, 168, 8318, 11186, -1000,
	-1000, 844, -131, -1000, 324, -1000, 14489, -79, -1000, 8318,
	8318, 21028, -85, -1000, 164, 164, -1000, 19318, -1000, 20390,
	-1000, -1000, -1000, 20864, 772, -1000, 19047, -1000, -1000, -1000,
	8580, 1051, 165, 21236, 19024, -1000, -1000, 8318, -1000, -1000,
	-1000, -1000, -1000, 1142, -1000, -1000, -1000, 8318, 20978, 160,
	-1000, 149, -1000, -1000, -1000, 635, -1000, -1000, 20864, 1245,
	-1000, -1000, 14489, 14489, 505, -90, 14489, -1000, -1000, 4638,
	745, 9104, 1228, 51, 14489, 1228, 19001, 4374, -91, -1000,
	14489, -1000, 745, 148, -73, -1000, 1289, -1000, 14489, 20864,
	-1000, 559, 996, -1000, 4113, -95, -1000, 164, 164, -1000,
	-1000, 60, 797, 1264, -1000, 2742, 8580, 21236, -101, -1000,
	3186, -1000, 3020, 918, 14489, 14489, 14489, 418, 14489, -1000,
	-1000, 578, -1000, 387, -1000, -1000, -1000, -1000, -1000, -1000,
	1244, 9, 745, -1000, -1000, 9104, 14489, 146, -102, 506,
	-1000, -1000, -1000, -1000, 661, 8318, 2742, -110, -1000, -1000,
	-1000, 798, 733, 59, -114, 145, -1000, 8318, -1000, 11447,
	-1000, 1228, 58, -1000, -119, -1000, -1000, -1000, 1369, 57,
	8056, 8056, -87, -1000, -1000, 811, 810, 597, -1000, -1000,
	-1000, -1000, -1000, 918, 14489, 20864, -99, -1000, -1000, 745,
	-1000, -1000, -1000, -1000, 8842, 850, 611, 19998, -1000, -1000,
	1154, -1000, 432, 872, 872, 798, -126, -1000, -1000, 1308,
	-1000, -1000, -1000, -1000, -1000, -1000, 1320, -1000, -1000, 974,
	-1000, -1000, -1000, 7794, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1616, 1607, 1253, 127, 125, 1603, 1602, 1601, 96,
	122, 120, 115, 1599, 87, 1592, 1589, 88, 1588, 1586,
	1585, 83, 1581, 1580, 1579, 1577, 1575, 86, 24, 156,
	553, 154, 1574, 1570, 1569, 25, 98, 56, 1567, 97,
	72, 84, 106, 1204, 63, 1564, 1563, 136, 27, 14,
	85, 91, 143, 131, 121, 1562, 1558, 1554, 40, 1551,
	1550, 1548, 1546, 49, 17, 1545, 11, 1543, 15, 1540,
	1538, 112, 1535, 92, 109, 33, 117, 12, 1530, 59,
	10, 64, 1529, 34, 1525, 26, 70, 130, 1522, 48,
	149, 51, 23, 65, 1519, 1517, 1515, 1514, 73, 1513,
	81, 101, 1512, 1511, 78, 1509, 134, 138, 1508, 1507,
	132, 1506, 1504, 1503, 665, 1502, 1501, 590, 1500, 5,
	42, 50, 3, 108, 105, 44, 1499, 21, 1496, 1815,
	642, 560, 1494, 47, 39, 77, 45, 55, 36, 1485,
	1482, 107, 1481, 1480, 1478, 1474, 1473, 75, 1472, 52,
	135, 43, 58, 82, 41, 22, 29, 80, 123, 144,
	93, 1471, 1469, 111, 1468, 139, 1466, 1465, 548, 119,
	1464, 1463, 1462, 495, 313, 249, 114, 1461, 1460, 227,
	173, 1452, 1450, 124, 1448, 1445, 140, 1442, 215, 30,
	1439, 110, 1438, 89, 1437, 0, 94, 28, 1436, 129,
	74, 1433, 1431, 1430, 1429, 18, 2, 6, 7, 9,
	4, 20, 19, 1428, 1427, 128, 103, 1426, 146, 1422,
	1415, 37, 1413, 1411, 16, 1407, 13, 1406, 8, 1,
	1399, 137, 1396, 90, 1395, 1325, 1389, 141, 1387, 1384,
	1317, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 37, 37, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 34, 34, 39, 39, 39, 38, 38,
	33, 33, 5, 5, 5, 9, 10, 10, 10, 10,
	10, 10, 76, 76, 75, 75, 78, 78, 11, 11,
	12, 12, 12, 12, 12, 12, 12, 12, 164, 164,
	163, 13, 139, 139, 14, 14, 14, 14, 15, 99,
	99, 16, 20, 231, 231, 231, 235, 235, 236, 236,
	237, 237, 237, 237, 237, 237, 237, 233, 233, 23,
	23, 23, 23, 23, 118, 114, 114, 116, 116, 116,
	116, 42, 113, 113, 113, 113, 115, 115, 115, 115,
	188, 186, 186, 193, 193, 193, 55, 55, 55, 55,
	55, 56, 56, 56, 185, 185, 185, 185, 194, 194,
	194, 194, 194, 194, 57, 57, 57, 192, 192, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 187, 187, 232, 232, 234, 234, 8,
	8, 58, 58, 59, 59, 121, 121, 121, 121, 120,
	203, 203, 204, 204, 204, 205, 205, 205, 205, 205,
	205, 205, 201, 201, 202, 199, 199, 200, 200, 200,
	200, 238, 238, 119, 119, 62, 62, 208, 208, 208,
	208, 206, 206, 206, 206, 206, 209, 207, 210, 210,
	210, 210, 210, 150, 150, 150, 26, 7, 7, 103,
	103, 66, 66, 154, 154, 154, 67, 67, 155, 49,
	49, 35, 35, 35, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 104, 104, 105, 105, 18, 22, 25,
	25, 25, 25, 25, 240, 240, 46, 46, 46, 46,
	47, 47, 117, 117, 117, 117, 117, 41, 6, 6,
	40, 40, 17, 17, 17, 17, 17, 52, 52, 110,
	110, 110, 112, 112, 111, 111, 111, 89, 89, 27,
	80, 80, 81, 81, 161, 82, 82, 21, 21, 30,
	30, 28, 28, 28, 28, 28, 28, 29, 29, 31,
	31, 31, 31, 31, 31, 31, 216, 216, 216, 218,
	218, 215, 217, 217, 239, 239, 90, 90, 90, 61,
	60, 60, 64, 64, 63, 65, 65, 153, 87, 87,
	87, 87, 106, 107, 107, 108, 108, 109, 109, 86,
	86, 136, 136, 32, 32, 71, 71, 72, 72, 127,
	127, 128, 128, 126, 126, 126, 156, 156, 156, 156,
	157, 157, 157, 157, 157, 157, 151, 151, 151, 151,
	152, 152, 162, 162, 93, 93, 93, 93, 91, 91,
	92, 92, 158, 158, 158, 158, 88, 88, 159, 159,
	159, 122, 122, 165, 165, 165, 70, 70, 70, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 167, 167, 167, 167, 169, 169, 169, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 170, 170, 177, 177, 178, 178, 179, 180,
	171, 171, 172, 172, 173, 174, 181, 181, 181, 181,
	183, 183, 175, 175, 175, 175, 175, 176, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 101, 101, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 211, 211, 211,
	211, 211, 211, 211, 213, 213, 214, 214, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 219, 219, 220, 220, 221, 221, 222,
	222, 224, 225, 225, 225, 226, 230, 230, 223, 223,
	227, 227, 227, 228, 228, 229, 229, 229, 229, 229,
	141, 141, 141, 142, 142, 143, 77, 77, 138, 138,
	137, 137, 137, 140, 140, 94, 182, 182, 182, 182,
	182, 182, 182, 95, 95, 102, 96, 96, 97, 97,
	97, 97, 97, 97, 133, 134, 98, 98, 98, 135,
	135, 144, 148, 148, 147, 146, 146, 145, 145, 125,
	125, 125, 125, 124, 123, 83, 83, 241, 241, 149,
	149, 84, 84, 85, 79, 79, 160, 160, 160, 160,
	73, 73, 54, 54, 74, 74, 50, 50, 53, 51,
	51, 51, 51, 68, 68, 69, 69, 48, 48, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	184, 184, 184, 43, 43, 43, 44, 44, 45, 45,
	190, 190, 190, 191, 191, 191, 191, 189, 189, 189,
	189, 189, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 2, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 5, 3, 0, 1, 1, 1, 1, 3, 3,
	0, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 6, 3, 1, 5, 2, 1, 1, 1, 3,
	3, 2, 3, 3, 3, 3, 1, 3, 3, 2,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 4, 2, 4, 4, 4, 4, 3, 3, 4,
	3, 2, 4, 2, 0, 2, 0, 2, 0, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	2, 0, 3, 1, 2, 2, 1, 1, 2, 4,
	2, 5, 6, 7, 5, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 1, 3, 1, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 4, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 4, 5, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	2, 2, 1, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -19, -20, -22, -21, -23, -24, -25,
	-18, -26, -27, 19, -6, -7, -8, -217, 84, 92,
	181, 91, 107, 195, 202, -28, -30, 210, -118, 211,
	29, 219, 53, 87, 197, 192, 239, 59, -216, -31,
	-29, 285, 260, 266, 205, -32, 226, 253, 288, 226,
	71, 118, 79, 122, 247, 246, 71, 118, 226, -12,
	285, -21, -5, -10, -4, -17, -27, -9, -11, 19,
	-43, 4, -195, -197, 16, 17, 19, 28, 29, 34,
	38, 41, 52, 53, 54, 56, 58, 61, 62, 69,
	70, 71, 72, 74, 79, 83, 84, 86, 91, 92,
	97, 98, 101, 103, 108, 113, 114, 119, 122, 130,
	132, 133, 138, 141, 144, 146, 147, 148, 149, 150,
	152, 153, 155, 157, 154, 160, 162, 163, 169, 172,
	175, 176, 179, 181, 183, 184, 185, 187, 188, 192,
	190, 191, 193, 195, 197, 198, 200, 202, 203, 204,
	207, 208, 210, 211, 213, 216, 218, 219, 222, 220,
	225, 227, 228, 235, 239, 240, 241, 242, 245, 246,
	247, 250, 251, 252, 256, 261, 262, 263, 264, 30,
	31, 32, 33, 35, 36, 39, 40, 44, 45, 46,
	48, 73, 75, 76, 90, 93, 99, 109, 111, 115,
	116, 123, 124, 125, 127, 136, 159, 161, 170, 174,
	178, 180, 186, 199, 206, 214, 215, 221, 223, 230,
	231, 232, 236, 237, 253, 254, -43, -235, 18, -236,
	-237, 59, 84, 107, 205, 122, 79, 246, -235, -47,
	202, -43, -114, 141, 208, 199, 235, -115, -113, -188,
	230, 150, -75, -43, 4, 71, 52, 72, 108, 118,
	119, 133, 227, 230, 235, 18, 59, -240, 235, 235,
	-240, -240, -46, 235, 233, -47, -239, 226, 226, -103,
	71, 244, -29, -31, -30, -63, -64, 243, 126, 89,
	168, -28, -30, -216, -218, 187, -215, -43, -218, -60,
	-61, 18, 81, 289, -158, -50, 166, -43, -85, 285,
	-3, -158, 115, -43, -53, 115, -50, 105, 128, 128,
	-159, -158, -43, 115, -54, 115, -53, -76, 115, -75,
	-164, -163, -191, 4, -195, -197, -196, 253, 50, 60,
	106, 121, 129, 131, 137, 139, 151, 171, 173, 196,
	212, 226, -139, 285, -99, 285, 165, 289, 165, -43,
	-114, 46, -114, 285, -116, -41, -42, 130, 183, 233,
	270, 105, 264, -57, 5, 77, -78, 287, 105, -232,
	165, 105, 105, 105, -187, 105, 264, 130, 183, 226,
	-117, -41, -42, -117, 233, -47, -88, -158, -75, 115,
	118, -43, 115, -63, -64, -87, -106, -107, 140, 164,
	-90, 18, 81, -90, -90, 38, 286, 286, 289, -218,
	-69, 285, -79, -160, -129, 278, -131, 276, 277, 282,
	156, 265, -141, -50, -132, 9, 285, -144, -213, -30,
	90, 24, -142, -143, 199, -43, 7, 8, 5, 6,
	-48, -167, -176, 238, 94, 158, 42, -211, -212, 4,
	-195, -190, -168, -178, -172, -175, 127, 50, 64, 67,
	65, 68, 209, 248, 43, 93, 174, 178, 223, 236,
	237, 115, 159, 116, 48, 109, 136, 83, 31, 33,
	35, 36, 44, 45, 73, 75, 76, 99, 123, 124,
	125, 161, 186, 214, 221, 231, 232, 254, -196, -179,
	-180, -173, -174, -181, -79, -85, 278, -50, 285, -83,
	-125, -124, -123, 283, 287, -84, -149, -129, 77, -37,
	190, -36, 17, 19, 84, 251, 90, 190, 190, 90,
	290, -159, -52, -50, -52, 210, -43, 25, 90, -39,
	289, 41, 193, 90, -39, 289, 90, 286, 289, -158,
	115, 25, -138, -165, -166, -168, -177, -171, -175, -176,
	34, 40, 39, 228, 206, 215, 32, 123, 124, 125,
	214, 31, 186, 99, 83, 76, 75, 161, 36, 35,
	-179, -180, -173, -174, 73, 231, 232, 127, 33, 45,
	44, 254, 221, -77, -129, -231, -74, 226, 71, -51,
	-43, 278, -237, -231, 25, -77, 289, 289, 138, -56,
	144, 155, 113, -186, 77, -193, -185, -150, 9, 238,
	94, 165, -192, 8, 277, -184, -191, 5, 7, 276,
	-186, 77, 62, -194, 5, 4, -176, -150, 77, 141,
	287, -189, 4, -195, -197, -196, -198, 18, 20, 21,
	22, 23, 24, 25, 26, 27, 37, 42, 43, 47,
	49, 51, 57, 59, 63, 64, 65, 66, 67, 68,
	77, 78, 80, 81, 82, 85, 87, 89, 94, 95,
	96, 102, 104, 105, 107, 110, 112, 117, 118, 120,
	126, 128, 134, 135, 140, 142, 143, 156, 158, 164,
	165, 166, 167, 168, 177, 182, 189, 194, 205, 209,
	217, 224, 226, 229, 233, 234, 238, 243, 244, 248,
	249, 255, 257, 258, 259, 260, -188, -234, 102, -231,
	-188, -188, -188, -188, 138, -188, 289, 289, -47, -39,
	289, 285, 156, -44, 115, -43, -40, 86, 156, -87,
	-107, -106, -108, -129, 18, -129, -131, -29, -29, -29,
	-65, -153, -129, -215, 25, -68, -43, -71, 289, 105,
	10, 49, 28, 276, 277, 278, 279, 100, 280, 273,
	274, 275, 272, 268, 269, 270, 55, 145, 201, 12,
	13, 14, 22, 167, 139, 265, 212, 129, 30, 117,
	25, 4, -129, -129, -129, -129, -129, 173, -30, -129,
	-77, -83, -30, -137, 283, 285, -83, 285, 5, 5,
	285, -145, -129, -219, 261, 102, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 180, -183, 256, -183, -183, -169, 285, -169, -170,
	285, -169, 262, 266, 285, -71, -50, -125, -129, -189,
	278, 289, 286, 289, 233, -104, 57, 51, -120, 115,
	51, -199, -43, 57, -200, 47, 244, 182, 104, -104,
	57, -104, 57, 57, -158, 233, 233, -53, -43, -122,
	258, -110, -21, 285, 77, 25, -110, -80, -81, -161,
	-82, -50, 285, -43, -43, -53, -54, -75, -76, -12,
	-163, 90, -14, -21, -17, -27, -9, 286, 289, -70,
	24, -100, 285, 263, 148, 74, 114, 147, -101, 204,
	286, 289, 233, 289, -74, -68, -124, -123, 105, 235,
	286, -42, -41, -55, 185, 216, 191, 207, 289, 8,
	7, 7, 5, -189, -233, -43, -42, -41, -158, -58,
	-59, -121, -120, -201, -202, -199, 118, 244, 95, 90,
	165, 156, 270, 90, -109, 199, 200, 289, -35, 26,
	80, 285, 289, 286, -122, -160, -72, -156, -158, -30,
	-157, 285, -165, -75, 230, -129, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -129, 139, 212, 30,
	117, 233, 158, 156, 238, 94, 245, 81, 162, -241,
	224, 27, -135, -30, 285, -189, -141, 199, 285, 286,
	289, -77, -140, 284, -137, -77, 286, 286, -77, 255,
	18, 81, 278, -100, 7, -148, -147, 257, -220, 97,
	110, 285, 286, 286, -129, -94, -182, 4, 263, 148,
	74, 114, 147, 204, -95, -129, -96, -130, -131, 276,
	277, 282, 285, 199, -97, -129, -77, -129, 37, 135,
	234, -98, -129, 105, -77, -129, -129, -129, -77, -77,
	-77, 285, 7, 7, 230, 230, 7, -122, 286, 284,
	293, -149, -36, -50, -43, -43, 156, -120, 115, -165,
	-43, 285, 285, 132, 132, -43, -43, 115, -43, 115,
	-43, -43, -37, 190, -43, -43, 190, -89, 194, -129,
	-89, -112, 165, -73, -50, 253, -43, 194, -71, 289,
	270, -73, -39, -39, -158, -165, 283, 283, 7, 233,
	233, 233, 233, 285, -129, -233, -51, -233, -41, 242,
	54, 185, -193, -100, 289, 286, 289, -44, 118, -44,
	-75, -50, 90, 5, -43, -153, -14, -43, -86, 110,
	289, 60, -93, 131, 151, 106, 137, 196, 121, -126,
	290, -152, -151, 25, -43, -30, -157, -156, 264, -129,
	233, -241, 224, -135, -129, 158, 238, 94, 245, 81,
	162, 105, 285, -130, -130, -77, 285, -77, -129, 284,
	284, 289, 286, -64, 289, -63, -129, -77, -77, 286,
	286, -146, -147, 85, -129, -225, 172, 285, 285, -129,
	25, 286, 105, 286, -102, 177, 286, 10, 276, 277,
	278, 279, 100, 280, 273, 274, 275, 272, 268, 269,
	270, 55, 145, 201, 12, 13, 14, 129, 117, -130,
	-130, -130, -77, 285, 286, -133, -134, 105, 102, 25,
	-98, -98, -98, 286, 105, -77, 289, 289, 289, 286,
	286, 286, 7, 286, 289, 286, 264, 264, 286, -86,
	-129, 233, 233, 90, 156, -203, -200, -129, -68, 285,
	285, -34, 84, 210, -105, 90, -39, 90, -39, 233,
	-104, 57, 233, -79, 194, 56, 286, 289, -79, -122,
	-81, -149, 286, 284, 7, 7, 286, 148, 114, 147,
	-101, 147, -101, -101, 7, -43, -121, 285, -44, 285,
	285, 285, -43, -40, 286, -136, 112, 38, -156, 131,
	131, -156, -93, 131, -91, 171, -91, -91, -152, -189,
	291, -43, 285, 286, -129, -129, -130, -130, 105, 285,
	-129, -138, 22, 22, 286, -77, 286, 289, 286, -137,
	286, 255, -64, -64, -64, 5, 87, -129, 229, -226,
	-43, 285, 258, -63, 286, -165, -129, -133, -129, -165,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, 81,
	156, 162, -130, 289, -77, 286, -134, -133, -129, -129,
	-165, 286, 286, 286, -77, -129, -129, -129, 286, 7,
	-136, 284, -43, -43, -120, 90, -204, 57, -205, 49,
	156, 158, 244, 182, 47, 77, 189, 286, 286, -68,
	-68, 156, 77, 156, 77, 70, 240, -43, -43, -50,
	-43, -43, -43, -79, -111, 285, 165, -21, -50, -89,
	270, 284, 284, 286, -66, -154, -43, -214, 285, -211,
	-212, -48, 285, -67, -155, -43, -58, -66, 165, -221,
	259, -129, -77, -156, -156, -92, 249, 165, 131, -156,
	-162, 267, -128, -127, 103, 154, 285, -68, -151, 22,
	22, -129, -138, 286, -129, -129, 286, -129, 5, -129,
	286, 286, 286, -129, -230, -43, -129, 286, 286, -134,
	105, 81, 162, 285, -129, 286, 286, 289, 286, 286,
	286, -221, -120, -43, -75, 158, 132, 285, -130, -50,
	-119, -238, 58, 222, 286, 286, 158, 158, -129, -165,
	-39, -39, 233, 233, 82, -68, 57, -85, -30, 285,
	286, 289, -49, -83, 49, -49, -129, 285, -66, 286,
	289, 286, 286, -50, -222, -224, -43, -92, 285, -129,
	-156, 162, 289, 292, 270, -68, 286, -129, -129, 286,
	286, -64, -223, 176, 286, -130, 105, 285, -138, 286,
	-129, -205, -129, -45, 285, 285, 189, -38, 49, -43,
	-43, 246, 157, 286, -43, -119, -154, -35, -75, -35,
	286, -77, 286, -155, -119, 285, 289, 25, -68, 225,
	-127, -189, 286, 286, -64, 38, -130, -138, 286, 286,
	286, -208, 146, -43, -68, -50, -33, 249, -75, 210,
	-122, -49, -64, -119, -66, -224, -226, 286, 230, -227,
	184, 200, -77, 286, -206, -209, -207, 165, 106, 175,
	213, 286, 286, -62, 285, -129, -80, -35, 286, 286,
	5, 286, -228, -229, 30, 241, 62, -129, -228, -207,
	165, -209, 165, 246, 79, -208, -68, -122, -119, -229,
	179, 101, 199, 179, 101, -210, 153, 193, 41, 210,
	-210, -206, 286, 22, 16, 158, 77, -229,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 0, 52, 53, 54, 0, 0, 343,
	0, 0, 0, 0, 0, 317, -2, 0, 113, 0,
	275, 0, 275, 275, 279, 0, 345, 240, 342, -2,
	353, 0, 0, 0, 351, 331, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 70, 71, 72, 73, 74, 75, 76, 77, 0,
	83, 763, 764, 765, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 90, 0, 96, 97,
	98, 100, 101, 102, 103, 104, 105, 106, 0, 268,
	855, 281, 109, 821, 859, 921, 871, 116, 126, 0,
	927, -2, 130, 64, 159, 160, 0, 162, 176, 0,
	0, 0, 174, 0, 0, 171, 0, 286, 274, 286,
	271, 272, 273, 276, 0, 267, 0, 344, 0, 0,
	0, 239, -2, 327, 328, -2, 0, 348, 348, 348,
	0, 0, 328, 0, 336, 845, 339, 746, 337, 0,
	0, 350, 349, 0, 332, 412, 0, 736, 373, 0,
	2, 0, 907, 0, 0, 907, 0, 0, 0, 0,
	0, 418, 56, 907, 47, 907, 732, 47, 907, 62,
	0, 78, 80, 773, 774, 775, 776, 932, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 0, 0, 0, 88, 0, 0, 0, 0, 280,
	110, 897, 112, 0, 115, 117, 118, 0, 0, 0,
	0, 0, 0, 129, 154, 155, 65, 0, 0, 178,
	0, 0, 0, 0, 167, 0, 168, 0, 170, 0,
	269, 282, 283, 270, 0, 278, 47, 416, 0, 907,
	767, 291, 907, -2, 0, 323, 360, 361, 0, 0,
	0, 346, 347, 0, 0, 0, 319, 320, 0, 338,
	0, 0, 376, 724, 728, 729, 504, 0, 0, 0,
	0, 0, 0, 585, 586, 587, 0, 589, 590, 591,
	902, 0, 595, 596, 921, 736, 749, 750, 751, 752,
	0, 0, 0, 757, 758, 759, 708, 634, 605, -2,
	-2, 747, 442, 443, 444, 445, -2, 934, 609, 611,
	613, 614, 615, 616, 0, 903, 917, 918, 926, 930,
	931, 907, 914, 908, 898, 905, 913, 803, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 772, 466,
	467, 472, 473, 475, 376, 374, 413, 414, 0, 737,
	715, 709, 710, 0, 0, 0, 721, 719, 720, 24,
	264, 26, 0, 264, 264, 0, 0, 0, 0, 0,
	0, 422, 0, 297, 0, 0, 419, 0, 0, 58,
	0, 45, 46, 0, 60, 0, 0, 343, 0, 0,
	907, 343, 0, 668, 428, 429, 430, 431, 432, 501,
	435, 436, 437, 438, 439, 440, 441, 449, 450, 451,
	452, 453, 454, 463, 0, 448, 448, 448, 460, 461,
	464, 465, 470, 471, 482, 483, 485, 487, 481, 481,
	481, 478, 479, 0, 666, 0, 93, 0, 799, 734,
	739, 742, 99, 0, 0, 0, 0, 0, 0, 121,
	141, 142, 143, 122, 124, 131, 133, 134, 135, 144,
	145, 146, 147, 233, 0, 235, 157, 158, 760, 0,
	123, 125, 127, 128, 148, 149, 0, 151, 152, 153,
	0, 66, 777, 778, 779, 780, 781, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 161, 163, 0, 175,
	164, 165, 166, 173, 169, 172, 0, 0, 277, 236,
	0, 182, 0, 0, 907, 766, 288, 0, 0, 326,
	358, 359, 362, 365, 366, 363, 504, 333, 334, 335,
	354, 355, 253, 340, 0, 0, 743, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 727, 508, 509, 510, 532, 533, 0, -2, 666,
	0, 592, 593, 594, 0, 0, -2, 0, 754, 501,
	0, 0, 707, 636, 0, 0, 0, 0, 0, 0,
	0, 687, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 456, 469, 480, 477, 476, 458, 0, 457, 455,
	0, 459, 0, 0, 0, 422, 0, 716, 0, 713,
	714, 0, 723, 0, 0, 0, 0, 263, 28, 907,
	0, 38, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 308,
	0, 308, 299, 0, 0, 0, 295, 376, 310, 312,
	313, 0, 0, 420, 57, 733, 47, 63, 47, 69,
	79, 0, 81, 84, 85, 86, 87, 82, 0, 423,
	425, 433, 0, 488, 489, 490, 491, 492, 493, 502,
	89, 0, 0, 0, 94, 95, 740, 741, 0, 0,
	114, 119, 120, 287, 0, 138, 0, 140, 0, 234,
	762, 761, 501, 67, 177, 107, 284, 285, 417, 0,
	181, 183, 185, 186, 187, 188, 767, 0, 767, 0,
	0, 0, 0, 0, 364, 367, 368, 0, 357, 251,
	252, 343, 0, 745, 370, 725, 375, 377, 385, 401,
	388, 0, 505, 506, 0, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, -2, -2, -2, 524, 525,
	526, -2, -2, -2, 530, 531, -2, 0, 0, 718,
	0, 0, 538, 0, 541, 543, 545, 0, 0, 0,
	0, 717, 555, 699, 0, 726, 540, 0, 0, 588,
	0, 0, 0, 672, 673, 0, -2, 597, 353, 0,
	0, 0, 0, 755, 0, 706, 702, 0, 644, 0,
	0, 0, 610, 612, 0, 0, 0, 676, 677, 678,
	679, 680, 681, 682, 0, 0, 0, 0, 557, 0,
	0, 0, 0, 921, 0, 666, 692, 0, 0, 0,
	0, 0, 666, 0, 698, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 370, 415, 711,
	0, 722, 27, 255, 0, 0, 0, 30, 907, 191,
	0, 0, 0, 0, 0, 266, 39, 907, 47, 907,
	47, 40, 25, 264, 254, 257, 0, 55, 0, 421,
	292, 293, 0, 0, 730, 301, 298, 0, 422, 0,
	0, 0, 59, 61, 0, 669, 0, 0, 0, 0,
	0, 0, 0, 0, 667, 91, 735, 92, 111, 136,
	137, 139, 132, 150, 0, 179, 0, 0, 767, 0,
	0, 0, 0, 290, 291, 356, 0, 744, 372, 0,
	0, 0, 0, 0, 0, 409, 409, 409, 407, 401,
	0, 387, 400, 0, 399, -2, 388, 0, 0, -2,
	0, 0, 0, 556, -2, 539, 542, 544, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 667, 670,
	671, 0, -2, 0, 0, 352, 353, 353, 353, 603,
	0, 0, 703, 0, 0, 604, 0, 0, 0, 0,
	0, 618, 0, 619, 0, 0, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	560, 561, 0, 0, 621, 690, 691, 0, 0, 0,
	0, 0, 0, 626, 0, 697, 0, 0, 0, 630,
	631, 632, 0, 446, 0, 462, 484, 486, 474, 372,
	0, 0, 0, 0, 0, 189, 205, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 36, 0, 42, 0,
	0, 0, 0, 307, 0, 306, 0, 0, 296, 308,
	311, 314, 0, 426, 0, 0, 434, 494, 495, 496,
	497, 498, 499, 500, 0, 108, 184, 0, 0, 0,
	182, 0, 0, 289, 341, 638, 0, 0, 378, 0,
	0, 0, 0, 0, 404, 408, 405, 406, 403, 383,
	0, 397, 0, 390, 507, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 700, 0, 661, 0, -2, 674,
	598, 0, 0, 0, 0, 756, 701, 705, 0, 642,
	643, 647, 0, 0, 608, 0, 675, 684, 685, 558,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	-2, -2, -2, 575, 576, 577, -2, -2, -2, 0,
	0, 0, 686, 0, 0, 664, 688, 689, 694, 695,
	0, 623, 624, 625, 696, 0, 0, 0, 468, 0,
	638, 712, 259, 261, 29, 0, 190, 0, 193, 0,
	0, 196, 197, 0, 0, 0, 0, 207, 214, 0,
	0, 0, 44, 0, 0, 265, 0, 47, 47, 256,
	0, 0, 258, 294, 0, 0, 0, 300, 731, 309,
	0, 427, 424, 503, 0, 241, 250, 250, 0, 606,
	607, 0, 0, 0, 246, 248, 0, 0, 0, 329,
	0, 371, 369, 391, 0, 393, 0, 0, 0, 395,
	386, 0, 0, 381, 0, 380, 0, 0, 389, 0,
	0, -2, 0, 549, -2, -2, 660, 667, 753, 353,
	599, 601, 602, 704, 649, 646, 0, 633, 617, 683,
	0, 0, 0, 0, 667, 663, 622, 0, 628, 629,
	447, 330, 31, 0, 194, 195, 198, 0, 200, 769,
	208, 0, 211, 212, 209, 0, 33, 34, 43, 49,
	35, 41, 0, 0, 0, 0, 0, 315, 316, 0,
	214, 0, 253, 748, 0, 253, 0, 0, 0, 204,
	0, 180, 214, 0, 637, 639, 0, 392, 0, 411,
	394, 0, 0, 384, 0, 0, 398, -2, -2, 550,
	662, 0, 353, 0, 635, -2, 0, 0, 0, 665,
	0, 192, 0, 220, 0, 0, 0, 51, 0, 260,
	262, 0, 303, 422, 305, 202, 242, 243, 249, 244,
	250, 353, 214, 247, 237, 0, 0, 0, 0, 0,
	382, 379, 396, 600, 652, 0, -2, 0, 583, 627,
	199, 225, 0, 0, 0, 216, 37, 0, 48, 0,
	304, 253, 0, 203, 0, 640, 641, 410, 0, 0,
	0, 0, 648, 584, 201, 221, 222, 0, 217, 218,
	219, 768, 213, 220, 0, 50, 422, 245, 598, 214,
	402, 645, 650, 653, -2, 874, 796, 0, 651, 223,
	0, 224, 0, 0, 0, 225, 0, 302, 238, 0,
	655, 656, 657, 658, 659, 226, 0, 229, 230, 0,
	227, 210, 215, 0, 228, 231, 232, 654,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 274, 3, 280, 275, 3,
	285, 286, 278, 276, 289, 277, 287, 279, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 293, 288,
	268, 270, 269, 3, 290, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 283, 3, 284, 273, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 291, 272, 292, 282,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 271, 57611, 281, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:689
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:695
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:701
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 16:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 23:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			unimplemented()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:807
		{
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:814
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = nil
		}
	case 45:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = DropCascade
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = DropRestrict
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = DropDefault
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:861
		{
			unimplementedWithIssue(2473)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:862
		{
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:865
		{
			unimplemented()
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:866
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:968
		{ /* SKIP DOC */
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1070
		{
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{ /* SKIP DOC */
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			unimplemented()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1213
		{
			unimplemented()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = Low
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = Normal
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = High
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			unimplemented()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			unimplemented()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = []string(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1461
		{ /* unimplemented */
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1608
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = []string(nil)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = []string(nil)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1647
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1657
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1658
		{
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1669
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = true
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = false
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1747
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1767
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = Ascending
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = Descending
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = true
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = false
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1834
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1877
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.str = ""
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.str = ""
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1971
		{
			unimplementedWithIssue(6637)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1978
		{
			unimplementedWithIssue(6637)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			unimplemented()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = []string(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			unimplemented()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2275
		{
			unimplemented()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			unimplemented()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2279
		{
			unimplemented()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2283
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2287
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = true
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = false
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = false
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = true
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2310
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2311
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{ /* SKIP DOC */
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2552
		{
			unimplemented()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.str = astFullJoin
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.str = astLeftJoin
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.str = astRightJoin
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.str = astInnerJoin
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2649
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2650
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2740
		{
			unimplementedWithIssue(2115)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			unimplementedWithIssue(2115)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			unimplementedWithIssue(2115)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2745
		{
			unimplementedWithIssue(2115)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2810
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = nil
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2927
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2994
		{
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3025
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3026
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3028
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3029
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3030
		{
			unimplemented()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			unimplemented()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3037
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3042
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3453
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3454
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3490
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3495
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3514
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3536
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3580
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3581
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3584
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3585
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3590
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3600
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3602
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3606
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3618
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3622
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3630
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3632
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3636
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3972
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3973
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4129
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4165
		{
			unimplemented()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = DNull
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.str = ""
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
