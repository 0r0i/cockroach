// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:291
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIGSERIAL = 57375
const BIT = 57376
const BLOB = 57377
const BOOL = 57378
const BOOLEAN = 57379
const BOTH = 57380
const BY = 57381
const BYTEA = 57382
const BYTES = 57383
const CASCADE = 57384
const CASE = 57385
const CAST = 57386
const CHAR = 57387
const CHARACTER = 57388
const CHARACTERISTICS = 57389
const CHECK = 57390
const COALESCE = 57391
const COLLATE = 57392
const COLLATION = 57393
const COLUMN = 57394
const COLUMNS = 57395
const COMMIT = 57396
const COMMITTED = 57397
const CONCAT = 57398
const CONFLICT = 57399
const CONSTRAINT = 57400
const COVERING = 57401
const CREATE = 57402
const CROSS = 57403
const CUBE = 57404
const CURRENT = 57405
const CURRENT_CATALOG = 57406
const CURRENT_DATE = 57407
const CURRENT_ROLE = 57408
const CURRENT_TIME = 57409
const CURRENT_TIMESTAMP = 57410
const CURRENT_USER = 57411
const CYCLE = 57412
const DATA = 57413
const DATABASE = 57414
const DATABASES = 57415
const DATE = 57416
const DAY = 57417
const DEC = 57418
const DECIMAL = 57419
const DEFAULT = 57420
const DEALLOCATE = 57421
const DEFERRABLE = 57422
const DELETE = 57423
const DESC = 57424
const DISTINCT = 57425
const DO = 57426
const DOUBLE = 57427
const DROP = 57428
const ELSE = 57429
const ENCODING = 57430
const END = 57431
const ESCAPE = 57432
const EXCEPT = 57433
const EXISTS = 57434
const EXECUTE = 57435
const EXPLAIN = 57436
const EXTRACT = 57437
const FALSE = 57438
const FAMILY = 57439
const FETCH = 57440
const FILTER = 57441
const FIRST = 57442
const FLOAT = 57443
const FLOORDIV = 57444
const FOLLOWING = 57445
const FOR = 57446
const FORCE_INDEX = 57447
const FOREIGN = 57448
const FROM = 57449
const FULL = 57450
const GRANT = 57451
const GRANTS = 57452
const GREATEST = 57453
const GROUP = 57454
const GROUPING = 57455
const HAVING = 57456
const HIGH = 57457
const HOUR = 57458
const IF = 57459
const IFNULL = 57460
const IN = 57461
const INDEX = 57462
const INDEXES = 57463
const INITIALLY = 57464
const INNER = 57465
const INSERT = 57466
const INT = 57467
const INT64 = 57468
const INTEGER = 57469
const INTERSECT = 57470
const INTERVAL = 57471
const INTO = 57472
const IS = 57473
const ISOLATION = 57474
const JOIN = 57475
const KEY = 57476
const KEYS = 57477
const LATERAL = 57478
const LEADING = 57479
const LEAST = 57480
const LEFT = 57481
const LEVEL = 57482
const LIKE = 57483
const LIMIT = 57484
const LOCAL = 57485
const LOCALTIME = 57486
const LOCALTIMESTAMP = 57487
const LOW = 57488
const LSHIFT = 57489
const MATCH = 57490
const MINUTE = 57491
const MONTH = 57492
const NAME = 57493
const NAMES = 57494
const NATURAL = 57495
const NEXT = 57496
const NO = 57497
const NO_INDEX_JOIN = 57498
const NORMAL = 57499
const NOT = 57500
const NOTHING = 57501
const NULL = 57502
const NULLIF = 57503
const NULLS = 57504
const NUMERIC = 57505
const OF = 57506
const OFF = 57507
const OFFSET = 57508
const ON = 57509
const ONLY = 57510
const OR = 57511
const ORDER = 57512
const ORDINALITY = 57513
const OUT = 57514
const OUTER = 57515
const OVER = 57516
const OVERLAPS = 57517
const OVERLAY = 57518
const PARTIAL = 57519
const PARTITION = 57520
const PLACING = 57521
const POSITION = 57522
const PRECEDING = 57523
const PRECISION = 57524
const PREPARE = 57525
const PRIMARY = 57526
const PRIORITY = 57527
const RANGE = 57528
const READ = 57529
const REAL = 57530
const RECURSIVE = 57531
const REF = 57532
const REFERENCES = 57533
const RENAME = 57534
const REPEATABLE = 57535
const RELEASE = 57536
const RESTRICT = 57537
const RETURNING = 57538
const REVOKE = 57539
const RIGHT = 57540
const ROLLBACK = 57541
const ROLLUP = 57542
const ROW = 57543
const ROWS = 57544
const RSHIFT = 57545
const SAVEPOINT = 57546
const SEARCH = 57547
const SECOND = 57548
const SELECT = 57549
const SERIAL = 57550
const SERIALIZABLE = 57551
const SESSION = 57552
const SESSION_USER = 57553
const SET = 57554
const SHOW = 57555
const SIMILAR = 57556
const SIMPLE = 57557
const SMALLINT = 57558
const SMALLSERIAL = 57559
const SNAPSHOT = 57560
const SOME = 57561
const SQL = 57562
const START = 57563
const STRICT = 57564
const STRING = 57565
const STORING = 57566
const SUBSTRING = 57567
const SYMMETRIC = 57568
const SYSTEM = 57569
const TABLE = 57570
const TABLES = 57571
const TEXT = 57572
const THEN = 57573
const TIME = 57574
const TIMESTAMP = 57575
const TIMESTAMPTZ = 57576
const TO = 57577
const TRAILING = 57578
const TRANSACTION = 57579
const TREAT = 57580
const TRIM = 57581
const TRUE = 57582
const TRUNCATE = 57583
const TYPE = 57584
const UNBOUNDED = 57585
const UNCOMMITTED = 57586
const UNION = 57587
const UNIQUE = 57588
const UNKNOWN = 57589
const UPDATE = 57590
const UPSERT = 57591
const USER = 57592
const USING = 57593
const VALID = 57594
const VALIDATE = 57595
const VALUE = 57596
const VALUES = 57597
const VARCHAR = 57598
const VARIADIC = 57599
const VARYING = 57600
const WHEN = 57601
const WHERE = 57602
const WINDOW = 57603
const WITH = 57604
const WITHIN = 57605
const WITHOUT = 57606
const YEAR = 57607
const ZONE = 57608
const NOT_LA = 57609
const WITH_LA = 57610
const AS_LA = 57611
const POSTFIXOP = 57612
const UMINUS = 57613

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4596

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	290, 24,
	-2, 349,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 324,
	167, 324,
	196, 324,
	288, 324,
	290, 324,
	-2, 334,
	-1, 51,
	1, 327,
	167, 327,
	196, 327,
	288, 327,
	290, 327,
	-2, 333,
	-1, 60,
	1, 24,
	290, 24,
	-2, 349,
	-1, 268,
	1, 161,
	290, 161,
	-2, 835,
	-1, 299,
	142, 359,
	166, 359,
	-2, 330,
	-1, 302,
	142, 358,
	166, 358,
	-2, 328,
	-1, 422,
	142, 358,
	166, 358,
	-2, 331,
	-1, 478,
	287, 777,
	-2, 770,
	-1, 479,
	287, 778,
	-2, 771,
	-1, 485,
	5, 493,
	287, 493,
	-2, 921,
	-1, 508,
	5, 459,
	-2, 897,
	-1, 509,
	5, 487,
	287, 487,
	-2, 899,
	-1, 510,
	5, 467,
	-2, 900,
	-1, 511,
	5, 466,
	-2, 901,
	-1, 512,
	5, 487,
	287, 487,
	-2, 904,
	-1, 513,
	5, 487,
	287, 487,
	-2, 905,
	-1, 514,
	5, 488,
	-2, 908,
	-1, 515,
	5, 454,
	-2, 909,
	-1, 516,
	5, 454,
	-2, 910,
	-1, 517,
	5, 469,
	-2, 913,
	-1, 518,
	5, 455,
	-2, 918,
	-1, 519,
	5, 456,
	-2, 919,
	-1, 520,
	5, 457,
	-2, 920,
	-1, 521,
	5, 454,
	-2, 924,
	-1, 522,
	5, 460,
	-2, 929,
	-1, 523,
	5, 458,
	-2, 932,
	-1, 524,
	5, 485,
	287, 485,
	-2, 934,
	-1, 525,
	5, 489,
	-2, 937,
	-1, 526,
	5, 491,
	-2, 938,
	-1, 527,
	5, 484,
	287, 484,
	-2, 942,
	-1, 838,
	91, 334,
	128, 334,
	142, 334,
	166, 334,
	170, 334,
	245, 334,
	-2, 597,
	-1, 846,
	287, 755,
	-2, 744,
	-1, 1036,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 527,
	-1, 1037,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 528,
	-1, 1038,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 529,
	-1, 1042,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 533,
	-1, 1043,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 534,
	-1, 1044,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 535,
	-1, 1047,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 540,
	-1, 1077,
	175, 668,
	-2, 671,
	-1, 1237,
	91, 334,
	128, 334,
	142, 334,
	166, 334,
	170, 334,
	245, 334,
	-2, 407,
	-1, 1241,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 541,
	-1, 1246,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 542,
	-1, 1264,
	175, 667,
	-2, 670,
	-1, 1418,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 543,
	-1, 1423,
	131, 0,
	-2, 553,
	-1, 1431,
	175, 669,
	-2, 672,
	-1, 1464,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 578,
	-1, 1465,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 579,
	-1, 1466,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 580,
	-1, 1470,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 584,
	-1, 1471,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 585,
	-1, 1472,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 586,
	-1, 1576,
	131, 0,
	-2, 554,
	-1, 1579,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 557,
	-1, 1580,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 559,
	-1, 1664,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 558,
	-1, 1665,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 560,
	-1, 1672,
	131, 0,
	-2, 587,
	-1, 1713,
	131, 0,
	-2, 588,
	-1, 1761,
	31, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 896,
}

const sqlNprod = 1035
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 22556

var sqlAct = [...]int{

	479, 1742, 1760, 1741, 795, 1782, 920, 1759, 1718, 1009,
	1743, 477, 1126, 1617, 928, 1442, 1540, 1652, 303, 476,
	469, 582, 1549, 269, 37, 1568, 1639, 540, 530, 1502,
	671, 1560, 84, 84, 84, 841, 1319, 84, 325, 569,
	84, 1398, 993, 1554, 1407, 1234, 1018, 1267, 84, 990,
	1318, 1224, 549, 1233, 843, 84, 84, 546, 583, 84,
	776, 992, 84, 84, 84, 929, 1539, 905, 84, 84,
	84, 84, 85, 351, 1169, 528, 1220, 1087, 308, 773,
	896, 1060, 1123, 1063, 1021, 645, 952, 17, 943, 797,
	310, 50, 985, 791, 346, 23, 13, 308, 629, 1175,
	302, 959, 410, 451, 441, 442, 541, 6, 551, 873,
	452, 411, 656, 542, 626, 877, 348, 344, 73, 8,
	71, 50, 7, 425, 5, 4, 78, 77, 343, 445,
	341, 922, 313, 996, 256, 266, 426, 647, 79, 247,
	424, 625, 643, 337, 562, 352, 311, 429, 353, 1019,
	80, 50, 51, 75, 1659, 74, 76, 1660, 571, 52,
	1789, 307, 571, 1013, 925, 921, 307, 571, 1232, 322,
	1756, 956, 322, 1638, 333, 560, 1749, 962, 322, 1013,
	333, 1740, 292, 1734, 949, 349, 1013, 1715, 1709, 1703,
	949, 1013, 331, 1641, 1699, 1690, 1181, 1638, 1013, 798,
	1262, 1666, 315, 300, 949, 1263, 1663, 1477, 321, 1013,
	299, 328, 957, 1649, 1430, 1646, 1638, 338, 1647, 1637,
	1622, 1206, 1638, 1013, 81, 1621, 1601, 1581, 1013, 962,
	962, 1578, 1513, 1427, 949, 1013, 962, 1290, 894, 1307,
	1308, 1309, 56, 84, 1375, 958, 955, 1370, 1369, 1575,
	1336, 1370, 1334, 1337, 1333, 962, 1332, 962, 84, 962,
	799, 84, 84, 58, 1264, 49, 1261, 962, 799, 1014,
	971, 962, 1013, 962, 961, 948, 893, 962, 949, 892,
	1222, 577, 1266, 1304, 578, 1208, 1013, 962, 964, 1071,
	59, 29, 84, 56, 84, 1008, 84, 54, 84, 30,
	979, 543, 960, 55, 436, 544, 437, 56, 767, 766,
	637, 572, 636, 84, 58, 572, 376, 320, 423, 417,
	572, 543, 53, 60, 84, 544, 544, 670, 58, 1295,
	396, 1758, 1755, 1748, 1710, 84, 84, 84, 1648, 84,
	1606, 59, 1602, 1290, 1594, 1593, 1592, 422, 54, 1587,
	1586, 1585, 1538, 1492, 55, 59, 1531, 1487, 1310, 535,
	539, 954, 1486, 1485, 1433, 1416, 384, 1397, 1379, 84,
	1341, 1338, 1326, 924, 1305, 385, 84, 1317, 84, 1289,
	1286, 1284, 1272, 953, 574, 623, 1271, 53, 1210, 351,
	351, 800, 1207, 1140, 1094, 635, 1093, 673, 84, 611,
	84, 84, 84, 84, 322, 84, 436, 575, 1068, 84,
	802, 570, 56, 1751, 84, 435, 770, 471, 1444, 1702,
	84, 1682, 534, 849, 1681, 1674, 414, 1655, 543, 1644,
	1306, 801, 544, 58, 537, 1295, 1636, 816, 84, 1614,
	1377, 84, 1599, 416, 1181, 322, 563, 563, 409, 1571,
	1547, 1422, 798, 432, 433, 769, 1415, 1394, 1393, 438,
	59, 352, 352, 300, 353, 353, 1392, 54, 840, 674,
	299, 1390, 675, 55, 1353, 1352, 1530, 1316, 561, 322,
	308, 564, 1280, 807, 338, 1279, 1258, 1254, 1065, 1195,
	1154, 1153, 53, 1133, 1069, 800, 529, 1301, 1302, 1303,
	846, 1300, 1297, 1298, 1299, 1291, 1292, 1293, 1294, 1296,
	1092, 800, 1012, 878, 802, 881, 632, 885, 579, 633,
	871, 870, 869, 868, 867, 866, 865, 864, 817, 667,
	802, 863, 660, 756, 862, 801, 760, 761, 762, 84,
	763, 759, 861, 860, 765, 673, 859, 858, 768, 857,
	781, 801, 856, 84, 847, 1154, 845, 84, 786, 484,
	84, 84, 780, 1109, 779, 53, 84, 888, 84, 84,
	793, 84, 771, 326, 84, 890, 84, 84, 440, 351,
	382, 372, 300, 370, 818, 300, 300, 807, 1537, 787,
	1536, 844, 788, 789, 1189, 899, 1188, 536, 1661, 938,
	346, 1290, 1535, 807, 390, 1566, 1182, 1003, 1340, 1339,
	1240, 1291, 1292, 1293, 1294, 1296, 405, 674, 391, 1290,
	675, 883, 875, 876, 886, 884, 854, 1555, 84, 84,
	921, 1445, 879, 966, 910, 912, 1088, 882, 1275, 259,
	874, 552, 1177, 553, 1724, 1689, 1771, 1770, 1521, 887,
	923, 352, 923, 1202, 353, 812, 809, 810, 811, 803,
	804, 805, 806, 808, 970, 73, 532, 322, 50, 944,
	333, 673, 50, 78, 77, 285, 932, 946, 945, 297,
	286, 333, 64, 531, 333, 79, 902, 1630, 918, 947,
	291, 349, 290, 1295, 939, 941, 927, 80, 940, 936,
	75, 984, 74, 76, 937, 850, 915, 1629, 1365, 1509,
	554, 1295, 665, 664, 1345, 658, 653, 1344, 906, 1376,
	81, 879, 1242, 882, 552, 65, 553, 1194, 481, 876,
	875, 1193, 388, 1192, 1688, 412, 1735, 967, 1191, 1510,
	973, 306, 965, 674, 968, 1052, 675, 963, 972, 956,
	917, 916, 898, 552, 413, 553, 1305, 1137, 1364, 84,
	1136, 49, 898, 803, 804, 805, 806, 808, 897, 389,
	1025, 84, 84, 24, 408, 368, 909, 294, 305, 1706,
	1726, 805, 806, 808, 42, 565, 668, 29, 589, 960,
	957, 68, 1062, 554, 1619, 30, 62, 1355, 1062, 1737,
	84, 1779, 84, 1174, 1015, 975, 1006, 1007, 44, 666,
	1088, 977, 1306, 1770, 49, 1738, 1165, 1290, 1384, 1505,
	307, 1506, 554, 958, 955, 1024, 1170, 978, 571, 611,
	1367, 673, 1170, 33, 1179, 295, 976, 617, 1168, 69,
	29, 558, 1201, 45, 63, 1508, 800, 32, 30, 67,
	66, 669, 1511, 298, 908, 557, 1683, 1072, 1076, 1023,
	1079, 1066, 1203, 34, 1745, 802, 386, 610, 387, 888,
	988, 1293, 1294, 1296, 888, 960, 1118, 555, 987, 1778,
	960, 322, 1130, 1131, 1132, 872, 801, 1291, 1292, 1293,
	1294, 1296, 1670, 1139, 1278, 304, 84, 84, 84, 1075,
	379, 381, 84, 674, 1016, 84, 675, 1507, 56, 1295,
	322, 84, 84, 84, 84, 84, 907, 84, 84, 387,
	989, 406, 1099, 1356, 837, 84, 1408, 84, 550, 58,
	588, 307, 611, 1746, 84, 1362, 1084, 31, 807, 954,
	1381, 1067, 1744, 84, 1149, 895, 1769, 70, 47, 308,
	1143, 35, 61, 46, 1305, 1767, 59, 1777, 36, 1620,
	555, 56, 1151, 54, 84, 84, 39, 41, 1164, 55,
	84, 1747, 1553, 1382, 407, 43, 1001, 1184, 611, 1185,
	351, 572, 58, 817, 399, 377, 659, 654, 72, 555,
	1244, 427, 1110, 1102, 375, 48, 1061, 1172, 84, 1058,
	84, 84, 84, 1144, 428, 84, 1145, 1658, 1187, 59,
	1306, 1793, 1056, 1624, 84, 428, 54, 1623, 1180, 1612,
	1347, 84, 55, 84, 1212, 1517, 1148, 1002, 1785, 1597,
	960, 800, 778, 1183, 1103, 1176, 772, 613, 1050, 818,
	1569, 53, 1520, 1380, 1176, 1719, 427, 308, 764, 1519,
	802, 638, 352, 322, 612, 353, 1197, 1613, 1156, 1223,
	1155, 1473, 1199, 1198, 1563, 1204, 386, 1104, 1101, 1239,
	1205, 801, 1403, 1200, 1054, 1402, 1053, 1209, 1257, 1211,
	1059, 336, 1259, 335, 1299, 1291, 1292, 1293, 1294, 1296,
	308, 1570, 1186, 1792, 1269, 1270, 305, 419, 1265, 585,
	944, 1218, 1217, 50, 245, 1516, 1227, 1238, 946, 945,
	1598, 1399, 1213, 811, 803, 804, 805, 806, 808, 642,
	947, 1230, 1221, 807, 1105, 1091, 1051, 1315, 1321, 1518,
	1673, 1225, 1243, 322, 1596, 1245, 1474, 1228, 1328, 308,
	1320, 1783, 1475, 1421, 1499, 1227, 248, 1285, 1048, 1253,
	640, 1226, 969, 404, 402, 84, 1055, 401, 400, 1351,
	1230, 641, 397, 1057, 1274, 1562, 334, 253, 817, 855,
	1406, 758, 249, 1251, 1090, 1360, 1228, 1358, 1439, 1346,
	1214, 1784, 84, 1100, 1004, 1000, 1249, 1372, 942, 576,
	1110, 1110, 573, 568, 559, 250, 1229, 464, 1786, 556,
	1359, 777, 1361, 1323, 1324, 1325, 1631, 84, 1771, 84,
	252, 84, 662, 393, 1633, 84, 1342, 430, 589, 914,
	1349, 1049, 898, 84, 818, 1010, 84, 1641, 913, 82,
	240, 241, 84, 673, 258, 1229, 84, 270, 84, 1164,
	1374, 1110, 1110, 1110, 318, 258, 1363, 1373, 1368, 1561,
	1247, 1685, 314, 314, 1252, 3, 324, 1712, 898, 324,
	330, 324, 1400, 1412, 911, 324, 339, 324, 270, 1401,
	1389, 1428, 1404, 1409, 1410, 1366, 1424, 1396, 1405, 84,
	1011, 284, 431, 611, 1371, 1411, 394, 1435, 1436, 1437,
	1391, 800, 932, 251, 1383, 1385, 1386, 610, 434, 803,
	804, 805, 806, 808, 800, 674, 1704, 244, 675, 319,
	802, 611, 611, 926, 794, 634, 327, 581, 1432, 611,
	951, 589, 1790, 1791, 1290, 800, 287, 288, 1446, 1478,
	1248, 801, 1493, 322, 254, 1387, 322, 1250, 1451, 1378,
	1488, 1448, 1449, 255, 801, 84, 84, 84, 1335, 1453,
	1190, 611, 1138, 84, 84, 1480, 1135, 1514, 1515, 84,
	588, 84, 1134, 84, 84, 84, 84, 589, 981, 980,
	1481, 84, 1085, 1110, 1110, 982, 1757, 1583, 1438, 1215,
	983, 1484, 848, 293, 1494, 1618, 246, 757, 398, 1498,
	1589, 1736, 1277, 84, 84, 1669, 1651, 1089, 853, 28,
	610, 1542, 1545, 84, 84, 457, 1545, 84, 1500, 1348,
	1544, 1546, 995, 1557, 1544, 1546, 84, 84, 994, 676,
	1572, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
	373, 1110, 663, 1551, 1577, 84, 610, 1534, 652, 1558,
	1559, 611, 480, 1564, 403, 378, 646, 1532, 270, 270,
	655, 1552, 1573, 588, 1098, 533, 248, 613, 482, 1509,
	586, 1503, 1528, 1524, 483, 587, 880, 470, 584, 1501,
	347, 1533, 1565, 930, 612, 1086, 1273, 253, 1595, 258,
	851, 324, 249, 270, 456, 420, 462, 461, 1073, 1510,
	84, 369, 84, 453, 84, 84, 1567, 1231, 40, 588,
	314, 383, 84, 322, 322, 250, 264, 322, 1504, 265,
	1173, 324, 1529, 1005, 782, 1357, 296, 1610, 1287, 585,
	252, 84, 324, 324, 324, 1632, 566, 371, 1607, 1116,
	1108, 1106, 1608, 1097, 415, 545, 931, 395, 1017, 950,
	611, 439, 1548, 790, 84, 1750, 84, 317, 316, 1545,
	991, 392, 1627, 1628, 84, 639, 324, 1544, 1546, 1642,
	613, 974, 84, 630, 1634, 630, 1662, 1640, 289, 1505,
	1626, 1506, 1680, 1684, 1354, 1723, 57, 612, 22, 20,
	19, 1654, 18, 16, 15, 270, 14, 630, 270, 270,
	270, 21, 270, 1668, 12, 1508, 270, 11, 10, 9,
	1657, 258, 1511, 251, 1645, 27, 613, 775, 26, 25,
	2, 1675, 1616, 1, 1255, 1256, 0, 0, 611, 0,
	84, 84, 585, 612, 84, 314, 0, 0, 796, 1678,
	1110, 0, 84, 0, 0, 0, 0, 0, 84, 1694,
	1545, 1692, 1696, 0, 254, 1693, 84, 1698, 1544, 1546,
	1705, 308, 673, 1701, 1650, 1695, 0, 1507, 888, 0,
	1700, 0, 589, 0, 322, 1312, 1313, 1314, 585, 271,
	0, 0, 84, 84, 84, 1707, 84, 1721, 1711, 0,
	0, 0, 1708, 282, 0, 0, 1714, 1727, 0, 0,
	589, 589, 0, 611, 84, 0, 0, 0, 589, 1725,
	0, 0, 0, 1730, 1545, 0, 0, 1729, 0, 0,
	1733, 1732, 1544, 1546, 1728, 1739, 1110, 84, 273, 0,
	0, 0, 0, 0, 674, 283, 324, 675, 1754, 0,
	589, 1753, 0, 1223, 0, 1768, 1765, 272, 274, 0,
	903, 610, 84, 1766, 324, 0, 1773, 324, 919, 1772,
	1774, 0, 800, 324, 1776, 934, 935, 0, 324, 1731,
	1775, 324, 0, 270, 270, 0, 1788, 1787, 0, 610,
	610, 802, 0, 0, 0, 275, 0, 610, 0, 0,
	1227, 0, 800, 1794, 1722, 276, 277, 0, 0, 0,
	0, 0, 801, 1110, 0, 1230, 0, 1419, 1420, 0,
	278, 802, 0, 828, 588, 1225, 0, 0, 0, 610,
	0, 1228, 0, 0, 0, 630, 796, 0, 0, 0,
	0, 0, 801, 0, 0, 1226, 0, 932, 816, 0,
	589, 0, 588, 588, 0, 0, 624, 0, 0, 0,
	588, 0, 0, 0, 807, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 0, 1476, 0, 0, 1290, 0,
	1229, 0, 588, 0, 807, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 829, 0, 0, 279, 0, 0, 280, 0, 0,
	0, 800, 281, 0, 0, 0, 0, 0, 0, 610,
	0, 613, 0, 824, 1304, 0, 0, 458, 38, 817,
	802, 0, 0, 0, 0, 0, 0, 0, 612, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	613, 801, 0, 0, 0, 818, 986, 613, 38, 0,
	0, 1290, 0, 1307, 1308, 1309, 612, 612, 324, 903,
	1295, 0, 0, 1574, 612, 0, 1290, 0, 301, 0,
	0, 309, 588, 585, 0, 818, 0, 0, 38, 613,
	0, 0, 0, 0, 0, 0, 826, 324, 0, 270,
	309, 0, 0, 807, 0, 0, 612, 1304, 0, 0,
	0, 585, 585, 0, 0, 1305, 0, 589, 610, 585,
	0, 0, 0, 0, 0, 0, 812, 809, 810, 811,
	803, 804, 805, 806, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 825,
	0, 585, 0, 1295, 0, 0, 812, 809, 810, 811,
	803, 804, 805, 806, 808, 0, 0, 0, 1295, 0,
	0, 1306, 0, 0, 1615, 0, 0, 0, 0, 0,
	0, 588, 1310, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 589, 324, 1146, 1147, 610, 0, 1305, 903,
	0, 0, 1152, 0, 818, 0, 612, 0, 1157, 1158,
	1160, 1162, 1163, 1305, 1166, 1167, 0, 0, 0, 0,
	0, 0, 324, 0, 1178, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 1300, 1297, 1298, 1299, 1291, 1292, 1293, 1294,
	1296, 585, 0, 0, 1306, 0, 0, 0, 0, 588,
	1672, 986, 630, 443, 443, 0, 0, 986, 0, 1306,
	0, 610, 0, 547, 0, 0, 809, 810, 811, 803,
	804, 805, 806, 808, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 0, 0, 775, 0, 775, 270, 324,
	0, 0, 1216, 0, 0, 612, 0, 0, 0, 0,
	0, 1219, 0, 0, 1290, 0, 0, 0, 1236, 0,
	324, 1301, 1302, 1303, 0, 1300, 1297, 1298, 1299, 1291,
	1292, 1293, 1294, 1296, 588, 0, 0, 1713, 301, 0,
	1300, 1297, 1298, 1299, 1291, 1292, 1293, 1294, 1296, 0,
	585, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	819, 820, 821, 0, 0, 0, 613, 0, 0, 0,
	0, 0, 0, 0, 783, 785, 0, 802, 0, 828,
	0, 792, 0, 612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 833, 834, 835, 836, 801, 0,
	0, 0, 839, 0, 816, 0, 1295, 0, 0, 0,
	0, 0, 0, 800, 0, 819, 820, 821, 0, 0,
	0, 0, 852, 0, 0, 822, 0, 0, 585, 0,
	0, 0, 802, 0, 828, 0, 0, 0, 0, 0,
	0, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	807, 1305, 796, 801, 0, 0, 0, 301, 612, 816,
	301, 301, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 0, 838, 0, 0, 0, 842, 0, 824,
	889, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 0, 585, 1388, 807, 903, 1306, 775, 0,
	0, 0, 1395, 0, 0, 1290, 0, 1307, 1308, 1309,
	324, 0, 829, 324, 0, 0, 0, 1426, 0, 1236,
	0, 0, 0, 1414, 827, 1236, 0, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 0, 0,
	817, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1304, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 823, 0, 0, 0, 1443, 0, 0, 1297,
	1298, 1299, 1291, 1292, 1293, 1294, 1296, 0, 0, 0,
	38, 0, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 818, 1295, 0, 38,
	0, 0, 0, 0, 0, 825, 0, 826, 813, 814,
	815, 0, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 1496, 1497, 903, 0, 0, 0, 0, 0,
	796, 796, 1305, 0, 0, 0, 1522, 0, 1523, 0,
	324, 1525, 1526, 1527, 0, 0, 0, 0, 324, 0,
	825, 0, 0, 813, 814, 815, 0, 812, 809, 810,
	811, 803, 804, 805, 806, 808, 0, 0, 1541, 1141,
	1550, 903, 1541, 0, 0, 0, 0, 0, 1142, 0,
	324, 324, 0, 0, 324, 0, 0, 0, 1306, 0,
	0, 0, 0, 796, 1236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1590, 0, 0, 443, 0, 0, 0, 0,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 0, 0, 0, 1301, 1302, 1303, 0, 1300,
	1297, 1298, 1299, 1291, 1292, 1293, 1294, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 1609,
	0, 270, 1611, 0, 0, 1095, 1096, 0, 1107, 324,
	1117, 1119, 1124, 1127, 1128, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1020, 796, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 0, 0, 0, 1541, 0, 0, 0, 0,
	0, 324, 0, 1653, 0, 0, 0, 1064, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 1171, 796,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 800, 0, 819, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	0, 0, 802, 0, 828, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 1686, 1687, 816,
	0, 1691, 0, 0, 0, 0, 1541, 0, 0, 270,
	0, 0, 0, 0, 0, 1550, 0, 0, 0, 0,
	0, 0, 309, 796, 0, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 1720,
	796, 324, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 1241, 0, 0, 0, 1246,
	1541, 1653, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 1260, 0,
	817, 0, 0, 0, 324, 0, 0, 1268, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 0, 1281,
	38, 0, 823, 0, 0, 0, 0, 0, 0, 796,
	1237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 1124, 1124, 1124,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 1343,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
	1350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 443, 0, 0,
	0, 0, 0, 0, 0, 0, 443, 0, 0, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 838, 813, 814, 815, 0, 812, 809, 810,
	811, 803, 804, 805, 806, 808, 0, 0, 0, 0,
	0, 0, 0, 0, 1603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	819, 820, 821, 0, 0, 0, 0, 1417, 0, 1418,
	822, 0, 0, 0, 0, 0, 0, 802, 0, 828,
	1423, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	819, 820, 821, 1196, 0, 0, 0, 0, 801, 0,
	822, 0, 1440, 0, 816, 0, 0, 802, 0, 828,
	0, 0, 1450, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 801, 0,
	1020, 0, 0, 1020, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 1483, 0,
	807, 0, 0, 0, 0, 0, 1489, 1490, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	807, 0, 0, 0, 1290, 0, 1307, 1308, 1309, 824,
	0, 0, 0, 0, 443, 817, 1425, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 824,
	0, 0, 0, 0, 0, 817, 1556, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 1307, 1308, 1309, 823, 1576, 0,
	0, 818, 1579, 1580, 0, 0, 0, 1582, 0, 0,
	0, 1584, 826, 0, 0, 0, 0, 0, 1588, 0,
	0, 0, 1591, 0, 0, 0, 1295, 38, 0, 0,
	0, 818, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1600, 1310, 0, 0, 0, 0,
	1020, 1020, 0, 0, 1020, 825, 0, 0, 813, 814,
	815, 1305, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 0, 0, 1295, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 825, 1625, 0, 813, 814,
	815, 1311, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 0, 1310, 0, 0, 0, 0, 0, 1330,
	1643, 0, 0, 0, 0, 0, 0, 1306, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1656,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1664, 1665, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1677, 0, 0, 0, 0, 1306, 0, 0, 0, 0,
	0, 1679, 0, 1635, 1301, 1302, 1303, 0, 1300, 1297,
	1298, 1299, 1291, 1292, 1293, 1294, 1296, 0, 0, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 1303, 0, 1300, 1297, 1298, 1299,
	1291, 1292, 1293, 1294, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 1752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1764, 1764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1764, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1764, 86, 87,
	677, 88, 678, 679, 680, 681, 192, 682, 683, 684,
	685, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	686, 92, 199, 200, 93, 687, 688, 201, 202, 203,
	689, 204, 690, 355, 691, 94, 95, 96, 0, 97,
	692, 98, 693, 356, 99, 100, 694, 695, 696, 697,
	698, 699, 101, 102, 103, 104, 205, 105, 206, 207,
	700, 106, 701, 107, 702, 703, 704, 108, 109, 705,
	110, 706, 0, 707, 208, 111, 112, 209, 708, 709,
	710, 113, 114, 210, 0, 115, 711, 116, 712, 713,
	357, 714, 117, 211, 715, 212, 716, 118, 119, 213,
	214, 717, 718, 120, 719, 358, 121, 215, 216, 217,
	720, 218, 721, 359, 122, 360, 123, 124, 722, 723,
	219, 361, 125, 362, 724, 126, 725, 726, 127, 0,
	128, 129, 130, 131, 132, 363, 133, 134, 137, 135,
	727, 136, 728, 220, 138, 221, 139, 140, 729, 730,
	731, 732, 733, 141, 222, 364, 142, 365, 223, 143,
	144, 734, 224, 145, 225, 146, 735, 147, 148, 149,
	226, 150, 151, 736, 153, 154, 152, 155, 737, 156,
	366, 157, 158, 227, 159, 0, 160, 161, 162, 738,
	228, 163, 164, 739, 165, 166, 367, 167, 229, 230,
	168, 740, 169, 170, 172, 231, 171, 232, 741, 173,
	742, 174, 175, 743, 233, 234, 235, 744, 745, 176,
	236, 237, 746, 177, 178, 179, 180, 747, 748, 181,
	182, 183, 749, 750, 184, 185, 186, 238, 239, 751,
	187, 752, 753, 754, 755, 188, 189, 190, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 86, 87, 677, 88,
	678, 679, 680, 681, 192, 682, 683, 684, 685, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 686, 92,
	199, 200, 93, 687, 688, 201, 202, 203, 689, 204,
	690, 355, 691, 94, 95, 96, 0, 97, 692, 98,
	693, 356, 99, 100, 694, 695, 696, 697, 698, 699,
	101, 102, 103, 104, 205, 105, 206, 207, 700, 106,
	701, 107, 702, 703, 704, 108, 109, 705, 110, 706,
	0, 707, 208, 111, 112, 209, 708, 709, 710, 113,
	114, 210, 0, 115, 711, 116, 712, 713, 357, 714,
	117, 211, 715, 212, 716, 118, 119, 213, 214, 717,
	718, 120, 719, 358, 121, 215, 216, 217, 720, 218,
	721, 359, 122, 360, 123, 124, 722, 723, 219, 361,
	125, 362, 724, 126, 725, 726, 127, 0, 128, 129,
	130, 131, 132, 363, 133, 134, 137, 135, 727, 136,
	728, 220, 138, 221, 139, 140, 729, 730, 731, 732,
	733, 141, 222, 364, 142, 365, 223, 143, 144, 734,
	224, 145, 225, 146, 735, 147, 148, 149, 226, 150,
	151, 736, 153, 154, 152, 155, 737, 156, 366, 157,
	158, 227, 159, 0, 160, 161, 162, 738, 228, 163,
	164, 739, 165, 166, 367, 167, 229, 230, 168, 740,
	169, 170, 172, 231, 171, 232, 741, 173, 742, 174,
	175, 743, 233, 234, 235, 744, 745, 176, 236, 237,
	746, 177, 178, 179, 180, 747, 748, 181, 182, 183,
	749, 750, 184, 185, 186, 238, 239, 751, 187, 752,
	753, 754, 755, 188, 189, 190, 191, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 86, 87, 677, 88, 678, 679, 680, 681, 192,
	682, 683, 684, 685, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 686, 92, 199, 200, 93, 687, 688,
	201, 202, 203, 689, 204, 690, 355, 691, 94, 95,
	96, 0, 97, 692, 98, 693, 356, 99, 100, 694,
	695, 696, 697, 698, 699, 101, 102, 103, 104, 205,
	105, 206, 207, 700, 106, 701, 107, 702, 703, 704,
	108, 109, 705, 110, 706, 0, 707, 208, 111, 112,
	209, 708, 709, 710, 113, 114, 210, 0, 115, 711,
	116, 712, 713, 357, 714, 117, 211, 715, 212, 716,
	118, 119, 213, 214, 717, 718, 120, 719, 358, 121,
	215, 216, 217, 720, 218, 721, 359, 122, 360, 123,
	124, 722, 723, 219, 361, 125, 362, 724, 126, 725,
	726, 127, 0, 128, 129, 130, 131, 132, 363, 133,
	134, 137, 135, 727, 136, 728, 220, 138, 221, 139,
	140, 729, 730, 731, 732, 733, 141, 222, 364, 142,
	365, 223, 143, 144, 734, 224, 145, 225, 146, 735,
	147, 148, 149, 226, 150, 151, 736, 153, 154, 152,
	155, 737, 156, 366, 157, 158, 227, 159, 0, 160,
	161, 162, 738, 228, 163, 164, 739, 165, 166, 367,
	167, 229, 230, 168, 740, 169, 170, 172, 231, 171,
	232, 741, 173, 742, 174, 175, 743, 233, 234, 235,
	744, 745, 176, 236, 237, 746, 177, 178, 179, 180,
	747, 748, 181, 182, 183, 749, 750, 184, 185, 186,
	238, 239, 751, 187, 752, 753, 754, 755, 188, 189,
	190, 191, 478, 467, 468, 465, 466, 454, 0, 0,
	0, 0, 0, 0, 86, 87, 1081, 88, 0, 0,
	0, 0, 494, 460, 0, 0, 0, 89, 90, 193,
	508, 195, 509, 91, 510, 511, 0, 92, 199, 200,
	93, 475, 493, 512, 513, 203, 0, 504, 0, 486,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 356,
	99, 100, 0, 487, 489, 0, 488, 490, 101, 102,
	103, 104, 514, 105, 515, 516, 0, 106, 0, 107,
	0, 1082, 0, 507, 109, 0, 110, 0, 0, 0,
	459, 111, 112, 495, 473, 0, 0, 113, 114, 517,
	0, 115, 0, 116, 0, 0, 357, 0, 117, 505,
	0, 212, 0, 118, 119, 501, 503, 0, 0, 120,
	0, 358, 121, 518, 519, 520, 0, 485, 0, 359,
	122, 360, 123, 124, 0, 0, 506, 361, 125, 362,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 363, 133, 134, 137, 135, 449, 136, 474, 502,
	138, 521, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 364, 142, 365, 496, 143, 144, 0, 497, 145,
	225, 146, 0, 147, 148, 149, 522, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 366, 157, 158, 463,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 491,
	165, 166, 367, 167, 523, 230, 168, 0, 169, 170,
	172, 524, 171, 498, 0, 173, 0, 174, 175, 0,
	233, 525, 526, 0, 0, 176, 499, 500, 472, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 492, 0,
	184, 185, 186, 238, 527, 1080, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 450, 0, 0, 478, 467,
	468, 465, 466, 454, 0, 0, 446, 447, 1083, 0,
	86, 87, 448, 88, 0, 455, 1078, 0, 494, 460,
	0, 0, 0, 89, 90, 193, 508, 195, 509, 91,
	510, 511, 0, 92, 199, 200, 93, 475, 493, 512,
	513, 203, 0, 504, 0, 486, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 356, 99, 100, 0, 487,
	489, 0, 488, 490, 101, 102, 103, 104, 514, 105,
	515, 516, 548, 106, 0, 107, 0, 0, 0, 507,
	109, 0, 110, 0, 0, 0, 459, 111, 112, 495,
	473, 0, 0, 113, 114, 517, 0, 115, 0, 116,
	0, 0, 357, 0, 117, 505, 0, 212, 0, 118,
	119, 501, 503, 0, 0, 120, 0, 358, 121, 518,
	519, 520, 0, 485, 0, 359, 122, 360, 123, 124,
	0, 0, 506, 361, 125, 362, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 363, 133, 134,
	137, 135, 449, 136, 474, 502, 138, 521, 139, 140,
	0, 0, 0, 0, 0, 141, 222, 364, 142, 365,
	496, 143, 144, 0, 497, 145, 225, 146, 0, 147,
	148, 149, 522, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 366, 157, 158, 463, 159, 0, 160, 161,
	162, 56, 228, 163, 164, 491, 165, 166, 367, 167,
	523, 230, 168, 0, 169, 170, 172, 524, 171, 498,
	0, 173, 58, 174, 175, 0, 233, 525, 526, 0,
	0, 176, 499, 500, 472, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 492, 0, 184, 185, 186, 354,
	527, 0, 187, 0, 0, 0, 54, 188, 189, 190,
	191, 450, 55, 0, 478, 467, 468, 465, 466, 454,
	0, 0, 446, 447, 0, 0, 86, 87, 448, 88,
	0, 455, 0, 0, 494, 460, 0, 0, 0, 89,
	90, 193, 508, 195, 509, 91, 510, 511, 0, 92,
	199, 200, 93, 475, 493, 512, 513, 203, 0, 504,
	0, 486, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 356, 99, 100, 0, 487, 489, 0, 488, 490,
	101, 102, 103, 104, 514, 105, 515, 516, 0, 106,
	0, 107, 0, 0, 0, 507, 109, 0, 110, 0,
	0, 0, 459, 111, 112, 495, 473, 0, 0, 113,
	114, 517, 0, 115, 0, 116, 0, 0, 357, 0,
	117, 505, 0, 212, 0, 118, 119, 501, 503, 0,
	0, 120, 0, 358, 121, 518, 519, 520, 0, 485,
	0, 359, 122, 360, 123, 124, 0, 0, 506, 361,
	125, 362, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 363, 133, 134, 137, 135, 449, 136,
	474, 502, 138, 521, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 364, 142, 365, 496, 143, 144, 0,
	497, 145, 225, 146, 0, 147, 148, 149, 522, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 366, 157,
	158, 463, 159, 0, 160, 161, 162, 56, 228, 163,
	164, 491, 165, 166, 367, 167, 523, 230, 168, 0,
	169, 170, 172, 524, 171, 498, 0, 173, 58, 174,
	175, 0, 233, 525, 526, 0, 0, 176, 499, 500,
	472, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	492, 0, 184, 185, 186, 354, 527, 0, 187, 0,
	0, 0, 54, 188, 189, 190, 191, 450, 55, 0,
	478, 467, 468, 465, 466, 454, 0, 0, 446, 447,
	0, 0, 86, 87, 448, 88, 0, 455, 0, 0,
	494, 460, 0, 0, 0, 89, 90, 193, 508, 195,
	509, 91, 510, 511, 1120, 92, 199, 200, 93, 475,
	493, 512, 513, 203, 0, 504, 0, 486, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 356, 99, 100,
	0, 487, 489, 0, 488, 490, 101, 102, 103, 104,
	514, 105, 515, 516, 0, 106, 0, 107, 0, 0,
	0, 507, 109, 0, 110, 0, 0, 0, 459, 111,
	112, 495, 473, 0, 0, 113, 114, 517, 0, 115,
	0, 116, 0, 1125, 357, 0, 117, 505, 0, 212,
	0, 118, 119, 501, 503, 0, 0, 120, 0, 358,
	121, 518, 519, 520, 0, 485, 0, 359, 122, 360,
	123, 124, 0, 1121, 506, 361, 125, 362, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 363,
	133, 134, 137, 135, 449, 136, 474, 502, 138, 521,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 364,
	142, 365, 496, 143, 144, 0, 497, 145, 225, 146,
	0, 147, 148, 149, 522, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 366, 157, 158, 463, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 491, 165, 166,
	367, 167, 523, 230, 168, 0, 169, 170, 172, 524,
	171, 498, 0, 173, 0, 174, 175, 0, 233, 525,
	526, 0, 1122, 176, 499, 500, 472, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 492, 0, 184, 185,
	186, 238, 527, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 450, 478, 467, 468, 465, 466, 454,
	0, 0, 0, 0, 446, 447, 86, 87, 0, 88,
	448, 0, 0, 455, 494, 460, 0, 0, 0, 89,
	90, 193, 508, 195, 509, 91, 510, 511, 0, 92,
	199, 200, 93, 475, 493, 512, 513, 203, 0, 504,
	0, 486, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 356, 99, 100, 0, 487, 489, 0, 488, 490,
	101, 102, 103, 104, 514, 105, 515, 516, 0, 106,
	0, 107, 0, 0, 0, 507, 109, 0, 110, 0,
	0, 0, 459, 111, 112, 495, 473, 0, 0, 113,
	114, 517, 0, 115, 0, 116, 0, 0, 357, 0,
	117, 505, 0, 212, 0, 118, 119, 501, 503, 0,
	0, 120, 0, 358, 121, 518, 519, 520, 0, 485,
	0, 359, 122, 360, 123, 124, 0, 0, 506, 361,
	125, 362, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 363, 133, 134, 137, 135, 449, 136,
	474, 502, 138, 521, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 364, 142, 365, 496, 143, 144, 0,
	497, 145, 225, 146, 0, 147, 148, 149, 522, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 366, 157,
	158, 463, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 491, 165, 166, 367, 167, 523, 230, 168, 0,
	169, 170, 172, 524, 171, 498, 0, 173, 0, 174,
	175, 0, 233, 525, 526, 0, 0, 176, 499, 500,
	472, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	492, 0, 184, 185, 186, 238, 527, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 450, 0, 0,
	478, 467, 468, 465, 466, 454, 0, 0, 446, 447,
	0, 0, 86, 87, 448, 88, 0, 455, 1479, 0,
	494, 460, 0, 0, 0, 89, 90, 193, 508, 195,
	509, 91, 510, 511, 0, 92, 199, 200, 93, 475,
	493, 512, 513, 203, 0, 504, 0, 486, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 356, 99, 100,
	0, 487, 489, 0, 488, 490, 101, 102, 103, 104,
	514, 105, 515, 516, 0, 106, 0, 107, 0, 0,
	0, 507, 109, 0, 110, 0, 0, 0, 459, 111,
	112, 495, 473, 0, 0, 113, 114, 517, 0, 115,
	0, 116, 0, 0, 357, 0, 117, 505, 0, 212,
	0, 118, 119, 501, 503, 0, 0, 120, 0, 358,
	121, 518, 519, 520, 0, 485, 0, 359, 122, 360,
	123, 124, 0, 0, 506, 361, 125, 362, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 363,
	133, 134, 137, 135, 449, 136, 474, 502, 138, 521,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 364,
	142, 365, 496, 143, 144, 0, 497, 145, 225, 146,
	0, 147, 148, 149, 522, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 366, 157, 158, 463, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 491, 165, 166,
	367, 167, 523, 230, 168, 0, 169, 170, 172, 524,
	171, 498, 0, 173, 0, 174, 175, 0, 233, 525,
	526, 0, 0, 176, 499, 500, 472, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 492, 0, 184, 185,
	186, 238, 527, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 450, 0, 0, 478, 467, 468, 465,
	466, 454, 0, 0, 446, 447, 0, 0, 86, 87,
	448, 88, 0, 455, 1429, 0, 494, 460, 0, 0,
	0, 89, 90, 193, 508, 195, 509, 91, 510, 511,
	0, 92, 199, 200, 93, 475, 493, 512, 513, 203,
	0, 504, 0, 486, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 356, 99, 100, 0, 487, 489, 0,
	488, 490, 101, 102, 103, 104, 514, 105, 515, 516,
	0, 106, 0, 107, 0, 0, 0, 507, 109, 0,
	110, 0, 0, 0, 459, 111, 112, 495, 473, 0,
	0, 113, 114, 517, 0, 115, 0, 116, 0, 0,
	357, 0, 117, 505, 0, 212, 0, 118, 119, 501,
	503, 0, 0, 120, 0, 358, 121, 518, 519, 520,
	0, 485, 0, 359, 122, 360, 123, 124, 0, 0,
	506, 361, 125, 362, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 363, 133, 134, 137, 135,
	449, 136, 474, 502, 138, 521, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 364, 142, 365, 496, 143,
	144, 0, 497, 145, 225, 146, 0, 147, 148, 149,
	522, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	366, 157, 158, 463, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 491, 165, 166, 367, 167, 523, 230,
	168, 0, 169, 170, 172, 524, 171, 498, 0, 173,
	0, 174, 175, 0, 233, 525, 526, 0, 0, 176,
	499, 500, 472, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 492, 0, 184, 185, 186, 238, 527, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 450,
	0, 0, 478, 467, 468, 465, 466, 454, 0, 0,
	446, 447, 0, 0, 86, 87, 448, 88, 0, 455,
	1077, 0, 494, 460, 0, 0, 0, 89, 90, 193,
	508, 195, 509, 91, 510, 511, 0, 92, 199, 200,
	93, 475, 493, 512, 513, 203, 0, 504, 0, 486,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 356,
	99, 100, 0, 487, 489, 0, 488, 490, 101, 102,
	103, 104, 514, 105, 515, 516, 0, 106, 0, 107,
	0, 0, 0, 507, 109, 0, 110, 0, 0, 0,
	459, 111, 112, 495, 473, 0, 0, 113, 114, 517,
	0, 115, 0, 116, 0, 0, 357, 0, 117, 505,
	0, 212, 0, 118, 119, 501, 503, 0, 0, 120,
	0, 358, 121, 518, 519, 520, 0, 485, 0, 359,
	122, 360, 123, 124, 0, 0, 506, 361, 125, 362,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 363, 133, 134, 137, 135, 449, 136, 474, 502,
	138, 521, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 364, 142, 365, 496, 143, 144, 0, 497, 145,
	225, 146, 0, 147, 148, 149, 522, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 366, 157, 158, 463,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 491,
	165, 166, 367, 167, 523, 230, 168, 0, 169, 170,
	172, 524, 171, 498, 0, 173, 0, 174, 175, 0,
	233, 525, 526, 0, 0, 176, 499, 500, 472, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 492, 0,
	184, 185, 186, 238, 527, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 450, 478, 467, 468, 465,
	466, 454, 0, 0, 0, 0, 446, 447, 86, 87,
	0, 88, 448, 844, 1074, 455, 494, 460, 0, 0,
	0, 89, 90, 193, 508, 195, 509, 91, 510, 511,
	0, 92, 199, 200, 93, 475, 493, 512, 513, 203,
	0, 504, 0, 486, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 356, 99, 100, 0, 487, 489, 0,
	488, 490, 101, 102, 103, 104, 514, 105, 515, 516,
	0, 106, 0, 107, 0, 0, 0, 507, 109, 0,
	110, 0, 0, 0, 459, 111, 112, 495, 473, 0,
	0, 113, 114, 517, 0, 115, 0, 116, 0, 0,
	357, 0, 117, 505, 0, 212, 0, 118, 119, 501,
	503, 0, 0, 120, 0, 358, 121, 518, 519, 520,
	0, 485, 0, 359, 122, 360, 123, 124, 0, 0,
	506, 361, 125, 362, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 363, 133, 134, 137, 135,
	449, 136, 474, 502, 138, 521, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 364, 142, 365, 496, 143,
	144, 0, 497, 145, 225, 146, 0, 147, 148, 149,
	522, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	366, 157, 158, 463, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 491, 165, 166, 367, 167, 523, 230,
	168, 0, 169, 170, 172, 524, 171, 498, 0, 173,
	0, 174, 175, 0, 233, 525, 526, 0, 0, 176,
	499, 500, 472, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 492, 0, 184, 185, 186, 238, 527, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 450,
	0, 0, 478, 467, 468, 465, 466, 454, 0, 0,
	446, 447, 444, 0, 86, 87, 448, 88, 0, 455,
	0, 0, 494, 460, 0, 0, 0, 89, 90, 193,
	508, 195, 509, 91, 510, 511, 0, 92, 199, 200,
	93, 475, 493, 512, 513, 203, 0, 504, 0, 486,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 356,
	99, 100, 0, 487, 489, 0, 488, 490, 101, 102,
	103, 104, 514, 105, 515, 516, 0, 106, 0, 107,
	0, 0, 0, 507, 109, 0, 110, 0, 0, 0,
	459, 111, 112, 495, 473, 0, 0, 113, 114, 517,
	0, 115, 0, 116, 0, 0, 357, 0, 117, 505,
	0, 212, 0, 118, 119, 501, 503, 0, 0, 120,
	0, 358, 121, 518, 519, 520, 0, 485, 0, 359,
	122, 360, 123, 124, 0, 0, 506, 361, 125, 362,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 363, 133, 134, 137, 135, 449, 136, 474, 502,
	138, 521, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 364, 142, 365, 496, 143, 144, 0, 497, 145,
	225, 146, 0, 147, 148, 149, 522, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 366, 157, 158, 463,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 491,
	165, 166, 367, 167, 523, 230, 168, 0, 169, 170,
	172, 524, 171, 498, 0, 173, 0, 174, 175, 0,
	233, 525, 526, 0, 0, 176, 499, 500, 472, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 492, 0,
	184, 185, 186, 238, 527, 1434, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 450, 478, 467, 468, 465,
	466, 454, 0, 0, 0, 0, 446, 447, 86, 87,
	0, 88, 448, 0, 0, 455, 494, 460, 0, 0,
	0, 89, 90, 193, 508, 195, 509, 91, 510, 511,
	0, 92, 199, 200, 93, 475, 493, 512, 513, 203,
	0, 504, 0, 486, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 356, 99, 100, 0, 487, 489, 0,
	488, 490, 101, 102, 103, 104, 514, 105, 515, 516,
	548, 106, 0, 107, 0, 0, 0, 507, 109, 0,
	110, 0, 0, 0, 459, 111, 112, 495, 473, 0,
	0, 113, 114, 517, 0, 115, 0, 116, 0, 0,
	357, 0, 117, 505, 0, 212, 0, 118, 119, 501,
	503, 0, 0, 120, 0, 358, 121, 518, 519, 520,
	0, 485, 0, 359, 122, 360, 123, 124, 0, 0,
	506, 361, 125, 362, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 363, 133, 134, 137, 135,
	449, 136, 474, 502, 138, 521, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 364, 142, 365, 496, 143,
	144, 0, 497, 145, 225, 146, 0, 147, 148, 149,
	522, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	366, 157, 158, 463, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 491, 165, 166, 367, 167, 523, 230,
	168, 0, 169, 170, 172, 524, 171, 498, 0, 173,
	0, 174, 175, 0, 233, 525, 526, 0, 0, 176,
	499, 500, 472, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 492, 0, 184, 185, 186, 238, 527, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 450,
	478, 467, 468, 465, 466, 454, 0, 0, 0, 0,
	446, 447, 86, 87, 0, 88, 448, 0, 0, 455,
	494, 460, 0, 0, 0, 89, 90, 193, 508, 195,
	509, 91, 510, 511, 0, 92, 199, 200, 93, 475,
	493, 512, 513, 203, 0, 504, 0, 486, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 356, 99, 100,
	0, 487, 489, 0, 488, 490, 101, 102, 103, 104,
	514, 105, 515, 516, 0, 106, 0, 107, 0, 0,
	0, 507, 109, 0, 110, 0, 0, 0, 459, 111,
	112, 495, 473, 0, 0, 113, 114, 517, 0, 115,
	0, 116, 0, 1125, 357, 0, 117, 505, 0, 212,
	0, 118, 119, 501, 503, 0, 0, 120, 0, 358,
	121, 518, 519, 520, 0, 485, 0, 359, 122, 360,
	123, 124, 0, 0, 506, 361, 125, 362, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 363,
	133, 134, 137, 135, 449, 136, 474, 502, 138, 521,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 364,
	142, 365, 496, 143, 144, 0, 497, 145, 225, 146,
	0, 147, 148, 149, 522, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 366, 157, 158, 463, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 491, 165, 166,
	367, 167, 523, 230, 168, 0, 169, 170, 172, 524,
	171, 498, 0, 173, 0, 174, 175, 0, 233, 525,
	526, 0, 0, 176, 499, 500, 472, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 492, 0, 184, 185,
	186, 238, 527, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 450, 478, 467, 468, 465, 466, 454,
	0, 0, 0, 0, 446, 447, 86, 87, 784, 88,
	448, 0, 0, 455, 494, 460, 0, 0, 0, 89,
	90, 193, 508, 195, 509, 91, 510, 511, 0, 92,
	199, 200, 93, 475, 493, 512, 513, 203, 0, 504,
	0, 486, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 356, 99, 100, 0, 487, 489, 0, 488, 490,
	101, 102, 103, 104, 514, 105, 515, 516, 0, 106,
	0, 107, 0, 0, 0, 507, 109, 0, 110, 0,
	0, 0, 459, 111, 112, 495, 473, 0, 0, 113,
	114, 517, 0, 115, 0, 116, 0, 0, 357, 0,
	117, 505, 0, 212, 0, 118, 119, 501, 503, 0,
	0, 120, 0, 358, 121, 518, 519, 520, 0, 485,
	0, 359, 122, 360, 123, 124, 0, 0, 506, 361,
	125, 362, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 363, 133, 134, 137, 135, 449, 136,
	474, 502, 138, 521, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 364, 142, 365, 496, 143, 144, 0,
	497, 145, 225, 146, 0, 147, 148, 149, 522, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 366, 157,
	158, 463, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 491, 165, 166, 367, 167, 523, 230, 168, 0,
	169, 170, 172, 524, 171, 498, 0, 173, 0, 174,
	175, 0, 233, 525, 526, 0, 0, 176, 499, 500,
	472, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	492, 0, 184, 185, 186, 238, 527, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 450, 478, 467,
	468, 465, 466, 454, 0, 0, 0, 0, 446, 447,
	86, 87, 0, 88, 448, 0, 0, 455, 494, 460,
	0, 0, 0, 89, 90, 193, 508, 195, 509, 91,
	510, 511, 0, 92, 199, 200, 93, 475, 493, 512,
	513, 203, 0, 504, 0, 486, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 356, 99, 1763, 0, 487,
	489, 0, 488, 490, 101, 102, 103, 104, 514, 105,
	515, 516, 0, 106, 0, 107, 0, 0, 0, 507,
	109, 0, 110, 0, 0, 0, 459, 111, 112, 495,
	473, 0, 0, 113, 114, 517, 0, 115, 0, 116,
	0, 0, 357, 0, 117, 505, 0, 212, 0, 118,
	119, 501, 503, 0, 0, 120, 0, 358, 121, 518,
	519, 520, 0, 485, 0, 359, 122, 360, 123, 124,
	0, 0, 506, 361, 125, 362, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 363, 133, 134,
	137, 135, 449, 136, 474, 502, 138, 521, 139, 140,
	0, 0, 0, 0, 0, 141, 222, 364, 142, 365,
	496, 143, 144, 0, 497, 145, 225, 146, 0, 147,
	148, 149, 522, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 366, 157, 158, 463, 159, 0, 160, 161,
	162, 0, 228, 163, 164, 491, 165, 166, 367, 167,
	523, 230, 168, 0, 169, 170, 172, 524, 171, 498,
	0, 173, 0, 174, 175, 0, 233, 525, 526, 0,
	0, 176, 499, 500, 472, 177, 178, 1762, 180, 0,
	0, 181, 182, 183, 492, 0, 184, 185, 186, 238,
	527, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 450, 478, 467, 468, 465, 466, 454, 0, 0,
	0, 0, 446, 447, 86, 87, 0, 88, 448, 0,
	0, 455, 494, 460, 0, 0, 0, 89, 90, 1761,
	508, 195, 509, 91, 510, 511, 0, 92, 199, 200,
	93, 475, 493, 512, 513, 203, 0, 504, 0, 486,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 356,
	99, 1763, 0, 487, 489, 0, 488, 490, 101, 102,
	103, 104, 514, 105, 515, 516, 0, 106, 0, 107,
	0, 0, 0, 507, 109, 0, 110, 0, 0, 0,
	459, 111, 112, 495, 473, 0, 0, 113, 114, 517,
	0, 115, 0, 116, 0, 0, 357, 0, 117, 505,
	0, 212, 0, 118, 119, 501, 503, 0, 0, 120,
	0, 358, 121, 518, 519, 520, 0, 485, 0, 359,
	122, 360, 123, 124, 0, 0, 506, 361, 125, 362,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 363, 133, 134, 137, 135, 449, 136, 474, 502,
	138, 521, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 364, 142, 365, 496, 143, 144, 0, 497, 145,
	225, 146, 0, 147, 148, 149, 522, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 366, 157, 158, 463,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 491,
	165, 166, 367, 167, 523, 230, 168, 0, 169, 170,
	172, 524, 171, 498, 0, 173, 0, 174, 175, 0,
	233, 525, 526, 0, 0, 176, 499, 500, 472, 177,
	178, 1762, 180, 0, 0, 181, 182, 183, 492, 0,
	184, 185, 186, 238, 527, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 450, 478, 467, 468, 465,
	466, 454, 0, 0, 0, 0, 446, 447, 86, 87,
	0, 88, 448, 0, 0, 455, 494, 460, 0, 0,
	0, 89, 90, 193, 508, 195, 509, 91, 510, 511,
	0, 92, 199, 200, 93, 475, 493, 512, 513, 203,
	0, 504, 0, 486, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 356, 99, 100, 0, 487, 489, 0,
	488, 490, 101, 102, 103, 104, 514, 105, 515, 516,
	0, 106, 0, 107, 0, 0, 0, 507, 109, 0,
	110, 0, 0, 0, 459, 111, 112, 495, 473, 0,
	0, 113, 114, 517, 0, 115, 0, 116, 0, 0,
	357, 0, 117, 505, 0, 212, 0, 118, 119, 501,
	503, 0, 0, 120, 0, 358, 121, 518, 519, 520,
	0, 485, 0, 359, 122, 360, 123, 124, 0, 0,
	506, 361, 125, 362, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 363, 133, 134, 137, 135,
	449, 136, 474, 502, 138, 521, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 364, 142, 365, 496, 143,
	144, 0, 497, 145, 225, 146, 0, 147, 148, 149,
	522, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	366, 157, 158, 463, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 491, 165, 166, 367, 167, 523, 230,
	168, 0, 169, 170, 172, 524, 171, 498, 0, 173,
	0, 174, 175, 0, 233, 525, 526, 0, 0, 176,
	499, 500, 472, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 492, 0, 184, 185, 186, 238, 527, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 450,
	478, 467, 468, 465, 466, 454, 0, 0, 0, 0,
	446, 447, 86, 87, 0, 88, 448, 0, 0, 455,
	494, 460, 0, 0, 0, 89, 90, 193, 508, 195,
	509, 91, 510, 511, 0, 92, 199, 200, 93, 475,
	493, 512, 513, 203, 0, 504, 0, 486, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 356, 99, 100,
	0, 487, 489, 0, 488, 490, 101, 102, 103, 104,
	514, 105, 515, 516, 0, 106, 0, 107, 0, 0,
	0, 507, 109, 0, 110, 0, 0, 0, 459, 111,
	112, 495, 473, 0, 0, 113, 114, 517, 0, 115,
	0, 116, 0, 0, 357, 0, 117, 505, 0, 212,
	0, 118, 119, 501, 503, 0, 0, 120, 0, 358,
	121, 518, 519, 520, 0, 485, 0, 359, 122, 360,
	123, 124, 0, 0, 506, 361, 125, 362, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 363,
	133, 134, 137, 135, 0, 136, 474, 502, 138, 521,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 364,
	142, 365, 496, 143, 144, 0, 497, 145, 225, 146,
	0, 147, 148, 149, 522, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 366, 157, 158, 1115, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 491, 165, 166,
	367, 167, 523, 230, 168, 0, 169, 170, 172, 524,
	171, 498, 0, 173, 0, 174, 175, 0, 233, 525,
	526, 0, 0, 176, 499, 500, 472, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 492, 0, 184, 185,
	186, 238, 527, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 478, 467, 468, 465, 466, 454,
	0, 0, 0, 0, 1111, 1112, 86, 87, 0, 88,
	1113, 0, 0, 1114, 494, 460, 0, 0, 0, 89,
	90, 0, 508, 195, 509, 91, 510, 511, 0, 92,
	199, 200, 93, 475, 493, 512, 513, 203, 0, 504,
	0, 486, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 356, 99, 1763, 0, 487, 489, 0, 488, 490,
	101, 102, 103, 104, 514, 105, 515, 516, 0, 106,
	0, 107, 0, 0, 0, 507, 109, 0, 110, 0,
	0, 0, 459, 111, 112, 495, 473, 0, 0, 113,
	114, 517, 0, 115, 0, 116, 0, 0, 357, 0,
	117, 505, 0, 212, 0, 118, 119, 501, 503, 0,
	0, 120, 0, 358, 121, 518, 519, 520, 0, 485,
	0, 0, 122, 360, 123, 124, 0, 0, 506, 361,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 363, 133, 134, 137, 135, 449, 136,
	474, 502, 138, 521, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 364, 142, 365, 496, 143, 144, 0,
	497, 145, 225, 146, 0, 147, 148, 149, 522, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 366, 157,
	158, 463, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 491, 165, 166, 0, 167, 523, 230, 168, 0,
	169, 170, 172, 524, 171, 498, 0, 173, 0, 174,
	175, 0, 233, 525, 526, 0, 0, 176, 499, 500,
	472, 177, 178, 1762, 180, 0, 0, 181, 182, 183,
	492, 0, 184, 185, 186, 238, 527, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 447,
	86, 87, 0, 88, 448, 0, 0, 455, 494, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 493, 201,
	202, 203, 0, 504, 0, 486, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 356, 99, 100, 0, 487,
	489, 0, 488, 490, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 495,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 357, 0, 117, 505, 0, 212, 0, 118,
	119, 501, 503, 0, 0, 120, 0, 358, 121, 215,
	216, 217, 0, 218, 0, 359, 122, 360, 123, 124,
	0, 0, 506, 361, 125, 362, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 363, 133, 134,
	137, 135, 0, 136, 0, 502, 138, 221, 139, 140,
	0, 0, 0, 0, 0, 141, 222, 364, 142, 365,
	496, 143, 144, 0, 497, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 366, 157, 158, 227, 159, 0, 160, 161,
	162, 0, 228, 163, 164, 491, 165, 166, 367, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 498,
	0, 173, 0, 174, 175, 0, 233, 234, 235, 0,
	0, 176, 499, 500, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 492, 0, 184, 185, 186, 238,
	239, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 1543, 192, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 355,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 356,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 357, 0, 117, 211,
	0, 212, 0, 118, 119, 213, 214, 0, 0, 120,
	0, 358, 121, 215, 216, 217, 0, 218, 0, 359,
	122, 360, 123, 124, 0, 0, 219, 361, 125, 362,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 363, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 364, 142, 365, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 366, 157, 158, 227,
	159, 0, 160, 161, 162, 56, 228, 163, 164, 0,
	165, 166, 367, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 58, 174, 175, 0,
	233, 234, 235, 0, 0, 176, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 354, 239, 0, 187, 0, 0, 0,
	54, 188, 189, 190, 191, 0, 55, 350, 657, 0,
	658, 653, 648, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 53, 0, 192, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 355, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 356, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 661, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 650,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 357, 0, 117, 211, 0, 212, 0, 118, 119,
	213, 214, 0, 0, 120, 0, 358, 121, 215, 216,
	217, 0, 218, 0, 359, 122, 360, 123, 124, 0,
	0, 219, 361, 125, 362, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 363, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	651, 0, 0, 0, 141, 222, 364, 142, 365, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 366, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 367, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 0, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 649, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	0, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 350, 657, 0, 658, 653, 648, 0, 0, 0,
	0, 659, 654, 86, 87, 0, 88, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 355, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 356, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 644, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 650, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 357, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	358, 121, 215, 216, 217, 0, 218, 0, 359, 122,
	360, 123, 124, 0, 0, 219, 361, 125, 362, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	363, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 651, 0, 0, 0, 141, 222,
	364, 142, 365, 223, 143, 144, 0, 224, 145, 225,
	146, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 366, 157, 158, 227, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 367, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 0, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 649, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 0, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 350, 657, 0, 658, 653,
	648, 0, 0, 0, 0, 659, 654, 86, 87, 0,
	88, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 355, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 356, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 650, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 357,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 358, 121, 215, 216, 217, 0,
	218, 0, 359, 122, 360, 123, 124, 0, 0, 219,
	361, 125, 362, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 363, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 651, 0,
	0, 0, 141, 222, 364, 142, 365, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 366,
	157, 158, 227, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 367, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 649, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 83, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 192, 659,
	654, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 209,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 211, 0, 212, 0, 118,
	119, 213, 214, 0, 0, 120, 0, 0, 121, 215,
	216, 217, 0, 218, 0, 0, 122, 0, 123, 124,
	0, 0, 219, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 220, 138, 221, 139, 140,
	0, 0, 323, 0, 0, 141, 222, 0, 142, 0,
	223, 143, 144, 0, 224, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 227, 159, 0, 160, 161,
	162, 56, 228, 163, 164, 0, 165, 166, 0, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 232,
	0, 173, 58, 174, 175, 0, 233, 234, 235, 0,
	0, 176, 236, 237, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 354,
	239, 0, 187, 0, 0, 0, 54, 188, 189, 190,
	191, 0, 55, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 1022, 0, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 213, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 56, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 58, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 354, 239, 0, 187, 0, 0,
	0, 54, 188, 189, 190, 191, 0, 55, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 53, 0, 192, 0,
	1235, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 209,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 211, 0, 212, 0, 118,
	119, 213, 214, 0, 0, 120, 0, 0, 121, 215,
	216, 217, 0, 218, 0, 0, 122, 0, 123, 124,
	0, 0, 219, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 220, 138, 221, 139, 140,
	0, 0, 0, 0, 0, 141, 222, 0, 142, 0,
	223, 143, 144, 0, 224, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 227, 159, 0, 160, 161,
	162, 0, 228, 163, 164, 0, 165, 166, 0, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 232,
	0, 173, 0, 174, 175, 0, 233, 234, 235, 0,
	0, 176, 236, 237, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 238,
	239, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 192, 436, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	0, 121, 215, 216, 217, 0, 218, 0, 0, 122,
	0, 123, 124, 0, 0, 219, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 323, 0, 0, 141, 222,
	0, 142, 0, 223, 143, 144, 0, 224, 145, 225,
	146, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 227, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 0, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 0, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 0, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 1022, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 933, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 213, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 0,
	147, 148, 149, 226, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 1444, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 213, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 538, 192, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 628, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 211, 0, 212, 0, 118, 119,
	213, 214, 0, 0, 120, 0, 0, 121, 215, 216,
	217, 0, 218, 0, 0, 122, 0, 123, 124, 0,
	0, 219, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 0, 142, 0, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 0, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 627, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	83, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	192, 0, 0, 631, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	205, 105, 206, 207, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 208, 111,
	112, 209, 0, 0, 0, 113, 114, 210, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 211, 0, 212,
	0, 118, 119, 213, 214, 0, 0, 120, 0, 0,
	121, 215, 216, 217, 0, 218, 0, 0, 122, 0,
	123, 124, 0, 0, 219, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 220, 138, 221,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 0,
	142, 0, 223, 143, 144, 0, 224, 145, 225, 146,
	0, 147, 148, 149, 226, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 227, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 0, 165, 166,
	0, 167, 229, 230, 168, 0, 169, 170, 172, 231,
	171, 232, 0, 173, 0, 174, 175, 0, 233, 234,
	235, 0, 0, 176, 236, 237, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 238, 239, 350, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 192, 0, 0, 631, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	355, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	356, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 357, 0, 117,
	211, 0, 212, 0, 118, 119, 213, 214, 0, 0,
	120, 0, 358, 121, 215, 216, 217, 0, 218, 0,
	359, 122, 360, 123, 124, 0, 0, 219, 361, 125,
	362, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 363, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 364, 142, 365, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 366, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 367, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 83, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	906, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	904, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 0, 999,
	0, 113, 114, 210, 0, 115, 0, 116, 909, 0,
	0, 0, 117, 211, 0, 212, 0, 118, 119, 213,
	214, 0, 997, 120, 0, 0, 121, 215, 216, 217,
	0, 218, 0, 0, 122, 0, 123, 124, 0, 0,
	219, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 0, 142, 0, 223, 143,
	144, 0, 224, 145, 225, 146, 908, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 227, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 0, 165, 166, 0, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	0, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 0, 177, 178, 179, 180, 0, 998, 181,
	182, 183, 0, 0, 184, 185, 186, 238, 239, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 906, 204, 0, 0, 901, 94, 95,
	96, 0, 97, 904, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 909, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 900, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 908,
	147, 148, 149, 226, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 907, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 83, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 192, 0, 1235, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 211,
	0, 212, 0, 118, 119, 213, 214, 0, 0, 120,
	0, 0, 121, 215, 216, 217, 0, 218, 0, 0,
	122, 0, 123, 124, 0, 0, 219, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 0, 142, 0, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 227,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 0,
	165, 166, 0, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 0, 174, 175, 0,
	233, 234, 235, 0, 0, 176, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 238, 239, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 323,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 83, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 209,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 211, 0, 212, 0, 118,
	119, 580, 214, 0, 0, 120, 0, 0, 121, 215,
	216, 217, 0, 218, 0, 0, 122, 0, 123, 124,
	0, 0, 219, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 220, 138, 221, 139, 140,
	0, 0, 323, 0, 0, 141, 222, 0, 142, 0,
	223, 143, 144, 0, 224, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 227, 159, 0, 160, 161,
	162, 0, 228, 163, 164, 0, 165, 166, 0, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 232,
	0, 173, 0, 174, 175, 0, 233, 234, 235, 0,
	0, 176, 236, 237, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 238,
	239, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 374, 88, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	0, 121, 215, 216, 217, 0, 218, 0, 0, 122,
	0, 123, 124, 0, 0, 219, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	0, 142, 0, 223, 143, 144, 0, 224, 145, 225,
	146, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 227, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 0, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 0, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 83, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 205, 105, 206, 207, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 208, 111, 112, 209, 0, 0, 0, 113,
	114, 210, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 211, 0, 212, 0, 118, 119, 329, 214, 0,
	0, 120, 0, 0, 121, 215, 216, 217, 0, 218,
	0, 0, 122, 0, 123, 124, 0, 0, 219, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 220, 138, 221, 139, 140, 0, 0, 323, 0,
	0, 141, 222, 0, 142, 0, 223, 143, 144, 0,
	224, 145, 225, 146, 0, 147, 148, 149, 226, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 227, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 0, 165, 166, 0, 167, 229, 230, 168, 0,
	169, 170, 172, 231, 171, 232, 0, 173, 0, 174,
	175, 0, 233, 234, 235, 0, 0, 176, 236, 237,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 238, 239, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 243, 88, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 211, 0, 212, 0, 118, 119,
	213, 214, 0, 0, 120, 0, 0, 121, 215, 216,
	217, 0, 218, 0, 0, 122, 0, 123, 124, 0,
	0, 219, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 0, 142, 0, 223,
	143, 144, 0, 224, 145, 225, 242, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 0, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 0, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	83, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	205, 105, 206, 207, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 208, 111,
	112, 209, 0, 0, 0, 113, 114, 210, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 211, 0, 212,
	0, 118, 119, 213, 214, 0, 0, 120, 0, 0,
	121, 215, 216, 217, 0, 218, 0, 0, 122, 0,
	123, 124, 0, 0, 219, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 220, 138, 221,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 0,
	142, 0, 223, 143, 144, 0, 224, 145, 225, 146,
	0, 147, 148, 149, 226, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 227, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 0, 165, 166,
	0, 167, 229, 230, 168, 0, 169, 170, 172, 231,
	171, 232, 0, 173, 0, 174, 175, 0, 233, 234,
	235, 0, 0, 176, 236, 237, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 238, 239, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 1161, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 83, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 0, 0,
	0, 113, 114, 210, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 211, 0, 212, 0, 118, 119, 1159,
	214, 0, 0, 120, 0, 0, 121, 215, 216, 217,
	0, 218, 0, 0, 122, 0, 123, 124, 0, 0,
	219, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 0, 142, 0, 223, 143,
	144, 0, 224, 145, 225, 146, 0, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 227, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 0, 165, 166, 0, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	0, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 238, 239, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 1150, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 0,
	147, 148, 149, 226, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 83, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 211,
	0, 212, 0, 118, 119, 774, 214, 0, 0, 120,
	0, 0, 121, 215, 216, 217, 0, 218, 0, 0,
	122, 0, 123, 124, 0, 0, 219, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 0, 142, 0, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 227,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 0,
	165, 166, 0, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 0, 174, 175, 0,
	233, 234, 235, 0, 0, 176, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 238, 239, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 159, 0, 257, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 83, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 192, 0,
	567, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 209,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 211, 0, 212, 0, 118,
	119, 213, 214, 0, 0, 120, 0, 0, 121, 215,
	216, 217, 0, 218, 0, 0, 122, 0, 123, 124,
	0, 0, 219, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 220, 138, 221, 139, 140,
	0, 0, 0, 0, 0, 141, 222, 0, 142, 0,
	223, 143, 144, 0, 224, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 227, 159, 0, 160, 161,
	162, 0, 228, 163, 164, 0, 0, 166, 0, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 232,
	0, 173, 0, 174, 175, 0, 233, 234, 235, 0,
	0, 176, 236, 237, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 238,
	239, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 211, 0,
	212, 0, 118, 119, 421, 214, 0, 0, 120, 0,
	0, 121, 215, 216, 217, 0, 218, 0, 0, 122,
	0, 123, 124, 0, 0, 219, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	0, 142, 0, 223, 143, 144, 0, 224, 145, 225,
	146, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 227, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 0, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 0, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 83, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 205, 105, 206, 207, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 208, 111, 112, 209, 0, 0, 0, 113,
	114, 210, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 211, 0, 212, 0, 118, 119, 418, 214, 0,
	0, 120, 0, 0, 121, 215, 216, 217, 0, 218,
	0, 0, 122, 0, 123, 124, 0, 0, 219, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 220, 138, 221, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 0, 142, 0, 223, 143, 144, 0,
	224, 145, 225, 146, 0, 147, 148, 149, 226, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 227, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 0, 165, 166, 0, 167, 229, 230, 168, 0,
	169, 170, 172, 231, 171, 232, 0, 173, 0, 174,
	175, 0, 233, 234, 235, 0, 0, 176, 236, 237,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 238, 239, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	380, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 211, 0, 212, 0, 118, 119,
	213, 214, 0, 0, 120, 0, 0, 121, 215, 216,
	217, 0, 218, 0, 0, 122, 0, 123, 124, 0,
	0, 219, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 268, 0, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 0, 142, 0, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 0, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 0, 174, 175, 0, 267, 234, 235, 0, 0,
	263, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	83, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	205, 105, 206, 207, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 208, 111,
	112, 209, 0, 0, 0, 113, 114, 210, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 211, 0, 212,
	0, 118, 119, 213, 214, 0, 0, 120, 0, 0,
	121, 215, 216, 217, 0, 218, 0, 0, 122, 0,
	123, 124, 0, 0, 219, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 268, 0,
	133, 134, 137, 135, 0, 136, 0, 220, 138, 221,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 0,
	142, 0, 223, 143, 144, 0, 224, 145, 225, 146,
	0, 147, 148, 149, 226, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 227, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 0, 165, 166,
	0, 167, 229, 230, 168, 0, 169, 170, 172, 231,
	171, 232, 0, 173, 0, 174, 175, 0, 267, 234,
	235, 0, 0, 263, 236, 237, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 238, 239, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 345, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 83, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 0, 0,
	0, 113, 114, 210, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 211, 0, 212, 0, 118, 119, 342,
	214, 0, 0, 120, 0, 0, 121, 215, 216, 217,
	0, 218, 0, 0, 122, 0, 123, 124, 0, 0,
	219, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 0, 142, 0, 223, 143,
	144, 0, 224, 145, 225, 146, 0, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 227, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 0, 165, 166, 0, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	0, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 238, 239, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 340, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 0,
	147, 148, 149, 226, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 83, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 211,
	0, 212, 0, 118, 119, 332, 214, 0, 0, 120,
	0, 0, 121, 215, 216, 217, 0, 218, 0, 0,
	122, 0, 123, 124, 0, 0, 219, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 0, 142, 0, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 227,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 0,
	165, 166, 0, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 0, 174, 175, 0,
	233, 234, 235, 0, 0, 176, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 238, 239, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	312, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 83, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 209,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 211, 0, 212, 0, 118,
	119, 213, 214, 0, 0, 120, 0, 0, 121, 215,
	216, 217, 0, 218, 0, 0, 122, 0, 123, 124,
	0, 0, 219, 0, 125, 0, 0, 260, 0, 0,
	127, 0, 128, 129, 130, 131, 268, 0, 133, 134,
	137, 135, 0, 136, 0, 220, 138, 221, 139, 140,
	0, 0, 0, 0, 0, 141, 222, 0, 142, 0,
	223, 143, 144, 0, 224, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 262, 159, 0, 160, 161,
	162, 0, 228, 163, 261, 0, 165, 166, 0, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 232,
	0, 173, 0, 174, 175, 0, 267, 234, 235, 0,
	0, 263, 236, 237, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 238,
	239, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	0, 121, 215, 216, 217, 0, 218, 0, 0, 122,
	0, 123, 124, 0, 0, 219, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	0, 142, 0, 223, 143, 0, 0, 224, 145, 225,
	146, 0, 147, 0, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 227, 0,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 0, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 0, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 800, 187, 819, 820, 821, 0,
	188, 189, 190, 191, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 802, 0, 828, 0, 800, 0, 819,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 801, 0, 802, 0, 828, 0,
	816, 0, 0, 800, 0, 819, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 801, 0, 0,
	0, 0, 802, 816, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 819, 820,
	821, 0, 0, 801, 0, 0, 807, 0, 822, 816,
	0, 0, 0, 0, 0, 802, 0, 828, 0, 0,
	0, 0, 0, 829, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 0, 827, 801, 0, 0, 0,
	0, 0, 816, 0, 0, 824, 829, 0, 0, 0,
	0, 817, 0, 0, 0, 807, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 829, 823, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 807, 0,
	0, 0, 0, 0, 824, 0, 823, 0, 0, 0,
	817, 0, 0, 0, 0, 829, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 827, 826, 0,
	0, 0, 823, 0, 0, 0, 0, 824, 0, 0,
	818, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 818, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 825, 0, 0, 813, 814, 815, 0, 812, 809,
	810, 811, 803, 804, 805, 806, 808, 0, 0, 818,
	0, 0, 0, 0, 825, 1329, 0, 813, 814, 815,
	826, 812, 809, 810, 811, 803, 804, 805, 806, 808,
	0, 0, 0, 0, 0, 0, 0, 0, 1283, 0,
	825, 0, 0, 813, 814, 815, 0, 812, 809, 810,
	811, 803, 804, 805, 806, 808, 0, 0, 0, 0,
	0, 1717, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 813, 814, 815, 0,
	812, 809, 810, 811, 803, 804, 805, 806, 808, 800,
	0, 819, 820, 821, 1716, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 0, 0, 802, 800,
	828, 819, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 0, 0, 802, 801,
	828, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	800, 0, 819, 820, 821, 0, 0, 0, 0, 801,
	0, 0, 822, 0, 0, 816, 0, 0, 0, 802,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	801, 807, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 829, 0,
	0, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 829, 0,
	824, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	827, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 0, 817, 0, 823, 829,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 824, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 823,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 800, 0, 819, 820, 821, 0, 0, 0,
	0, 0, 0, 818, 822, 0, 0, 0, 0, 0,
	0, 802, 0, 828, 826, 0, 825, 0, 0, 813,
	814, 815, 0, 812, 809, 810, 811, 803, 804, 805,
	806, 808, 801, 0, 0, 0, 825, 1697, 816, 813,
	814, 815, 0, 812, 809, 810, 811, 803, 804, 805,
	806, 808, 0, 0, 0, 0, 0, 1676, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	813, 814, 815, 0, 812, 809, 810, 811, 803, 804,
	805, 806, 808, 0, 807, 0, 0, 0, 1671, 0,
	0, 800, 0, 819, 820, 821, 0, 0, 0, 0,
	0, 829, 0, 822, 0, 0, 0, 0, 0, 0,
	802, 0, 828, 827, 800, 0, 819, 820, 821, 0,
	0, 0, 0, 824, 0, 0, 822, 0, 0, 817,
	0, 801, 0, 802, 0, 828, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 819, 820,
	821, 823, 0, 0, 801, 0, 0, 0, 822, 0,
	816, 0, 0, 0, 0, 802, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 818, 801, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 826, 0, 0, 0,
	829, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 829, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 825,
	823, 817, 813, 814, 815, 829, 812, 809, 810, 811,
	803, 804, 805, 806, 808, 0, 0, 827, 0, 0,
	1667, 0, 0, 823, 0, 0, 0, 824, 0, 0,
	0, 0, 0, 817, 818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	826, 813, 814, 815, 0, 812, 809, 810, 811, 803,
	804, 805, 806, 808, 0, 0, 0, 0, 0, 1605,
	0, 825, 0, 0, 813, 814, 815, 0, 812, 809,
	810, 811, 803, 804, 805, 806, 808, 0, 0, 0,
	0, 0, 1604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 813, 814, 815, 0,
	812, 809, 810, 811, 803, 804, 805, 806, 808, 800,
	0, 819, 820, 821, 1512, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 0, 0, 802, 800,
	828, 819, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 0, 0, 802, 801,
	828, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	800, 0, 819, 820, 821, 0, 0, 0, 0, 801,
	0, 0, 822, 0, 0, 816, 0, 0, 0, 802,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	801, 807, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 829, 0,
	0, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 829, 0,
	824, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	827, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 0, 817, 0, 823, 829,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 824, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 823,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 800, 0, 819, 820, 821, 0, 0, 0,
	0, 0, 0, 818, 822, 0, 0, 0, 0, 0,
	0, 802, 0, 828, 826, 0, 825, 0, 0, 813,
	814, 815, 0, 812, 809, 810, 811, 803, 804, 805,
	806, 808, 801, 0, 0, 0, 825, 1447, 816, 813,
	814, 815, 0, 812, 809, 810, 811, 803, 804, 805,
	806, 808, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	813, 814, 815, 0, 812, 809, 810, 811, 803, 804,
	805, 806, 808, 0, 807, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 819, 820,
	821, 829, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 827, 0, 802, 0, 828, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	819, 820, 821, 0, 0, 818, 0, 0, 807, 1781,
	822, 0, 0, 0, 0, 0, 826, 802, 0, 828,
	0, 0, 0, 0, 0, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 827, 801, 0,
	0, 0, 0, 0, 816, 0, 0, 824, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 813, 814, 815, 823, 812, 809, 810, 811,
	803, 804, 805, 806, 808, 0, 0, 1780, 1495, 0,
	807, 0, 1321, 0, 0, 1320, 831, 0, 0, 0,
	0, 0, 800, 0, 819, 820, 821, 829, 0, 818,
	0, 0, 0, 0, 822, 0, 0, 0, 830, 827,
	826, 802, 0, 828, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 813, 814, 815, 0,
	812, 809, 810, 811, 803, 804, 805, 806, 808, 0,
	0, 818, 0, 0, 807, 0, 0, 0, 0, 0,
	0, 800, 826, 819, 820, 821, 0, 0, 0, 0,
	0, 829, 0, 822, 0, 0, 0, 0, 1010, 0,
	802, 0, 828, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 0, 817,
	0, 801, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 825, 0, 0, 813, 814,
	815, 823, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	819, 820, 821, 807, 0, 818, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 0, 826, 802, 0, 828,
	829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 801, 0,
	0, 0, 824, 0, 816, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	823, 0, 813, 814, 815, 0, 812, 809, 810, 811,
	803, 804, 805, 806, 808, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 800, 0, 819,
	820, 821, 0, 0, 818, 0, 0, 829, 0, 822,
	0, 0, 0, 0, 0, 826, 802, 0, 828, 827,
	800, 0, 819, 820, 821, 0, 0, 0, 0, 824,
	0, 0, 822, 0, 0, 817, 0, 801, 0, 802,
	0, 828, 0, 816, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 307, 0,
	801, 0, 0, 0, 0, 0, 816, 0, 825, 0,
	0, 813, 814, 815, 0, 812, 809, 810, 811, 803,
	804, 805, 806, 808, 0, 0, 0, 0, 0, 807,
	0, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 1327, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 824, 829,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 825, 823, 817, 813, 814,
	815, 0, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 800, 0, 819, 820, 821, 0, 0, 0, 0,
	0, 826, 0, 822, 0, 0, 0, 1322, 0, 0,
	802, 0, 828, 818, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 801, 800, 0, 819, 820, 821, 816, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 802, 0, 828, 825, 0, 0, 813, 814, 815,
	0, 812, 809, 810, 811, 803, 804, 805, 806, 808,
	0, 0, 801, 0, 0, 0, 0, 825, 816, 0,
	813, 814, 815, 807, 812, 809, 810, 811, 803, 804,
	805, 806, 808, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 807, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 800, 0, 819, 820,
	821, 823, 0, 0, 0, 826, 0, 0, 822, 0,
	0, 1288, 1282, 0, 0, 802, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 801, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 813, 814, 815, 0, 812, 809, 810, 811, 803,
	804, 805, 806, 808, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 1307, 1308, 1309, 807, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 813, 814, 815, 829, 812, 809, 810, 811,
	803, 804, 805, 806, 808, 0, 0, 827, 800, 0,
	819, 820, 821, 0, 0, 0, 0, 824, 0, 1304,
	822, 0, 0, 817, 0, 0, 0, 802, 800, 828,
	819, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 823, 0, 802, 801, 828,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 801, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 800, 818,
	819, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 1310, 0, 0, 802, 0, 828,
	807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 0, 0, 0, 0, 0, 0, 829, 801, 0,
	807, 0, 0, 0, 816, 0, 0, 0, 0, 827,
	1290, 0, 1307, 1308, 1309, 0, 0, 829, 0, 824,
	0, 0, 0, 825, 0, 817, 813, 814, 815, 827,
	812, 809, 810, 811, 803, 804, 805, 806, 808, 824,
	0, 0, 0, 0, 0, 817, 1306, 823, 0, 0,
	807, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 818, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 0, 826, 0, 0, 817, 0, 0, 0, 0,
	0, 818, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 1301, 1302, 1303, 0, 1300, 1297, 1298,
	1299, 1291, 1292, 1293, 1294, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 0, 1305, 813, 814,
	815, 818, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 826, 0, 0, 825, 0, 0, 813, 814,
	815, 0, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 596, 618, 590, 609, 608, 0, 0, 592,
	591, 0, 0, 1306, 620, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 0, 0, 813, 814,
	815, 0, 812, 809, 810, 811, 803, 804, 805, 806,
	808, 0, 0, 614, 0, 606, 605, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 1302, 1303, 0, 1300, 1297, 1298, 1299, 1291, 1292,
	1293, 1294, 1296, 0, 597, 598, 599, 0, 617, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	0, 0, 0, 0, 0, 600, 595, 0, 0, 0,
	0, 0, 622, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 615, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 621,
}
var sqlPact = [...]int{

	754, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 724, -1000, -1000, -1000, 601, 719,
	701, 15136, 15136, 14883, 1086, 1086, 16401, -1000, -1000, 19184,
	-1000, 1675, 438, 443, 438, 438, 455, 16401, 549, 607,
	100, -1000, 650, 35, 18931, 15136, 1226, 26, 13871, 286,
	754, 14630, 15136, 18678, 1059, 953, 951, 13871, 18425, 18172,
	17919, -1000, 9458, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 547, 296, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	294, -1000, 14377, -1000, 827, -1000, 25, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 818, -1000, 15136, -1000, -1000,
	17666, 17413, 293, 734, -1000, -1000, 497, 352, 1208, -1000,
	41, -1000, -1000, 1055, -1000, 817, 1051, 1050, 1047, 1046,
	350, 789, -1000, 546, 734, -1000, 734, -1000, -1000, -1000,
	519, 16401, -1000, 13871, -1000, 17160, 977, 16907, -1000, 650,
	-1000, -1000, -1000, 849, 1199, 1199, 1199, 1259, 127, 118,
	100, 15, 15136, -1000, 291, 15, 6552, 6552, -1000, -1000,
	286, -1000, 317, 12089, 36, -1000, 7082, -1000, 736, 1107,
	663, 649, 1102, -117, 13871, 15136, 15136, 573, 16654, -1000,
	1101, 120, 1100, -1000, 116, 1097, -1000, -7, -1000, -1000,
	-1000, -1000, -1000, -1000, 286, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14124, 1291,
	22299, -1000, 8402, -1000, -1000, 12353, 1406, 12353, -1000, -1000,
	1289, -1000, 8402, -1000, 21, 19, 911, 1004, 9987, 9723,
	1149, 708, -1000, -1000, -1000, 38, 4165, 15136, 1067, 12353,
	15136, 15136, 15136, -1000, 15136, -1000, 908, -1000, 15136, -1000,
	18, 17, -1000, 16401, -1000, 125, -1000, 285, 878, 16148,
	1113, 874, -1000, 849, -1000, 838, 904, 7610, 8402, 100,
	-1000, -1000, 100, 100, 8402, -1000, -1000, 15136, 15, 1288,
	15136, 161, -1000, 21222, -1000, -1000, 8402, 8402, 8402, 8402,
	8402, 749, -1000, -1000, -1000, 4960, -1000, -1000, 36, 278,
	306, -1000, -1000, 269, 36, -1000, -1000, -1000, -1000, 267,
	1377, 418, -1000, -1000, -1000, 8402, 363, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1065, 265, 262, -1000,
	-1000, -1000, -1000, 260, 259, 256, 255, 247, 244, 240,
	239, 238, 237, 236, 235, 234, 233, 703, -1000, 382,
	-1000, -1000, 382, 382, -1000, 226, 226, 228, -1000, -1000,
	-1000, 226, -1000, -1000, -1000, 357, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 230, 161, -1000, -1000, -1000, 15136, 36,
	-1000, -1000, -1000, 8402, 3900, -12, -1000, 22018, -1000, -53,
	710, -1000, 13365, 1206, 1170, 1161, 13871, 516, 515, 15136,
	15136, 370, 86, 1287, 86, 11561, -1000, 15136, 15136, -1000,
	15136, -1000, -1000, 15136, -1000, 15136, 15136, 205, 12859, 707,
	1096, 35, -13, -1000, 1295, -1000, -1000, -1000, -1000, 96,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 228, 703, 226, 226, 226, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 357, -1000, -1000, 382, 382,
	382, -1000, -1000, -14, 22018, 512, -3, 12606, 15136, -1000,
	37, -1000, -1000, 1045, 427, -18, 683, 934, 618, -1000,
	-1000, -1000, -1000, 9, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1361, -1000, -1000, -1000, -1000, 1368,
	9, -1000, -1000, -1000, -1000, -1000, 1375, -1000, -1000, -1000,
	4165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15136, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 683, 934, -1000, -1000,
	13871, 13112, 1093, 809, 869, -1000, -1000, 335, 1092, -1000,
	-1000, -1000, -1000, 22018, -1000, 22018, 605, 968, -1000, 968,
	4, -1000, 21321, -1000, 225, -19, -1000, 370, 6552, 11297,
	22299, 15136, 538, 8402, 8402, 8402, 8402, 8402, 8402, 8402,
	8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402,
	8402, 8402, 8402, 8402, 8402, 1007, 510, 916, 770, 201,
	4165, -1000, 1315, 1315, 1315, 22088, 22088, 207, 16, 20750,
	-2, 36, -1000, -1000, 6288, 6022, 36, 4428, -1000, 674,
	1365, 377, 22018, 1075, 1013, 223, 108, 106, 8402, 8402,
	918, 8402, 8666, 8402, 8402, 5226, 8402, 8402, 8402, 8402,
	8402, 8402, -1000, 206, -1000, -1000, -1000, -1000, 1355, -1000,
	-1000, 1349, -1000, 528, 525, 1345, 370, 105, -1000, 2303,
	-1000, -1000, 7082, -1000, 707, 15136, 15136, 15136, -1000, -1000,
	868, 15895, -1000, 22299, 15136, -1000, 204, 203, 926, 924,
	15136, 15136, 15642, 15389, 15136, 624, 15136, 15136, 646, -1000,
	630, 8402, 636, -1000, 10769, 387, 15136, 638, 153, -1000,
	-1000, -1000, 334, 15136, -1000, -1000, -1000, 120, -1000, 116,
	-1000, -1000, 13871, -1000, -1000, -1000, -1000, -1000, -1000, 22299,
	311, 309, -1000, 1343, 503, -1000, 498, 496, 492, -1000,
	202, -1000, 8402, 15136, 12606, -3, -5, -1000, -1000, 15136,
	934, -1000, -1000, -1000, -1000, 598, -1000, 675, -1000, 10251,
	-1000, -1000, -1000, 674, -1000, -70, -1000, -1000, -1000, -1000,
	104, -6, -1000, -1000, -1000, -1000, -1000, 15136, 268, 15136,
	15136, 15136, 1088, 1374, 15136, -1000, -1000, -1000, 8402, -1000,
	-1000, -1000, 35, 15136, -1000, 1010, -1000, -11, 1682, -124,
	13618, -1000, 10504, -1000, -1000, 344, 501, 501, 1281, 1281,
	1281, 1281, 836, 836, 1021, 1901, 1782, 1782, 1782, 1752,
	485, 485, 1782, 1782, 1782, 22088, 22038, 381, 8402, 487,
	764, 201, 8402, -1000, 1090, -1000, -1000, -1000, 1042, 200,
	8666, 8666, -1000, -1000, -1000, 4960, -1000, -1000, 199, 8402,
	-1000, 8402, -20, -86, -1000, -1000, -24, -1000, -1000, -9,
	8402, 8402, 8402, 98, -1000, 94, 551, -1000, 8402, 720,
	198, 195, 8402, -1000, -1000, 21896, 19707, 93, 1040, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 92, 21742, 91, 3252,
	-1000, 8666, 8666, 8666, 4960, 190, 89, 21118, -114, 21701,
	7346, 7346, 7346, 84, 21530, 8402, -114, 19684, 3098, 3068,
	-32, -34, -36, 1341, -38, 83, 343, 342, 82, 1010,
	-1000, -1000, 8402, -1000, -1000, -1000, 482, 479, 1087, -1000,
	862, -1000, 670, 8402, 15136, 188, 187, 711, -1000, 1085,
	786, 1083, 786, -1000, -53, 700, -1000, -1000, 473, -1000,
	6552, 22018, -1000, 634, 1191, -40, -1000, -1000, -1000, 6552,
	370, 11561, 7082, -44, -1000, -1000, 707, -1000, 433, 1332,
	80, 893, 824, 669, 583, 1328, 22018, -70, -1000, -70,
	-1000, -1000, -1000, -1000, -1000, -1000, 15136, -1000, 13112, 184,
	15136, 179, 171, 170, 15136, -1000, 1113, -1000, 79, -1000,
	997, 1223, 11297, 942, 939, 11297, 1037, 753, 753, 753,
	-1000, 13618, 3622, -1000, -1000, 15136, 169, 11034, 77, 1682,
	8402, 381, 8402, 8666, 8666, -1000, 381, -1000, -1000, -1000,
	-1000, 1036, 164, 8402, 22299, 3194, 2405, -55, 5756, -77,
	20719, -1000, -1000, 306, -1000, 76, 6818, -1000, 21408, -4,
	-4, -1000, 1373, 1089, -1000, 8402, 21507, -1000, 11825, 371,
	761, 20699, 22299, 22299, -1000, 8402, -1000, 1033, 8402, -1000,
	22299, 8666, 8666, 8666, 8666, 8666, 8666, 8666, 8666, 8666,
	8666, 8666, 8666, 8666, 8666, 8666, 8666, 8666, 8666, 8666,
	978, 8666, 1314, 1314, 1314, -84, 5490, -1000, 1024, 1033,
	8402, 8402, 22299, 75, 74, 69, -1000, 8402, -114, 8402,
	8402, 8402, -1000, -1000, -1000, 65, -1000, 1325, -1000, -1000,
	-1000, -1000, 997, 20932, 15136, 15136, 15136, 1052, 1421, -1000,
	20426, -56, 15136, 15136, -1000, 947, 971, 406, 15136, -1000,
	15136, -1000, 15136, 15136, 15136, 15136, -92, 6552, 189, 35,
	15136, -92, 630, -1000, -1000, 330, -1000, 304, 302, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 64, -1000, -1000,
	9194, 163, 15136, 13112, 9194, 805, -1000, -1000, 366, 8402,
	8402, 1682, 11297, 11297, 998, 931, 11297, -1000, -1000, -1000,
	-1000, 336, -1000, 935, 162, 15136, 13618, 1294, 381, 1951,
	227, 8402, 22299, 2248, -57, 8402, 8402, -1000, -61, -1000,
	8402, -1000, -1000, 1372, 8402, 63, 62, 61, -1000, -1000,
	22018, 8402, -1000, -1000, 19437, 8402, 58, -1000, 57, 56,
	22018, 1024, 22018, -1000, 591, 591, 1314, 1314, 1314, 1314,
	807, 807, 609, 2204, 1868, 1868, 1868, 1966, 333, 333,
	1868, 1868, 1868, 1027, 946, 155, 21983, 8402, -62, -1000,
	-1000, -1000, 22018, 22018, 54, -1000, -1000, -1000, -114, 2773,
	20394, 20371, -1000, 52, 366, -1000, -1000, -1000, -1000, 15136,
	-1000, 15136, -1000, 15136, 15136, 859, -1000, -1000, 923, 152,
	8666, 15136, -1000, 735, -63, -68, 857, -1000, 853, 8402,
	-1000, 22299, 786, 786, -1000, 472, 452, -1000, -92, 1122,
	15136, 1156, -1000, -1000, -1000, 149, -1000, -1000, -1000, -69,
	-1000, 143, 1177, 8402, -1000, -1000, 142, 9194, -73, -1000,
	-1000, 50, -75, 15136, -1000, 15136, 22018, -114, -1000, 998,
	-1000, 140, 8402, 11297, -1000, -1000, 843, -137, -1000, 326,
	-1000, 15136, -82, -1000, 8402, 8402, 2248, -87, -1000, 381,
	381, -1000, 20272, -1000, 21408, -1000, -1000, -1000, 22018, 714,
	-1000, 20090, -1000, -1000, -1000, -1000, 8666, 1023, 138, 22299,
	20059, -1000, -1000, 8402, -1000, -1000, -1000, -1000, -1000, 661,
	-1000, -1000, -1000, -1000, 8402, 21983, 137, -1000, 134, -1000,
	-1000, -1000, 665, -1000, -1000, 22018, 1201, -1000, -1000, 15136,
	15136, 486, -93, 15136, -1000, -1000, 4694, 735, 9194, 1198,
	36, 15136, 1198, 20039, 4428, -94, -1000, 15136, -1000, 735,
	132, -102, -1000, 1280, -1000, 15136, 22018, -1000, 552, 935,
	-1000, 4165, -100, -1000, 381, 381, -1000, -1000, 46, 761,
	1218, -1000, 22140, 8666, 22299, -101, -1000, 19766, -1000, 19733,
	897, 15136, 15136, 15136, 393, 15136, -1000, -1000, 568, -1000,
	370, -1000, -1000, -1000, -1000, -1000, -1000, 1177, -9, 735,
	-1000, -1000, 9194, 15136, 131, -105, 504, -1000, -1000, -1000,
	-1000, 613, 8402, 22140, -107, -1000, -1000, -1000, 775, 756,
	45, -112, 126, -1000, 8402, -1000, 11561, -1000, 1198, 44,
	-1000, -118, -1000, -1000, -1000, 1371, 43, 8138, 8138, -114,
	-1000, -1000, 788, 779, 565, -1000, -1000, -1000, -1000, -1000,
	897, 15136, 22018, -95, -1000, -1000, 735, -1000, -1000, -1000,
	-1000, 8930, 776, 600, 21036, -1000, -1000, 1127, -1000, 399,
	986, 986, 775, -128, -1000, -1000, 1300, -1000, -1000, -1000,
	-1000, -1000, -1000, 1307, -1000, -1000, 933, -1000, -1000, -1000,
	7874, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1623, 1620, 1255, 125, 124, 1619, 1618, 1615, 107,
	122, 119, 120, 1609, 88, 1608, 1607, 1604, 96, 1601,
	1596, 1594, 87, 1593, 1592, 1590, 1589, 1588, 95, 24,
	159, 1927, 152, 1586, 1585, 1584, 9, 108, 52, 1583,
	39, 60, 102, 111, 1197, 79, 1582, 1578, 134, 20,
	26, 110, 98, 144, 128, 130, 1571, 1565, 1561, 49,
	1560, 1558, 1557, 1555, 47, 18, 1553, 66, 1552, 4,
	1551, 1549, 89, 1548, 99, 114, 23, 117, 12, 1547,
	104, 14, 65, 1546, 35, 1545, 38, 76, 140, 1544,
	74, 147, 44, 31, 51, 1543, 1541, 1540, 1539, 82,
	1537, 86, 101, 1528, 1526, 80, 1525, 123, 136, 1524,
	1523, 131, 1522, 1520, 1519, 639, 1516, 1511, 448, 1508,
	13, 42, 61, 6, 113, 106, 27, 1507, 25, 1506,
	1846, 563, 129, 1503, 50, 36, 83, 41, 54, 21,
	1501, 1498, 103, 1497, 1496, 1494, 1490, 1486, 77, 1485,
	57, 137, 45, 53, 93, 16, 22, 46, 84, 149,
	143, 105, 1483, 1482, 116, 1480, 58, 1478, 1477, 728,
	115, 1476, 1475, 1474, 683, 666, 559, 417, 1470, 1468,
	496, 28, 1465, 1464, 109, 1460, 1456, 142, 1454, 135,
	30, 1452, 112, 1448, 85, 1442, 0, 75, 72, 1419,
	133, 67, 1418, 1412, 1409, 1408, 29, 3, 10, 8,
	1, 5, 19, 11, 1405, 1401, 132, 90, 1399, 146,
	1398, 1397, 43, 1396, 1395, 17, 1392, 15, 1391, 7,
	2, 1390, 141, 1388, 92, 1387, 1307, 1386, 139, 1385,
	1383, 1281, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 140, 140, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 232, 232,
	232, 236, 236, 237, 237, 238, 238, 238, 238, 238,
	238, 238, 234, 234, 24, 24, 24, 24, 24, 119,
	115, 115, 117, 117, 117, 117, 43, 114, 114, 114,
	114, 116, 116, 116, 116, 189, 187, 187, 194, 194,
	194, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 195, 195, 195, 195, 195, 195, 58,
	58, 58, 193, 193, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 188, 188,
	233, 233, 235, 235, 8, 8, 59, 59, 60, 60,
	122, 122, 122, 122, 121, 204, 204, 205, 205, 205,
	205, 206, 206, 206, 206, 206, 206, 206, 202, 202,
	203, 200, 200, 201, 201, 201, 201, 239, 239, 120,
	120, 63, 63, 209, 209, 209, 209, 207, 207, 207,
	207, 207, 210, 208, 211, 211, 211, 211, 211, 151,
	151, 151, 27, 7, 7, 104, 104, 67, 67, 155,
	155, 155, 68, 68, 156, 50, 50, 36, 36, 36,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 105,
	105, 106, 106, 19, 23, 26, 26, 26, 26, 26,
	241, 241, 47, 47, 47, 47, 48, 48, 118, 118,
	118, 118, 118, 42, 6, 6, 41, 41, 18, 18,
	18, 18, 18, 53, 53, 111, 111, 111, 113, 113,
	112, 112, 112, 90, 90, 28, 81, 81, 82, 82,
	162, 83, 83, 22, 22, 31, 31, 29, 29, 29,
	29, 29, 29, 30, 30, 32, 32, 32, 32, 32,
	32, 32, 217, 217, 217, 219, 219, 216, 218, 218,
	240, 240, 91, 91, 91, 62, 61, 61, 65, 65,
	64, 66, 66, 154, 88, 88, 88, 88, 107, 108,
	108, 109, 109, 110, 110, 87, 87, 137, 137, 33,
	33, 72, 72, 73, 73, 128, 128, 129, 129, 127,
	127, 127, 157, 157, 157, 157, 158, 158, 158, 158,
	158, 158, 152, 152, 152, 152, 153, 153, 163, 163,
	94, 94, 94, 94, 92, 92, 93, 93, 159, 159,
	159, 159, 89, 89, 160, 160, 160, 123, 123, 166,
	166, 166, 71, 71, 71, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 168, 168,
	168, 168, 170, 170, 170, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 171, 171,
	178, 178, 179, 179, 180, 181, 172, 172, 173, 173,
	174, 175, 182, 182, 182, 182, 184, 184, 176, 176,
	176, 176, 176, 177, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 212, 212, 212, 212, 212, 212, 212,
	214, 214, 215, 215, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	220, 220, 221, 221, 222, 222, 223, 223, 225, 226,
	226, 226, 227, 231, 231, 224, 224, 228, 228, 228,
	229, 229, 230, 230, 230, 230, 230, 142, 142, 142,
	143, 143, 144, 78, 78, 139, 139, 138, 138, 138,
	141, 141, 95, 183, 183, 183, 183, 183, 183, 183,
	96, 96, 103, 97, 97, 98, 98, 98, 98, 98,
	98, 134, 135, 99, 99, 99, 136, 136, 145, 149,
	149, 148, 147, 147, 146, 146, 126, 126, 126, 126,
	125, 124, 84, 84, 242, 242, 150, 150, 85, 85,
	86, 80, 80, 161, 161, 161, 161, 74, 74, 55,
	55, 75, 75, 51, 51, 54, 52, 52, 52, 52,
	69, 69, 70, 70, 49, 49, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 185, 185, 185,
	44, 44, 44, 45, 45, 46, 46, 191, 191, 191,
	192, 192, 192, 192, 190, 190, 190, 190, 190, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 3, 3, 4, 3, 2, 4, 2, 0,
	2, 0, 2, 0, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	5, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 1, 3, 1, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 4, 7, 3, 0, 6, 6,
	8, 5, 7, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 0, 8, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 3, 1, 1, 3, 2,
	4, 0, 4, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 2, 2, 1,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -218, 86,
	94, 183, 93, 79, 109, 197, 204, -29, -31, 212,
	-119, 213, 30, 221, 54, 89, 199, 194, 241, 60,
	-217, -32, -30, 287, 262, 268, 207, -33, 228, 255,
	290, 228, 72, 120, 81, 124, 249, 248, 72, 120,
	228, -12, 287, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -196, -198, 16, 17, 19, 29,
	30, 35, 39, 42, 53, 54, 55, 57, 59, 62,
	63, 70, 71, 72, 73, 75, 79, 81, 85, 86,
	88, 93, 94, 99, 100, 103, 105, 110, 115, 116,
	121, 124, 132, 134, 135, 140, 143, 146, 148, 149,
	150, 151, 152, 154, 155, 157, 159, 156, 162, 164,
	165, 171, 174, 177, 178, 181, 183, 185, 186, 187,
	189, 190, 194, 192, 193, 195, 197, 199, 200, 202,
	204, 205, 206, 209, 210, 212, 213, 215, 218, 220,
	221, 224, 222, 227, 229, 230, 237, 241, 242, 243,
	244, 247, 248, 249, 252, 253, 254, 258, 263, 264,
	265, 266, 24, 31, 32, 33, 34, 36, 37, 40,
	41, 45, 46, 47, 49, 74, 76, 77, 92, 95,
	101, 111, 113, 117, 118, 125, 126, 127, 129, 138,
	161, 163, 172, 176, 180, 182, 188, 201, 208, 216,
	217, 223, 225, 232, 233, 234, 238, 239, 255, 256,
	-44, -44, 183, 18, -236, 18, -237, -238, 60, 86,
	109, 207, 124, 81, 248, -236, -48, 204, -44, -115,
	143, 210, 201, 237, -116, -114, -189, 232, 152, -76,
	-44, 4, 72, 53, 73, 110, 120, 121, 135, 229,
	232, 237, 18, 60, -241, 237, 237, -241, -241, -47,
	237, 235, -48, -240, 228, 228, -104, 72, 246, -30,
	-32, -31, -64, -65, 245, 128, 91, 170, -29, -31,
	-217, -219, 189, -216, -44, -219, -61, -62, 18, 83,
	291, -159, -51, 168, -44, -86, 287, -3, -159, 117,
	-44, -54, 117, -51, 107, 130, 130, -160, -159, -44,
	117, -55, 117, -54, -77, 117, -76, -165, -164, -192,
	4, -196, -198, -197, 255, 51, 61, 108, 123, 131,
	133, 139, 141, 153, 173, 175, 198, 214, 228, -140,
	287, -100, 287, -44, 18, 167, 291, 167, -44, -115,
	47, -115, 287, -117, -42, -43, 132, 185, 235, 272,
	107, 266, -58, 5, 78, -79, 289, 107, -233, 167,
	107, 107, 107, -188, 107, 266, 132, 185, 228, -118,
	-42, -43, -118, 235, -48, -89, -159, -76, 117, 120,
	-44, 117, -64, -65, -88, -107, -108, 142, 166, -91,
	18, 83, -91, -91, 39, 288, 288, 291, -219, -70,
	287, -80, -161, -130, 280, -132, 278, 279, 284, 158,
	267, -142, -51, -133, 9, 287, -145, -214, -31, 92,
	25, -143, -144, 201, -44, 7, 8, 5, 6, -49,
	-168, -177, 240, 96, 160, 43, -212, -213, 4, -196,
	-191, -169, -179, -173, -176, 129, 51, 65, 68, 66,
	69, 211, 250, 44, 24, 95, 176, 180, 225, 238,
	239, 117, 161, 118, 49, 111, 138, 85, 32, 34,
	36, 37, 45, 46, 74, 76, 77, 101, 125, 126,
	127, 163, 188, 216, 223, 233, 234, 256, -197, -180,
	-181, -174, -175, -182, -80, -86, 280, -51, 287, -84,
	-126, -125, -124, 285, 289, -85, -150, -130, 78, -38,
	192, -37, 17, 19, 86, 253, 92, 192, 192, 92,
	292, -160, -53, -51, -53, 212, -44, 26, 92, -40,
	291, 42, 195, 92, -40, 291, 92, 288, 291, -159,
	117, 26, -139, -166, -167, -169, -178, -172, -176, -177,
	35, 41, 40, 230, 208, 217, 33, 125, 126, 127,
	216, 32, 188, 101, 85, 77, 76, 163, 37, 36,
	-180, -181, -174, -175, 74, 233, 234, 129, 34, 46,
	45, 256, 223, -78, -130, -232, -75, 228, 72, -52,
	-44, 280, -238, -232, 26, -78, 291, 291, 140, -57,
	146, 157, 115, -187, 78, -194, -186, -151, 9, 240,
	96, 167, -193, 8, 279, -185, -192, 5, 7, 278,
	-187, 78, 63, -195, 5, 4, -177, -151, 78, 143,
	289, -190, 4, -196, -198, -197, -199, 18, 20, 21,
	22, 23, 25, 26, 27, 28, 38, 43, 44, 48,
	50, 52, 58, 60, 64, 65, 66, 67, 68, 69,
	78, 80, 82, 83, 84, 87, 89, 91, 96, 97,
	98, 104, 106, 107, 109, 112, 114, 119, 120, 122,
	128, 130, 136, 137, 142, 144, 145, 158, 160, 166,
	167, 168, 169, 170, 179, 184, 191, 196, 207, 211,
	219, 226, 228, 231, 235, 236, 240, 245, 246, 250,
	251, 257, 259, 260, 261, 262, -189, -235, 104, -232,
	-189, -189, -189, -189, 140, -189, 291, 291, -48, -40,
	291, 287, 158, -45, 117, -44, -41, 88, 158, -88,
	-108, -107, -109, -130, 18, -130, -132, -30, -30, -30,
	-66, -154, -130, -216, 26, -69, -44, -72, 291, 107,
	10, 50, 29, 278, 279, 280, 281, 102, 282, 275,
	276, 277, 274, 270, 271, 272, 56, 147, 203, 12,
	13, 14, 22, 169, 141, 267, 214, 131, 31, 119,
	26, 4, -130, -130, -130, -130, -130, 175, -31, -130,
	-78, -84, -31, -138, 285, 287, -84, 287, 5, 5,
	287, -146, -130, -220, 263, 104, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 182, -184, 258, -184, -184, -170, 287, -170,
	-171, 287, -170, 264, 268, 287, -72, -51, -126, -130,
	-190, 280, 291, 288, 291, 235, -105, 58, 52, -121,
	117, 52, -200, -44, 58, -201, 48, 246, 184, 106,
	-105, 58, -105, 58, 58, -159, 235, 235, -54, -44,
	-123, 260, -111, -22, 287, 78, 26, -111, -81, -82,
	-162, -83, -51, 287, -44, -44, -54, -55, -76, -77,
	-12, -164, 92, -14, -22, -18, -28, -9, 288, 291,
	-71, 25, -101, 287, 265, 150, 75, 116, 149, -102,
	206, 288, 291, 235, 291, -75, -69, -125, -124, 107,
	237, 288, -43, -42, -56, 187, 218, 193, 209, 291,
	8, 7, 7, 5, -190, -234, -44, -43, -42, -159,
	-59, -60, -122, -121, -202, -203, -200, 120, 246, 97,
	92, 167, 158, 272, 92, -110, 201, 202, 291, -36,
	27, 82, 287, 291, 288, -123, -161, -73, -157, -159,
	-31, -158, 287, -166, -76, 232, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, 141, 214,
	31, 119, 235, 160, 158, 240, 96, 247, 83, 164,
	-242, 226, 28, -136, -31, 287, -190, -142, 201, 287,
	288, 291, -78, -141, 286, -138, -78, 288, 288, -78,
	257, 18, 83, 280, -101, 7, -149, -148, 259, -221,
	99, 112, 287, 288, 288, -130, -130, -95, -183, 4,
	265, 150, 75, 116, 149, 206, -96, -130, -97, -131,
	-132, 278, 279, 284, 287, 201, -98, -130, -78, -130,
	38, 137, 236, -99, -130, 107, -78, -130, -130, -130,
	-78, -78, -78, 287, 7, 7, 232, 232, 7, -123,
	288, 286, 295, -150, -37, -51, -44, -44, 158, -121,
	117, -166, -44, 287, 287, 134, 134, -44, -44, 117,
	-44, 117, -44, -44, -38, 192, -44, -44, 192, -90,
	196, -130, -90, -113, 167, -74, -51, 255, -44, 196,
	-72, 291, 272, -74, -40, -40, -159, -166, 285, 285,
	7, 235, 235, 235, 235, 287, -130, -234, -52, -234,
	-42, 244, 55, 187, -194, -101, 291, 288, 291, -45,
	120, -45, -76, -51, 92, 5, -44, -154, -14, -44,
	-87, 112, 291, 61, -94, 133, 153, 108, 139, 198,
	123, -127, 292, -153, -152, 26, -44, -31, -158, -157,
	266, -130, 235, -242, 226, -136, -130, 160, 240, 96,
	247, 83, 164, 107, 287, -131, -131, -78, 287, -78,
	-130, 286, 286, 291, 288, -65, 291, -64, -130, -78,
	-78, 288, 288, -147, -148, 87, -130, -226, 174, 287,
	287, -130, 26, 291, 288, 107, 288, -103, 179, 288,
	10, 278, 279, 280, 281, 102, 282, 275, 276, 277,
	274, 270, 271, 272, 56, 147, 203, 12, 13, 14,
	131, 119, -131, -131, -131, -78, 287, 288, -134, -135,
	107, 104, 26, -99, -99, -99, 288, 107, -78, 291,
	291, 291, 288, 288, 288, 7, 288, 291, 288, 266,
	266, 288, -87, -130, 235, 235, 92, 158, -204, -201,
	-130, -69, 287, 287, -35, 86, 212, -106, 92, -40,
	92, -40, 235, -105, 58, 235, -80, 196, 57, 288,
	291, -80, -123, -82, -150, 288, 286, 7, 7, 288,
	150, 116, 149, -102, 149, -102, -102, 7, -44, -122,
	287, -45, 287, 287, 287, -44, -41, 288, -137, 114,
	39, -157, 133, 133, -157, -94, 133, -92, 173, -92,
	-92, -153, -190, 293, -44, 287, 288, -130, -130, -131,
	-131, 107, 287, -130, -139, 22, 22, 288, -78, 288,
	291, 288, -138, 288, 257, -65, -65, -65, 5, 89,
	-130, 231, -227, -44, 287, 260, -64, 288, -166, -166,
	-130, -134, -130, -166, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, 83, 158, 164, -131, 291, -78, 288,
	-135, -134, -130, -130, -166, 288, 288, 288, -78, -130,
	-130, -130, 288, 7, -137, 286, -44, -44, -121, 92,
	-205, 58, -206, 50, 97, 158, 160, 246, 184, 48,
	78, 191, 288, 288, -69, -69, 158, 78, 158, 78,
	71, 242, -44, -44, -51, -44, -44, -44, -80, -112,
	287, 167, -22, -51, -90, 272, 286, 286, 288, -67,
	-155, -44, -215, 287, -212, -213, -49, 287, -68, -156,
	-44, -59, -67, 167, -222, 261, -130, -78, -157, -157,
	-93, 251, 167, 133, -157, -163, 269, -129, -128, 105,
	156, 287, -69, -152, 22, 22, -130, -139, 288, -130,
	-130, 288, -130, 5, -130, 288, 288, 288, -130, -231,
	-44, -130, 288, 288, 288, -135, 107, 83, 164, 287,
	-130, 288, 288, 291, 288, 288, 288, -222, -121, -44,
	-76, -44, 160, 134, 287, -131, -51, -120, -239, 59,
	224, 288, 288, 160, 160, -130, -166, -40, -40, 235,
	235, 84, -69, 58, -86, -31, 287, 288, 291, -50,
	-84, 50, -50, -130, 287, -67, 288, 291, 288, 288,
	-51, -223, -225, -44, -93, 287, -130, -157, 164, 291,
	294, 272, -69, 288, -130, -130, 288, 288, -65, -224,
	178, 288, -131, 107, 287, -139, 288, -130, -206, -130,
	-46, 287, 287, 191, -39, 50, -44, -44, 248, 159,
	288, -44, -120, -155, -36, -76, -36, 288, -78, 288,
	-156, -120, 287, 291, 26, -69, 227, -128, -190, 288,
	288, -65, 39, -131, -139, 288, 288, 288, -209, 148,
	-44, -69, -51, -34, 251, -76, 212, -123, -50, -65,
	-120, -67, -225, -227, 288, 232, -228, 186, 202, -78,
	288, -207, -210, -208, 167, 108, 177, 215, 288, 288,
	-63, 287, -130, -81, -36, 288, 288, 5, 288, -229,
	-230, 31, 243, 63, -130, -229, -208, 167, -210, 167,
	248, 81, -209, -69, -123, -120, -230, 181, 103, 201,
	181, 103, -211, 155, 195, 42, 212, -211, -207, 288,
	22, 16, 160, 78, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 323, -2, 0,
	118, 0, 281, 0, 281, 281, 285, 0, 351, 246,
	348, -2, 359, 0, 0, 0, 357, 337, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 770, 771, 772, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	91, 92, 849, 94, 0, 101, 102, 103, 105, 106,
	107, 108, 109, 110, 111, 0, 274, 863, 287, 114,
	829, 867, 930, 879, 121, 131, 0, 936, -2, 135,
	65, 164, 165, 0, 167, 181, 0, 0, 0, 179,
	0, 0, 176, 0, 292, 280, 292, 277, 278, 279,
	282, 0, 273, 0, 350, 0, 0, 0, 245, -2,
	333, 334, -2, 0, 354, 354, 354, 0, 0, 334,
	0, 342, 853, 345, 753, 343, 0, 0, 356, 355,
	0, 338, 418, 0, 743, 379, 0, 2, 0, 916,
	0, 0, 916, 0, 0, 0, 0, 0, 424, 57,
	916, 48, 916, 739, 48, 916, 63, 0, 79, 81,
	780, 781, 782, 783, 941, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 0, 0,
	0, 89, 0, 93, 95, 0, 0, 0, 286, 115,
	906, 117, 0, 120, 122, 123, 0, 0, 0, 0,
	0, 0, 134, 159, 160, 66, 0, 0, 183, 0,
	0, 0, 0, 172, 0, 173, 0, 175, 0, 275,
	288, 289, 276, 0, 284, 48, 422, 0, 916, 774,
	297, 916, -2, 0, 329, 366, 367, 0, 0, 0,
	352, 353, 0, 0, 0, 325, 326, 0, 344, 0,
	0, 382, 731, 735, 736, 510, 0, 0, 0, 0,
	0, 0, 591, 592, 593, 0, 595, 596, 597, 911,
	0, 601, 602, 930, 743, 756, 757, 758, 759, 0,
	0, 0, 764, 765, 766, 715, 641, 611, -2, -2,
	754, 448, 449, 450, 451, -2, 943, 615, 617, 619,
	620, 621, 622, 0, 895, 912, 926, 927, 935, 939,
	940, 916, 923, 917, 907, 914, 922, 811, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 779, 472,
	473, 478, 479, 481, 382, 380, 419, 420, 0, 744,
	722, 716, 717, 0, 0, 0, 728, 726, 727, 25,
	270, 27, 0, 270, 270, 0, 0, 0, 0, 0,
	0, 428, 0, 303, 0, 0, 425, 0, 0, 59,
	0, 46, 47, 0, 61, 0, 0, 349, 0, 0,
	916, 349, 0, 675, 434, 435, 436, 437, 438, 507,
	441, 442, 443, 444, 445, 446, 447, 455, 456, 457,
	458, 459, 460, 469, 0, 454, 454, 454, 466, 467,
	470, 471, 476, 477, 488, 489, 491, 493, 487, 487,
	487, 484, 485, 0, 673, 0, 98, 0, 806, 741,
	746, 749, 104, 0, 0, 0, 0, 0, 0, 126,
	146, 147, 148, 127, 129, 136, 138, 139, 140, 149,
	150, 151, 152, 239, 0, 241, 162, 163, 767, 0,
	128, 130, 132, 133, 153, 154, 0, 156, 157, 158,
	0, 67, 784, 785, 786, 787, 788, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 166, 168, 0, 180,
	169, 170, 171, 178, 174, 177, 0, 0, 283, 242,
	0, 187, 0, 0, 916, 773, 294, 0, 0, 332,
	364, 365, 368, 371, 372, 369, 510, 339, 340, 341,
	360, 361, 259, 346, 0, 0, 750, 428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 734, 514, 515, 516, 538, 539, 0, -2, 673,
	0, 598, 599, 600, 0, 0, -2, 0, 761, 507,
	0, 0, 714, 643, 0, 0, 0, 0, 0, 0,
	0, 0, 694, 700, 0, 0, 0, 0, 0, 0,
	0, 0, 462, 475, 486, 483, 482, 464, 0, 463,
	461, 0, 465, 0, 0, 0, 428, 0, 723, 0,
	720, 721, 0, 730, 0, 0, 0, 0, 269, 29,
	916, 0, 39, 0, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 745,
	314, 0, 314, 305, 0, 0, 0, 301, 382, 316,
	318, 319, 0, 0, 426, 58, 740, 48, 64, 48,
	70, 80, 0, 82, 85, 86, 87, 88, 83, 0,
	429, 431, 439, 0, 494, 495, 496, 497, 498, 499,
	508, 90, 0, 0, 0, 99, 100, 747, 748, 0,
	0, 119, 124, 125, 293, 0, 143, 0, 145, 0,
	240, 769, 768, 507, 68, 182, 112, 290, 291, 423,
	0, 186, 188, 190, 191, 192, 193, 774, 0, 774,
	0, 0, 0, 0, 0, 370, 373, 374, 0, 363,
	257, 258, 349, 0, 752, 376, 732, 381, 383, 391,
	407, 394, 0, 511, 512, 0, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, -2, -2, -2, 530,
	531, 532, -2, -2, -2, 536, 537, -2, 0, 0,
	725, 0, 0, 544, 0, 547, 549, 551, 0, 0,
	0, 0, 724, 561, 706, 0, 733, 546, 0, 0,
	594, 0, 0, 0, 679, 680, 0, -2, 603, 359,
	0, 0, 0, 0, 762, 0, 713, 709, 0, 651,
	0, 0, 0, 616, 618, 0, 0, 0, 0, 683,
	684, 685, 686, 687, 688, 689, 0, 0, 0, 0,
	563, 0, 0, 0, 0, 930, 0, 673, 699, 0,
	0, 0, 0, 0, 673, 0, 705, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 376,
	421, 718, 0, 729, 28, 261, 0, 0, 0, 31,
	916, 196, 0, 0, 0, 0, 0, 272, 40, 916,
	48, 916, 48, 41, 26, 270, 260, 263, 0, 56,
	0, 427, 298, 299, 0, 0, 737, 307, 304, 0,
	428, 0, 0, 0, 60, 62, 0, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 96, 742, 97,
	116, 141, 142, 144, 137, 155, 0, 184, 0, 0,
	774, 0, 0, 0, 0, 296, 297, 362, 0, 751,
	378, 0, 0, 0, 0, 0, 0, 415, 415, 415,
	413, 407, 0, 393, 406, 0, 405, -2, 394, 0,
	0, -2, 0, 0, 0, 562, -2, 545, 548, 550,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 677, 678, 0, -2, 0, 0, 358, 359, 359,
	359, 609, 0, 0, 710, 0, 0, 610, 0, 0,
	0, 0, 0, 0, 625, 0, 626, 0, 0, 627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 567, 0, 0, 628, 697, 698,
	0, 0, 0, 0, 0, 0, 633, 0, 704, 0,
	0, 0, 637, 638, 639, 0, 452, 0, 468, 490,
	492, 480, 378, 0, 0, 0, 0, 0, 194, 211,
	0, 0, 0, 0, 33, 0, 0, 0, 0, 37,
	0, 43, 0, 0, 0, 0, 313, 0, 312, 0,
	0, 302, 314, 317, 320, 0, 432, 0, 0, 440,
	500, 501, 502, 503, 504, 505, 506, 0, 113, 189,
	0, 0, 0, 187, 0, 0, 295, 347, 645, 0,
	0, 384, 0, 0, 0, 0, 0, 410, 414, 411,
	412, 409, 389, 0, 403, 0, 396, 513, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 707, 0, 668,
	0, -2, 681, 604, 0, 0, 0, 0, 763, 708,
	712, 0, 649, 650, 654, 0, 0, 614, 0, 0,
	682, 691, 692, 564, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, -2, -2, -2, 581, 582, 583,
	-2, -2, -2, 0, 0, 0, 693, 0, 0, 671,
	695, 696, 701, 702, 0, 630, 631, 632, 703, 0,
	0, 0, 474, 0, 645, 719, 265, 267, 30, 0,
	195, 0, 198, 0, 0, 0, 202, 203, 0, 0,
	0, 0, 213, 220, 0, 0, 0, 45, 0, 0,
	271, 0, 48, 48, 262, 0, 0, 264, 300, 0,
	0, 0, 306, 738, 315, 0, 433, 430, 509, 0,
	247, 256, 256, 0, 612, 613, 0, 0, 0, 252,
	254, 0, 0, 0, 335, 0, 377, 375, 397, 0,
	399, 0, 0, 0, 401, 392, 0, 0, 387, 0,
	386, 0, 0, 395, 0, 0, -2, 0, 555, -2,
	-2, 667, 674, 760, 359, 605, 607, 608, 711, 656,
	653, 0, 640, 623, 624, 690, 0, 0, 0, 0,
	674, 670, 629, 0, 635, 636, 453, 336, 32, 0,
	199, 200, 201, 204, 0, 206, 776, 214, 0, 217,
	218, 215, 0, 34, 35, 44, 50, 36, 42, 0,
	0, 0, 0, 0, 321, 322, 0, 220, 0, 259,
	755, 0, 259, 0, 0, 0, 210, 0, 185, 220,
	0, 644, 646, 0, 398, 0, 417, 400, 0, 0,
	390, 0, 0, 404, -2, -2, 556, 669, 0, 359,
	0, 642, -2, 0, 0, 0, 672, 0, 197, 0,
	226, 0, 0, 0, 52, 0, 266, 268, 0, 309,
	428, 311, 208, 248, 249, 255, 250, 256, 359, 220,
	253, 243, 0, 0, 0, 0, 0, 388, 385, 402,
	606, 659, 0, -2, 0, 589, 634, 205, 231, 0,
	0, 0, 222, 38, 0, 49, 0, 310, 259, 0,
	209, 0, 647, 648, 416, 0, 0, 0, 0, 655,
	590, 207, 227, 228, 0, 223, 224, 225, 775, 219,
	226, 0, 51, 428, 251, 604, 220, 408, 652, 657,
	660, -2, 882, 803, 0, 658, 229, 0, 230, 0,
	0, 0, 231, 0, 308, 244, 0, 662, 663, 664,
	665, 666, 232, 0, 235, 236, 0, 233, 216, 221,
	0, 234, 237, 238, 661,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 276, 3, 282, 277, 3,
	287, 288, 280, 278, 291, 279, 289, 281, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 295, 290,
	270, 272, 271, 3, 292, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 285, 3, 286, 275, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 293, 274, 294, 284,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 273, 57613, 283, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:693
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:699
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:812
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:866
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:867
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:870
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:871
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1098
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1354
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = []string(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1640
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = []string(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = []string(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1686
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1687
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1690
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1693
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = true
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = false
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1779
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1799
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = Ascending
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = Descending
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = true
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = false
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1866
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1909
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.str = ""
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.str = ""
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2003
		{
			unimplementedWithIssue(6637)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2010
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2052
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = []string(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			unimplemented()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2311
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2319
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = true
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = false
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = false
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = true
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2442
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.str = astFullJoin
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.str = astLeftJoin
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.str = astRightJoin
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.str = astInnerJoin
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2688
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			unimplementedWithIssue(2115)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			unimplementedWithIssue(2115)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2782
		{
			unimplementedWithIssue(2115)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2783
		{
			unimplementedWithIssue(2115)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2784
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2792
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2848
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = nil
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2893
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2965
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2992
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3032
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			unimplemented()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3065
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3074
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3076
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3080
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3113
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3501
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3502
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3539
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3543
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3561
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3588
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3632
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3633
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3636
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3637
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3642
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3652
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3673
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3674
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3683
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3684
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3688
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4024
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4025
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4181
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4217
		{
			unimplemented()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = DNull
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.str = ""
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
