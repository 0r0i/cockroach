// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT8 = 57474
const INT64 = 57475
const INTEGER = 57476
const INTERSECT = 57477
const INTERVAL = 57478
const INTO = 57479
const IS = 57480
const ISOLATION = 57481
const JOIN = 57482
const KEY = 57483
const KEYS = 57484
const LATERAL = 57485
const LEADING = 57486
const LEAST = 57487
const LEFT = 57488
const LEVEL = 57489
const LIKE = 57490
const LIMIT = 57491
const LOCAL = 57492
const LOCALTIME = 57493
const LOCALTIMESTAMP = 57494
const LOW = 57495
const LSHIFT = 57496
const MATCH = 57497
const MINUTE = 57498
const MONTH = 57499
const NAME = 57500
const NAMES = 57501
const NATURAL = 57502
const NEXT = 57503
const NO = 57504
const NO_INDEX_JOIN = 57505
const NORMAL = 57506
const NOT = 57507
const NOTHING = 57508
const NULL = 57509
const NULLIF = 57510
const NULLS = 57511
const NUMERIC = 57512
const OF = 57513
const OFF = 57514
const OFFSET = 57515
const ON = 57516
const ONLY = 57517
const OR = 57518
const ORDER = 57519
const ORDINALITY = 57520
const OUT = 57521
const OUTER = 57522
const OVER = 57523
const OVERLAPS = 57524
const OVERLAY = 57525
const PARENT = 57526
const PARTIAL = 57527
const PARTITION = 57528
const PLACING = 57529
const POSITION = 57530
const PRECEDING = 57531
const PRECISION = 57532
const PREPARE = 57533
const PRIMARY = 57534
const PRIORITY = 57535
const RANGE = 57536
const READ = 57537
const REAL = 57538
const RECURSIVE = 57539
const REF = 57540
const REFERENCES = 57541
const RENAME = 57542
const REPEATABLE = 57543
const RELEASE = 57544
const RESTRICT = 57545
const RETURNING = 57546
const REVOKE = 57547
const RIGHT = 57548
const ROLLBACK = 57549
const ROLLUP = 57550
const ROW = 57551
const ROWS = 57552
const RSHIFT = 57553
const SAVEPOINT = 57554
const SEARCH = 57555
const SECOND = 57556
const SELECT = 57557
const SERIAL = 57558
const SERIALIZABLE = 57559
const SESSION = 57560
const SESSION_USER = 57561
const SET = 57562
const SHOW = 57563
const SIMILAR = 57564
const SIMPLE = 57565
const SMALLINT = 57566
const SMALLSERIAL = 57567
const SNAPSHOT = 57568
const SOME = 57569
const SQL = 57570
const START = 57571
const STRICT = 57572
const STRING = 57573
const STORING = 57574
const SUBSTRING = 57575
const SYMMETRIC = 57576
const SYSTEM = 57577
const TABLE = 57578
const TABLES = 57579
const TEXT = 57580
const THEN = 57581
const TIME = 57582
const TIMESTAMP = 57583
const TIMESTAMPTZ = 57584
const TO = 57585
const TRAILING = 57586
const TRANSACTION = 57587
const TREAT = 57588
const TRIM = 57589
const TRUE = 57590
const TRUNCATE = 57591
const TYPE = 57592
const UNBOUNDED = 57593
const UNCOMMITTED = 57594
const UNION = 57595
const UNIQUE = 57596
const UNKNOWN = 57597
const UPDATE = 57598
const UPSERT = 57599
const USER = 57600
const USING = 57601
const VALID = 57602
const VALIDATE = 57603
const VALUE = 57604
const VALUES = 57605
const VARCHAR = 57606
const VARIADIC = 57607
const VARYING = 57608
const WHEN = 57609
const WHERE = 57610
const WINDOW = 57611
const WITH = 57612
const WITHIN = 57613
const WITHOUT = 57614
const YEAR = 57615
const ZONE = 57616
const NOT_LA = 57617
const WITH_LA = 57618
const AS_LA = 57619
const POSTFIXOP = 57620
const UMINUS = 57621

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4692

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	298, 24,
	-2, 356,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 39,
	1, 331,
	174, 331,
	204, 331,
	296, 331,
	298, 331,
	-2, 341,
	-1, 52,
	1, 334,
	174, 334,
	204, 334,
	296, 334,
	298, 334,
	-2, 340,
	-1, 61,
	1, 24,
	298, 24,
	-2, 356,
	-1, 273,
	1, 162,
	298, 162,
	-2, 851,
	-1, 306,
	149, 366,
	173, 366,
	-2, 337,
	-1, 309,
	149, 365,
	173, 365,
	-2, 335,
	-1, 431,
	149, 365,
	173, 365,
	-2, 338,
	-1, 487,
	295, 791,
	-2, 784,
	-1, 488,
	295, 792,
	-2, 785,
	-1, 494,
	5, 501,
	295, 501,
	-2, 939,
	-1, 517,
	5, 467,
	-2, 914,
	-1, 518,
	5, 495,
	295, 495,
	-2, 916,
	-1, 519,
	5, 475,
	-2, 917,
	-1, 520,
	5, 474,
	-2, 918,
	-1, 521,
	5, 495,
	295, 495,
	-2, 921,
	-1, 522,
	5, 495,
	295, 495,
	-2, 922,
	-1, 523,
	5, 496,
	-2, 925,
	-1, 524,
	5, 461,
	-2, 926,
	-1, 525,
	5, 461,
	-2, 927,
	-1, 526,
	5, 477,
	-2, 930,
	-1, 527,
	5, 462,
	-2, 935,
	-1, 528,
	5, 463,
	-2, 936,
	-1, 529,
	5, 464,
	-2, 937,
	-1, 530,
	5, 465,
	-2, 938,
	-1, 531,
	5, 461,
	-2, 942,
	-1, 532,
	5, 468,
	-2, 947,
	-1, 533,
	5, 466,
	-2, 950,
	-1, 534,
	5, 493,
	295, 493,
	-2, 952,
	-1, 535,
	5, 497,
	-2, 955,
	-1, 536,
	5, 499,
	-2, 956,
	-1, 537,
	5, 492,
	295, 492,
	-2, 960,
	-1, 857,
	95, 341,
	135, 341,
	149, 341,
	173, 341,
	177, 341,
	253, 341,
	-2, 611,
	-1, 865,
	295, 769,
	-2, 758,
	-1, 1056,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 535,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 536,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 537,
	-1, 1062,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 541,
	-1, 1063,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 542,
	-1, 1064,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 543,
	-1, 1067,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 548,
	-1, 1073,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 550,
	-1, 1076,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 555,
	-1, 1077,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 556,
	-1, 1078,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 557,
	-1, 1103,
	182, 682,
	-2, 685,
	-1, 1266,
	95, 341,
	135, 341,
	149, 341,
	173, 341,
	177, 341,
	253, 341,
	-2, 414,
	-1, 1270,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 549,
	-1, 1271,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 551,
	-1, 1276,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 552,
	-1, 1294,
	182, 681,
	-2, 684,
	-1, 1453,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 553,
	-1, 1458,
	138, 0,
	-2, 567,
	-1, 1466,
	182, 683,
	-2, 686,
	-1, 1499,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 592,
	-1, 1500,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 593,
	-1, 1501,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 594,
	-1, 1505,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 598,
	-1, 1506,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 599,
	-1, 1507,
	12, 0,
	13, 0,
	14, 0,
	278, 0,
	279, 0,
	280, 0,
	-2, 600,
	-1, 1611,
	138, 0,
	-2, 568,
	-1, 1614,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 571,
	-1, 1615,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 573,
	-1, 1701,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 572,
	-1, 1702,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 574,
	-1, 1709,
	138, 0,
	-2, 601,
	-1, 1754,
	138, 0,
	-2, 602,
	-1, 1807,
	34, 0,
	123, 0,
	148, 0,
	222, 0,
	275, 0,
	-2, 913,
}

const sqlNprod = 1054
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23537

var sqlAct = [...]int{

	488, 1806, 579, 1420, 1830, 939, 1786, 1760, 1788, 1654,
	1787, 1805, 1029, 947, 1477, 1576, 1689, 1677, 682, 550,
	1537, 1597, 1603, 1577, 809, 860, 1590, 310, 480, 486,
	485, 478, 1432, 85, 85, 85, 274, 38, 85, 86,
	332, 85, 1263, 1349, 1009, 1038, 1012, 787, 450, 85,
	1348, 592, 1297, 1195, 1262, 1253, 85, 85, 862, 1442,
	85, 790, 17, 85, 85, 85, 1011, 559, 1037, 85,
	85, 85, 85, 556, 358, 1152, 1149, 538, 1247, 924,
	948, 915, 1113, 1089, 1041, 1086, 978, 656, 971, 1201,
	962, 419, 315, 640, 74, 317, 51, 23, 561, 451,
	1039, 1004, 13, 6, 593, 805, 309, 420, 353, 551,
	552, 315, 460, 359, 637, 896, 667, 355, 348, 72,
	811, 8, 7, 350, 5, 1015, 4, 51, 351, 79,
	320, 435, 434, 261, 78, 80, 941, 636, 658, 433,
	252, 271, 572, 654, 438, 344, 975, 940, 318, 52,
	892, 360, 1261, 81, 76, 540, 75, 51, 77, 1696,
	328, 53, 1697, 335, 1208, 581, 581, 944, 581, 345,
	1837, 1822, 1803, 1033, 1033, 1676, 1794, 1784, 1207, 1033,
	968, 1779, 299, 813, 1033, 539, 314, 976, 338, 1756,
	356, 1750, 968, 1740, 1033, 1730, 1676, 1703, 1033, 1700,
	968, 307, 1033, 1686, 570, 322, 1676, 82, 314, 1684,
	981, 82, 1033, 306, 814, 1675, 1659, 1658, 1676, 1033,
	1033, 1292, 1636, 977, 974, 981, 1293, 1616, 1613, 493,
	981, 968, 1549, 1291, 57, 1033, 816, 1320, 981, 1337,
	1338, 1339, 1462, 1406, 1399, 981, 1400, 1400, 85, 50,
	1744, 814, 1610, 50, 1251, 59, 1366, 815, 1364, 1367,
	1679, 981, 1363, 85, 542, 981, 85, 85, 1362, 1294,
	812, 981, 981, 816, 541, 30, 1250, 1034, 1250, 30,
	1033, 979, 60, 31, 1512, 990, 1334, 31, 981, 55,
	980, 1465, 1233, 981, 815, 56, 913, 1235, 1033, 85,
	57, 85, 983, 85, 967, 85, 912, 968, 1296, 911,
	821, 1097, 587, 553, 54, 588, 445, 554, 1804, 61,
	85, 59, 1028, 582, 582, 998, 582, 446, 780, 779,
	981, 85, 648, 1325, 432, 647, 384, 327, 554, 426,
	973, 553, 85, 85, 85, 554, 85, 821, 60, 681,
	1801, 57, 1207, 404, 584, 55, 1793, 549, 831, 431,
	392, 56, 972, 1427, 1751, 1340, 1685, 1641, 545, 1637,
	1629, 812, 59, 544, 1628, 1627, 393, 85, 1622, 1621,
	943, 1335, 1320, 1620, 85, 1574, 85, 1567, 1527, 1522,
	1521, 1520, 1468, 1451, 1431, 1410, 1371, 358, 358, 60,
	57, 425, 1368, 1356, 57, 684, 85, 599, 85, 85,
	85, 85, 85, 85, 85, 832, 1237, 1094, 85, 585,
	580, 59, 783, 85, 1347, 59, 1319, 782, 677, 85,
	1316, 54, 423, 1314, 1302, 1301, 359, 359, 1336, 1234,
	814, 1166, 345, 1120, 685, 1119, 868, 85, 60, 445,
	85, 785, 60, 444, 1796, 55, 634, 441, 442, 55,
	1479, 56, 816, 1770, 1743, 56, 646, 307, 447, 1722,
	1720, 1711, 1693, 1682, 360, 360, 1673, 589, 1325, 306,
	54, 1651, 686, 815, 73, 1634, 574, 571, 1606, 825,
	817, 818, 819, 820, 822, 1584, 842, 1457, 1450, 865,
	553, 1428, 315, 1095, 554, 1331, 1332, 1333, 1566, 1330,
	1327, 1328, 1329, 1321, 1322, 1323, 1324, 1326, 1425, 1423,
	490, 1383, 1408, 644, 1320, 643, 1335, 817, 818, 819,
	820, 822, 1382, 842, 622, 1346, 821, 1310, 678, 1309,
	859, 671, 1288, 1284, 1091, 770, 1320, 767, 1222, 85,
	771, 772, 773, 774, 775, 684, 781, 1180, 814, 778,
	1179, 1159, 1118, 85, 621, 1032, 794, 85, 795, 907,
	85, 85, 793, 909, 897, 900, 85, 807, 85, 85,
	816, 85, 1320, 1336, 85, 1180, 85, 85, 307, 358,
	904, 307, 307, 890, 685, 889, 888, 887, 886, 885,
	801, 815, 884, 802, 803, 883, 882, 881, 598, 918,
	880, 879, 878, 877, 876, 875, 866, 1320, 864, 54,
	1325, 333, 957, 353, 449, 390, 380, 378, 359, 1426,
	1573, 1334, 686, 1572, 418, 942, 814, 942, 863, 85,
	85, 898, 1325, 624, 1216, 929, 931, 901, 1215, 546,
	74, 1698, 1370, 623, 963, 1327, 1328, 1329, 1321, 1322,
	1323, 1324, 1326, 814, 985, 905, 360, 934, 1335, 1571,
	1320, 1209, 894, 895, 1023, 398, 902, 1369, 1325, 815,
	903, 1269, 684, 51, 414, 79, 399, 51, 921, 965,
	78, 80, 873, 937, 964, 966, 1591, 975, 893, 940,
	1003, 1480, 956, 1305, 955, 356, 960, 959, 473, 81,
	76, 946, 75, 1325, 77, 958, 1114, 784, 819, 820,
	822, 685, 842, 1203, 264, 1336, 1335, 1766, 1817, 1818,
	1557, 1729, 898, 989, 901, 562, 869, 563, 976, 292,
	992, 83, 245, 246, 1229, 562, 263, 563, 298, 275,
	297, 986, 987, 984, 293, 991, 1667, 263, 1691, 686,
	925, 1335, 1666, 304, 321, 321, 1325, 1395, 331, 1375,
	85, 331, 337, 331, 977, 974, 1374, 331, 346, 331,
	275, 895, 894, 1336, 85, 85, 1272, 1221, 1220, 313,
	1219, 454, 1218, 1074, 982, 936, 1330, 1327, 1328, 1329,
	1321, 1322, 1323, 1324, 1326, 564, 65, 396, 562, 1407,
	563, 935, 422, 1163, 85, 564, 85, 1035, 1336, 928,
	1162, 1728, 1321, 1322, 1323, 1324, 1326, 1125, 917, 312,
	917, 1045, 979, 69, 1394, 417, 916, 376, 63, 301,
	842, 1594, 1088, 599, 397, 1088, 1656, 1768, 1019, 575,
	684, 66, 1044, 979, 1330, 1327, 1328, 1329, 1321, 1322,
	1323, 1324, 1326, 1827, 1320, 581, 1385, 1196, 1092, 1397,
	1205, 314, 1007, 1200, 1412, 1194, 994, 568, 564, 1114,
	907, 1790, 996, 70, 1008, 907, 814, 1006, 64, 685,
	1781, 973, 1329, 1321, 1322, 1323, 1324, 1326, 997, 595,
	1817, 927, 1128, 1196, 1026, 1027, 1782, 995, 816, 1723,
	1413, 1165, 1036, 567, 1415, 85, 85, 85, 842, 1043,
	395, 85, 1101, 302, 85, 1191, 1230, 686, 421, 815,
	85, 85, 85, 85, 85, 891, 85, 85, 1228, 1098,
	1102, 305, 1105, 1129, 85, 842, 85, 311, 1323, 1324,
	1326, 599, 394, 85, 1791, 1674, 381, 1110, 1144, 1211,
	1325, 1212, 85, 926, 1156, 1157, 1158, 1175, 979, 1093,
	622, 386, 979, 1707, 275, 275, 565, 68, 67, 1130,
	1127, 315, 821, 85, 85, 1169, 565, 856, 560, 85,
	387, 389, 1792, 71, 314, 1198, 1386, 599, 62, 358,
	621, 415, 1190, 1308, 1443, 1789, 395, 263, 1335, 331,
	1816, 275, 1170, 429, 1814, 1657, 1392, 85, 914, 85,
	1589, 85, 85, 582, 1826, 85, 1021, 1177, 321, 436,
	831, 407, 1833, 385, 85, 383, 437, 1131, 359, 331,
	1436, 85, 1210, 85, 598, 1274, 1661, 1843, 1087, 565,
	331, 331, 331, 437, 576, 416, 1660, 1239, 1071, 1649,
	1717, 1508, 1213, 1377, 1236, 1336, 1238, 1632, 676, 675,
	1174, 669, 664, 1214, 1022, 792, 360, 1225, 622, 624,
	315, 1227, 1411, 786, 1224, 331, 1231, 832, 1268, 623,
	1226, 1232, 641, 1553, 641, 963, 1126, 1761, 1556, 436,
	777, 649, 1084, 1650, 1182, 1555, 1825, 1181, 621, 1600,
	250, 1438, 1437, 343, 275, 1082, 641, 275, 275, 275,
	275, 275, 776, 1245, 622, 394, 275, 1267, 51, 315,
	965, 263, 1842, 1295, 1244, 964, 966, 789, 1604, 1509,
	1321, 1322, 1323, 1324, 1326, 1510, 679, 1069, 1072, 1831,
	342, 1633, 598, 253, 621, 321, 1275, 1273, 810, 823,
	824, 825, 817, 818, 819, 820, 822, 1287, 842, 312,
	653, 1289, 1068, 253, 258, 428, 1552, 1421, 315, 254,
	1080, 85, 1079, 1299, 1300, 1575, 1085, 624, 1554, 1389,
	1832, 1391, 1605, 1647, 258, 1304, 1433, 623, 598, 254,
	628, 1248, 255, 1256, 651, 1381, 1117, 1834, 85, 85,
	1710, 1631, 1402, 1648, 680, 652, 1345, 1350, 1456, 257,
	1259, 1315, 255, 1353, 1354, 1355, 1283, 1358, 988, 800,
	413, 1441, 412, 624, 85, 411, 85, 1257, 85, 257,
	410, 409, 85, 623, 1372, 1396, 1070, 408, 405, 341,
	1351, 85, 874, 769, 1401, 85, 1116, 331, 1379, 1785,
	1758, 85, 684, 1081, 1534, 85, 1390, 85, 1388, 1376,
	1083, 922, 1241, 1393, 1024, 331, 1135, 1404, 331, 938,
	1447, 1190, 1020, 1405, 331, 1424, 953, 954, 1403, 331,
	961, 1252, 331, 586, 275, 275, 1435, 1258, 583, 578,
	1439, 685, 1422, 569, 256, 1430, 1414, 1416, 1417, 85,
	566, 1440, 1474, 599, 791, 1446, 1668, 1444, 1445, 439,
	1818, 401, 325, 1030, 256, 673, 1470, 1471, 1472, 1670,
	933, 917, 1398, 1679, 1725, 595, 1459, 932, 1256, 686,
	1252, 599, 599, 970, 1281, 259, 1753, 641, 810, 599,
	670, 665, 1467, 1434, 917, 1259, 443, 1279, 3, 1745,
	930, 945, 249, 1481, 1463, 259, 1254, 291, 1486, 808,
	645, 591, 1257, 1840, 1841, 85, 85, 85, 1320, 1031,
	635, 599, 814, 85, 85, 440, 1255, 1256, 326, 85,
	1528, 85, 1515, 85, 85, 85, 85, 1418, 402, 260,
	1516, 85, 1409, 1545, 1259, 1529, 1365, 1550, 1551, 1000,
	999, 1217, 1164, 294, 295, 1254, 1161, 1483, 1484, 1160,
	334, 1257, 1513, 1533, 1277, 1488, 85, 85, 1282, 1111,
	1001, 1746, 1258, 1523, 1546, 1255, 1618, 1473, 85, 85,
	622, 1242, 85, 595, 1588, 1002, 1564, 867, 300, 1599,
	1585, 85, 85, 1582, 1581, 1583, 1570, 1519, 1582, 1581,
	1583, 1655, 1568, 251, 768, 406, 1624, 1780, 622, 622,
	621, 1586, 1307, 1706, 1688, 1607, 622, 1115, 1005, 872,
	85, 1258, 29, 1595, 1596, 1579, 599, 1601, 466, 595,
	1587, 1535, 331, 922, 1608, 1378, 1014, 1013, 621, 621,
	687, 674, 663, 489, 657, 1278, 621, 666, 622, 1612,
	1593, 1124, 1280, 543, 598, 491, 596, 1541, 492, 1542,
	597, 899, 331, 479, 275, 594, 354, 1249, 949, 1112,
	1630, 1303, 870, 465, 1598, 85, 471, 85, 621, 85,
	85, 470, 598, 598, 1544, 1099, 377, 462, 85, 624,
	598, 1547, 1602, 1260, 41, 391, 1642, 269, 270, 623,
	1199, 1664, 1665, 1565, 1025, 796, 1387, 85, 303, 1317,
	379, 1142, 1134, 1132, 1123, 1645, 424, 624, 624, 555,
	950, 1643, 598, 403, 1206, 624, 599, 623, 623, 969,
	85, 1669, 85, 448, 804, 623, 1795, 1680, 324, 323,
	1683, 85, 1010, 400, 1678, 650, 1543, 85, 993, 296,
	1719, 1724, 1671, 622, 1582, 1581, 1583, 624, 1692, 1384,
	1765, 58, 22, 331, 1172, 1173, 20, 623, 19, 922,
	18, 1699, 1178, 16, 15, 14, 21, 12, 1183, 1184,
	1186, 1188, 1189, 621, 1192, 1193, 1695, 1705, 85, 11,
	10, 9, 331, 28, 1204, 27, 26, 25, 1721, 2,
	1, 331, 1663, 599, 0, 1715, 0, 85, 85, 0,
	331, 85, 0, 1136, 0, 85, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 1733, 1712, 598, 0, 1741,
	1735, 1005, 641, 1737, 85, 1716, 1742, 1005, 907, 684,
	1734, 0, 0, 0, 452, 452, 1582, 1581, 1583, 0,
	0, 315, 0, 622, 557, 0, 1736, 1749, 1747, 1748,
	0, 85, 624, 85, 85, 789, 85, 789, 0, 275,
	331, 0, 623, 1243, 1752, 0, 1769, 1771, 685, 0,
	599, 0, 1246, 621, 0, 85, 1775, 1763, 0, 1265,
	1774, 331, 0, 0, 0, 0, 1772, 814, 1739, 1776,
	1778, 1777, 1767, 1755, 0, 0, 0, 1773, 0, 85,
	0, 85, 0, 1582, 1581, 1583, 686, 0, 1802, 816,
	0, 0, 1798, 0, 0, 1800, 85, 598, 0, 0,
	622, 0, 0, 0, 1811, 1799, 1813, 85, 0, 1815,
	815, 0, 0, 1819, 1821, 595, 830, 0, 0, 1824,
	0, 0, 0, 1823, 276, 0, 0, 797, 799, 0,
	621, 1820, 624, 1835, 806, 1838, 1836, 1839, 0, 1783,
	0, 289, 623, 595, 595, 0, 851, 852, 853, 854,
	855, 595, 1844, 461, 0, 858, 1545, 0, 1538, 0,
	0, 0, 0, 821, 0, 0, 1536, 0, 0, 1540,
	0, 0, 0, 0, 598, 871, 278, 622, 0, 0,
	0, 283, 284, 595, 290, 0, 0, 1546, 1136, 1136,
	0, 0, 0, 0, 0, 0, 277, 279, 0, 810,
	0, 0, 0, 0, 0, 0, 1539, 621, 0, 624,
	0, 831, 0, 329, 0, 0, 329, 0, 340, 623,
	0, 0, 329, 0, 340, 0, 331, 331, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 1136,
	1136, 1136, 0, 0, 908, 0, 281, 282, 0, 0,
	0, 598, 1419, 0, 922, 0, 789, 0, 0, 0,
	1429, 0, 285, 0, 0, 0, 0, 0, 832, 331,
	1541, 0, 1542, 331, 0, 0, 0, 0, 0, 1265,
	0, 0, 0, 1449, 0, 1265, 624, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 623, 1544, 0, 0,
	0, 0, 0, 0, 1547, 0, 467, 39, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 826,
	823, 824, 825, 817, 818, 819, 820, 822, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 286, 308, 1543,
	287, 316, 0, 0, 0, 288, 0, 0, 39, 0,
	0, 0, 0, 0, 0, 1136, 1136, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 1531, 1532, 922, 0, 0, 0, 0,
	0, 810, 810, 0, 0, 0, 0, 1558, 0, 1559,
	0, 331, 1561, 1562, 1563, 0, 0, 0, 0, 331,
	0, 0, 0, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
	1136, 1136, 1578, 1136, 810, 922, 0, 1578, 0, 0,
	0, 0, 0, 0, 329, 0, 331, 331, 0, 0,
	331, 0, 0, 0, 0, 595, 0, 0, 0, 810,
	1265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 573, 573, 1625, 0,
	0, 0, 0, 452, 0, 0, 0, 0, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	329, 1073, 0, 1075, 1076, 1077, 1078, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 922, 0, 1644, 0, 275, 1646, 0,
	0, 0, 0, 0, 0, 0, 331, 0, 1121, 1122,
	0, 1133, 0, 1143, 1145, 1150, 1153, 1154, 1155, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	24, 0, 557, 1578, 0, 0, 0, 0, 331, 0,
	1690, 43, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 308, 810, 0, 0, 0, 0,
	0, 1197, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 789, 0, 30, 0,
	0, 46, 1223, 1285, 1286, 33, 31, 0, 816, 0,
	0, 0, 0, 0, 0, 1726, 1727, 0, 0, 1731,
	0, 35, 0, 1732, 0, 1578, 0, 0, 275, 815,
	0, 0, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 0, 0, 0, 0, 0, 0, 806,
	329, 0, 0, 340, 1342, 1343, 1344, 0, 0, 951,
	0, 0, 0, 1136, 340, 0, 0, 340, 0, 1762,
	0, 810, 331, 0, 275, 308, 0, 0, 308, 308,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 1270,
	1271, 0, 1578, 1690, 0, 1276, 0, 0, 0, 32,
	0, 857, 0, 0, 0, 861, 0, 0, 0, 0,
	48, 0, 0, 36, 0, 47, 0, 331, 1290, 810,
	37, 0, 0, 57, 0, 0, 0, 1298, 40, 42,
	831, 814, 0, 0, 1812, 1306, 0, 44, 0, 1311,
	0, 0, 1136, 0, 59, 810, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 49, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 1150, 1150, 1150,
	0, 60, 0, 0, 815, 0, 0, 0, 55, 0,
	0, 0, 0, 0, 56, 0, 0, 832, 0, 1373,
	1454, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	1380, 0, 0, 54, 0, 0, 0, 0, 0, 39,
	0, 39, 0, 0, 0, 0, 0, 452, 0, 0,
	0, 0, 0, 0, 39, 0, 452, 821, 39, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 0, 1511, 0,
	0, 0, 817, 818, 819, 820, 822, 329, 842, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 1453, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1223, 814, 0,
	833, 834, 835, 843, 844, 845, 1475, 0, 0, 0,
	0, 0, 832, 836, 0, 0, 1485, 0, 0, 1487,
	816, 0, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 815, 0, 0, 0, 0, 0, 830, 0, 0,
	0, 1517, 1518, 0, 0, 0, 0, 0, 0, 0,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1171, 0,
	0, 0, 0, 826, 823, 824, 825, 817, 818, 819,
	820, 822, 0, 842, 821, 0, 0, 0, 452, 0,
	0, 0, 39, 0, 0, 0, 0, 1202, 0, 0,
	0, 840, 848, 0, 0, 0, 1202, 0, 1320, 0,
	1337, 1338, 1339, 0, 0, 329, 846, 0, 0, 0,
	1040, 0, 0, 1609, 1592, 0, 838, 0, 0, 0,
	0, 0, 831, 1652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1611, 0, 0,
	0, 1614, 1615, 0, 837, 1090, 1617, 1334, 0, 0,
	1619, 0, 0, 0, 0, 0, 0, 1623, 0, 0,
	0, 1626, 0, 0, 0, 1240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	841, 0, 0, 1635, 1325, 0, 814, 0, 833, 834,
	835, 843, 844, 845, 0, 0, 0, 0, 1709, 0,
	0, 836, 0, 0, 0, 0, 0, 0, 816, 0,
	847, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1662, 0, 0, 815,
	316, 0, 1335, 839, 0, 830, 827, 828, 829, 0,
	826, 823, 824, 825, 817, 818, 819, 820, 822, 0,
	842, 1681, 1167, 0, 0, 0, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 0, 0, 0, 0, 0,
	1694, 0, 0, 0, 0, 0, 0, 1754, 0, 0,
	1701, 1702, 821, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 840,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 1714,
	0, 0, 0, 0, 846, 0, 0, 0, 0, 39,
	0, 0, 1718, 0, 838, 0, 0, 0, 0, 1266,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 329, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 1331, 1332, 1333, 1090,
	1330, 1327, 1328, 1329, 1321, 1322, 1323, 1324, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 329, 0, 0, 832, 329, 814,
	0, 833, 834, 835, 843, 844, 845, 0, 841, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 816, 0, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 815, 0, 0, 0, 0, 1797, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 839, 1810, 1810, 827, 828, 829, 0, 826, 823,
	824, 825, 817, 818, 819, 820, 822, 0, 842, 0,
	0, 0, 0, 0, 0, 1638, 0, 0, 1810, 0,
	0, 0, 0, 0, 0, 821, 814, 0, 833, 834,
	835, 843, 844, 845, 0, 1040, 0, 0, 0, 0,
	0, 836, 840, 848, 0, 0, 0, 0, 816, 0,
	847, 1810, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 1560, 838, 0, 815,
	0, 0, 0, 831, 1569, 830, 0, 1040, 0, 0,
	0, 1040, 0, 0, 0, 1320, 0, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 329, 0, 0, 329, 1320, 0, 1337, 1338,
	1339, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	832, 1460, 0, 0, 1334, 0, 0, 0, 0, 840,
	848, 841, 0, 0, 814, 0, 833, 834, 835, 843,
	844, 845, 0, 0, 846, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 838, 1334, 816, 0, 847, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 837, 830, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 1325, 1340, 0, 0, 0, 0, 1361, 0,
	0, 1653, 0, 0, 0, 0, 39, 832, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	821, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 840, 848, 0,
	1335, 0, 0, 1687, 1040, 1040, 0, 0, 1040, 0,
	0, 0, 846, 0, 329, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 1336, 0, 831, 0,
	0, 839, 0, 0, 827, 828, 829, 0, 826, 823,
	824, 825, 817, 818, 819, 820, 822, 0, 842, 0,
	837, 0, 0, 0, 0, 1360, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 1331, 1332, 1333, 841, 1330, 1327, 1328,
	1329, 1321, 1322, 1323, 1324, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 1332, 1333, 0, 1330, 1327,
	1328, 1329, 1321, 1322, 1323, 1324, 1326, 1764, 1672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 827, 828, 829, 0, 826, 823, 824, 825,
	817, 818, 819, 820, 822, 0, 842, 1040, 0, 0,
	0, 0, 0, 1359, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 688, 89, 689, 690, 691, 692, 196, 693,
	694, 695, 696, 90, 91, 197, 198, 199, 200, 92,
	201, 202, 697, 93, 203, 204, 94, 698, 699, 205,
	206, 207, 700, 208, 701, 362, 702, 95, 96, 97,
	857, 98, 703, 99, 100, 704, 363, 101, 102, 705,
	706, 707, 708, 709, 710, 103, 104, 105, 106, 209,
	107, 210, 211, 711, 108, 712, 109, 713, 714, 715,
	110, 111, 716, 112, 717, 0, 718, 212, 113, 114,
	213, 719, 720, 721, 115, 116, 214, 0, 117, 722,
	118, 723, 724, 364, 725, 119, 215, 726, 216, 727,
	120, 121, 217, 218, 366, 728, 124, 729, 122, 730,
	365, 123, 219, 220, 221, 222, 731, 223, 732, 367,
	125, 368, 126, 127, 733, 734, 224, 369, 128, 370,
	735, 129, 736, 737, 130, 0, 131, 132, 133, 134,
	135, 371, 136, 137, 140, 138, 738, 139, 739, 225,
	141, 226, 142, 143, 740, 741, 742, 743, 744, 144,
	227, 372, 145, 373, 228, 146, 147, 148, 745, 229,
	149, 230, 150, 746, 151, 152, 153, 231, 154, 155,
	747, 157, 158, 156, 159, 748, 160, 374, 161, 162,
	232, 163, 0, 164, 165, 166, 749, 233, 167, 168,
	750, 169, 170, 375, 171, 234, 235, 172, 751, 173,
	174, 176, 236, 175, 237, 752, 177, 753, 178, 179,
	754, 238, 239, 240, 755, 756, 180, 241, 242, 757,
	181, 182, 183, 184, 758, 759, 185, 186, 187, 760,
	761, 188, 189, 190, 243, 244, 762, 191, 763, 764,
	765, 766, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 87, 88, 688, 89, 689, 690, 691,
	692, 196, 693, 694, 695, 696, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 697, 93, 203, 204, 94,
	698, 699, 205, 206, 207, 700, 208, 701, 362, 702,
	95, 96, 97, 0, 98, 703, 99, 100, 704, 363,
	101, 102, 705, 706, 707, 708, 709, 710, 103, 104,
	105, 106, 209, 107, 210, 211, 711, 108, 712, 109,
	713, 714, 715, 110, 111, 716, 112, 717, 0, 718,
	212, 113, 114, 213, 719, 720, 721, 115, 116, 214,
	0, 117, 722, 118, 723, 724, 364, 725, 119, 215,
	726, 216, 727, 120, 121, 217, 218, 366, 728, 124,
	729, 122, 730, 365, 123, 219, 220, 221, 222, 731,
	223, 732, 367, 125, 368, 126, 127, 733, 734, 224,
	369, 128, 370, 735, 129, 736, 737, 130, 0, 131,
	132, 133, 134, 135, 371, 136, 137, 140, 138, 738,
	139, 739, 225, 141, 226, 142, 143, 740, 741, 742,
	743, 744, 144, 227, 372, 145, 373, 228, 146, 147,
	148, 745, 229, 149, 230, 150, 746, 151, 152, 153,
	231, 154, 155, 747, 157, 158, 156, 159, 748, 160,
	374, 161, 162, 232, 163, 0, 164, 165, 166, 749,
	233, 167, 168, 750, 169, 170, 375, 171, 234, 235,
	172, 751, 173, 174, 176, 236, 175, 237, 752, 177,
	753, 178, 179, 754, 238, 239, 240, 755, 756, 180,
	241, 242, 757, 181, 182, 183, 184, 758, 759, 185,
	186, 187, 760, 761, 188, 189, 190, 243, 244, 762,
	191, 763, 764, 765, 766, 192, 193, 194, 195, 683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 87, 88, 688, 89, 689, 690,
	691, 692, 196, 693, 694, 695, 696, 90, 91, 197,
	198, 199, 200, 92, 201, 202, 697, 93, 203, 204,
	94, 698, 699, 205, 206, 207, 700, 208, 701, 362,
	702, 95, 96, 97, 0, 98, 703, 99, 100, 704,
	363, 101, 102, 705, 706, 707, 708, 709, 710, 103,
	104, 105, 106, 209, 107, 210, 211, 711, 108, 712,
	109, 713, 714, 715, 110, 111, 716, 112, 717, 0,
	718, 212, 113, 114, 213, 719, 720, 721, 115, 116,
	214, 0, 117, 722, 118, 723, 724, 364, 725, 119,
	215, 726, 216, 727, 120, 121, 217, 218, 366, 728,
	124, 729, 122, 730, 365, 123, 219, 220, 221, 222,
	731, 223, 732, 367, 125, 368, 126, 127, 733, 734,
	224, 369, 128, 370, 735, 129, 736, 737, 130, 0,
	131, 132, 133, 134, 135, 371, 136, 137, 140, 138,
	738, 139, 739, 225, 141, 226, 142, 143, 740, 741,
	742, 743, 744, 144, 227, 372, 145, 373, 228, 146,
	147, 148, 745, 229, 149, 230, 150, 746, 151, 152,
	153, 231, 154, 155, 747, 157, 158, 156, 159, 748,
	160, 374, 161, 162, 232, 163, 0, 164, 165, 166,
	749, 233, 167, 168, 750, 169, 170, 375, 171, 234,
	235, 172, 751, 173, 174, 176, 236, 175, 237, 752,
	177, 753, 178, 179, 754, 238, 239, 240, 755, 756,
	180, 241, 242, 757, 181, 182, 183, 184, 758, 759,
	185, 186, 187, 760, 761, 188, 189, 190, 243, 244,
	762, 191, 763, 764, 765, 766, 192, 193, 194, 195,
	487, 476, 477, 474, 475, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 1107, 89, 0,
	0, 0, 0, 503, 469, 0, 0, 0, 90, 91,
	197, 517, 199, 518, 92, 519, 520, 0, 93, 203,
	204, 94, 484, 502, 521, 522, 207, 0, 513, 0,
	495, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 363, 101, 102, 0, 496, 498, 0, 497, 499,
	103, 104, 105, 106, 523, 107, 524, 525, 0, 108,
	0, 109, 0, 1108, 0, 516, 111, 0, 112, 0,
	0, 0, 468, 113, 114, 504, 482, 0, 0, 115,
	116, 526, 0, 117, 0, 118, 0, 0, 364, 0,
	119, 514, 0, 216, 0, 120, 121, 510, 512, 366,
	0, 124, 0, 122, 0, 365, 123, 527, 528, 529,
	530, 0, 494, 0, 367, 125, 368, 126, 127, 0,
	0, 515, 369, 128, 370, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 371, 136, 137, 140,
	138, 458, 139, 483, 511, 141, 531, 142, 143, 0,
	0, 0, 0, 0, 144, 227, 372, 145, 373, 505,
	146, 147, 148, 0, 506, 149, 230, 150, 0, 151,
	152, 153, 532, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 374, 161, 162, 472, 163, 0, 164, 165,
	166, 0, 233, 167, 168, 500, 169, 170, 375, 171,
	533, 235, 172, 0, 173, 174, 176, 534, 175, 507,
	0, 177, 0, 178, 179, 0, 238, 535, 536, 0,
	0, 180, 508, 509, 481, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 501, 0, 188, 189, 190, 243,
	537, 1106, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 455, 456, 1109, 0, 0, 0, 457, 0,
	0, 464, 1104, 487, 476, 477, 474, 475, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 503, 469, 0, 0,
	0, 90, 91, 197, 517, 199, 518, 92, 519, 520,
	0, 93, 203, 204, 94, 484, 502, 521, 522, 207,
	0, 513, 0, 495, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 363, 101, 102, 0, 496, 498,
	0, 497, 499, 103, 104, 105, 106, 523, 107, 524,
	525, 558, 108, 0, 109, 0, 0, 0, 516, 111,
	0, 112, 0, 0, 0, 468, 113, 114, 504, 482,
	0, 0, 115, 116, 526, 0, 117, 0, 118, 0,
	0, 364, 0, 119, 514, 0, 216, 0, 120, 121,
	510, 512, 366, 0, 124, 0, 122, 0, 365, 123,
	527, 528, 529, 530, 0, 494, 0, 367, 125, 368,
	126, 127, 0, 0, 515, 369, 128, 370, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 371,
	136, 137, 140, 138, 458, 139, 483, 511, 141, 531,
	142, 143, 0, 0, 0, 0, 0, 144, 227, 372,
	145, 373, 505, 146, 147, 148, 0, 506, 149, 230,
	150, 0, 151, 152, 153, 532, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 374, 161, 162, 472, 163,
	0, 164, 165, 166, 57, 233, 167, 168, 500, 169,
	170, 375, 171, 533, 235, 172, 0, 173, 174, 176,
	534, 175, 507, 0, 177, 59, 178, 179, 0, 238,
	535, 536, 0, 0, 180, 508, 509, 481, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 501, 0, 188,
	189, 190, 361, 537, 0, 191, 0, 0, 0, 55,
	192, 193, 194, 195, 459, 56, 0, 487, 476, 477,
	474, 475, 463, 0, 0, 455, 456, 0, 0, 0,
	0, 457, 87, 88, 464, 89, 0, 0, 0, 0,
	503, 469, 0, 0, 0, 90, 91, 197, 517, 199,
	518, 92, 519, 520, 0, 93, 203, 204, 94, 484,
	502, 521, 522, 207, 0, 513, 0, 495, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 363, 101,
	102, 0, 496, 498, 0, 497, 499, 103, 104, 105,
	106, 523, 107, 524, 525, 0, 108, 0, 109, 0,
	0, 0, 516, 111, 0, 112, 0, 0, 0, 468,
	113, 114, 504, 482, 0, 0, 115, 116, 526, 0,
	117, 0, 118, 0, 0, 364, 0, 119, 514, 0,
	216, 0, 120, 121, 510, 512, 366, 0, 124, 0,
	122, 0, 365, 123, 527, 528, 529, 530, 0, 494,
	0, 367, 125, 368, 126, 127, 0, 0, 515, 369,
	128, 370, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 371, 136, 137, 140, 138, 458, 139,
	483, 511, 141, 531, 142, 143, 0, 0, 0, 0,
	0, 144, 227, 372, 145, 373, 505, 146, 147, 148,
	0, 506, 149, 230, 150, 0, 151, 152, 153, 532,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 374,
	161, 162, 472, 163, 0, 164, 165, 166, 57, 233,
	167, 168, 500, 169, 170, 375, 171, 533, 235, 172,
	0, 173, 174, 176, 534, 175, 507, 0, 177, 59,
	178, 179, 0, 238, 535, 536, 0, 0, 180, 508,
	509, 481, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 501, 0, 188, 189, 190, 361, 537, 0, 191,
	0, 0, 0, 55, 192, 193, 194, 195, 459, 56,
	0, 487, 476, 477, 474, 475, 463, 0, 0, 455,
	456, 0, 0, 0, 0, 457, 87, 88, 464, 89,
	0, 0, 0, 0, 503, 469, 0, 0, 0, 90,
	91, 197, 517, 199, 518, 92, 519, 520, 1146, 93,
	203, 204, 94, 484, 502, 521, 522, 207, 0, 513,
	0, 495, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 363, 101, 102, 0, 496, 498, 0, 497,
	499, 103, 104, 105, 106, 523, 107, 524, 525, 0,
	108, 0, 109, 0, 0, 0, 516, 111, 0, 112,
	0, 0, 0, 468, 113, 114, 504, 482, 0, 0,
	115, 116, 526, 0, 117, 0, 118, 0, 1151, 364,
	0, 119, 514, 0, 216, 0, 120, 121, 510, 512,
	366, 0, 124, 0, 122, 0, 365, 123, 527, 528,
	529, 530, 0, 494, 0, 367, 125, 368, 126, 127,
	0, 1147, 515, 369, 128, 370, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 371, 136, 137,
	140, 138, 458, 139, 483, 511, 141, 531, 142, 143,
	0, 0, 0, 0, 0, 144, 227, 372, 145, 373,
	505, 146, 147, 148, 0, 506, 149, 230, 150, 0,
	151, 152, 153, 532, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 374, 161, 162, 472, 163, 0, 164,
	165, 166, 0, 233, 167, 168, 500, 169, 170, 375,
	171, 533, 235, 172, 0, 173, 174, 176, 534, 175,
	507, 0, 177, 0, 178, 179, 0, 238, 535, 536,
	0, 1148, 180, 508, 509, 481, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 501, 0, 188, 189, 190,
	243, 537, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 459, 0, 0, 487, 476, 477, 474, 475,
	463, 0, 0, 455, 456, 0, 0, 0, 0, 457,
	87, 88, 464, 89, 0, 0, 0, 0, 503, 469,
	0, 0, 0, 90, 91, 197, 517, 199, 518, 92,
	519, 520, 0, 93, 203, 204, 94, 484, 502, 521,
	522, 207, 0, 513, 0, 495, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 363, 101, 102, 0,
	496, 498, 0, 497, 499, 103, 104, 105, 106, 523,
	107, 524, 525, 0, 108, 0, 109, 0, 0, 0,
	516, 111, 0, 112, 0, 0, 0, 468, 113, 114,
	504, 482, 0, 0, 115, 116, 526, 0, 117, 0,
	118, 0, 0, 364, 0, 119, 514, 0, 216, 0,
	120, 121, 510, 512, 366, 0, 124, 0, 122, 0,
	365, 123, 527, 528, 529, 530, 0, 494, 0, 367,
	125, 368, 126, 127, 0, 0, 515, 369, 128, 370,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 371, 136, 137, 140, 138, 458, 139, 483, 511,
	141, 531, 142, 143, 0, 0, 0, 0, 0, 144,
	227, 372, 145, 373, 505, 146, 147, 148, 0, 506,
	149, 230, 150, 0, 151, 152, 153, 532, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 374, 161, 162,
	472, 163, 0, 164, 165, 166, 0, 233, 167, 168,
	500, 169, 170, 375, 171, 533, 235, 172, 0, 173,
	174, 176, 534, 175, 507, 0, 177, 0, 178, 179,
	0, 238, 535, 536, 0, 0, 180, 508, 509, 481,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 501,
	0, 188, 189, 190, 243, 537, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 457, 0, 0, 464, 1514, 487, 476,
	477, 474, 475, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 503, 469, 0, 0, 0, 90, 91, 197, 517,
	199, 518, 92, 519, 520, 0, 93, 203, 204, 94,
	484, 502, 521, 522, 207, 0, 513, 0, 495, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 363,
	101, 102, 0, 496, 498, 0, 497, 499, 103, 104,
	105, 106, 523, 107, 524, 525, 0, 108, 0, 109,
	0, 0, 0, 516, 111, 0, 112, 0, 0, 0,
	468, 113, 114, 504, 482, 0, 0, 115, 116, 526,
	0, 117, 0, 118, 0, 0, 364, 0, 119, 514,
	0, 216, 0, 120, 121, 510, 512, 366, 0, 124,
	0, 122, 0, 365, 123, 527, 528, 529, 530, 0,
	494, 0, 367, 125, 368, 126, 127, 0, 0, 515,
	369, 128, 370, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 371, 136, 137, 140, 138, 458,
	139, 483, 511, 141, 531, 142, 143, 0, 0, 0,
	0, 0, 144, 227, 372, 145, 373, 505, 146, 147,
	148, 0, 506, 149, 230, 150, 0, 151, 152, 153,
	532, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	374, 161, 162, 472, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 500, 169, 170, 375, 171, 533, 235,
	172, 0, 173, 174, 176, 534, 175, 507, 0, 177,
	0, 178, 179, 0, 238, 535, 536, 0, 0, 180,
	508, 509, 481, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 501, 0, 188, 189, 190, 243, 537, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 457, 0, 0, 464,
	1464, 487, 476, 477, 474, 475, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 503, 469, 0, 0, 0, 90,
	91, 197, 517, 199, 518, 92, 519, 520, 0, 93,
	203, 204, 94, 484, 502, 521, 522, 207, 0, 513,
	0, 495, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 363, 101, 102, 0, 496, 498, 0, 497,
	499, 103, 104, 105, 106, 523, 107, 524, 525, 0,
	108, 0, 109, 0, 0, 0, 516, 111, 0, 112,
	0, 0, 0, 468, 113, 114, 504, 482, 0, 0,
	115, 116, 526, 0, 117, 0, 118, 0, 0, 364,
	0, 119, 514, 0, 216, 0, 120, 121, 510, 512,
	366, 0, 124, 0, 122, 0, 365, 123, 527, 528,
	529, 530, 0, 494, 0, 367, 125, 368, 126, 127,
	0, 0, 515, 369, 128, 370, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 371, 136, 137,
	140, 138, 458, 139, 483, 511, 141, 531, 142, 143,
	0, 0, 0, 0, 0, 144, 227, 372, 145, 373,
	505, 146, 147, 148, 0, 506, 149, 230, 150, 0,
	151, 152, 153, 532, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 374, 161, 162, 472, 163, 0, 164,
	165, 166, 0, 233, 167, 168, 500, 169, 170, 375,
	171, 533, 235, 172, 0, 173, 174, 176, 534, 175,
	507, 0, 177, 0, 178, 179, 0, 238, 535, 536,
	0, 0, 180, 508, 509, 481, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 501, 0, 188, 189, 190,
	243, 537, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 457,
	0, 0, 464, 1103, 487, 476, 477, 474, 475, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 503, 469, 0,
	0, 0, 90, 91, 197, 517, 199, 518, 92, 519,
	520, 0, 93, 203, 204, 94, 484, 502, 521, 522,
	207, 0, 513, 0, 495, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 363, 101, 102, 0, 496,
	498, 0, 497, 499, 103, 104, 105, 106, 523, 107,
	524, 525, 0, 108, 0, 109, 0, 0, 0, 516,
	111, 0, 112, 0, 0, 0, 468, 113, 114, 504,
	482, 0, 0, 115, 116, 526, 0, 117, 0, 118,
	0, 0, 364, 0, 119, 514, 0, 216, 0, 120,
	121, 510, 512, 366, 0, 124, 0, 122, 0, 365,
	123, 527, 528, 529, 530, 0, 494, 0, 367, 125,
	368, 126, 127, 0, 0, 515, 369, 128, 370, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	371, 136, 137, 140, 138, 458, 139, 483, 511, 141,
	531, 142, 143, 0, 0, 0, 0, 0, 144, 227,
	372, 145, 373, 505, 146, 147, 148, 0, 506, 149,
	230, 150, 0, 151, 152, 153, 532, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 374, 161, 162, 472,
	163, 0, 164, 165, 166, 0, 233, 167, 168, 500,
	169, 170, 375, 171, 533, 235, 172, 0, 173, 174,
	176, 534, 175, 507, 0, 177, 0, 178, 179, 0,
	238, 535, 536, 0, 0, 180, 508, 509, 481, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 501, 0,
	188, 189, 190, 243, 537, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 457, 863, 1100, 464, 487, 476, 477, 474,
	475, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 503,
	469, 0, 0, 0, 90, 91, 197, 517, 199, 518,
	92, 519, 520, 0, 93, 203, 204, 94, 484, 502,
	521, 522, 207, 0, 513, 0, 495, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 363, 101, 102,
	0, 496, 498, 0, 497, 499, 103, 104, 105, 106,
	523, 107, 524, 525, 0, 108, 0, 109, 0, 0,
	0, 516, 111, 0, 112, 0, 0, 0, 468, 113,
	114, 504, 482, 0, 0, 115, 116, 526, 0, 117,
	0, 118, 0, 0, 364, 0, 119, 514, 0, 216,
	0, 120, 121, 510, 512, 366, 0, 124, 0, 122,
	0, 365, 123, 527, 528, 529, 530, 0, 494, 0,
	367, 125, 368, 126, 127, 0, 0, 515, 369, 128,
	370, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 371, 136, 137, 140, 138, 458, 139, 483,
	511, 141, 531, 142, 143, 0, 0, 0, 0, 0,
	144, 227, 372, 145, 373, 505, 146, 147, 148, 0,
	506, 149, 230, 150, 0, 151, 152, 153, 532, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 374, 161,
	162, 472, 163, 0, 164, 165, 166, 0, 233, 167,
	168, 500, 169, 170, 375, 171, 533, 235, 172, 0,
	173, 174, 176, 534, 175, 507, 0, 177, 0, 178,
	179, 0, 238, 535, 536, 0, 0, 180, 508, 509,
	481, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	501, 0, 188, 189, 190, 243, 537, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 459, 0, 0,
	487, 476, 477, 474, 475, 463, 0, 0, 455, 456,
	453, 0, 0, 0, 457, 87, 88, 464, 89, 0,
	0, 0, 0, 503, 469, 0, 0, 0, 90, 91,
	197, 517, 199, 518, 92, 519, 520, 0, 93, 203,
	204, 94, 484, 502, 521, 522, 207, 0, 513, 0,
	495, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 363, 101, 102, 0, 496, 498, 0, 497, 499,
	103, 104, 105, 106, 523, 107, 524, 525, 0, 108,
	0, 109, 0, 0, 0, 516, 111, 0, 112, 0,
	0, 0, 468, 113, 114, 504, 482, 0, 0, 115,
	116, 526, 0, 117, 0, 118, 0, 0, 364, 0,
	119, 514, 0, 216, 0, 120, 121, 510, 512, 366,
	0, 124, 0, 122, 0, 365, 123, 527, 528, 529,
	530, 0, 494, 0, 367, 125, 368, 126, 127, 0,
	0, 515, 369, 128, 370, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 371, 136, 137, 140,
	138, 458, 139, 483, 511, 141, 531, 142, 143, 0,
	0, 0, 0, 0, 144, 227, 372, 145, 373, 505,
	146, 147, 148, 0, 506, 149, 230, 150, 0, 151,
	152, 153, 532, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 374, 161, 162, 472, 163, 0, 164, 165,
	166, 0, 233, 167, 168, 500, 169, 170, 375, 171,
	533, 235, 172, 0, 173, 174, 176, 534, 175, 507,
	0, 177, 0, 178, 179, 0, 238, 535, 536, 0,
	0, 180, 508, 509, 481, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 501, 0, 188, 189, 190, 243,
	537, 1469, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 459, 0, 0, 487, 476, 477, 474, 475, 463,
	0, 0, 455, 456, 0, 0, 0, 0, 457, 87,
	88, 464, 89, 0, 0, 0, 0, 503, 469, 0,
	0, 0, 90, 91, 197, 517, 199, 518, 92, 519,
	520, 0, 93, 203, 204, 94, 484, 502, 521, 522,
	207, 0, 513, 0, 495, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 363, 101, 102, 0, 496,
	498, 0, 497, 499, 103, 104, 105, 106, 523, 107,
	524, 525, 558, 108, 0, 109, 0, 0, 0, 516,
	111, 0, 112, 0, 0, 0, 468, 113, 114, 504,
	482, 0, 0, 115, 116, 526, 0, 117, 0, 118,
	0, 0, 364, 0, 119, 514, 0, 216, 0, 120,
	121, 510, 512, 366, 0, 124, 0, 122, 0, 365,
	123, 527, 528, 529, 530, 0, 494, 0, 367, 125,
	368, 126, 127, 0, 0, 515, 369, 128, 370, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	371, 136, 137, 140, 138, 458, 139, 483, 511, 141,
	531, 142, 143, 0, 0, 0, 0, 0, 144, 227,
	372, 145, 373, 505, 146, 147, 148, 0, 506, 149,
	230, 150, 0, 151, 152, 153, 532, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 374, 161, 162, 472,
	163, 0, 164, 165, 166, 0, 233, 167, 168, 500,
	169, 170, 375, 171, 533, 235, 172, 0, 173, 174,
	176, 534, 175, 507, 0, 177, 0, 178, 179, 0,
	238, 535, 536, 0, 0, 180, 508, 509, 481, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 501, 0,
	188, 189, 190, 243, 537, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 459, 0, 0, 487, 476,
	477, 474, 475, 463, 0, 0, 455, 456, 0, 0,
	0, 0, 457, 87, 88, 464, 89, 0, 0, 0,
	0, 503, 469, 0, 0, 0, 90, 91, 197, 517,
	199, 518, 92, 519, 520, 0, 93, 203, 204, 94,
	484, 502, 521, 522, 207, 0, 513, 0, 495, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 363,
	101, 102, 0, 496, 498, 0, 497, 499, 103, 104,
	105, 106, 523, 107, 524, 525, 0, 108, 0, 109,
	0, 0, 0, 516, 111, 0, 112, 0, 0, 0,
	468, 113, 114, 504, 482, 0, 0, 115, 116, 526,
	0, 117, 0, 118, 0, 1151, 364, 0, 119, 514,
	0, 216, 0, 120, 121, 510, 512, 366, 0, 124,
	0, 122, 0, 365, 123, 527, 528, 529, 530, 0,
	494, 0, 367, 125, 368, 126, 127, 0, 0, 515,
	369, 128, 370, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 371, 136, 137, 140, 138, 458,
	139, 483, 511, 141, 531, 142, 143, 0, 0, 0,
	0, 0, 144, 227, 372, 145, 373, 505, 146, 147,
	148, 0, 506, 149, 230, 150, 0, 151, 152, 153,
	532, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	374, 161, 162, 472, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 500, 169, 170, 375, 171, 533, 235,
	172, 0, 173, 174, 176, 534, 175, 507, 0, 177,
	0, 178, 179, 0, 238, 535, 536, 0, 0, 180,
	508, 509, 481, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 501, 0, 188, 189, 190, 243, 537, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 457, 0, 0, 464,
	487, 476, 477, 474, 475, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 798, 89, 0,
	0, 0, 0, 503, 469, 0, 0, 0, 90, 91,
	197, 517, 199, 518, 92, 519, 520, 0, 93, 203,
	204, 94, 484, 502, 521, 522, 207, 0, 513, 0,
	495, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 363, 101, 102, 0, 496, 498, 0, 497, 499,
	103, 104, 105, 106, 523, 107, 524, 525, 0, 108,
	0, 109, 0, 0, 0, 516, 111, 0, 112, 0,
	0, 0, 468, 113, 114, 504, 482, 0, 0, 115,
	116, 526, 0, 117, 0, 118, 0, 0, 364, 0,
	119, 514, 0, 216, 0, 120, 121, 510, 512, 366,
	0, 124, 0, 122, 0, 365, 123, 527, 528, 529,
	530, 0, 494, 0, 367, 125, 368, 126, 127, 0,
	0, 515, 369, 128, 370, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 371, 136, 137, 140,
	138, 458, 139, 483, 511, 141, 531, 142, 143, 0,
	0, 0, 0, 0, 144, 227, 372, 145, 373, 505,
	146, 147, 148, 0, 506, 149, 230, 150, 0, 151,
	152, 153, 532, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 374, 161, 162, 472, 163, 0, 164, 165,
	166, 0, 233, 167, 168, 500, 169, 170, 375, 171,
	533, 235, 172, 0, 173, 174, 176, 534, 175, 507,
	0, 177, 0, 178, 179, 0, 238, 535, 536, 0,
	0, 180, 508, 509, 481, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 501, 0, 188, 189, 190, 243,
	537, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 459, 0, 0, 487, 476, 477, 474, 475, 463,
	0, 0, 455, 456, 0, 0, 0, 0, 457, 87,
	88, 464, 89, 0, 0, 0, 0, 503, 469, 0,
	0, 0, 90, 91, 197, 517, 199, 518, 92, 519,
	520, 0, 93, 203, 204, 94, 484, 502, 521, 522,
	207, 0, 513, 0, 495, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 363, 101, 1809, 0, 496,
	498, 0, 497, 499, 103, 104, 105, 106, 523, 107,
	524, 525, 0, 108, 0, 109, 0, 0, 0, 516,
	111, 0, 112, 0, 0, 0, 468, 113, 114, 504,
	482, 0, 0, 115, 116, 526, 0, 117, 0, 118,
	0, 0, 364, 0, 119, 514, 0, 216, 0, 120,
	121, 510, 512, 366, 0, 124, 0, 122, 0, 365,
	123, 527, 528, 529, 530, 0, 494, 0, 367, 125,
	368, 126, 127, 0, 0, 515, 369, 128, 370, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	371, 136, 137, 140, 138, 458, 139, 483, 511, 141,
	531, 142, 143, 0, 0, 0, 0, 0, 144, 227,
	372, 145, 373, 505, 146, 147, 148, 0, 506, 149,
	230, 150, 0, 151, 152, 153, 532, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 374, 161, 162, 472,
	163, 0, 164, 165, 166, 0, 233, 167, 168, 500,
	169, 170, 375, 171, 533, 235, 172, 0, 173, 174,
	176, 534, 175, 507, 0, 177, 0, 178, 179, 0,
	238, 535, 536, 0, 0, 180, 508, 509, 481, 181,
	182, 1808, 184, 0, 0, 185, 186, 187, 501, 0,
	188, 189, 190, 243, 537, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 459, 0, 0, 487, 476,
	477, 474, 475, 463, 0, 0, 455, 456, 0, 0,
	0, 0, 457, 87, 88, 464, 89, 0, 0, 0,
	0, 503, 469, 0, 0, 0, 90, 91, 1807, 517,
	199, 518, 92, 519, 520, 0, 93, 203, 204, 94,
	484, 502, 521, 522, 207, 0, 513, 0, 495, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 363,
	101, 1809, 0, 496, 498, 0, 497, 499, 103, 104,
	105, 106, 523, 107, 524, 525, 0, 108, 0, 109,
	0, 0, 0, 516, 111, 0, 112, 0, 0, 0,
	468, 113, 114, 504, 482, 0, 0, 115, 116, 526,
	0, 117, 0, 118, 0, 0, 364, 0, 119, 514,
	0, 216, 0, 120, 121, 510, 512, 366, 0, 124,
	0, 122, 0, 365, 123, 527, 528, 529, 530, 0,
	494, 0, 367, 125, 368, 126, 127, 0, 0, 515,
	369, 128, 370, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 371, 136, 137, 140, 138, 458,
	139, 483, 511, 141, 531, 142, 143, 0, 0, 0,
	0, 0, 144, 227, 372, 145, 373, 505, 146, 147,
	148, 0, 506, 149, 230, 150, 0, 151, 152, 153,
	532, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	374, 161, 162, 472, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 500, 169, 170, 375, 171, 533, 235,
	172, 0, 173, 174, 176, 534, 175, 507, 0, 177,
	0, 178, 179, 0, 238, 535, 536, 0, 0, 180,
	508, 509, 481, 181, 182, 1808, 184, 0, 0, 185,
	186, 187, 501, 0, 188, 189, 190, 243, 537, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 459,
	0, 0, 487, 476, 477, 474, 475, 463, 0, 0,
	455, 456, 0, 0, 0, 0, 457, 87, 88, 464,
	89, 0, 0, 0, 0, 503, 469, 0, 0, 0,
	90, 91, 197, 517, 199, 518, 92, 519, 520, 0,
	93, 203, 204, 94, 484, 502, 521, 522, 207, 0,
	513, 0, 495, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 363, 101, 102, 0, 496, 498, 0,
	497, 499, 103, 104, 105, 106, 523, 107, 524, 525,
	0, 108, 0, 109, 0, 0, 0, 516, 111, 0,
	112, 0, 0, 0, 468, 113, 114, 504, 482, 0,
	0, 115, 116, 526, 0, 117, 0, 118, 0, 0,
	364, 0, 119, 514, 0, 216, 0, 120, 121, 510,
	512, 366, 0, 124, 0, 122, 0, 365, 123, 527,
	528, 529, 530, 0, 494, 0, 367, 125, 368, 126,
	127, 0, 0, 515, 369, 128, 370, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 371, 136,
	137, 140, 138, 458, 139, 483, 511, 141, 531, 142,
	143, 0, 0, 0, 0, 0, 144, 227, 372, 145,
	373, 505, 146, 147, 148, 0, 506, 149, 230, 150,
	0, 151, 152, 153, 532, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 374, 161, 162, 472, 163, 0,
	164, 165, 166, 0, 233, 167, 168, 500, 169, 170,
	375, 171, 533, 235, 172, 0, 173, 174, 176, 534,
	175, 507, 0, 177, 0, 178, 179, 0, 238, 535,
	536, 0, 0, 180, 508, 509, 481, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 501, 0, 188, 189,
	190, 243, 537, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 459, 0, 0, 487, 476, 477, 474,
	475, 463, 0, 0, 455, 456, 0, 0, 0, 0,
	457, 87, 88, 464, 89, 0, 0, 0, 0, 503,
	469, 0, 0, 0, 90, 91, 197, 517, 199, 518,
	92, 519, 520, 0, 93, 203, 204, 94, 484, 502,
	521, 522, 207, 0, 513, 0, 495, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 363, 101, 102,
	0, 496, 498, 0, 497, 499, 103, 104, 105, 106,
	523, 107, 524, 525, 0, 108, 0, 109, 0, 0,
	0, 516, 111, 0, 112, 0, 0, 0, 468, 113,
	114, 504, 482, 0, 0, 115, 116, 526, 0, 117,
	0, 118, 0, 0, 364, 0, 119, 514, 0, 216,
	0, 120, 121, 510, 512, 366, 0, 124, 0, 122,
	0, 365, 123, 527, 528, 529, 530, 0, 494, 0,
	367, 125, 368, 126, 127, 0, 0, 515, 369, 128,
	370, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 371, 136, 137, 140, 138, 0, 139, 483,
	511, 141, 531, 142, 143, 0, 0, 0, 0, 0,
	144, 227, 372, 145, 373, 505, 146, 147, 148, 0,
	506, 149, 230, 150, 0, 151, 152, 153, 532, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 374, 161,
	162, 1141, 163, 0, 164, 165, 166, 0, 233, 167,
	168, 500, 169, 170, 375, 171, 533, 235, 172, 0,
	173, 174, 176, 534, 175, 507, 0, 177, 0, 178,
	179, 0, 238, 535, 536, 0, 0, 180, 508, 509,
	481, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	501, 0, 188, 189, 190, 243, 537, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 487, 476, 477,
	474, 475, 463, 0, 0, 0, 0, 0, 1137, 1138,
	0, 0, 87, 88, 1139, 89, 0, 1140, 0, 0,
	503, 469, 0, 0, 0, 90, 91, 0, 517, 199,
	518, 92, 519, 520, 0, 93, 203, 204, 94, 484,
	502, 521, 522, 207, 0, 513, 0, 495, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 363, 101,
	1809, 0, 496, 498, 0, 497, 499, 103, 104, 105,
	106, 523, 107, 524, 525, 0, 108, 0, 109, 0,
	0, 0, 516, 111, 0, 112, 0, 0, 0, 468,
	113, 114, 504, 482, 0, 0, 115, 116, 526, 0,
	117, 0, 118, 0, 0, 364, 0, 119, 514, 0,
	216, 0, 120, 121, 510, 512, 0, 0, 124, 0,
	122, 0, 365, 123, 527, 528, 529, 530, 0, 494,
	0, 0, 125, 368, 126, 127, 0, 0, 515, 369,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 371, 136, 137, 140, 138, 458, 139,
	483, 511, 141, 531, 142, 143, 0, 0, 0, 0,
	0, 144, 227, 372, 145, 373, 505, 146, 147, 148,
	0, 506, 149, 230, 150, 0, 151, 152, 153, 532,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 374,
	161, 162, 472, 163, 0, 164, 165, 166, 0, 233,
	167, 168, 500, 169, 170, 0, 171, 533, 235, 172,
	0, 173, 174, 176, 534, 175, 507, 0, 177, 0,
	178, 179, 0, 238, 535, 536, 0, 0, 180, 508,
	509, 481, 181, 182, 1808, 184, 0, 0, 185, 186,
	187, 501, 0, 188, 189, 190, 243, 537, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 455,
	456, 0, 0, 87, 88, 457, 89, 0, 464, 0,
	0, 503, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 502, 205, 206, 207, 0, 513, 0, 495, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 363,
	101, 102, 0, 496, 498, 0, 497, 499, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 504, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 364, 0, 119, 514,
	0, 216, 0, 120, 121, 510, 512, 366, 0, 124,
	0, 122, 0, 365, 123, 219, 220, 221, 222, 0,
	223, 0, 367, 125, 368, 126, 127, 0, 0, 515,
	369, 128, 370, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 371, 136, 137, 140, 138, 0,
	139, 0, 511, 141, 226, 142, 143, 0, 0, 0,
	0, 0, 144, 227, 372, 145, 373, 505, 146, 147,
	148, 0, 506, 149, 230, 150, 0, 151, 152, 153,
	231, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	374, 161, 162, 232, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 500, 169, 170, 375, 171, 234, 235,
	172, 0, 173, 174, 176, 236, 175, 507, 0, 177,
	0, 178, 179, 0, 238, 239, 240, 0, 0, 180,
	508, 509, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 501, 0, 188, 189, 190, 243, 244, 0,
	191, 0, 357, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 196, 0, 0, 0, 1580,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 0,
	93, 203, 204, 94, 0, 0, 205, 206, 207, 0,
	208, 0, 362, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 363, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 209, 107, 210, 211,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 212, 113, 114, 213, 0, 0,
	0, 115, 116, 214, 0, 117, 0, 118, 0, 0,
	364, 0, 119, 215, 0, 216, 0, 120, 121, 217,
	218, 366, 0, 124, 0, 122, 0, 365, 123, 219,
	220, 221, 222, 0, 223, 0, 367, 125, 368, 126,
	127, 0, 0, 224, 369, 128, 370, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 371, 136,
	137, 140, 138, 0, 139, 0, 225, 141, 226, 142,
	143, 0, 0, 0, 0, 0, 144, 227, 372, 145,
	373, 228, 146, 147, 148, 0, 229, 149, 230, 150,
	0, 151, 152, 153, 231, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 374, 161, 162, 232, 163, 0,
	164, 165, 166, 57, 233, 167, 168, 0, 169, 170,
	375, 171, 234, 235, 172, 0, 173, 174, 176, 236,
	175, 237, 0, 177, 59, 178, 179, 0, 238, 239,
	240, 0, 0, 180, 241, 242, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 361, 244, 0, 191, 0, 0, 0, 55, 192,
	193, 194, 195, 0, 56, 0, 357, 668, 0, 669,
	664, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 54, 89, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 90, 91, 197, 198, 199, 200,
	92, 201, 202, 0, 93, 203, 204, 94, 0, 0,
	205, 206, 207, 0, 208, 0, 362, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 363, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	209, 107, 210, 211, 672, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 212, 113,
	114, 213, 661, 0, 0, 115, 116, 214, 0, 117,
	0, 118, 0, 0, 364, 0, 119, 215, 0, 216,
	0, 120, 121, 217, 218, 366, 0, 124, 0, 122,
	0, 365, 123, 219, 220, 221, 222, 0, 223, 0,
	367, 125, 368, 126, 127, 0, 0, 224, 369, 128,
	370, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 371, 136, 137, 140, 138, 0, 139, 0,
	225, 141, 226, 142, 143, 0, 662, 0, 0, 0,
	144, 227, 372, 145, 373, 228, 146, 147, 148, 0,
	229, 149, 230, 150, 0, 151, 152, 153, 231, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 374, 161,
	162, 232, 163, 0, 164, 165, 166, 0, 233, 167,
	168, 0, 169, 170, 375, 171, 234, 235, 172, 0,
	173, 174, 176, 236, 175, 237, 0, 177, 0, 178,
	179, 0, 238, 239, 240, 0, 0, 180, 241, 242,
	660, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 243, 244, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 357, 668, 0,
	669, 664, 659, 0, 0, 0, 0, 0, 670, 665,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 362, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 363, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 655, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 661, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 364, 0, 119, 215, 0,
	216, 0, 120, 121, 217, 218, 366, 0, 124, 0,
	122, 0, 365, 123, 219, 220, 221, 222, 0, 223,
	0, 367, 125, 368, 126, 127, 0, 0, 224, 369,
	128, 370, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 371, 136, 137, 140, 138, 0, 139,
	0, 225, 141, 226, 142, 143, 0, 662, 0, 0,
	0, 144, 227, 372, 145, 373, 228, 146, 147, 148,
	0, 229, 149, 230, 150, 0, 151, 152, 153, 231,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 374,
	161, 162, 232, 163, 0, 164, 165, 166, 0, 233,
	167, 168, 0, 169, 170, 375, 171, 234, 235, 172,
	0, 173, 174, 176, 236, 175, 237, 0, 177, 0,
	178, 179, 0, 238, 239, 240, 0, 0, 180, 241,
	242, 660, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 243, 244, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 357, 668,
	0, 669, 664, 659, 0, 0, 0, 0, 0, 670,
	665, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 362, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 363,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 661, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 364, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 366, 0, 124,
	0, 122, 0, 365, 123, 219, 220, 221, 222, 0,
	223, 0, 367, 125, 368, 126, 127, 0, 0, 224,
	369, 128, 370, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 371, 136, 137, 140, 138, 0,
	139, 0, 225, 141, 226, 142, 143, 0, 662, 0,
	0, 0, 144, 227, 372, 145, 373, 228, 146, 147,
	148, 0, 229, 149, 230, 150, 0, 151, 152, 153,
	231, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	374, 161, 162, 232, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 0, 169, 170, 375, 171, 234, 235,
	172, 0, 173, 174, 176, 236, 175, 237, 0, 177,
	0, 178, 179, 0, 238, 239, 240, 0, 0, 180,
	241, 242, 660, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 243, 244, 84,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	670, 665, 196, 0, 0, 0, 0, 90, 91, 197,
	198, 199, 200, 92, 201, 202, 0, 93, 203, 204,
	94, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 209, 107, 210, 211, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 212, 113, 114, 213, 0, 0, 0, 115, 116,
	214, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	215, 0, 216, 0, 120, 121, 217, 218, 0, 0,
	124, 0, 122, 0, 0, 123, 219, 220, 221, 222,
	0, 223, 0, 0, 125, 0, 126, 127, 0, 0,
	224, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 225, 141, 226, 142, 143, 0, 0,
	330, 0, 0, 144, 227, 0, 145, 0, 228, 146,
	147, 148, 0, 229, 149, 230, 150, 0, 151, 152,
	153, 231, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 232, 163, 0, 164, 165, 166,
	57, 233, 167, 168, 0, 169, 170, 0, 171, 234,
	235, 172, 0, 173, 174, 176, 236, 175, 237, 0,
	177, 59, 178, 179, 0, 238, 239, 240, 0, 0,
	180, 241, 242, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 361, 244,
	0, 191, 0, 84, 0, 55, 192, 193, 194, 195,
	0, 56, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 196, 0, 0, 0,
	1042, 90, 91, 197, 198, 199, 200, 92, 201, 202,
	0, 93, 203, 204, 94, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 209, 107, 210,
	211, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 212, 113, 114, 213, 0,
	0, 0, 115, 116, 214, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 215, 0, 216, 0, 120, 121,
	217, 218, 0, 0, 124, 0, 122, 0, 0, 123,
	219, 220, 221, 222, 0, 223, 0, 0, 125, 0,
	126, 127, 0, 0, 224, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 225, 141, 226,
	142, 143, 0, 0, 0, 0, 0, 144, 227, 0,
	145, 0, 228, 146, 147, 148, 0, 229, 149, 230,
	150, 0, 151, 152, 153, 231, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 232, 163,
	0, 164, 165, 166, 57, 233, 167, 168, 0, 169,
	170, 0, 171, 234, 235, 172, 0, 173, 174, 176,
	236, 175, 237, 0, 177, 59, 178, 179, 0, 238,
	239, 240, 0, 0, 180, 241, 242, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 361, 244, 0, 191, 0, 84, 0, 55,
	192, 193, 194, 195, 0, 56, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 1264, 0, 54, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 0, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 215, 0,
	216, 0, 120, 121, 217, 218, 0, 0, 124, 0,
	122, 0, 0, 123, 219, 220, 221, 222, 0, 223,
	0, 0, 125, 0, 126, 127, 0, 0, 224, 0,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 140, 138, 0, 139,
	0, 225, 141, 226, 142, 143, 0, 0, 0, 0,
	0, 144, 227, 0, 145, 0, 228, 146, 147, 148,
	0, 229, 149, 230, 150, 0, 151, 152, 153, 231,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 232, 163, 0, 164, 165, 166, 0, 233,
	167, 168, 0, 169, 170, 0, 171, 234, 235, 172,
	0, 173, 174, 176, 236, 175, 237, 0, 177, 0,
	178, 179, 0, 238, 239, 240, 0, 0, 180, 241,
	242, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 243, 244, 0, 191,
	0, 0, 84, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 196, 0, 0, 0, 445,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 0,
	93, 203, 204, 94, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 209, 107, 210, 211,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 212, 113, 114, 213, 0, 0,
	0, 115, 116, 214, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 215, 0, 216, 0, 120, 121, 217,
	218, 0, 0, 124, 0, 122, 0, 0, 123, 219,
	220, 221, 222, 0, 223, 0, 0, 125, 0, 126,
	127, 0, 0, 224, 0, 128, 0, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 0, 136,
	137, 140, 138, 0, 139, 0, 225, 141, 226, 142,
	143, 0, 0, 330, 0, 0, 144, 227, 0, 145,
	0, 228, 146, 147, 148, 0, 229, 149, 230, 150,
	0, 151, 152, 153, 231, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 0, 161, 162, 232, 163, 0,
	164, 165, 166, 0, 233, 167, 168, 0, 169, 170,
	0, 171, 234, 235, 172, 0, 173, 174, 176, 236,
	175, 237, 0, 177, 0, 178, 179, 0, 238, 239,
	240, 0, 0, 180, 241, 242, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 243, 244, 0, 191, 0, 84, 0, 0, 192,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 196,
	0, 0, 0, 1042, 90, 91, 197, 198, 199, 200,
	92, 201, 202, 0, 93, 203, 204, 94, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	209, 107, 210, 211, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 212, 113,
	114, 213, 0, 0, 0, 115, 116, 214, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 215, 0, 216,
	0, 120, 121, 217, 218, 0, 0, 124, 0, 122,
	0, 0, 123, 219, 220, 221, 222, 0, 223, 0,
	0, 125, 0, 126, 127, 0, 0, 224, 0, 128,
	0, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 0, 136, 137, 140, 138, 0, 139, 0,
	225, 141, 226, 142, 143, 0, 0, 0, 0, 0,
	144, 227, 0, 145, 0, 228, 146, 147, 148, 0,
	229, 149, 230, 150, 0, 151, 152, 153, 231, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 232, 163, 0, 164, 165, 166, 0, 233, 167,
	168, 0, 169, 170, 0, 171, 234, 235, 172, 0,
	173, 174, 176, 236, 175, 237, 0, 177, 0, 178,
	179, 0, 238, 239, 240, 0, 0, 180, 241, 242,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 243, 244, 0, 191, 0,
	84, 0, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 952, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	222, 0, 223, 0, 0, 125, 0, 126, 127, 0,
	0, 224, 0, 128, 0, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 0, 136, 137, 140,
	138, 0, 139, 0, 225, 141, 226, 142, 143, 0,
	0, 0, 0, 0, 144, 227, 0, 145, 0, 228,
	146, 147, 148, 0, 229, 149, 230, 150, 0, 151,
	152, 153, 231, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 232, 163, 0, 164, 165,
	166, 0, 233, 167, 168, 0, 169, 170, 0, 171,
	234, 235, 172, 0, 173, 174, 176, 236, 175, 237,
	0, 177, 0, 178, 179, 0, 238, 239, 240, 0,
	0, 180, 241, 242, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 243,
	244, 0, 191, 0, 84, 0, 0, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 1479, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 222, 0, 223, 0, 0, 125,
	0, 126, 127, 0, 0, 224, 0, 128, 0, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	0, 136, 137, 140, 138, 0, 139, 0, 225, 141,
	226, 142, 143, 0, 0, 0, 0, 0, 144, 227,
	0, 145, 0, 228, 146, 147, 148, 0, 229, 149,
	230, 150, 0, 151, 152, 153, 231, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 0, 161, 162, 232,
	163, 0, 164, 165, 166, 0, 233, 167, 168, 0,
	169, 170, 0, 171, 234, 235, 172, 0, 173, 174,
	176, 236, 175, 237, 0, 177, 0, 178, 179, 0,
	238, 239, 240, 0, 0, 180, 241, 242, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 243, 244, 0, 191, 0, 84, 0,
	0, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 548, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	639, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 0, 0, 124,
	0, 122, 0, 0, 123, 219, 220, 221, 222, 0,
	223, 0, 0, 125, 0, 126, 127, 0, 0, 224,
	0, 128, 0, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 0, 136, 137, 140, 138, 0,
	139, 0, 225, 141, 226, 142, 143, 0, 0, 0,
	0, 0, 144, 227, 0, 145, 0, 228, 146, 147,
	148, 0, 229, 149, 230, 150, 0, 151, 152, 153,
	231, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 232, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 0, 169, 170, 0, 171, 234, 235,
	172, 0, 173, 174, 176, 236, 175, 237, 0, 177,
	638, 178, 179, 0, 238, 239, 240, 0, 0, 180,
	241, 242, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 243, 244, 0,
	191, 84, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 642, 0, 196, 0, 0, 0, 0, 90,
	91, 197, 198, 199, 200, 92, 201, 202, 0, 93,
	203, 204, 94, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 209, 107, 210, 211, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 212, 113, 114, 213, 0, 0, 0,
	115, 116, 214, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 215, 0, 216, 0, 120, 121, 217, 218,
	0, 0, 124, 0, 122, 0, 0, 123, 219, 220,
	221, 222, 0, 223, 0, 0, 125, 0, 126, 127,
	0, 0, 224, 0, 128, 0, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 0, 136, 137,
	140, 138, 0, 139, 0, 225, 141, 226, 142, 143,
	0, 0, 0, 0, 0, 144, 227, 0, 145, 0,
	228, 146, 147, 148, 0, 229, 149, 230, 150, 0,
	151, 152, 153, 231, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 0, 161, 162, 232, 163, 0, 164,
	165, 166, 0, 233, 167, 168, 0, 169, 170, 0,
	171, 234, 235, 172, 0, 173, 174, 176, 236, 175,
	237, 0, 177, 0, 178, 179, 0, 238, 239, 240,
	0, 0, 180, 241, 242, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	243, 244, 0, 191, 357, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 642, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 362, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 363, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 364, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 366, 0, 124, 0, 122, 0, 365,
	123, 219, 220, 221, 222, 0, 223, 0, 367, 125,
	368, 126, 127, 0, 0, 224, 369, 128, 370, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	371, 136, 137, 140, 138, 0, 139, 0, 225, 141,
	226, 142, 143, 0, 0, 0, 0, 0, 144, 227,
	372, 145, 373, 228, 146, 147, 148, 0, 229, 149,
	230, 150, 0, 151, 152, 153, 231, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 374, 161, 162, 232,
	163, 0, 164, 165, 166, 0, 233, 167, 168, 0,
	169, 170, 375, 171, 234, 235, 172, 0, 173, 174,
	176, 236, 175, 237, 0, 177, 0, 178, 179, 0,
	238, 239, 240, 0, 0, 180, 241, 242, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 243, 244, 84, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 90, 91, 197, 198, 199, 200, 92,
	201, 202, 0, 93, 203, 204, 94, 0, 0, 205,
	206, 207, 925, 208, 0, 0, 0, 95, 96, 97,
	0, 98, 923, 99, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 209,
	107, 210, 211, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 212, 113, 114,
	213, 0, 1018, 0, 115, 116, 214, 0, 117, 0,
	118, 928, 0, 0, 0, 119, 215, 0, 216, 0,
	120, 121, 217, 218, 0, 0, 124, 1016, 122, 0,
	0, 123, 219, 220, 221, 222, 0, 223, 0, 0,
	125, 0, 126, 127, 0, 0, 224, 0, 128, 0,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 0, 136, 137, 140, 138, 0, 139, 0, 225,
	141, 226, 142, 143, 0, 0, 0, 0, 0, 144,
	227, 0, 145, 0, 228, 146, 147, 148, 0, 229,
	149, 230, 150, 927, 151, 152, 153, 231, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	232, 163, 0, 164, 165, 166, 0, 233, 167, 168,
	0, 169, 170, 0, 171, 234, 235, 172, 0, 173,
	174, 176, 236, 175, 237, 0, 177, 0, 178, 179,
	0, 238, 239, 240, 0, 0, 180, 241, 242, 0,
	181, 182, 183, 184, 0, 1017, 185, 186, 187, 0,
	0, 188, 189, 190, 243, 244, 84, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 90, 91, 197, 198, 199, 200,
	92, 201, 202, 0, 93, 203, 204, 94, 0, 0,
	205, 206, 207, 925, 208, 0, 0, 920, 95, 96,
	97, 0, 98, 923, 99, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	209, 107, 210, 211, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 212, 113,
	114, 213, 0, 0, 0, 115, 116, 214, 0, 117,
	0, 118, 928, 0, 0, 0, 119, 215, 0, 216,
	0, 120, 121, 919, 218, 0, 0, 124, 0, 122,
	0, 0, 123, 219, 220, 221, 222, 0, 223, 0,
	0, 125, 0, 126, 127, 0, 0, 224, 0, 128,
	0, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 0, 136, 137, 140, 138, 0, 139, 0,
	225, 141, 226, 142, 143, 0, 0, 0, 0, 0,
	144, 227, 0, 145, 0, 228, 146, 147, 148, 0,
	229, 149, 230, 150, 927, 151, 152, 153, 231, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 232, 163, 0, 164, 165, 166, 0, 233, 167,
	168, 0, 169, 170, 0, 171, 234, 235, 172, 0,
	173, 174, 176, 236, 175, 237, 0, 177, 0, 178,
	179, 0, 238, 239, 240, 0, 0, 180, 241, 242,
	0, 181, 182, 183, 184, 0, 926, 185, 186, 187,
	0, 0, 188, 189, 190, 243, 244, 84, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 1264, 0, 0, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 0, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 215, 0,
	216, 0, 120, 121, 217, 218, 0, 0, 124, 0,
	122, 0, 0, 123, 219, 220, 221, 222, 0, 223,
	0, 0, 125, 0, 126, 127, 0, 0, 224, 0,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 140, 138, 0, 139,
	0, 225, 141, 226, 142, 143, 0, 0, 0, 0,
	0, 144, 227, 0, 145, 0, 228, 146, 147, 148,
	0, 229, 149, 230, 150, 0, 151, 152, 153, 231,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 232, 163, 0, 164, 165, 166, 0, 233,
	167, 168, 0, 169, 170, 0, 171, 234, 235, 172,
	0, 173, 174, 176, 236, 175, 237, 0, 177, 0,
	178, 179, 0, 238, 239, 240, 0, 0, 180, 241,
	242, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 243, 244, 84, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 0, 0, 124,
	0, 122, 0, 0, 123, 219, 220, 221, 222, 0,
	223, 0, 0, 125, 0, 126, 127, 0, 0, 224,
	0, 128, 0, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 0, 136, 137, 140, 138, 0,
	139, 0, 225, 141, 226, 142, 143, 0, 0, 330,
	0, 0, 144, 227, 0, 145, 0, 228, 146, 147,
	148, 0, 229, 149, 230, 150, 0, 151, 152, 153,
	231, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 232, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 0, 169, 170, 0, 171, 234, 235,
	172, 0, 173, 174, 176, 236, 175, 237, 0, 177,
	0, 178, 179, 0, 238, 239, 240, 0, 0, 180,
	241, 242, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 243, 244, 84,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 90, 91, 197,
	198, 199, 200, 92, 201, 202, 0, 93, 203, 204,
	94, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 209, 107, 210, 211, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 212, 113, 114, 213, 0, 0, 0, 115, 116,
	214, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	215, 0, 216, 0, 120, 121, 590, 218, 0, 0,
	124, 0, 122, 0, 0, 123, 219, 220, 221, 222,
	0, 223, 0, 0, 125, 0, 126, 127, 0, 0,
	224, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 225, 141, 226, 142, 143, 0, 0,
	330, 0, 0, 144, 227, 0, 145, 0, 228, 146,
	147, 148, 0, 229, 149, 230, 150, 0, 151, 152,
	153, 231, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 232, 163, 0, 164, 165, 166,
	0, 233, 167, 168, 0, 169, 170, 0, 171, 234,
	235, 172, 0, 173, 174, 176, 236, 175, 237, 0,
	177, 0, 178, 179, 0, 238, 239, 240, 0, 0,
	180, 241, 242, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 243, 244,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 382, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	222, 0, 223, 0, 0, 125, 0, 126, 127, 0,
	0, 224, 0, 128, 0, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 0, 136, 137, 140,
	138, 0, 139, 0, 225, 141, 226, 142, 143, 0,
	0, 0, 0, 0, 144, 227, 0, 145, 0, 228,
	146, 147, 148, 0, 229, 149, 230, 150, 0, 151,
	152, 153, 231, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 232, 163, 0, 164, 165,
	166, 0, 233, 167, 168, 0, 169, 170, 0, 171,
	234, 235, 172, 0, 173, 174, 176, 236, 175, 237,
	0, 177, 0, 178, 179, 0, 238, 239, 240, 0,
	0, 180, 241, 242, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 243,
	244, 84, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 90,
	91, 197, 198, 199, 200, 92, 201, 202, 0, 93,
	203, 204, 94, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 209, 107, 210, 211, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 212, 113, 114, 213, 0, 0, 0,
	115, 116, 214, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 215, 0, 216, 0, 120, 121, 336, 218,
	0, 0, 124, 0, 122, 0, 0, 123, 219, 220,
	221, 222, 0, 223, 0, 0, 125, 0, 126, 127,
	0, 0, 224, 0, 128, 0, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 0, 136, 137,
	140, 138, 0, 139, 0, 225, 141, 226, 142, 143,
	0, 0, 330, 0, 0, 144, 227, 0, 145, 0,
	228, 146, 147, 148, 0, 229, 149, 230, 150, 0,
	151, 152, 153, 231, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 0, 161, 162, 232, 163, 0, 164,
	165, 166, 0, 233, 167, 168, 0, 169, 170, 0,
	171, 234, 235, 172, 0, 173, 174, 176, 236, 175,
	237, 0, 177, 0, 178, 179, 0, 238, 239, 240,
	0, 0, 180, 241, 242, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	243, 244, 84, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 0, 0, 0, 87, 88, 248,
	89, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 0,
	93, 203, 204, 94, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 209, 107, 210, 211,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 212, 113, 114, 213, 0, 0,
	0, 115, 116, 214, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 215, 0, 216, 0, 120, 121, 217,
	218, 0, 0, 124, 0, 122, 0, 0, 123, 219,
	220, 221, 222, 0, 223, 0, 0, 125, 0, 126,
	127, 0, 0, 224, 0, 128, 0, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 0, 136,
	137, 140, 138, 0, 139, 0, 225, 141, 226, 142,
	143, 0, 0, 0, 0, 0, 144, 227, 0, 145,
	0, 228, 146, 147, 148, 0, 229, 149, 230, 247,
	0, 151, 152, 153, 231, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 0, 161, 162, 232, 163, 0,
	164, 165, 166, 0, 233, 167, 168, 0, 169, 170,
	0, 171, 234, 235, 172, 0, 173, 174, 176, 236,
	175, 237, 0, 177, 0, 178, 179, 0, 238, 239,
	240, 0, 0, 180, 241, 242, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 243, 244, 84, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 90, 91, 197, 198, 199, 200, 92, 201, 202,
	0, 93, 203, 204, 94, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 209, 107, 210,
	211, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 212, 113, 114, 213, 0,
	0, 0, 115, 116, 214, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 215, 0, 216, 0, 120, 121,
	217, 218, 0, 0, 124, 0, 122, 0, 0, 123,
	219, 220, 221, 222, 0, 223, 0, 0, 125, 0,
	126, 127, 0, 0, 224, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 225, 141, 226,
	142, 143, 0, 0, 0, 0, 0, 144, 227, 0,
	145, 0, 228, 146, 147, 148, 0, 229, 149, 230,
	150, 0, 151, 152, 153, 231, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 232, 163,
	0, 164, 165, 166, 0, 233, 167, 168, 0, 169,
	170, 0, 171, 234, 235, 172, 0, 173, 174, 176,
	236, 175, 237, 0, 177, 0, 178, 179, 0, 238,
	239, 240, 0, 0, 180, 241, 242, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 243, 244, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 1187, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 222, 0, 223, 0, 0, 125,
	0, 126, 127, 0, 0, 224, 0, 128, 0, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	0, 136, 137, 140, 138, 0, 139, 0, 225, 141,
	226, 142, 143, 0, 0, 0, 0, 0, 144, 227,
	0, 145, 0, 228, 146, 147, 148, 0, 229, 149,
	230, 150, 0, 151, 152, 153, 231, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 0, 161, 162, 232,
	163, 0, 164, 165, 166, 0, 233, 167, 168, 0,
	169, 170, 0, 171, 234, 235, 172, 0, 173, 174,
	176, 236, 175, 237, 0, 177, 0, 178, 179, 0,
	238, 239, 240, 0, 0, 180, 241, 242, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 243, 244, 84, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 90, 91, 197, 198, 199, 200, 92,
	201, 202, 0, 93, 203, 204, 94, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 209,
	107, 210, 211, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 212, 113, 114,
	213, 0, 0, 0, 115, 116, 214, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 215, 0, 216, 0,
	120, 121, 1185, 218, 0, 0, 124, 0, 122, 0,
	0, 123, 219, 220, 221, 222, 0, 223, 0, 0,
	125, 0, 126, 127, 0, 0, 224, 0, 128, 0,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 0, 136, 137, 140, 138, 0, 139, 0, 225,
	141, 226, 142, 143, 0, 0, 0, 0, 0, 144,
	227, 0, 145, 0, 228, 146, 147, 148, 0, 229,
	149, 230, 150, 0, 151, 152, 153, 231, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	232, 163, 0, 164, 165, 166, 0, 233, 167, 168,
	0, 169, 170, 0, 171, 234, 235, 172, 0, 173,
	174, 176, 236, 175, 237, 0, 177, 0, 178, 179,
	0, 238, 239, 240, 0, 0, 180, 241, 242, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 243, 244, 84, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 90, 91, 197, 198, 199, 200,
	92, 201, 202, 0, 93, 203, 204, 94, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	209, 107, 210, 211, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 212, 113,
	114, 213, 0, 0, 0, 115, 116, 214, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 215, 0, 216,
	0, 120, 121, 1176, 218, 0, 0, 124, 0, 122,
	0, 0, 123, 219, 220, 221, 222, 0, 223, 0,
	0, 125, 0, 126, 127, 0, 0, 224, 0, 128,
	0, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 0, 136, 137, 140, 138, 0, 139, 0,
	225, 141, 226, 142, 143, 0, 0, 0, 0, 0,
	144, 227, 0, 145, 0, 228, 146, 147, 148, 0,
	229, 149, 230, 150, 0, 151, 152, 153, 231, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 232, 163, 0, 164, 165, 166, 0, 233, 167,
	168, 0, 169, 170, 0, 171, 234, 235, 172, 0,
	173, 174, 176, 236, 175, 237, 0, 177, 0, 178,
	179, 0, 238, 239, 240, 0, 0, 180, 241, 242,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 243, 244, 84, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 0, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 215, 0,
	216, 0, 120, 121, 788, 218, 0, 0, 124, 0,
	122, 0, 0, 123, 219, 220, 221, 222, 0, 223,
	0, 0, 125, 0, 126, 127, 0, 0, 224, 0,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 140, 138, 0, 139,
	0, 225, 141, 226, 142, 143, 0, 0, 0, 0,
	0, 144, 227, 0, 145, 0, 228, 146, 147, 148,
	0, 229, 149, 230, 150, 0, 151, 152, 153, 231,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 232, 163, 0, 164, 165, 166, 0, 233,
	167, 168, 0, 169, 170, 0, 171, 234, 235, 172,
	0, 173, 174, 176, 236, 175, 237, 0, 177, 0,
	178, 179, 0, 238, 239, 240, 0, 0, 180, 241,
	242, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 243, 244, 84, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 0, 0, 124,
	0, 122, 0, 0, 123, 219, 220, 221, 222, 0,
	223, 0, 0, 125, 0, 126, 127, 0, 0, 224,
	0, 128, 0, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 0, 136, 137, 140, 138, 0,
	139, 0, 225, 141, 226, 142, 143, 0, 0, 0,
	0, 0, 144, 227, 0, 145, 0, 228, 146, 147,
	148, 0, 229, 149, 230, 150, 0, 151, 152, 153,
	231, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 232, 163, 0, 262, 165, 166, 0,
	233, 167, 168, 0, 169, 170, 0, 171, 234, 235,
	172, 0, 173, 174, 176, 236, 175, 237, 0, 177,
	0, 178, 179, 0, 238, 239, 240, 0, 0, 180,
	241, 242, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 243, 244, 84,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 196, 0, 577, 0, 0, 90, 91, 197,
	198, 199, 200, 92, 201, 202, 0, 93, 203, 204,
	94, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 209, 107, 210, 211, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 212, 113, 114, 213, 0, 0, 0, 115, 116,
	214, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	215, 0, 216, 0, 120, 121, 217, 218, 0, 0,
	124, 0, 122, 0, 0, 123, 219, 220, 221, 222,
	0, 223, 0, 0, 125, 0, 126, 127, 0, 0,
	224, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 225, 141, 226, 142, 143, 0, 0,
	0, 0, 0, 144, 227, 0, 145, 0, 228, 146,
	147, 148, 0, 229, 149, 230, 150, 0, 151, 152,
	153, 231, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 232, 163, 0, 164, 165, 166,
	0, 233, 167, 168, 0, 0, 170, 0, 171, 234,
	235, 172, 0, 173, 174, 176, 236, 175, 237, 0,
	177, 0, 178, 179, 0, 238, 239, 240, 0, 0,
	180, 241, 242, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 243, 244,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 430, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	222, 0, 223, 0, 0, 125, 0, 126, 127, 0,
	0, 224, 0, 128, 0, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 0, 136, 137, 140,
	138, 0, 139, 0, 225, 141, 226, 142, 143, 0,
	0, 0, 0, 0, 144, 227, 0, 145, 0, 228,
	146, 147, 148, 0, 229, 149, 230, 150, 0, 151,
	152, 153, 231, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 232, 163, 0, 164, 165,
	166, 0, 233, 167, 168, 0, 169, 170, 0, 171,
	234, 235, 172, 0, 173, 174, 176, 236, 175, 237,
	0, 177, 0, 178, 179, 0, 238, 239, 240, 0,
	0, 180, 241, 242, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 243,
	244, 84, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 90,
	91, 197, 198, 199, 200, 92, 201, 202, 0, 93,
	203, 204, 94, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 209, 107, 210, 211, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 212, 113, 114, 213, 0, 0, 0,
	115, 116, 214, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 215, 0, 216, 0, 120, 121, 427, 218,
	0, 0, 124, 0, 122, 0, 0, 123, 219, 220,
	221, 222, 0, 223, 0, 0, 125, 0, 126, 127,
	0, 0, 224, 0, 128, 0, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 0, 136, 137,
	140, 138, 0, 139, 0, 225, 141, 226, 142, 143,
	0, 0, 0, 0, 0, 144, 227, 0, 145, 0,
	228, 146, 147, 148, 0, 229, 149, 230, 150, 0,
	151, 152, 153, 231, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 0, 161, 162, 232, 163, 0, 164,
	165, 166, 0, 233, 167, 168, 0, 169, 170, 0,
	171, 234, 235, 172, 0, 173, 174, 176, 236, 175,
	237, 0, 177, 0, 178, 179, 0, 238, 239, 240,
	0, 0, 180, 241, 242, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	243, 244, 84, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 0,
	93, 203, 204, 94, 0, 0, 205, 206, 388, 0,
	208, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 209, 107, 210, 211,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 212, 113, 114, 213, 0, 0,
	0, 115, 116, 214, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 215, 0, 216, 0, 120, 121, 217,
	218, 0, 0, 124, 0, 122, 0, 0, 123, 219,
	220, 221, 222, 0, 223, 0, 0, 125, 0, 126,
	127, 0, 0, 224, 0, 128, 0, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 273, 0, 136,
	137, 140, 138, 0, 139, 0, 225, 141, 226, 142,
	143, 0, 0, 0, 0, 0, 144, 227, 0, 145,
	0, 228, 146, 147, 148, 0, 229, 149, 230, 150,
	0, 151, 152, 153, 231, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 0, 161, 162, 232, 163, 0,
	164, 165, 166, 0, 233, 167, 168, 0, 169, 170,
	0, 171, 234, 235, 172, 0, 173, 174, 176, 236,
	175, 237, 0, 177, 0, 178, 179, 0, 272, 239,
	240, 0, 0, 268, 241, 242, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 243, 244, 84, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 90, 91, 197, 198, 199, 200, 92, 201, 202,
	0, 93, 203, 204, 94, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 209, 107, 210,
	211, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 212, 113, 114, 213, 0,
	0, 0, 115, 116, 214, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 215, 0, 216, 0, 120, 121,
	217, 218, 0, 0, 124, 0, 122, 0, 0, 123,
	219, 220, 221, 222, 0, 223, 0, 0, 125, 0,
	126, 127, 0, 0, 224, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 273, 0,
	136, 137, 140, 138, 0, 139, 0, 225, 141, 226,
	142, 143, 0, 0, 0, 0, 0, 144, 227, 0,
	145, 0, 228, 146, 147, 148, 0, 229, 149, 230,
	150, 0, 151, 152, 153, 231, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 232, 163,
	0, 164, 165, 166, 0, 233, 167, 168, 0, 169,
	170, 0, 171, 234, 235, 172, 0, 173, 174, 176,
	236, 175, 237, 0, 177, 0, 178, 179, 0, 272,
	239, 240, 0, 0, 268, 241, 242, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 243, 244, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 352, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 222, 0, 223, 0, 0, 125,
	0, 126, 127, 0, 0, 224, 0, 128, 0, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	0, 136, 137, 140, 138, 0, 139, 0, 225, 141,
	226, 142, 143, 0, 0, 0, 0, 0, 144, 227,
	0, 145, 0, 228, 146, 147, 148, 0, 229, 149,
	230, 150, 0, 151, 152, 153, 231, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 0, 161, 162, 232,
	163, 0, 164, 165, 166, 0, 233, 167, 168, 0,
	169, 170, 0, 171, 234, 235, 172, 0, 173, 174,
	176, 236, 175, 237, 0, 177, 0, 178, 179, 0,
	238, 239, 240, 0, 0, 180, 241, 242, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 243, 244, 84, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 90, 91, 197, 198, 199, 200, 92,
	201, 202, 0, 93, 203, 204, 94, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 209,
	107, 210, 211, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 212, 113, 114,
	213, 0, 0, 0, 115, 116, 214, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 215, 0, 216, 0,
	120, 121, 349, 218, 0, 0, 124, 0, 122, 0,
	0, 123, 219, 220, 221, 222, 0, 223, 0, 0,
	125, 0, 126, 127, 0, 0, 224, 0, 128, 0,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 0, 136, 137, 140, 138, 0, 139, 0, 225,
	141, 226, 142, 143, 0, 0, 0, 0, 0, 144,
	227, 0, 145, 0, 228, 146, 147, 148, 0, 229,
	149, 230, 150, 0, 151, 152, 153, 231, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	232, 163, 0, 164, 165, 166, 0, 233, 167, 168,
	0, 169, 170, 0, 171, 234, 235, 172, 0, 173,
	174, 176, 236, 175, 237, 0, 177, 0, 178, 179,
	0, 238, 239, 240, 0, 0, 180, 241, 242, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 243, 244, 84, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 90, 91, 197, 198, 199, 200,
	92, 201, 202, 0, 93, 203, 204, 94, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	209, 107, 210, 211, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 212, 113,
	114, 213, 0, 0, 0, 115, 116, 214, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 215, 0, 216,
	0, 120, 121, 347, 218, 0, 0, 124, 0, 122,
	0, 0, 123, 219, 220, 221, 222, 0, 223, 0,
	0, 125, 0, 126, 127, 0, 0, 224, 0, 128,
	0, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 0, 136, 137, 140, 138, 0, 139, 0,
	225, 141, 226, 142, 143, 0, 0, 0, 0, 0,
	144, 227, 0, 145, 0, 228, 146, 147, 148, 0,
	229, 149, 230, 150, 0, 151, 152, 153, 231, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 232, 163, 0, 164, 165, 166, 0, 233, 167,
	168, 0, 169, 170, 0, 171, 234, 235, 172, 0,
	173, 174, 176, 236, 175, 237, 0, 177, 0, 178,
	179, 0, 238, 239, 240, 0, 0, 180, 241, 242,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 243, 244, 84, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 0, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 215, 0,
	216, 0, 120, 121, 339, 218, 0, 0, 124, 0,
	122, 0, 0, 123, 219, 220, 221, 222, 0, 223,
	0, 0, 125, 0, 126, 127, 0, 0, 224, 0,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 140, 138, 0, 139,
	0, 225, 141, 226, 142, 143, 0, 0, 0, 0,
	0, 144, 227, 0, 145, 0, 228, 146, 147, 148,
	0, 229, 149, 230, 150, 0, 151, 152, 153, 231,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 232, 163, 0, 164, 165, 166, 0, 233,
	167, 168, 0, 169, 170, 0, 171, 234, 235, 172,
	0, 173, 174, 176, 236, 175, 237, 0, 177, 0,
	178, 179, 0, 238, 239, 240, 0, 0, 180, 241,
	242, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 243, 244, 84, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 0, 0, 124,
	0, 122, 0, 0, 123, 219, 220, 221, 222, 0,
	223, 0, 0, 125, 0, 126, 127, 0, 0, 224,
	0, 128, 0, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 0, 136, 137, 140, 138, 0,
	139, 0, 225, 141, 226, 142, 143, 0, 0, 0,
	0, 0, 144, 227, 0, 145, 0, 228, 146, 147,
	148, 0, 229, 149, 230, 150, 0, 151, 152, 153,
	231, 319, 155, 0, 157, 158, 156, 159, 0, 160,
	0, 161, 162, 232, 163, 0, 164, 165, 166, 0,
	233, 167, 168, 0, 169, 170, 0, 171, 234, 235,
	172, 0, 173, 174, 176, 236, 175, 237, 0, 177,
	0, 178, 179, 0, 238, 239, 240, 0, 0, 180,
	241, 242, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 243, 244, 84,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 90, 91, 197,
	198, 199, 200, 92, 201, 202, 0, 93, 203, 204,
	94, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 209, 107, 210, 211, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 212, 113, 114, 213, 0, 0, 0, 115, 116,
	214, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	215, 0, 216, 0, 120, 121, 217, 218, 0, 0,
	124, 0, 122, 0, 0, 123, 219, 220, 221, 222,
	0, 223, 0, 0, 125, 0, 126, 127, 0, 0,
	224, 0, 128, 0, 0, 265, 0, 0, 130, 0,
	131, 132, 133, 134, 273, 0, 136, 137, 140, 138,
	0, 139, 0, 225, 141, 226, 142, 143, 0, 0,
	0, 0, 0, 144, 227, 0, 145, 0, 228, 146,
	147, 148, 0, 229, 149, 230, 150, 0, 151, 152,
	153, 231, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 267, 163, 0, 164, 165, 166,
	0, 233, 167, 266, 0, 169, 170, 0, 171, 234,
	235, 172, 0, 173, 174, 176, 236, 175, 237, 0,
	177, 0, 178, 179, 0, 272, 239, 240, 0, 0,
	268, 241, 242, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 243, 244,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	222, 0, 223, 0, 0, 125, 0, 126, 127, 0,
	0, 224, 0, 128, 0, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 0, 136, 137, 140,
	138, 0, 139, 0, 225, 141, 226, 142, 143, 0,
	0, 0, 0, 0, 144, 227, 0, 145, 0, 228,
	146, 147, 0, 0, 229, 149, 230, 150, 0, 151,
	0, 153, 231, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 232, 0, 0, 164, 165,
	166, 0, 233, 167, 168, 0, 169, 170, 0, 171,
	234, 235, 172, 0, 173, 174, 176, 236, 175, 237,
	0, 177, 0, 178, 179, 0, 238, 239, 240, 0,
	0, 180, 241, 242, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 243,
	244, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 814, 0, 833, 834, 835, 843, 844, 845, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 816, 814, 847, 833, 834, 835, 843,
	844, 845, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 815, 0, 816, 0, 847, 0,
	830, 0, 0, 0, 0, 0, 0, 612, 606, 629,
	600, 620, 619, 0, 0, 602, 601, 815, 0, 0,
	631, 630, 0, 830, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 833, 834, 835, 843, 844,
	845, 0, 0, 0, 0, 0, 0, 821, 836, 0,
	625, 0, 617, 616, 0, 816, 0, 847, 0, 0,
	0, 615, 0, 0, 840, 848, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 815, 614, 0, 846,
	0, 0, 830, 0, 0, 0, 0, 840, 848, 838,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 846, 607, 608, 609, 610, 0, 628, 0,
	0, 0, 838, 0, 0, 0, 0, 837, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 618, 0, 0, 0, 840, 848, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 841, 0, 0, 0, 0, 613, 0,
	0, 838, 0, 0, 0, 832, 0, 831, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 604, 0,
	0, 0, 0, 0, 0, 0, 611, 605, 0, 837,
	0, 0, 0, 633, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 626, 627, 0, 839, 0, 0, 827,
	828, 829, 0, 826, 823, 824, 825, 817, 818, 819,
	820, 822, 0, 842, 832, 0, 632, 0, 0, 839,
	1313, 0, 827, 828, 829, 841, 826, 823, 824, 825,
	817, 818, 819, 820, 822, 0, 842, 0, 0, 0,
	1759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 833, 834, 835, 843, 844, 845, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 816, 0, 847, 0, 0, 839, 0,
	0, 827, 828, 829, 0, 826, 823, 824, 825, 817,
	818, 819, 820, 822, 815, 842, 0, 0, 0, 1757,
	830, 814, 0, 833, 834, 835, 843, 844, 845, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 816, 0, 847, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 833, 834, 835, 843,
	844, 845, 0, 0, 815, 0, 0, 821, 0, 836,
	830, 0, 0, 0, 0, 0, 816, 0, 847, 0,
	0, 0, 0, 0, 840, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 846,
	0, 0, 0, 830, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 831, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 840, 848, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 846,
	821, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 831, 0, 840, 848, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 846, 841, 0, 0, 0, 837, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 839, 0, 0, 827,
	828, 829, 0, 826, 823, 824, 825, 817, 818, 819,
	820, 822, 0, 842, 0, 832, 0, 1738, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 839, 0, 0, 827,
	828, 829, 0, 826, 823, 824, 825, 817, 818, 819,
	820, 822, 0, 842, 0, 0, 0, 1713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 827, 828, 829, 0, 826, 823, 824, 825,
	817, 818, 819, 820, 822, 0, 842, 0, 0, 814,
	1708, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 816, 814, 847, 833, 834, 835, 843, 844, 845,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 815, 0, 816, 0, 847, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 0, 0, 0, 0,
	0, 830, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 833, 834, 835, 843, 844, 845, 0,
	0, 0, 0, 0, 0, 821, 836, 0, 0, 0,
	0, 0, 0, 816, 0, 847, 0, 0, 0, 0,
	0, 0, 840, 848, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 0, 815, 0, 0, 846, 0, 0,
	830, 0, 0, 0, 0, 840, 848, 838, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 837, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 840, 848, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 841, 0, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 832, 0, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 832, 0, 0, 1704, 0, 839, 0, 0,
	827, 828, 829, 841, 826, 823, 824, 825, 817, 818,
	819, 820, 822, 0, 842, 0, 0, 0, 1640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 816, 0, 847, 0, 0, 839, 0, 0, 827,
	828, 829, 0, 826, 823, 824, 825, 817, 818, 819,
	820, 822, 815, 842, 0, 0, 0, 1639, 830, 814,
	0, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 816, 0, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 814, 0, 833, 834, 835, 843, 844, 845,
	0, 0, 815, 0, 0, 821, 0, 836, 830, 0,
	0, 0, 0, 0, 816, 0, 847, 0, 0, 0,
	0, 0, 840, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 0, 846, 0, 0,
	0, 830, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 831, 0, 821, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 840, 848, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 846, 821, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 831, 0, 840, 848, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	846, 841, 0, 0, 0, 837, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 0, 832, 0, 1548, 0, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 0, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 839, 0, 0,
	827, 828, 829, 0, 826, 823, 824, 825, 817, 818,
	819, 820, 822, 0, 842, 0, 0, 814, 1466, 833,
	834, 835, 843, 844, 845, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 816,
	814, 847, 833, 834, 835, 843, 844, 845, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	815, 0, 816, 0, 847, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 815, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 0, 0, 821, 836, 0, 0, 0, 0, 0,
	0, 816, 0, 847, 0, 0, 0, 0, 0, 0,
	840, 848, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 0, 815, 0, 0, 846, 0, 0, 830, 0,
	0, 0, 0, 840, 848, 838, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 0,
	0, 0, 0, 837, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 1829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 840, 848, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 832, 0, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1828, 0,
	0, 0, 839, 0, 0, 827, 828, 829, 0, 826,
	823, 824, 825, 817, 818, 819, 820, 822, 0, 842,
	832, 0, 0, 1096, 0, 839, 0, 0, 827, 828,
	829, 841, 826, 823, 824, 825, 817, 818, 819, 820,
	822, 0, 842, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 833,
	834, 835, 843, 844, 845, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 816,
	0, 847, 0, 0, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	815, 842, 0, 0, 0, 0, 830, 814, 0, 833,
	834, 835, 843, 844, 845, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 1030, 0, 816,
	0, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 0, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	815, 850, 0, 821, 0, 1351, 830, 814, 1350, 833,
	834, 835, 843, 844, 845, 0, 0, 0, 0, 0,
	840, 848, 836, 0, 0, 0, 849, 0, 0, 816,
	0, 847, 0, 1031, 0, 846, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	815, 831, 0, 821, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	840, 848, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 846, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 831, 0, 821, 1341, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 841,
	840, 848, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 846, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 839, 837, 0, 827, 828, 829, 0, 826,
	823, 824, 825, 817, 818, 819, 820, 822, 0, 842,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 833, 834, 835, 843, 844, 845, 0, 832, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 841,
	0, 816, 839, 847, 0, 827, 828, 829, 0, 826,
	823, 824, 825, 817, 818, 819, 820, 822, 0, 842,
	0, 0, 815, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 1332,
	1333, 0, 1330, 1327, 1328, 1329, 1321, 1322, 1323, 1324,
	1326, 0, 839, 0, 0, 827, 828, 829, 0, 826,
	823, 824, 825, 817, 818, 819, 820, 822, 0, 842,
	0, 0, 0, 0, 0, 821, 814, 0, 833, 834,
	835, 843, 844, 845, 0, 0, 0, 0, 0, 0,
	0, 836, 840, 848, 0, 0, 0, 0, 816, 0,
	847, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 815,
	0, 0, 0, 831, 0, 830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 840,
	848, 841, 0, 0, 814, 0, 833, 834, 835, 843,
	844, 845, 0, 0, 846, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 838, 0, 816, 0, 847, 0,
	831, 0, 0, 0, 1320, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 837, 830, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	821, 0, 0, 0, 814, 1357, 833, 834, 835, 843,
	844, 845, 0, 0, 0, 1476, 0, 840, 848, 836,
	0, 0, 0, 1352, 0, 0, 816, 0, 847, 0,
	1325, 0, 846, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 815, 831, 0,
	0, 839, 0, 830, 827, 828, 829, 0, 826, 823,
	824, 825, 817, 818, 819, 820, 822, 0, 842, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 840, 848, 814,
	0, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 0, 846, 0, 836, 1336, 0, 0, 0, 0,
	0, 816, 838, 847, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 0, 0, 0, 830, 839,
	837, 0, 827, 828, 829, 0, 826, 823, 824, 825,
	817, 818, 819, 820, 822, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 1332, 1333, 832, 1330, 1327, 1328, 1329,
	1321, 1322, 1323, 1324, 1326, 821, 841, 0, 0, 814,
	0, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 0, 840, 848, 836, 0, 0, 0, 1312, 0,
	0, 816, 0, 847, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 815, 831, 0, 0, 0, 0, 830, 839,
	0, 0, 827, 828, 829, 0, 826, 823, 824, 825,
	817, 818, 819, 820, 822, 837, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 814,
	832, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 841, 840, 848, 836, 0, 0, 0, 0, 0,
	0, 816, 0, 847, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 815, 831, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 837, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 814,
	832, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 841, 840, 848, 836, 0, 0, 0, 0, 0,
	0, 816, 0, 847, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 815, 831, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 837, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 814,
	832, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 841, 840, 848, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 847, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 815, 831, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 814,
	832, 833, 834, 835, 843, 844, 845, 0, 0, 0,
	0, 841, 840, 848, 1320, 0, 1337, 1338, 1339, 0,
	0, 816, 0, 847, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 815, 831, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 0, 0, 814, 0, 0, 0, 0, 843,
	844, 845, 0, 0, 0, 821, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 816, 0, 847, 0,
	1325, 841, 840, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 0, 830, 0, 0, 0, 838, 0, 0,
	0, 0, 1340, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	821, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 840, 848, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 827, 828, 829,
	0, 826, 823, 824, 825, 817, 818, 819, 820, 822,
	0, 842, 1331, 1332, 1333, 832, 1330, 1327, 1328, 1329,
	1321, 1322, 1323, 1324, 1326, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 826, 823, 824, 825,
	817, 818, 819, 820, 822, 0, 842,
}
var sqlPact = [...]int{

	2268, -1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 762, -1000, -1000, -1000, -1000, 721,
	757, 189, 15539, 15539, 15278, 1089, 1089, 16844, -1000, -1000,
	19715, -1000, 1810, 494, 509, 494, 494, 505, 16844, 603,
	687, 136, -1000, 694, 19, 19454, 15539, 1301, 38, 14234,
	326, 2268, 15017, 15539, 19193, 1138, 1013, 976, 14234, 18932,
	18671, 18410, -1000, 9738, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 601, 332, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 331, -1000, 14756, -1000, 861,
	-1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	859, -1000, 15539, -1000, -1000, 18149, 17888, 330, 813, -1000,
	-1000, 564, 412, 1316, -1000, 56, -1000, -1000, 1137, -1000,
	857, 1136, 1130, 1129, 1124, 1121, 1119, 410, 862, -1000,
	599, 813, -1000, 813, -1000, -1000, -1000, 569, 16844, -1000,
	14234, -1000, 17627, 1049, 17366, -1000, 694, -1000, -1000, -1000,
	880, 1298, 1298, 1298, 1314, 157, 153, 136, 28, 15539,
	-1000, 329, 28, 6722, 6722, -1000, -1000, 326, -1000, 361,
	12400, 48, -1000, 7270, -1000, 788, 1214, 713, 677, 1207,
	-96, 14234, 15539, 15539, 629, 17105, -1000, 1203, 121, 1202,
	-1000, 120, 1197, -1000, 16, -1000, -1000, -1000, -1000, -1000,
	-1000, 326, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14495, 1342, 20272, -1000,
	8658, -1000, -1000, 12664, 1109, 12664, -1000, -1000, 1341, -1000,
	8658, -1000, 36, 33, 954, 1051, 10283, 10012, 1258, 1064,
	-1000, -1000, -1000, 52, 4165, 15539, 1145, 12664, 15539, 15539,
	15539, 15539, 15539, 15539, -1000, 953, -1000, 15539, -1000, 30,
	29, -1000, 16844, -1000, 123, -1000, 422, 918, 16583, 1222,
	910, -1000, 880, -1000, 863, 950, 7836, 8658, 136, -1000,
	-1000, 136, 136, 8658, -1000, -1000, 15539, 28, 1340, 15539,
	72, -1000, 22037, -1000, -1000, 8658, 8658, 8658, 8658, 8658,
	805, -1000, -1000, -1000, 5003, -1000, -1000, 48, 324, 345,
	-1000, -1000, 323, 48, -1000, -1000, -1000, -1000, 321, 1442,
	441, -1000, -1000, -1000, 8658, 421, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1144, 320, 319, -1000, -1000,
	-1000, -1000, 318, 317, 316, 315, 312, 311, 310, 307,
	304, 303, 302, 301, 300, 298, 745, -1000, 432, -1000,
	-1000, 432, 432, -1000, 279, 279, 280, -1000, -1000, -1000,
	-1000, 279, -1000, -1000, -1000, 404, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 295, 72, -1000, -1000, -1000, 15539, 48,
	-1000, -1000, -1000, 8658, 3894, 10, -1000, 22859, -1000, -3,
	775, -1000, 13712, 1299, 1276, 1269, 14234, 568, 552, 15539,
	15539, 431, 85, 1332, 85, 11872, -1000, 15539, 15539, -1000,
	15539, -1000, -1000, 15539, -1000, 15539, 15539, 185, 13190, 715,
	1194, 19, 8, -1000, 1315, -1000, -1000, -1000, -1000, 67,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 280, 745, 279, 279, 279, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 404, -1000, -1000, 432,
	432, 432, -1000, -1000, -6, 22859, 551, 3, 12927, 15539,
	-1000, 41, -1000, -1000, 1117, 488, -11, 727, 986, 681,
	-1000, -1000, -1000, -1000, 26, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1402, -1000, -1000, -1000, -1000,
	1423, 26, -1000, -1000, -1000, -1000, -1000, 1440, -1000, -1000,
	-1000, 4165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15539,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 727,
	986, -1000, -1000, 14234, 13451, 19, 1186, 852, 909, -1000,
	-1000, 394, 1178, -1000, -1000, -1000, -1000, 22859, -1000, 22859,
	695, 1034, -1000, 1034, 23, -1000, 21987, -1000, 270, -19,
	-1000, 431, 6722, 11608, 20272, 15539, 591, 8658, 8658, 8658,
	8658, 8658, 8658, 8658, 8658, 8658, 8658, 8658, 8658, 8658,
	8658, 8658, 8658, 8658, 8658, 8658, 8658, 8658, 8658, 1024,
	8658, 550, 8658, 8658, 8658, 8658, 1015, 814, 249, 4165,
	-1000, 653, 653, 653, 23059, 23059, 208, 20, 21617, 12,
	48, -1000, -1000, 6430, 6137, 48, 4436, -1000, 618, 1422,
	449, 22859, 1153, 1090, 267, 149, 147, 8658, 8658, 823,
	8658, 8932, 8658, 8658, 5277, 8658, 8658, 8658, 8658, 8658,
	8658, -1000, 266, -1000, -1000, -1000, -1000, 1412, -1000, -1000,
	1409, -1000, 580, 573, 1405, 431, 145, -1000, 2668, -1000,
	-1000, 7270, -1000, 715, 15539, 15539, 15539, -1000, -1000, 905,
	16322, -1000, 20272, 15539, -1000, 265, 262, 966, 963, 15539,
	15539, 16061, 15800, 15539, 725, 15539, 15539, 675, -1000, 663,
	8658, 699, -1000, 11079, 460, 15539, 666, 53, -1000, -1000,
	-1000, 391, 15539, -1000, -1000, -1000, 121, -1000, 120, -1000,
	-1000, 14234, -1000, -1000, -1000, -1000, -1000, -1000, 20272, 355,
	351, -1000, 1404, 549, -1000, 547, 545, 544, -1000, 253,
	-1000, 8658, 15539, 12927, 3, -1, -1000, -1000, 15539, 986,
	-1000, -1000, -1000, -1000, 686, -1000, 731, -1000, 10554, -1000,
	-1000, -1000, 618, -1000, -7, -1000, -1000, -1000, -1000, 143,
	-2, -1000, -1000, -1000, -1000, -1000, 15539, 290, 15539, -1000,
	15539, 15539, 1176, 1436, 15539, -1000, -1000, -1000, 8658, -1000,
	-1000, -1000, 19, 15539, -1000, 1085, -1000, -23, 1226, -148,
	13973, -1000, 10815, -1000, -1000, 407, 430, 430, 548, 548,
	548, 548, 204, 204, 2336, 876, 23244, 23244, 23244, 2481,
	241, 241, 23244, 23244, 23244, 23059, 22959, 1747, 8658, 8658,
	543, 811, 249, 1747, 8658, 1372, 1747, 1747, 1747, -1000,
	1257, -1000, -1000, -1000, 1115, 248, 8932, 8932, -1000, -1000,
	-1000, 5003, -1000, -1000, 247, 8658, -1000, 8658, -61, -73,
	-1000, -1000, -27, -1000, -1000, 9, 8658, 8658, 8658, 139,
	-1000, 138, 612, -1000, 8658, 822, 244, 242, 8658, -1000,
	-1000, 22759, 20241, 137, 1110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 134, 22659, 130, 22020, -1000, 8932, 8932, 8932,
	5003, 240, 128, 21937, -89, 22544, 7544, 7544, 7544, 107,
	22444, 8658, -89, 3304, 3186, 3089, -28, -34, -38, 1399,
	-40, 106, 403, 378, 100, 1085, -1000, -1000, 8658, -1000,
	-1000, -1000, 533, 526, 1173, -1000, 898, -1000, 709, 8658,
	15539, 237, 226, 776, -1000, 1172, 820, 1170, 820, -1000,
	-3, 773, -1000, -1000, 524, -1000, 6722, 22859, -1000, 665,
	1272, -52, -1000, -1000, -1000, 6722, 431, 11872, 11608, 7270,
	-53, -1000, -1000, 715, -1000, 515, 1395, 99, 925, 754,
	758, 639, 1390, 22859, -7, -1000, -7, -1000, -1000, -1000,
	-1000, -1000, -1000, 15539, 1052, 13451, 224, 15539, 223, 334,
	206, 15539, -1000, 1222, -1000, 98, -1000, 1078, 1311, -1000,
	11608, 869, 972, 971, 11608, 1091, 824, 824, 824, -1000,
	13973, 3611, -1000, -1000, 15539, 203, 11343, 97, 1226, 8658,
	1747, 1747, 8658, 8932, 8932, -1000, 1747, -1000, -1000, -1000,
	-1000, 1107, 202, 8658, 20272, 3276, 3245, -54, 5844, -8,
	21332, -1000, -1000, 345, -1000, 96, 6996, -1000, 22229, 31,
	31, -1000, 1432, 1219, -1000, 8658, 22326, -1000, 12136, 433,
	817, 21299, 20272, 20272, -1000, 8658, -1000, 1106, 8658, -1000,
	20272, 8932, 8932, 8932, 8932, 8932, 8932, 8932, 8932, 8932,
	8932, 8932, 8932, 8932, 8932, 8932, 8932, 8932, 8932, 8932,
	974, 8932, 1368, 1368, 1368, -15, 5551, -1000, 1142, 1106,
	8658, 8658, 20272, 95, 94, 93, -1000, 8658, -89, 8658,
	8658, 8658, -1000, -1000, -1000, 92, -1000, 1383, -1000, -1000,
	-1000, -1000, 1078, 21640, 15539, 15539, 15539, 1168, 1795, -1000,
	21249, -64, 15539, 15539, -1000, 1011, 1023, 480, 15539, -1000,
	15539, -1000, 15539, 15539, 15539, 15539, -29, 6722, 213, 19,
	15539, -29, 663, -1000, -21, -1000, 389, -1000, 339, 336,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 89, -1000,
	-1000, 1061, -1000, 9474, 200, 15539, 13451, 19, 9474, 846,
	-1000, -1000, 427, 8658, 8658, 1226, 606, 11608, 11608, 1275,
	969, 11608, -1000, -1000, -1000, -1000, -1000, -1000, 1029, 193,
	15539, 13973, 626, 1747, 2788, 227, 8658, 20272, 23159, -68,
	8658, 8658, -1000, -69, -1000, 8658, -1000, -1000, 1431, 8658,
	87, 83, 82, -1000, -1000, 22859, 8658, -1000, -1000, 19976,
	8658, 79, -1000, 78, 74, 22859, 1142, 22859, -1000, 660,
	660, 1368, 1368, 1368, 1368, 607, 607, 854, 372, 572,
	572, 572, 514, 536, 536, 572, 572, 572, 1100, 980,
	190, 23174, 8658, -74, -1000, -1000, -1000, 22859, 22859, 73,
	-1000, -1000, -1000, -89, 2886, 21011, 20952, -1000, 71, 427,
	-1000, -1000, -1000, -1000, 15539, -1000, 15539, -1000, 15539, 15539,
	1092, 892, -1000, -1000, 962, 186, 8932, 15539, -1000, 783,
	-79, -80, 889, -1000, 879, 8658, -1000, 20272, 820, 820,
	-1000, 519, 513, -1000, -29, 1228, 15539, 1268, -1000, -1000,
	-1000, 181, -1000, -1000, -1000, 771, -81, -1000, 207, 1280,
	8658, -1000, -1000, 178, 9474, -87, 70, -1000, -93, 15539,
	-1000, 15539, 22859, -89, 518, -1000, 1275, -1000, 177, 8658,
	11608, -1000, -140, -1000, 371, -1000, 15539, -97, -1000, 8658,
	8658, 23159, -99, -1000, 1747, 1747, -1000, 20929, -1000, 22229,
	-1000, -1000, -1000, 22859, 787, -1000, 20644, -1000, -1000, -1000,
	-1000, 8932, 1099, 176, 20272, 20611, -1000, -1000, 8658, -1000,
	-1000, -1000, -1000, -1000, 1352, -1000, -1000, 15539, 895, -1000,
	-1000, 8658, 23174, 175, 1052, 174, -1000, -1000, -1000, 710,
	-1000, -1000, 22859, 1281, -1000, -1000, 15539, 15539, 565, -101,
	15539, -1000, -1000, 4729, 15539, 783, 9474, 1293, 48, 15539,
	1293, 20561, 4436, -103, -1000, 1052, 783, 169, -49, -1000,
	1330, 1426, -1000, 15539, 22859, -1000, 1029, -1000, 4165, -105,
	-1000, 1747, 1747, -1000, -1000, 68, 817, 1304, -1000, 22474,
	8932, 20272, -107, -1000, 20323, -1000, -1000, 1164, 20264, 942,
	15539, -1000, 15539, 15539, 468, 15539, -1000, -1000, 627, -1000,
	431, -1000, 168, 1052, -1000, -1000, -1000, -1000, 1280, 9,
	783, -1000, 1052, 9474, 15539, 165, -1000, -115, -1000, -1000,
	-1000, -1000, 696, 8658, 22474, -119, -1000, -1000, 1158, -1000,
	831, 769, 60, -120, 159, -1000, 8658, -1000, 11872, -1000,
	15539, -1000, 1293, 54, 1052, -1000, -124, -1000, -1000, -1000,
	22, 8384, 8384, -89, -1000, 15539, -1000, 840, 836, 644,
	-1000, -1000, -1000, -1000, -1000, 942, 15539, 22859, -121, -125,
	-1000, -1000, -1000, 783, -1000, -1000, -1000, 9203, 917, 654,
	21699, -1000, -1000, -1000, 1235, -1000, 472, 987, 987, 831,
	-126, -1000, 820, 1052, 1348, -1000, -1000, -1000, -1000, -1000,
	-1000, 1355, -1000, -1000, 965, -1000, -1000, -1000, -1000, -1000,
	8110, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1660, 1659, 1358, 126, 124, 1657, 1656, 1655, 1653,
	103, 122, 121, 119, 1651, 90, 1650, 1649, 1637, 102,
	1636, 1635, 1634, 62, 1633, 1630, 1628, 1626, 1622, 97,
	37, 161, 1996, 149, 1621, 1620, 1619, 12, 98, 67,
	1611, 2, 61, 91, 107, 708, 47, 1610, 1609, 133,
	31, 17, 1843, 93, 142, 123, 118, 1608, 1605, 1603,
	44, 1602, 3, 1599, 1598, 1596, 52, 27, 1594, 15,
	24, 1593, 1589, 120, 1584, 68, 89, 114, 36, 128,
	75, 1583, 48, 13, 80, 1580, 25, 1579, 40, 78,
	139, 1576, 53, 144, 59, 21, 55, 1574, 1573, 1572,
	1571, 76, 1570, 88, 86, 1569, 1568, 81, 1566, 132,
	131, 1565, 1564, 136, 1563, 1560, 1558, 724, 1557, 1555,
	634, 1554, 9, 46, 66, 5, 110, 109, 19, 1553,
	22, 1552, 1380, 1276, 791, 1547, 50, 43, 83, 32,
	58, 51, 1546, 1545, 112, 1541, 1536, 1533, 1532, 1531,
	82, 1529, 73, 138, 42, 54, 105, 23, 45, 84,
	100, 145, 99, 1528, 1527, 117, 1526, 104, 1525, 1523,
	520, 115, 1521, 1520, 1518, 274, 264, 229, 28, 1516,
	1515, 185, 155, 1513, 1511, 150, 1507, 1504, 143, 141,
	18, 1503, 116, 1502, 87, 1501, 0, 77, 39, 1500,
	125, 79, 1497, 1496, 1495, 1491, 20, 6, 8, 7,
	10, 4, 30, 29, 1488, 1485, 130, 95, 1482, 148,
	1479, 1477, 26, 1474, 1473, 16, 1472, 14, 1467, 11,
	1, 1466, 137, 1465, 101, 1464, 1362, 1463, 140, 1461,
	1448, 1367, 85,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 39, 39, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 36, 36, 41, 41, 41, 40,
	40, 35, 35, 5, 5, 5, 5, 10, 11, 11,
	11, 11, 11, 11, 79, 79, 78, 78, 81, 81,
	12, 12, 13, 13, 13, 13, 13, 13, 13, 13,
	166, 166, 165, 14, 142, 142, 15, 15, 15, 15,
	16, 102, 102, 17, 17, 17, 17, 18, 22, 232,
	232, 232, 236, 236, 237, 237, 238, 238, 238, 238,
	238, 238, 238, 234, 234, 25, 25, 25, 25, 25,
	121, 117, 117, 119, 119, 119, 119, 44, 116, 116,
	116, 116, 118, 118, 118, 118, 189, 188, 188, 194,
	194, 194, 57, 57, 57, 57, 57, 58, 58, 58,
	187, 187, 187, 187, 195, 195, 195, 195, 195, 195,
	59, 59, 59, 193, 193, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 233, 233, 235, 235, 8, 8, 9, 9,
	60, 60, 61, 61, 124, 124, 124, 124, 62, 62,
	123, 204, 204, 205, 205, 205, 205, 205, 205, 206,
	206, 206, 206, 206, 206, 206, 202, 202, 203, 200,
	200, 201, 201, 201, 201, 239, 239, 122, 122, 65,
	65, 209, 209, 209, 209, 207, 207, 207, 207, 207,
	210, 208, 211, 211, 211, 211, 211, 153, 153, 153,
	28, 7, 7, 106, 106, 69, 69, 157, 157, 157,
	51, 51, 37, 37, 37, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 107, 107, 108, 108, 20, 24,
	27, 27, 27, 27, 27, 241, 241, 48, 48, 48,
	48, 49, 49, 120, 120, 120, 120, 120, 43, 6,
	6, 42, 42, 19, 19, 19, 19, 19, 54, 54,
	113, 113, 113, 115, 115, 114, 114, 114, 92, 92,
	29, 74, 74, 83, 83, 84, 84, 163, 85, 85,
	23, 23, 32, 32, 30, 30, 30, 30, 30, 30,
	31, 31, 33, 33, 33, 33, 33, 33, 33, 217,
	217, 217, 219, 219, 216, 218, 218, 240, 240, 93,
	93, 93, 64, 63, 63, 67, 67, 66, 68, 68,
	156, 90, 90, 90, 90, 109, 110, 110, 111, 111,
	112, 112, 89, 89, 139, 139, 34, 34, 73, 73,
	75, 75, 130, 130, 131, 131, 129, 129, 129, 158,
	158, 158, 158, 159, 159, 159, 159, 159, 159, 154,
	154, 154, 154, 155, 155, 164, 164, 96, 96, 96,
	96, 94, 94, 95, 95, 160, 160, 160, 160, 91,
	91, 161, 161, 161, 125, 125, 167, 167, 167, 72,
	72, 72, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 169, 169, 169, 169, 171,
	171, 171, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 172, 172, 179, 179,
	180, 180, 181, 182, 173, 173, 174, 174, 175, 176,
	183, 183, 183, 183, 185, 185, 177, 177, 177, 177,
	177, 178, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 104, 104, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 212, 212, 212,
	212, 212, 212, 212, 214, 214, 215, 215, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 220, 220, 221, 221, 222, 222,
	223, 223, 225, 226, 226, 226, 227, 231, 231, 224,
	224, 228, 228, 228, 229, 229, 230, 230, 230, 230,
	230, 144, 144, 144, 145, 145, 146, 80, 80, 141,
	141, 140, 140, 140, 143, 143, 97, 184, 184, 184,
	184, 184, 184, 184, 98, 98, 105, 99, 99, 100,
	100, 100, 100, 100, 100, 136, 137, 101, 101, 101,
	138, 138, 147, 151, 151, 150, 149, 149, 148, 148,
	128, 128, 128, 128, 127, 126, 86, 86, 242, 242,
	152, 152, 87, 87, 88, 82, 82, 162, 162, 162,
	162, 76, 76, 56, 56, 77, 77, 52, 52, 55,
	53, 53, 53, 53, 70, 70, 71, 71, 50, 50,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 186, 186, 186, 45, 45, 45, 46, 46, 47,
	47, 191, 191, 191, 192, 192, 192, 192, 190, 190,
	190, 190, 190, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	2, 4, 2, 0, 2, 0, 7, 10, 5, 8,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 4,
	7, 3, 0, 6, 6, 8, 5, 7, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 3,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -10, -11, -12, -14,
	-16, -17, -18, -19, -21, -22, -24, -23, -25, -26,
	-27, -20, -28, -29, 22, -6, -7, -8, -9, -218,
	90, 98, 191, 97, 83, 113, 205, 212, -30, -32,
	220, -121, 221, 33, 229, 57, 93, 207, 202, 249,
	64, -217, -33, -31, 295, 270, 276, 215, -34, 236,
	263, 298, 236, 76, 126, 85, 130, 257, 256, 76,
	126, 236, -13, 295, -23, -5, -11, -4, -19, -29,
	-10, -12, 22, -45, 4, -196, -198, 19, 20, 22,
	32, 33, 38, 42, 45, 56, 57, 58, 60, 62,
	63, 66, 67, 74, 75, 76, 77, 79, 83, 85,
	89, 90, 92, 97, 98, 103, 104, 107, 109, 114,
	119, 120, 127, 130, 125, 139, 141, 142, 147, 150,
	153, 155, 156, 157, 158, 159, 161, 162, 164, 166,
	163, 169, 171, 172, 178, 181, 184, 185, 186, 189,
	191, 193, 194, 195, 197, 198, 202, 200, 201, 203,
	205, 207, 208, 210, 212, 213, 214, 217, 218, 220,
	221, 223, 226, 228, 229, 232, 230, 235, 237, 238,
	245, 249, 250, 251, 252, 255, 256, 257, 260, 261,
	262, 266, 271, 272, 273, 274, 27, 34, 35, 36,
	37, 39, 40, 43, 44, 48, 49, 50, 52, 78,
	80, 81, 96, 99, 105, 115, 117, 121, 122, 131,
	132, 133, 134, 136, 145, 168, 170, 179, 183, 188,
	190, 196, 209, 216, 224, 225, 231, 233, 240, 241,
	242, 246, 247, 263, 264, -45, -45, 191, 21, -236,
	21, -237, -238, 64, 90, 113, 215, 130, 85, 256,
	-236, -49, 212, -45, -117, 150, 218, 209, 245, -118,
	-116, -189, 240, 159, -78, -45, 4, 76, 56, 77,
	114, 126, 127, 61, 62, 142, 237, 240, 245, 21,
	64, -241, 245, 245, -241, -241, -48, 245, 243, -49,
	-240, 236, 236, -106, 76, 254, -31, -33, -32, -66,
	-67, 253, 135, 95, 177, -30, -32, -217, -219, 197,
	-216, -45, -219, -63, -64, 21, 87, 299, -160, -52,
	175, -45, -88, 295, -3, -160, 121, -45, -55, 121,
	-52, 111, 137, 137, -161, -160, -45, 121, -56, 121,
	-55, -79, 121, -78, -166, -165, -192, 4, -196, -198,
	-197, 263, 54, 65, 112, 129, 123, 138, 140, 146,
	148, 160, 180, 182, 206, 222, 236, -142, 295, -102,
	295, -45, 21, 174, 299, 174, -45, -117, 50, -117,
	295, -119, -43, -44, 139, 193, 243, 280, 111, 274,
	-59, 5, 82, -81, 297, 111, -233, 174, 111, 111,
	111, 111, 111, 111, 274, 139, 193, 236, -120, -43,
	-44, -120, 243, -49, -91, -160, -78, 121, 126, -45,
	121, -66, -67, -90, -109, -110, 149, 173, -93, 21,
	87, -93, -93, 42, 296, 296, 299, -219, -71, 295,
	-82, -162, -132, 288, -134, 286, 287, 292, 165, 275,
	-144, -52, -135, 9, 295, -147, -214, -32, 96, 28,
	-145, -146, 209, -45, 7, 8, 5, 6, -50, -169,
	-178, 248, 100, 167, 46, -212, -213, 4, -196, -191,
	-170, -180, -174, -177, 136, 54, 69, 72, 70, 73,
	219, 258, 47, 27, 99, 183, 188, 233, 246, 247,
	121, 168, 122, 52, 115, 145, 89, 35, 37, 39,
	40, 48, 49, 78, 80, 81, 105, 131, 132, 133,
	134, 170, 196, 224, 231, 241, 242, 264, -197, -181,
	-182, -175, -176, -183, -82, -88, 288, -52, 295, -86,
	-128, -127, -126, 293, 297, -87, -152, -132, 82, -39,
	200, -38, 20, 22, 90, 261, 96, 200, 200, 96,
	300, -161, -54, -52, -54, 220, -45, 29, 96, -41,
	299, 45, 203, 96, -41, 299, 96, 296, 299, -160,
	121, 29, -141, -167, -168, -170, -179, -173, -177, -178,
	38, 44, 43, 238, 216, 225, 36, 131, 132, 133,
	134, 224, 35, 196, 105, 89, 81, 80, 170, 40,
	39, -181, -182, -175, -176, 78, 241, 242, 136, 37,
	49, 48, 264, 231, -80, -132, -232, -77, 236, 76,
	-53, -45, 288, -238, -232, 29, -80, 299, 299, 147,
	-58, 153, 164, 119, -188, 82, -194, -187, -153, 9,
	248, 100, 174, -193, 8, 287, -186, -192, 5, 7,
	286, -188, 82, 67, -195, 5, 4, -178, -153, 82,
	150, 297, -190, 4, -196, -198, -197, -199, 21, 23,
	24, 25, 26, 28, 29, 30, 31, 41, 46, 47,
	51, 53, 55, 61, 64, 68, 69, 70, 71, 72,
	73, 82, 84, 86, 87, 88, 91, 93, 95, 100,
	101, 102, 108, 110, 111, 113, 116, 118, 124, 126,
	128, 135, 137, 143, 144, 149, 151, 152, 165, 167,
	173, 174, 175, 176, 177, 187, 192, 199, 204, 215,
	219, 227, 234, 236, 239, 243, 244, 248, 253, 254,
	258, 259, 265, 267, 268, 269, 270, -189, -235, 108,
	-232, -189, -189, -189, -189, -189, -45, 147, -189, 299,
	299, -49, -41, 299, 295, 29, 165, -46, 121, -45,
	-42, 92, 165, -90, -110, -109, -111, -132, 21, -132,
	-134, -31, -31, -31, -68, -156, -132, -216, 29, -70,
	-45, -73, 299, 111, 10, 53, 32, 286, 287, 288,
	289, 106, 290, 283, 284, 285, 282, 278, 279, 280,
	59, 154, 211, 12, 13, 14, 25, 176, 148, 275,
	123, 222, 292, 15, 16, 17, 138, 34, 124, 29,
	4, -132, -132, -132, -132, -132, 182, -32, -132, -80,
	-86, -32, -140, 293, 295, -86, 295, 5, 5, 295,
	-148, -132, -220, 271, 108, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 190, -185, 266, -185, -185, -171, 295, -171, -172,
	295, -171, 272, 276, 295, -73, -52, -128, -132, -190,
	288, 299, 296, 299, 243, -107, 61, 55, -123, 121,
	55, -200, -45, 61, -201, 51, 254, 192, 110, -107,
	61, -107, 61, 61, -160, 243, 243, -55, -45, -125,
	268, -113, -23, 295, 82, 29, -113, -83, -84, -163,
	-85, -52, 295, -45, -45, -55, -56, -78, -79, -13,
	-165, 96, -15, -23, -19, -29, -10, 296, 299, -72,
	28, -103, 295, 273, 157, 79, 120, 156, -104, 214,
	296, 299, 243, 299, -77, -70, -127, -126, 111, 245,
	296, -44, -43, -57, 195, 226, 201, 217, 299, 8,
	7, 7, 5, -190, -234, -45, -44, -43, -160, -60,
	-61, -124, -123, -202, -203, -200, 126, 254, 101, -23,
	96, 174, 165, 280, 96, -112, 209, 210, 299, -37,
	30, 86, 295, 299, 296, -125, -162, -75, -158, -160,
	-32, -159, 295, -167, -78, 240, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, 148, 123,
	222, 34, 124, -132, 243, -132, -132, -132, -132, 167,
	165, 248, 100, 255, 87, 171, -242, 234, 31, -138,
	-32, 295, -190, -144, 209, 295, 296, 299, -80, -143,
	294, -140, -80, 296, 296, -80, 265, 21, 87, 288,
	-103, 7, -151, -150, 267, -221, 103, 116, 295, 296,
	296, -132, -132, -97, -184, 4, 273, 157, 79, 120,
	156, 214, -98, -132, -99, -133, -134, 286, 287, 292,
	295, 209, -100, -132, -80, -132, 41, 144, 244, -101,
	-132, 111, -80, -132, -132, -132, -80, -80, -80, 295,
	7, 7, 240, 240, 7, -125, 296, 294, 303, -152,
	-38, -52, -45, -45, 165, -123, 121, -167, -45, 295,
	295, 141, 141, -45, -45, 121, -45, 121, -45, -45,
	-39, 200, -45, -45, 200, -92, 204, -132, -92, -115,
	174, -76, -52, 263, -45, 204, -74, 299, 111, 280,
	-76, -41, -41, -160, -167, 293, 293, 7, 243, 243,
	243, 243, 295, -132, -234, -53, -234, -43, 252, 58,
	195, -194, -103, 299, 296, 299, -46, 126, -46, -78,
	-52, 96, 5, -45, -156, -15, -45, -89, 116, -164,
	299, 277, 65, -96, 140, 160, 112, 146, 206, 129,
	-129, 300, -155, -154, 29, -45, -32, -159, -158, 274,
	-132, -132, 243, -242, 234, -138, -132, 167, 248, 100,
	255, 87, 171, 111, 295, -133, -133, -80, 295, -80,
	-132, 294, 294, 299, 296, -67, 299, -66, -132, -80,
	-80, 296, 296, -149, -150, 91, -132, -226, 181, 295,
	295, -132, 29, 299, 296, 111, 296, -105, 187, 296,
	10, 286, 287, 288, 289, 106, 290, 283, 284, 285,
	282, 278, 279, 280, 59, 154, 211, 12, 13, 14,
	138, 124, -133, -133, -133, -80, 295, 296, -136, -137,
	111, 108, 29, -101, -101, -101, 296, 111, -80, 299,
	299, 299, 296, 296, 296, 7, 296, 299, 296, 274,
	274, 296, -89, -132, 243, 243, 96, 165, -204, -201,
	-132, -70, 295, 295, -36, 90, 220, -108, 96, -41,
	96, -41, 243, -107, 61, 243, -82, 204, 60, 296,
	299, -82, -125, -84, -75, -152, 296, 294, 7, 7,
	296, 157, 120, 156, -104, 156, -104, -104, 7, -45,
	-62, 125, -124, 295, -46, 295, 295, 29, 295, -45,
	-42, 296, -139, 118, 42, -158, 171, 140, 140, -158,
	-96, 140, -94, 180, -94, -94, -155, -190, 301, -45,
	295, 296, -132, -132, -133, -133, 111, 295, -132, -141,
	25, 25, 296, -80, 296, 299, 296, -140, 296, 265,
	-67, -67, -67, 5, 93, -132, 239, -227, -45, 295,
	268, -66, 296, -167, -167, -132, -136, -132, -167, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, 87, 165,
	171, -133, 299, -80, 296, -137, -136, -132, -132, -167,
	296, 296, 296, -80, -132, -132, -132, 296, 7, -139,
	294, -45, -45, -123, 96, -205, 61, -206, 53, 101,
	64, 165, 167, 254, 192, 51, 82, 199, 296, 296,
	-70, -70, 165, 82, 165, 82, 75, 250, -45, -45,
	-52, -45, -45, -45, -82, -114, 295, 174, -23, -52,
	-92, 280, 294, 294, 296, 124, -69, -157, -45, -215,
	295, -212, -213, -50, 295, -70, -60, -23, -69, 174,
	-222, 269, -132, -80, 235, -158, -158, -95, 259, 174,
	140, -158, -131, -130, 109, 163, 295, -70, -154, 25,
	25, -132, -141, 296, -132, -132, 296, -132, 5, -132,
	296, 296, 296, -132, -231, -45, -132, 296, 296, 296,
	-137, 111, 87, 171, 295, -132, 296, 296, 299, 296,
	296, 296, -222, -123, -45, -78, -45, 101, 121, 167,
	141, 295, -133, -52, -122, -239, 63, 232, 296, 296,
	167, 167, -132, -167, -41, -41, 243, 243, 88, -70,
	61, -88, -32, 295, 184, 296, 299, -51, -86, 53,
	-51, -132, 295, -69, 296, 296, 296, -52, -223, -225,
	-45, 240, -95, 295, -132, -158, 299, 302, 280, -70,
	296, -132, -132, 296, 296, -67, -224, 186, 296, -133,
	111, 295, -141, 296, -132, -206, -46, 165, -132, -47,
	295, -62, 295, 199, -40, 53, -45, -45, 256, 166,
	296, -45, -45, -122, -157, -37, -78, -37, 296, -80,
	296, -62, -122, 295, 299, 29, 5, -70, -130, -190,
	296, 296, -67, 42, -133, -141, 296, 296, 96, 296,
	-209, 155, -45, -70, -52, -35, 259, -78, 220, -125,
	295, -62, -51, -67, -122, -62, -69, -225, -227, 296,
	-228, 194, 210, -80, 296, 101, -207, -210, -208, 174,
	112, 185, 223, 296, 296, -65, 295, -132, -83, -70,
	-37, 296, -62, 296, 296, -229, -230, 34, 251, 67,
	-132, -229, -45, -208, 174, -210, 174, 256, 85, -209,
	-70, -125, 296, -122, -230, 189, 107, 209, 189, 107,
	-211, 162, 203, 45, 220, -211, -207, 296, -41, -62,
	25, 19, 167, 82, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 56, 0,
	0, 356, 0, 0, 0, 0, 0, 0, 330, -2,
	0, 119, 0, 286, 0, 286, 286, 290, 0, 358,
	254, 355, -2, 366, 0, 0, 0, 364, 344, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 72, 73, 74, 75, 76, 77,
	78, 79, 0, 85, 784, 785, 786, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 92, 93, 866, 95, 0,
	102, 103, 104, 106, 107, 108, 109, 110, 111, 112,
	0, 279, 880, 292, 115, 845, 884, 948, 896, 122,
	132, 0, 954, -2, 136, 66, 165, 166, 0, 168,
	183, 0, 0, 0, 0, 0, 176, 0, 0, 180,
	0, 297, 285, 297, 282, 283, 284, 287, 0, 278,
	0, 357, 0, 0, 0, 253, -2, 340, 341, -2,
	0, 361, 361, 361, 0, 0, 341, 0, 349, 870,
	352, 767, 350, 0, 0, 363, 362, 0, 345, 425,
	0, 757, 386, 0, 2, 0, 933, 0, 0, 933,
	0, 0, 0, 0, 0, 431, 58, 933, 48, 933,
	753, 48, 933, 64, 0, 80, 82, 794, 795, 796,
	797, 959, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 0, 0, 0, 90,
	0, 94, 96, 0, 0, 0, 291, 116, 923, 118,
	0, 121, 123, 124, 0, 0, 0, 0, 0, 0,
	135, 160, 161, 67, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 179, 0, 280, 293,
	294, 281, 0, 289, 48, 429, 0, 933, 788, 302,
	933, -2, 0, 336, 373, 374, 0, 0, 0, 359,
	360, 0, 0, 0, 332, 333, 0, 351, 0, 0,
	389, 745, 749, 750, 518, 0, 0, 0, 0, 0,
	0, 605, 606, 607, 0, 609, 610, 611, 928, 0,
	615, 616, 948, 757, 770, 771, 772, 773, 0, 0,
	0, 778, 779, 780, 729, 655, 625, -2, -2, 768,
	455, 456, 457, 458, -2, 961, 629, 631, 633, 634,
	635, 636, 0, 912, 929, 944, 945, 953, 957, 958,
	933, 941, 934, 924, 931, 940, 826, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 793, 480,
	481, 486, 487, 489, 389, 387, 426, 427, 0, 758,
	736, 730, 731, 0, 0, 0, 742, 740, 741, 25,
	275, 27, 0, 275, 275, 0, 0, 0, 0, 0,
	0, 435, 0, 308, 0, 0, 432, 0, 0, 60,
	0, 46, 47, 0, 62, 0, 0, 356, 0, 0,
	933, 356, 0, 689, 441, 442, 443, 444, 445, 515,
	448, 449, 450, 451, 452, 453, 454, 462, 463, 464,
	465, 466, 467, 468, 477, 0, 461, 461, 461, 474,
	475, 478, 479, 484, 485, 496, 497, 499, 501, 495,
	495, 495, 492, 493, 0, 687, 0, 99, 0, 821,
	755, 760, 761, 105, 0, 0, 0, 0, 0, 0,
	127, 147, 148, 149, 128, 130, 137, 139, 140, 141,
	150, 151, 152, 153, 247, 0, 249, 163, 164, 781,
	0, 129, 131, 133, 134, 154, 155, 0, 157, 158,
	159, 0, 68, 798, 799, 800, 801, 802, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 167, 169, 0,
	182, 170, 171, 172, 173, 174, 175, 178, 181, 0,
	0, 288, 250, 0, 191, 0, 0, 0, 933, 787,
	299, 0, 0, 339, 371, 372, 375, 378, 379, 376,
	518, 346, 347, 348, 367, 368, 264, 353, 0, 0,
	764, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	748, 522, 523, 524, 546, 547, 0, -2, 687, 0,
	612, 613, 614, 0, 0, -2, 0, 775, 515, 0,
	0, 728, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 714, 0, 0, 0, 0, 0, 0, 0,
	0, 470, 483, 494, 491, 490, 472, 0, 471, 469,
	0, 473, 0, 0, 0, 435, 0, 737, 0, 734,
	735, 0, 744, 0, 0, 0, 0, 274, 29, 933,
	0, 39, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 759, 319,
	0, 319, 310, 0, 0, 0, 306, 322, 323, 325,
	326, 0, 0, 433, 59, 754, 48, 65, 48, 71,
	81, 0, 83, 86, 87, 88, 89, 84, 0, 436,
	438, 446, 0, 502, 503, 504, 505, 506, 507, 516,
	91, 0, 0, 0, 100, 101, 762, 763, 0, 0,
	120, 125, 126, 298, 0, 144, 0, 146, 0, 248,
	783, 782, 515, 69, 184, 113, 295, 296, 430, 0,
	190, 192, 194, 195, 196, 197, 788, 0, 788, 188,
	0, 0, 0, 0, 0, 377, 380, 381, 0, 370,
	262, 263, 356, 0, 766, 383, 746, 416, 390, 398,
	414, 401, 0, 519, 520, 0, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, -2, -2, -2, 538,
	539, 540, -2, -2, -2, 544, 545, -2, 0, 0,
	0, 739, 0, -2, 0, 554, -2, -2, -2, 558,
	0, 561, 563, 565, 0, 0, 0, 0, 738, 575,
	720, 0, 747, 560, 0, 0, 608, 0, 0, 0,
	693, 694, 0, -2, 617, 366, 0, 0, 0, 0,
	776, 0, 727, 723, 0, 665, 0, 0, 0, 630,
	632, 0, 0, 0, 0, 697, 698, 699, 700, 701,
	702, 703, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 948, 0, 687, 713, 0, 0, 0, 0, 0,
	687, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 383, 428, 732, 0, 743,
	28, 266, 0, 0, 0, 31, 933, 202, 0, 0,
	0, 0, 0, 277, 40, 933, 48, 933, 48, 41,
	26, 275, 265, 268, 0, 57, 0, 434, 303, 304,
	0, 0, 751, 312, 309, 0, 435, 0, 0, 0,
	0, 61, 63, 0, 690, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 97, 756, 98, 117, 142, 143,
	145, 138, 156, 0, 199, 0, 0, 788, 0, 0,
	0, 0, 301, 302, 369, 0, 765, 385, 0, 388,
	0, 0, 0, 0, 0, 0, 422, 422, 422, 420,
	414, 0, 400, 413, 0, 412, -2, 401, 0, 0,
	-2, -2, 0, 0, 0, 576, -2, 559, 562, 564,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 691, 692, 0, -2, 0, 0, 365, 366, 366,
	366, 623, 0, 0, 724, 0, 0, 624, 0, 0,
	0, 0, 0, 0, 639, 0, 640, 0, 0, 641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 580, 581, 0, 0, 642, 711, 712,
	0, 0, 0, 0, 0, 0, 647, 0, 718, 0,
	0, 0, 651, 652, 653, 0, 459, 0, 476, 498,
	500, 488, 385, 0, 0, 0, 0, 0, 200, 219,
	0, 0, 0, 0, 33, 0, 0, 0, 0, 37,
	0, 43, 0, 0, 0, 0, 318, 0, 317, 0,
	0, 307, 319, 324, 321, 327, 0, 439, 0, 0,
	447, 508, 509, 510, 511, 512, 513, 514, 0, 114,
	186, 0, 193, 0, 0, 0, 191, 0, 0, 0,
	300, 354, 659, 0, 0, 391, 0, 0, 0, 0,
	0, 0, 417, 421, 418, 419, 399, 396, 0, 410,
	0, 403, 521, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 721, 0, 682, 0, -2, 695, 618, 0,
	0, 0, 0, 777, 722, 726, 0, 663, 664, 668,
	0, 0, 628, 0, 0, 696, 705, 706, 578, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, -2,
	-2, -2, 595, 596, 597, -2, -2, -2, 0, 0,
	0, 707, 0, 0, 685, 709, 710, 715, 716, 0,
	644, 645, 646, 717, 0, 0, 0, 482, 0, 659,
	733, 270, 272, 30, 0, 201, 0, 204, 0, 0,
	0, 0, 210, 211, 0, 0, 0, 0, 221, 228,
	0, 0, 0, 45, 0, 0, 276, 0, 48, 48,
	267, 0, 0, 269, 305, 0, 0, 0, 311, 752,
	320, 0, 440, 437, 517, 0, 0, 255, 261, 261,
	0, 626, 627, 0, 0, 0, 0, 189, 0, 0,
	342, 0, 384, 382, 0, 404, 0, 406, 0, 0,
	0, 408, 0, 394, 0, 393, 0, 0, 402, 0,
	0, -2, 0, 569, -2, -2, 681, 688, 774, 366,
	619, 621, 622, 725, 670, 667, 0, 654, 637, 638,
	704, 0, 0, 0, 0, 688, 684, 643, 0, 649,
	650, 460, 343, 32, 0, 205, 206, 788, 0, 209,
	212, 0, 214, 790, 199, 0, 225, 226, 223, 0,
	34, 35, 44, 50, 36, 42, 0, 0, 0, 0,
	0, 328, 329, 0, 0, 228, 0, 264, 769, 0,
	264, 0, 0, 0, 218, 199, 228, 0, 658, 660,
	0, 0, 405, 0, 424, 407, 0, 397, 0, 0,
	411, -2, -2, 570, 683, 0, 366, 0, 656, -2,
	0, 0, 0, 686, 0, 203, 207, 0, 0, 234,
	0, 222, 0, 0, 52, 0, 271, 273, 0, 314,
	435, 316, 0, 199, 256, 257, 260, 258, 261, 366,
	228, 187, 199, 0, 0, 0, 415, 0, 395, 392,
	409, 620, 673, 0, -2, 0, 603, 648, 0, 213,
	239, 0, 0, 0, 230, 38, 0, 49, 0, 315,
	0, 216, 264, 0, 199, 251, 0, 661, 662, 423,
	0, 0, 0, 669, 604, 0, 215, 235, 236, 0,
	231, 232, 233, 789, 227, 234, 0, 51, 435, 0,
	259, 618, 217, 228, 666, 671, 674, -2, 899, 818,
	0, 672, 208, 237, 0, 238, 0, 0, 0, 239,
	0, 313, 48, 199, 0, 676, 677, 678, 679, 680,
	240, 0, 243, 244, 0, 241, 224, 229, 198, 252,
	0, 242, 245, 246, 675,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 284, 3, 290, 285, 3,
	295, 296, 288, 286, 299, 287, 297, 289, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 303, 298,
	278, 280, 279, 3, 300, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 293, 3, 294, 283, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 301, 282, 302, 292,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 281, 57621, 291, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:713
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:719
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:832
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:839
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:887
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:891
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:994
		{ /* SKIP DOC */
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{ /* SKIP DOC */
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = Low
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = Normal
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = High
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1375
		{
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1530
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1744
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = true
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = false
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1846
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = Ascending
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = Descending
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = true
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = false
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1917
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1959
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.str = ""
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2054
		{
			unimplementedWithIssue(6637)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2061
		{
			unimplementedWithIssue(6637)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2103
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			unimplementedWithIssue(7841)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2133
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2367
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2370
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2374
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = false
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = false
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = true
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2399
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &From{}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = astFullJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.str = astLeftJoin
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.str = astRightJoin
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = astInnerJoin
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2744
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2834
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			unimplementedWithIssue(2115)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
			unimplementedWithIssue(2115)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2839
		{
			unimplementedWithIssue(2115)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2840
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2848
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = nil
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2953
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3025
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3097
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3141
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3178
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3590
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3591
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3632
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3677
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3726
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3731
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3743
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3747
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3763
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3773
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3777
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4115
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4272
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4308
		{
			unimplemented()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = DNull
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.str = ""
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
