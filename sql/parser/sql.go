// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HELP = 57463
const HIGH = 57464
const HOUR = 57465
const IF = 57466
const IFNULL = 57467
const ILIKE = 57468
const IN = 57469
const INTERLEAVE = 57470
const INDEX = 57471
const INDEXES = 57472
const INITIALLY = 57473
const INNER = 57474
const INSERT = 57475
const INT = 57476
const INT8 = 57477
const INT64 = 57478
const INTEGER = 57479
const INTERSECT = 57480
const INTERVAL = 57481
const INTO = 57482
const IS = 57483
const ISOLATION = 57484
const JOIN = 57485
const KEY = 57486
const KEYS = 57487
const LATERAL = 57488
const LEADING = 57489
const LEAST = 57490
const LEFT = 57491
const LEVEL = 57492
const LIKE = 57493
const LIMIT = 57494
const LOCAL = 57495
const LOCALTIME = 57496
const LOCALTIMESTAMP = 57497
const LOW = 57498
const LSHIFT = 57499
const MATCH = 57500
const MINUTE = 57501
const MONTH = 57502
const NAME = 57503
const NAMES = 57504
const NATURAL = 57505
const NEXT = 57506
const NO = 57507
const NO_INDEX_JOIN = 57508
const NORMAL = 57509
const NOT = 57510
const NOTHING = 57511
const NULL = 57512
const NULLIF = 57513
const NULLS = 57514
const NUMERIC = 57515
const OF = 57516
const OFF = 57517
const OFFSET = 57518
const ON = 57519
const ONLY = 57520
const OR = 57521
const ORDER = 57522
const ORDINALITY = 57523
const OUT = 57524
const OUTER = 57525
const OVER = 57526
const OVERLAPS = 57527
const OVERLAY = 57528
const PARENT = 57529
const PARTIAL = 57530
const PARTITION = 57531
const PLACING = 57532
const POSITION = 57533
const PRECEDING = 57534
const PRECISION = 57535
const PREPARE = 57536
const PRIMARY = 57537
const PRIORITY = 57538
const RANGE = 57539
const READ = 57540
const REAL = 57541
const RECURSIVE = 57542
const REF = 57543
const REFERENCES = 57544
const RENAME = 57545
const REPEATABLE = 57546
const RELEASE = 57547
const RESTRICT = 57548
const RETURNING = 57549
const REVOKE = 57550
const RIGHT = 57551
const ROLLBACK = 57552
const ROLLUP = 57553
const ROW = 57554
const ROWS = 57555
const RSHIFT = 57556
const SAVEPOINT = 57557
const SEARCH = 57558
const SECOND = 57559
const SELECT = 57560
const SERIAL = 57561
const SERIALIZABLE = 57562
const SESSION = 57563
const SESSION_USER = 57564
const SET = 57565
const SHOW = 57566
const SIMILAR = 57567
const SIMPLE = 57568
const SMALLINT = 57569
const SMALLSERIAL = 57570
const SNAPSHOT = 57571
const SOME = 57572
const SPLIT = 57573
const SQL = 57574
const START = 57575
const STDIN = 57576
const STRICT = 57577
const STRING = 57578
const STORING = 57579
const SUBSTRING = 57580
const SYMMETRIC = 57581
const SYSTEM = 57582
const TABLE = 57583
const TABLES = 57584
const TEXT = 57585
const THEN = 57586
const TIME = 57587
const TIMESTAMP = 57588
const TIMESTAMPTZ = 57589
const TO = 57590
const TRAILING = 57591
const TRANSACTION = 57592
const TREAT = 57593
const TRIM = 57594
const TRUE = 57595
const TRUNCATE = 57596
const TYPE = 57597
const UNBOUNDED = 57598
const UNCOMMITTED = 57599
const UNION = 57600
const UNIQUE = 57601
const UNKNOWN = 57602
const UPDATE = 57603
const UPSERT = 57604
const USER = 57605
const USING = 57606
const VALID = 57607
const VALIDATE = 57608
const VALUE = 57609
const VALUES = 57610
const VARCHAR = 57611
const VARIADIC = 57612
const VIEW = 57613
const VARYING = 57614
const WHEN = 57615
const WHERE = 57616
const WINDOW = 57617
const WITH = 57618
const WITHIN = 57619
const WITHOUT = 57620
const YEAR = 57621
const ZONE = 57622
const NOT_LA = 57623
const WITH_LA = 57624
const AS_LA = 57625
const POSTFIXOP = 57626
const UMINUS = 57627

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4845

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	304, 27,
	-2, 374,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	1, 349,
	177, 349,
	207, 349,
	302, 349,
	304, 349,
	-2, 359,
	-1, 58,
	1, 352,
	177, 352,
	207, 352,
	302, 352,
	304, 352,
	-2, 358,
	-1, 67,
	1, 27,
	304, 27,
	-2, 374,
	-1, 386,
	1, 173,
	304, 173,
	-2, 873,
	-1, 420,
	152, 384,
	176, 384,
	-2, 355,
	-1, 423,
	152, 383,
	176, 383,
	-2, 353,
	-1, 542,
	152, 383,
	176, 383,
	-2, 356,
	-1, 598,
	301, 811,
	-2, 804,
	-1, 599,
	301, 812,
	-2, 805,
	-1, 605,
	5, 519,
	301, 519,
	-2, 963,
	-1, 628,
	5, 485,
	-2, 938,
	-1, 629,
	5, 513,
	301, 513,
	-2, 940,
	-1, 630,
	5, 493,
	-2, 941,
	-1, 631,
	5, 492,
	-2, 942,
	-1, 632,
	5, 513,
	301, 513,
	-2, 945,
	-1, 633,
	5, 513,
	301, 513,
	-2, 946,
	-1, 634,
	5, 514,
	-2, 949,
	-1, 635,
	5, 479,
	-2, 950,
	-1, 636,
	5, 479,
	-2, 951,
	-1, 637,
	5, 495,
	-2, 954,
	-1, 638,
	5, 480,
	-2, 959,
	-1, 639,
	5, 481,
	-2, 960,
	-1, 640,
	5, 482,
	-2, 961,
	-1, 641,
	5, 483,
	-2, 962,
	-1, 642,
	5, 479,
	-2, 966,
	-1, 643,
	5, 486,
	-2, 971,
	-1, 644,
	5, 484,
	-2, 974,
	-1, 645,
	5, 511,
	301, 511,
	-2, 976,
	-1, 646,
	5, 515,
	-2, 979,
	-1, 647,
	5, 517,
	-2, 980,
	-1, 648,
	5, 510,
	301, 510,
	-2, 984,
	-1, 893,
	97, 359,
	138, 359,
	152, 359,
	176, 359,
	180, 359,
	258, 359,
	-2, 631,
	-1, 901,
	301, 789,
	-2, 778,
	-1, 1100,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 554,
	-1, 1101,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 555,
	-1, 1102,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 556,
	-1, 1106,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 560,
	-1, 1107,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 561,
	-1, 1108,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 562,
	-1, 1111,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 567,
	-1, 1117,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 569,
	-1, 1120,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 574,
	-1, 1121,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 575,
	-1, 1122,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 576,
	-1, 1147,
	185, 702,
	-2, 705,
	-1, 1319,
	97, 359,
	138, 359,
	152, 359,
	176, 359,
	180, 359,
	258, 359,
	-2, 432,
	-1, 1323,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 568,
	-1, 1324,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 570,
	-1, 1329,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 571,
	-1, 1347,
	185, 701,
	-2, 704,
	-1, 1510,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 572,
	-1, 1515,
	141, 0,
	-2, 586,
	-1, 1523,
	185, 703,
	-2, 706,
	-1, 1557,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 612,
	-1, 1558,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 613,
	-1, 1559,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 614,
	-1, 1563,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 618,
	-1, 1564,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 619,
	-1, 1565,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 620,
	-1, 1669,
	141, 0,
	-2, 587,
	-1, 1672,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 590,
	-1, 1673,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 592,
	-1, 1760,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 591,
	-1, 1761,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 593,
	-1, 1768,
	141, 0,
	-2, 621,
	-1, 1813,
	141, 0,
	-2, 622,
	-1, 1865,
	35, 0,
	126, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 937,
}

const sqlNprod = 1079
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24679

var sqlAct = [...]int{

	599, 1864, 1845, 1477, 1887, 1819, 1712, 1847, 1863, 978,
	1846, 986, 1072, 1534, 818, 1748, 1735, 1661, 1634, 597,
	596, 589, 1635, 458, 1054, 1594, 1081, 1316, 822, 74,
	896, 709, 387, 1403, 1655, 694, 75, 1648, 259, 74,
	74, 74, 445, 1049, 74, 1489, 898, 74, 1350, 424,
	1315, 257, 1306, 1402, 561, 74, 19, 825, 664, 1245,
	710, 1499, 74, 74, 661, 44, 74, 1018, 649, 74,
	74, 74, 1053, 1080, 260, 987, 956, 1157, 1300, 1193,
	947, 1133, 431, 57, 26, 1084, 1130, 15, 1002, 680,
	1011, 529, 773, 248, 1044, 840, 7, 666, 757, 1082,
	571, 530, 562, 457, 1050, 459, 261, 754, 423, 460,
	932, 1196, 470, 479, 784, 1057, 9, 980, 8, 57,
	6, 253, 473, 4, 252, 246, 429, 434, 846, 928,
	58, 545, 775, 254, 374, 546, 472, 753, 544, 365,
	687, 549, 771, 466, 432, 528, 377, 696, 696, 979,
	57, 256, 256, 255, 696, 250, 428, 249, 1755, 59,
	251, 1756, 1015, 428, 1879, 442, 983, 1076, 448, 1861,
	849, 850, 1734, 1853, 1843, 1838, 1076, 1008, 1076, 1815,
	1256, 1809, 1008, 572, 1076, 1257, 1345, 1799, 421, 412,
	1734, 1346, 848, 852, 56, 56, 1789, 1762, 384, 1076,
	1008, 1021, 1759, 1314, 1016, 1076, 451, 436, 1745, 63,
	1742, 1734, 71, 1076, 851, 1733, 1717, 420, 1734, 1076,
	35, 35, 1716, 1694, 1674, 1076, 1021, 1021, 36, 36,
	1671, 1621, 65, 1008, 1021, 1620, 1606, 676, 1021, 1076,
	1017, 1014, 74, 74, 74, 74, 74, 1519, 482, 443,
	1021, 1463, 450, 453, 975, 1457, 1803, 1420, 975, 66,
	1421, 1418, 1417, 1416, 1021, 1021, 1021, 61, 857, 1347,
	1344, 1304, 1021, 62, 847, 1021, 1285, 475, 475, 1076,
	1077, 1349, 1030, 1076, 483, 1021, 1020, 1007, 1021, 1021,
	1008, 974, 60, 1303, 975, 1303, 849, 850, 1019, 944,
	63, 704, 943, 1570, 705, 1737, 1522, 697, 697, 1283,
	849, 850, 945, 429, 697, 1286, 484, 867, 1076, 852,
	1023, 1141, 461, 65, 1071, 556, 462, 1038, 1288, 557,
	813, 812, 765, 852, 764, 494, 441, 67, 591, 461,
	851, 467, 462, 462, 798, 514, 63, 63, 63, 1862,
	66, 1859, 1852, 1810, 851, 1743, 1699, 1695, 61, 1687,
	1013, 74, 480, 1686, 62, 1685, 1680, 1679, 476, 65,
	65, 65, 1678, 1632, 868, 1585, 74, 1256, 1626, 74,
	74, 821, 1012, 982, 847, 1580, 1579, 1578, 1525, 1508,
	1488, 1467, 1425, 1422, 857, 1410, 66, 66, 66, 1401,
	1372, 1369, 1367, 1138, 61, 61, 700, 695, 857, 1355,
	62, 62, 74, 816, 74, 1354, 74, 74, 1284, 74,
	1210, 1164, 1163, 556, 555, 443, 904, 453, 455, 60,
	247, 60, 1536, 1829, 74, 1802, 849, 850, 1781, 1779,
	1770, 1752, 1740, 1731, 1709, 74, 1692, 1664, 536, 538,
	1642, 861, 853, 854, 855, 856, 858, 74, 878, 852,
	849, 850, 1514, 259, 74, 74, 74, 1507, 74, 542,
	543, 1485, 1483, 502, 1482, 1480, 1465, 1437, 1436, 1400,
	851, 682, 1363, 503, 656, 1362, 1341, 74, 1337, 1135,
	1272, 1237, 1139, 655, 74, 1236, 74, 1224, 1223, 260,
	1224, 1203, 1625, 1162, 851, 1075, 933, 482, 482, 699,
	936, 940, 702, 535, 684, 259, 74, 926, 74, 74,
	74, 74, 74, 74, 74, 497, 499, 925, 74, 924,
	923, 261, 922, 74, 921, 920, 919, 918, 917, 916,
	74, 915, 914, 483, 483, 913, 533, 912, 911, 902,
	461, 260, 531, 820, 462, 900, 1373, 1374, 74, 60,
	817, 74, 421, 467, 446, 560, 799, 500, 552, 553,
	815, 490, 488, 1631, 1630, 484, 484, 899, 558, 1266,
	855, 856, 858, 261, 878, 657, 706, 849, 850, 1265,
	672, 420, 853, 854, 855, 856, 858, 443, 878, 1757,
	508, 1424, 751, 1629, 1258, 651, 689, 686, 1066, 1373,
	1374, 1423, 763, 1322, 524, 901, 456, 1373, 1374, 938,
	650, 1169, 509, 939, 909, 1649, 979, 1537, 658, 1358,
	1158, 1252, 929, 761, 760, 604, 1431, 1825, 1875, 1876,
	681, 429, 795, 1614, 411, 1788, 410, 443, 688, 688,
	788, 1029, 418, 657, 1379, 803, 405, 406, 1725, 1724,
	74, 667, 1279, 668, 1451, 844, 1428, 814, 74, 1750,
	443, 1427, 74, 1325, 1207, 427, 74, 74, 830, 238,
	421, 829, 828, 421, 421, 842, 1271, 895, 242, 1270,
	1269, 74, 950, 74, 74, 1268, 74, 1118, 1172, 74,
	1022, 74, 74, 1389, 74, 972, 482, 1379, 969, 836,
	532, 653, 837, 838, 800, 1379, 426, 804, 805, 806,
	807, 808, 905, 1206, 878, 239, 811, 667, 957, 668,
	1089, 527, 669, 996, 475, 506, 475, 1787, 486, 243,
	1173, 414, 483, 1652, 981, 1132, 981, 934, 878, 961,
	963, 1452, 1132, 937, 1714, 70, 74, 74, 428, 1241,
	1390, 248, 930, 931, 678, 1003, 949, 674, 1827, 1464,
	690, 966, 1448, 507, 484, 1019, 1174, 1171, 793, 792,
	1884, 786, 781, 953, 941, 1239, 1840, 57, 960, 253,
	1246, 57, 252, 1005, 949, 673, 1004, 1895, 669, 259,
	948, 254, 1841, 74, 1455, 1006, 69, 985, 1439, 1158,
	1782, 995, 970, 1875, 565, 415, 1254, 74, 74, 1000,
	480, 255, 74, 250, 997, 249, 998, 716, 251, 696,
	999, 1472, 994, 419, 1175, 260, 425, 1383, 1375, 1376,
	1377, 1378, 1380, 942, 934, 416, 937, 677, 794, 74,
	1043, 244, 74, 241, 240, 443, 1078, 1032, 796, 453,
	1278, 1025, 1015, 1024, 1026, 1280, 1031, 261, 1027, 1849,
	505, 959, 1069, 1070, 990, 878, 504, 931, 930, 453,
	927, 245, 453, 1766, 1088, 1602, 259, 1890, 1115, 1019,
	1732, 1375, 1376, 1377, 1378, 1380, 1170, 1179, 849, 850,
	1469, 1377, 1378, 1380, 1016, 1047, 670, 525, 1250, 1235,
	1086, 1087, 892, 745, 1046, 1500, 1048, 1603, 68, 1361,
	682, 852, 260, 1373, 1374, 682, 1715, 797, 652, 428,
	505, 1848, 1493, 1874, 1883, 958, 1470, 1136, 1246, 1440,
	1017, 1014, 851, 1850, 849, 850, 1145, 74, 74, 74,
	1079, 1209, 1327, 74, 261, 1872, 74, 1896, 1446, 1131,
	548, 526, 74, 74, 74, 74, 74, 852, 1034, 1647,
	74, 1128, 670, 74, 1036, 1064, 74, 1217, 517, 1113,
	1116, 1851, 495, 74, 1126, 74, 946, 1309, 851, 697,
	1037, 493, 74, 1137, 1019, 1154, 857, 1719, 1019, 1035,
	443, 1598, 74, 1599, 1112, 1312, 1888, 1901, 1211, 1718,
	1707, 1142, 1146, 1776, 1149, 1221, 1498, 1882, 1690, 1566,
	547, 1379, 1310, 74, 74, 1234, 1610, 1430, 1601, 74,
	1188, 1260, 443, 1261, 1262, 1604, 1200, 1201, 1202, 482,
	1248, 363, 857, 1212, 548, 867, 1613, 1889, 429, 1220,
	1124, 1216, 1123, 1612, 1065, 827, 1129, 819, 1468, 74,
	1013, 74, 601, 74, 1891, 74, 787, 782, 74, 1264,
	1389, 770, 1251, 1820, 667, 483, 668, 74, 1114, 547,
	1708, 1259, 1311, 810, 74, 366, 74, 1287, 766, 1289,
	1226, 867, 1600, 1900, 739, 1291, 1373, 1374, 1567, 584,
	1662, 1263, 868, 1691, 1568, 768, 371, 484, 1225, 738,
	1609, 367, 1321, 1221, 1658, 1495, 769, 1274, 1290, 1494,
	1292, 1277, 1275, 1276, 715, 504, 465, 1390, 72, 426,
	1213, 1281, 1003, 1282, 368, 1125, 464, 1611, 357, 358,
	359, 539, 1127, 376, 1478, 669, 388, 1633, 868, 1490,
	1301, 429, 370, 1705, 376, 1663, 1161, 1769, 57, 1243,
	1005, 435, 435, 1004, 1298, 72, 681, 1297, 72, 72,
	454, 1320, 1006, 1689, 1706, 681, 862, 859, 860, 861,
	853, 854, 855, 856, 858, 443, 878, 1404, 716, 716,
	1513, 1368, 1336, 1242, 1379, 1028, 973, 523, 1328, 1348,
	741, 429, 1326, 522, 521, 1375, 1376, 1377, 1378, 1380,
	520, 519, 518, 515, 463, 1405, 910, 802, 366, 1160,
	1844, 1817, 1591, 1444, 1442, 74, 853, 854, 855, 856,
	858, 1429, 878, 1294, 1357, 1067, 1062, 369, 1001, 371,
	1334, 703, 701, 1389, 367, 698, 693, 1340, 1293, 826,
	429, 1342, 675, 1332, 671, 1531, 665, 74, 74, 1726,
	550, 439, 1876, 1352, 1353, 1459, 1443, 368, 1445, 443,
	1407, 1408, 1409, 511, 790, 949, 1073, 949, 3, 1728,
	372, 964, 965, 962, 74, 370, 1456, 74, 1426, 74,
	1737, 1784, 1812, 716, 1491, 74, 1399, 554, 968, 1433,
	1390, 1454, 967, 404, 74, 1804, 1484, 1412, 74, 1458,
	362, 1645, 1063, 1061, 74, 259, 1447, 1481, 74, 670,
	74, 1330, 1234, 1462, 1305, 1335, 984, 551, 440, 1435,
	1492, 1461, 1460, 1074, 1496, 843, 762, 1471, 1473, 1474,
	708, 72, 468, 72, 388, 388, 447, 716, 1449, 1450,
	1010, 260, 512, 373, 1487, 407, 408, 1898, 1899, 1479,
	1586, 1497, 74, 835, 1503, 1475, 1504, 1373, 1374, 1516,
	369, 1309, 1501, 1502, 1384, 1381, 1382, 1383, 1375, 1376,
	1377, 1378, 1380, 261, 849, 850, 1040, 1039, 1466, 1312,
	1419, 716, 1267, 1524, 1208, 1205, 1204, 1155, 1041, 1805,
	1307, 1527, 1528, 1529, 1331, 1676, 1310, 1530, 1295, 1042,
	903, 1333, 1538, 372, 413, 1713, 364, 740, 801, 516,
	1308, 1839, 1682, 1360, 1543, 1747, 1540, 1541, 74, 74,
	74, 1765, 1159, 908, 1545, 1546, 1573, 74, 74, 34,
	990, 443, 1637, 74, 577, 74, 1592, 74, 74, 74,
	1432, 1056, 74, 1520, 1590, 739, 739, 1574, 1055, 262,
	491, 791, 780, 600, 774, 783, 1311, 1577, 1168, 654,
	738, 738, 1587, 602, 713, 496, 603, 714, 388, 388,
	935, 590, 711, 74, 74, 715, 715, 443, 478, 1302,
	988, 443, 1156, 1356, 906, 74, 74, 576, 582, 74,
	1640, 1639, 1641, 1305, 1646, 1640, 1639, 1641, 74, 74,
	1623, 376, 1571, 72, 1627, 388, 388, 581, 540, 1628,
	1143, 1653, 1654, 1581, 487, 1659, 573, 1644, 1660, 1313,
	47, 501, 382, 435, 383, 1249, 1666, 74, 1624, 1068,
	831, 1607, 1608, 1441, 72, 417, 1670, 1370, 489, 1186,
	1309, 712, 1178, 1176, 1167, 534, 72, 660, 989, 513,
	739, 741, 741, 72, 72, 72, 1255, 691, 1312, 1009,
	559, 839, 438, 437, 1051, 738, 510, 1688, 767, 1307,
	1033, 409, 1778, 1219, 1894, 1310, 72, 1643, 1783, 1438,
	715, 1824, 74, 758, 74, 758, 74, 74, 64, 1308,
	25, 23, 22, 1651, 21, 74, 20, 18, 17, 16,
	24, 14, 1665, 1657, 739, 388, 1701, 758, 388, 388,
	388, 388, 388, 809, 13, 1700, 74, 388, 1703, 738,
	1617, 12, 376, 11, 10, 33, 32, 31, 30, 824,
	29, 5, 2, 1, 715, 1311, 0, 0, 74, 0,
	74, 1722, 1723, 0, 1738, 0, 0, 435, 739, 74,
	845, 1741, 1640, 1639, 1641, 74, 741, 1736, 0, 0,
	0, 0, 1729, 738, 0, 1721, 716, 0, 443, 443,
	0, 0, 443, 0, 0, 1754, 0, 0, 715, 1751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1656, 0, 1744, 0, 716, 716, 74, 0, 0, 0,
	0, 0, 716, 716, 0, 0, 1780, 0, 0, 0,
	741, 0, 0, 0, 1771, 74, 74, 1764, 1774, 74,
	1727, 0, 1180, 74, 1775, 0, 0, 0, 74, 0,
	1792, 0, 0, 0, 0, 716, 0, 1800, 1794, 0,
	0, 1796, 1801, 74, 1640, 1639, 1641, 1793, 259, 72,
	682, 0, 0, 0, 741, 0, 0, 954, 0, 1758,
	1795, 72, 0, 1807, 0, 72, 971, 0, 740, 740,
	74, 0, 74, 74, 0, 74, 0, 0, 1711, 0,
	72, 752, 992, 993, 260, 72, 1830, 429, 72, 1828,
	388, 388, 1814, 388, 74, 1834, 1833, 0, 0, 1808,
	0, 0, 0, 0, 1831, 1811, 0, 1826, 1837, 1836,
	0, 1835, 1640, 1639, 1641, 0, 261, 0, 74, 0,
	74, 1746, 0, 0, 0, 0, 0, 1860, 1854, 1856,
	0, 0, 443, 0, 1858, 74, 0, 0, 1832, 0,
	1869, 0, 1798, 716, 1871, 758, 845, 1806, 1873, 0,
	1877, 0, 0, 0, 0, 0, 1878, 1881, 1880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1893, 1892, 0, 740, 1897, 0, 1822, 0, 0, 0,
	0, 578, 45, 0, 0, 0, 0, 0, 0, 0,
	1902, 0, 1045, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 712, 712, 0, 0, 72, 1052, 0, 0,
	0, 845, 0, 0, 1842, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 1857, 0, 0, 740, 0, 0,
	0, 0, 0, 739, 0, 1180, 1180, 0, 72, 422,
	0, 388, 430, 716, 0, 0, 0, 0, 738, 45,
	0, 849, 850, 0, 0, 0, 1823, 0, 0, 0,
	0, 739, 739, 715, 0, 0, 0, 0, 0, 739,
	739, 740, 0, 0, 852, 0, 738, 738, 0, 0,
	0, 0, 0, 0, 738, 738, 1180, 1180, 1180, 0,
	0, 715, 715, 0, 0, 851, 0, 0, 0, 715,
	715, 990, 739, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 738, 1338, 1339,
	0, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 715, 0, 0, 0, 72, 1214, 1215, 741,
	0, 0, 954, 0, 0, 1222, 0, 0, 0, 857,
	0, 1227, 1228, 1230, 1232, 1233, 0, 0, 0, 1238,
	0, 712, 1240, 0, 0, 72, 0, 741, 741, 1396,
	1397, 1398, 72, 0, 1253, 741, 741, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 867, 716,
	0, 0, 0, 0, 0, 712, 0, 0, 741, 0,
	739, 0, 1045, 758, 0, 0, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 430,
	0, 1180, 1180, 0, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 0, 0, 0, 0, 0, 824, 0,
	824, 0, 388, 0, 72, 868, 0, 1296, 0, 1373,
	1374, 0, 0, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 1318, 0, 72, 0, 0, 0, 0,
	1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
	1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 0,
	1180, 0, 0, 0, 0, 0, 0, 0, 0, 1388,
	739, 0, 0, 0, 1511, 1512, 741, 1373, 1374, 563,
	563, 0, 0, 0, 0, 738, 0, 0, 662, 0,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	715, 0, 0, 683, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 1379, 0, 0,
	0, 0, 0, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 0, 1569, 740, 740, 0, 0, 739, 0,
	0, 0, 740, 740, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 1389, 0, 0, 0,
	0, 0, 0, 422, 845, 1379, 741, 0, 715, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 832,
	834, 0, 0, 0, 0, 0, 841, 0, 1373, 1374,
	0, 1391, 1392, 1393, 0, 0, 72, 72, 887, 888,
	889, 890, 891, 0, 1668, 0, 0, 894, 0, 0,
	0, 0, 0, 1390, 1389, 0, 739, 0, 0, 0,
	0, 0, 1602, 1476, 1595, 0, 954, 907, 824, 0,
	0, 738, 1593, 0, 1486, 0, 1597, 0, 1388, 0,
	712, 0, 0, 72, 741, 0, 715, 72, 0, 0,
	0, 0, 0, 1318, 1603, 0, 0, 1506, 1180, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 712,
	0, 1390, 0, 1596, 0, 0, 712, 712, 0, 0,
	0, 422, 0, 740, 422, 422, 1379, 1384, 1381, 1382,
	1383, 1375, 1376, 1377, 1378, 1380, 0, 0, 0, 0,
	0, 1535, 0, 0, 0, 0, 0, 893, 0, 712,
	0, 897, 0, 0, 0, 0, 0, 0, 0, 1394,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1389, 0, 0, 1598, 0,
	1599, 1710, 0, 0, 1180, 0, 1381, 1382, 1383, 1375,
	1376, 1377, 1378, 1380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1601, 0, 1588, 1589, 954,
	0, 0, 1604, 0, 0, 0, 845, 845, 0, 0,
	0, 0, 1615, 740, 1616, 0, 72, 1618, 1619, 0,
	0, 1622, 1390, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 45,
	1636, 45, 845, 1052, 1180, 1636, 0, 1768, 0, 1600,
	0, 0, 0, 0, 72, 72, 45, 0, 72, 0,
	45, 0, 0, 0, 0, 0, 0, 845, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 740, 1385, 1386, 1387, 0, 1384, 1381, 1382, 1383,
	1375, 1376, 1377, 1378, 1380, 0, 1683, 0, 0, 563,
	0, 0, 0, 0, 0, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1813, 1117, 0,
	1119, 1120, 1121, 1122, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 1702, 0, 388, 1704, 0, 0, 740,
	0, 0, 0, 0, 72, 1165, 1166, 0, 1177, 0,
	1187, 1189, 1194, 1197, 1198, 1199, 0, 1373, 1374, 389,
	1391, 1392, 1393, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 0, 1667, 0, 662, 0, 402, 0, 0,
	1083, 0, 1636, 0, 0, 0, 0, 72, 0, 1749,
	0, 0, 0, 0, 0, 712, 0, 0, 72, 0,
	0, 0, 0, 0, 845, 0, 0, 1388, 0, 1244,
	0, 1247, 391, 0, 0, 0, 1134, 396, 397, 0,
	0, 403, 0, 0, 0, 849, 850, 0, 0, 0,
	0, 0, 0, 390, 392, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 852, 0,
	0, 0, 0, 1273, 0, 1379, 0, 0, 0, 0,
	0, 0, 0, 0, 1785, 1786, 0, 0, 1790, 851,
	0, 393, 1791, 712, 1636, 866, 0, 388, 0, 0,
	0, 0, 0, 0, 394, 395, 0, 0, 1394, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 0,
	398, 0, 0, 841, 1389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 0, 0, 0, 0, 1821,
	0, 845, 72, 857, 388, 0, 0, 0, 0, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 1636, 1749, 1323, 1324, 872, 0, 0, 0,
	1329, 0, 0, 852, 0, 883, 0, 0, 0, 0,
	0, 1390, 0, 0, 0, 0, 0, 72, 0, 845,
	0, 0, 867, 1343, 851, 0, 0, 0, 0, 0,
	866, 0, 1351, 0, 1870, 0, 0, 0, 0, 0,
	1359, 0, 0, 45, 1364, 45, 0, 399, 0, 0,
	400, 0, 0, 0, 0, 401, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 894, 1319, 0, 0,
	0, 0, 1194, 1194, 1194, 0, 0, 0, 857, 868,
	0, 1385, 1386, 1387, 0, 1384, 1381, 1382, 1383, 1375,
	1376, 1377, 1378, 1380, 0, 0, 876, 884, 1134, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 893, 0, 0,
	0, 874, 0, 0, 0, 0, 0, 867, 563, 0,
	0, 0, 0, 0, 0, 0, 563, 0, 0, 0,
	662, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 868, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 877, 0, 0, 852, 0,
	883, 0, 0, 0, 1509, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 851,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 1083,
	1532, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1542, 875, 0, 1544, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	976, 0, 0, 857, 0, 849, 850, 0, 0, 977,
	0, 879, 880, 881, 0, 1083, 1575, 1576, 0, 1083,
	0, 876, 884, 0, 0, 1582, 1583, 1584, 852, 0,
	883, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 0, 851,
	0, 0, 867, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1650, 857, 0, 0, 0, 0, 0, 868,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	877, 876, 884, 0, 0, 1669, 872, 0, 0, 1672,
	1673, 0, 0, 852, 1675, 883, 0, 0, 1677, 0,
	0, 0, 0, 0, 0, 1681, 874, 0, 0, 1684,
	0, 0, 867, 0, 851, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 1693, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 0, 0, 0, 0,
	1696, 0, 0, 0, 0, 0, 1083, 1083, 857, 868,
	1083, 0, 0, 0, 0, 0, 0, 0, 1373, 1374,
	877, 1391, 1392, 1393, 1720, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	1739, 874, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1388, 1753,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 1760,
	1761, 0, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1773, 0,
	0, 0, 0, 0, 868, 0, 1379, 0, 0, 0,
	0, 1777, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1730, 0, 662, 0, 0, 0, 0, 0, 1394,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 1389, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1390, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1855, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 1868, 1868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1385, 1386, 1387, 258, 1384, 1381, 1382, 1383,
	1375, 1376, 1377, 1378, 1380, 0, 0, 0, 0, 0,
	1868, 76, 77, 277, 78, 278, 279, 280, 281, 189,
	282, 283, 284, 285, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 286, 82, 196, 197, 83, 287, 288,
	198, 199, 200, 289, 201, 290, 263, 291, 84, 85,
	86, 0, 87, 292, 88, 89, 90, 293, 264, 91,
	92, 294, 295, 296, 297, 298, 299, 93, 94, 95,
	96, 202, 97, 203, 204, 300, 98, 301, 99, 302,
	303, 304, 100, 101, 305, 102, 306, 0, 307, 205,
	103, 104, 206, 308, 309, 310, 105, 106, 207, 0,
	107, 311, 108, 312, 313, 265, 314, 109, 208, 315,
	209, 316, 110, 111, 112, 210, 211, 267, 317, 115,
	318, 113, 319, 266, 114, 212, 213, 214, 215, 320,
	216, 321, 268, 116, 269, 117, 118, 322, 323, 217,
	270, 119, 271, 324, 120, 325, 326, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 327,
	130, 328, 218, 132, 219, 133, 134, 329, 330, 331,
	332, 333, 135, 220, 273, 136, 274, 221, 137, 138,
	139, 334, 222, 140, 223, 141, 335, 142, 143, 144,
	224, 145, 146, 336, 148, 149, 147, 150, 337, 151,
	275, 152, 153, 225, 154, 0, 155, 156, 157, 338,
	226, 158, 159, 339, 160, 161, 276, 162, 227, 228,
	163, 340, 169, 164, 165, 166, 168, 229, 167, 230,
	341, 170, 342, 171, 172, 343, 231, 232, 233, 344,
	345, 173, 234, 235, 346, 174, 175, 176, 177, 347,
	348, 178, 179, 180, 349, 350, 181, 182, 183, 236,
	237, 351, 352, 184, 353, 354, 355, 356, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 76,
	77, 277, 78, 278, 279, 280, 281, 189, 282, 283,
	284, 285, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 286, 82, 196, 197, 83, 287, 288, 198, 199,
	200, 289, 201, 290, 263, 291, 84, 85, 86, 0,
	87, 292, 88, 89, 90, 293, 264, 91, 92, 294,
	295, 296, 297, 298, 299, 93, 94, 95, 96, 202,
	97, 203, 204, 300, 98, 301, 99, 302, 303, 304,
	100, 101, 305, 102, 306, 0, 307, 205, 103, 104,
	206, 308, 309, 310, 105, 106, 207, 0, 107, 311,
	108, 312, 313, 265, 314, 109, 208, 315, 209, 316,
	110, 111, 112, 210, 211, 267, 317, 115, 318, 113,
	319, 266, 114, 212, 213, 214, 215, 320, 216, 321,
	268, 116, 269, 117, 118, 322, 323, 217, 270, 119,
	271, 324, 120, 325, 326, 121, 0, 122, 123, 124,
	125, 126, 272, 127, 128, 131, 129, 327, 130, 328,
	218, 132, 219, 133, 134, 329, 330, 331, 332, 333,
	135, 220, 273, 136, 274, 221, 137, 138, 139, 334,
	222, 140, 223, 141, 335, 142, 143, 144, 224, 145,
	146, 336, 148, 149, 147, 150, 337, 151, 275, 152,
	153, 225, 154, 0, 155, 156, 157, 338, 226, 158,
	159, 339, 160, 161, 276, 162, 227, 228, 163, 340,
	169, 164, 165, 166, 168, 229, 167, 230, 341, 170,
	342, 171, 172, 343, 231, 232, 233, 344, 345, 173,
	234, 235, 346, 174, 175, 176, 177, 347, 348, 178,
	179, 180, 349, 350, 181, 182, 183, 236, 237, 351,
	352, 184, 353, 354, 355, 356, 185, 186, 187, 188,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 0, 0, 76, 77, 277, 78,
	278, 279, 280, 281, 189, 282, 283, 284, 285, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 286, 82,
	196, 197, 83, 287, 288, 198, 199, 200, 289, 201,
	290, 263, 291, 84, 85, 86, 0, 87, 292, 88,
	89, 90, 293, 264, 91, 92, 294, 295, 296, 297,
	298, 299, 93, 94, 95, 96, 202, 97, 203, 204,
	300, 98, 301, 99, 302, 303, 304, 100, 101, 305,
	102, 306, 0, 307, 205, 103, 104, 206, 308, 309,
	310, 105, 106, 207, 0, 107, 311, 108, 312, 313,
	265, 314, 109, 208, 315, 209, 316, 110, 111, 112,
	210, 211, 267, 317, 115, 318, 113, 319, 266, 114,
	212, 213, 214, 215, 320, 216, 321, 268, 116, 269,
	117, 118, 322, 323, 217, 270, 119, 271, 324, 120,
	325, 326, 121, 0, 122, 123, 124, 125, 126, 272,
	127, 128, 131, 129, 327, 130, 328, 218, 132, 219,
	133, 134, 329, 330, 331, 332, 333, 135, 220, 273,
	136, 274, 221, 137, 138, 139, 334, 222, 140, 223,
	141, 335, 142, 143, 144, 224, 145, 146, 336, 148,
	149, 147, 150, 337, 151, 275, 152, 153, 225, 154,
	0, 155, 156, 157, 338, 226, 158, 159, 339, 160,
	161, 276, 162, 227, 228, 163, 340, 169, 164, 165,
	166, 168, 229, 167, 230, 341, 170, 342, 171, 172,
	343, 231, 232, 233, 344, 345, 173, 234, 235, 346,
	174, 175, 176, 177, 347, 348, 178, 179, 180, 349,
	350, 181, 182, 183, 236, 237, 351, 352, 184, 353,
	354, 355, 356, 185, 186, 187, 188, 598, 587, 588,
	585, 586, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 77, 1151, 78, 0, 0, 0,
	0, 614, 580, 0, 0, 0, 79, 80, 190, 628,
	192, 629, 81, 630, 631, 0, 82, 196, 197, 83,
	595, 613, 632, 633, 200, 0, 624, 0, 606, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	264, 91, 92, 0, 607, 609, 0, 608, 610, 93,
	94, 95, 96, 634, 97, 635, 636, 0, 98, 0,
	99, 0, 1152, 0, 627, 101, 0, 102, 0, 0,
	0, 579, 103, 104, 615, 593, 0, 0, 105, 106,
	637, 0, 107, 0, 108, 0, 0, 265, 0, 109,
	625, 0, 209, 0, 110, 111, 112, 621, 623, 267,
	0, 115, 0, 113, 0, 266, 114, 638, 639, 640,
	641, 0, 605, 0, 268, 116, 269, 117, 118, 0,
	0, 626, 270, 119, 271, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 272, 127, 128, 131,
	129, 569, 130, 594, 622, 132, 642, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 273, 136, 274, 616,
	137, 138, 139, 0, 617, 140, 223, 141, 0, 142,
	143, 144, 643, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 275, 152, 153, 583, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 611, 160, 161, 276, 162,
	644, 228, 163, 0, 169, 164, 165, 166, 168, 645,
	167, 618, 0, 170, 0, 171, 172, 0, 231, 646,
	647, 0, 0, 173, 619, 620, 592, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 612, 0, 181, 182,
	183, 236, 648, 1150, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 567, 1153, 0, 0,
	0, 568, 0, 0, 575, 1148, 598, 587, 588, 585,
	586, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	614, 580, 0, 0, 0, 79, 80, 190, 628, 192,
	629, 81, 630, 631, 0, 82, 196, 197, 83, 595,
	613, 632, 633, 200, 0, 624, 0, 606, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 264,
	91, 92, 0, 607, 609, 0, 608, 610, 93, 94,
	95, 96, 634, 97, 635, 636, 663, 98, 0, 99,
	0, 0, 0, 627, 101, 0, 102, 0, 0, 0,
	579, 103, 104, 615, 593, 0, 0, 105, 106, 637,
	0, 107, 0, 108, 0, 0, 265, 0, 109, 625,
	0, 209, 0, 110, 111, 112, 621, 623, 267, 0,
	115, 0, 113, 0, 266, 114, 638, 639, 640, 641,
	0, 605, 0, 268, 116, 269, 117, 118, 0, 0,
	626, 270, 119, 271, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 272, 127, 128, 131, 129,
	569, 130, 594, 622, 132, 642, 133, 134, 0, 0,
	0, 0, 0, 135, 220, 273, 136, 274, 616, 137,
	138, 139, 0, 617, 140, 223, 141, 0, 142, 143,
	144, 643, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 275, 152, 153, 583, 154, 0, 155, 156, 157,
	63, 226, 158, 159, 611, 160, 161, 276, 162, 644,
	228, 163, 0, 169, 164, 165, 166, 168, 645, 167,
	618, 0, 170, 65, 171, 172, 0, 231, 646, 647,
	0, 0, 173, 619, 620, 592, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 612, 0, 181, 182, 183,
	485, 648, 0, 0, 184, 0, 0, 0, 61, 185,
	186, 187, 188, 570, 62, 598, 587, 588, 585, 586,
	574, 0, 0, 0, 566, 567, 0, 0, 0, 0,
	568, 76, 77, 575, 78, 0, 0, 0, 0, 614,
	580, 0, 0, 0, 79, 80, 190, 628, 192, 629,
	81, 630, 631, 0, 82, 196, 197, 83, 595, 613,
	632, 633, 200, 0, 624, 0, 606, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 264, 91,
	92, 0, 607, 609, 0, 608, 610, 93, 94, 95,
	96, 634, 97, 635, 636, 0, 98, 0, 99, 0,
	0, 0, 627, 101, 0, 102, 0, 0, 0, 579,
	103, 104, 615, 593, 0, 0, 105, 106, 637, 0,
	107, 0, 108, 0, 0, 265, 0, 109, 625, 0,
	209, 0, 110, 111, 112, 621, 623, 267, 0, 115,
	0, 113, 0, 266, 114, 638, 639, 640, 641, 0,
	605, 0, 268, 116, 269, 117, 118, 0, 0, 626,
	270, 119, 271, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 569,
	130, 594, 622, 132, 642, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 273, 136, 274, 616, 137, 138,
	139, 0, 617, 140, 223, 141, 0, 142, 143, 144,
	643, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	275, 152, 153, 583, 154, 0, 155, 156, 157, 63,
	226, 158, 159, 611, 160, 161, 276, 162, 644, 228,
	163, 0, 169, 164, 165, 166, 168, 645, 167, 618,
	0, 170, 65, 171, 172, 0, 231, 646, 647, 0,
	0, 173, 619, 620, 592, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 612, 0, 181, 182, 183, 485,
	648, 0, 0, 184, 0, 0, 0, 61, 185, 186,
	187, 188, 570, 62, 598, 587, 588, 585, 586, 574,
	0, 0, 0, 566, 567, 0, 0, 0, 0, 568,
	76, 77, 575, 78, 0, 0, 0, 0, 614, 580,
	0, 0, 0, 79, 80, 190, 628, 192, 629, 81,
	630, 631, 1190, 82, 196, 197, 83, 595, 613, 632,
	633, 200, 0, 624, 0, 606, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 264, 91, 92,
	0, 607, 609, 0, 608, 610, 93, 94, 95, 96,
	634, 97, 635, 636, 0, 98, 0, 99, 0, 0,
	0, 627, 101, 0, 102, 0, 0, 0, 579, 103,
	104, 615, 593, 0, 0, 105, 106, 637, 0, 107,
	0, 108, 0, 1195, 265, 0, 109, 625, 0, 209,
	0, 110, 111, 112, 621, 623, 267, 0, 115, 0,
	113, 0, 266, 114, 638, 639, 640, 641, 0, 605,
	0, 268, 116, 269, 117, 118, 0, 1191, 626, 270,
	119, 271, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 272, 127, 128, 131, 129, 569, 130,
	594, 622, 132, 642, 133, 134, 0, 0, 0, 0,
	0, 135, 220, 273, 136, 274, 616, 137, 138, 139,
	0, 617, 140, 223, 141, 0, 142, 143, 144, 643,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 275,
	152, 153, 583, 154, 0, 155, 156, 157, 0, 226,
	158, 159, 611, 160, 161, 276, 162, 644, 228, 163,
	0, 169, 164, 165, 166, 168, 645, 167, 618, 0,
	170, 0, 171, 172, 0, 231, 646, 647, 0, 1192,
	173, 619, 620, 592, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 612, 0, 181, 182, 183, 236, 648,
	0, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 570, 0, 598, 587, 588, 585, 586, 574, 0,
	0, 0, 566, 567, 0, 0, 0, 0, 568, 76,
	77, 575, 78, 0, 0, 0, 0, 614, 580, 0,
	0, 0, 79, 80, 190, 628, 192, 629, 81, 630,
	631, 0, 82, 196, 197, 83, 595, 613, 632, 633,
	200, 0, 624, 0, 606, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 264, 91, 92, 0,
	607, 609, 0, 608, 610, 93, 94, 95, 96, 634,
	97, 635, 636, 0, 98, 0, 99, 0, 0, 0,
	627, 101, 0, 102, 0, 0, 0, 579, 103, 104,
	615, 593, 0, 0, 105, 106, 637, 0, 107, 0,
	108, 0, 0, 265, 0, 109, 625, 0, 209, 0,
	110, 111, 112, 621, 623, 267, 0, 115, 0, 113,
	0, 266, 114, 638, 639, 640, 641, 0, 605, 0,
	268, 116, 269, 117, 118, 0, 0, 626, 270, 119,
	271, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 272, 127, 128, 131, 129, 569, 130, 594,
	622, 132, 642, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 273, 136, 274, 616, 137, 138, 139, 0,
	617, 140, 223, 141, 0, 142, 143, 144, 643, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 275, 152,
	153, 583, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 611, 160, 161, 276, 162, 644, 228, 163, 0,
	169, 164, 165, 166, 168, 645, 167, 618, 0, 170,
	0, 171, 172, 0, 231, 646, 647, 0, 0, 173,
	619, 620, 592, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 612, 0, 181, 182, 183, 236, 648, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 566, 567, 0, 0, 0, 0, 568, 0, 0,
	575, 1572, 598, 587, 588, 585, 586, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 614, 580, 0, 0,
	0, 79, 80, 190, 628, 192, 629, 81, 630, 631,
	0, 82, 196, 197, 83, 595, 613, 632, 633, 200,
	0, 624, 0, 606, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 264, 91, 92, 0, 607,
	609, 0, 608, 610, 93, 94, 95, 96, 634, 97,
	635, 636, 0, 98, 0, 99, 0, 0, 0, 627,
	101, 0, 102, 0, 0, 0, 579, 103, 104, 615,
	593, 0, 0, 105, 106, 637, 0, 107, 0, 108,
	0, 0, 265, 0, 109, 625, 0, 209, 0, 110,
	111, 112, 621, 623, 267, 0, 115, 0, 113, 0,
	266, 114, 638, 639, 640, 641, 0, 605, 0, 268,
	116, 269, 117, 118, 0, 0, 626, 270, 119, 271,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 272, 127, 128, 131, 129, 569, 130, 594, 622,
	132, 642, 133, 134, 0, 0, 0, 0, 0, 135,
	220, 273, 136, 274, 616, 137, 138, 139, 0, 617,
	140, 223, 141, 0, 142, 143, 144, 643, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 275, 152, 153,
	583, 154, 0, 155, 156, 157, 0, 226, 158, 159,
	611, 160, 161, 276, 162, 644, 228, 163, 0, 169,
	164, 165, 166, 168, 645, 167, 618, 0, 170, 0,
	171, 172, 0, 231, 646, 647, 0, 0, 173, 619,
	620, 592, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 612, 0, 181, 182, 183, 236, 648, 0, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	566, 567, 0, 0, 0, 0, 568, 0, 0, 575,
	1521, 598, 587, 588, 585, 586, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 614, 580, 0, 0, 0,
	79, 80, 190, 628, 192, 629, 81, 630, 631, 0,
	82, 196, 197, 83, 595, 613, 632, 633, 200, 0,
	624, 0, 606, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 264, 91, 92, 0, 607, 609,
	0, 608, 610, 93, 94, 95, 96, 634, 97, 635,
	636, 0, 98, 0, 99, 0, 0, 0, 627, 101,
	0, 102, 0, 0, 0, 579, 103, 104, 615, 593,
	0, 0, 105, 106, 637, 0, 107, 0, 108, 0,
	0, 265, 0, 109, 625, 0, 209, 0, 110, 111,
	112, 621, 623, 267, 0, 115, 0, 113, 0, 266,
	114, 638, 639, 640, 641, 0, 605, 0, 268, 116,
	269, 117, 118, 0, 0, 626, 270, 119, 271, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	272, 127, 128, 131, 129, 569, 130, 594, 622, 132,
	642, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	273, 136, 274, 616, 137, 138, 139, 0, 617, 140,
	223, 141, 0, 142, 143, 144, 643, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 275, 152, 153, 583,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 611,
	160, 161, 276, 162, 644, 228, 163, 0, 169, 164,
	165, 166, 168, 645, 167, 618, 0, 170, 0, 171,
	172, 0, 231, 646, 647, 0, 0, 173, 619, 620,
	592, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	612, 0, 181, 182, 183, 236, 648, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 566,
	567, 0, 0, 0, 0, 568, 0, 0, 575, 1147,
	598, 587, 588, 585, 586, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 614, 580, 0, 0, 0, 79,
	80, 190, 628, 192, 629, 81, 630, 631, 0, 82,
	196, 197, 83, 595, 613, 632, 633, 200, 0, 624,
	0, 606, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 264, 91, 92, 0, 607, 609, 0,
	608, 610, 93, 94, 95, 96, 634, 97, 635, 636,
	0, 98, 0, 99, 0, 0, 0, 627, 101, 0,
	102, 0, 0, 0, 579, 103, 104, 615, 593, 0,
	0, 105, 106, 637, 0, 107, 0, 108, 0, 0,
	265, 0, 109, 625, 0, 209, 0, 110, 111, 112,
	621, 623, 267, 0, 115, 0, 113, 0, 266, 114,
	638, 639, 640, 641, 0, 605, 0, 268, 116, 269,
	117, 118, 0, 0, 626, 270, 119, 271, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 272,
	127, 128, 131, 129, 569, 130, 594, 622, 132, 642,
	133, 134, 0, 0, 0, 0, 0, 135, 220, 273,
	136, 274, 616, 137, 138, 139, 0, 617, 140, 223,
	141, 0, 142, 143, 144, 643, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 275, 152, 153, 583, 154,
	0, 155, 156, 157, 0, 226, 158, 159, 611, 160,
	161, 276, 162, 644, 228, 163, 0, 169, 164, 165,
	166, 168, 645, 167, 618, 0, 170, 0, 171, 172,
	0, 231, 646, 647, 0, 0, 173, 619, 620, 592,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 612,
	0, 181, 182, 183, 236, 648, 0, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 570, 0, 0,
	0, 0, 598, 587, 588, 585, 586, 574, 566, 567,
	0, 0, 0, 0, 568, 899, 1144, 575, 76, 77,
	0, 78, 0, 0, 0, 0, 614, 580, 0, 0,
	0, 79, 80, 190, 628, 192, 629, 81, 630, 631,
	0, 82, 196, 197, 83, 595, 613, 632, 633, 200,
	0, 624, 0, 606, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 264, 91, 92, 0, 607,
	609, 0, 608, 610, 93, 94, 95, 96, 634, 97,
	635, 636, 0, 98, 0, 99, 0, 0, 0, 627,
	101, 0, 102, 0, 0, 0, 579, 103, 104, 615,
	593, 0, 0, 105, 106, 637, 0, 107, 0, 108,
	0, 0, 265, 0, 109, 625, 0, 209, 0, 110,
	111, 112, 621, 623, 267, 0, 115, 0, 113, 0,
	266, 114, 638, 639, 640, 641, 0, 605, 0, 268,
	116, 269, 117, 118, 0, 0, 626, 270, 119, 271,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 272, 127, 128, 131, 129, 569, 130, 594, 622,
	132, 642, 133, 134, 0, 0, 0, 0, 0, 135,
	220, 273, 136, 274, 616, 137, 138, 139, 0, 617,
	140, 223, 141, 0, 142, 143, 144, 643, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 275, 152, 153,
	583, 154, 0, 155, 156, 157, 0, 226, 158, 159,
	611, 160, 161, 276, 162, 644, 228, 163, 0, 169,
	164, 165, 166, 168, 645, 167, 618, 0, 170, 0,
	171, 172, 0, 231, 646, 647, 0, 0, 173, 619,
	620, 592, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 612, 0, 181, 182, 183, 236, 648, 0, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 570,
	0, 598, 587, 588, 585, 586, 574, 0, 0, 0,
	566, 567, 564, 0, 0, 0, 568, 76, 77, 575,
	78, 0, 0, 0, 0, 614, 580, 0, 0, 0,
	79, 80, 190, 628, 192, 629, 81, 630, 631, 0,
	82, 196, 197, 83, 595, 613, 632, 633, 200, 0,
	624, 0, 606, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 264, 91, 92, 0, 607, 609,
	0, 608, 610, 93, 94, 95, 96, 634, 97, 635,
	636, 0, 98, 0, 99, 0, 0, 0, 627, 101,
	0, 102, 0, 0, 0, 579, 103, 104, 615, 593,
	0, 0, 105, 106, 637, 0, 107, 0, 108, 0,
	0, 265, 0, 109, 625, 0, 209, 0, 110, 111,
	112, 621, 623, 267, 0, 115, 0, 113, 0, 266,
	114, 638, 639, 640, 641, 0, 605, 0, 268, 116,
	269, 117, 118, 0, 0, 626, 270, 119, 271, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	272, 127, 128, 131, 129, 569, 130, 594, 622, 132,
	642, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	273, 136, 274, 616, 137, 138, 139, 0, 617, 140,
	223, 141, 0, 142, 143, 144, 643, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 275, 152, 153, 583,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 611,
	160, 161, 276, 162, 644, 228, 163, 0, 169, 164,
	165, 166, 168, 645, 167, 618, 0, 170, 0, 171,
	172, 0, 231, 646, 647, 0, 0, 173, 619, 620,
	592, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	612, 0, 181, 182, 183, 236, 648, 1526, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 570, 0,
	598, 587, 588, 585, 586, 574, 0, 0, 0, 566,
	567, 0, 0, 0, 0, 568, 76, 77, 575, 78,
	0, 0, 0, 0, 614, 580, 0, 0, 0, 79,
	80, 190, 628, 192, 629, 81, 630, 631, 0, 82,
	196, 197, 83, 595, 613, 632, 633, 200, 0, 624,
	0, 606, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 264, 91, 92, 0, 607, 609, 0,
	608, 610, 93, 94, 95, 96, 634, 97, 635, 636,
	663, 98, 0, 99, 0, 0, 0, 627, 101, 0,
	102, 0, 0, 0, 579, 103, 104, 615, 593, 0,
	0, 105, 106, 637, 0, 107, 0, 108, 0, 0,
	265, 0, 109, 625, 0, 209, 0, 110, 111, 112,
	621, 623, 267, 0, 115, 0, 113, 0, 266, 114,
	638, 639, 640, 641, 0, 605, 0, 268, 116, 269,
	117, 118, 0, 0, 626, 270, 119, 271, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 272,
	127, 128, 131, 129, 569, 130, 594, 622, 132, 642,
	133, 134, 0, 0, 0, 0, 0, 135, 220, 273,
	136, 274, 616, 137, 138, 139, 0, 617, 140, 223,
	141, 0, 142, 143, 144, 643, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 275, 152, 153, 583, 154,
	0, 155, 156, 157, 0, 226, 158, 159, 611, 160,
	161, 276, 162, 644, 228, 163, 0, 169, 164, 165,
	166, 168, 645, 167, 618, 0, 170, 0, 171, 172,
	0, 231, 646, 647, 0, 0, 173, 619, 620, 592,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 612,
	0, 181, 182, 183, 236, 648, 0, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 570, 0, 598,
	587, 588, 585, 586, 574, 0, 0, 0, 566, 567,
	0, 0, 0, 0, 568, 76, 77, 575, 78, 0,
	0, 0, 0, 614, 580, 0, 0, 0, 79, 80,
	190, 628, 192, 629, 81, 630, 631, 0, 82, 196,
	197, 83, 595, 613, 632, 633, 200, 0, 624, 0,
	606, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 264, 91, 92, 0, 607, 609, 0, 608,
	610, 93, 94, 95, 96, 634, 97, 635, 636, 0,
	98, 0, 99, 0, 0, 0, 627, 101, 0, 102,
	0, 0, 0, 579, 103, 104, 615, 593, 0, 0,
	105, 106, 637, 0, 107, 0, 108, 0, 1195, 265,
	0, 109, 625, 0, 209, 0, 110, 111, 112, 621,
	623, 267, 0, 115, 0, 113, 0, 266, 114, 638,
	639, 640, 641, 0, 605, 0, 268, 116, 269, 117,
	118, 0, 0, 626, 270, 119, 271, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 569, 130, 594, 622, 132, 642, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 273, 136,
	274, 616, 137, 138, 139, 0, 617, 140, 223, 141,
	0, 142, 143, 144, 643, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 275, 152, 153, 583, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 611, 160, 161,
	276, 162, 644, 228, 163, 0, 169, 164, 165, 166,
	168, 645, 167, 618, 0, 170, 0, 171, 172, 0,
	231, 646, 647, 0, 0, 173, 619, 620, 592, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 612, 0,
	181, 182, 183, 236, 648, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 570, 0, 0, 0,
	0, 598, 587, 588, 585, 586, 574, 566, 567, 0,
	0, 0, 0, 568, 0, 0, 575, 76, 77, 833,
	78, 0, 0, 0, 0, 614, 580, 0, 0, 0,
	79, 80, 190, 628, 192, 629, 81, 630, 631, 0,
	82, 196, 197, 83, 595, 613, 632, 633, 200, 0,
	624, 0, 606, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 264, 91, 92, 0, 607, 609,
	0, 608, 610, 93, 94, 95, 96, 634, 97, 635,
	636, 0, 98, 0, 99, 0, 0, 0, 627, 101,
	0, 102, 0, 0, 0, 579, 103, 104, 615, 593,
	0, 0, 105, 106, 637, 0, 107, 0, 108, 0,
	0, 265, 0, 109, 625, 0, 209, 0, 110, 111,
	112, 621, 623, 267, 0, 115, 0, 113, 0, 266,
	114, 638, 639, 640, 641, 0, 605, 0, 268, 116,
	269, 117, 118, 0, 0, 626, 270, 119, 271, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	272, 127, 128, 131, 129, 569, 130, 594, 622, 132,
	642, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	273, 136, 274, 616, 137, 138, 139, 0, 617, 140,
	223, 141, 0, 142, 143, 144, 643, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 275, 152, 153, 583,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 611,
	160, 161, 276, 162, 644, 228, 163, 0, 169, 164,
	165, 166, 168, 645, 167, 618, 0, 170, 0, 171,
	172, 0, 231, 646, 647, 0, 0, 173, 619, 620,
	592, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	612, 0, 181, 182, 183, 236, 648, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 570, 0,
	598, 587, 588, 585, 586, 574, 0, 0, 0, 566,
	567, 0, 0, 0, 0, 568, 76, 77, 575, 78,
	0, 0, 0, 0, 614, 580, 0, 0, 0, 79,
	80, 190, 628, 192, 629, 81, 630, 631, 0, 82,
	196, 197, 83, 595, 613, 632, 633, 200, 0, 624,
	0, 606, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 264, 91, 1867, 0, 607, 609, 0,
	608, 610, 93, 94, 95, 96, 634, 97, 635, 636,
	0, 98, 0, 99, 0, 0, 0, 627, 101, 0,
	102, 0, 0, 0, 579, 103, 104, 615, 593, 0,
	0, 105, 106, 637, 0, 107, 0, 108, 0, 0,
	265, 0, 109, 625, 0, 209, 0, 110, 111, 112,
	621, 623, 267, 0, 115, 0, 113, 0, 266, 114,
	638, 639, 640, 641, 0, 605, 0, 268, 116, 269,
	117, 118, 0, 0, 626, 270, 119, 271, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 272,
	127, 128, 131, 129, 569, 130, 594, 622, 132, 642,
	133, 134, 0, 0, 0, 0, 0, 135, 220, 273,
	136, 274, 616, 137, 138, 139, 0, 617, 140, 223,
	141, 0, 142, 143, 144, 643, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 275, 152, 153, 583, 154,
	0, 155, 156, 157, 0, 226, 158, 159, 611, 160,
	161, 276, 162, 644, 228, 163, 0, 169, 164, 165,
	166, 168, 645, 167, 618, 0, 170, 0, 171, 172,
	0, 231, 646, 647, 0, 0, 173, 619, 620, 592,
	174, 175, 1866, 177, 0, 0, 178, 179, 180, 612,
	0, 181, 182, 183, 236, 648, 0, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 570, 0, 598,
	587, 588, 585, 586, 574, 0, 0, 0, 566, 567,
	0, 0, 0, 0, 568, 76, 77, 575, 78, 0,
	0, 0, 0, 614, 580, 0, 0, 0, 79, 80,
	1865, 628, 192, 629, 81, 630, 631, 0, 82, 196,
	197, 83, 595, 613, 632, 633, 200, 0, 624, 0,
	606, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 264, 91, 1867, 0, 607, 609, 0, 608,
	610, 93, 94, 95, 96, 634, 97, 635, 636, 0,
	98, 0, 99, 0, 0, 0, 627, 101, 0, 102,
	0, 0, 0, 579, 103, 104, 615, 593, 0, 0,
	105, 106, 637, 0, 107, 0, 108, 0, 0, 265,
	0, 109, 625, 0, 209, 0, 110, 111, 112, 621,
	623, 267, 0, 115, 0, 113, 0, 266, 114, 638,
	639, 640, 641, 0, 605, 0, 268, 116, 269, 117,
	118, 0, 0, 626, 270, 119, 271, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 569, 130, 594, 622, 132, 642, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 273, 136,
	274, 616, 137, 138, 139, 0, 617, 140, 223, 141,
	0, 142, 143, 144, 643, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 275, 152, 153, 583, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 611, 160, 161,
	276, 162, 644, 228, 163, 0, 169, 164, 165, 166,
	168, 645, 167, 618, 0, 170, 0, 171, 172, 0,
	231, 646, 647, 0, 0, 173, 619, 620, 592, 174,
	175, 1866, 177, 0, 0, 178, 179, 180, 612, 0,
	181, 182, 183, 236, 648, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 570, 0, 598, 587,
	588, 585, 586, 574, 0, 0, 0, 566, 567, 0,
	0, 0, 0, 568, 76, 77, 575, 78, 0, 0,
	0, 0, 614, 580, 0, 0, 0, 79, 80, 190,
	628, 192, 629, 81, 630, 631, 0, 82, 196, 197,
	83, 595, 613, 632, 633, 200, 0, 624, 0, 606,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 264, 91, 92, 0, 607, 609, 0, 608, 610,
	93, 94, 95, 96, 634, 97, 635, 636, 0, 98,
	0, 99, 0, 0, 0, 627, 101, 0, 102, 0,
	0, 0, 579, 103, 104, 615, 593, 0, 0, 105,
	106, 637, 0, 107, 0, 108, 0, 0, 265, 0,
	109, 625, 0, 209, 0, 110, 111, 112, 621, 623,
	267, 0, 115, 0, 113, 0, 266, 114, 638, 639,
	640, 641, 0, 605, 0, 268, 116, 269, 117, 118,
	0, 0, 626, 270, 119, 271, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 272, 127, 128,
	131, 129, 569, 130, 594, 622, 132, 642, 133, 134,
	0, 0, 0, 0, 0, 135, 220, 273, 136, 274,
	616, 137, 138, 139, 0, 617, 140, 223, 141, 0,
	142, 143, 144, 643, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 275, 152, 153, 583, 154, 0, 155,
	156, 157, 0, 226, 158, 159, 611, 160, 161, 276,
	162, 644, 228, 163, 0, 169, 164, 165, 166, 168,
	645, 167, 618, 0, 170, 0, 171, 172, 0, 231,
	646, 647, 0, 0, 173, 619, 620, 592, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 612, 0, 181,
	182, 183, 236, 648, 0, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 570, 0, 598, 587, 588,
	585, 586, 574, 0, 0, 0, 566, 567, 0, 0,
	0, 0, 568, 76, 77, 575, 78, 0, 0, 0,
	0, 614, 580, 0, 0, 0, 79, 80, 190, 628,
	192, 629, 81, 630, 631, 0, 82, 196, 197, 83,
	595, 613, 632, 633, 200, 0, 624, 0, 606, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	264, 91, 92, 0, 607, 609, 0, 608, 610, 93,
	94, 95, 96, 634, 97, 635, 636, 0, 98, 0,
	99, 0, 0, 0, 627, 101, 0, 102, 0, 0,
	0, 579, 103, 104, 615, 593, 0, 0, 105, 106,
	637, 0, 107, 0, 108, 0, 0, 265, 0, 109,
	625, 0, 209, 0, 110, 111, 112, 621, 623, 267,
	0, 115, 0, 113, 0, 266, 114, 638, 639, 640,
	641, 0, 605, 0, 268, 116, 269, 117, 118, 0,
	0, 626, 270, 119, 271, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 272, 127, 128, 131,
	129, 0, 130, 594, 622, 132, 642, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 273, 136, 274, 616,
	137, 138, 139, 0, 617, 140, 223, 141, 0, 142,
	143, 144, 643, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 275, 152, 153, 1185, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 611, 160, 161, 276, 162,
	644, 228, 163, 0, 169, 164, 165, 166, 168, 645,
	167, 618, 0, 170, 0, 171, 172, 0, 231, 646,
	647, 0, 0, 173, 619, 620, 592, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 612, 0, 181, 182,
	183, 236, 648, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 598, 587, 588, 585,
	586, 574, 0, 0, 0, 1181, 1182, 0, 0, 0,
	0, 1183, 76, 77, 1184, 78, 0, 0, 0, 0,
	614, 580, 0, 0, 0, 79, 80, 0, 628, 192,
	629, 81, 630, 631, 0, 82, 196, 197, 83, 595,
	613, 632, 633, 200, 0, 624, 0, 606, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 264,
	91, 1867, 0, 607, 609, 0, 608, 610, 93, 94,
	95, 96, 634, 97, 635, 636, 0, 98, 0, 99,
	0, 0, 0, 627, 101, 0, 102, 0, 0, 0,
	579, 103, 104, 615, 593, 0, 0, 105, 106, 637,
	0, 107, 0, 108, 0, 0, 265, 0, 109, 625,
	0, 209, 0, 110, 111, 112, 621, 623, 0, 0,
	115, 0, 113, 0, 266, 114, 638, 639, 640, 641,
	0, 605, 0, 0, 116, 269, 117, 118, 0, 0,
	626, 270, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 272, 127, 128, 131, 129,
	569, 130, 594, 622, 132, 642, 133, 134, 0, 0,
	0, 0, 0, 135, 220, 273, 136, 274, 616, 137,
	138, 139, 0, 617, 140, 223, 141, 0, 142, 143,
	144, 643, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 275, 152, 153, 583, 154, 0, 155, 156, 157,
	0, 226, 158, 159, 611, 160, 161, 0, 162, 644,
	228, 163, 0, 169, 164, 165, 166, 168, 645, 167,
	618, 0, 170, 0, 171, 172, 0, 231, 646, 647,
	0, 0, 173, 619, 620, 592, 174, 175, 1866, 177,
	0, 0, 178, 179, 180, 612, 0, 181, 182, 183,
	236, 648, 0, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 566, 567, 0, 0, 0, 0,
	568, 76, 77, 575, 78, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 613,
	198, 199, 200, 0, 624, 0, 606, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 264, 91,
	92, 0, 607, 609, 0, 608, 610, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 615, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 265, 0, 109, 625, 0,
	209, 0, 110, 111, 112, 621, 623, 267, 0, 115,
	0, 113, 0, 266, 114, 212, 213, 214, 215, 0,
	216, 0, 268, 116, 269, 117, 118, 0, 0, 626,
	270, 119, 271, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 0,
	130, 0, 622, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 273, 136, 274, 616, 137, 138,
	139, 0, 617, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	275, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 611, 160, 161, 276, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 618,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 619, 620, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 612, 0, 181, 182, 183, 236,
	237, 0, 0, 184, 481, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 1638, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 0, 201, 0, 263, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 264, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 0, 0, 0, 105, 106, 207, 0, 107,
	0, 108, 0, 0, 265, 0, 109, 208, 0, 209,
	0, 110, 111, 112, 210, 211, 267, 0, 115, 0,
	113, 0, 266, 114, 212, 213, 214, 215, 0, 216,
	0, 268, 116, 269, 117, 118, 0, 0, 217, 270,
	119, 271, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 272, 127, 128, 131, 129, 0, 130,
	0, 218, 132, 219, 133, 134, 0, 0, 0, 0,
	0, 135, 220, 273, 136, 274, 221, 137, 138, 139,
	0, 222, 140, 223, 141, 0, 142, 143, 144, 224,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 275,
	152, 153, 225, 154, 0, 155, 156, 157, 63, 226,
	158, 159, 0, 160, 161, 276, 162, 227, 228, 163,
	0, 169, 164, 165, 166, 168, 229, 167, 230, 0,
	170, 65, 171, 172, 0, 231, 232, 233, 0, 0,
	173, 234, 235, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 485, 237,
	0, 0, 184, 0, 0, 0, 61, 185, 186, 187,
	188, 0, 62, 481, 785, 0, 786, 781, 776, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	77, 60, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 263, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 264, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 789, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 778, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 265, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 267, 0, 115, 0, 113,
	0, 266, 114, 212, 213, 214, 215, 0, 216, 0,
	268, 116, 269, 117, 118, 0, 0, 217, 270, 119,
	271, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 272, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 779, 0, 0, 0,
	135, 220, 273, 136, 274, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 275, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 276, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 777, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 481,
	785, 184, 786, 781, 776, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 787, 782, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	263, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 264, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 772,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 778, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 265,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 267, 0, 115, 0, 113, 0, 266, 114, 212,
	213, 214, 215, 0, 216, 0, 268, 116, 269, 117,
	118, 0, 0, 217, 270, 119, 271, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 779, 0, 0, 0, 135, 220, 273, 136,
	274, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 275, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	276, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 777, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 481, 785, 184, 786, 781,
	776, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 787, 782, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 263, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 264, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 778, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 265, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 210, 211, 267, 0, 115,
	0, 113, 0, 266, 114, 212, 213, 214, 215, 0,
	216, 0, 268, 116, 269, 117, 118, 0, 0, 217,
	270, 119, 271, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 779, 0,
	0, 0, 135, 220, 273, 136, 274, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	275, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 276, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 777, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 787, 782, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 210, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 444, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 63, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 65, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 485, 237, 0, 0, 184,
	73, 0, 0, 61, 185, 186, 187, 188, 0, 62,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 1085, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 0, 0,
	0, 105, 106, 207, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 208, 0, 209, 0, 110, 111, 112,
	210, 211, 0, 0, 115, 0, 113, 0, 0, 114,
	212, 213, 214, 215, 0, 216, 0, 0, 116, 0,
	117, 118, 0, 0, 217, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 218, 132, 219,
	133, 134, 0, 0, 0, 0, 0, 135, 220, 0,
	136, 0, 221, 137, 138, 139, 0, 222, 140, 223,
	141, 0, 142, 143, 144, 224, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 225, 154,
	0, 155, 156, 157, 63, 226, 158, 159, 0, 160,
	161, 0, 162, 227, 228, 163, 0, 169, 164, 165,
	166, 168, 229, 167, 230, 0, 170, 65, 171, 172,
	0, 231, 232, 233, 0, 0, 173, 234, 235, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 485, 237, 0, 0, 184, 73,
	0, 0, 61, 185, 186, 187, 188, 0, 62, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 1317, 0, 60, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 0, 0, 184, 0, 73,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 556, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 444, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 0, 0, 184, 73, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 1085, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 0, 0, 0, 105,
	106, 207, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 208, 0, 209, 0, 110, 111, 112, 210, 211,
	0, 0, 115, 0, 113, 0, 0, 114, 212, 213,
	214, 215, 0, 216, 0, 0, 116, 0, 117, 118,
	0, 0, 217, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 218, 132, 219, 133, 134,
	0, 0, 0, 0, 0, 135, 220, 0, 136, 0,
	221, 137, 138, 139, 0, 222, 140, 223, 141, 0,
	142, 143, 144, 224, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 225, 154, 0, 155,
	156, 157, 0, 226, 158, 159, 0, 160, 161, 0,
	162, 227, 228, 163, 0, 169, 164, 165, 166, 168,
	229, 167, 230, 0, 170, 0, 171, 172, 0, 231,
	232, 233, 0, 0, 173, 234, 235, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 236, 237, 0, 0, 184, 0, 73, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 679, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 0, 0, 0, 105,
	106, 207, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 208, 0, 209, 0, 110, 111, 112, 210, 211,
	0, 0, 115, 0, 113, 0, 0, 114, 212, 213,
	214, 215, 0, 216, 0, 0, 116, 0, 117, 118,
	0, 0, 217, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 218, 132, 219, 133, 134,
	0, 0, 0, 0, 0, 135, 220, 0, 136, 0,
	221, 137, 138, 139, 0, 222, 140, 223, 141, 0,
	142, 143, 144, 224, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 225, 154, 0, 155,
	156, 157, 0, 226, 158, 159, 0, 160, 161, 0,
	162, 227, 228, 163, 0, 169, 164, 165, 166, 168,
	229, 167, 230, 0, 170, 0, 171, 172, 0, 231,
	232, 233, 0, 0, 173, 234, 235, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 236, 237, 0, 0, 184, 73, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 991, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 0, 0, 184, 73, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 1536, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 0, 0, 0, 105, 106, 207,
	0, 107, 0, 108, 0, 0, 0, 0, 109, 208,
	0, 209, 0, 110, 111, 112, 210, 211, 0, 0,
	115, 0, 113, 0, 0, 114, 212, 213, 214, 215,
	0, 216, 0, 0, 116, 0, 117, 118, 0, 0,
	217, 0, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 0, 127, 128, 131, 129,
	0, 130, 0, 218, 132, 219, 133, 134, 0, 0,
	0, 0, 0, 135, 220, 0, 136, 0, 221, 137,
	138, 139, 0, 222, 140, 223, 141, 0, 142, 143,
	144, 224, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 225, 154, 0, 155, 156, 157,
	0, 226, 158, 159, 0, 160, 161, 0, 162, 227,
	228, 163, 0, 169, 164, 165, 166, 168, 229, 167,
	230, 0, 170, 0, 171, 172, 0, 231, 232, 233,
	0, 0, 173, 234, 235, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	236, 237, 0, 0, 184, 73, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 659, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 756,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 210, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 755, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 0, 73, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 759, 189, 0, 0, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	0, 0, 0, 105, 106, 207, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 208, 0, 209, 0, 110,
	111, 112, 210, 211, 0, 0, 115, 0, 113, 0,
	0, 114, 212, 213, 214, 215, 0, 216, 0, 0,
	116, 0, 117, 118, 0, 0, 217, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 218,
	132, 219, 133, 134, 0, 0, 0, 0, 0, 135,
	220, 0, 136, 0, 221, 137, 138, 139, 0, 222,
	140, 223, 141, 0, 142, 143, 144, 224, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	225, 154, 0, 155, 156, 157, 0, 226, 158, 159,
	0, 160, 161, 0, 162, 227, 228, 163, 0, 169,
	164, 165, 166, 168, 229, 167, 230, 0, 170, 0,
	171, 172, 0, 231, 232, 233, 0, 0, 173, 234,
	235, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 236, 237, 0, 481,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 759, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	263, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 264, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 265,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 267, 0, 115, 0, 113, 0, 266, 114, 212,
	213, 214, 215, 0, 216, 0, 268, 116, 269, 117,
	118, 0, 0, 217, 270, 119, 271, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 273, 136,
	274, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 275, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	276, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 957, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 955, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 1060, 0, 105, 106, 207, 0,
	107, 0, 108, 960, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 210, 211, 0, 0, 115,
	1058, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 959, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	1059, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 957,
	201, 0, 0, 952, 84, 85, 86, 0, 87, 955,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 960,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 951, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 959, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 958, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 1317, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 444, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 707,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 444, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 492, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 210, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 449, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 444, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 361, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 360, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 1231,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 1229, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 1218, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 823, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 375, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 692, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 0, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 541, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 537, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 498, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 386, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 385, 232,
	233, 0, 0, 381, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 386, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 385, 232, 233, 0, 0, 381,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 477,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 474, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 471, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 469, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 452, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 433, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 210, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 378, 0, 0, 121, 0, 122,
	123, 124, 125, 386, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 380, 154, 0, 155, 156, 157, 0,
	226, 158, 379, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 385, 232, 233, 0,
	0, 381, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 210, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 0, 0, 222, 140,
	223, 141, 0, 142, 0, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	0, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 849, 850,
	0, 869, 870, 871, 879, 880, 881, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 852, 0, 883, 849, 850, 0, 869, 870, 871,
	879, 880, 881, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 851, 0, 0, 0, 0, 852, 866, 883,
	0, 0, 0, 849, 850, 0, 869, 870, 871, 879,
	880, 881, 0, 0, 0, 0, 0, 0, 851, 872,
	0, 0, 0, 0, 866, 0, 852, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 857, 851, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 884, 0, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	876, 884, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 873, 0, 876,
	884, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 874, 0, 0, 0, 0, 0,
	867, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 875,
	0, 0, 863, 864, 865, 0, 862, 859, 860, 861,
	853, 854, 855, 856, 858, 0, 878, 0, 0, 0,
	0, 0, 0, 1415, 0, 875, 0, 0, 863, 864,
	865, 0, 862, 859, 860, 861, 853, 854, 855, 856,
	858, 0, 878, 0, 0, 0, 0, 1373, 1374, 1414,
	1391, 1392, 1393, 0, 875, 0, 0, 863, 864, 865,
	0, 862, 859, 860, 861, 853, 854, 855, 856, 858,
	0, 878, 0, 0, 0, 0, 849, 850, 1413, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 1388, 0, 852,
	0, 883, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	851, 0, 0, 0, 0, 852, 866, 883, 0, 0,
	0, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 1379, 851, 872, 0, 0,
	0, 0, 866, 0, 852, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 857, 851, 0, 0, 1394, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 884, 1389, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 876, 884,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 873, 0, 876, 884, 867,
	0, 1390, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 874, 0, 0, 0, 0, 0, 867, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 1385, 1386, 1387, 0, 1384, 1381, 1382, 1383, 1375,
	1376, 1377, 1378, 1380, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 0, 0,
	0, 1366, 0, 875, 0, 0, 863, 864, 865, 0,
	862, 859, 860, 861, 853, 854, 855, 856, 858, 0,
	878, 0, 1373, 1374, 1818, 1391, 1392, 1393, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 1517, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 849, 850, 1816, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 1388, 0, 852, 0, 883, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 851, 0, 0, 0, 0,
	852, 866, 883, 0, 0, 0, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	1379, 851, 872, 0, 0, 0, 0, 866, 0, 852,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	851, 0, 0, 1394, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 884, 1389,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 876, 884, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	873, 0, 876, 884, 867, 0, 1390, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 874, 0, 0,
	0, 0, 0, 867, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 1385, 1386, 1387, 0,
	1384, 1381, 1382, 1383, 1375, 1376, 1377, 1378, 1380, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 0, 0, 1797, 0, 0, 0, 0, 875, 0,
	0, 863, 864, 865, 0, 862, 859, 860, 861, 853,
	854, 855, 856, 858, 0, 878, 0, 1373, 1374, 1772,
	1391, 1392, 1393, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 849, 850, 1767, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 1388, 0, 852,
	0, 883, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	851, 0, 0, 0, 0, 852, 866, 883, 0, 0,
	0, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 1379, 851, 872, 0, 0,
	0, 0, 866, 0, 852, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 857, 851, 0, 0, 1394, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 884, 1389, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 876, 884,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 873, 0, 876, 884, 867,
	0, 1390, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 874, 0, 0, 0, 0, 0, 867, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 1385, 1386, 1387, 0, 1384, 1381, 1382, 1383, 1375,
	1376, 1377, 1378, 1380, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 1763, 0,
	0, 0, 0, 875, 0, 0, 863, 864, 865, 0,
	862, 859, 860, 861, 853, 854, 855, 856, 858, 0,
	878, 0, 1373, 1374, 1698, 1391, 1392, 1393, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 849, 850, 1697, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 1388, 0, 852, 0, 883, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 851, 0, 0, 0, 0,
	852, 866, 883, 0, 0, 0, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	1379, 851, 872, 0, 0, 0, 0, 866, 0, 852,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	851, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 884, 1389,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 876, 884, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	873, 0, 876, 884, 867, 0, 1390, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 874, 0, 0,
	0, 0, 0, 867, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 1385, 1386, 1387, 0,
	1384, 1381, 1382, 1383, 1375, 1376, 1377, 1378, 1380, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 0, 0, 1605, 0, 0, 0, 0, 875, 0,
	0, 863, 864, 865, 0, 862, 859, 860, 861, 853,
	854, 855, 856, 858, 0, 878, 0, 0, 0, 1539,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 849, 850, 1523, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 852,
	0, 883, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	851, 0, 0, 0, 0, 852, 866, 883, 0, 0,
	0, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 851, 872, 0, 0,
	0, 0, 866, 0, 852, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 857, 851, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 876, 884,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 857,
	1886, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 873, 0, 876, 884, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 874, 0, 0, 0, 0, 0, 867, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 1885, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 1140, 0,
	0, 0, 0, 875, 0, 0, 863, 864, 865, 0,
	862, 859, 860, 861, 853, 854, 855, 856, 858, 0,
	878, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 852, 0, 883, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 851, 0, 0, 1073, 0, 852,
	866, 883, 886, 0, 0, 0, 0, 0, 849, 850,
	0, 869, 870, 871, 879, 880, 881, 0, 0, 0,
	851, 0, 0, 0, 872, 0, 866, 0, 885, 0,
	0, 852, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 0,
	1405, 0, 851, 1404, 1074, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 876, 884, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 857, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 873,
	0, 0, 0, 867, 876, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 874,
	0, 0, 0, 0, 868, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 877, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 863, 864, 865, 0, 862, 859, 860, 861,
	853, 854, 855, 856, 858, 0, 878, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	852, 0, 883, 849, 850, 0, 869, 870, 871, 879,
	880, 881, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 851, 0, 0, 0, 0, 852, 866, 883, 0,
	0, 0, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 851, 872, 0,
	0, 0, 0, 866, 0, 852, 0, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 857, 851, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 884, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 876,
	884, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 882, 1411, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 873, 428, 876, 884,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 874, 0, 0, 0, 0, 0, 867,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 729, 723, 746, 717, 737,
	736, 873, 0, 719, 718, 0, 0, 868, 748, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 1533, 0, 742,
	0, 734, 733, 0, 0, 0, 0, 877, 875, 0,
	732, 863, 864, 865, 0, 862, 859, 860, 861, 853,
	854, 855, 856, 858, 0, 878, 731, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 863, 864, 865,
	0, 862, 859, 860, 861, 853, 854, 855, 856, 858,
	0, 878, 0, 724, 725, 726, 727, 0, 745, 0,
	0, 0, 0, 875, 0, 0, 863, 864, 865, 0,
	862, 859, 860, 861, 853, 854, 855, 856, 858, 0,
	878, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 735, 0, 0, 0, 0, 872, 0, 0,
	0, 1406, 0, 0, 852, 0, 883, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 730, 0,
	0, 0, 0, 872, 0, 851, 0, 0, 0, 0,
	852, 866, 883, 0, 0, 0, 849, 850, 721, 869,
	870, 871, 879, 880, 881, 0, 728, 722, 0, 0,
	0, 851, 872, 0, 0, 750, 1365, 866, 0, 852,
	0, 883, 720, 0, 0, 743, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	851, 0, 0, 0, 0, 0, 866, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 884, 0,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 876, 884, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	873, 0, 876, 884, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 874, 0, 0,
	0, 0, 0, 867, 0, 868, 0, 1371, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 863, 864, 865, 0, 862, 859, 860, 861, 853,
	854, 855, 856, 858, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 852, 0,
	883, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 852, 866, 883, 0, 0, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 0,
	0, 866, 0, 852, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 851, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 884, 0, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 876, 884, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 873, 0, 876, 884, 867, 0,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 0, 867, 0, 868,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	877, 28, 0, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 877, 0, 0, 35,
	0, 0, 52, 0, 0, 0, 39, 36, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 877, 875, 0, 37, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 42, 0, 53, 0, 0,
	0, 0, 43, 0, 0, 63, 0, 0, 0, 0,
	46, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60,
}
var sqlPact = [...]int{

	24377, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 677, 16049, -1000,
	-1000, -1000, -1000, -1000, 592, 610, 129, 4236, 16049, 16049,
	15783, 1019, 1019, 17379, -1000, -1000, 20571, -1000, 2715, 406,
	407, 406, 406, 396, 17379, 500, 574, 130, -1000, 578,
	-9, 20305, 16049, 1239, 31, 14719, 263, 24377, 15517, 20039,
	16049, 315, 40, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1101, 996,
	986, 14719, 19773, 19507, 19241, 18975, -1000, 9890, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 497, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 271, 270, -1000,
	15251, -1000, 814, -1000, 30, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 805, -1000, 16049, -1000, -1000, 18709, 18443,
	266, 734, -1000, -1000, 487, 342, 1268, -1000, 42, -1000,
	-1000, 1100, -1000, 801, 1099, 1098, 1097, 1091, 1090, 1084,
	334, 765, -1000, 490, 734, -1000, 734, -1000, -1000, -1000,
	462, 17379, -1000, 14719, -1000, 18177, 16049, 1012, 17911, -1000,
	578, -1000, -1000, -1000, 868, 1238, 1238, 1238, 1254, 122,
	121, 130, 24, 16049, -1000, 264, 24, 6828, 6828, -1000,
	-1000, 263, -1000, 291, 12852, -1000, 7386, -1000, 1053, 1156,
	359, 564, 1154, -69, 644, 530, 12044, 40, -1000, -1000,
	-1000, 8784, 3959, 14719, 16049, 16049, 547, 17645, -1000, 1148,
	102, 1147, -1000, 101, 1144, -1000, 101, 1143, -1, -1000,
	-1000, -1000, -1000, -1000, -1000, 263, 14985, 1310, 23719, -1000,
	8784, -1000, -1000, 13121, 1152, 13121, -1000, -1000, 1306, -1000,
	8784, -1000, 29, 27, 938, 949, 10435, 10169, 1205, 774,
	-1000, -1000, -1000, 41, 4236, 16049, 1107, 13121, 16049, 16049,
	16049, 16049, 16049, 16049, -1000, 933, -1000, 16049, -1000, 26,
	25, -1000, 17379, -1000, 108, -1000, 259, 889, 80, 17113,
	1155, 887, -1000, 868, -1000, 784, 927, 7947, 8784, 130,
	-1000, -1000, 130, 130, 8784, -1000, -1000, 16049, 24, 1305,
	16049, 79, -1000, 23238, -1000, -1000, 8784, 8784, 8784, 8784,
	8784, 727, -1000, -1000, -1000, 5091, -1000, -1000, 40, 258,
	278, -1000, -1000, 254, 40, -1000, -1000, -1000, -1000, 248,
	1405, 421, -1000, -1000, -1000, 8784, 347, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1106, 247, 246, -1000,
	-1000, -1000, -1000, 244, 241, 240, 238, 237, 236, 235,
	234, 233, 231, 229, 228, 226, 216, 687, -1000, 360,
	-1000, -1000, 360, 360, -1000, 205, 205, 209, -1000, -1000,
	-1000, -1000, 205, -1000, -1000, -1000, 341, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 210, 79, -1000, -1000, -1000, 16049,
	-3, -1000, 24215, -1000, 7, 738, -1000, 14187, 1221, 1219,
	1220, 14719, 1269, 1265, 460, 16049, 16049, 457, -1000, 1083,
	-11, -1000, -1000, 2880, -1000, -1000, 352, 82, 1296, 82,
	12314, -1000, 16049, 16049, -1000, 16049, -1000, -1000, 16049, -1000,
	16049, 16049, -1000, 16049, 128, 13655, 640, 1140, -9, -15,
	-1000, 1321, -1000, -1000, -1000, -1000, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 209, 687, 205, 205, 205, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 341, -1000, -1000, 360, 360, 360, -1000,
	-1000, -16, 24215, 452, 15, 13388, 16049, -1000, 39, -1000,
	-1000, 1082, 401, -20, 674, 983, 770, -1000, -1000, -1000,
	-1000, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1379, -1000, -1000, -1000, -1000, 1391, 22, -1000,
	-1000, -1000, -1000, -1000, 1404, -1000, -1000, -1000, 4236, -1000,
	-1000, -1000, 16049, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 674, 983, -1000, -1000, 14719, 13921, 1283, 1138,
	1282, 16049, 798, 886, -1000, -1000, 322, 1137, -1000, -1000,
	-1000, -1000, 24215, -1000, 24215, 660, 991, -1000, 991, 19,
	-1000, 23206, -1000, 204, -22, -1000, 352, 6828, 11775, 23719,
	23719, 16049, 485, 8784, 8784, 8784, 8784, 8784, 8784, 8784,
	8784, 8784, 8784, 8784, 8784, 8784, 8784, 8784, 8784, 8784,
	8784, 8784, 8784, 8784, 8784, 853, 8784, 449, 8784, 8784,
	8784, 8784, 882, 720, 188, 4236, -1000, 577, 577, 577,
	24241, 24241, 191, 23, 22836, 16, 40, -1000, -1000, 6546,
	6247, 40, 4513, -1000, 781, 1390, 357, 24215, 1114, 1038,
	202, 120, 119, 8784, 8784, 617, 8784, 9063, 8784, 8784,
	5370, 8784, 8784, 8784, 8784, 8784, 8784, -1000, 200, -1000,
	-1000, -1000, -1000, 1389, -1000, -1000, 1388, -1000, 478, 429,
	1387, 352, 118, 7386, -1000, 640, 16049, 16049, 16049, -1000,
	-1000, 883, 16847, 881, 23719, 16049, -1000, 197, 196, 964,
	946, 16049, 16049, 16581, 16315, 16049, 706, 194, 190, 16049,
	582, -1000, 16049, 525, 1080, 16049, -1000, 8784, 583, 8784,
	731, -1000, 11236, 363, 16049, 609, 72, -1000, -1000, -1000,
	318, 16049, -1000, -1000, -1000, 102, -1000, 101, 101, -1000,
	-1000, 14719, -1000, -1000, -1000, -1000, -1000, -1000, 23719, 290,
	280, -1000, 1385, 447, -1000, 442, 441, 438, -1000, 189,
	-1000, 8784, 16049, 13388, 15, 13, -1000, -1000, 16049, 983,
	-1000, -1000, -1000, -1000, 603, -1000, 667, -1000, 10701, -1000,
	-1000, -1000, 781, -1000, 4, -1000, -1000, -1000, -1000, 116,
	-26, 10, 23719, -1000, -1000, -1000, -1000, -1000, 16049, 199,
	16049, -9, 16049, -9, 16049, 1135, 1403, 16049, -1000, -1000,
	-1000, 8784, -1000, -1000, -1000, -9, 16049, -1000, 1032, -1000,
	-12, 1257, -103, 14453, -1000, 10967, -1000, -1000, -1000, 333,
	286, 286, 426, 426, 426, 426, 160, 160, 934, 1951,
	3175, 3175, 3175, 888, 300, 300, 3175, 3175, 3175, 24241,
	3280, 2775, 8784, 8784, 425, 713, 188, 2775, 8784, 1374,
	2775, 2775, 2775, -1000, 1151, -1000, -1000, -1000, 1079, 187,
	9063, 9063, -1000, -1000, -1000, 5091, -1000, -1000, 185, 8784,
	-1000, 8784, -30, -114, -1000, -1000, -33, -1000, -1000, -24,
	8784, 8784, 8784, 113, -1000, 107, 536, -1000, 8784, 735,
	184, 181, 8784, -1000, -1000, 23926, 21456, 100, 1078, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 99, 23897, 98, 21427,
	-1000, 9063, 9063, 9063, 5091, 178, 97, 23180, -104, 23871,
	7665, 7665, 7665, 93, 23582, 8784, -104, 21163, 21134, 21108,
	-39, -40, -41, 1383, -45, 91, 331, 321, 90, 1032,
	-1000, -1000, -1000, -1000, 423, 418, 1133, -1000, 859, -1000,
	371, -1000, 676, 8784, 16049, 177, 176, 716, -1000, 1126,
	783, 1125, 783, -1000, 7, 710, 8784, 8784, -1000, 416,
	-1000, -1000, 517, -1000, 22862, -1000, 6828, 24215, -1000, 597,
	1225, -47, -1000, -1000, 6828, 352, 12314, 11775, 7386, -51,
	-1000, -1000, -1000, 640, -1000, 469, 1381, 89, 898, 777,
	672, 558, 1358, 24215, 4, -1000, 4, -1000, -1000, -1000,
	-1000, -1000, -1000, 16049, 1016, -1000, 13921, 174, 16049, 173,
	-1000, 171, -1000, 170, 16049, -1000, 1155, -1000, 88, -1000,
	1029, 1251, -1000, 11775, 758, 976, 972, 11775, 873, 732,
	732, 732, -1000, 14453, 3671, -1000, -1000, 16049, 166, 11505,
	87, 1257, 8784, 2775, 2775, 8784, 9063, 9063, -1000, 2775,
	-1000, -1000, -1000, -1000, 1077, 161, 8784, 23719, 21772, 3388,
	-55, 5948, 1, 22546, -1000, -1000, 278, -1000, 86, 7107,
	-1000, 23527, -17, -17, -1000, 1402, 1160, -1000, 8784, 23553,
	-1000, 12583, 353, 749, 22517, 23719, 23719, -1000, 8784, -1000,
	1074, 8784, -1000, 23719, 23719, 9063, 9063, 9063, 9063, 9063,
	9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063,
	9063, 9063, 9063, 9063, 930, 9063, 1357, 1357, 1357, -2,
	5649, -1000, 1105, 1074, 8784, 8784, 23719, 85, 84, 83,
	-1000, 8784, -104, 8784, 8784, 8784, -1000, -1000, -1000, 73,
	-1000, 1353, -1000, -1000, -1000, -1000, 1029, 16049, 16049, 16049,
	1124, -1000, 2330, -1000, 22491, -66, 16049, 16049, -1000, 942,
	969, 388, 16049, -1000, 16049, -1000, 16049, 16049, 16049, -67,
	-71, 16049, -1000, -1000, -31, 6828, 201, -9, -31, 583,
	-1000, -10, -1000, 317, -1000, 274, 273, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 71, -1000, -1000, 1020, -1000,
	9621, 149, 16049, 13921, 1281, 9621, 792, -1000, -1000, 350,
	8784, 8784, 1257, 503, 11775, 11775, 1436, 971, 11775, -1000,
	-1000, -1000, -1000, -1000, -1000, 989, 146, 16049, 14453, 450,
	2775, 2707, 2338, 8784, 23719, 24270, -72, 8784, 8784, -1000,
	-78, -1000, 8784, -1000, -1000, 1400, 8784, 70, 65, 64,
	-1000, -1000, 24215, 8784, -1000, -1000, 20837, 8784, 63, -1000,
	61, 57, 24215, 1105, 24215, -1000, -1000, 607, 607, 1357,
	1357, 1357, 1357, 546, 546, 913, 2217, 2159, 2159, 2159,
	1086, 599, 599, 2159, 2159, 2159, 1060, 929, 145, 22117,
	8784, -79, -1000, -1000, -1000, 24215, 24215, 55, -1000, -1000,
	-1000, -104, 3075, 22201, 22172, -1000, 54, 350, -1000, -1000,
	-1000, 16049, -1000, 16049, -1000, 16049, 16049, 1050, 840, -1000,
	-1000, 936, 143, 9063, 16049, -1000, 689, -80, -86, 839,
	-1000, 827, 8784, -1000, 23719, 783, 783, -1000, 411, 410,
	-1000, -1000, -1000, -31, 1169, 16049, 1217, -1000, -1000, 142,
	-1000, -1000, -1000, 703, -87, -1000, 251, 1236, 8784, -1000,
	-1000, 141, 9621, -92, 53, -9, -94, 16049, -1000, 16049,
	24215, -104, 424, -1000, 1436, -1000, 140, 8784, 11775, -1000,
	-147, -1000, 313, -1000, 16049, -100, -1000, 8784, 8784, 24270,
	-105, -1000, 2775, 2775, -1000, 22146, -1000, 23527, -1000, -1000,
	-1000, 24215, 694, -1000, 21856, -1000, -1000, -1000, -1000, 9063,
	1044, 139, 23719, 21827, -1000, -1000, 8784, -1000, -1000, -1000,
	-1000, -1000, 833, -1000, -1000, 16049, 845, -1000, -1000, 8784,
	22117, 138, 1016, 137, -1000, -1000, -1000, 608, -1000, -1000,
	24215, 1237, -1000, -1000, 16049, 16049, 476, -106, 16049, -1000,
	-1000, 4812, 16049, 689, 9621, 1245, 40, 16049, 1245, 21801,
	4513, -115, -1000, 1016, -1000, 689, 134, -49, -1000, 1275,
	1394, -1000, 16049, 24215, -1000, 989, -1000, 4236, -121, -1000,
	2775, 2775, -1000, -1000, 51, 749, 1249, -1000, 22462, 9063,
	23719, -123, -1000, 21511, -1000, -1000, 1123, 21482, 915, 16049,
	-1000, 16049, 16049, 373, 16049, -1000, -1000, 545, -1000, 352,
	-1000, 132, 1016, -1000, -1000, -1000, -1000, 1236, -24, 689,
	-1000, 1016, 9621, 16049, 131, -1000, -127, -1000, -1000, -1000,
	-1000, 589, 8784, 22462, -128, -1000, -1000, 1117, -1000, 754,
	755, 50, -129, 80, -1000, 8784, -1000, 12314, -1000, 16049,
	-1000, 1245, 49, 1016, -1000, -133, -1000, -1000, -1000, 47,
	8505, 8505, -104, -1000, 16049, -1000, 778, 756, 552, -1000,
	-1000, -1000, -1000, -1000, 915, 24215, -125, -138, -1000, -1000,
	-1000, 689, -1000, -1000, -1000, 9342, 825, 568, 22891, -1000,
	-1000, -1000, 1175, -1000, 377, 841, 841, 754, -1000, 751,
	1016, 1331, -1000, -1000, -1000, -1000, -1000, -1000, 1338, -1000,
	-1000, 923, -1000, -1000, -1000, -1000, -1000, -1000, 8226, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1643, 1642, 1278, 123, 1641, 120, 1640, 1638, 1637,
	1636, 1635, 96, 118, 116, 125, 1634, 1633, 88, 1631,
	1624, 1611, 87, 1610, 1609, 1608, 56, 1607, 1606, 1604,
	1602, 1601, 1600, 84, 65, 159, 1891, 130, 1598, 1591,
	1589, 12, 97, 58, 1588, 35, 1584, 1583, 57, 91,
	101, 1099, 28, 1582, 1581, 134, 21, 16, 183, 98,
	140, 136, 112, 1580, 1578, 1576, 43, 1574, 3, 1573,
	1572, 14, 48, 49, 1571, 18, 104, 1570, 1569, 128,
	1566, 73, 89, 107, 32, 122, 111, 1559, 54, 11,
	75, 1558, 30, 1557, 42, 78, 138, 1555, 59, 141,
	61, 34, 52, 1554, 1553, 1552, 1549, 79, 1548, 90,
	67, 1547, 1545, 80, 1543, 131, 135, 1540, 1539, 117,
	1538, 1535, 1534, 146, 1532, 1531, 145, 1530, 6, 24,
	72, 9, 109, 105, 23, 1529, 17, 1528, 1791, 897,
	814, 1526, 53, 33, 81, 45, 46, 31, 1524, 1520,
	100, 1517, 1498, 1497, 1494, 1493, 77, 1492, 64, 132,
	27, 50, 95, 22, 26, 85, 99, 143, 102, 1490,
	1489, 113, 1488, 60, 1482, 1481, 1062, 110, 1480, 1477,
	1476, 928, 711, 635, 338, 1474, 1473, 620, 605, 1469,
	1468, 129, 1465, 1464, 142, 198, 51, 1463, 114, 1462,
	92, 1461, 0, 68, 36, 1459, 115, 76, 1458, 1451,
	1450, 1446, 25, 2, 7, 5, 10, 4, 20, 19,
	1444, 1442, 127, 82, 1439, 144, 1433, 1432, 1431, 37,
	1425, 15, 1423, 13, 1422, 1421, 8, 1, 137, 1419,
	94, 1418, 1310, 1416, 139, 1415, 1414, 1303, 86,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	43, 43, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 40, 40, 45,
	45, 45, 47, 47, 44, 44, 39, 39, 5, 5,
	5, 6, 6, 6, 6, 6, 12, 13, 13, 13,
	13, 13, 13, 13, 13, 85, 85, 84, 84, 87,
	87, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 172, 172, 171, 17, 148, 148, 18, 18, 18,
	18, 19, 108, 108, 20, 20, 20, 20, 21, 25,
	238, 238, 238, 242, 242, 243, 243, 244, 244, 244,
	244, 244, 244, 244, 240, 240, 28, 28, 28, 28,
	28, 127, 123, 123, 125, 125, 125, 125, 50, 122,
	122, 122, 122, 124, 124, 124, 124, 195, 194, 194,
	200, 200, 200, 63, 63, 63, 63, 63, 64, 64,
	64, 193, 193, 193, 193, 201, 201, 201, 201, 201,
	201, 65, 65, 65, 199, 199, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 16, 239, 239, 241, 241, 30, 30,
	9, 9, 10, 10, 66, 66, 67, 67, 130, 130,
	130, 130, 68, 68, 46, 46, 46, 129, 210, 210,
	211, 211, 211, 211, 211, 211, 212, 212, 212, 212,
	212, 212, 212, 208, 208, 209, 206, 206, 207, 207,
	207, 207, 245, 245, 128, 128, 71, 71, 215, 215,
	215, 215, 213, 213, 213, 213, 213, 216, 214, 217,
	217, 217, 217, 217, 159, 159, 159, 32, 11, 8,
	8, 112, 112, 75, 75, 163, 163, 163, 57, 57,
	41, 41, 41, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 113, 113, 114, 114, 23, 27, 31, 31,
	31, 31, 31, 247, 247, 54, 54, 54, 54, 55,
	55, 126, 126, 126, 126, 126, 49, 7, 7, 48,
	48, 22, 22, 22, 22, 22, 60, 60, 119, 119,
	119, 121, 121, 120, 120, 120, 98, 98, 33, 80,
	80, 89, 89, 90, 90, 169, 91, 91, 26, 26,
	36, 36, 34, 34, 34, 34, 34, 34, 35, 35,
	37, 37, 37, 37, 37, 37, 37, 223, 223, 223,
	225, 225, 222, 224, 224, 246, 246, 99, 99, 99,
	70, 69, 69, 73, 73, 72, 74, 74, 162, 96,
	96, 96, 96, 115, 116, 116, 117, 117, 118, 118,
	95, 95, 145, 145, 38, 38, 79, 79, 81, 81,
	136, 136, 137, 137, 135, 135, 135, 164, 164, 164,
	164, 165, 165, 165, 165, 165, 165, 160, 160, 160,
	160, 161, 161, 170, 170, 102, 102, 102, 102, 100,
	100, 101, 101, 166, 166, 166, 166, 97, 97, 167,
	167, 167, 131, 131, 173, 173, 173, 78, 78, 78,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 175, 175, 175, 175, 177, 177, 177,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 178, 178, 185, 185, 186, 186,
	187, 188, 179, 179, 180, 180, 181, 182, 189, 189,
	189, 189, 191, 191, 183, 183, 183, 183, 183, 184,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 110, 110, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 218, 218, 218,
	218, 218, 218, 218, 220, 220, 221, 221, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 226, 226, 227, 227, 229, 229,
	230, 230, 231, 232, 232, 232, 233, 234, 234, 228,
	228, 235, 235, 235, 236, 236, 237, 237, 237, 237,
	237, 150, 150, 150, 151, 151, 152, 86, 86, 147,
	147, 146, 146, 146, 149, 149, 103, 190, 190, 190,
	190, 190, 190, 190, 104, 104, 111, 105, 105, 106,
	106, 106, 106, 106, 106, 142, 143, 107, 107, 107,
	144, 144, 153, 157, 157, 156, 155, 155, 154, 154,
	134, 134, 134, 134, 133, 132, 92, 92, 248, 248,
	158, 158, 93, 93, 94, 88, 88, 168, 168, 168,
	168, 82, 82, 62, 62, 83, 83, 58, 58, 61,
	59, 59, 59, 59, 76, 76, 77, 77, 56, 56,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 192, 192, 192, 51, 51, 51, 52, 52, 53,
	53, 197, 197, 197, 198, 198, 198, 198, 196, 196,
	196, 196, 196, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 2, 4, 2, 2, 0, 2, 0, 8, 8,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 4, 7, 3,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 2,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 1, 1, 3, 2, 4, 0, 3, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -17, -19, -20, -21, -22, -24, -25, -27, -26,
	-28, -29, -30, -31, -23, -32, -33, 23, 64, -7,
	-8, -9, -10, -11, -224, 92, 100, 121, 194, 99,
	85, 115, 208, 215, -34, -36, 223, -127, 224, 34,
	233, 58, 95, 210, 205, 254, 66, -223, -37, -35,
	301, 276, 282, 218, -38, 241, 268, 304, 241, 129,
	78, -58, -51, 4, -202, -204, 20, 21, 23, 33,
	34, 39, 43, 46, 57, 58, 59, 61, 63, 64,
	65, 68, 69, 76, 77, 78, 79, 81, 85, 87,
	91, 92, 94, 99, 100, 105, 106, 109, 111, 116,
	121, 122, 123, 130, 133, 128, 142, 144, 145, 150,
	153, 156, 158, 159, 160, 161, 162, 164, 165, 167,
	169, 166, 172, 174, 175, 181, 184, 187, 188, 189,
	192, 194, 196, 197, 198, 200, 201, 205, 203, 204,
	206, 208, 210, 211, 213, 215, 216, 217, 220, 221,
	223, 224, 226, 229, 232, 233, 234, 237, 235, 231,
	240, 242, 243, 250, 254, 255, 256, 257, 260, 261,
	262, 265, 266, 267, 272, 277, 278, 279, 280, 28,
	35, 36, 37, 38, 40, 41, 44, 45, 49, 50,
	51, 53, 80, 82, 83, 98, 101, 107, 117, 119,
	124, 125, 134, 135, 136, 137, 139, 148, 171, 173,
	182, 186, 191, 193, 199, 212, 219, 227, 228, 236,
	238, 245, 246, 247, 251, 252, 268, 269, 87, 133,
	262, 261, 78, 129, 241, 271, -15, 301, -26, -6,
	-13, -4, -22, -33, -12, -14, 23, -196, 4, -202,
	-204, -203, -205, 55, 67, 114, 132, 126, 141, 143,
	149, 151, 163, 183, 185, 209, 225, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 42, 47, 48, 52,
	54, 56, 62, 66, 70, 71, 72, 73, 74, 75,
	84, 86, 88, 89, 90, 93, 95, 97, 102, 103,
	104, 110, 112, 113, 115, 118, 120, 127, 129, 131,
	138, 140, 146, 147, 152, 154, 155, 168, 170, 176,
	177, 178, 179, 180, 190, 195, 202, 207, 218, 222,
	230, 239, 241, 244, 248, 249, 253, 258, 259, 263,
	264, 270, 271, 273, 274, 275, 276, -51, -51, -51,
	194, 22, -242, 22, -243, -244, 66, 92, 115, 218,
	133, 87, 261, -242, -55, 215, -51, -123, 153, 221,
	212, 250, -124, -122, -195, 245, 162, -84, -51, 4,
	78, 57, 79, 116, 129, 130, 62, 63, 145, 242,
	245, 250, 22, 66, -247, 250, 250, -247, -247, -54,
	250, 248, -55, -246, 241, 241, 271, -112, 78, 259,
	-35, -37, -36, -72, -73, 258, 138, 97, 180, -34,
	-36, -223, -225, 200, -222, -51, -225, -69, -70, 22,
	89, 305, -166, -58, 178, -94, 301, -3, -166, 124,
	-58, -61, 124, -58, -51, 113, 301, -92, -134, -133,
	-132, 299, 303, 113, 140, 140, -167, -166, -51, 124,
	-62, 124, -61, -85, 124, -84, -85, 124, -172, -171,
	-198, 4, -202, -204, -203, 268, 241, -148, 301, -108,
	301, -51, 22, 177, 305, 177, -51, -123, 51, -123,
	301, -125, -49, -50, 142, 196, 248, 286, 113, 280,
	-65, 5, 84, -87, 303, 113, -239, 177, 113, 113,
	113, 113, 113, 113, 280, 142, 196, 241, -126, -49,
	-50, -126, 248, -55, -97, -166, -84, 124, -84, 129,
	-51, 124, -72, -73, -96, -115, -116, 152, 176, -99,
	22, 89, -99, -99, 43, 302, 302, 305, -225, -77,
	301, -88, -168, -138, 294, -140, 292, 293, 298, 168,
	281, -150, -58, -141, 9, 301, -153, -220, -36, 98,
	29, -151, -152, 212, -51, 7, 8, 5, 6, -56,
	-175, -184, 253, 102, 170, 47, -218, -219, 4, -202,
	-197, -176, -186, -180, -183, 139, 55, 71, 74, 72,
	75, 222, 263, 48, 28, 101, 186, 191, 238, 251,
	252, 124, 171, 125, 53, 117, 148, 91, 36, 38,
	40, 41, 49, 50, 80, 82, 83, 107, 134, 135,
	136, 137, 173, 199, 227, 236, 246, 247, 269, -203,
	-187, -188, -181, -182, -189, -88, -94, 294, -58, 301,
	-93, -158, -138, 84, -43, 203, -42, 21, 23, 92,
	266, 98, 231, 231, 203, 98, 306, 203, 234, 302,
	-82, -58, -134, -138, -196, 294, -167, -60, -58, -60,
	223, -51, 30, 98, -45, 305, 46, 206, 98, -45,
	305, 98, -45, 98, 302, 305, -166, 124, 30, -147,
	-173, -174, -176, -185, -179, -183, -184, 39, 45, 44,
	243, 219, 228, 37, 134, 135, 136, 137, 227, 36,
	199, 107, 91, 83, 82, 173, 41, 40, -187, -188,
	-181, -182, 80, 246, 247, 139, 38, 50, 49, 269,
	236, -86, -138, -238, -83, 241, 78, -59, -51, 294,
	-244, -238, 30, -86, 305, 305, 150, -64, 156, 167,
	122, -194, 84, -200, -193, -159, 9, 253, 102, 177,
	-199, 8, 293, -192, -198, 5, 7, 292, -194, 84,
	69, -201, 5, 4, -184, -159, 84, 153, 303, -196,
	-195, -241, 110, -238, -195, -195, -195, -195, -195, -51,
	150, -195, 305, 305, -55, -45, 305, 301, -71, 168,
	-71, 301, -52, 124, -51, -48, 94, 168, -96, -116,
	-115, -117, -138, 22, -138, -140, -35, -35, -35, -74,
	-162, -138, -222, 30, -76, -51, -79, 305, 113, 10,
	11, 54, 33, 292, 293, 294, 295, 108, 296, 289,
	290, 291, 288, 284, 285, 286, 60, 157, 214, 13,
	14, 15, 26, 179, 151, 281, 126, 225, 298, 16,
	17, 18, 141, 35, 127, 30, 4, -138, -138, -138,
	-138, -138, 185, -36, -138, -86, -92, -36, -146, 299,
	301, -92, 301, 5, 5, 301, -154, -138, -226, 277,
	110, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 193, -191, 272,
	-191, -191, -177, 301, -177, -178, 301, -177, 278, 282,
	301, -79, -58, 305, 302, 305, 248, -113, 62, 56,
	-129, 124, 56, -206, -51, 62, -207, 52, 259, 195,
	112, -113, 62, -113, 62, 62, -166, 33, 33, 248,
	-61, -51, 248, 113, 302, 305, 300, 309, -131, 274,
	-119, -26, 301, 84, 30, -119, -89, -90, -169, -91,
	-58, 301, -51, -51, -61, -62, -84, -85, -85, -15,
	-171, 98, -18, -26, -22, -33, -12, 302, 305, -78,
	29, -109, 301, 279, 160, 81, 123, 159, -110, 217,
	302, 305, 248, 305, -83, -76, -133, -132, 113, 250,
	302, -50, -49, -63, 198, 229, 204, 220, 305, 8,
	7, 7, 5, -196, -240, -51, -50, -49, -166, -66,
	-76, -67, -51, -130, -129, -208, -209, -206, 129, 259,
	103, 30, 98, 30, 177, 168, 286, 98, -118, 212,
	213, 305, -41, 31, 88, 301, 305, 302, -131, -168,
	-81, -164, -166, -36, -165, 301, -173, -173, -84, 245,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, 151, 126, 225, 35, 127, -138, 248, -138,
	-138, -138, -138, 170, 168, 253, 102, 260, 89, 174,
	-248, 239, 32, -144, -36, 301, -196, -150, 212, 301,
	302, 305, -86, -149, 300, -146, -86, 302, 302, -86,
	270, 22, 89, 294, -109, 7, -157, -156, 273, -227,
	105, 118, 301, 302, 302, -138, -138, -103, -190, 4,
	279, 160, 81, 123, 159, 217, -104, -138, -105, -139,
	-140, 292, 293, 298, 301, 212, -106, -138, -86, -138,
	42, 147, 249, -107, -138, 113, -86, -138, -138, -138,
	-86, -86, -86, 301, 7, 7, 245, 245, 7, -131,
	302, -158, -42, -58, -51, -51, 168, -129, 124, -47,
	168, -173, -51, 301, 301, 144, 144, -51, -51, 124,
	-51, 124, -51, -51, -43, 203, 301, 301, -51, 203,
	-51, 234, 113, -58, -138, -98, 207, -138, -98, -121,
	177, -82, 268, -51, 207, -80, 305, 113, 286, -82,
	-45, -45, -45, -166, -173, 299, 299, 7, 248, 248,
	248, 248, 301, -138, -240, -59, -240, -49, 257, 59,
	198, -200, -109, 305, 302, 302, 305, -52, 129, -52,
	-26, -84, -26, -58, 98, 5, -51, -162, -18, -51,
	-95, 118, -170, 305, 283, 67, -102, 143, 163, 114,
	149, 209, 132, -135, 306, -161, -160, 30, -51, -36,
	-165, -164, 280, -138, -138, 248, -248, 239, -144, -138,
	170, 253, 102, 260, 89, 174, 113, 301, -139, -139,
	-86, 301, -86, -138, 300, 300, 305, 302, -73, 305,
	-72, -138, -86, -86, 302, 302, -155, -156, 93, -138,
	-232, 184, 301, 301, -138, 30, 305, 302, 113, 302,
	-111, 190, 302, 10, 11, 292, 293, 294, 295, 108,
	296, 289, 290, 291, 288, 284, 285, 286, 60, 157,
	214, 13, 14, 15, 141, 127, -139, -139, -139, -86,
	301, 302, -142, -143, 113, 110, 30, -107, -107, -107,
	302, 113, -86, 305, 305, 305, 302, 302, 302, 7,
	302, 305, 302, 280, 280, 302, -95, 248, 248, 98,
	168, 265, -210, -207, -138, -76, 301, 301, -40, 92,
	223, -114, 98, -45, 98, -45, 248, -113, 62, -86,
	-86, 248, 234, 300, -88, 207, 61, 302, -88, -131,
	-90, -81, -158, 302, 300, 7, 7, 302, 160, 123,
	159, -110, 159, -110, -110, 7, -51, -68, 128, -130,
	301, -52, 301, 301, -71, 301, -51, -48, 302, -145,
	120, 43, -164, 174, 143, 143, -164, -102, 143, -100,
	183, -100, -100, -161, -196, 307, -51, 301, 302, -138,
	-138, -139, -139, 113, 301, -138, -147, 26, 26, 302,
	-86, 302, 305, 302, -146, 302, 270, -73, -73, -73,
	5, 95, -138, 244, -233, -51, 301, 274, -72, 302,
	-173, -173, -138, -142, -138, -173, -173, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, 89, 168, 174, -139,
	305, -86, 302, -143, -142, -138, -138, -173, 302, 302,
	302, -86, -138, -138, -138, 302, 7, -145, -51, -51,
	-129, 98, -211, 62, -212, 54, 103, 66, 168, 170,
	259, 195, 52, 84, 202, 302, 302, -76, -76, 168,
	84, 168, 84, 77, 255, -51, -51, -58, -51, -51,
	302, 302, -51, -88, -120, 301, 177, -26, -98, 286,
	300, 300, 302, 127, -75, -163, -51, -221, 301, -218,
	-219, -56, 301, -76, -66, 30, -75, 177, -229, 275,
	-138, -86, 240, -164, -164, -101, 264, 177, 143, -164,
	-137, -136, 111, 166, 301, -76, -160, 26, 26, -138,
	-147, 302, -138, -138, 302, -138, 5, -138, 302, 302,
	302, -138, -234, -51, -138, 302, 302, 302, -143, 113,
	89, 174, 301, -138, 302, 302, 305, 302, 302, 302,
	-229, -129, -51, -84, -51, 103, 124, 170, 144, 301,
	-139, -58, -128, -245, 65, 237, 302, 302, 170, 170,
	-138, -173, -45, -45, 248, 248, 90, -76, 62, -94,
	-36, 301, 187, 302, 305, -57, -92, 54, -57, -138,
	301, -75, 302, 302, -26, 302, -58, -230, -231, -51,
	245, -101, 301, -138, -164, 305, 308, 286, -76, 302,
	-138, -138, 302, 302, -73, -228, 189, 302, -139, 113,
	301, -147, 302, -138, -212, -52, 168, -138, -53, 301,
	-68, 301, 202, -44, 54, -51, -51, 261, 169, 302,
	-51, -51, -128, -163, -41, -84, -41, 302, -86, 302,
	-68, -128, 301, 305, 30, 5, -76, -136, -196, 302,
	302, -73, 43, -139, -147, 302, 302, 98, 302, -215,
	158, -51, -76, -58, -39, 264, -84, 223, -131, 301,
	-68, -57, -73, -128, -68, -75, -231, -233, 302, -235,
	197, 213, -86, 302, 103, -213, -216, -214, 177, 114,
	188, 226, 302, 302, -71, -138, -89, -76, -41, 302,
	-68, 302, 302, -236, -237, 35, 256, 69, -138, -236,
	-51, -214, 177, -216, 177, 261, 87, -215, -131, 302,
	-128, -237, 192, 109, 212, 192, 109, -217, 165, 206,
	46, 223, -217, -213, -46, 46, 206, -68, 26, 20,
	170, 84, -237,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 0, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 348, -2, 0, 130, 0, 304,
	0, 304, 304, 308, 0, 376, 272, 373, -2, 384,
	0, 0, 0, 382, 362, 0, 0, -2, 0, 0,
	0, 0, 777, 804, 805, 806, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 83, 84,
	85, 86, 87, 88, 89, 90, 0, 193, 818, 819,
	820, 821, 822, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 96, 103, 104,
	888, 106, 0, 113, 114, 115, 117, 118, 119, 120,
	121, 122, 123, 0, 297, 902, 310, 126, 867, 906,
	972, 920, 133, 143, 0, 978, -2, 147, 77, 176,
	177, 0, 179, 195, 0, 0, 0, 0, 0, 187,
	0, 0, 191, 0, 315, 303, 315, 300, 301, 302,
	305, 0, 296, 0, 375, 0, 0, 0, 0, 271,
	-2, 358, 359, -2, 0, 379, 379, 379, 0, 0,
	359, 0, 367, 892, 370, 787, 368, 0, 0, 381,
	380, 0, 363, 443, 0, 404, 0, 2, 0, 957,
	443, 0, 957, 0, 0, 0, 0, 778, 756, 750,
	751, 0, 0, 0, 0, 0, 0, 449, 67, 957,
	51, 957, 773, 51, 957, 75, 51, 957, 0, 91,
	93, 814, 815, 816, 817, 983, 0, 0, 0, 101,
	0, 105, 107, 0, 0, 0, 309, 127, 947, 129,
	0, 132, 134, 135, 0, 0, 0, 0, 0, 0,
	146, 171, 172, 78, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 190, 0, 298, 311,
	312, 299, 0, 307, 51, 447, 247, 957, 247, 808,
	320, 957, -2, 0, 354, 391, 392, 0, 0, 0,
	377, 378, 0, 0, 0, 350, 351, 0, 369, 0,
	0, 407, 765, 769, 770, 536, 0, 0, 0, 0,
	0, 0, 625, 626, 627, 0, 629, 630, 631, 952,
	0, 635, 636, 972, 777, 790, 791, 792, 793, 0,
	0, 0, 798, 799, 800, 749, 675, 645, -2, -2,
	788, 473, 474, 475, 476, -2, 985, 649, 651, 653,
	654, 655, 656, 0, 936, 953, 968, 969, 977, 981,
	982, 957, 965, 958, 948, 955, 964, 847, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 813,
	498, 499, 504, 505, 507, 407, 405, 444, 445, 0,
	0, 762, 760, 761, 28, 293, 30, 0, 293, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 771, 757, 0, 754, 755, 453, 0, 326, 0,
	0, 450, 0, 0, 69, 0, 49, 50, 0, 71,
	0, 0, 73, 0, 374, 0, 0, 957, 374, 0,
	709, 459, 460, 461, 462, 463, 533, 466, 467, 468,
	469, 470, 471, 472, 480, 481, 482, 483, 484, 485,
	486, 495, 0, 479, 479, 479, 492, 493, 496, 497,
	502, 503, 514, 515, 517, 519, 513, 513, 513, 510,
	511, 0, 707, 0, 110, 0, 842, 775, 780, 781,
	116, 0, 0, 0, 0, 0, 0, 138, 158, 159,
	160, 139, 141, 148, 150, 151, 152, 161, 162, 163,
	164, 264, 0, 266, 174, 175, 801, 0, 140, 142,
	144, 145, 165, 166, 0, 168, 169, 170, 0, 79,
	178, 180, 0, 194, 181, 182, 183, 184, 185, 186,
	189, 192, 0, 0, 306, 267, 0, 205, 0, 0,
	0, 0, 0, 957, 807, 317, 0, 0, 357, 389,
	390, 393, 396, 397, 394, 536, 364, 365, 366, 385,
	386, 282, 371, 0, 0, 784, 453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 768, 541, 542, 543,
	565, 566, 0, -2, 707, 0, 632, 633, 634, 0,
	0, -2, 0, 795, 533, 0, 0, 748, 677, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 501, 512,
	509, 508, 490, 0, 489, 487, 0, 491, 0, 0,
	0, 453, 0, 0, 764, 0, 0, 0, 0, 292,
	32, 957, 0, 53, 0, 0, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 779, 0, 0, 0, 0, 752, 0, 337, 0,
	337, 328, 0, 0, 0, 324, 340, 341, 343, 344,
	0, 0, 451, 68, 774, 51, 76, 51, 51, 82,
	92, 0, 94, 97, 98, 99, 100, 95, 0, 454,
	456, 464, 0, 520, 521, 522, 523, 524, 525, 534,
	102, 0, 0, 0, 111, 112, 782, 783, 0, 0,
	131, 136, 137, 316, 0, 155, 0, 157, 0, 265,
	803, 802, 533, 80, 196, 124, 313, 314, 448, 0,
	0, 204, 784, 206, 208, 209, 210, 211, 808, 0,
	808, 0, 0, 0, 0, 0, 0, 0, 395, 398,
	399, 0, 388, 280, 281, 374, 0, 786, 401, 766,
	434, 408, 416, 432, 419, 0, 537, 538, 539, 0,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	-2, -2, -2, 557, 558, 559, -2, -2, -2, 563,
	564, -2, 0, 0, 0, 759, 0, -2, 0, 573,
	-2, -2, -2, 577, 0, 580, 582, 584, 0, 0,
	0, 0, 758, 594, 740, 0, 767, 579, 0, 0,
	628, 0, 0, 0, 713, 714, 0, -2, 637, 384,
	0, 0, 0, 0, 796, 0, 747, 743, 0, 685,
	0, 0, 0, 650, 652, 0, 0, 0, 0, 717,
	718, 719, 720, 721, 722, 723, 0, 0, 0, 0,
	596, 0, 0, 0, 0, 972, 0, 707, 733, 0,
	0, 0, 0, 0, 707, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 401,
	446, 763, 31, 284, 0, 0, 0, 34, 957, 42,
	0, 219, 0, 0, 0, 0, 0, 295, 43, 957,
	51, 957, 51, 44, 29, 293, 0, 0, 286, 0,
	283, 59, 0, 772, 0, 66, 0, 452, 321, 322,
	0, 0, 330, 327, 0, 453, 0, 0, 0, 0,
	70, 72, 74, 0, 710, 0, 0, 0, 0, 0,
	0, 0, 0, 708, 108, 776, 109, 128, 153, 154,
	156, 149, 167, 0, 213, 246, 0, 0, 808, 0,
	202, 247, 268, 0, 0, 319, 320, 387, 0, 785,
	403, 0, 406, 0, 0, 0, 0, 0, 0, 440,
	440, 440, 438, 432, 0, 418, 431, 0, 430, -2,
	419, 0, 0, -2, -2, 0, 0, 0, 595, -2,
	578, 581, 583, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 708, 711, 712, 0, -2, 0, 0,
	383, 384, 384, 384, 643, 0, 0, 744, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 659, 0, 660,
	0, 0, 661, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 599, 600, 601, 0,
	0, 662, 731, 732, 0, 0, 0, 0, 0, 0,
	667, 0, 738, 0, 0, 0, 671, 672, 673, 0,
	477, 0, 494, 516, 518, 506, 403, 0, 0, 0,
	0, 52, 217, 236, 0, 0, 0, 0, 36, 0,
	0, 0, 0, 40, 0, 46, 0, 0, 0, 0,
	0, 0, 60, 753, 336, 0, 335, 0, 325, 337,
	342, 339, 345, 0, 457, 0, 0, 465, 526, 527,
	528, 529, 530, 531, 532, 0, 125, 200, 0, 207,
	0, 0, 0, 205, 0, 0, 0, 318, 372, 679,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 435,
	439, 436, 437, 417, 414, 0, 428, 0, 421, 540,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 741,
	0, 702, 0, -2, 715, 638, 0, 0, 0, 0,
	797, 742, 746, 0, 683, 684, 688, 0, 0, 648,
	0, 0, 716, 725, 726, 597, 598, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, -2, -2, -2,
	615, 616, 617, -2, -2, -2, 0, 0, 0, 727,
	0, 0, 705, 729, 730, 735, 736, 0, 664, 665,
	666, 737, 0, 0, 0, 500, 0, 679, 288, 290,
	33, 0, 218, 0, 221, 0, 0, 0, 0, 227,
	228, 0, 0, 0, 0, 238, 245, 0, 0, 0,
	48, 0, 0, 294, 0, 51, 51, 285, 0, 0,
	198, 199, 287, 323, 0, 0, 0, 329, 338, 0,
	458, 455, 535, 0, 0, 273, 279, 279, 0, 646,
	647, 0, 0, 0, 0, 0, 0, 0, 360, 0,
	402, 400, 0, 422, 0, 424, 0, 0, 0, 426,
	0, 412, 0, 411, 0, 0, 420, 0, 0, -2,
	0, 588, -2, -2, 701, 708, 794, 384, 639, 641,
	642, 745, 690, 687, 0, 674, 657, 658, 724, 0,
	0, 0, 0, 708, 704, 663, 0, 669, 670, 478,
	361, 35, 0, 222, 223, 808, 0, 226, 229, 0,
	231, 810, 213, 0, 242, 243, 240, 0, 37, 38,
	47, 55, 39, 45, 0, 0, 0, 0, 0, 346,
	347, 0, 0, 245, 0, 282, 789, 0, 282, 0,
	0, 0, 235, 213, 203, 245, 0, 678, 680, 0,
	0, 423, 0, 442, 425, 0, 415, 0, 0, 429,
	-2, -2, 589, 703, 0, 384, 0, 676, -2, 0,
	0, 0, 706, 0, 220, 224, 0, 0, 251, 0,
	239, 0, 0, 57, 0, 289, 291, 0, 332, 453,
	334, 0, 213, 274, 275, 278, 276, 279, 384, 245,
	201, 213, 0, 0, 0, 433, 0, 413, 410, 427,
	640, 693, 0, -2, 0, 623, 668, 0, 230, 256,
	0, 0, 0, 247, 41, 0, 54, 0, 333, 0,
	233, 282, 0, 213, 269, 0, 681, 682, 441, 0,
	0, 0, 689, 624, 0, 232, 252, 253, 0, 248,
	249, 250, 809, 244, 251, 56, 453, 0, 277, 638,
	234, 245, 686, 691, 694, -2, 923, 839, 0, 692,
	225, 254, 0, 255, 0, 0, 0, 256, 331, 216,
	213, 0, 696, 697, 698, 699, 700, 257, 0, 260,
	261, 0, 258, 241, 212, 214, 215, 270, 0, 259,
	262, 263, 695,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 290, 3, 296, 291, 3,
	301, 302, 294, 292, 305, 293, 303, 295, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 309, 304,
	284, 286, 285, 3, 306, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 299, 3, 300, 289, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 307, 288, 308, 298,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 287, 57627, 297, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:735
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:741
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:851
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			unimplementedWithIssue(2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			unimplemented()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{ /* SKIP DOC */
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			unimplemented()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			unimplemented()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = Low
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = Normal
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = High
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			unimplemented()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1435
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = DropDefault
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1842
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1846
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1950
		{
			unimplemented()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			unimplemented()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1954
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = Ascending
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = Descending
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = true
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = false
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.str = ""
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.str = ""
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2158
		{
			unimplementedWithIssue(6637)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2165
		{
			unimplementedWithIssue(6637)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2207
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			unimplementedWithIssue(7841)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2237
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2473
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = true
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = false
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = false
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = true
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &From{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.str = astFullJoin
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astLeftJoin
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.str = astRightJoin
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.str = astInnerJoin
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			unimplementedWithIssue(2115)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			unimplementedWithIssue(2115)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			unimplementedWithIssue(2115)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			unimplementedWithIssue(2115)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3010
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = nil
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3131
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3203
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3251
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3283
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3694
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3695
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3827
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3828
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3832
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = Window(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.str = ""
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3921
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3925
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			unimplemented()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4263
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4264
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4420
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4456
		{
			unimplemented()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = DNull
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.str = ""
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
