// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:291
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIGSERIAL = 57375
const BIT = 57376
const BLOB = 57377
const BOOL = 57378
const BOOLEAN = 57379
const BOTH = 57380
const BY = 57381
const BYTEA = 57382
const BYTES = 57383
const CASCADE = 57384
const CASE = 57385
const CAST = 57386
const CHAR = 57387
const CHARACTER = 57388
const CHARACTERISTICS = 57389
const CHECK = 57390
const COALESCE = 57391
const COLLATE = 57392
const COLLATION = 57393
const COLUMN = 57394
const COLUMNS = 57395
const COMMIT = 57396
const COMMITTED = 57397
const CONCAT = 57398
const CONFLICT = 57399
const CONSTRAINT = 57400
const COVERING = 57401
const CREATE = 57402
const CROSS = 57403
const CUBE = 57404
const CURRENT = 57405
const CURRENT_CATALOG = 57406
const CURRENT_DATE = 57407
const CURRENT_ROLE = 57408
const CURRENT_TIME = 57409
const CURRENT_TIMESTAMP = 57410
const CURRENT_USER = 57411
const CYCLE = 57412
const DATA = 57413
const DATABASE = 57414
const DATABASES = 57415
const DATE = 57416
const DAY = 57417
const DEC = 57418
const DECIMAL = 57419
const DEFAULT = 57420
const DEALLOCATE = 57421
const DEFERRABLE = 57422
const DELETE = 57423
const DESC = 57424
const DISTINCT = 57425
const DO = 57426
const DOUBLE = 57427
const DROP = 57428
const ELSE = 57429
const ENCODING = 57430
const END = 57431
const ESCAPE = 57432
const EXCEPT = 57433
const EXISTS = 57434
const EXECUTE = 57435
const EXPLAIN = 57436
const EXTRACT = 57437
const FALSE = 57438
const FAMILY = 57439
const FETCH = 57440
const FILTER = 57441
const FIRST = 57442
const FLOAT = 57443
const FLOORDIV = 57444
const FOLLOWING = 57445
const FOR = 57446
const FORCE_INDEX = 57447
const FOREIGN = 57448
const FROM = 57449
const FULL = 57450
const GRANT = 57451
const GRANTS = 57452
const GREATEST = 57453
const GROUP = 57454
const GROUPING = 57455
const HAVING = 57456
const HIGH = 57457
const HOUR = 57458
const IF = 57459
const IFNULL = 57460
const IN = 57461
const INDEX = 57462
const INDEXES = 57463
const INITIALLY = 57464
const INNER = 57465
const INSERT = 57466
const INT = 57467
const INT64 = 57468
const INTEGER = 57469
const INTERSECT = 57470
const INTERVAL = 57471
const INTO = 57472
const IS = 57473
const ISOLATION = 57474
const JOIN = 57475
const KEY = 57476
const KEYS = 57477
const LATERAL = 57478
const LEADING = 57479
const LEAST = 57480
const LEFT = 57481
const LEVEL = 57482
const LIKE = 57483
const LIMIT = 57484
const LOCAL = 57485
const LOCALTIME = 57486
const LOCALTIMESTAMP = 57487
const LOW = 57488
const LSHIFT = 57489
const MATCH = 57490
const MINUTE = 57491
const MONTH = 57492
const NAME = 57493
const NAMES = 57494
const NATURAL = 57495
const NEXT = 57496
const NO = 57497
const NO_INDEX_JOIN = 57498
const NORMAL = 57499
const NOT = 57500
const NOTHING = 57501
const NULL = 57502
const NULLIF = 57503
const NULLS = 57504
const NUMERIC = 57505
const OF = 57506
const OFF = 57507
const OFFSET = 57508
const ON = 57509
const ONLY = 57510
const OR = 57511
const ORDER = 57512
const ORDINALITY = 57513
const OUT = 57514
const OUTER = 57515
const OVER = 57516
const OVERLAPS = 57517
const OVERLAY = 57518
const PARTIAL = 57519
const PARTITION = 57520
const PLACING = 57521
const POSITION = 57522
const PRECEDING = 57523
const PRECISION = 57524
const PREPARE = 57525
const PRIMARY = 57526
const PRIORITY = 57527
const RANGE = 57528
const READ = 57529
const REAL = 57530
const RECURSIVE = 57531
const REF = 57532
const REFERENCES = 57533
const RENAME = 57534
const REPEATABLE = 57535
const RELEASE = 57536
const RESTRICT = 57537
const RETURNING = 57538
const REVOKE = 57539
const RIGHT = 57540
const ROLLBACK = 57541
const ROLLUP = 57542
const ROW = 57543
const ROWS = 57544
const RSHIFT = 57545
const SAVEPOINT = 57546
const SEARCH = 57547
const SECOND = 57548
const SELECT = 57549
const SERIAL = 57550
const SERIALIZABLE = 57551
const SESSION = 57552
const SESSION_USER = 57553
const SET = 57554
const SHOW = 57555
const SIMILAR = 57556
const SIMPLE = 57557
const SMALLINT = 57558
const SMALLSERIAL = 57559
const SNAPSHOT = 57560
const SOME = 57561
const SQL = 57562
const START = 57563
const STRICT = 57564
const STRING = 57565
const STORING = 57566
const SUBSTRING = 57567
const SYMMETRIC = 57568
const SYSTEM = 57569
const TABLE = 57570
const TABLES = 57571
const TEXT = 57572
const THEN = 57573
const TIME = 57574
const TIMESTAMP = 57575
const TIMESTAMPTZ = 57576
const TO = 57577
const TRAILING = 57578
const TRANSACTION = 57579
const TREAT = 57580
const TRIM = 57581
const TRUE = 57582
const TRUNCATE = 57583
const TYPE = 57584
const UNBOUNDED = 57585
const UNCOMMITTED = 57586
const UNION = 57587
const UNIQUE = 57588
const UNKNOWN = 57589
const UPDATE = 57590
const UPSERT = 57591
const USER = 57592
const USING = 57593
const VALID = 57594
const VALIDATE = 57595
const VALUE = 57596
const VALUES = 57597
const VARCHAR = 57598
const VARIADIC = 57599
const VARYING = 57600
const WHEN = 57601
const WHERE = 57602
const WINDOW = 57603
const WITH = 57604
const WITHIN = 57605
const WITHOUT = 57606
const YEAR = 57607
const ZONE = 57608
const NOT_LA = 57609
const WITH_LA = 57610
const AS_LA = 57611
const POSTFIXOP = 57612
const UMINUS = 57613

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'!'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4592

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	291, 24,
	-2, 349,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 324,
	167, 324,
	196, 324,
	288, 324,
	291, 324,
	-2, 334,
	-1, 51,
	1, 327,
	167, 327,
	196, 327,
	288, 327,
	291, 327,
	-2, 333,
	-1, 60,
	1, 24,
	291, 24,
	-2, 349,
	-1, 268,
	1, 161,
	291, 161,
	-2, 837,
	-1, 299,
	142, 359,
	166, 359,
	-2, 330,
	-1, 302,
	142, 358,
	166, 358,
	-2, 328,
	-1, 422,
	142, 358,
	166, 358,
	-2, 331,
	-1, 478,
	287, 779,
	-2, 772,
	-1, 479,
	287, 780,
	-2, 773,
	-1, 485,
	5, 493,
	287, 493,
	-2, 923,
	-1, 508,
	5, 459,
	-2, 899,
	-1, 509,
	5, 487,
	287, 487,
	-2, 901,
	-1, 510,
	5, 467,
	-2, 902,
	-1, 511,
	5, 466,
	-2, 903,
	-1, 512,
	5, 487,
	287, 487,
	-2, 906,
	-1, 513,
	5, 487,
	287, 487,
	-2, 907,
	-1, 514,
	5, 488,
	-2, 910,
	-1, 515,
	5, 454,
	-2, 911,
	-1, 516,
	5, 454,
	-2, 912,
	-1, 517,
	5, 469,
	-2, 915,
	-1, 518,
	5, 455,
	-2, 920,
	-1, 519,
	5, 456,
	-2, 921,
	-1, 520,
	5, 457,
	-2, 922,
	-1, 521,
	5, 454,
	-2, 926,
	-1, 522,
	5, 460,
	-2, 931,
	-1, 523,
	5, 458,
	-2, 934,
	-1, 524,
	5, 485,
	287, 485,
	-2, 936,
	-1, 525,
	5, 489,
	-2, 939,
	-1, 526,
	5, 491,
	-2, 940,
	-1, 527,
	5, 484,
	287, 484,
	-2, 944,
	-1, 839,
	91, 334,
	128, 334,
	142, 334,
	166, 334,
	170, 334,
	245, 334,
	-2, 599,
	-1, 847,
	287, 757,
	-2, 746,
	-1, 1038,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 528,
	-1, 1039,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 529,
	-1, 1040,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 530,
	-1, 1044,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 534,
	-1, 1045,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 535,
	-1, 1046,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 536,
	-1, 1049,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 541,
	-1, 1079,
	175, 670,
	-2, 673,
	-1, 1239,
	91, 334,
	128, 334,
	142, 334,
	166, 334,
	170, 334,
	245, 334,
	-2, 407,
	-1, 1243,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 542,
	-1, 1248,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 543,
	-1, 1266,
	175, 669,
	-2, 672,
	-1, 1421,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 544,
	-1, 1426,
	131, 0,
	-2, 554,
	-1, 1434,
	175, 671,
	-2, 674,
	-1, 1468,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 580,
	-1, 1469,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 581,
	-1, 1470,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 582,
	-1, 1474,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 586,
	-1, 1475,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 587,
	-1, 1476,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 588,
	-1, 1580,
	131, 0,
	-2, 555,
	-1, 1583,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 558,
	-1, 1584,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 560,
	-1, 1668,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 559,
	-1, 1669,
	31, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 561,
	-1, 1676,
	131, 0,
	-2, 589,
	-1, 1717,
	131, 0,
	-2, 590,
	-1, 1765,
	31, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 898,
}

const sqlNprod = 1037
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 22535

var sqlAct = [...]int{

	479, 1764, 1745, 1621, 1786, 1722, 1746, 921, 1747, 1763,
	929, 1010, 1445, 1572, 1656, 303, 795, 1643, 477, 476,
	1544, 1128, 1553, 1543, 1564, 1506, 269, 842, 469, 1558,
	671, 1236, 84, 84, 84, 844, 582, 84, 325, 85,
	84, 37, 994, 1322, 1401, 991, 1235, 1321, 84, 1269,
	1226, 776, 1410, 540, 960, 84, 84, 441, 993, 84,
	17, 1171, 84, 84, 84, 906, 569, 546, 84, 84,
	84, 84, 773, 351, 930, 549, 528, 897, 1089, 1222,
	1125, 1065, 23, 1062, 1022, 310, 50, 13, 6, 645,
	944, 73, 953, 986, 629, 308, 410, 346, 1177, 797,
	791, 551, 302, 451, 626, 1020, 442, 411, 541, 542,
	656, 348, 352, 78, 308, 71, 50, 1019, 77, 79,
	344, 8, 874, 343, 313, 7, 5, 4, 341, 997,
	923, 425, 424, 426, 256, 266, 643, 647, 247, 311,
	337, 625, 562, 429, 1663, 1292, 50, 1664, 51, 353,
	1793, 307, 80, 922, 1014, 878, 75, 74, 76, 452,
	800, 1760, 1753, 307, 321, 1642, 1014, 328, 571, 1234,
	799, 799, 571, 338, 52, 800, 1744, 1738, 560, 803,
	950, 1014, 292, 349, 1719, 1183, 1713, 331, 950, 1703,
	1014, 963, 800, 1642, 803, 315, 1707, 1694, 571, 300,
	802, 1014, 1670, 1667, 1653, 1650, 950, 1014, 1642, 1651,
	1641, 803, 1626, 1264, 1642, 802, 1014, 471, 322, 1265,
	1625, 322, 1605, 333, 1014, 299, 963, 322, 798, 333,
	1585, 1582, 802, 1263, 963, 950, 1517, 1298, 1481, 963,
	1014, 1433, 1292, 84, 1310, 1311, 1312, 1208, 895, 1430,
	1224, 583, 808, 963, 1579, 1378, 1372, 1210, 84, 1373,
	1373, 84, 84, 1014, 1339, 1337, 1336, 808, 1340, 963,
	963, 1335, 1266, 1268, 1015, 963, 963, 972, 1014, 962,
	965, 963, 949, 963, 808, 963, 950, 894, 1307, 577,
	1073, 893, 84, 578, 84, 1645, 84, 543, 84, 1009,
	436, 980, 544, 437, 800, 767, 56, 766, 637, 636,
	376, 320, 818, 84, 543, 423, 445, 800, 60, 544,
	1292, 572, 417, 803, 84, 572, 544, 58, 670, 818,
	396, 800, 56, 1762, 1298, 84, 84, 84, 1759, 84,
	1752, 926, 1714, 1652, 802, 1292, 1610, 1606, 1598, 422,
	1597, 572, 539, 58, 59, 1183, 798, 802, 1596, 535,
	384, 54, 1591, 1313, 1590, 1589, 1542, 55, 819, 84,
	1496, 385, 1491, 1535, 1490, 534, 84, 1489, 84, 1308,
	59, 1436, 1419, 1400, 1382, 819, 53, 1212, 1344, 351,
	351, 1341, 1329, 1320, 623, 1291, 1288, 673, 84, 416,
	84, 84, 84, 84, 635, 84, 1286, 1274, 1273, 84,
	1209, 574, 53, 1070, 84, 1296, 1297, 1299, 575, 1142,
	84, 1096, 570, 1755, 1293, 1095, 414, 850, 352, 352,
	806, 807, 809, 436, 435, 1309, 674, 1298, 84, 801,
	338, 84, 812, 804, 805, 806, 807, 809, 770, 432,
	433, 1447, 438, 322, 801, 1706, 1686, 1685, 1678, 300,
	804, 805, 806, 807, 809, 353, 353, 1659, 1648, 409,
	56, 801, 1640, 675, 579, 561, 530, 841, 1618, 564,
	1603, 1575, 769, 537, 1551, 299, 1425, 1418, 1397, 1396,
	529, 58, 847, 1534, 322, 563, 563, 308, 1395, 1071,
	1393, 1380, 1304, 1305, 1306, 1356, 1303, 1300, 1301, 1302,
	1294, 1295, 1296, 1297, 1299, 632, 1355, 1319, 59, 633,
	1292, 1293, 1282, 1281, 1260, 54, 660, 1256, 322, 667,
	543, 55, 1541, 756, 1067, 544, 760, 761, 762, 84,
	763, 759, 1197, 1156, 765, 673, 1155, 1135, 768, 1094,
	925, 1013, 879, 84, 1156, 1292, 779, 84, 781, 780,
	84, 84, 793, 882, 886, 957, 84, 872, 84, 84,
	871, 84, 870, 869, 84, 891, 84, 84, 300, 351,
	868, 300, 300, 801, 674, 867, 800, 484, 589, 866,
	865, 864, 863, 889, 1540, 900, 801, 845, 862, 1293,
	861, 1307, 939, 346, 787, 803, 958, 788, 789, 666,
	801, 860, 1298, 1294, 1295, 1296, 1297, 1299, 352, 859,
	858, 675, 1191, 924, 1293, 924, 802, 857, 84, 84,
	848, 911, 913, 846, 887, 876, 877, 53, 73, 959,
	956, 771, 945, 326, 440, 967, 382, 1298, 372, 370,
	1190, 536, 532, 390, 1665, 353, 1539, 1308, 1184, 1004,
	78, 1570, 916, 50, 947, 77, 79, 50, 800, 946,
	948, 673, 880, 1343, 1342, 884, 957, 883, 808, 885,
	1242, 405, 903, 919, 391, 1559, 855, 803, 259, 349,
	942, 922, 1308, 941, 937, 928, 961, 940, 888, 80,
	1448, 985, 938, 75, 74, 76, 1277, 1090, 802, 851,
	674, 875, 1179, 1309, 1728, 64, 322, 958, 1775, 333,
	1774, 1693, 1204, 818, 907, 933, 552, 552, 553, 553,
	333, 1525, 966, 333, 974, 1111, 1513, 306, 971, 968,
	969, 285, 877, 876, 973, 786, 286, 675, 1309, 1634,
	959, 956, 291, 1633, 290, 955, 412, 1368, 65, 84,
	808, 880, 1348, 883, 1347, 1244, 1514, 1196, 81, 1195,
	1194, 84, 84, 552, 305, 553, 1193, 954, 1054, 819,
	1379, 388, 910, 964, 1303, 1300, 1301, 1302, 1294, 1295,
	1296, 1297, 1299, 918, 917, 554, 554, 1739, 413, 1293,
	84, 1139, 1138, 84, 1027, 1016, 531, 961, 408, 49,
	1692, 899, 368, 297, 294, 1710, 307, 1367, 389, 1303,
	1300, 1301, 1302, 1294, 1295, 1296, 1297, 1299, 1064, 1026,
	899, 1783, 673, 1064, 1293, 29, 898, 1730, 1358, 565,
	68, 961, 554, 30, 1176, 1623, 1509, 611, 1510, 1292,
	813, 810, 811, 812, 804, 805, 806, 807, 809, 1741,
	909, 610, 1068, 1749, 989, 801, 955, 1074, 1078, 62,
	1081, 674, 1512, 1172, 988, 1742, 990, 571, 1090, 1515,
	1172, 1077, 67, 66, 1170, 1774, 1120, 1370, 69, 1387,
	1181, 304, 1132, 1133, 1134, 1141, 889, 84, 84, 84,
	558, 889, 1167, 84, 557, 1017, 84, 1687, 675, 1101,
	1205, 1203, 84, 84, 84, 84, 84, 63, 84, 84,
	464, 386, 908, 1007, 1008, 1789, 84, 387, 84, 873,
	322, 1674, 1750, 838, 1511, 84, 804, 805, 806, 807,
	809, 1298, 1069, 1086, 84, 1151, 961, 801, 550, 379,
	381, 1052, 82, 240, 241, 1280, 56, 258, 588, 322,
	270, 1145, 555, 555, 1359, 84, 84, 308, 258, 295,
	1751, 84, 1411, 1782, 387, 314, 314, 58, 307, 324,
	1104, 351, 324, 330, 324, 1174, 1308, 298, 324, 339,
	324, 270, 1166, 406, 1365, 1253, 70, 1146, 1748, 84,
	1773, 84, 84, 84, 59, 1186, 84, 1187, 1251, 555,
	1624, 54, 1771, 896, 1557, 84, 1002, 55, 589, 589,
	352, 1105, 84, 613, 84, 61, 1246, 399, 1214, 1182,
	572, 1063, 377, 1185, 1292, 427, 53, 428, 1787, 1053,
	375, 1662, 1309, 1601, 976, 1797, 407, 1384, 1628, 1188,
	978, 1781, 1024, 1025, 1106, 1103, 1147, 353, 1199, 428,
	1200, 1050, 1627, 1616, 1201, 308, 979, 1477, 1202, 1350,
	1206, 1211, 1249, 1213, 945, 977, 1254, 1207, 1788, 1524,
	1385, 1521, 1225, 1150, 1003, 1178, 1523, 778, 772, 1259,
	1383, 1723, 1573, 1261, 1178, 1790, 947, 1267, 427, 50,
	1617, 946, 948, 322, 1220, 1271, 1272, 1567, 1240, 308,
	1219, 1107, 764, 638, 1300, 1301, 1302, 1294, 1295, 1296,
	1297, 1299, 589, 1158, 1602, 1157, 1298, 1796, 1293, 1229,
	1406, 1405, 386, 305, 1051, 1247, 1245, 961, 1318, 336,
	335, 1241, 1478, 1574, 1232, 642, 419, 1402, 1479, 1331,
	1223, 1093, 1250, 1677, 1227, 481, 1153, 84, 308, 1252,
	1230, 1520, 1215, 373, 1600, 1323, 1522, 1276, 589, 1424,
	1102, 1308, 1287, 1354, 1228, 1225, 640, 612, 378, 1255,
	1112, 270, 270, 322, 84, 970, 404, 641, 1566, 402,
	1375, 401, 665, 664, 400, 658, 653, 397, 334, 1324,
	856, 758, 1189, 1326, 1327, 1328, 1092, 1503, 1363, 84,
	1361, 84, 258, 84, 324, 1349, 270, 84, 420, 1231,
	1352, 1345, 1229, 1216, 1005, 84, 1001, 1309, 84, 1362,
	1369, 1364, 943, 314, 84, 673, 576, 1232, 84, 1374,
	84, 573, 568, 559, 324, 1366, 556, 1227, 1442, 1386,
	1388, 1389, 1377, 1230, 777, 324, 324, 324, 1376, 566,
	1635, 430, 318, 1775, 1166, 1415, 668, 1228, 662, 1392,
	1399, 393, 1565, 1011, 674, 3, 1637, 611, 611, 1408,
	1414, 84, 1431, 1412, 1413, 1394, 1438, 1439, 1440, 324,
	915, 610, 610, 1427, 899, 1371, 630, 1645, 630, 1689,
	914, 1435, 1294, 1295, 1296, 1297, 1299, 1716, 899, 284,
	1403, 675, 1231, 1293, 912, 434, 1708, 617, 270, 927,
	630, 270, 270, 270, 794, 270, 431, 319, 1012, 270,
	634, 669, 1449, 581, 258, 244, 327, 1454, 952, 1794,
	775, 1482, 1404, 933, 394, 1407, 1795, 1497, 84, 84,
	84, 1390, 1492, 1381, 287, 288, 84, 84, 314, 1338,
	1229, 796, 84, 1192, 84, 1484, 84, 84, 84, 84,
	1485, 255, 1518, 1519, 84, 1232, 982, 981, 1140, 1112,
	1112, 611, 1137, 1136, 322, 1409, 1087, 322, 588, 588,
	1498, 1230, 1502, 983, 1761, 610, 84, 84, 1587, 1441,
	1217, 984, 849, 293, 1622, 246, 84, 84, 248, 757,
	84, 398, 1549, 1548, 1593, 1740, 1549, 1548, 1279, 84,
	84, 1556, 1550, 1673, 1655, 1561, 1550, 611, 1532, 253,
	1112, 1112, 1112, 1536, 249, 1576, 1091, 1538, 854, 28,
	1546, 610, 1555, 457, 1504, 1351, 996, 995, 84, 676,
	1231, 1577, 663, 613, 613, 652, 480, 250, 403, 324,
	646, 655, 1581, 1100, 533, 482, 659, 654, 586, 483,
	587, 881, 252, 904, 589, 470, 584, 324, 347, 1569,
	324, 920, 931, 1088, 1275, 852, 324, 456, 935, 936,
	462, 324, 588, 461, 324, 1075, 270, 270, 1599, 369,
	453, 1571, 589, 589, 84, 1233, 84, 40, 84, 84,
	589, 589, 383, 264, 265, 1175, 84, 1533, 1006, 782,
	1360, 296, 1289, 1562, 1563, 1528, 585, 1568, 1611, 371,
	1118, 1110, 1108, 1537, 1614, 84, 1451, 1452, 588, 624,
	1099, 1292, 415, 589, 1456, 1457, 1612, 545, 630, 796,
	932, 1636, 395, 1018, 951, 251, 439, 613, 84, 1552,
	84, 790, 1112, 1112, 1646, 322, 322, 1754, 84, 322,
	1549, 1548, 1060, 1644, 317, 1649, 84, 1488, 1638, 316,
	1550, 992, 392, 639, 975, 1058, 289, 1684, 1658, 1688,
	1357, 1727, 1666, 1631, 1632, 57, 254, 22, 20, 19,
	18, 16, 15, 613, 1672, 14, 21, 612, 612, 12,
	11, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	10, 1112, 9, 1298, 84, 84, 27, 26, 84, 1682,
	1679, 25, 2, 589, 1, 1696, 84, 1056, 0, 1055,
	0, 0, 84, 1061, 0, 1698, 0, 1705, 1700, 0,
	84, 1549, 1548, 1697, 0, 81, 673, 0, 0, 0,
	1702, 1550, 1699, 0, 1704, 1620, 1709, 1711, 1308, 987,
	0, 0, 308, 0, 0, 1661, 84, 84, 84, 1715,
	84, 324, 904, 0, 0, 245, 1712, 0, 889, 0,
	0, 0, 1731, 1725, 0, 674, 49, 1734, 84, 0,
	0, 612, 0, 0, 0, 1718, 1729, 1654, 1733, 1732,
	324, 1737, 1736, 270, 0, 1549, 1548, 322, 0, 1057,
	1735, 84, 29, 611, 1309, 1550, 1059, 248, 1743, 0,
	30, 1757, 675, 589, 1758, 0, 0, 610, 0, 0,
	0, 0, 1769, 0, 1772, 1770, 84, 612, 253, 0,
	1776, 611, 611, 249, 1779, 1778, 0, 1780, 0, 611,
	611, 0, 1777, 0, 0, 610, 610, 1630, 0, 1792,
	1791, 0, 0, 610, 610, 0, 250, 800, 0, 0,
	0, 0, 0, 0, 0, 0, 1798, 0, 1257, 1258,
	0, 252, 611, 0, 0, 0, 803, 0, 1302, 1294,
	1295, 1296, 1297, 1299, 0, 0, 610, 324, 1148, 1149,
	1293, 589, 0, 904, 0, 0, 1154, 802, 0, 0,
	0, 1112, 1159, 1160, 1162, 1164, 1165, 0, 1168, 1169,
	0, 0, 0, 0, 588, 0, 324, 1726, 1180, 1315,
	1316, 1317, 0, 56, 0, 324, 443, 443, 0, 0,
	0, 0, 0, 0, 324, 0, 547, 0, 0, 0,
	0, 0, 588, 588, 58, 0, 0, 0, 0, 808,
	588, 588, 0, 0, 251, 987, 630, 0, 0, 0,
	933, 987, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 59, 611, 0, 0, 0, 0, 0, 54, 613,
	0, 0, 0, 588, 55, 0, 610, 1112, 0, 775,
	0, 775, 270, 324, 818, 254, 1218, 0, 0, 0,
	0, 0, 0, 72, 0, 1221, 0, 613, 613, 0,
	0, 0, 1238, 0, 324, 613, 613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 585, 0, 1292,
	0, 1310, 1311, 1312, 0, 0, 0, 783, 785, 1513,
	0, 1507, 0, 0, 792, 0, 0, 0, 613, 1505,
	819, 1422, 1423, 0, 0, 0, 833, 834, 835, 836,
	837, 0, 0, 0, 1112, 840, 0, 0, 0, 1514,
	0, 0, 611, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 588, 0, 853, 610, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 0,
	1480, 1298, 810, 811, 812, 804, 805, 806, 807, 809,
	585, 0, 0, 612, 0, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 796, 613, 1509,
	611, 1510, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 612, 612, 0, 610, 0, 1308, 0, 0, 612,
	612, 0, 0, 0, 324, 1512, 585, 0, 0, 0,
	0, 0, 1515, 588, 0, 1292, 0, 1310, 1311, 1312,
	0, 0, 0, 0, 0, 0, 0, 1578, 0, 1391,
	0, 904, 612, 775, 0, 458, 38, 1398, 0, 0,
	0, 0, 0, 0, 0, 324, 0, 0, 324, 0,
	0, 0, 1309, 0, 1238, 611, 0, 0, 1417, 0,
	1238, 1307, 0, 0, 0, 0, 38, 1511, 0, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 309,
	271, 588, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 1446, 0, 0, 282, 0, 0, 1298, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	1305, 1306, 0, 1303, 1300, 1301, 1302, 1294, 1295, 1296,
	1297, 1299, 612, 0, 0, 0, 1313, 0, 1293, 273,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	1619, 0, 1308, 0, 0, 0, 613, 0, 272, 274,
	0, 0, 0, 0, 0, 0, 588, 0, 1500, 1501,
	904, 0, 0, 0, 0, 0, 796, 796, 0, 0,
	0, 0, 1526, 0, 1527, 0, 324, 1529, 1530, 1531,
	0, 0, 0, 0, 324, 0, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 1309, 0,
	0, 0, 0, 0, 1545, 0, 1554, 904, 1545, 0,
	0, 278, 0, 0, 0, 0, 324, 324, 0, 0,
	324, 613, 612, 0, 0, 0, 1676, 0, 443, 796,
	1238, 0, 0, 0, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 0, 0, 1594, 0,
	0, 800, 0, 0, 0, 1304, 1305, 1306, 0, 1303,
	1300, 1301, 1302, 1294, 1295, 1296, 1297, 1299, 0, 0,
	803, 0, 0, 0, 1293, 0, 0, 0, 0, 1097,
	1098, 0, 1109, 0, 1119, 1121, 1126, 1129, 1130, 1131,
	612, 802, 585, 1717, 0, 279, 0, 817, 280, 0,
	0, 0, 0, 281, 904, 0, 1613, 0, 270, 1615,
	0, 0, 0, 547, 0, 0, 324, 0, 0, 0,
	585, 585, 0, 0, 0, 0, 301, 0, 585, 585,
	0, 0, 0, 0, 0, 796, 0, 0, 0, 0,
	0, 0, 1173, 808, 0, 800, 0, 820, 821, 822,
	0, 0, 1545, 0, 0, 0, 0, 823, 324, 0,
	1657, 585, 0, 0, 803, 612, 829, 0, 324, 0,
	0, 0, 0, 0, 0, 0, 796, 0, 0, 0,
	0, 0, 0, 1198, 0, 802, 0, 0, 818, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 1690, 1691, 0, 808, 1695, 0,
	0, 0, 0, 1545, 819, 301, 270, 0, 301, 301,
	0, 0, 1554, 0, 830, 0, 0, 0, 0, 800,
	796, 585, 0, 0, 0, 0, 828, 0, 0, 0,
	1243, 839, 0, 0, 1248, 843, 825, 0, 803, 0,
	829, 0, 818, 0, 0, 0, 1724, 796, 324, 0,
	270, 0, 0, 1262, 0, 0, 0, 0, 0, 802,
	0, 0, 1270, 0, 824, 817, 0, 1545, 1657, 0,
	1278, 0, 0, 0, 1283, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 0, 0, 0, 0, 0, 0,
	801, 324, 0, 0, 0, 0, 840, 0, 819, 0,
	0, 0, 1126, 1126, 1126, 0, 0, 0, 0, 827,
	0, 808, 0, 0, 0, 0, 796, 0, 0, 0,
	0, 585, 0, 0, 1346, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 1353, 0, 0, 38, 0,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 443, 38, 0, 0, 818, 38, 0, 0,
	0, 443, 826, 0, 547, 814, 815, 816, 0, 813,
	810, 811, 812, 804, 805, 806, 807, 809, 0, 0,
	0, 1143, 0, 0, 801, 800, 0, 820, 821, 822,
	0, 1144, 0, 0, 0, 0, 0, 823, 0, 585,
	0, 0, 0, 0, 803, 0, 829, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 827, 1421, 802, 800, 0, 820, 821,
	822, 817, 0, 0, 0, 1426, 0, 0, 823, 0,
	0, 0, 0, 0, 0, 803, 0, 829, 1198, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 1453, 0, 0,
	1455, 0, 817, 0, 585, 0, 826, 808, 0, 0,
	0, 0, 0, 813, 810, 811, 812, 804, 805, 806,
	807, 809, 0, 0, 830, 0, 0, 0, 801, 0,
	0, 0, 0, 1486, 1487, 0, 828, 0, 0, 0,
	0, 0, 1493, 1494, 1495, 0, 825, 0, 808, 0,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 828, 0, 0,
	443, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1021, 0, 0, 819, 0,
	0, 0, 1560, 0, 0, 824, 0, 0, 0, 827,
	0, 0, 0, 800, 0, 820, 821, 822, 0, 0,
	0, 0, 0, 0, 1580, 823, 1066, 0, 1583, 1584,
	0, 0, 803, 1586, 829, 0, 0, 1588, 0, 819,
	0, 0, 0, 0, 1592, 0, 0, 0, 1595, 0,
	827, 0, 0, 802, 1292, 0, 1310, 1311, 1312, 817,
	0, 0, 826, 0, 0, 814, 815, 816, 0, 813,
	810, 811, 812, 804, 805, 806, 807, 809, 0, 0,
	0, 1604, 0, 0, 801, 0, 0, 1607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 826, 0, 808, 814, 815, 816, 0,
	813, 810, 811, 812, 804, 805, 806, 807, 809, 0,
	0, 309, 830, 1629, 0, 801, 0, 0, 1334, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 1292,
	0, 1310, 1311, 1312, 825, 0, 1298, 1647, 0, 0,
	818, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 1660, 0, 0, 0,
	0, 0, 824, 0, 0, 1313, 0, 0, 1668, 1669,
	0, 0, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 1681, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 827, 1683, 1239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	547, 0, 0, 0, 0, 0, 0, 1309, 0, 1066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 839, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 814, 815, 816, 1308, 813, 810, 811,
	812, 804, 805, 806, 807, 809, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 839, 0, 1304, 1305, 1306, 0, 1303, 1300,
	1301, 1302, 1294, 1295, 1296, 1297, 1299, 0, 1756, 0,
	0, 0, 1309, 1293, 0, 0, 0, 0, 0, 0,
	0, 1768, 1768, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1768, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1768, 0, 0, 0, 0, 1304,
	1305, 1306, 0, 1303, 1300, 1301, 1302, 1294, 1295, 1296,
	1297, 1299, 0, 0, 0, 0, 0, 0, 1293, 0,
	1021, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 0, 0,
	0, 113, 114, 210, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 211, 0, 212, 0, 118, 119, 213,
	214, 0, 0, 120, 0, 0, 121, 215, 216, 217,
	0, 218, 0, 0, 122, 0, 123, 124, 38, 0,
	219, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 0,
	323, 1021, 1021, 141, 222, 1021, 142, 0, 223, 143,
	144, 0, 224, 145, 225, 146, 0, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 227, 159, 0, 160, 161, 162, 56,
	228, 163, 164, 0, 165, 166, 0, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	58, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 354, 239, 0,
	187, 0, 0, 0, 54, 188, 189, 190, 191, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 677, 88,
	678, 679, 680, 681, 192, 682, 683, 684, 685, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 686, 92,
	199, 200, 93, 687, 688, 201, 202, 203, 689, 204,
	690, 355, 691, 94, 95, 96, 839, 97, 692, 98,
	693, 356, 99, 100, 694, 695, 696, 697, 698, 699,
	101, 102, 103, 104, 205, 105, 206, 207, 700, 106,
	701, 107, 702, 703, 704, 108, 109, 705, 110, 706,
	0, 707, 208, 111, 112, 209, 708, 709, 710, 113,
	114, 210, 0, 115, 711, 116, 712, 713, 357, 714,
	117, 211, 715, 212, 716, 118, 119, 213, 214, 717,
	718, 120, 719, 358, 121, 215, 216, 217, 720, 218,
	721, 359, 122, 360, 123, 124, 722, 723, 219, 361,
	125, 362, 724, 126, 725, 726, 127, 0, 128, 129,
	130, 131, 132, 363, 133, 134, 137, 135, 727, 136,
	728, 220, 138, 221, 139, 140, 729, 730, 731, 732,
	733, 141, 222, 364, 142, 365, 223, 143, 144, 734,
	224, 145, 225, 146, 735, 147, 148, 149, 226, 150,
	151, 736, 153, 154, 152, 155, 737, 156, 366, 157,
	158, 227, 159, 0, 160, 161, 162, 738, 228, 163,
	164, 739, 165, 166, 367, 167, 229, 230, 168, 740,
	169, 170, 172, 231, 171, 232, 741, 173, 742, 174,
	175, 743, 233, 234, 235, 744, 745, 176, 236, 237,
	746, 177, 178, 179, 180, 747, 748, 181, 182, 183,
	749, 750, 184, 185, 186, 238, 239, 751, 187, 752,
	753, 754, 755, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1416, 86, 87, 677, 88, 678,
	679, 680, 681, 192, 682, 683, 684, 685, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 686, 92, 199,
	200, 93, 687, 688, 201, 202, 203, 689, 204, 690,
	355, 691, 94, 95, 96, 0, 97, 692, 98, 693,
	356, 99, 100, 694, 695, 696, 697, 698, 699, 101,
	102, 103, 104, 205, 105, 206, 207, 700, 106, 701,
	107, 702, 703, 704, 108, 109, 705, 110, 706, 0,
	707, 208, 111, 112, 209, 708, 709, 710, 113, 114,
	210, 0, 115, 711, 116, 712, 713, 357, 714, 117,
	211, 715, 212, 716, 118, 119, 213, 214, 717, 718,
	120, 719, 358, 121, 215, 216, 217, 720, 218, 721,
	359, 122, 360, 123, 124, 722, 723, 219, 361, 125,
	362, 724, 126, 725, 726, 127, 0, 128, 129, 130,
	131, 132, 363, 133, 134, 137, 135, 727, 136, 728,
	220, 138, 221, 139, 140, 729, 730, 731, 732, 733,
	141, 222, 364, 142, 365, 223, 143, 144, 734, 224,
	145, 225, 146, 735, 147, 148, 149, 226, 150, 151,
	736, 153, 154, 152, 155, 737, 156, 366, 157, 158,
	227, 159, 0, 160, 161, 162, 738, 228, 163, 164,
	739, 165, 166, 367, 167, 229, 230, 168, 740, 169,
	170, 172, 231, 171, 232, 741, 173, 742, 174, 175,
	743, 233, 234, 235, 744, 745, 176, 236, 237, 746,
	177, 178, 179, 180, 747, 748, 181, 182, 183, 749,
	750, 184, 185, 186, 238, 239, 751, 187, 752, 753,
	754, 755, 188, 189, 190, 191, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 892,
	86, 87, 677, 88, 678, 679, 680, 681, 192, 682,
	683, 684, 685, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 686, 92, 199, 200, 93, 687, 688, 201,
	202, 203, 689, 204, 690, 355, 691, 94, 95, 96,
	0, 97, 692, 98, 693, 356, 99, 100, 694, 695,
	696, 697, 698, 699, 101, 102, 103, 104, 205, 105,
	206, 207, 700, 106, 701, 107, 702, 703, 704, 108,
	109, 705, 110, 706, 0, 707, 208, 111, 112, 209,
	708, 709, 710, 113, 114, 210, 0, 115, 711, 116,
	712, 713, 357, 714, 117, 211, 715, 212, 716, 118,
	119, 213, 214, 717, 718, 120, 719, 358, 121, 215,
	216, 217, 720, 218, 721, 359, 122, 360, 123, 124,
	722, 723, 219, 361, 125, 362, 724, 126, 725, 726,
	127, 0, 128, 129, 130, 131, 132, 363, 133, 134,
	137, 135, 727, 136, 728, 220, 138, 221, 139, 140,
	729, 730, 731, 732, 733, 141, 222, 364, 142, 365,
	223, 143, 144, 734, 224, 145, 225, 146, 735, 147,
	148, 149, 226, 150, 151, 736, 153, 154, 152, 155,
	737, 156, 366, 157, 158, 227, 159, 0, 160, 161,
	162, 738, 228, 163, 164, 739, 165, 166, 367, 167,
	229, 230, 168, 740, 169, 170, 172, 231, 171, 232,
	741, 173, 742, 174, 175, 743, 233, 234, 235, 744,
	745, 176, 236, 237, 746, 177, 178, 179, 180, 747,
	748, 181, 182, 183, 749, 750, 184, 185, 186, 238,
	239, 751, 187, 752, 753, 754, 755, 188, 189, 190,
	191, 478, 467, 468, 465, 466, 454, 0, 0, 0,
	0, 0, 0, 86, 87, 1083, 88, 0, 0, 0,
	0, 494, 460, 0, 0, 0, 89, 90, 193, 508,
	195, 509, 91, 510, 511, 0, 92, 199, 200, 93,
	475, 493, 512, 513, 203, 0, 504, 0, 486, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 356, 99,
	100, 0, 487, 489, 0, 488, 490, 101, 102, 103,
	104, 514, 105, 515, 516, 0, 106, 0, 107, 0,
	1084, 0, 507, 109, 0, 110, 0, 0, 0, 459,
	111, 112, 495, 473, 0, 0, 113, 114, 517, 0,
	115, 0, 116, 0, 0, 357, 0, 117, 505, 0,
	212, 0, 118, 119, 501, 503, 0, 0, 120, 0,
	358, 121, 518, 519, 520, 0, 485, 0, 359, 122,
	360, 123, 124, 0, 0, 506, 361, 125, 362, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	363, 133, 134, 137, 135, 449, 136, 474, 502, 138,
	521, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	364, 142, 365, 496, 143, 144, 0, 497, 145, 225,
	146, 0, 147, 148, 149, 522, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 366, 157, 158, 463, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 491, 165,
	166, 367, 167, 523, 230, 168, 0, 169, 170, 172,
	524, 171, 498, 0, 173, 0, 174, 175, 0, 233,
	525, 526, 0, 0, 176, 499, 500, 472, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 492, 0, 184,
	185, 186, 238, 527, 1082, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 450, 0, 0, 478, 467, 468,
	465, 466, 454, 0, 0, 446, 447, 1085, 0, 86,
	87, 448, 88, 0, 455, 1080, 0, 494, 460, 0,
	0, 0, 89, 90, 193, 508, 195, 509, 91, 510,
	511, 0, 92, 199, 200, 93, 475, 493, 512, 513,
	203, 0, 504, 0, 486, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 356, 99, 100, 0, 487, 489,
	0, 488, 490, 101, 102, 103, 104, 514, 105, 515,
	516, 548, 106, 0, 107, 0, 0, 0, 507, 109,
	0, 110, 0, 0, 0, 459, 111, 112, 495, 473,
	0, 0, 113, 114, 517, 0, 115, 0, 116, 0,
	0, 357, 0, 117, 505, 0, 212, 0, 118, 119,
	501, 503, 0, 0, 120, 0, 358, 121, 518, 519,
	520, 0, 485, 0, 359, 122, 360, 123, 124, 0,
	0, 506, 361, 125, 362, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 363, 133, 134, 137,
	135, 449, 136, 474, 502, 138, 521, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 364, 142, 365, 496,
	143, 144, 0, 497, 145, 225, 146, 0, 147, 148,
	149, 522, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 366, 157, 158, 463, 159, 0, 160, 161, 162,
	56, 228, 163, 164, 491, 165, 166, 367, 167, 523,
	230, 168, 0, 169, 170, 172, 524, 171, 498, 0,
	173, 58, 174, 175, 0, 233, 525, 526, 0, 0,
	176, 499, 500, 472, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 492, 0, 184, 185, 186, 354, 527,
	0, 187, 0, 0, 0, 54, 188, 189, 190, 191,
	450, 55, 0, 478, 467, 468, 465, 466, 454, 0,
	0, 446, 447, 0, 0, 86, 87, 448, 88, 0,
	455, 0, 0, 494, 460, 0, 0, 0, 89, 90,
	193, 508, 195, 509, 91, 510, 511, 0, 92, 199,
	200, 93, 475, 493, 512, 513, 203, 0, 504, 0,
	486, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	356, 99, 100, 0, 487, 489, 0, 488, 490, 101,
	102, 103, 104, 514, 105, 515, 516, 0, 106, 0,
	107, 0, 0, 0, 507, 109, 0, 110, 0, 0,
	0, 459, 111, 112, 495, 473, 0, 0, 113, 114,
	517, 0, 115, 0, 116, 0, 0, 357, 0, 117,
	505, 0, 212, 0, 118, 119, 501, 503, 0, 0,
	120, 0, 358, 121, 518, 519, 520, 0, 485, 0,
	359, 122, 360, 123, 124, 0, 0, 506, 361, 125,
	362, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 363, 133, 134, 137, 135, 449, 136, 474,
	502, 138, 521, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 364, 142, 365, 496, 143, 144, 0, 497,
	145, 225, 146, 0, 147, 148, 149, 522, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 366, 157, 158,
	463, 159, 0, 160, 161, 162, 56, 228, 163, 164,
	491, 165, 166, 367, 167, 523, 230, 168, 0, 169,
	170, 172, 524, 171, 498, 0, 173, 58, 174, 175,
	0, 233, 525, 526, 0, 0, 176, 499, 500, 472,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 492,
	0, 184, 185, 186, 354, 527, 0, 187, 0, 0,
	0, 54, 188, 189, 190, 191, 450, 55, 0, 478,
	467, 468, 465, 466, 454, 0, 0, 446, 447, 0,
	0, 86, 87, 448, 88, 0, 455, 0, 0, 494,
	460, 0, 0, 0, 89, 90, 193, 508, 195, 509,
	91, 510, 511, 1122, 92, 199, 200, 93, 475, 493,
	512, 513, 203, 0, 504, 0, 486, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 356, 99, 100, 0,
	487, 489, 0, 488, 490, 101, 102, 103, 104, 514,
	105, 515, 516, 0, 106, 0, 107, 0, 0, 0,
	507, 109, 0, 110, 0, 0, 0, 459, 111, 112,
	495, 473, 0, 0, 113, 114, 517, 0, 115, 0,
	116, 0, 1127, 357, 0, 117, 505, 0, 212, 0,
	118, 119, 501, 503, 0, 0, 120, 0, 358, 121,
	518, 519, 520, 0, 485, 0, 359, 122, 360, 123,
	124, 0, 1123, 506, 361, 125, 362, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 363, 133,
	134, 137, 135, 449, 136, 474, 502, 138, 521, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 364, 142,
	365, 496, 143, 144, 0, 497, 145, 225, 146, 0,
	147, 148, 149, 522, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 366, 157, 158, 463, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 491, 165, 166, 367,
	167, 523, 230, 168, 0, 169, 170, 172, 524, 171,
	498, 0, 173, 0, 174, 175, 0, 233, 525, 526,
	0, 1124, 176, 499, 500, 472, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 492, 0, 184, 185, 186,
	238, 527, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 450, 478, 467, 468, 465, 466, 454, 0,
	0, 0, 0, 446, 447, 86, 87, 0, 88, 448,
	0, 0, 455, 494, 460, 0, 0, 0, 89, 90,
	193, 508, 195, 509, 91, 510, 511, 0, 92, 199,
	200, 93, 475, 493, 512, 513, 203, 0, 504, 0,
	486, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	356, 99, 100, 0, 487, 489, 0, 488, 490, 101,
	102, 103, 104, 514, 105, 515, 516, 0, 106, 0,
	107, 0, 0, 0, 507, 109, 0, 110, 0, 0,
	0, 459, 111, 112, 495, 473, 0, 0, 113, 114,
	517, 0, 115, 0, 116, 0, 0, 357, 0, 117,
	505, 0, 212, 0, 118, 119, 501, 503, 0, 0,
	120, 0, 358, 121, 518, 519, 520, 0, 485, 0,
	359, 122, 360, 123, 124, 0, 0, 506, 361, 125,
	362, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 363, 133, 134, 137, 135, 449, 136, 474,
	502, 138, 521, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 364, 142, 365, 496, 143, 144, 0, 497,
	145, 225, 146, 0, 147, 148, 149, 522, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 366, 157, 158,
	463, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	491, 165, 166, 367, 167, 523, 230, 168, 0, 169,
	170, 172, 524, 171, 498, 0, 173, 0, 174, 175,
	0, 233, 525, 526, 0, 0, 176, 499, 500, 472,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 492,
	0, 184, 185, 186, 238, 527, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 450, 0, 0, 478,
	467, 468, 465, 466, 454, 0, 0, 446, 447, 0,
	0, 86, 87, 448, 88, 0, 455, 1483, 0, 494,
	460, 0, 0, 0, 89, 90, 193, 508, 195, 509,
	91, 510, 511, 0, 92, 199, 200, 93, 475, 493,
	512, 513, 203, 0, 504, 0, 486, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 356, 99, 100, 0,
	487, 489, 0, 488, 490, 101, 102, 103, 104, 514,
	105, 515, 516, 0, 106, 0, 107, 0, 0, 0,
	507, 109, 0, 110, 0, 0, 0, 459, 111, 112,
	495, 473, 0, 0, 113, 114, 517, 0, 115, 0,
	116, 0, 0, 357, 0, 117, 505, 0, 212, 0,
	118, 119, 501, 503, 0, 0, 120, 0, 358, 121,
	518, 519, 520, 0, 485, 0, 359, 122, 360, 123,
	124, 0, 0, 506, 361, 125, 362, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 363, 133,
	134, 137, 135, 449, 136, 474, 502, 138, 521, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 364, 142,
	365, 496, 143, 144, 0, 497, 145, 225, 146, 0,
	147, 148, 149, 522, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 366, 157, 158, 463, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 491, 165, 166, 367,
	167, 523, 230, 168, 0, 169, 170, 172, 524, 171,
	498, 0, 173, 0, 174, 175, 0, 233, 525, 526,
	0, 0, 176, 499, 500, 472, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 492, 0, 184, 185, 186,
	238, 527, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 450, 0, 0, 478, 467, 468, 465, 466,
	454, 0, 0, 446, 447, 0, 0, 86, 87, 448,
	88, 0, 455, 1432, 0, 494, 460, 0, 0, 0,
	89, 90, 193, 508, 195, 509, 91, 510, 511, 0,
	92, 199, 200, 93, 475, 493, 512, 513, 203, 0,
	504, 0, 486, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 356, 99, 100, 0, 487, 489, 0, 488,
	490, 101, 102, 103, 104, 514, 105, 515, 516, 0,
	106, 0, 107, 0, 0, 0, 507, 109, 0, 110,
	0, 0, 0, 459, 111, 112, 495, 473, 0, 0,
	113, 114, 517, 0, 115, 0, 116, 0, 0, 357,
	0, 117, 505, 0, 212, 0, 118, 119, 501, 503,
	0, 0, 120, 0, 358, 121, 518, 519, 520, 0,
	485, 0, 359, 122, 360, 123, 124, 0, 0, 506,
	361, 125, 362, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 363, 133, 134, 137, 135, 449,
	136, 474, 502, 138, 521, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 364, 142, 365, 496, 143, 144,
	0, 497, 145, 225, 146, 0, 147, 148, 149, 522,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 366,
	157, 158, 463, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 491, 165, 166, 367, 167, 523, 230, 168,
	0, 169, 170, 172, 524, 171, 498, 0, 173, 0,
	174, 175, 0, 233, 525, 526, 0, 0, 176, 499,
	500, 472, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 492, 0, 184, 185, 186, 238, 527, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 450, 0,
	0, 478, 467, 468, 465, 466, 454, 0, 0, 446,
	447, 0, 0, 86, 87, 448, 88, 0, 455, 1079,
	0, 494, 460, 0, 0, 0, 89, 90, 193, 508,
	195, 509, 91, 510, 511, 0, 92, 199, 200, 93,
	475, 493, 512, 513, 203, 0, 504, 0, 486, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 356, 99,
	100, 0, 487, 489, 0, 488, 490, 101, 102, 103,
	104, 514, 105, 515, 516, 0, 106, 0, 107, 0,
	0, 0, 507, 109, 0, 110, 0, 0, 0, 459,
	111, 112, 495, 473, 0, 0, 113, 114, 517, 0,
	115, 0, 116, 0, 0, 357, 0, 117, 505, 0,
	212, 0, 118, 119, 501, 503, 0, 0, 120, 0,
	358, 121, 518, 519, 520, 0, 485, 0, 359, 122,
	360, 123, 124, 0, 0, 506, 361, 125, 362, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	363, 133, 134, 137, 135, 449, 136, 474, 502, 138,
	521, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	364, 142, 365, 496, 143, 144, 0, 497, 145, 225,
	146, 0, 147, 148, 149, 522, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 366, 157, 158, 463, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 491, 165,
	166, 367, 167, 523, 230, 168, 0, 169, 170, 172,
	524, 171, 498, 0, 173, 0, 174, 175, 0, 233,
	525, 526, 0, 0, 176, 499, 500, 472, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 492, 0, 184,
	185, 186, 238, 527, 0, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 450, 478, 467, 468, 465, 466,
	454, 0, 0, 0, 0, 446, 447, 86, 87, 0,
	88, 448, 845, 1076, 455, 494, 460, 0, 0, 0,
	89, 90, 193, 508, 195, 509, 91, 510, 511, 0,
	92, 199, 200, 93, 475, 493, 512, 513, 203, 0,
	504, 0, 486, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 356, 99, 100, 0, 487, 489, 0, 488,
	490, 101, 102, 103, 104, 514, 105, 515, 516, 0,
	106, 0, 107, 0, 0, 0, 507, 109, 0, 110,
	0, 0, 0, 459, 111, 112, 495, 473, 0, 0,
	113, 114, 517, 0, 115, 0, 116, 0, 0, 357,
	0, 117, 505, 0, 212, 0, 118, 119, 501, 503,
	0, 0, 120, 0, 358, 121, 518, 519, 520, 0,
	485, 0, 359, 122, 360, 123, 124, 0, 0, 506,
	361, 125, 362, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 363, 133, 134, 137, 135, 449,
	136, 474, 502, 138, 521, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 364, 142, 365, 496, 143, 144,
	0, 497, 145, 225, 146, 0, 147, 148, 149, 522,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 366,
	157, 158, 463, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 491, 165, 166, 367, 167, 523, 230, 168,
	0, 169, 170, 172, 524, 171, 498, 0, 173, 0,
	174, 175, 0, 233, 525, 526, 0, 0, 176, 499,
	500, 472, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 492, 0, 184, 185, 186, 238, 527, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 450, 0,
	0, 478, 467, 468, 465, 466, 454, 0, 0, 446,
	447, 444, 0, 86, 87, 448, 88, 0, 455, 0,
	0, 494, 460, 0, 0, 0, 89, 90, 193, 508,
	195, 509, 91, 510, 511, 0, 92, 199, 200, 93,
	475, 493, 512, 513, 203, 0, 504, 0, 486, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 356, 99,
	100, 0, 487, 489, 0, 488, 490, 101, 102, 103,
	104, 514, 105, 515, 516, 0, 106, 0, 107, 0,
	0, 0, 507, 109, 0, 110, 0, 0, 0, 459,
	111, 112, 495, 473, 0, 0, 113, 114, 517, 0,
	115, 0, 116, 0, 0, 357, 0, 117, 505, 0,
	212, 0, 118, 119, 501, 503, 0, 0, 120, 0,
	358, 121, 518, 519, 520, 0, 485, 0, 359, 122,
	360, 123, 124, 0, 0, 506, 361, 125, 362, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	363, 133, 134, 137, 135, 449, 136, 474, 502, 138,
	521, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	364, 142, 365, 496, 143, 144, 0, 497, 145, 225,
	146, 0, 147, 148, 149, 522, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 366, 157, 158, 463, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 491, 165,
	166, 367, 167, 523, 230, 168, 0, 169, 170, 172,
	524, 171, 498, 0, 173, 0, 174, 175, 0, 233,
	525, 526, 0, 0, 176, 499, 500, 472, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 492, 0, 184,
	185, 186, 238, 527, 1437, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 450, 478, 467, 468, 465, 466,
	454, 0, 0, 0, 0, 446, 447, 86, 87, 0,
	88, 448, 0, 0, 455, 494, 460, 0, 0, 0,
	89, 90, 193, 508, 195, 509, 91, 510, 511, 0,
	92, 199, 200, 93, 475, 493, 512, 513, 203, 0,
	504, 0, 486, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 356, 99, 100, 0, 487, 489, 0, 488,
	490, 101, 102, 103, 104, 514, 105, 515, 516, 548,
	106, 0, 107, 0, 0, 0, 507, 109, 0, 110,
	0, 0, 0, 459, 111, 112, 495, 473, 0, 0,
	113, 114, 517, 0, 115, 0, 116, 0, 0, 357,
	0, 117, 505, 0, 212, 0, 118, 119, 501, 503,
	0, 0, 120, 0, 358, 121, 518, 519, 520, 0,
	485, 0, 359, 122, 360, 123, 124, 0, 0, 506,
	361, 125, 362, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 363, 133, 134, 137, 135, 449,
	136, 474, 502, 138, 521, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 364, 142, 365, 496, 143, 144,
	0, 497, 145, 225, 146, 0, 147, 148, 149, 522,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 366,
	157, 158, 463, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 491, 165, 166, 367, 167, 523, 230, 168,
	0, 169, 170, 172, 524, 171, 498, 0, 173, 0,
	174, 175, 0, 233, 525, 526, 0, 0, 176, 499,
	500, 472, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 492, 0, 184, 185, 186, 238, 527, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 450, 478,
	467, 468, 465, 466, 454, 0, 0, 0, 0, 446,
	447, 86, 87, 0, 88, 448, 0, 0, 455, 494,
	460, 0, 0, 0, 89, 90, 193, 508, 195, 509,
	91, 510, 511, 0, 92, 199, 200, 93, 475, 493,
	512, 513, 203, 0, 504, 0, 486, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 356, 99, 100, 0,
	487, 489, 0, 488, 490, 101, 102, 103, 104, 514,
	105, 515, 516, 0, 106, 0, 107, 0, 0, 0,
	507, 109, 0, 110, 0, 0, 0, 459, 111, 112,
	495, 473, 0, 0, 113, 114, 517, 0, 115, 0,
	116, 0, 1127, 357, 0, 117, 505, 0, 212, 0,
	118, 119, 501, 503, 0, 0, 120, 0, 358, 121,
	518, 519, 520, 0, 485, 0, 359, 122, 360, 123,
	124, 0, 0, 506, 361, 125, 362, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 363, 133,
	134, 137, 135, 449, 136, 474, 502, 138, 521, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 364, 142,
	365, 496, 143, 144, 0, 497, 145, 225, 146, 0,
	147, 148, 149, 522, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 366, 157, 158, 463, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 491, 165, 166, 367,
	167, 523, 230, 168, 0, 169, 170, 172, 524, 171,
	498, 0, 173, 0, 174, 175, 0, 233, 525, 526,
	0, 0, 176, 499, 500, 472, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 492, 0, 184, 185, 186,
	238, 527, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 450, 478, 467, 468, 465, 466, 454, 0,
	0, 0, 0, 446, 447, 86, 87, 784, 88, 448,
	0, 0, 455, 494, 460, 0, 0, 0, 89, 90,
	193, 508, 195, 509, 91, 510, 511, 0, 92, 199,
	200, 93, 475, 493, 512, 513, 203, 0, 504, 0,
	486, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	356, 99, 100, 0, 487, 489, 0, 488, 490, 101,
	102, 103, 104, 514, 105, 515, 516, 0, 106, 0,
	107, 0, 0, 0, 507, 109, 0, 110, 0, 0,
	0, 459, 111, 112, 495, 473, 0, 0, 113, 114,
	517, 0, 115, 0, 116, 0, 0, 357, 0, 117,
	505, 0, 212, 0, 118, 119, 501, 503, 0, 0,
	120, 0, 358, 121, 518, 519, 520, 0, 485, 0,
	359, 122, 360, 123, 124, 0, 0, 506, 361, 125,
	362, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 363, 133, 134, 137, 135, 449, 136, 474,
	502, 138, 521, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 364, 142, 365, 496, 143, 144, 0, 497,
	145, 225, 146, 0, 147, 148, 149, 522, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 366, 157, 158,
	463, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	491, 165, 166, 367, 167, 523, 230, 168, 0, 169,
	170, 172, 524, 171, 498, 0, 173, 0, 174, 175,
	0, 233, 525, 526, 0, 0, 176, 499, 500, 472,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 492,
	0, 184, 185, 186, 238, 527, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 450, 478, 467, 468,
	465, 466, 454, 0, 0, 0, 0, 446, 447, 86,
	87, 0, 88, 448, 0, 0, 455, 494, 460, 0,
	0, 0, 89, 90, 193, 508, 195, 509, 91, 510,
	511, 0, 92, 199, 200, 93, 475, 493, 512, 513,
	203, 0, 504, 0, 486, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 356, 99, 1767, 0, 487, 489,
	0, 488, 490, 101, 102, 103, 104, 514, 105, 515,
	516, 0, 106, 0, 107, 0, 0, 0, 507, 109,
	0, 110, 0, 0, 0, 459, 111, 112, 495, 473,
	0, 0, 113, 114, 517, 0, 115, 0, 116, 0,
	0, 357, 0, 117, 505, 0, 212, 0, 118, 119,
	501, 503, 0, 0, 120, 0, 358, 121, 518, 519,
	520, 0, 485, 0, 359, 122, 360, 123, 124, 0,
	0, 506, 361, 125, 362, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 363, 133, 134, 137,
	135, 449, 136, 474, 502, 138, 521, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 364, 142, 365, 496,
	143, 144, 0, 497, 145, 225, 146, 0, 147, 148,
	149, 522, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 366, 157, 158, 463, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 491, 165, 166, 367, 167, 523,
	230, 168, 0, 169, 170, 172, 524, 171, 498, 0,
	173, 0, 174, 175, 0, 233, 525, 526, 0, 0,
	176, 499, 500, 472, 177, 178, 1766, 180, 0, 0,
	181, 182, 183, 492, 0, 184, 185, 186, 238, 527,
	0, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	450, 478, 467, 468, 465, 466, 454, 0, 0, 0,
	0, 446, 447, 86, 87, 0, 88, 448, 0, 0,
	455, 494, 460, 0, 0, 0, 89, 90, 1765, 508,
	195, 509, 91, 510, 511, 0, 92, 199, 200, 93,
	475, 493, 512, 513, 203, 0, 504, 0, 486, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 356, 99,
	1767, 0, 487, 489, 0, 488, 490, 101, 102, 103,
	104, 514, 105, 515, 516, 0, 106, 0, 107, 0,
	0, 0, 507, 109, 0, 110, 0, 0, 0, 459,
	111, 112, 495, 473, 0, 0, 113, 114, 517, 0,
	115, 0, 116, 0, 0, 357, 0, 117, 505, 0,
	212, 0, 118, 119, 501, 503, 0, 0, 120, 0,
	358, 121, 518, 519, 520, 0, 485, 0, 359, 122,
	360, 123, 124, 0, 0, 506, 361, 125, 362, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	363, 133, 134, 137, 135, 449, 136, 474, 502, 138,
	521, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	364, 142, 365, 496, 143, 144, 0, 497, 145, 225,
	146, 0, 147, 148, 149, 522, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 366, 157, 158, 463, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 491, 165,
	166, 367, 167, 523, 230, 168, 0, 169, 170, 172,
	524, 171, 498, 0, 173, 0, 174, 175, 0, 233,
	525, 526, 0, 0, 176, 499, 500, 472, 177, 178,
	1766, 180, 0, 0, 181, 182, 183, 492, 0, 184,
	185, 186, 238, 527, 0, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 450, 478, 467, 468, 465, 466,
	454, 0, 0, 0, 0, 446, 447, 86, 87, 0,
	88, 448, 0, 0, 455, 494, 460, 0, 0, 0,
	89, 90, 193, 508, 195, 509, 91, 510, 511, 0,
	92, 199, 200, 93, 475, 493, 512, 513, 203, 0,
	504, 0, 486, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 356, 99, 100, 0, 487, 489, 0, 488,
	490, 101, 102, 103, 104, 514, 105, 515, 516, 0,
	106, 0, 107, 0, 0, 0, 507, 109, 0, 110,
	0, 0, 0, 459, 111, 112, 495, 473, 0, 0,
	113, 114, 517, 0, 115, 0, 116, 0, 0, 357,
	0, 117, 505, 0, 212, 0, 118, 119, 501, 503,
	0, 0, 120, 0, 358, 121, 518, 519, 520, 0,
	485, 0, 359, 122, 360, 123, 124, 0, 0, 506,
	361, 125, 362, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 363, 133, 134, 137, 135, 449,
	136, 474, 502, 138, 521, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 364, 142, 365, 496, 143, 144,
	0, 497, 145, 225, 146, 0, 147, 148, 149, 522,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 366,
	157, 158, 463, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 491, 165, 166, 367, 167, 523, 230, 168,
	0, 169, 170, 172, 524, 171, 498, 0, 173, 0,
	174, 175, 0, 233, 525, 526, 0, 0, 176, 499,
	500, 472, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 492, 0, 184, 185, 186, 238, 527, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 450, 478,
	467, 468, 465, 466, 454, 0, 0, 0, 0, 446,
	447, 86, 87, 0, 88, 448, 0, 0, 455, 494,
	460, 0, 0, 0, 89, 90, 193, 508, 195, 509,
	91, 510, 511, 0, 92, 199, 200, 93, 475, 493,
	512, 513, 203, 0, 504, 0, 486, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 356, 99, 100, 0,
	487, 489, 0, 488, 490, 101, 102, 103, 104, 514,
	105, 515, 516, 0, 106, 0, 107, 0, 0, 0,
	507, 109, 0, 110, 0, 0, 0, 459, 111, 112,
	495, 473, 0, 0, 113, 114, 517, 0, 115, 0,
	116, 0, 0, 357, 0, 117, 505, 0, 212, 0,
	118, 119, 501, 503, 0, 0, 120, 0, 358, 121,
	518, 519, 520, 0, 485, 0, 359, 122, 360, 123,
	124, 0, 0, 506, 361, 125, 362, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 363, 133,
	134, 137, 135, 0, 136, 474, 502, 138, 521, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 364, 142,
	365, 496, 143, 144, 0, 497, 145, 225, 146, 0,
	147, 148, 149, 522, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 366, 157, 158, 1117, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 491, 165, 166, 367,
	167, 523, 230, 168, 0, 169, 170, 172, 524, 171,
	498, 0, 173, 0, 174, 175, 0, 233, 525, 526,
	0, 0, 176, 499, 500, 472, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 492, 0, 184, 185, 186,
	238, 527, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 478, 467, 468, 465, 466, 454, 0,
	0, 0, 0, 1113, 1114, 86, 87, 0, 88, 1115,
	0, 0, 1116, 494, 460, 0, 0, 0, 89, 90,
	0, 508, 195, 509, 91, 510, 511, 0, 92, 199,
	200, 93, 475, 493, 512, 513, 203, 0, 504, 0,
	486, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	356, 99, 1767, 0, 487, 489, 0, 488, 490, 101,
	102, 103, 104, 514, 105, 515, 516, 0, 106, 0,
	107, 0, 0, 0, 507, 109, 0, 110, 0, 0,
	0, 459, 111, 112, 495, 473, 0, 0, 113, 114,
	517, 0, 115, 0, 116, 0, 0, 357, 0, 117,
	505, 0, 212, 0, 118, 119, 501, 503, 0, 0,
	120, 0, 358, 121, 518, 519, 520, 0, 485, 0,
	0, 122, 360, 123, 124, 0, 0, 506, 361, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 363, 133, 134, 137, 135, 449, 136, 474,
	502, 138, 521, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 364, 142, 365, 496, 143, 144, 0, 497,
	145, 225, 146, 0, 147, 148, 149, 522, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 366, 157, 158,
	463, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	491, 165, 166, 0, 167, 523, 230, 168, 0, 169,
	170, 172, 524, 171, 498, 0, 173, 0, 174, 175,
	0, 233, 525, 526, 0, 0, 176, 499, 500, 472,
	177, 178, 1766, 180, 0, 0, 181, 182, 183, 492,
	0, 184, 185, 186, 238, 527, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 446, 447, 86,
	87, 0, 88, 448, 0, 0, 455, 494, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 493, 201, 202,
	203, 0, 504, 0, 486, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 356, 99, 100, 0, 487, 489,
	0, 488, 490, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 495, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 357, 0, 117, 505, 0, 212, 0, 118, 119,
	501, 503, 0, 0, 120, 0, 358, 121, 215, 216,
	217, 0, 218, 0, 359, 122, 360, 123, 124, 0,
	0, 506, 361, 125, 362, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 363, 133, 134, 137,
	135, 0, 136, 0, 502, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 364, 142, 365, 496,
	143, 144, 0, 497, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 366, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 491, 165, 166, 367, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 498, 0,
	173, 0, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 499, 500, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 492, 0, 184, 185, 186, 238, 239,
	0, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	1547, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 355, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 356, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 357, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	358, 121, 215, 216, 217, 0, 218, 0, 359, 122,
	360, 123, 124, 0, 0, 219, 361, 125, 362, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	363, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	364, 142, 365, 223, 143, 144, 0, 224, 145, 225,
	146, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 366, 157, 158, 227, 159,
	0, 160, 161, 162, 56, 228, 163, 164, 0, 165,
	166, 367, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 58, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 354, 239, 0, 187, 0, 0, 0, 54,
	188, 189, 190, 191, 0, 55, 350, 657, 0, 658,
	653, 648, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 53, 0, 192, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 355, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 356, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	661, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 650, 0,
	0, 113, 114, 210, 0, 115, 0, 116, 0, 0,
	357, 0, 117, 211, 0, 212, 0, 118, 119, 213,
	214, 0, 0, 120, 0, 358, 121, 215, 216, 217,
	0, 218, 0, 359, 122, 360, 123, 124, 0, 0,
	219, 361, 125, 362, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 363, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 651,
	0, 0, 0, 141, 222, 364, 142, 365, 223, 143,
	144, 0, 224, 145, 225, 146, 0, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	366, 157, 158, 227, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 0, 165, 166, 367, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	0, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 649, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 238, 239, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	350, 657, 0, 658, 653, 648, 0, 0, 0, 0,
	659, 654, 86, 87, 0, 88, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 355, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 356, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	205, 105, 206, 207, 644, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 208, 111,
	112, 209, 650, 0, 0, 113, 114, 210, 0, 115,
	0, 116, 0, 0, 357, 0, 117, 211, 0, 212,
	0, 118, 119, 213, 214, 0, 0, 120, 0, 358,
	121, 215, 216, 217, 0, 218, 0, 359, 122, 360,
	123, 124, 0, 0, 219, 361, 125, 362, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 363,
	133, 134, 137, 135, 0, 136, 0, 220, 138, 221,
	139, 140, 0, 651, 0, 0, 0, 141, 222, 364,
	142, 365, 223, 143, 144, 0, 224, 145, 225, 146,
	0, 147, 148, 149, 226, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 366, 157, 158, 227, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 0, 165, 166,
	367, 167, 229, 230, 168, 0, 169, 170, 172, 231,
	171, 232, 0, 173, 0, 174, 175, 0, 233, 234,
	235, 0, 0, 176, 236, 237, 649, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 238, 239, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 350, 657, 0, 658, 653, 648,
	0, 0, 0, 0, 659, 654, 86, 87, 0, 88,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 355, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 356, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 205, 105, 206, 207, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 208, 111, 112, 209, 650, 0, 0, 113,
	114, 210, 0, 115, 0, 116, 0, 0, 357, 0,
	117, 211, 0, 212, 0, 118, 119, 213, 214, 0,
	0, 120, 0, 358, 121, 215, 216, 217, 0, 218,
	0, 359, 122, 360, 123, 124, 0, 0, 219, 361,
	125, 362, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 363, 133, 134, 137, 135, 0, 136,
	0, 220, 138, 221, 139, 140, 0, 651, 0, 0,
	0, 141, 222, 364, 142, 365, 223, 143, 144, 0,
	224, 145, 225, 146, 0, 147, 148, 149, 226, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 366, 157,
	158, 227, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 0, 165, 166, 367, 167, 229, 230, 168, 0,
	169, 170, 172, 231, 171, 232, 0, 173, 0, 174,
	175, 0, 233, 234, 235, 0, 0, 176, 236, 237,
	649, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 238, 239, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 192, 659, 654,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 211, 0, 212, 0, 118, 119,
	213, 214, 0, 0, 120, 0, 0, 121, 215, 216,
	217, 0, 218, 0, 0, 122, 0, 123, 124, 0,
	0, 219, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 0, 142, 0, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 227, 159, 0, 160, 161, 162,
	56, 228, 163, 164, 0, 165, 166, 0, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 58, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 354, 239,
	0, 187, 0, 0, 0, 54, 188, 189, 190, 191,
	0, 55, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	53, 0, 192, 0, 1237, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 211,
	0, 212, 0, 118, 119, 213, 214, 0, 0, 120,
	0, 0, 121, 215, 216, 217, 0, 218, 0, 0,
	122, 0, 123, 124, 0, 0, 219, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 0, 142, 0, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 227,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 0,
	165, 166, 0, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 0, 174, 175, 0,
	233, 234, 235, 0, 0, 176, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 238, 239, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 192, 436, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 323,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 1023, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 213, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 0,
	147, 148, 149, 226, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 934, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 213, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 1447, 192, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 211, 0, 212, 0, 118, 119,
	213, 214, 0, 0, 120, 0, 0, 121, 215, 216,
	217, 0, 218, 0, 0, 122, 0, 123, 124, 0,
	0, 219, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 0, 142, 0, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 0, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 0, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	0, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	538, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 628,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	0, 121, 215, 216, 217, 0, 218, 0, 0, 122,
	0, 123, 124, 0, 0, 219, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	0, 142, 0, 223, 143, 144, 0, 224, 145, 225,
	146, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 227, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 0, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 627, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 83, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 192, 0, 0, 631, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 205, 105, 206, 207, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 208, 111, 112, 209, 0, 0, 0, 113,
	114, 210, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 211, 0, 212, 0, 118, 119, 213, 214, 0,
	0, 120, 0, 0, 121, 215, 216, 217, 0, 218,
	0, 0, 122, 0, 123, 124, 0, 0, 219, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 220, 138, 221, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 0, 142, 0, 223, 143, 144, 0,
	224, 145, 225, 146, 0, 147, 148, 149, 226, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 227, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 0, 165, 166, 0, 167, 229, 230, 168, 0,
	169, 170, 172, 231, 171, 232, 0, 173, 0, 174,
	175, 0, 233, 234, 235, 0, 0, 176, 236, 237,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 238, 239, 350, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 192, 0, 0,
	631, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 355, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 356, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 357, 0, 117, 211, 0, 212, 0, 118, 119,
	213, 214, 0, 0, 120, 0, 358, 121, 215, 216,
	217, 0, 218, 0, 359, 122, 360, 123, 124, 0,
	0, 219, 361, 125, 362, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 363, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 364, 142, 365, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 366, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 367, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 0, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	83, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 907, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 905, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	205, 105, 206, 207, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 208, 111,
	112, 209, 0, 1000, 0, 113, 114, 210, 0, 115,
	0, 116, 910, 0, 0, 0, 117, 211, 0, 212,
	0, 118, 119, 213, 214, 0, 998, 120, 0, 0,
	121, 215, 216, 217, 0, 218, 0, 0, 122, 0,
	123, 124, 0, 0, 219, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 220, 138, 221,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 0,
	142, 0, 223, 143, 144, 0, 224, 145, 225, 146,
	909, 147, 148, 149, 226, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 227, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 0, 165, 166,
	0, 167, 229, 230, 168, 0, 169, 170, 172, 231,
	171, 232, 0, 173, 0, 174, 175, 0, 233, 234,
	235, 0, 0, 176, 236, 237, 0, 177, 178, 179,
	180, 0, 999, 181, 182, 183, 0, 0, 184, 185,
	186, 238, 239, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 907, 204, 0,
	0, 902, 94, 95, 96, 0, 97, 905, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 910, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 901, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 909, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 908, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 83, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 192, 0, 1237, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 0, 0,
	0, 113, 114, 210, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 211, 0, 212, 0, 118, 119, 213,
	214, 0, 0, 120, 0, 0, 121, 215, 216, 217,
	0, 218, 0, 0, 122, 0, 123, 124, 0, 0,
	219, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 0, 142, 0, 223, 143,
	144, 0, 224, 145, 225, 146, 0, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 227, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 0, 165, 166, 0, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	0, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 238, 239, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 213, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 323, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 0,
	147, 148, 149, 226, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 83, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 211,
	0, 212, 0, 118, 119, 580, 214, 0, 0, 120,
	0, 0, 121, 215, 216, 217, 0, 218, 0, 0,
	122, 0, 123, 124, 0, 0, 219, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 323, 0, 0, 141,
	222, 0, 142, 0, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 227,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 0,
	165, 166, 0, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 0, 174, 175, 0,
	233, 234, 235, 0, 0, 176, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 238, 239, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 374,
	88, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 83, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 209,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 211, 0, 212, 0, 118,
	119, 329, 214, 0, 0, 120, 0, 0, 121, 215,
	216, 217, 0, 218, 0, 0, 122, 0, 123, 124,
	0, 0, 219, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 220, 138, 221, 139, 140,
	0, 0, 323, 0, 0, 141, 222, 0, 142, 0,
	223, 143, 144, 0, 224, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 227, 159, 0, 160, 161,
	162, 0, 228, 163, 164, 0, 165, 166, 0, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 232,
	0, 173, 0, 174, 175, 0, 233, 234, 235, 0,
	0, 176, 236, 237, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 238,
	239, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 243, 88, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	0, 121, 215, 216, 217, 0, 218, 0, 0, 122,
	0, 123, 124, 0, 0, 219, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	0, 142, 0, 223, 143, 144, 0, 224, 145, 225,
	242, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 227, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 0, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 0, 174, 175, 0, 233,
	234, 235, 0, 0, 176, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 83, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 205, 105, 206, 207, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 208, 111, 112, 209, 0, 0, 0, 113,
	114, 210, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 211, 0, 212, 0, 118, 119, 213, 214, 0,
	0, 120, 0, 0, 121, 215, 216, 217, 0, 218,
	0, 0, 122, 0, 123, 124, 0, 0, 219, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 220, 138, 221, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 0, 142, 0, 223, 143, 144, 0,
	224, 145, 225, 146, 0, 147, 148, 149, 226, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 227, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 0, 165, 166, 0, 167, 229, 230, 168, 0,
	169, 170, 172, 231, 171, 232, 0, 173, 0, 174,
	175, 0, 233, 234, 235, 0, 0, 176, 236, 237,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 238, 239, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 211, 0, 212, 0, 118, 119,
	1163, 214, 0, 0, 120, 0, 0, 121, 215, 216,
	217, 0, 218, 0, 0, 122, 0, 123, 124, 0,
	0, 219, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 0, 142, 0, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 0, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 0, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	83, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	205, 105, 206, 207, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 208, 111,
	112, 209, 0, 0, 0, 113, 114, 210, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 211, 0, 212,
	0, 118, 119, 1161, 214, 0, 0, 120, 0, 0,
	121, 215, 216, 217, 0, 218, 0, 0, 122, 0,
	123, 124, 0, 0, 219, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 220, 138, 221,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 0,
	142, 0, 223, 143, 144, 0, 224, 145, 225, 146,
	0, 147, 148, 149, 226, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 227, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 0, 165, 166,
	0, 167, 229, 230, 168, 0, 169, 170, 172, 231,
	171, 232, 0, 173, 0, 174, 175, 0, 233, 234,
	235, 0, 0, 176, 236, 237, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 238, 239, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 1152, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 83, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 0, 0,
	0, 113, 114, 210, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 211, 0, 212, 0, 118, 119, 774,
	214, 0, 0, 120, 0, 0, 121, 215, 216, 217,
	0, 218, 0, 0, 122, 0, 123, 124, 0, 0,
	219, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 0, 142, 0, 223, 143,
	144, 0, 224, 145, 225, 146, 0, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 227, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 0, 165, 166, 0, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	0, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 238, 239, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 213, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 0,
	147, 148, 149, 226, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 257,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 83, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 192, 0, 567, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 211,
	0, 212, 0, 118, 119, 213, 214, 0, 0, 120,
	0, 0, 121, 215, 216, 217, 0, 218, 0, 0,
	122, 0, 123, 124, 0, 0, 219, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 0, 142, 0, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 227,
	159, 0, 160, 161, 162, 0, 228, 163, 164, 0,
	0, 166, 0, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 0, 174, 175, 0,
	233, 234, 235, 0, 0, 176, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 238, 239, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 421, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 144,
	0, 224, 145, 225, 146, 0, 147, 148, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 159, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 83, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 205, 105,
	206, 207, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 208, 111, 112, 209,
	0, 0, 0, 113, 114, 210, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 211, 0, 212, 0, 118,
	119, 418, 214, 0, 0, 120, 0, 0, 121, 215,
	216, 217, 0, 218, 0, 0, 122, 0, 123, 124,
	0, 0, 219, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 220, 138, 221, 139, 140,
	0, 0, 0, 0, 0, 141, 222, 0, 142, 0,
	223, 143, 144, 0, 224, 145, 225, 146, 0, 147,
	148, 149, 226, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 227, 159, 0, 160, 161,
	162, 0, 228, 163, 164, 0, 165, 166, 0, 167,
	229, 230, 168, 0, 169, 170, 172, 231, 171, 232,
	0, 173, 0, 174, 175, 0, 233, 234, 235, 0,
	0, 176, 236, 237, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 238,
	239, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 380, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 205, 105, 206, 207, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 208,
	111, 112, 209, 0, 0, 0, 113, 114, 210, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 211, 0,
	212, 0, 118, 119, 213, 214, 0, 0, 120, 0,
	0, 121, 215, 216, 217, 0, 218, 0, 0, 122,
	0, 123, 124, 0, 0, 219, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 268,
	0, 133, 134, 137, 135, 0, 136, 0, 220, 138,
	221, 139, 140, 0, 0, 0, 0, 0, 141, 222,
	0, 142, 0, 223, 143, 144, 0, 224, 145, 225,
	146, 0, 147, 148, 149, 226, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 227, 159,
	0, 160, 161, 162, 0, 228, 163, 164, 0, 165,
	166, 0, 167, 229, 230, 168, 0, 169, 170, 172,
	231, 171, 232, 0, 173, 0, 174, 175, 0, 267,
	234, 235, 0, 0, 263, 236, 237, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 238, 239, 83, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 205, 105, 206, 207, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 208, 111, 112, 209, 0, 0, 0, 113,
	114, 210, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 211, 0, 212, 0, 118, 119, 213, 214, 0,
	0, 120, 0, 0, 121, 215, 216, 217, 0, 218,
	0, 0, 122, 0, 123, 124, 0, 0, 219, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 268, 0, 133, 134, 137, 135, 0, 136,
	0, 220, 138, 221, 139, 140, 0, 0, 0, 0,
	0, 141, 222, 0, 142, 0, 223, 143, 144, 0,
	224, 145, 225, 146, 0, 147, 148, 149, 226, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 227, 159, 0, 160, 161, 162, 0, 228, 163,
	164, 0, 165, 166, 0, 167, 229, 230, 168, 0,
	169, 170, 172, 231, 171, 232, 0, 173, 0, 174,
	175, 0, 267, 234, 235, 0, 0, 263, 236, 237,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 238, 239, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 205, 105, 206,
	207, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 208, 111, 112, 209, 0,
	0, 0, 113, 114, 210, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 211, 0, 212, 0, 118, 119,
	345, 214, 0, 0, 120, 0, 0, 121, 215, 216,
	217, 0, 218, 0, 0, 122, 0, 123, 124, 0,
	0, 219, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 220, 138, 221, 139, 140, 0,
	0, 0, 0, 0, 141, 222, 0, 142, 0, 223,
	143, 144, 0, 224, 145, 225, 146, 0, 147, 148,
	149, 226, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 227, 159, 0, 160, 161, 162,
	0, 228, 163, 164, 0, 165, 166, 0, 167, 229,
	230, 168, 0, 169, 170, 172, 231, 171, 232, 0,
	173, 0, 174, 175, 0, 233, 234, 235, 0, 0,
	176, 236, 237, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 238, 239,
	83, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	205, 105, 206, 207, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 208, 111,
	112, 209, 0, 0, 0, 113, 114, 210, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 211, 0, 212,
	0, 118, 119, 342, 214, 0, 0, 120, 0, 0,
	121, 215, 216, 217, 0, 218, 0, 0, 122, 0,
	123, 124, 0, 0, 219, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 220, 138, 221,
	139, 140, 0, 0, 0, 0, 0, 141, 222, 0,
	142, 0, 223, 143, 144, 0, 224, 145, 225, 146,
	0, 147, 148, 149, 226, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 227, 159, 0,
	160, 161, 162, 0, 228, 163, 164, 0, 165, 166,
	0, 167, 229, 230, 168, 0, 169, 170, 172, 231,
	171, 232, 0, 173, 0, 174, 175, 0, 233, 234,
	235, 0, 0, 176, 236, 237, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 238, 239, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 205, 105, 206, 207, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 208, 111, 112, 209, 0, 0, 0, 113, 114,
	210, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	211, 0, 212, 0, 118, 119, 340, 214, 0, 0,
	120, 0, 0, 121, 215, 216, 217, 0, 218, 0,
	0, 122, 0, 123, 124, 0, 0, 219, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	220, 138, 221, 139, 140, 0, 0, 0, 0, 0,
	141, 222, 0, 142, 0, 223, 143, 144, 0, 224,
	145, 225, 146, 0, 147, 148, 149, 226, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	227, 159, 0, 160, 161, 162, 0, 228, 163, 164,
	0, 165, 166, 0, 167, 229, 230, 168, 0, 169,
	170, 172, 231, 171, 232, 0, 173, 0, 174, 175,
	0, 233, 234, 235, 0, 0, 176, 236, 237, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 238, 239, 83, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 205, 105, 206, 207,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 208, 111, 112, 209, 0, 0,
	0, 113, 114, 210, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 211, 0, 212, 0, 118, 119, 332,
	214, 0, 0, 120, 0, 0, 121, 215, 216, 217,
	0, 218, 0, 0, 122, 0, 123, 124, 0, 0,
	219, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 220, 138, 221, 139, 140, 0, 0,
	0, 0, 0, 141, 222, 0, 142, 0, 223, 143,
	144, 0, 224, 145, 225, 146, 0, 147, 148, 149,
	226, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 227, 159, 0, 160, 161, 162, 0,
	228, 163, 164, 0, 165, 166, 0, 167, 229, 230,
	168, 0, 169, 170, 172, 231, 171, 232, 0, 173,
	0, 174, 175, 0, 233, 234, 235, 0, 0, 176,
	236, 237, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 238, 239, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 205,
	105, 206, 207, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 208, 111, 112,
	209, 0, 0, 0, 113, 114, 210, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 211, 0, 212, 0,
	118, 119, 213, 214, 0, 0, 120, 0, 0, 121,
	215, 216, 217, 0, 218, 0, 0, 122, 0, 123,
	124, 0, 0, 219, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 220, 138, 221, 139,
	140, 0, 0, 0, 0, 0, 141, 222, 0, 142,
	0, 223, 143, 144, 0, 224, 145, 225, 146, 0,
	147, 148, 149, 226, 312, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 227, 159, 0, 160,
	161, 162, 0, 228, 163, 164, 0, 165, 166, 0,
	167, 229, 230, 168, 0, 169, 170, 172, 231, 171,
	232, 0, 173, 0, 174, 175, 0, 233, 234, 235,
	0, 0, 176, 236, 237, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	238, 239, 83, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 205, 105, 206, 207, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	208, 111, 112, 209, 0, 0, 0, 113, 114, 210,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 211,
	0, 212, 0, 118, 119, 213, 214, 0, 0, 120,
	0, 0, 121, 215, 216, 217, 0, 218, 0, 0,
	122, 0, 123, 124, 0, 0, 219, 0, 125, 0,
	0, 260, 0, 0, 127, 0, 128, 129, 130, 131,
	268, 0, 133, 134, 137, 135, 0, 136, 0, 220,
	138, 221, 139, 140, 0, 0, 0, 0, 0, 141,
	222, 0, 142, 0, 223, 143, 144, 0, 224, 145,
	225, 146, 0, 147, 148, 149, 226, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 262,
	159, 0, 160, 161, 162, 0, 228, 163, 261, 0,
	165, 166, 0, 167, 229, 230, 168, 0, 169, 170,
	172, 231, 171, 232, 0, 173, 0, 174, 175, 0,
	267, 234, 235, 0, 0, 263, 236, 237, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 238, 239, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 205, 105, 206, 207, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 208, 111, 112, 209, 0, 0, 0,
	113, 114, 210, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 211, 0, 212, 0, 118, 119, 213, 214,
	0, 0, 120, 0, 0, 121, 215, 216, 217, 0,
	218, 0, 0, 122, 0, 123, 124, 0, 0, 219,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 220, 138, 221, 139, 140, 0, 0, 0,
	0, 0, 141, 222, 0, 142, 0, 223, 143, 0,
	0, 224, 145, 225, 146, 0, 147, 0, 149, 226,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 227, 0, 0, 160, 161, 162, 0, 228,
	163, 164, 0, 165, 166, 0, 167, 229, 230, 168,
	0, 169, 170, 172, 231, 171, 232, 0, 173, 0,
	174, 175, 0, 233, 234, 235, 0, 0, 176, 236,
	237, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 238, 239, 800, 187,
	820, 821, 822, 0, 188, 189, 190, 191, 0, 0,
	823, 0, 0, 0, 0, 0, 0, 803, 0, 829,
	0, 800, 0, 820, 821, 822, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 802, 0,
	803, 0, 829, 0, 817, 800, 0, 820, 821, 822,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 802, 0, 0, 803, 0, 829, 817, 800, 0,
	820, 821, 822, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 802, 0, 803, 0, 829,
	808, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 830, 802, 0,
	0, 0, 0, 808, 817, 0, 0, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	830, 0, 0, 0, 0, 818, 0, 808, 1785, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 830, 0, 0, 824, 818, 0,
	808, 0, 1324, 0, 0, 1323, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 830, 0, 0,
	824, 0, 818, 0, 0, 0, 0, 0, 0, 828,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 827, 0, 824, 818, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 1784, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 0, 826, 0, 0, 814, 815,
	816, 819, 813, 810, 811, 812, 804, 805, 806, 807,
	809, 0, 827, 0, 0, 0, 0, 801, 826, 0,
	1332, 814, 815, 816, 0, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 0, 0, 0, 0, 0, 0,
	801, 0, 826, 1285, 0, 814, 815, 816, 0, 813,
	810, 811, 812, 804, 805, 806, 807, 809, 0, 0,
	0, 0, 0, 0, 801, 826, 0, 0, 814, 815,
	816, 0, 813, 810, 811, 812, 804, 805, 806, 807,
	809, 800, 0, 820, 821, 822, 0, 801, 0, 0,
	0, 0, 0, 823, 0, 832, 0, 0, 1011, 0,
	803, 800, 829, 820, 821, 822, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 831, 0, 0,
	803, 802, 829, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 820, 821,
	822, 802, 0, 0, 0, 0, 0, 817, 823, 0,
	0, 0, 0, 1012, 0, 803, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 802, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 808, 0, 800, 0, 820, 821, 822,
	0, 0, 828, 0, 0, 0, 0, 823, 0, 0,
	830, 0, 825, 0, 803, 0, 829, 0, 818, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 825, 0, 0, 802, 0, 0, 818, 0,
	824, 817, 0, 0, 0, 830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 0,
	824, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 818, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 808, 0, 0,
	0, 0, 0, 0, 819, 824, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 819,
	0, 0, 818, 0, 0, 0, 0, 0, 826, 0,
	827, 814, 815, 816, 0, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 824, 0, 0, 0, 826, 0,
	801, 814, 815, 816, 0, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 0, 0, 0, 0, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 826, 0, 0, 814, 815, 816, 827,
	813, 810, 811, 812, 804, 805, 806, 807, 809, 0,
	0, 0, 0, 0, 1721, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 800,
	0, 820, 821, 822, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 0, 0, 803, 0,
	829, 0, 826, 0, 0, 814, 815, 816, 0, 813,
	810, 811, 812, 804, 805, 806, 807, 809, 0, 802,
	0, 0, 0, 1720, 801, 817, 800, 0, 820, 821,
	822, 0, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 0, 0, 803, 0, 829, 0, 800,
	0, 820, 821, 822, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 802, 0, 803, 0,
	829, 808, 817, 800, 0, 820, 821, 822, 0, 0,
	0, 0, 0, 0, 0, 823, 0, 0, 830, 802,
	0, 0, 803, 0, 829, 817, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 802, 0, 0, 818, 0, 808, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 824, 0,
	0, 808, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 830, 0,
	0, 0, 0, 818, 0, 808, 0, 0, 0, 0,
	828, 0, 819, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 830, 827, 0, 824, 818, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 0, 824, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 824, 307, 0, 0, 826, 0, 0, 814,
	815, 816, 819, 813, 810, 811, 812, 804, 805, 806,
	807, 809, 0, 827, 0, 0, 0, 1701, 801, 0,
	0, 800, 0, 820, 821, 822, 819, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 827, 0, 0,
	803, 0, 829, 826, 0, 0, 814, 815, 816, 0,
	813, 810, 811, 812, 804, 805, 806, 807, 809, 0,
	0, 802, 0, 0, 1680, 801, 826, 817, 0, 814,
	815, 816, 0, 813, 810, 811, 812, 804, 805, 806,
	807, 809, 0, 0, 0, 0, 0, 1675, 801, 0,
	826, 0, 0, 814, 815, 816, 0, 813, 810, 811,
	812, 804, 805, 806, 807, 809, 0, 0, 0, 0,
	0, 0, 801, 808, 800, 0, 820, 821, 822, 0,
	0, 0, 0, 0, 0, 0, 823, 0, 0, 0,
	830, 0, 0, 803, 0, 829, 0, 0, 0, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 802, 0, 0, 0, 818, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 808, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 0, 800, 0,
	820, 821, 822, 830, 0, 827, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 828, 0, 803, 0, 829,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 0, 0, 802, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 826, 0,
	0, 814, 815, 816, 0, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 0, 0, 0, 0, 0, 1671,
	801, 0, 0, 0, 0, 0, 0, 819, 0, 0,
	808, 800, 0, 820, 821, 822, 0, 0, 827, 0,
	0, 0, 0, 823, 0, 0, 0, 830, 0, 0,
	803, 0, 829, 0, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 802, 0, 0, 0, 818, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 814, 815, 816, 824, 813, 810,
	811, 812, 804, 805, 806, 807, 809, 0, 0, 0,
	0, 0, 1609, 801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 800, 0, 820, 821, 822,
	830, 0, 827, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 828, 0, 803, 0, 829, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 0, 0, 802, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 826, 0, 0, 814, 815,
	816, 0, 813, 810, 811, 812, 804, 805, 806, 807,
	809, 0, 0, 0, 0, 0, 1608, 801, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 808, 800, 0,
	820, 821, 822, 0, 0, 827, 0, 0, 0, 0,
	823, 0, 0, 0, 830, 0, 0, 803, 0, 829,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 802, 0,
	0, 0, 818, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 814, 815, 816, 824, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 0, 0, 0, 0, 0, 1516,
	801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	808, 800, 0, 820, 821, 822, 0, 0, 819, 0,
	0, 0, 0, 823, 0, 0, 0, 830, 0, 827,
	803, 0, 829, 0, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 802, 0, 0, 0, 818, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 826, 0, 0, 814, 815, 816, 0, 813,
	810, 811, 812, 804, 805, 806, 807, 809, 0, 0,
	0, 1499, 0, 808, 801, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 800, 0, 820, 821, 822,
	830, 0, 827, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 828, 0, 803, 0, 829, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 0, 0, 802, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 826, 0, 0, 814, 815,
	816, 0, 813, 810, 811, 812, 804, 805, 806, 807,
	809, 0, 0, 0, 0, 0, 1450, 801, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 808, 800, 0,
	820, 821, 822, 0, 0, 827, 0, 0, 0, 0,
	823, 0, 0, 0, 830, 0, 0, 803, 0, 829,
	0, 0, 1444, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 802, 0,
	0, 0, 818, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 814, 815, 816, 824, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 0, 0, 0, 0, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 1330, 0, 0, 819, 0,
	0, 0, 800, 0, 820, 821, 822, 830, 0, 827,
	0, 0, 0, 0, 823, 0, 0, 0, 1325, 828,
	0, 803, 0, 829, 0, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	0, 0, 802, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 826, 0, 0, 814, 815, 816, 0, 813,
	810, 811, 812, 804, 805, 806, 807, 809, 0, 0,
	0, 0, 0, 1434, 801, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 808, 0, 800, 0, 820, 821,
	822, 0, 827, 0, 0, 0, 0, 0, 823, 0,
	0, 830, 0, 0, 0, 803, 0, 829, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 802, 0, 0, 818,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 0, 814, 815,
	816, 824, 813, 810, 811, 812, 804, 805, 806, 807,
	809, 0, 0, 0, 0, 0, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 0, 0, 819, 0, 0, 0, 0,
	800, 0, 820, 821, 822, 830, 827, 0, 0, 0,
	0, 0, 823, 0, 0, 0, 1284, 828, 0, 803,
	0, 829, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 0, 0,
	802, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 826,
	0, 0, 814, 815, 816, 1290, 813, 810, 811, 812,
	804, 805, 806, 807, 809, 0, 0, 0, 0, 0,
	0, 801, 800, 0, 820, 821, 822, 0, 0, 819,
	0, 0, 808, 0, 823, 0, 0, 0, 0, 0,
	827, 803, 0, 829, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 802, 0, 0, 0, 0, 0, 817, 0,
	0, 825, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 0, 814, 815, 816, 824,
	813, 810, 811, 812, 804, 805, 806, 807, 809, 0,
	0, 0, 0, 0, 808, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 820, 821,
	822, 830, 0, 819, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 828, 827, 803, 0, 829, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 0, 0, 802, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
	814, 815, 816, 0, 813, 810, 811, 812, 804, 805,
	806, 807, 809, 0, 0, 819, 0, 0, 808, 801,
	800, 0, 820, 821, 822, 0, 827, 0, 0, 0,
	0, 0, 823, 0, 0, 830, 0, 0, 0, 803,
	0, 829, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	802, 0, 0, 818, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 814, 815, 816, 824, 813, 810, 811, 812,
	804, 805, 806, 807, 809, 0, 0, 0, 0, 0,
	1072, 801, 0, 0, 0, 0, 0, 800, 0, 820,
	821, 822, 808, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 803, 0, 829, 830,
	827, 800, 0, 820, 821, 822, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 0, 802, 0, 0,
	803, 825, 829, 817, 0, 0, 0, 818, 1292, 0,
	1310, 1311, 1312, 0, 0, 0, 0, 0, 0, 0,
	1428, 802, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 826, 0, 0, 814, 815, 816, 0,
	813, 810, 811, 812, 804, 805, 806, 807, 809, 808,
	0, 0, 0, 0, 1307, 801, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 808, 827, 0, 0, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	830, 0, 0, 0, 818, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 24, 818, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 42, 1313,
	814, 815, 816, 0, 813, 810, 811, 812, 804, 805,
	806, 807, 809, 0, 0, 1308, 0, 0, 0, 801,
	819, 0, 44, 0, 0, 0, 0, 0, 49, 0,
	0, 827, 1292, 0, 1310, 1311, 1312, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 29, 827, 0, 45, 0, 0,
	0, 32, 30, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 34, 1307, 0,
	0, 0, 0, 0, 826, 0, 0, 814, 815, 816,
	0, 813, 810, 811, 812, 804, 805, 806, 807, 809,
	0, 0, 0, 0, 0, 0, 801, 0, 826, 0,
	0, 814, 815, 816, 0, 813, 810, 811, 812, 804,
	805, 806, 807, 809, 1298, 0, 0, 0, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 1304, 1305,
	1306, 0, 1303, 1300, 1301, 1302, 1294, 1295, 1296, 1297,
	1299, 31, 0, 1313, 0, 0, 0, 1293, 0, 0,
	0, 0, 47, 0, 0, 35, 0, 46, 0, 1308,
	0, 0, 36, 0, 0, 56, 0, 0, 0, 0,
	39, 41, 0, 0, 0, 0, 0, 0, 0, 43,
	601, 596, 618, 590, 609, 608, 58, 0, 592, 591,
	0, 0, 0, 620, 619, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 1309, 0, 0, 0, 0,
	54, 0, 614, 0, 606, 605, 55, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 598, 599, 0, 617, 0, 0,
	0, 0, 1304, 1305, 1306, 0, 1303, 1300, 1301, 1302,
	1294, 1295, 1296, 1297, 1299, 0, 0, 0, 0, 0,
	0, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 600, 595, 0, 0, 0, 0,
	0, 622, 0, 0, 0, 0, 0, 0, 593, 0,
	0, 615, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 621,
}
var sqlPact = [...]int{

	22088, -1000, 27, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 797, -1000, -1000, -1000, 634, 768,
	1646, 14970, 14970, 14717, 1677, 1677, 16235, -1000, -1000, 19018,
	-1000, 2186, 504, 509, 504, 504, 517, 16235, 586, 741,
	125, -1000, 646, 99, 18765, 14970, 1244, 19, 13705, 356,
	22088, 14464, 14970, 18512, 1091, 1010, 1009, 13705, 18259, 18006,
	17753, -1000, 9557, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 584, 362, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	361, -1000, 14211, -1000, 873, -1000, 18, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 865, -1000, 14970, -1000, -1000,
	17500, 17247, 359, 789, -1000, -1000, 546, 418, 1266, -1000,
	40, -1000, -1000, 1090, -1000, 860, 1087, 1084, 1082, 1079,
	415, 861, -1000, 580, 789, -1000, 789, -1000, -1000, -1000,
	563, 16235, -1000, 13705, -1000, 16994, 1026, 16741, -1000, 646,
	-1000, -1000, -1000, 893, 1243, 1243, 1243, 1276, 146, 145,
	125, 11, 14970, -1000, 357, 11, 6651, 6651, -1000, -1000,
	356, -1000, 371, 11923, 29, -1000, 7181, -1000, 756, 1154,
	712, 708, 1151, -115, 13705, 14970, 14970, 627, 16488, -1000,
	1150, 130, 1149, -1000, 126, 1144, -1000, 1, -1000, -1000,
	-1000, -1000, -1000, -1000, 356, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13958, 1307,
	22278, -1000, 8501, -1000, -1000, 12187, 1348, 12187, -1000, -1000,
	1304, -1000, 8501, -1000, 17, 16, 973, 1030, 10086, 9822,
	1205, 1188, -1000, -1000, -1000, 38, 4264, 14970, 1097, 12187,
	14970, 14970, 14970, -1000, 14970, -1000, 972, -1000, 14970, -1000,
	15, 13, -1000, 16235, -1000, 156, -1000, 354, 930, 15982,
	1166, 929, -1000, 893, -1000, 871, 956, 7709, 8501, 125,
	-1000, -1000, 125, 125, 8501, -1000, -1000, 14970, 11, 1298,
	14970, 64, -1000, 19881, -1000, -1000, 8501, 8501, 8501, 8501,
	8501, 758, -1000, -1000, -1000, 5059, -1000, -1000, 29, 350,
	312, -1000, -1000, 346, 29, -1000, -1000, -1000, -1000, 343,
	1397, 422, -1000, -1000, -1000, 8501, 423, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1096, 340, 333, -1000,
	-1000, -1000, -1000, 332, 324, 313, 311, 305, 304, 303,
	302, 298, 293, 286, 285, 283, 280, 747, -1000, 453,
	-1000, -1000, 453, 453, -1000, 265, 265, 276, -1000, -1000,
	-1000, 265, -1000, -1000, -1000, 411, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 277, 64, -1000, -1000, -1000, 14970, 29,
	-1000, -1000, -1000, 8501, 3999, -1, -1000, 21756, -1000, -44,
	778, -1000, 13199, 1256, 1242, 1232, 13705, 559, 558, 14970,
	14970, 431, 263, 1293, 263, 11395, -1000, 14970, 14970, -1000,
	14970, -1000, -1000, 14970, -1000, 14970, 14970, 749, 12693, 709,
	1140, 99, -6, -1000, 1313, -1000, -1000, -1000, -1000, 490,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 276, 747, 265, 265, 265, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 411, -1000, -1000, 453, 453,
	453, -1000, -1000, -9, 21756, 548, -12, 12440, 14970, -1000,
	36, -1000, -1000, 1078, 501, -11, 742, 1000, 857, -1000,
	-1000, -1000, -1000, 9, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1369, -1000, -1000, -1000, -1000, 1386,
	9, -1000, -1000, -1000, -1000, -1000, 1396, -1000, -1000, -1000,
	4264, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14970, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 742, 1000, -1000, -1000,
	13705, 12946, 1134, 849, 926, -1000, -1000, 387, 1132, -1000,
	-1000, -1000, -1000, 21756, -1000, 21756, 722, 1005, -1000, 1005,
	7, -1000, 19861, -1000, 264, -14, -1000, 431, 6651, 11131,
	22278, 22278, 14970, 572, 8501, 8501, 8501, 8501, 8501, 8501,
	8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501,
	8501, 8501, 8501, 8501, 8501, 8501, 920, 543, 1489, 805,
	247, 4264, -1000, 321, 321, 321, 21937, 21937, 212, 12,
	21652, -2, 29, -1000, -1000, 6387, 6121, 29, 4527, -1000,
	601, 1379, 448, 21756, 1107, 1039, 262, 137, 133, 8501,
	8501, 905, 8501, 8765, 8501, 8501, 5325, 8501, 8501, 8501,
	8501, 8501, 8501, -1000, 260, -1000, -1000, -1000, -1000, 1376,
	-1000, -1000, 1375, -1000, 570, 569, 1371, 431, 131, -1000,
	2455, -1000, -1000, 7181, -1000, 709, 14970, 14970, 14970, -1000,
	-1000, 925, 15729, -1000, 22278, 14970, -1000, 259, 256, 991,
	989, 14970, 14970, 15476, 15223, 14970, 710, 14970, 14970, 692,
	-1000, 684, 8501, 677, -1000, 10603, 457, 14970, 694, 63,
	-1000, -1000, -1000, 386, 14970, -1000, -1000, -1000, 130, -1000,
	126, -1000, -1000, 13705, -1000, -1000, -1000, -1000, -1000, -1000,
	22278, 365, 337, -1000, 1356, 541, -1000, 535, 534, 532,
	-1000, 255, -1000, 8501, 14970, 12440, -12, -29, -1000, -1000,
	14970, 1000, -1000, -1000, -1000, -1000, 667, -1000, 723, -1000,
	10350, -1000, -1000, -1000, 601, -1000, -45, -1000, -1000, -1000,
	-1000, 122, -35, -1000, -1000, -1000, -1000, -1000, 14970, 267,
	14970, 14970, 14970, 1131, 1395, 14970, -1000, -1000, -1000, 8501,
	-1000, -1000, -1000, 99, 14970, -1000, 1038, -1000, -42, 1114,
	-124, 13452, -1000, 3372, -1000, -1000, -1000, 414, 150, 150,
	294, 294, 294, 294, 165, 165, 182, 1777, 2569, 2569,
	2569, 576, 658, 658, 2569, 2569, 2569, 21937, 21850, 2361,
	8501, 530, 800, 247, 8501, -1000, 912, -1000, -1000, -1000,
	1072, 240, 8765, 8765, -1000, -1000, -1000, 5059, -1000, -1000,
	237, 8501, -1000, 8501, -53, -73, -1000, -1000, -16, -1000,
	-1000, -19, 8501, 8501, 8501, 120, -1000, 119, 619, -1000,
	8501, 781, 236, 235, 8501, -1000, -1000, 21570, 19541, 118,
	1065, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 108, 21466,
	107, 2984, -1000, 8765, 8765, 8765, 5059, 230, 105, 19588,
	-101, 21372, 7445, 7445, 7445, 104, 21268, 8501, -101, 19518,
	2943, 2776, -17, -22, -23, 1352, -24, 103, 408, 407,
	100, 1038, -1000, -1000, 8501, -1000, -1000, -1000, 529, 527,
	1123, -1000, 911, -1000, 676, 8501, 14970, 229, 218, 752,
	-1000, 1118, 835, 1116, 835, -1000, -44, 759, -1000, -1000,
	522, -1000, 6651, 21756, -1000, 691, 1238, -32, -1000, -1000,
	-1000, 6651, 431, 11395, 7181, -33, -1000, -1000, 709, -1000,
	494, 1346, 96, 940, 931, 740, 635, 1344, 21756, -45,
	-1000, -45, -1000, -1000, -1000, -1000, -1000, -1000, 14970, -1000,
	12946, 213, 14970, 211, 202, 201, 14970, -1000, 1166, -1000,
	95, -1000, 1033, 1271, 11131, 998, 997, 11131, 1252, 799,
	799, 799, -1000, 13452, 3720, -1000, -1000, 14970, 200, 10868,
	94, 1114, 8501, 2361, 8501, 8765, 8765, -1000, 2361, -1000,
	-1000, -1000, -1000, 1062, 199, 8501, 22278, 21988, 3069, -39,
	5855, -51, 21175, -1000, -1000, 312, -1000, 93, 6917, -1000,
	20303, -7, -7, -1000, 1394, 1159, -1000, 8501, 21071, -1000,
	11659, 440, 808, 20978, 22278, 22278, -1000, 8501, -1000, 1058,
	8501, -1000, 22278, 22278, 8765, 8765, 8765, 8765, 8765, 8765,
	8765, 8765, 8765, 8765, 8765, 8765, 8765, 8765, 8765, 8765,
	8765, 8765, 8765, 984, 8765, 310, 310, 310, -54, 5589,
	-1000, 1095, 1058, 8501, 8501, 22278, 89, 86, 84, -1000,
	8501, -101, 8501, 8501, 8501, -1000, -1000, -1000, 82, -1000,
	1340, -1000, -1000, -1000, -1000, 1033, 20885, 14970, 14970, 14970,
	1115, 1921, -1000, 20781, -52, 14970, 14970, -1000, 1003, 1008,
	489, 14970, -1000, 14970, -1000, 14970, 14970, 14970, 14970, -64,
	6651, 206, 99, 14970, -64, 684, -1000, -1000, 384, -1000,
	308, 246, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	78, -1000, -1000, 9293, 197, 14970, 12946, 9293, 847, -1000,
	-1000, 424, 8501, 8501, 1114, 11131, 11131, 1021, 974, 11131,
	-1000, -1000, -1000, -1000, 392, -1000, 987, 194, 14970, 13452,
	307, 2361, 2105, 232, 8501, 22278, 21961, -57, 8501, 8501,
	-1000, -58, -1000, 8501, -1000, -1000, 1393, 8501, 77, 76,
	74, -1000, -1000, 21756, 8501, -1000, -1000, 19271, 8501, 70,
	-1000, 62, 60, 21756, 1095, 21756, -1000, -1000, 135, 135,
	310, 310, 310, 310, 1531, 1531, 1024, 839, 545, 545,
	545, 510, 335, 335, 545, 545, 545, 1057, 960, 193,
	22142, 8501, -66, -1000, -1000, -1000, 21756, 21756, 59, -1000,
	-1000, -1000, -101, 2735, 20688, 20584, -1000, 58, 424, -1000,
	-1000, -1000, -1000, 14970, -1000, 14970, -1000, 14970, 14970, 903,
	-1000, -1000, 966, 191, 8765, 14970, -1000, 786, -68, -76,
	902, -1000, 888, 8501, -1000, 22278, 835, 835, -1000, 518,
	514, -1000, -64, 1176, 14970, 1218, -1000, -1000, -1000, 185,
	-1000, -1000, -1000, -78, -1000, 245, 1247, 8501, -1000, -1000,
	181, 9293, -83, -1000, -1000, 55, -84, 14970, -1000, 14970,
	21756, -101, -1000, 1021, -1000, 180, 8501, 11131, -1000, -1000,
	877, -148, -1000, 382, -1000, 14970, -85, -1000, 8501, 8501,
	21961, -86, -1000, 2361, 2361, -1000, 20491, -1000, 20303, -1000,
	-1000, -1000, 21756, 753, -1000, 20279, -1000, -1000, -1000, -1000,
	8765, 1046, 171, 22278, 20256, -1000, -1000, 8501, -1000, -1000,
	-1000, -1000, -1000, 688, -1000, -1000, -1000, -1000, 8501, 22142,
	170, -1000, 169, -1000, -1000, -1000, 716, -1000, -1000, 21756,
	1249, -1000, -1000, 14970, 14970, 562, -91, 14970, -1000, -1000,
	4793, 786, 9293, 1246, 29, 14970, 1246, 20209, 4527, -99,
	-1000, 14970, -1000, 786, 168, -96, -1000, 1290, -1000, 14970,
	21756, -1000, 588, 987, -1000, 4264, -102, -1000, 2361, 2361,
	-1000, -1000, 54, 808, 1268, -1000, 1949, 8765, 22278, -104,
	-1000, 19975, -1000, 19916, 943, 14970, 14970, 14970, 463, 14970,
	-1000, -1000, 625, -1000, 431, -1000, -1000, -1000, -1000, -1000,
	-1000, 1247, -19, 786, -1000, -1000, 9293, 14970, 164, -111,
	565, -1000, -1000, -1000, -1000, 673, 8501, 1949, -112, -1000,
	-1000, -1000, 831, 755, 52, -126, 136, -1000, 8501, -1000,
	11395, -1000, 1246, 50, -1000, -127, -1000, -1000, -1000, 1389,
	45, 8237, 8237, -101, -1000, -1000, 845, 833, 637, -1000,
	-1000, -1000, -1000, -1000, 943, 14970, 21756, -107, -1000, -1000,
	786, -1000, -1000, -1000, -1000, 9029, 870, 630, 19565, -1000,
	-1000, 1182, -1000, 472, 883, 883, 831, -138, -1000, -1000,
	1317, -1000, -1000, -1000, -1000, -1000, -1000, 1330, -1000, -1000,
	967, -1000, -1000, -1000, 7973, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1644, 1642, 1275, 127, 126, 1641, 1637, 1636, 88,
	125, 121, 115, 1632, 90, 1630, 1610, 1609, 87, 1606,
	1605, 1602, 60, 1601, 1600, 1599, 1598, 1597, 82, 41,
	174, 2135, 148, 1595, 1591, 1590, 11, 101, 75, 1589,
	66, 51, 96, 107, 920, 72, 1587, 1586, 134, 28,
	17, 159, 94, 142, 123, 128, 1584, 1583, 1582, 45,
	1581, 1579, 1574, 1567, 49, 15, 1561, 23, 1559, 16,
	1556, 1554, 99, 1553, 98, 104, 26, 120, 21, 1552,
	57, 10, 74, 1550, 27, 1547, 38, 79, 132, 1542,
	61, 143, 52, 24, 50, 1540, 1532, 1531, 1530, 80,
	1529, 92, 54, 1522, 1521, 77, 1520, 131, 133, 1519,
	1518, 130, 1517, 1515, 1514, 688, 1513, 1512, 469, 1507,
	3, 42, 58, 7, 109, 108, 53, 1505, 13, 1501,
	1539, 735, 316, 1500, 47, 43, 81, 44, 35, 36,
	1499, 1495, 103, 1493, 1490, 1487, 1485, 1484, 78, 1483,
	67, 137, 31, 46, 100, 20, 22, 117, 84, 105,
	140, 106, 1482, 1479, 111, 1478, 251, 1476, 1475, 1155,
	155, 1471, 1470, 1469, 806, 652, 587, 217, 1468, 1465,
	490, 476, 1464, 1463, 122, 1461, 1460, 136, 1458, 135,
	30, 1456, 110, 1455, 89, 1452, 0, 76, 39, 1449,
	129, 65, 1447, 1446, 1445, 1444, 25, 2, 8, 5,
	6, 4, 19, 18, 1443, 1440, 124, 85, 1439, 139,
	1438, 1436, 29, 1424, 1423, 14, 1418, 12, 1415, 9,
	1, 1414, 141, 1411, 93, 1409, 1335, 1405, 138, 1404,
	1403, 1309, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 140, 140, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 232, 232,
	232, 236, 236, 237, 237, 238, 238, 238, 238, 238,
	238, 238, 234, 234, 24, 24, 24, 24, 24, 119,
	115, 115, 117, 117, 117, 117, 43, 114, 114, 114,
	114, 116, 116, 116, 116, 189, 187, 187, 194, 194,
	194, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 195, 195, 195, 195, 195, 195, 58,
	58, 58, 193, 193, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 188, 188,
	233, 233, 235, 235, 8, 8, 59, 59, 60, 60,
	122, 122, 122, 122, 121, 204, 204, 205, 205, 205,
	205, 206, 206, 206, 206, 206, 206, 206, 202, 202,
	203, 200, 200, 201, 201, 201, 201, 239, 239, 120,
	120, 63, 63, 209, 209, 209, 209, 207, 207, 207,
	207, 207, 210, 208, 211, 211, 211, 211, 211, 151,
	151, 151, 27, 7, 7, 104, 104, 67, 67, 155,
	155, 155, 68, 68, 156, 50, 50, 36, 36, 36,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 105,
	105, 106, 106, 19, 23, 26, 26, 26, 26, 26,
	241, 241, 47, 47, 47, 47, 48, 48, 118, 118,
	118, 118, 118, 42, 6, 6, 41, 41, 18, 18,
	18, 18, 18, 53, 53, 111, 111, 111, 113, 113,
	112, 112, 112, 90, 90, 28, 81, 81, 82, 82,
	162, 83, 83, 22, 22, 31, 31, 29, 29, 29,
	29, 29, 29, 30, 30, 32, 32, 32, 32, 32,
	32, 32, 217, 217, 217, 219, 219, 216, 218, 218,
	240, 240, 91, 91, 91, 62, 61, 61, 65, 65,
	64, 66, 66, 154, 88, 88, 88, 88, 107, 108,
	108, 109, 109, 110, 110, 87, 87, 137, 137, 33,
	33, 72, 72, 73, 73, 128, 128, 129, 129, 127,
	127, 127, 157, 157, 157, 157, 158, 158, 158, 158,
	158, 158, 152, 152, 152, 152, 153, 153, 163, 163,
	94, 94, 94, 94, 92, 92, 93, 93, 159, 159,
	159, 159, 89, 89, 160, 160, 160, 123, 123, 166,
	166, 166, 71, 71, 71, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 168, 168,
	168, 168, 170, 170, 170, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 171, 171,
	178, 178, 179, 179, 180, 181, 172, 172, 173, 173,
	174, 175, 182, 182, 182, 182, 184, 184, 176, 176,
	176, 176, 176, 177, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 212, 212, 212, 212, 212,
	212, 212, 214, 214, 215, 215, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 220, 220, 221, 221, 222, 222, 223, 223,
	225, 226, 226, 226, 227, 231, 231, 224, 224, 228,
	228, 228, 229, 229, 230, 230, 230, 230, 230, 142,
	142, 142, 143, 143, 144, 78, 78, 139, 139, 138,
	138, 138, 141, 141, 95, 183, 183, 183, 183, 183,
	183, 183, 96, 96, 103, 97, 97, 98, 98, 98,
	98, 98, 98, 134, 135, 99, 99, 99, 136, 136,
	145, 149, 149, 148, 147, 147, 146, 146, 126, 126,
	126, 126, 125, 124, 84, 84, 242, 242, 150, 150,
	85, 85, 86, 80, 80, 161, 161, 161, 161, 74,
	74, 55, 55, 75, 75, 51, 51, 54, 52, 52,
	52, 52, 69, 69, 70, 70, 49, 49, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 185,
	185, 185, 44, 44, 44, 45, 45, 46, 46, 191,
	191, 191, 192, 192, 192, 192, 190, 190, 190, 190,
	190, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 3, 3, 4, 3, 2, 4, 2, 0,
	2, 0, 2, 0, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	5, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 1, 3, 1, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 4, 7, 3, 0, 6, 6,
	8, 5, 7, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 0, 8, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 3, 1, 1, 3, 2,
	4, 0, 4, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 4, 5, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 2,
	2, 1, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -218, 86,
	94, 183, 93, 79, 109, 197, 204, -29, -31, 212,
	-119, 213, 30, 221, 54, 89, 199, 194, 241, 60,
	-217, -32, -30, 287, 262, 268, 207, -33, 228, 255,
	291, 228, 72, 120, 81, 124, 249, 248, 72, 120,
	228, -12, 287, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -196, -198, 16, 17, 19, 29,
	30, 35, 39, 42, 53, 54, 55, 57, 59, 62,
	63, 70, 71, 72, 73, 75, 79, 81, 85, 86,
	88, 93, 94, 99, 100, 103, 105, 110, 115, 116,
	121, 124, 132, 134, 135, 140, 143, 146, 148, 149,
	150, 151, 152, 154, 155, 157, 159, 156, 162, 164,
	165, 171, 174, 177, 178, 181, 183, 185, 186, 187,
	189, 190, 194, 192, 193, 195, 197, 199, 200, 202,
	204, 205, 206, 209, 210, 212, 213, 215, 218, 220,
	221, 224, 222, 227, 229, 230, 237, 241, 242, 243,
	244, 247, 248, 249, 252, 253, 254, 258, 263, 264,
	265, 266, 24, 31, 32, 33, 34, 36, 37, 40,
	41, 45, 46, 47, 49, 74, 76, 77, 92, 95,
	101, 111, 113, 117, 118, 125, 126, 127, 129, 138,
	161, 163, 172, 176, 180, 182, 188, 201, 208, 216,
	217, 223, 225, 232, 233, 234, 238, 239, 255, 256,
	-44, -44, 183, 18, -236, 18, -237, -238, 60, 86,
	109, 207, 124, 81, 248, -236, -48, 204, -44, -115,
	143, 210, 201, 237, -116, -114, -189, 232, 152, -76,
	-44, 4, 72, 53, 73, 110, 120, 121, 135, 229,
	232, 237, 18, 60, -241, 237, 237, -241, -241, -47,
	237, 235, -48, -240, 228, 228, -104, 72, 246, -30,
	-32, -31, -64, -65, 245, 128, 91, 170, -29, -31,
	-217, -219, 189, -216, -44, -219, -61, -62, 18, 83,
	292, -159, -51, 168, -44, -86, 287, -3, -159, 117,
	-44, -54, 117, -51, 107, 130, 130, -160, -159, -44,
	117, -55, 117, -54, -77, 117, -76, -165, -164, -192,
	4, -196, -198, -197, 255, 51, 61, 108, 123, 131,
	133, 139, 141, 153, 173, 175, 198, 214, 228, -140,
	287, -100, 287, -44, 18, 167, 292, 167, -44, -115,
	47, -115, 287, -117, -42, -43, 132, 185, 235, 272,
	107, 266, -58, 5, 78, -79, 290, 107, -233, 167,
	107, 107, 107, -188, 107, 266, 132, 185, 228, -118,
	-42, -43, -118, 235, -48, -89, -159, -76, 117, 120,
	-44, 117, -64, -65, -88, -107, -108, 142, 166, -91,
	18, 83, -91, -91, 39, 288, 288, 292, -219, -70,
	287, -80, -161, -130, 280, -132, 278, 279, 284, 158,
	267, -142, -51, -133, 9, 287, -145, -214, -31, 92,
	25, -143, -144, 201, -44, 7, 8, 5, 6, -49,
	-168, -177, 240, 96, 160, 43, -212, -213, 4, -196,
	-191, -169, -179, -173, -176, 129, 51, 65, 68, 66,
	69, 211, 250, 44, 24, 95, 176, 180, 225, 238,
	239, 117, 161, 118, 49, 111, 138, 85, 32, 34,
	36, 37, 45, 46, 74, 76, 77, 101, 125, 126,
	127, 163, 188, 216, 223, 233, 234, 256, -197, -180,
	-181, -174, -175, -182, -80, -86, 280, -51, 287, -84,
	-126, -125, -124, 285, 290, -85, -150, -130, 78, -38,
	192, -37, 17, 19, 86, 253, 92, 192, 192, 92,
	293, -160, -53, -51, -53, 212, -44, 26, 92, -40,
	292, 42, 195, 92, -40, 292, 92, 288, 292, -159,
	117, 26, -139, -166, -167, -169, -178, -172, -176, -177,
	35, 41, 40, 230, 208, 217, 33, 125, 126, 127,
	216, 32, 188, 101, 85, 77, 76, 163, 37, 36,
	-180, -181, -174, -175, 74, 233, 234, 129, 34, 46,
	45, 256, 223, -78, -130, -232, -75, 228, 72, -52,
	-44, 280, -238, -232, 26, -78, 292, 292, 140, -57,
	146, 157, 115, -187, 78, -194, -186, -151, 9, 240,
	96, 167, -193, 8, 279, -185, -192, 5, 7, 278,
	-187, 78, 63, -195, 5, 4, -177, -151, 78, 143,
	290, -190, 4, -196, -198, -197, -199, 18, 20, 21,
	22, 23, 25, 26, 27, 28, 38, 43, 44, 48,
	50, 52, 58, 60, 64, 65, 66, 67, 68, 69,
	78, 80, 82, 83, 84, 87, 89, 91, 96, 97,
	98, 104, 106, 107, 109, 112, 114, 119, 120, 122,
	128, 130, 136, 137, 142, 144, 145, 158, 160, 166,
	167, 168, 169, 170, 179, 184, 191, 196, 207, 211,
	219, 226, 228, 231, 235, 236, 240, 245, 246, 250,
	251, 257, 259, 260, 261, 262, -189, -235, 104, -232,
	-189, -189, -189, -189, 140, -189, 292, 292, -48, -40,
	292, 287, 158, -45, 117, -44, -41, 88, 158, -88,
	-108, -107, -109, -130, 18, -130, -132, -30, -30, -30,
	-66, -154, -130, -216, 26, -69, -44, -72, 292, 107,
	10, 289, 50, 29, 278, 279, 280, 281, 102, 282,
	275, 276, 277, 274, 270, 271, 272, 56, 147, 203,
	12, 13, 14, 22, 169, 141, 267, 214, 131, 31,
	119, 26, 4, -130, -130, -130, -130, -130, 175, -31,
	-130, -78, -84, -31, -138, 285, 287, -84, 287, 5,
	5, 287, -146, -130, -220, 263, 104, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 182, -184, 258, -184, -184, -170, 287,
	-170, -171, 287, -170, 264, 268, 287, -72, -51, -126,
	-130, -190, 280, 292, 288, 292, 235, -105, 58, 52,
	-121, 117, 52, -200, -44, 58, -201, 48, 246, 184,
	106, -105, 58, -105, 58, 58, -159, 235, 235, -54,
	-44, -123, 260, -111, -22, 287, 78, 26, -111, -81,
	-82, -162, -83, -51, 287, -44, -44, -54, -55, -76,
	-77, -12, -164, 92, -14, -22, -18, -28, -9, 288,
	292, -71, 25, -101, 287, 265, 150, 75, 116, 149,
	-102, 206, 288, 292, 235, 292, -75, -69, -125, -124,
	107, 237, 288, -43, -42, -56, 187, 218, 193, 209,
	292, 8, 7, 7, 5, -190, -234, -44, -43, -42,
	-159, -59, -60, -122, -121, -202, -203, -200, 120, 246,
	97, 92, 167, 158, 272, 92, -110, 201, 202, 292,
	-36, 27, 82, 287, 292, 288, -123, -161, -73, -157,
	-159, -31, -158, 287, -166, -166, -76, 232, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	141, 214, 31, 119, 235, 160, 158, 240, 96, 247,
	83, 164, -242, 226, 28, -136, -31, 287, -190, -142,
	201, 287, 288, 292, -78, -141, 286, -138, -78, 288,
	288, -78, 257, 18, 83, 280, -101, 7, -149, -148,
	259, -221, 99, 112, 287, 288, 288, -130, -130, -95,
	-183, 4, 265, 150, 75, 116, 149, 206, -96, -130,
	-97, -131, -132, 278, 279, 284, 287, 201, -98, -130,
	-78, -130, 38, 137, 236, -99, -130, 107, -78, -130,
	-130, -130, -78, -78, -78, 287, 7, 7, 232, 232,
	7, -123, 288, 286, 296, -150, -37, -51, -44, -44,
	158, -121, 117, -166, -44, 287, 287, 134, 134, -44,
	-44, 117, -44, 117, -44, -44, -38, 192, -44, -44,
	192, -90, 196, -130, -90, -113, 167, -74, -51, 255,
	-44, 196, -72, 292, 272, -74, -40, -40, -159, -166,
	285, 285, 7, 235, 235, 235, 235, 287, -130, -234,
	-52, -234, -42, 244, 55, 187, -194, -101, 292, 288,
	292, -45, 120, -45, -76, -51, 92, 5, -44, -154,
	-14, -44, -87, 112, 292, 61, -94, 133, 153, 108,
	139, 198, 123, -127, 293, -153, -152, 26, -44, -31,
	-158, -157, 266, -130, 235, -242, 226, -136, -130, 160,
	240, 96, 247, 83, 164, 107, 287, -131, -131, -78,
	287, -78, -130, 286, 286, 292, 288, -65, 292, -64,
	-130, -78, -78, 288, 288, -147, -148, 87, -130, -226,
	174, 287, 287, -130, 26, 292, 288, 107, 288, -103,
	179, 288, 10, 289, 278, 279, 280, 281, 102, 282,
	275, 276, 277, 274, 270, 271, 272, 56, 147, 203,
	12, 13, 14, 131, 119, -131, -131, -131, -78, 287,
	288, -134, -135, 107, 104, 26, -99, -99, -99, 288,
	107, -78, 292, 292, 292, 288, 288, 288, 7, 288,
	292, 288, 266, 266, 288, -87, -130, 235, 235, 92,
	158, -204, -201, -130, -69, 287, 287, -35, 86, 212,
	-106, 92, -40, 92, -40, 235, -105, 58, 235, -80,
	196, 57, 288, 292, -80, -123, -82, -150, 288, 286,
	7, 7, 288, 150, 116, 149, -102, 149, -102, -102,
	7, -44, -122, 287, -45, 287, 287, 287, -44, -41,
	288, -137, 114, 39, -157, 133, 133, -157, -94, 133,
	-92, 173, -92, -92, -153, -190, 294, -44, 287, 288,
	-130, -130, -131, -131, 107, 287, -130, -139, 22, 22,
	288, -78, 288, 292, 288, -138, 288, 257, -65, -65,
	-65, 5, 89, -130, 231, -227, -44, 287, 260, -64,
	288, -166, -166, -130, -134, -130, -166, -166, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, 83, 158, 164,
	-131, 292, -78, 288, -135, -134, -130, -130, -166, 288,
	288, 288, -78, -130, -130, -130, 288, 7, -137, 286,
	-44, -44, -121, 92, -205, 58, -206, 50, 97, 158,
	160, 246, 184, 48, 78, 191, 288, 288, -69, -69,
	158, 78, 158, 78, 71, 242, -44, -44, -51, -44,
	-44, -44, -80, -112, 287, 167, -22, -51, -90, 272,
	286, 286, 288, -67, -155, -44, -215, 287, -212, -213,
	-49, 287, -68, -156, -44, -59, -67, 167, -222, 261,
	-130, -78, -157, -157, -93, 251, 167, 133, -157, -163,
	269, -129, -128, 105, 156, 287, -69, -152, 22, 22,
	-130, -139, 288, -130, -130, 288, -130, 5, -130, 288,
	288, 288, -130, -231, -44, -130, 288, 288, 288, -135,
	107, 83, 164, 287, -130, 288, 288, 292, 288, 288,
	288, -222, -121, -44, -76, -44, 160, 134, 287, -131,
	-51, -120, -239, 59, 224, 288, 288, 160, 160, -130,
	-166, -40, -40, 235, 235, 84, -69, 58, -86, -31,
	287, 288, 292, -50, -84, 50, -50, -130, 287, -67,
	288, 292, 288, 288, -51, -223, -225, -44, -93, 287,
	-130, -157, 164, 292, 295, 272, -69, 288, -130, -130,
	288, 288, -65, -224, 178, 288, -131, 107, 287, -139,
	288, -130, -206, -130, -46, 287, 287, 191, -39, 50,
	-44, -44, 248, 159, 288, -44, -120, -155, -36, -76,
	-36, 288, -78, 288, -156, -120, 287, 292, 26, -69,
	227, -128, -190, 288, 288, -65, 39, -131, -139, 288,
	288, 288, -209, 148, -44, -69, -51, -34, 251, -76,
	212, -123, -50, -65, -120, -67, -225, -227, 288, 232,
	-228, 186, 202, -78, 288, -207, -210, -208, 167, 108,
	177, 215, 288, 288, -63, 287, -130, -81, -36, 288,
	288, 5, 288, -229, -230, 31, 243, 63, -130, -229,
	-208, 167, -210, 167, 248, 81, -209, -69, -123, -120,
	-230, 181, 103, 201, 181, 103, -211, 155, 195, 42,
	212, -211, -207, 288, 22, 16, 160, 78, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 323, -2, 0,
	118, 0, 281, 0, 281, 281, 285, 0, 351, 246,
	348, -2, 359, 0, 0, 0, 357, 337, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 772, 773, 774, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	91, 92, 851, 94, 0, 101, 102, 103, 105, 106,
	107, 108, 109, 110, 111, 0, 274, 865, 287, 114,
	831, 869, 932, 881, 121, 131, 0, 938, -2, 135,
	65, 164, 165, 0, 167, 181, 0, 0, 0, 179,
	0, 0, 176, 0, 292, 280, 292, 277, 278, 279,
	282, 0, 273, 0, 350, 0, 0, 0, 245, -2,
	333, 334, -2, 0, 354, 354, 354, 0, 0, 334,
	0, 342, 855, 345, 755, 343, 0, 0, 356, 355,
	0, 338, 418, 0, 745, 379, 0, 2, 0, 918,
	0, 0, 918, 0, 0, 0, 0, 0, 424, 57,
	918, 48, 918, 741, 48, 918, 63, 0, 79, 81,
	782, 783, 784, 785, 943, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 0, 0,
	0, 89, 0, 93, 95, 0, 0, 0, 286, 115,
	908, 117, 0, 120, 122, 123, 0, 0, 0, 0,
	0, 0, 134, 159, 160, 66, 0, 0, 183, 0,
	0, 0, 0, 172, 0, 173, 0, 175, 0, 275,
	288, 289, 276, 0, 284, 48, 422, 0, 918, 776,
	297, 918, -2, 0, 329, 366, 367, 0, 0, 0,
	352, 353, 0, 0, 0, 325, 326, 0, 344, 0,
	0, 382, 733, 737, 738, 510, 0, 0, 0, 0,
	0, 0, 593, 594, 595, 0, 597, 598, 599, 913,
	0, 603, 604, 932, 745, 758, 759, 760, 761, 0,
	0, 0, 766, 767, 768, 717, 643, 613, -2, -2,
	756, 448, 449, 450, 451, -2, 945, 617, 619, 621,
	622, 623, 624, 0, 897, 914, 928, 929, 937, 941,
	942, 918, 925, 919, 909, 916, 924, 813, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 781, 472,
	473, 478, 479, 481, 382, 380, 419, 420, 0, 746,
	724, 718, 719, 0, 0, 0, 730, 728, 729, 25,
	270, 27, 0, 270, 270, 0, 0, 0, 0, 0,
	0, 428, 0, 303, 0, 0, 425, 0, 0, 59,
	0, 46, 47, 0, 61, 0, 0, 349, 0, 0,
	918, 349, 0, 677, 434, 435, 436, 437, 438, 507,
	441, 442, 443, 444, 445, 446, 447, 455, 456, 457,
	458, 459, 460, 469, 0, 454, 454, 454, 466, 467,
	470, 471, 476, 477, 488, 489, 491, 493, 487, 487,
	487, 484, 485, 0, 675, 0, 98, 0, 808, 743,
	748, 751, 104, 0, 0, 0, 0, 0, 0, 126,
	146, 147, 148, 127, 129, 136, 138, 139, 140, 149,
	150, 151, 152, 239, 0, 241, 162, 163, 769, 0,
	128, 130, 132, 133, 153, 154, 0, 156, 157, 158,
	0, 67, 786, 787, 788, 789, 790, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 166, 168, 0, 180,
	169, 170, 171, 178, 174, 177, 0, 0, 283, 242,
	0, 187, 0, 0, 918, 775, 294, 0, 0, 332,
	364, 365, 368, 371, 372, 369, 510, 339, 340, 341,
	360, 361, 259, 346, 0, 0, 752, 428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 736, 515, 516, 517, 539, 540, 0, -2,
	675, 0, 600, 601, 602, 0, 0, -2, 0, 763,
	507, 0, 0, 716, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 696, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 462, 475, 486, 483, 482, 464, 0,
	463, 461, 0, 465, 0, 0, 0, 428, 0, 725,
	0, 722, 723, 0, 732, 0, 0, 0, 0, 269,
	29, 918, 0, 39, 0, 0, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 314, 0, 314, 305, 0, 0, 0, 301, 382,
	316, 318, 319, 0, 0, 426, 58, 742, 48, 64,
	48, 70, 80, 0, 82, 85, 86, 87, 88, 83,
	0, 429, 431, 439, 0, 494, 495, 496, 497, 498,
	499, 508, 90, 0, 0, 0, 99, 100, 749, 750,
	0, 0, 119, 124, 125, 293, 0, 143, 0, 145,
	0, 240, 771, 770, 507, 68, 182, 112, 290, 291,
	423, 0, 186, 188, 190, 191, 192, 193, 776, 0,
	776, 0, 0, 0, 0, 0, 370, 373, 374, 0,
	363, 257, 258, 349, 0, 754, 376, 734, 381, 383,
	391, 407, 394, 0, 511, 512, 513, 0, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, -2, -2,
	-2, 531, 532, 533, -2, -2, -2, 537, 538, -2,
	0, 0, 727, 0, 0, 545, 0, 548, 550, 552,
	0, 0, 0, 0, 726, 562, 708, 0, 735, 547,
	0, 0, 596, 0, 0, 0, 681, 682, 0, -2,
	605, 359, 0, 0, 0, 0, 764, 0, 715, 711,
	0, 653, 0, 0, 0, 618, 620, 0, 0, 0,
	0, 685, 686, 687, 688, 689, 690, 691, 0, 0,
	0, 0, 564, 0, 0, 0, 0, 932, 0, 675,
	701, 0, 0, 0, 0, 0, 675, 0, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 376, 421, 720, 0, 731, 28, 261, 0, 0,
	0, 31, 918, 196, 0, 0, 0, 0, 0, 272,
	40, 918, 48, 918, 48, 41, 26, 270, 260, 263,
	0, 56, 0, 427, 298, 299, 0, 0, 739, 307,
	304, 0, 428, 0, 0, 0, 60, 62, 0, 678,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 96,
	744, 97, 116, 141, 142, 144, 137, 155, 0, 184,
	0, 0, 776, 0, 0, 0, 0, 296, 297, 362,
	0, 753, 378, 0, 0, 0, 0, 0, 0, 415,
	415, 415, 413, 407, 0, 393, 406, 0, 405, -2,
	394, 0, 0, -2, 0, 0, 0, 563, -2, 546,
	549, 551, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 679, 680, 0, -2, 0, 0, 358,
	359, 359, 359, 611, 0, 0, 712, 0, 0, 612,
	0, 0, 0, 0, 0, 0, 627, 0, 628, 0,
	0, 629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 568, 569, 0, 0,
	630, 699, 700, 0, 0, 0, 0, 0, 0, 635,
	0, 706, 0, 0, 0, 639, 640, 641, 0, 452,
	0, 468, 490, 492, 480, 378, 0, 0, 0, 0,
	0, 194, 211, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 37, 0, 43, 0, 0, 0, 0, 313,
	0, 312, 0, 0, 302, 314, 317, 320, 0, 432,
	0, 0, 440, 500, 501, 502, 503, 504, 505, 506,
	0, 113, 189, 0, 0, 0, 187, 0, 0, 295,
	347, 647, 0, 0, 384, 0, 0, 0, 0, 0,
	410, 414, 411, 412, 409, 389, 0, 403, 0, 396,
	514, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	709, 0, 670, 0, -2, 683, 606, 0, 0, 0,
	0, 765, 710, 714, 0, 651, 652, 656, 0, 0,
	616, 0, 0, 684, 693, 694, 565, 566, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, -2, -2,
	-2, 583, 584, 585, -2, -2, -2, 0, 0, 0,
	695, 0, 0, 673, 697, 698, 703, 704, 0, 632,
	633, 634, 705, 0, 0, 0, 474, 0, 647, 721,
	265, 267, 30, 0, 195, 0, 198, 0, 0, 0,
	202, 203, 0, 0, 0, 0, 213, 220, 0, 0,
	0, 45, 0, 0, 271, 0, 48, 48, 262, 0,
	0, 264, 300, 0, 0, 0, 306, 740, 315, 0,
	433, 430, 509, 0, 247, 256, 256, 0, 614, 615,
	0, 0, 0, 252, 254, 0, 0, 0, 335, 0,
	377, 375, 397, 0, 399, 0, 0, 0, 401, 392,
	0, 0, 387, 0, 386, 0, 0, 395, 0, 0,
	-2, 0, 556, -2, -2, 669, 676, 762, 359, 607,
	609, 610, 713, 658, 655, 0, 642, 625, 626, 692,
	0, 0, 0, 0, 676, 672, 631, 0, 637, 638,
	453, 336, 32, 0, 199, 200, 201, 204, 0, 206,
	778, 214, 0, 217, 218, 215, 0, 34, 35, 44,
	50, 36, 42, 0, 0, 0, 0, 0, 321, 322,
	0, 220, 0, 259, 757, 0, 259, 0, 0, 0,
	210, 0, 185, 220, 0, 646, 648, 0, 398, 0,
	417, 400, 0, 0, 390, 0, 0, 404, -2, -2,
	557, 671, 0, 359, 0, 644, -2, 0, 0, 0,
	674, 0, 197, 0, 226, 0, 0, 0, 52, 0,
	266, 268, 0, 309, 428, 311, 208, 248, 249, 255,
	250, 256, 359, 220, 253, 243, 0, 0, 0, 0,
	0, 388, 385, 402, 608, 661, 0, -2, 0, 591,
	636, 205, 231, 0, 0, 0, 222, 38, 0, 49,
	0, 310, 259, 0, 209, 0, 649, 650, 416, 0,
	0, 0, 0, 657, 592, 207, 227, 228, 0, 223,
	224, 225, 777, 219, 226, 0, 51, 428, 251, 606,
	220, 408, 654, 659, 662, -2, 884, 805, 0, 660,
	229, 0, 230, 0, 0, 0, 231, 0, 308, 244,
	0, 664, 665, 666, 667, 668, 232, 0, 235, 236,
	0, 233, 216, 221, 0, 234, 237, 238, 663,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 289, 3, 276, 3, 282, 277, 3,
	287, 288, 280, 278, 292, 279, 290, 281, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 296, 291,
	270, 272, 271, 3, 293, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 285, 3, 286, 275, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 294, 274, 295, 284,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 273, 57613, 283, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:691
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:697
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:703
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:746
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:792
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:810
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:865
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:868
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:869
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1170
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1239
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1352
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = []string(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1638
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = []string(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = []string(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1688
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = true
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = false
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1777
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1797
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = Ascending
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = Descending
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = true
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = false
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1864
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1907
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.str = ""
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.str = ""
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2001
		{
			unimplementedWithIssue(6637)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2008
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2050
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = []string(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			unimplemented()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2305
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2309
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2312
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2313
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2317
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = true
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = false
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = false
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = true
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.str = astFullJoin
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.str = astLeftJoin
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.str = astRightJoin
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.str = astInnerJoin
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2686
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			unimplementedWithIssue(2115)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			unimplementedWithIssue(2115)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			unimplementedWithIssue(2115)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2781
		{
			unimplementedWithIssue(2115)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2782
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2846
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = nil
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2963
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2990
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3029
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3030
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			unimplemented()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3065
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3074
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3078
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3110
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3497
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3498
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3539
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3584
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3628
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3629
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3632
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3633
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3638
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3641
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3648
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3650
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3654
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3665
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3666
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3680
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3684
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3691
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3692
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4021
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4213
		{
			unimplemented()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = DNull
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.str = ""
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
