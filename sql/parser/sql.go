// Code generated by go yacc.
//line sql.y:22
package parser

import __yyfmt__ "fmt"

//line sql.y:22
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:30
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           int64
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HOUR = 57447
const IF = 57448
const IN = 57449
const INDEX = 57450
const INITIALLY = 57451
const INNER = 57452
const INSERT = 57453
const INT = 57454
const INT64 = 57455
const INTEGER = 57456
const INTERSECT = 57457
const INTERVAL = 57458
const INTO = 57459
const IS = 57460
const ISOLATION = 57461
const JOIN = 57462
const KEY = 57463
const LATERAL = 57464
const LEADING = 57465
const LEAST = 57466
const LEFT = 57467
const LEVEL = 57468
const LIKE = 57469
const LIMIT = 57470
const LOCAL = 57471
const LOCALTIME = 57472
const LOCALTIMESTAMP = 57473
const LSHIFT = 57474
const MATCH = 57475
const MINUTE = 57476
const MONTH = 57477
const NAME = 57478
const NAMES = 57479
const NATURAL = 57480
const NEXT = 57481
const NO = 57482
const NOT = 57483
const NOTHING = 57484
const NULL = 57485
const NULLIF = 57486
const NULLS = 57487
const NUMERIC = 57488
const OF = 57489
const OFF = 57490
const OFFSET = 57491
const ON = 57492
const ONLY = 57493
const OR = 57494
const ORDER = 57495
const ORDINALITY = 57496
const OUT = 57497
const OUTER = 57498
const OVER = 57499
const OVERLAPS = 57500
const OVERLAY = 57501
const PARTIAL = 57502
const PARTITION = 57503
const PLACING = 57504
const POSITION = 57505
const PRECEDING = 57506
const PRECISION = 57507
const PRIMARY = 57508
const RANGE = 57509
const READ = 57510
const REAL = 57511
const RECURSIVE = 57512
const REF = 57513
const REFERENCES = 57514
const RENAME = 57515
const REPEATABLE = 57516
const RESTRICT = 57517
const RETURNING = 57518
const REVOKE = 57519
const RIGHT = 57520
const ROLLBACK = 57521
const ROLLUP = 57522
const ROW = 57523
const ROWS = 57524
const RSHIFT = 57525
const SEARCH = 57526
const SECOND = 57527
const SELECT = 57528
const SERIALIZABLE = 57529
const SESSION = 57530
const SESSION_USER = 57531
const SET = 57532
const SHOW = 57533
const SIMILAR = 57534
const SIMPLE = 57535
const SMALLINT = 57536
const SNAPSHOT = 57537
const SOME = 57538
const SQL = 57539
const STRICT = 57540
const STRING = 57541
const STORING = 57542
const SUBSTRING = 57543
const SYMMETRIC = 57544
const TABLE = 57545
const TABLES = 57546
const TEXT = 57547
const THEN = 57548
const TIME = 57549
const TIMESTAMP = 57550
const TO = 57551
const TRAILING = 57552
const TRANSACTION = 57553
const TREAT = 57554
const TRIM = 57555
const TRUE = 57556
const TRUNCATE = 57557
const TYPE = 57558
const UNBOUNDED = 57559
const UNCOMMITTED = 57560
const UNION = 57561
const UNIQUE = 57562
const UNKNOWN = 57563
const UPDATE = 57564
const USER = 57565
const USING = 57566
const VALID = 57567
const VALIDATE = 57568
const VALUE = 57569
const VALUES = 57570
const VARCHAR = 57571
const VARIADIC = 57572
const VARYING = 57573
const WHEN = 57574
const WHERE = 57575
const WINDOW = 57576
const WITH = 57577
const WITHIN = 57578
const WITHOUT = 57579
const YEAR = 57580
const ZONE = 57581
const NOT_LA = 57582
const NULLS_LA = 57583
const WITH_LA = 57584
const POSTFIXOP = 57585
const UMINUS = 57586

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HOUR",
	"IF",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlMaxDepth = 200

//line sql.y:3645

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	263, 19,
	-2, 290,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 261,
	150, 261,
	261, 261,
	263, 261,
	-2, 271,
	-1, 38,
	1, 264,
	150, 264,
	261, 264,
	263, 264,
	-2, 270,
	-1, 47,
	1, 19,
	263, 19,
	-2, 290,
	-1, 83,
	1, 128,
	263, 128,
	-2, 761,
	-1, 233,
	128, 300,
	149, 300,
	-2, 267,
	-1, 236,
	128, 299,
	149, 299,
	-2, 265,
	-1, 338,
	128, 299,
	149, 299,
	-2, 268,
	-1, 396,
	260, 710,
	-2, 705,
	-1, 397,
	260, 711,
	-2, 706,
	-1, 403,
	6, 418,
	260, 418,
	-2, 832,
	-1, 423,
	6, 388,
	-2, 813,
	-1, 424,
	6, 415,
	260, 415,
	-2, 814,
	-1, 425,
	6, 396,
	-2, 815,
	-1, 426,
	6, 395,
	-2, 816,
	-1, 427,
	6, 415,
	260, 415,
	-2, 818,
	-1, 428,
	6, 415,
	260, 415,
	-2, 819,
	-1, 429,
	6, 416,
	-2, 821,
	-1, 430,
	6, 383,
	-2, 822,
	-1, 431,
	6, 383,
	-2, 823,
	-1, 432,
	6, 398,
	-2, 826,
	-1, 433,
	6, 384,
	-2, 829,
	-1, 434,
	6, 385,
	-2, 830,
	-1, 435,
	6, 386,
	-2, 831,
	-1, 436,
	6, 383,
	-2, 835,
	-1, 437,
	6, 389,
	-2, 840,
	-1, 438,
	6, 387,
	-2, 842,
	-1, 439,
	6, 417,
	-2, 846,
	-1, 440,
	6, 413,
	260, 413,
	-2, 850,
	-1, 684,
	85, 271,
	115, 271,
	128, 271,
	149, 271,
	153, 271,
	219, 271,
	-2, 523,
	-1, 692,
	260, 690,
	-2, 684,
	-1, 874,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 451,
	-1, 875,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 452,
	-1, 876,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 453,
	-1, 880,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 457,
	-1, 881,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 458,
	-1, 882,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 459,
	-1, 885,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 464,
	-1, 920,
	158, 589,
	-2, 592,
	-1, 1063,
	85, 271,
	115, 271,
	128, 271,
	149, 271,
	153, 271,
	219, 271,
	-2, 341,
	-1, 1071,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 465,
	-1, 1076,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 466,
	-1, 1097,
	158, 588,
	-2, 591,
	-1, 1233,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 467,
	-1, 1238,
	118, 0,
	-2, 477,
	-1, 1248,
	158, 590,
	-2, 593,
	-1, 1288,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 504,
	-1, 1289,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 505,
	-1, 1290,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 506,
	-1, 1294,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 510,
	-1, 1295,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 511,
	-1, 1296,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 512,
	-1, 1387,
	118, 0,
	-2, 478,
	-1, 1391,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 481,
	-1, 1392,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 483,
	-1, 1470,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 482,
	-1, 1471,
	30, 0,
	107, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 484,
	-1, 1479,
	118, 0,
	-2, 513,
	-1, 1515,
	118, 0,
	-2, 514,
	-1, 1559,
	30, 0,
	127, 0,
	192, 0,
	240, 0,
	-2, 812,
}

const sqlNprod = 942
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 17574

var sqlAct = [...]int{

	917, 1541, 1558, 1579, 759, 1519, 1542, 1557, 1427, 1543,
	815, 1486, 766, 1460, 237, 395, 1358, 394, 1324, 387,
	1268, 1359, 1373, 453, 639, 1239, 1452, 823, 687, 264,
	479, 1367, 933, 1059, 799, 1100, 1213, 1154, 802, 1240,
	689, 1155, 1222, 1051, 801, 619, 767, 736, 458, 745,
	242, 28, 1047, 937, 901, 826, 970, 13, 898, 714,
	927, 1062, 244, 37, 635, 18, 497, 88, 796, 370,
	10, 641, 489, 461, 6, 236, 28, 441, 463, 368,
	524, 359, 84, 59, 57, 508, 285, 247, 37, 281,
	341, 61, 342, 804, 38, 340, 60, 718, 28, 81,
	62, 488, 39, 824, 499, 495, 66, 1454, 241, 274,
	37, 930, 456, 481, 642, 261, 454, 760, 261, 455,
	270, 642, 764, 261, 481, 280, 289, 456, 278, 241,
	352, 454, 234, 47, 455, 1555, 290, 1095, 1451, 283,
	233, 1093, 1096, 1549, 286, 931, 819, 1548, 1019, 260,
	819, 1540, 267, 1508, 1390, 1535, 389, 275, 819, 1301,
	1517, 1511, 19, 1390, 819, 1499, 1496, 1472, 819, 1451,
	1390, 1247, 32, 1467, 932, 929, 819, 1450, 1447, 1432,
	1451, 819, 819, 1431, 1414, 1394, 819, 1093, 1093, 1389,
	43, 1334, 1390, 33, 819, 1243, 1031, 1203, 1093, 36,
	480, 1199, 1170, 1168, 480, 1171, 1093, 45, 1167, 1166,
	1097, 1093, 1093, 1093, 820, 1094, 734, 819, 733, 1099,
	1093, 732, 1049, 1033, 24, 934, 644, 819, 486, 480,
	25, 487, 46, 484, 43, 43, 913, 814, 789, 41,
	1093, 643, 26, 353, 646, 306, 42, 259, 339, 482,
	523, 45, 45, 43, 320, 1556, 360, 360, 1554, 1512,
	482, 1449, 645, 1417, 40, 973, 459, 1415, 659, 338,
	45, 1407, 443, 1406, 1401, 1400, 46, 46, 928, 1399,
	1398, 1019, 1384, 41, 41, 1351, 1314, 1311, 643, 448,
	42, 42, 452, 1310, 1309, 46, 1251, 261, 1228, 1212,
	1069, 1035, 1204, 1173, 1172, 1162, 1153, 1126, 763, 58,
	910, 1123, 333, 442, 1121, 1110, 1104, 1032, 983, 456,
	27, 352, 34, 454, 793, 695, 455, 40, 1487, 43,
	351, 332, 450, 30, 31, 1270, 1507, 1488, 480, 234,
	1481, 1463, 261, 474, 627, 629, 45, 233, 660, 616,
	1457, 636, 1127, 1446, 1424, 1412, 1378, 1356, 35, 1237,
	1227, 1210, 615, 1209, 677, 678, 679, 680, 681, 644,
	1382, 46, 1207, 1185, 685, 280, 275, 280, 41, 1184,
	289, 289, 472, 1152, 1118, 42, 1127, 646, 527, 911,
	290, 290, 1127, 280, 698, 1350, 1117, 1109, 528, 661,
	1090, 1089, 1084, 40, 903, 645, 719, 722, 997, 493,
	996, 692, 978, 492, 942, 818, 724, 712, 711, 512,
	519, 608, 710, 709, 612, 611, 613, 708, 1140, 1127,
	707, 706, 705, 625, 624, 623, 704, 703, 702, 693,
	234, 637, 691, 234, 234, 40, 617, 265, 631, 356,
	397, 632, 633, 997, 1469, 1468, 1127, 731, 690, 1230,
	1229, 358, 449, 655, 652, 653, 654, 647, 648, 649,
	650, 651, 518, 1353, 1141, 245, 727, 1020, 1070, 327,
	315, 87, 700, 1368, 760, 1271, 938, 716, 717, 715,
	1016, 660, 87, 87, 644, 1113, 87, 1525, 1568, 87,
	87, 87, 1026, 739, 87, 87, 87, 87, 1141, 288,
	345, 1342, 646, 750, 752, 224, 782, 310, 254, 725,
	1495, 726, 527, 527, 28, 1142, 1440, 87, 87, 720,
	645, 762, 528, 528, 723, 728, 730, 28, 261, 1439,
	1197, 758, 661, 1569, 59, 770, 1177, 51, 1176, 37,
	774, 1141, 61, 280, 1127, 289, 775, 60, 742, 1142,
	280, 62, 1108, 781, 1107, 290, 1106, 776, 283, 314,
	1105, 778, 755, 286, 779, 777, 1072, 890, 794, 696,
	644, 780, 52, 738, 738, 1527, 757, 864, 756, 1196,
	737, 527, 1135, 1128, 1129, 1130, 1131, 1132, 646, 228,
	1494, 528, 1142, 900, 795, 231, 655, 652, 653, 654,
	647, 648, 649, 650, 651, 900, 645, 475, 934, 1576,
	1429, 1381, 1011, 1136, 1133, 1134, 1135, 1128, 1129, 1130,
	1131, 1132, 470, 1128, 1129, 1130, 1131, 1132, 469, 686,
	402, 812, 813, 481, 360, 938, 821, 54, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 1025,
	1128, 1129, 1130, 1131, 1132, 1489, 1141, 445, 87, 1187,
	87, 312, 87, 464, 829, 465, 261, 55, 1027, 1568,
	464, 713, 465, 53, 746, 1477, 682, 87, 1116, 1130,
	1131, 1132, 660, 943, 464, 954, 465, 964, 966, 971,
	974, 727, 261, 87, 362, 1223, 727, 313, 447, 240,
	798, 241, 354, 87, 87, 828, 87, 1142, 863, 49,
	982, 918, 1544, 459, 1260, 647, 648, 649, 650, 651,
	229, 330, 527, 1567, 1194, 735, 749, 466, 644, 239,
	348, 349, 528, 661, 466, 908, 87, 232, 87, 1565,
	1127, 1012, 909, 288, 288, 1430, 646, 1366, 466, 50,
	1545, 526, 87, 946, 87, 87, 1582, 87, 1074, 482,
	992, 986, 56, 994, 645, 934, 87, 241, 1188, 956,
	899, 1136, 1133, 1134, 1135, 1128, 1129, 1130, 1131, 1132,
	344, 835, 1537, 1575, 87, 988, 1022, 87, 1014, 907,
	644, 888, 808, 987, 905, 636, 748, 1538, 652, 653,
	654, 647, 648, 649, 650, 651, 343, 323, 646, 1007,
	307, 785, 1546, 280, 305, 1434, 1015, 786, 1018, 1008,
	949, 280, 1410, 1433, 1021, 1422, 645, 344, 1179, 1023,
	788, 1034, 1024, 238, 1029, 1065, 1028, 289, 787, 444,
	462, 1589, 991, 809, 48, 1547, 622, 290, 618, 28,
	747, 1256, 1257, 1574, 950, 399, 1042, 1580, 1037, 1040,
	1520, 37, 1141, 1064, 1044, 343, 1058, 1071, 889, 1043,
	1036, 1076, 467, 1045, 614, 1423, 1068, 261, 1297, 467,
	835, 1258, 87, 951, 948, 526, 526, 999, 886, 494,
	998, 1411, 1581, 467, 1092, 87, 930, 854, 1338, 87,
	717, 716, 87, 1376, 1101, 1218, 87, 1583, 87, 87,
	1588, 87, 660, 1142, 87, 87, 87, 1098, 288, 1114,
	311, 87, 87, 1119, 1075, 1217, 720, 1073, 723, 328,
	931, 273, 934, 1341, 952, 239, 914, 919, 853, 922,
	1340, 1298, 685, 335, 1214, 1050, 1048, 1299, 971, 971,
	971, 941, 965, 887, 526, 1480, 975, 976, 977, 932,
	929, 64, 1409, 661, 1156, 1337, 1175, 906, 1236, 1122,
	1112, 649, 650, 651, 1083, 783, 642, 1182, 1133, 1134,
	1135, 1128, 1129, 1130, 1131, 1132, 1054, 947, 1330, 326,
	324, 321, 272, 1157, 701, 610, 854, 67, 1057, 67,
	940, 459, 1183, 1200, 1159, 1160, 1161, 1339, 1052, 1321,
	934, 1192, 1190, 1055, 1191, 1174, 1193, 72, 1331, 72,
	1178, 1038, 68, 810, 68, 1181, 1053, 1441, 807, 1265,
	654, 647, 648, 649, 650, 651, 1195, 853, 1375, 630,
	69, 87, 69, 485, 483, 478, 1201, 87, 87, 1202,
	471, 1232, 71, 1233, 71, 468, 816, 1216, 1206, 1054,
	1219, 1208, 346, 928, 1238, 257, 1056, 1569, 317, 770,
	1244, 1057, 514, 87, 1249, 75, 87, 1220, 1224, 1225,
	1249, 1221, 738, 738, 1198, 1326, 1055, 1327, 753, 751,
	1443, 517, 505, 516, 1266, 510, 1253, 1254, 1255, 261,
	754, 1454, 261, 1275, 1491, 526, 1277, 817, 3, 644,
	1329, 1514, 1374, 1215, 644, 350, 1332, 1250, 1509, 1259,
	1261, 1262, 347, 63, 223, 258, 765, 70, 638, 70,
	1067, 1586, 646, 1587, 1272, 1127, 318, 1306, 1307, 1056,
	1274, 644, 1276, 1383, 1081, 645, 1313, 1278, 1315, 1087,
	645, 74, 308, 309, 1263, 1079, 266, 1091, 225, 226,
	1231, 520, 1169, 73, 1328, 73, 87, 87, 87, 1030,
	1102, 1103, 87, 1305, 790, 87, 1304, 791, 1308, 981,
	980, 87, 87, 87, 87, 87, 979, 87, 87, 1335,
	1336, 1316, 935, 792, 87, 1369, 87, 1320, 1396, 1354,
	1264, 694, 87, 522, 227, 1428, 1364, 1151, 1363, 1077,
	1365, 87, 1355, 1082, 87, 65, 521, 1387, 1164, 609,
	288, 835, 1391, 1392, 1357, 1371, 1372, 322, 1395, 1377,
	28, 1403, 1379, 1397, 896, 382, 87, 1352, 87, 87,
	1536, 87, 1380, 1388, 1345, 894, 1115, 1476, 1402, 1459,
	87, 939, 1405, 699, 23, 87, 87, 835, 87, 1361,
	375, 1322, 1180, 803, 835, 834, 85, 261, 261, 529,
	515, 261, 504, 398, 325, 498, 507, 248, 248, 945,
	1078, 263, 1413, 446, 263, 269, 263, 1080, 400, 263,
	276, 263, 85, 832, 401, 835, 833, 892, 1408, 891,
	721, 388, 856, 897, 830, 284, 768, 904, 936, 1111,
	697, 374, 85, 85, 380, 379, 915, 371, 79, 80,
	1013, 1435, 1349, 761, 811, 626, 1189, 230, 1418, 1124,
	963, 955, 953, 331, 457, 769, 1245, 854, 511, 506,
	1419, 357, 319, 1456, 944, 822, 1364, 1442, 1363, 1050,
	1365, 1066, 355, 634, 1437, 1438, 1464, 256, 255, 800,
	316, 1448, 1436, 1444, 834, 784, 1470, 1471, 1455, 1453,
	893, 676, 473, 854, 835, 1462, 673, 895, 853, 329,
	854, 1490, 1426, 1466, 1465, 1524, 1186, 44, 1421, 17,
	1054, 16, 1475, 15, 14, 12, 11, 1041, 1302, 9,
	957, 856, 1057, 8, 7, 1485, 22, 21, 20, 1312,
	1473, 854, 1052, 5, 853, 4, 1458, 1055, 1482, 1484,
	2, 853, 1, 0, 0, 0, 261, 459, 87, 0,
	1053, 0, 0, 0, 0, 0, 1498, 0, 0, 1500,
	0, 0, 0, 1502, 0, 0, 1504, 1364, 0, 1363,
	87, 1365, 853, 1501, 0, 0, 0, 727, 0, 0,
	0, 1370, 87, 263, 87, 85, 87, 336, 1510, 87,
	1056, 1513, 0, 0, 0, 0, 0, 0, 0, 835,
	87, 1528, 248, 87, 855, 0, 0, 1516, 1529, 0,
	854, 87, 1521, 1522, 87, 0, 0, 0, 263, 0,
	831, 1531, 1533, 1364, 1532, 1363, 1551, 1365, 263, 263,
	1534, 476, 1530, 0, 0, 1550, 0, 1503, 1562, 1562,
	1552, 1553, 0, 0, 0, 0, 1563, 835, 0, 0,
	1566, 853, 1564, 0, 0, 0, 1570, 1571, 0, 1523,
	1562, 263, 1573, 263, 1572, 0, 0, 87, 1330, 835,
	1325, 0, 1585, 1584, 1526, 0, 0, 85, 1323, 263,
	85, 0, 85, 0, 0, 0, 0, 1562, 0, 1590,
	644, 621, 0, 0, 0, 0, 0, 770, 1331, 0,
	0, 0, 0, 855, 0, 0, 213, 0, 646, 248,
	0, 0, 640, 957, 957, 854, 0, 0, 0, 831,
	222, 0, 0, 0, 0, 0, 645, 87, 87, 87,
	0, 0, 0, 0, 0, 87, 87, 0, 835, 0,
	0, 87, 0, 87, 0, 87, 87, 87, 87, 0,
	0, 215, 0, 0, 0, 0, 853, 0, 87, 0,
	87, 0, 0, 854, 0, 1326, 0, 1327, 87, 87,
	214, 216, 87, 957, 957, 957, 0, 0, 87, 87,
	0, 0, 0, 0, 0, 854, 0, 0, 1085, 1086,
	1329, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 217, 0, 853, 0, 0, 263, 0, 0,
	218, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	743, 87, 0, 1506, 263, 834, 853, 263, 0, 0,
	0, 263, 0, 772, 773, 0, 263, 0, 0, 263,
	85, 85, 0, 0, 1328, 0, 263, 640, 1148, 1149,
	1150, 0, 0, 0, 854, 0, 376, 29, 0, 0,
	0, 834, 856, 661, 0, 0, 0, 0, 834, 0,
	0, 0, 87, 0, 87, 0, 87, 0, 0, 0,
	1539, 0, 29, 87, 0, 0, 0, 0, 957, 957,
	0, 0, 0, 0, 235, 853, 0, 243, 856, 834,
	0, 0, 0, 0, 29, 856, 219, 87, 0, 220,
	0, 0, 0, 221, 0, 243, 0, 87, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 87,
	0, 647, 648, 649, 650, 651, 856, 0, 0, 0,
	0, 0, 0, 957, 957, 957, 957, 957, 957, 957,
	957, 957, 957, 957, 957, 957, 957, 957, 957, 957,
	957, 0, 957, 1234, 1235, 0, 797, 0, 0, 0,
	0, 0, 263, 743, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 87, 0, 0, 87, 0, 0, 0, 263, 0,
	0, 85, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 856, 0, 0, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
	1291, 1292, 1293, 1294, 1295, 1296, 0, 1300, 87, 87,
	87, 0, 87, 1127, 855, 1143, 1144, 1145, 0, 0,
	0, 0, 0, 0, 0, 1386, 0, 0, 0, 87,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	855, 0, 0, 834, 0, 1140, 0, 855, 0, 0,
	0, 263, 989, 990, 0, 0, 831, 743, 0, 0,
	995, 235, 0, 831, 0, 0, 1000, 1001, 1003, 1005,
	1006, 0, 1009, 1010, 0, 0, 0, 0, 855, 263,
	856, 1017, 0, 0, 0, 0, 0, 263, 0, 0,
	0, 834, 0, 0, 831, 0, 797, 0, 0, 797,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 1146, 0, 834, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 85, 263, 1141, 1039, 0, 856, 0,
	0, 0, 0, 0, 0, 1046, 0, 0, 0, 0,
	1061, 1061, 0, 263, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	0, 0, 235, 0, 0, 235, 235, 0, 844, 859,
	836, 852, 851, 831, 0, 837, 1142, 0, 0, 861,
	860, 1425, 834, 0, 957, 644, 683, 662, 663, 664,
	684, 0, 0, 0, 688, 0, 0, 665, 0, 0,
	0, 0, 0, 646, 0, 671, 0, 857, 0, 849,
	848, 0, 0, 0, 0, 0, 0, 847, 0, 856,
	0, 645, 0, 0, 0, 0, 0, 659, 0, 0,
	846, 0, 0, 0, 0, 0, 1137, 1138, 1139, 0,
	1136, 1133, 1134, 1135, 1128, 1129, 1130, 1131, 1132, 840,
	841, 842, 0, 522, 0, 957, 0, 0, 0, 1479,
	0, 0, 855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 672, 850, 0, 0, 0, 0, 0, 0,
	29, 0, 0, 670, 0, 0, 0, 0, 0, 0,
	0, 0, 667, 29, 0, 0, 845, 660, 0, 0,
	855, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 831, 666, 0, 0,
	1515, 843, 855, 0, 0, 263, 839, 0, 0, 0,
	0, 0, 838, 0, 0, 858, 0, 1205, 831, 743,
	0, 621, 0, 0, 1211, 0, 0, 644, 661, 662,
	663, 664, 0, 0, 0, 263, 862, 669, 263, 665,
	0, 0, 0, 0, 0, 646, 1226, 671, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 645, 0, 0, 0, 0, 0, 659,
	0, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 831, 656, 657,
	658, 0, 655, 652, 653, 654, 647, 648, 649, 650,
	651, 0, 1269, 0, 984, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 825,
	644, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 646, 660,
	671, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 1318, 1319, 743, 0, 645, 0, 0, 666,
	640, 640, 659, 0, 0, 0, 1343, 0, 1344, 0,
	263, 1346, 1347, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 640, 0, 743, 1360, 0, 0, 0,
	661, 0, 0, 263, 263, 0, 0, 263, 0, 669,
	0, 0, 0, 640, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 0, 0,
	243, 0, 660, 0, 0, 0, 1404, 668, 0, 0,
	656, 657, 658, 0, 655, 652, 653, 654, 647, 648,
	649, 650, 651, 0, 0, 0, 0, 0, 0, 0,
	0, 1165, 0, 0, 0, 0, 644, 0, 662, 663,
	664, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 661, 646, 29, 671, 743, 0, 1420,
	0, 85, 669, 644, 1063, 662, 663, 664, 263, 0,
	0, 0, 645, 0, 0, 665, 0, 0, 659, 0,
	0, 646, 0, 671, 0, 0, 1360, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 645,
	0, 0, 263, 0, 1461, 659, 0, 0, 0, 0,
	668, 0, 263, 0, 640, 0, 0, 655, 652, 653,
	654, 647, 648, 649, 650, 651, 902, 0, 0, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
	684, 1088, 0, 0, 670, 0, 0, 1578, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 660, 0,
	672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 1492, 1493, 0, 666, 1497,
	667, 0, 0, 0, 0, 660, 0, 1360, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 684, 640,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 0, 0, 1577, 669, 0,
	0, 0, 0, 640, 640, 263, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 661, 0, 0, 0,
	0, 0, 0, 1360, 1461, 669, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 668, 0, 0, 656,
	657, 658, 0, 655, 652, 653, 654, 647, 648, 649,
	650, 651, 0, 0, 0, 0, 825, 1518, 0, 825,
	0, 0, 0, 668, 0, 0, 656, 657, 658, 0,
	655, 652, 653, 654, 647, 648, 649, 650, 651, 396,
	384, 385, 386, 383, 372, 0, 0, 0, 0, 0,
	0, 89, 90, 924, 91, 0, 684, 0, 0, 378,
	0, 0, 0, 92, 93, 175, 423, 424, 94, 425,
	426, 0, 95, 180, 96, 393, 411, 427, 428, 0,
	419, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 293, 102, 103, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 429, 108, 430, 431, 0,
	0, 109, 0, 925, 0, 422, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 432, 115,
	0, 0, 0, 294, 0, 116, 420, 0, 191, 0,
	117, 118, 0, 0, 0, 295, 119, 433, 434, 435,
	0, 403, 0, 296, 120, 297, 121, 0, 0, 421,
	298, 122, 299, 0, 249, 0, 29, 0, 123, 124,
	125, 126, 250, 300, 127, 128, 366, 129, 392, 418,
	130, 436, 131, 132, 825, 825, 0, 0, 825, 133,
	199, 301, 134, 302, 413, 135, 136, 0, 414, 137,
	202, 0, 138, 139, 437, 140, 141, 0, 142, 143,
	144, 0, 145, 303, 146, 147, 381, 148, 0, 149,
	150, 0, 151, 251, 409, 152, 153, 304, 154, 438,
	155, 0, 156, 158, 206, 157, 415, 0, 0, 159,
	160, 0, 253, 439, 0, 0, 252, 416, 417, 390,
	161, 162, 163, 164, 0, 369, 165, 166, 410, 0,
	167, 168, 169, 211, 440, 923, 170, 0, 0, 0,
	0, 171, 172, 173, 174, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 364, 926, 0,
	0, 0, 365, 0, 0, 373, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 89, 90, 530, 91, 531,
	532, 533, 534, 535, 536, 537, 538, 92, 93, 175,
	176, 177, 94, 178, 179, 539, 95, 180, 96, 540,
	541, 181, 182, 542, 183, 543, 292, 544, 97, 98,
	99, 0, 100, 545, 101, 546, 293, 102, 103, 547,
	548, 549, 550, 551, 552, 104, 105, 106, 107, 184,
	108, 185, 186, 553, 554, 109, 555, 556, 557, 110,
	111, 558, 559, 684, 560, 187, 112, 188, 561, 562,
	113, 114, 189, 115, 563, 564, 565, 294, 566, 116,
	190, 567, 191, 568, 117, 118, 569, 570, 571, 295,
	119, 192, 193, 194, 572, 195, 573, 296, 120, 297,
	121, 574, 575, 196, 298, 122, 299, 576, 249, 577,
	578, 0, 123, 124, 125, 126, 250, 300, 127, 128,
	579, 129, 580, 197, 130, 198, 131, 132, 581, 582,
	583, 584, 585, 133, 199, 301, 134, 302, 200, 135,
	136, 586, 201, 137, 202, 587, 138, 139, 203, 140,
	141, 588, 142, 143, 144, 589, 145, 303, 146, 147,
	204, 148, 0, 149, 150, 590, 151, 251, 591, 152,
	153, 304, 154, 205, 155, 592, 156, 158, 206, 157,
	207, 593, 594, 159, 160, 595, 253, 208, 596, 597,
	252, 209, 210, 598, 161, 162, 163, 164, 599, 600,
	165, 166, 601, 602, 167, 168, 169, 211, 212, 603,
	170, 604, 605, 606, 607, 171, 172, 173, 174, 0,
	0, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 89, 90, 530, 91, 531, 532, 533,
	534, 535, 536, 537, 538, 92, 93, 175, 176, 177,
	94, 178, 179, 539, 95, 180, 96, 540, 541, 181,
	182, 542, 183, 543, 292, 544, 97, 98, 99, 0,
	100, 545, 101, 546, 293, 102, 103, 547, 548, 549,
	550, 551, 552, 104, 105, 106, 107, 184, 108, 185,
	186, 553, 554, 109, 555, 556, 557, 110, 111, 558,
	559, 0, 560, 187, 112, 188, 561, 562, 113, 114,
	189, 115, 563, 564, 565, 294, 566, 116, 190, 567,
	191, 568, 117, 118, 569, 570, 571, 295, 119, 192,
	193, 194, 572, 195, 573, 296, 120, 297, 121, 574,
	575, 196, 298, 122, 299, 576, 249, 577, 578, 0,
	123, 124, 125, 126, 250, 300, 127, 128, 579, 129,
	580, 197, 130, 198, 131, 132, 581, 582, 583, 584,
	585, 133, 199, 301, 134, 302, 200, 135, 136, 586,
	201, 137, 202, 587, 138, 139, 203, 140, 141, 588,
	142, 143, 144, 589, 145, 303, 146, 147, 204, 148,
	0, 149, 150, 590, 151, 251, 591, 152, 153, 304,
	154, 205, 155, 592, 156, 158, 206, 157, 207, 593,
	594, 159, 160, 595, 253, 208, 596, 597, 252, 209,
	210, 598, 161, 162, 163, 164, 599, 600, 165, 166,
	601, 602, 167, 168, 169, 211, 212, 603, 170, 604,
	605, 606, 607, 171, 172, 173, 174, 396, 384, 385,
	386, 383, 372, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 378, 0, 0,
	0, 92, 93, 175, 423, 424, 94, 425, 426, 0,
	95, 180, 96, 393, 411, 427, 428, 0, 419, 0,
	404, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	293, 102, 103, 0, 405, 407, 0, 406, 408, 104,
	105, 106, 107, 429, 108, 430, 431, 460, 0, 109,
	0, 0, 0, 422, 111, 0, 0, 0, 0, 377,
	112, 412, 391, 0, 113, 114, 432, 115, 0, 0,
	0, 294, 0, 116, 420, 0, 191, 0, 117, 118,
	0, 0, 0, 295, 119, 433, 434, 435, 0, 403,
	0, 296, 120, 297, 121, 0, 0, 421, 298, 122,
	299, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 300, 127, 128, 366, 129, 392, 418, 130, 436,
	131, 132, 0, 0, 0, 0, 0, 133, 199, 301,
	134, 302, 413, 135, 136, 0, 414, 137, 202, 0,
	138, 139, 437, 140, 141, 0, 142, 143, 144, 0,
	145, 303, 146, 147, 381, 148, 0, 149, 150, 43,
	151, 251, 409, 152, 153, 304, 154, 438, 155, 0,
	156, 158, 206, 157, 415, 0, 45, 159, 160, 0,
	253, 439, 0, 0, 252, 416, 417, 390, 161, 162,
	163, 164, 0, 369, 165, 166, 410, 0, 167, 168,
	169, 291, 440, 0, 170, 0, 0, 0, 41, 171,
	172, 173, 174, 367, 0, 42, 396, 384, 385, 386,
	383, 372, 0, 0, 363, 364, 0, 0, 89, 90,
	365, 91, 0, 373, 0, 0, 378, 0, 0, 0,
	92, 93, 175, 423, 424, 94, 425, 426, 0, 95,
	180, 96, 393, 411, 427, 428, 0, 419, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 293,
	102, 103, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 429, 108, 430, 431, 0, 0, 109, 0,
	0, 0, 422, 111, 0, 0, 0, 0, 377, 112,
	412, 391, 0, 113, 114, 432, 115, 0, 0, 0,
	294, 0, 116, 420, 0, 191, 0, 117, 118, 0,
	0, 0, 295, 119, 433, 434, 435, 0, 403, 0,
	296, 120, 297, 121, 0, 0, 421, 298, 122, 299,
	0, 249, 0, 0, 0, 123, 124, 125, 126, 250,
	300, 127, 128, 366, 129, 392, 418, 130, 436, 131,
	132, 0, 0, 0, 0, 0, 133, 199, 301, 134,
	302, 413, 135, 136, 0, 414, 137, 202, 0, 138,
	139, 437, 140, 141, 0, 142, 143, 144, 0, 145,
	303, 146, 147, 381, 148, 0, 149, 150, 43, 151,
	251, 409, 152, 153, 304, 154, 438, 155, 0, 156,
	158, 206, 157, 415, 0, 45, 159, 160, 0, 253,
	439, 0, 0, 252, 416, 417, 390, 161, 162, 163,
	164, 0, 369, 165, 166, 410, 0, 167, 168, 169,
	291, 440, 0, 170, 0, 0, 0, 41, 171, 172,
	173, 174, 367, 0, 42, 396, 384, 385, 386, 383,
	372, 0, 0, 363, 364, 0, 0, 89, 90, 365,
	91, 0, 373, 0, 0, 378, 0, 0, 0, 92,
	93, 175, 423, 424, 94, 425, 426, 967, 95, 180,
	96, 393, 411, 427, 428, 0, 419, 0, 404, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 293, 102,
	103, 0, 405, 407, 0, 406, 408, 104, 105, 106,
	107, 429, 108, 430, 431, 0, 0, 109, 0, 0,
	0, 422, 111, 0, 0, 0, 0, 377, 112, 412,
	391, 0, 113, 114, 432, 115, 0, 0, 972, 294,
	0, 116, 420, 0, 191, 0, 117, 118, 0, 0,
	0, 295, 119, 433, 434, 435, 0, 403, 0, 296,
	120, 297, 121, 0, 968, 421, 298, 122, 299, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 300,
	127, 128, 366, 129, 392, 418, 130, 436, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 301, 134, 302,
	413, 135, 136, 0, 414, 137, 202, 0, 138, 139,
	437, 140, 141, 0, 142, 143, 144, 0, 145, 303,
	146, 147, 381, 148, 0, 149, 150, 0, 151, 251,
	409, 152, 153, 304, 154, 438, 155, 0, 156, 158,
	206, 157, 415, 0, 0, 159, 160, 0, 253, 439,
	0, 969, 252, 416, 417, 390, 161, 162, 163, 164,
	0, 369, 165, 166, 410, 0, 167, 168, 169, 211,
	440, 0, 170, 0, 0, 0, 0, 171, 172, 173,
	174, 367, 396, 384, 385, 386, 383, 372, 0, 0,
	0, 0, 363, 364, 89, 90, 0, 91, 365, 0,
	0, 373, 378, 0, 0, 0, 92, 93, 175, 423,
	424, 94, 425, 426, 0, 95, 180, 96, 393, 411,
	427, 428, 0, 419, 0, 404, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 293, 102, 103, 0, 405,
	407, 0, 406, 408, 104, 105, 106, 107, 429, 108,
	430, 431, 0, 0, 109, 0, 0, 0, 422, 111,
	0, 0, 0, 0, 377, 112, 412, 391, 0, 113,
	114, 432, 115, 0, 0, 0, 294, 0, 116, 420,
	0, 191, 0, 117, 118, 0, 0, 0, 295, 119,
	433, 434, 435, 0, 403, 0, 296, 120, 297, 121,
	0, 0, 421, 298, 122, 299, 0, 249, 0, 0,
	0, 123, 124, 125, 126, 250, 300, 127, 128, 366,
	129, 392, 418, 130, 436, 131, 132, 0, 0, 0,
	0, 0, 133, 199, 301, 134, 302, 413, 135, 136,
	0, 414, 137, 202, 0, 138, 139, 437, 140, 141,
	0, 142, 143, 144, 0, 145, 303, 146, 147, 381,
	148, 0, 149, 150, 0, 151, 251, 409, 152, 153,
	304, 154, 438, 155, 0, 156, 158, 206, 157, 415,
	0, 0, 159, 160, 0, 253, 439, 0, 0, 252,
	416, 417, 390, 161, 162, 163, 164, 0, 369, 165,
	166, 410, 0, 167, 168, 169, 211, 440, 0, 170,
	0, 0, 0, 0, 171, 172, 173, 174, 367, 0,
	0, 396, 384, 385, 386, 383, 372, 0, 0, 363,
	364, 0, 0, 89, 90, 365, 91, 0, 373, 1303,
	0, 378, 0, 0, 0, 92, 93, 175, 423, 424,
	94, 425, 426, 0, 95, 180, 96, 393, 411, 427,
	428, 0, 419, 0, 404, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 293, 102, 103, 0, 405, 407,
	0, 406, 408, 104, 105, 106, 107, 429, 108, 430,
	431, 0, 0, 109, 0, 0, 0, 422, 111, 0,
	0, 0, 0, 377, 112, 412, 391, 0, 113, 114,
	432, 115, 0, 0, 0, 294, 0, 116, 420, 0,
	191, 0, 117, 118, 0, 0, 0, 295, 119, 433,
	434, 435, 0, 403, 0, 296, 120, 297, 121, 0,
	0, 421, 298, 122, 299, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 300, 127, 128, 366, 129,
	392, 418, 130, 436, 131, 132, 0, 0, 0, 0,
	0, 133, 199, 301, 134, 302, 413, 135, 136, 0,
	414, 137, 202, 0, 138, 139, 437, 140, 141, 0,
	142, 143, 144, 0, 145, 303, 146, 147, 381, 148,
	0, 149, 150, 0, 151, 251, 409, 152, 153, 304,
	154, 438, 155, 0, 156, 158, 206, 157, 415, 0,
	0, 159, 160, 0, 253, 439, 0, 0, 252, 416,
	417, 390, 161, 162, 163, 164, 0, 369, 165, 166,
	410, 0, 167, 168, 169, 211, 440, 0, 170, 0,
	0, 0, 0, 171, 172, 173, 174, 367, 0, 0,
	396, 384, 385, 386, 383, 372, 0, 0, 363, 364,
	0, 0, 89, 90, 365, 91, 0, 373, 1246, 0,
	378, 0, 0, 0, 92, 93, 175, 423, 424, 94,
	425, 426, 0, 95, 180, 96, 393, 411, 427, 428,
	0, 419, 0, 404, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 293, 102, 103, 0, 405, 407, 0,
	406, 408, 104, 105, 106, 107, 429, 108, 430, 431,
	0, 0, 109, 0, 0, 0, 422, 111, 0, 0,
	0, 0, 377, 112, 412, 391, 0, 113, 114, 432,
	115, 0, 0, 0, 294, 0, 116, 420, 0, 191,
	0, 117, 118, 0, 0, 0, 295, 119, 433, 434,
	435, 0, 403, 0, 296, 120, 297, 121, 0, 0,
	421, 298, 122, 299, 0, 249, 0, 0, 0, 123,
	124, 125, 126, 250, 300, 127, 128, 366, 129, 392,
	418, 130, 436, 131, 132, 0, 0, 0, 0, 0,
	133, 199, 301, 134, 302, 413, 135, 136, 0, 414,
	137, 202, 0, 138, 139, 437, 140, 141, 0, 142,
	143, 144, 0, 145, 303, 146, 147, 381, 148, 0,
	149, 150, 0, 151, 251, 409, 152, 153, 304, 154,
	438, 155, 0, 156, 158, 206, 157, 415, 0, 0,
	159, 160, 0, 253, 439, 0, 0, 252, 416, 417,
	390, 161, 162, 163, 164, 0, 369, 165, 166, 410,
	0, 167, 168, 169, 211, 440, 0, 170, 0, 0,
	0, 0, 171, 172, 173, 174, 367, 0, 0, 396,
	384, 385, 386, 383, 372, 0, 0, 363, 364, 0,
	0, 89, 90, 365, 91, 0, 373, 920, 0, 378,
	0, 0, 0, 92, 93, 175, 423, 424, 94, 425,
	426, 0, 95, 180, 96, 393, 411, 427, 428, 0,
	419, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 293, 102, 103, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 429, 108, 430, 431, 0,
	0, 109, 0, 0, 0, 422, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 432, 115,
	0, 0, 0, 294, 0, 116, 420, 0, 191, 0,
	117, 118, 0, 0, 0, 295, 119, 433, 434, 435,
	0, 403, 0, 296, 120, 297, 121, 0, 0, 421,
	298, 122, 299, 0, 249, 0, 0, 0, 123, 124,
	125, 126, 250, 300, 127, 128, 366, 129, 392, 418,
	130, 436, 131, 132, 0, 0, 0, 0, 0, 133,
	199, 301, 134, 302, 413, 135, 136, 0, 414, 137,
	202, 0, 138, 139, 437, 140, 141, 0, 142, 143,
	144, 0, 145, 303, 146, 147, 381, 148, 0, 149,
	150, 0, 151, 251, 409, 152, 153, 304, 154, 438,
	155, 0, 156, 158, 206, 157, 415, 0, 0, 159,
	160, 0, 253, 439, 0, 0, 252, 416, 417, 390,
	161, 162, 163, 164, 0, 369, 165, 166, 410, 0,
	167, 168, 169, 211, 440, 0, 170, 0, 0, 0,
	0, 171, 172, 173, 174, 367, 396, 384, 385, 386,
	383, 372, 0, 0, 0, 0, 363, 364, 89, 90,
	0, 91, 365, 690, 916, 373, 378, 0, 0, 0,
	92, 93, 175, 423, 424, 94, 425, 426, 0, 95,
	180, 96, 393, 411, 427, 428, 0, 419, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 293,
	102, 103, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 429, 108, 430, 431, 0, 0, 109, 0,
	0, 0, 422, 111, 0, 0, 0, 0, 377, 112,
	412, 391, 0, 113, 114, 432, 115, 0, 0, 0,
	294, 0, 116, 420, 0, 191, 0, 117, 118, 0,
	0, 0, 295, 119, 433, 434, 435, 0, 403, 0,
	296, 120, 297, 121, 0, 0, 421, 298, 122, 299,
	0, 249, 0, 0, 0, 123, 124, 125, 126, 250,
	300, 127, 128, 366, 129, 392, 418, 130, 436, 131,
	132, 0, 0, 0, 0, 0, 133, 199, 301, 134,
	302, 413, 135, 136, 0, 414, 137, 202, 0, 138,
	139, 437, 140, 141, 0, 142, 143, 144, 0, 145,
	303, 146, 147, 381, 148, 0, 149, 150, 0, 151,
	251, 409, 152, 153, 304, 154, 438, 155, 0, 156,
	158, 206, 157, 415, 0, 0, 159, 160, 0, 253,
	439, 0, 0, 252, 416, 417, 390, 161, 162, 163,
	164, 0, 369, 165, 166, 410, 0, 167, 168, 169,
	211, 440, 1252, 170, 0, 0, 0, 0, 171, 172,
	173, 174, 367, 396, 384, 385, 386, 383, 372, 0,
	0, 0, 0, 363, 364, 89, 90, 0, 91, 365,
	0, 0, 373, 378, 0, 0, 0, 92, 93, 175,
	423, 424, 94, 425, 426, 0, 95, 180, 96, 393,
	411, 427, 428, 0, 419, 0, 404, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 293, 102, 103, 0,
	405, 407, 0, 406, 408, 104, 105, 106, 107, 429,
	108, 430, 431, 460, 0, 109, 0, 0, 0, 422,
	111, 0, 0, 0, 0, 377, 112, 412, 391, 0,
	113, 114, 432, 115, 0, 0, 0, 294, 0, 116,
	420, 0, 191, 0, 117, 118, 0, 0, 0, 295,
	119, 433, 434, 435, 0, 403, 0, 296, 120, 297,
	121, 0, 0, 421, 298, 122, 299, 0, 249, 0,
	0, 0, 123, 124, 125, 126, 250, 300, 127, 128,
	366, 129, 392, 418, 130, 436, 131, 132, 0, 0,
	0, 0, 0, 133, 199, 301, 134, 302, 413, 135,
	136, 0, 414, 137, 202, 0, 138, 139, 437, 140,
	141, 0, 142, 143, 144, 0, 145, 303, 146, 147,
	381, 148, 0, 149, 150, 0, 151, 251, 409, 152,
	153, 304, 154, 438, 155, 0, 156, 158, 206, 157,
	415, 0, 0, 159, 160, 0, 253, 439, 0, 0,
	252, 416, 417, 390, 161, 162, 163, 164, 0, 369,
	165, 166, 410, 0, 167, 168, 169, 211, 440, 0,
	170, 0, 0, 0, 0, 171, 172, 173, 174, 367,
	396, 384, 385, 386, 383, 372, 0, 0, 0, 0,
	363, 364, 89, 90, 0, 91, 365, 0, 0, 373,
	378, 0, 0, 0, 92, 93, 175, 423, 424, 94,
	425, 426, 0, 95, 180, 96, 393, 411, 427, 428,
	0, 419, 0, 404, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 293, 102, 103, 0, 405, 407, 0,
	406, 408, 104, 105, 106, 107, 429, 108, 430, 431,
	0, 0, 109, 0, 0, 0, 422, 111, 0, 0,
	0, 0, 377, 112, 412, 391, 0, 113, 114, 432,
	115, 0, 0, 972, 294, 0, 116, 420, 0, 191,
	0, 117, 118, 0, 0, 0, 295, 119, 433, 434,
	435, 0, 403, 0, 296, 120, 297, 121, 0, 0,
	421, 298, 122, 299, 0, 249, 0, 0, 0, 123,
	124, 125, 126, 250, 300, 127, 128, 366, 129, 392,
	418, 130, 436, 131, 132, 0, 0, 0, 0, 0,
	133, 199, 301, 134, 302, 413, 135, 136, 0, 414,
	137, 202, 0, 138, 139, 437, 140, 141, 0, 142,
	143, 144, 0, 145, 303, 146, 147, 381, 148, 0,
	149, 150, 0, 151, 251, 409, 152, 153, 304, 154,
	438, 155, 0, 156, 158, 206, 157, 415, 0, 0,
	159, 160, 0, 253, 439, 0, 0, 252, 416, 417,
	390, 161, 162, 163, 164, 0, 369, 165, 166, 410,
	0, 167, 168, 169, 211, 440, 0, 170, 0, 0,
	0, 0, 171, 172, 173, 174, 367, 396, 384, 385,
	386, 383, 372, 0, 0, 0, 0, 363, 364, 89,
	90, 0, 91, 365, 0, 0, 373, 378, 0, 0,
	0, 92, 93, 175, 423, 424, 94, 425, 426, 0,
	95, 180, 96, 393, 411, 427, 428, 0, 419, 0,
	404, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	293, 102, 103, 0, 405, 407, 0, 406, 408, 104,
	105, 106, 107, 429, 108, 430, 431, 0, 0, 109,
	0, 0, 0, 422, 111, 0, 0, 0, 0, 377,
	112, 412, 391, 0, 113, 114, 432, 115, 0, 0,
	0, 294, 0, 116, 420, 0, 191, 0, 117, 118,
	0, 0, 0, 295, 119, 433, 434, 435, 0, 403,
	0, 296, 120, 297, 121, 0, 0, 421, 298, 122,
	299, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 300, 127, 128, 366, 129, 392, 418, 130, 436,
	131, 132, 0, 0, 0, 0, 0, 133, 199, 301,
	134, 302, 413, 135, 136, 0, 414, 137, 202, 0,
	138, 139, 437, 140, 141, 0, 142, 143, 144, 0,
	145, 303, 146, 147, 381, 148, 0, 149, 150, 0,
	151, 251, 409, 152, 153, 304, 154, 438, 155, 0,
	156, 158, 206, 157, 415, 0, 0, 159, 160, 0,
	253, 439, 0, 0, 252, 416, 417, 390, 161, 162,
	163, 164, 0, 369, 165, 166, 410, 0, 167, 168,
	169, 211, 440, 0, 170, 0, 0, 0, 0, 171,
	172, 173, 174, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 364, 361, 0, 0, 0,
	365, 0, 0, 373, 396, 384, 385, 386, 383, 372,
	0, 0, 0, 0, 0, 0, 89, 90, 628, 91,
	0, 0, 0, 0, 378, 0, 0, 0, 92, 93,
	175, 423, 424, 94, 425, 426, 0, 95, 180, 96,
	393, 411, 427, 428, 0, 419, 0, 404, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 293, 102, 103,
	0, 405, 407, 0, 406, 408, 104, 105, 106, 107,
	429, 108, 430, 431, 0, 0, 109, 0, 0, 0,
	422, 111, 0, 0, 0, 0, 377, 112, 412, 391,
	0, 113, 114, 432, 115, 0, 0, 0, 294, 0,
	116, 420, 0, 191, 0, 117, 118, 0, 0, 0,
	295, 119, 433, 434, 435, 0, 403, 0, 296, 120,
	297, 121, 0, 0, 421, 298, 122, 299, 0, 249,
	0, 0, 0, 123, 124, 125, 126, 250, 300, 127,
	128, 366, 129, 392, 418, 130, 436, 131, 132, 0,
	0, 0, 0, 0, 133, 199, 301, 134, 302, 413,
	135, 136, 0, 414, 137, 202, 0, 138, 139, 437,
	140, 141, 0, 142, 143, 144, 0, 145, 303, 146,
	147, 381, 148, 0, 149, 150, 0, 151, 251, 409,
	152, 153, 304, 154, 438, 155, 0, 156, 158, 206,
	157, 415, 0, 0, 159, 160, 0, 253, 439, 0,
	0, 252, 416, 417, 390, 161, 162, 163, 164, 0,
	369, 165, 166, 410, 0, 167, 168, 169, 211, 440,
	0, 170, 0, 0, 0, 0, 171, 172, 173, 174,
	367, 396, 384, 385, 386, 383, 372, 0, 0, 0,
	0, 363, 364, 89, 90, 0, 91, 365, 0, 0,
	373, 378, 0, 0, 0, 92, 93, 175, 423, 424,
	94, 425, 426, 0, 95, 180, 96, 393, 411, 427,
	428, 0, 419, 0, 404, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 293, 102, 1561, 0, 405, 407,
	0, 406, 408, 104, 105, 106, 107, 429, 108, 430,
	431, 0, 0, 109, 0, 0, 0, 422, 111, 0,
	0, 0, 0, 377, 112, 412, 391, 0, 113, 114,
	432, 115, 0, 0, 0, 294, 0, 116, 420, 0,
	191, 0, 117, 118, 0, 0, 0, 295, 119, 433,
	434, 435, 0, 403, 0, 296, 120, 297, 121, 0,
	0, 421, 298, 122, 299, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 300, 127, 128, 366, 129,
	392, 418, 130, 436, 131, 132, 0, 0, 0, 0,
	0, 133, 199, 301, 134, 302, 413, 135, 136, 0,
	414, 137, 202, 0, 138, 139, 437, 140, 141, 0,
	142, 143, 144, 0, 145, 303, 146, 147, 381, 148,
	0, 149, 150, 0, 151, 251, 409, 152, 153, 304,
	154, 438, 155, 0, 156, 158, 206, 157, 415, 0,
	0, 159, 160, 0, 253, 439, 0, 0, 252, 416,
	417, 390, 161, 162, 1560, 164, 0, 369, 165, 166,
	410, 0, 167, 168, 169, 211, 440, 0, 170, 0,
	0, 0, 0, 171, 172, 173, 174, 367, 396, 384,
	385, 386, 383, 372, 0, 0, 0, 0, 363, 364,
	89, 90, 0, 91, 365, 0, 0, 373, 378, 0,
	0, 0, 92, 93, 1559, 423, 424, 94, 425, 426,
	0, 95, 180, 96, 393, 411, 427, 428, 0, 419,
	0, 404, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 293, 102, 1561, 0, 405, 407, 0, 406, 408,
	104, 105, 106, 107, 429, 108, 430, 431, 0, 0,
	109, 0, 0, 0, 422, 111, 0, 0, 0, 0,
	377, 112, 412, 391, 0, 113, 114, 432, 115, 0,
	0, 0, 294, 0, 116, 420, 0, 191, 0, 117,
	118, 0, 0, 0, 295, 119, 433, 434, 435, 0,
	403, 0, 296, 120, 297, 121, 0, 0, 421, 298,
	122, 299, 0, 249, 0, 0, 0, 123, 124, 125,
	126, 250, 300, 127, 128, 366, 129, 392, 418, 130,
	436, 131, 132, 0, 0, 0, 0, 0, 133, 199,
	301, 134, 302, 413, 135, 136, 0, 414, 137, 202,
	0, 138, 139, 437, 140, 141, 0, 142, 143, 144,
	0, 145, 303, 146, 147, 381, 148, 0, 149, 150,
	0, 151, 251, 409, 152, 153, 304, 154, 438, 155,
	0, 156, 158, 206, 157, 415, 0, 0, 159, 160,
	0, 253, 439, 0, 0, 252, 416, 417, 390, 161,
	162, 1560, 164, 0, 369, 165, 166, 410, 0, 167,
	168, 169, 211, 440, 0, 170, 0, 0, 0, 0,
	171, 172, 173, 174, 367, 396, 384, 385, 386, 383,
	372, 0, 0, 0, 0, 363, 364, 89, 90, 0,
	91, 365, 0, 0, 373, 378, 0, 0, 0, 92,
	93, 175, 423, 424, 94, 425, 426, 0, 95, 180,
	96, 393, 411, 427, 428, 0, 419, 0, 404, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 293, 102,
	103, 0, 405, 407, 0, 406, 408, 104, 105, 106,
	107, 429, 108, 430, 431, 0, 0, 109, 0, 0,
	0, 422, 111, 0, 0, 0, 0, 377, 112, 412,
	391, 0, 113, 114, 432, 115, 0, 0, 0, 294,
	0, 116, 420, 0, 191, 0, 117, 118, 0, 0,
	0, 295, 119, 433, 434, 435, 0, 403, 0, 296,
	120, 297, 121, 0, 0, 421, 298, 122, 299, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 300,
	127, 128, 366, 129, 392, 418, 130, 436, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 301, 134, 302,
	413, 135, 136, 0, 414, 137, 202, 0, 138, 139,
	437, 140, 141, 0, 142, 143, 144, 0, 145, 303,
	146, 147, 381, 148, 0, 149, 150, 0, 151, 251,
	409, 152, 153, 304, 154, 438, 155, 0, 156, 158,
	206, 157, 415, 0, 0, 159, 160, 0, 253, 439,
	0, 0, 252, 416, 417, 390, 161, 162, 163, 164,
	0, 369, 165, 166, 410, 0, 167, 168, 169, 211,
	440, 0, 170, 0, 0, 0, 0, 171, 172, 173,
	174, 367, 396, 384, 385, 386, 383, 372, 0, 0,
	0, 0, 363, 364, 89, 90, 0, 91, 365, 0,
	0, 373, 378, 0, 0, 0, 92, 93, 175, 423,
	424, 94, 425, 426, 0, 95, 180, 96, 393, 411,
	427, 428, 0, 419, 0, 404, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 293, 102, 103, 0, 405,
	407, 0, 406, 408, 104, 105, 106, 107, 429, 108,
	430, 431, 0, 0, 109, 0, 0, 0, 422, 111,
	0, 0, 0, 0, 377, 112, 412, 391, 0, 113,
	114, 432, 115, 0, 0, 0, 294, 0, 116, 420,
	0, 191, 0, 117, 118, 0, 0, 0, 295, 119,
	433, 434, 435, 0, 403, 0, 296, 120, 297, 121,
	0, 0, 421, 298, 122, 299, 0, 249, 0, 0,
	0, 123, 124, 125, 126, 250, 300, 127, 128, 0,
	129, 392, 418, 130, 436, 131, 132, 0, 0, 0,
	0, 0, 133, 199, 301, 134, 302, 413, 135, 136,
	0, 414, 137, 202, 0, 138, 139, 437, 140, 141,
	0, 142, 143, 144, 0, 145, 303, 146, 147, 962,
	148, 0, 149, 150, 0, 151, 251, 409, 152, 153,
	304, 154, 438, 155, 0, 156, 158, 206, 157, 415,
	0, 0, 159, 160, 0, 253, 439, 0, 0, 252,
	416, 417, 390, 161, 162, 163, 164, 0, 0, 165,
	166, 410, 0, 167, 168, 169, 211, 440, 0, 170,
	0, 0, 0, 0, 171, 172, 173, 174, 0, 396,
	384, 385, 386, 383, 372, 0, 0, 0, 0, 958,
	959, 89, 90, 0, 91, 960, 0, 0, 961, 378,
	0, 0, 0, 92, 93, 0, 423, 424, 94, 425,
	426, 0, 95, 180, 96, 393, 411, 427, 428, 0,
	419, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 293, 102, 1561, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 429, 108, 430, 431, 0,
	0, 109, 0, 0, 0, 422, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 432, 115,
	0, 0, 0, 294, 0, 116, 420, 0, 191, 0,
	117, 118, 0, 0, 0, 295, 119, 433, 434, 435,
	0, 403, 0, 0, 120, 297, 121, 0, 0, 421,
	298, 122, 0, 0, 249, 0, 0, 0, 123, 124,
	125, 126, 250, 300, 127, 128, 366, 129, 392, 418,
	130, 436, 131, 132, 0, 0, 0, 0, 0, 133,
	199, 301, 134, 302, 413, 135, 136, 0, 414, 137,
	202, 0, 138, 139, 437, 140, 141, 0, 142, 143,
	144, 0, 145, 303, 146, 147, 381, 148, 0, 149,
	150, 0, 151, 251, 409, 152, 153, 0, 154, 438,
	155, 0, 156, 158, 206, 157, 415, 0, 0, 159,
	160, 0, 253, 439, 0, 0, 252, 416, 417, 390,
	161, 162, 1560, 164, 0, 369, 165, 166, 410, 0,
	167, 168, 169, 211, 440, 0, 170, 0, 0, 0,
	0, 171, 172, 173, 174, 0, 396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 364, 89, 90,
	0, 91, 365, 0, 0, 373, 0, 0, 0, 0,
	92, 93, 175, 176, 177, 94, 178, 179, 0, 95,
	180, 96, 0, 411, 181, 182, 0, 419, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 293,
	102, 103, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 184, 108, 185, 186, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 187, 112,
	412, 0, 0, 113, 114, 189, 115, 0, 0, 0,
	294, 0, 116, 420, 0, 191, 0, 117, 118, 0,
	0, 0, 295, 119, 192, 193, 194, 0, 195, 0,
	296, 120, 297, 121, 0, 0, 421, 298, 122, 299,
	0, 249, 0, 0, 0, 123, 124, 125, 126, 250,
	300, 127, 128, 0, 129, 0, 418, 130, 198, 131,
	132, 0, 0, 0, 0, 0, 133, 199, 301, 134,
	302, 413, 135, 136, 0, 414, 137, 202, 0, 138,
	139, 203, 140, 141, 0, 142, 143, 144, 0, 145,
	303, 146, 147, 204, 148, 0, 149, 150, 0, 151,
	251, 409, 152, 153, 304, 154, 205, 155, 0, 156,
	158, 206, 157, 415, 0, 0, 159, 160, 0, 253,
	208, 0, 0, 252, 416, 417, 0, 161, 162, 163,
	164, 0, 287, 165, 166, 410, 0, 167, 168, 169,
	211, 212, 0, 170, 89, 90, 0, 91, 171, 172,
	173, 174, 0, 0, 0, 0, 92, 93, 175, 176,
	177, 94, 178, 179, 0, 95, 180, 96, 0, 0,
	181, 182, 1362, 183, 0, 292, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 293, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 184, 108,
	185, 186, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 187, 112, 188, 0, 0, 113,
	114, 189, 115, 0, 0, 0, 294, 0, 116, 190,
	0, 191, 0, 117, 118, 0, 0, 0, 295, 119,
	192, 193, 194, 0, 195, 0, 296, 120, 297, 121,
	0, 0, 196, 298, 122, 299, 0, 249, 0, 0,
	0, 123, 124, 125, 126, 250, 300, 127, 128, 0,
	129, 0, 197, 130, 198, 131, 132, 0, 0, 0,
	0, 0, 133, 199, 301, 134, 302, 200, 135, 136,
	0, 201, 137, 202, 0, 138, 139, 203, 140, 141,
	0, 142, 143, 144, 0, 145, 303, 146, 147, 204,
	148, 0, 149, 150, 43, 151, 251, 0, 152, 153,
	304, 154, 205, 155, 0, 156, 158, 206, 157, 207,
	0, 45, 159, 160, 0, 253, 208, 0, 0, 252,
	209, 210, 0, 161, 162, 163, 164, 0, 0, 165,
	166, 0, 0, 167, 168, 169, 291, 212, 0, 170,
	0, 0, 0, 41, 171, 172, 173, 174, 0, 0,
	42, 287, 505, 509, 0, 510, 500, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 40, 0,
	0, 0, 0, 0, 0, 92, 93, 175, 176, 177,
	94, 178, 179, 0, 95, 180, 96, 0, 0, 181,
	182, 0, 183, 0, 292, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 293, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 184, 108, 185,
	186, 513, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 187, 112, 188, 502, 0, 113, 114,
	189, 115, 0, 0, 0, 294, 0, 116, 190, 0,
	191, 0, 117, 118, 0, 0, 0, 295, 119, 192,
	193, 194, 0, 195, 0, 296, 120, 297, 121, 0,
	0, 196, 298, 122, 299, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 300, 127, 128, 0, 129,
	0, 197, 130, 198, 131, 132, 0, 503, 0, 0,
	0, 133, 199, 301, 134, 302, 200, 135, 136, 0,
	201, 137, 202, 0, 138, 139, 203, 140, 141, 0,
	142, 143, 144, 0, 145, 303, 146, 147, 204, 148,
	0, 149, 150, 0, 151, 251, 0, 152, 153, 304,
	154, 205, 155, 0, 156, 158, 206, 157, 207, 0,
	0, 159, 160, 0, 253, 208, 0, 0, 252, 209,
	210, 501, 161, 162, 163, 164, 0, 0, 165, 166,
	0, 0, 167, 168, 169, 211, 212, 0, 170, 0,
	0, 0, 0, 171, 172, 173, 174, 0, 287, 505,
	509, 0, 510, 500, 0, 0, 0, 0, 511, 506,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 175, 176, 177, 94, 178, 179,
	0, 95, 180, 96, 0, 0, 181, 182, 0, 183,
	0, 292, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 293, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 184, 108, 185, 186, 496, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	187, 112, 188, 502, 0, 113, 114, 189, 115, 0,
	0, 0, 294, 0, 116, 190, 0, 191, 0, 117,
	118, 0, 0, 0, 295, 119, 192, 193, 194, 0,
	195, 0, 296, 120, 297, 121, 0, 0, 196, 298,
	122, 299, 0, 249, 0, 0, 0, 123, 124, 125,
	126, 250, 300, 127, 128, 0, 129, 0, 197, 130,
	198, 131, 132, 0, 503, 0, 0, 0, 133, 199,
	301, 134, 302, 200, 135, 136, 0, 201, 137, 202,
	0, 138, 139, 203, 140, 141, 0, 142, 143, 144,
	0, 145, 303, 146, 147, 204, 148, 0, 149, 150,
	0, 151, 251, 0, 152, 153, 304, 154, 205, 155,
	0, 156, 158, 206, 157, 207, 0, 0, 159, 160,
	0, 253, 208, 0, 0, 252, 209, 210, 501, 161,
	162, 163, 164, 0, 0, 165, 166, 0, 0, 167,
	168, 169, 211, 212, 0, 170, 0, 0, 0, 0,
	171, 172, 173, 174, 0, 287, 505, 509, 0, 510,
	500, 0, 0, 0, 0, 511, 506, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 175, 176, 177, 94, 178, 179, 0, 95, 180,
	96, 0, 0, 181, 182, 0, 183, 0, 292, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 293, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 184, 108, 185, 186, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 187, 112, 188,
	502, 0, 113, 114, 189, 115, 0, 0, 0, 294,
	0, 116, 190, 0, 191, 0, 117, 118, 0, 0,
	0, 295, 119, 192, 193, 194, 0, 195, 0, 296,
	120, 297, 121, 0, 0, 196, 298, 122, 299, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 300,
	127, 128, 0, 129, 0, 197, 130, 198, 131, 132,
	0, 503, 0, 0, 0, 133, 199, 301, 134, 302,
	200, 135, 136, 0, 201, 137, 202, 0, 138, 139,
	203, 140, 141, 0, 142, 143, 144, 0, 145, 303,
	146, 147, 204, 148, 0, 149, 150, 0, 151, 251,
	0, 152, 153, 304, 154, 205, 155, 0, 156, 158,
	206, 157, 207, 0, 0, 159, 160, 0, 253, 208,
	0, 0, 252, 209, 210, 501, 161, 162, 163, 164,
	0, 0, 165, 166, 0, 0, 167, 168, 169, 211,
	212, 86, 170, 0, 0, 0, 0, 171, 172, 173,
	174, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 511, 506, 0, 92, 93, 175, 176, 177,
	94, 178, 179, 0, 95, 180, 96, 0, 0, 181,
	182, 0, 183, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 184, 108, 185,
	186, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 187, 112, 188, 0, 0, 113, 114,
	189, 115, 0, 0, 0, 0, 0, 116, 190, 0,
	191, 0, 117, 118, 0, 0, 0, 0, 119, 192,
	193, 194, 0, 195, 0, 0, 120, 0, 121, 0,
	0, 196, 0, 122, 0, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 0, 127, 128, 0, 129,
	0, 197, 130, 198, 131, 132, 0, 0, 262, 0,
	0, 133, 199, 0, 134, 0, 200, 135, 136, 0,
	201, 137, 202, 0, 138, 139, 203, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 204, 148,
	0, 149, 150, 43, 151, 251, 0, 152, 153, 0,
	154, 205, 155, 0, 156, 158, 206, 157, 207, 0,
	45, 159, 160, 0, 253, 208, 0, 0, 252, 209,
	210, 0, 161, 162, 163, 164, 0, 0, 165, 166,
	0, 0, 167, 168, 169, 291, 212, 0, 170, 0,
	0, 0, 41, 171, 172, 173, 174, 86, 0, 42,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 827, 0, 0,
	0, 92, 93, 175, 176, 177, 94, 178, 179, 0,
	95, 180, 96, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 184, 108, 185, 186, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 187,
	112, 188, 0, 0, 113, 114, 189, 115, 0, 0,
	0, 0, 0, 116, 190, 0, 191, 0, 117, 118,
	0, 0, 0, 0, 119, 192, 193, 194, 0, 195,
	0, 0, 120, 0, 121, 0, 0, 196, 0, 122,
	0, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 0, 127, 128, 0, 129, 0, 197, 130, 198,
	131, 132, 0, 0, 0, 0, 0, 133, 199, 0,
	134, 0, 200, 135, 136, 0, 201, 137, 202, 0,
	138, 139, 203, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 204, 148, 0, 149, 150, 43,
	151, 251, 0, 152, 153, 0, 154, 205, 155, 0,
	156, 158, 206, 157, 207, 0, 45, 159, 160, 0,
	253, 208, 0, 0, 252, 209, 210, 0, 161, 162,
	163, 164, 0, 0, 165, 166, 0, 0, 167, 168,
	169, 291, 212, 0, 170, 0, 0, 0, 41, 171,
	172, 173, 174, 86, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 40, 1060, 0, 0, 92, 93, 175,
	176, 177, 94, 178, 179, 0, 95, 180, 96, 0,
	0, 181, 182, 0, 183, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 184,
	108, 185, 186, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 187, 112, 188, 0, 0,
	113, 114, 189, 115, 0, 0, 0, 0, 0, 116,
	190, 0, 191, 0, 117, 118, 0, 0, 0, 0,
	119, 192, 193, 194, 0, 195, 0, 0, 120, 0,
	121, 0, 0, 196, 0, 122, 0, 0, 249, 0,
	0, 0, 123, 124, 125, 126, 250, 0, 127, 128,
	0, 129, 0, 197, 130, 198, 131, 132, 0, 0,
	0, 0, 0, 133, 199, 0, 134, 0, 200, 135,
	136, 0, 201, 137, 202, 0, 138, 139, 203, 140,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	204, 148, 0, 149, 150, 0, 151, 251, 0, 152,
	153, 0, 154, 205, 155, 0, 156, 158, 206, 157,
	207, 0, 0, 159, 160, 0, 253, 208, 0, 0,
	252, 209, 210, 0, 161, 162, 163, 164, 0, 0,
	165, 166, 0, 0, 167, 168, 169, 211, 212, 0,
	170, 0, 0, 0, 0, 171, 172, 173, 174, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	352, 0, 0, 92, 93, 175, 176, 177, 94, 178,
	179, 0, 95, 180, 96, 0, 0, 181, 182, 0,
	183, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 184, 108, 185, 186, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 187, 112, 188, 0, 0, 113, 114, 189, 115,
	0, 0, 0, 0, 0, 116, 190, 0, 191, 0,
	117, 118, 0, 0, 0, 0, 119, 192, 193, 194,
	0, 195, 0, 0, 120, 0, 121, 0, 0, 196,
	0, 122, 0, 0, 249, 0, 0, 0, 123, 124,
	125, 126, 250, 0, 127, 128, 0, 129, 0, 197,
	130, 198, 131, 132, 0, 0, 262, 0, 0, 133,
	199, 0, 134, 0, 200, 135, 136, 0, 201, 137,
	202, 0, 138, 139, 203, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 204, 148, 0, 149,
	150, 0, 151, 251, 0, 152, 153, 0, 154, 205,
	155, 0, 156, 158, 206, 157, 207, 0, 0, 159,
	160, 0, 253, 208, 0, 0, 252, 209, 210, 0,
	161, 162, 163, 164, 0, 86, 165, 166, 0, 0,
	167, 168, 169, 211, 212, 0, 170, 89, 90, 0,
	91, 171, 172, 173, 174, 0, 0, 0, 0, 92,
	93, 175, 176, 177, 94, 178, 179, 0, 95, 180,
	96, 0, 0, 181, 182, 827, 183, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 184, 108, 185, 186, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 187, 112, 188,
	0, 0, 113, 114, 189, 115, 0, 0, 0, 0,
	0, 116, 190, 0, 191, 0, 117, 118, 0, 0,
	0, 0, 119, 192, 193, 194, 0, 195, 0, 0,
	120, 0, 121, 0, 0, 196, 0, 122, 0, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 0,
	127, 128, 0, 129, 0, 197, 130, 198, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 0, 134, 0,
	200, 135, 136, 0, 201, 137, 202, 0, 138, 139,
	203, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 204, 148, 0, 149, 150, 0, 151, 251,
	0, 152, 153, 0, 154, 205, 155, 0, 156, 158,
	206, 157, 207, 0, 0, 159, 160, 0, 253, 208,
	0, 0, 252, 209, 210, 0, 161, 162, 163, 164,
	0, 86, 165, 166, 0, 0, 167, 168, 169, 211,
	212, 0, 170, 89, 90, 0, 91, 171, 172, 173,
	174, 0, 0, 0, 0, 92, 93, 175, 176, 177,
	94, 178, 179, 0, 95, 180, 96, 0, 0, 181,
	182, 771, 183, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 184, 108, 185,
	186, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 187, 112, 188, 0, 0, 113, 114,
	189, 115, 0, 0, 0, 0, 0, 116, 190, 0,
	191, 0, 117, 118, 0, 0, 0, 0, 119, 192,
	193, 194, 0, 195, 0, 0, 120, 0, 121, 0,
	0, 196, 0, 122, 0, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 0, 127, 128, 0, 129,
	0, 197, 130, 198, 131, 132, 0, 0, 0, 0,
	0, 133, 199, 0, 134, 0, 200, 135, 136, 0,
	201, 137, 202, 0, 138, 139, 203, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 204, 148,
	0, 149, 150, 0, 151, 251, 0, 152, 153, 0,
	154, 205, 155, 0, 156, 158, 206, 157, 207, 0,
	0, 159, 160, 0, 253, 208, 0, 0, 252, 209,
	210, 0, 161, 162, 163, 164, 0, 86, 165, 166,
	0, 0, 167, 168, 169, 211, 212, 0, 170, 89,
	90, 0, 91, 171, 172, 173, 174, 0, 0, 0,
	0, 92, 93, 175, 176, 177, 94, 178, 179, 0,
	95, 180, 96, 0, 0, 181, 182, 1270, 183, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 184, 108, 185, 186, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 187,
	112, 188, 0, 0, 113, 114, 189, 115, 0, 0,
	0, 0, 0, 116, 190, 0, 191, 0, 117, 118,
	0, 0, 0, 0, 119, 192, 193, 194, 0, 195,
	0, 0, 120, 0, 121, 0, 0, 196, 0, 122,
	0, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 0, 127, 128, 0, 129, 0, 197, 130, 198,
	131, 132, 0, 0, 0, 0, 0, 133, 199, 0,
	134, 0, 200, 135, 136, 0, 201, 137, 202, 0,
	138, 139, 203, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 204, 148, 0, 149, 150, 0,
	151, 251, 0, 152, 153, 0, 154, 205, 155, 0,
	156, 158, 206, 157, 207, 0, 0, 159, 160, 0,
	253, 208, 0, 0, 252, 209, 210, 0, 161, 162,
	163, 164, 0, 287, 165, 166, 0, 0, 167, 168,
	169, 211, 212, 0, 170, 89, 90, 0, 91, 171,
	172, 173, 174, 0, 0, 0, 0, 92, 93, 175,
	176, 177, 94, 178, 179, 0, 95, 180, 96, 0,
	0, 181, 182, 451, 183, 0, 292, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 293, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 184,
	108, 185, 186, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 187, 112, 188, 0, 0,
	113, 114, 189, 115, 0, 0, 0, 294, 0, 116,
	190, 0, 191, 0, 117, 118, 0, 0, 0, 295,
	119, 192, 193, 194, 0, 195, 0, 296, 120, 297,
	121, 0, 0, 196, 298, 122, 299, 0, 249, 0,
	0, 0, 123, 124, 125, 126, 250, 300, 127, 128,
	0, 129, 0, 197, 130, 198, 131, 132, 0, 0,
	0, 0, 0, 133, 199, 301, 134, 302, 200, 135,
	136, 0, 201, 137, 202, 0, 138, 139, 203, 140,
	141, 0, 142, 143, 144, 0, 145, 303, 146, 147,
	204, 148, 0, 149, 150, 0, 151, 251, 0, 152,
	153, 304, 154, 205, 155, 0, 156, 158, 206, 157,
	207, 0, 0, 159, 160, 0, 253, 208, 0, 0,
	252, 209, 210, 0, 161, 162, 163, 164, 0, 86,
	165, 166, 0, 0, 167, 168, 169, 211, 212, 0,
	170, 89, 90, 0, 91, 171, 172, 173, 174, 0,
	0, 0, 0, 92, 93, 175, 176, 177, 94, 178,
	179, 0, 95, 180, 96, 0, 0, 181, 182, 746,
	183, 0, 0, 0, 97, 98, 99, 0, 100, 744,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 184, 108, 185, 186, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 187, 112, 188, 0, 0, 113, 114, 189, 115,
	0, 749, 0, 0, 0, 116, 190, 0, 191, 0,
	117, 118, 0, 805, 0, 0, 119, 192, 193, 194,
	0, 195, 0, 0, 120, 0, 121, 0, 0, 196,
	0, 122, 0, 0, 249, 0, 0, 0, 123, 124,
	125, 126, 250, 0, 127, 128, 0, 129, 0, 197,
	130, 198, 131, 132, 0, 0, 0, 0, 0, 133,
	199, 0, 134, 0, 200, 135, 136, 0, 201, 137,
	202, 748, 138, 139, 203, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 204, 148, 0, 149,
	150, 0, 151, 251, 0, 152, 153, 0, 154, 205,
	155, 0, 156, 158, 206, 157, 207, 0, 0, 159,
	160, 0, 253, 208, 0, 0, 252, 209, 210, 0,
	161, 162, 163, 164, 0, 806, 165, 166, 0, 0,
	167, 168, 169, 211, 212, 86, 170, 0, 0, 0,
	0, 171, 172, 173, 174, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 175, 176, 177, 94, 178, 179, 0, 95, 180,
	96, 0, 0, 181, 182, 746, 183, 0, 0, 741,
	97, 98, 99, 0, 100, 744, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 184, 108, 185, 186, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 187, 112, 188,
	0, 0, 113, 114, 189, 115, 0, 749, 0, 0,
	0, 116, 190, 0, 191, 0, 117, 740, 0, 0,
	0, 0, 119, 192, 193, 194, 0, 195, 0, 0,
	120, 0, 121, 0, 0, 196, 0, 122, 0, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 0,
	127, 128, 0, 129, 0, 197, 130, 198, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 0, 134, 0,
	200, 135, 136, 0, 201, 137, 202, 748, 138, 139,
	203, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 204, 148, 0, 149, 150, 0, 151, 251,
	0, 152, 153, 0, 154, 205, 155, 0, 156, 158,
	206, 157, 207, 0, 0, 159, 160, 0, 253, 208,
	0, 0, 252, 209, 210, 0, 161, 162, 163, 164,
	0, 747, 165, 166, 0, 0, 167, 168, 169, 211,
	212, 86, 170, 0, 0, 0, 0, 171, 172, 173,
	174, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 1060, 0, 0, 92, 93, 175, 176, 177,
	94, 178, 179, 0, 95, 180, 96, 0, 0, 181,
	182, 0, 183, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 184, 108, 185,
	186, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 187, 112, 188, 0, 0, 113, 114,
	189, 115, 0, 0, 0, 0, 0, 116, 190, 0,
	191, 0, 117, 118, 0, 0, 0, 0, 119, 192,
	193, 194, 0, 195, 0, 0, 120, 0, 121, 0,
	0, 196, 0, 122, 0, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 0, 127, 128, 0, 129,
	0, 197, 130, 198, 131, 132, 0, 0, 0, 0,
	0, 133, 199, 0, 134, 0, 200, 135, 136, 0,
	201, 137, 202, 0, 138, 139, 203, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 204, 148,
	0, 149, 150, 0, 151, 251, 0, 152, 153, 0,
	154, 205, 155, 0, 156, 158, 206, 157, 207, 0,
	0, 159, 160, 0, 253, 208, 0, 0, 252, 209,
	210, 0, 161, 162, 163, 164, 0, 86, 165, 166,
	0, 0, 167, 168, 169, 211, 212, 0, 170, 89,
	90, 0, 91, 171, 172, 173, 174, 0, 0, 0,
	0, 92, 93, 175, 176, 177, 94, 178, 179, 0,
	95, 180, 96, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 184, 108, 185, 186, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 187,
	112, 188, 0, 0, 113, 114, 189, 115, 0, 0,
	0, 0, 0, 116, 190, 0, 191, 0, 117, 118,
	0, 0, 0, 0, 119, 192, 193, 194, 0, 195,
	0, 0, 120, 0, 121, 0, 0, 196, 0, 122,
	0, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 0, 127, 128, 0, 129, 0, 197, 130, 198,
	131, 132, 0, 0, 262, 0, 0, 133, 199, 0,
	134, 0, 200, 135, 136, 0, 201, 137, 202, 0,
	138, 139, 203, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 204, 148, 0, 149, 150, 0,
	151, 251, 0, 152, 153, 0, 154, 205, 155, 0,
	156, 158, 206, 157, 207, 0, 0, 159, 160, 0,
	253, 208, 0, 0, 252, 209, 210, 0, 161, 162,
	163, 164, 0, 86, 165, 166, 0, 0, 167, 168,
	169, 211, 212, 0, 170, 89, 90, 0, 91, 171,
	172, 173, 174, 0, 0, 0, 0, 92, 93, 175,
	176, 177, 94, 178, 179, 0, 95, 180, 96, 0,
	0, 181, 182, 0, 183, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 491, 107, 184,
	108, 185, 186, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 187, 112, 188, 0, 0,
	113, 114, 189, 115, 0, 0, 0, 0, 0, 116,
	190, 0, 191, 0, 117, 118, 0, 0, 0, 0,
	119, 192, 193, 194, 0, 195, 0, 0, 120, 0,
	121, 0, 0, 196, 0, 122, 0, 0, 249, 0,
	0, 0, 123, 124, 125, 126, 250, 0, 127, 128,
	0, 129, 0, 197, 130, 198, 131, 132, 0, 0,
	0, 0, 0, 133, 199, 0, 134, 0, 200, 135,
	136, 0, 201, 137, 202, 0, 138, 139, 203, 140,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	204, 148, 0, 149, 150, 0, 151, 251, 0, 152,
	153, 0, 154, 205, 155, 0, 156, 158, 206, 157,
	207, 0, 490, 159, 160, 0, 253, 208, 0, 0,
	252, 209, 210, 0, 161, 162, 163, 164, 0, 86,
	165, 166, 0, 0, 167, 168, 169, 211, 212, 0,
	170, 89, 90, 0, 91, 171, 172, 173, 174, 0,
	0, 0, 0, 92, 93, 175, 176, 177, 94, 178,
	179, 0, 95, 180, 96, 0, 0, 181, 182, 0,
	183, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 184, 108, 185, 186, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 187, 112, 188, 0, 0, 113, 114, 189, 115,
	0, 0, 0, 0, 0, 116, 190, 0, 191, 0,
	117, 268, 0, 0, 0, 0, 119, 192, 193, 194,
	0, 195, 0, 0, 120, 0, 121, 0, 0, 196,
	0, 122, 0, 0, 249, 0, 0, 0, 123, 124,
	125, 126, 250, 0, 127, 128, 0, 129, 0, 197,
	130, 198, 131, 132, 0, 0, 262, 0, 0, 133,
	199, 0, 134, 0, 200, 135, 136, 0, 201, 137,
	202, 0, 138, 139, 203, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 204, 148, 0, 149,
	150, 0, 151, 251, 0, 152, 153, 0, 154, 205,
	155, 0, 156, 158, 206, 157, 207, 0, 0, 159,
	160, 0, 253, 208, 0, 0, 252, 209, 210, 0,
	161, 162, 163, 164, 0, 86, 165, 166, 0, 0,
	167, 168, 169, 211, 212, 0, 170, 89, 90, 0,
	91, 171, 172, 173, 174, 0, 0, 0, 0, 92,
	93, 175, 176, 177, 94, 178, 179, 0, 95, 180,
	96, 0, 0, 181, 182, 0, 183, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 184, 108, 185, 186, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 187, 112, 188,
	0, 0, 113, 114, 189, 115, 0, 0, 0, 0,
	0, 116, 190, 0, 191, 0, 117, 118, 0, 0,
	0, 0, 119, 192, 193, 194, 0, 195, 0, 0,
	120, 0, 121, 0, 0, 196, 0, 122, 0, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 0,
	127, 128, 0, 129, 0, 197, 130, 198, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 0, 134, 0,
	200, 135, 136, 0, 201, 137, 202, 0, 138, 139,
	203, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 204, 148, 0, 149, 150, 0, 151, 251,
	0, 152, 153, 0, 154, 205, 155, 0, 156, 158,
	206, 157, 207, 0, 0, 159, 160, 0, 253, 208,
	0, 0, 252, 209, 210, 0, 161, 162, 163, 164,
	0, 86, 165, 166, 0, 0, 167, 168, 169, 211,
	212, 0, 170, 89, 90, 0, 91, 171, 172, 173,
	174, 0, 0, 0, 0, 92, 93, 175, 176, 177,
	94, 178, 179, 0, 95, 180, 96, 0, 0, 181,
	182, 0, 183, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 184, 108, 185,
	186, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 187, 112, 188, 0, 0, 113, 114,
	189, 115, 0, 0, 0, 0, 0, 116, 190, 0,
	191, 0, 117, 1004, 0, 0, 0, 0, 119, 192,
	193, 194, 0, 195, 0, 0, 120, 0, 121, 0,
	0, 196, 0, 122, 0, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 0, 127, 128, 0, 129,
	0, 197, 130, 198, 131, 132, 0, 0, 0, 0,
	0, 133, 199, 0, 134, 0, 200, 135, 136, 0,
	201, 137, 202, 0, 138, 139, 203, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 204, 148,
	0, 149, 150, 0, 151, 251, 0, 152, 153, 0,
	154, 205, 155, 0, 156, 158, 206, 157, 207, 0,
	0, 159, 160, 0, 253, 208, 0, 0, 252, 209,
	210, 0, 161, 162, 163, 164, 0, 86, 165, 166,
	0, 0, 167, 168, 169, 211, 212, 0, 170, 89,
	90, 0, 91, 171, 172, 173, 174, 0, 0, 0,
	0, 92, 93, 175, 176, 177, 94, 178, 179, 0,
	95, 180, 96, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 184, 108, 185, 186, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 187,
	112, 188, 0, 0, 113, 114, 189, 115, 0, 0,
	0, 0, 0, 116, 190, 0, 191, 0, 117, 1002,
	0, 0, 0, 0, 119, 192, 193, 194, 0, 195,
	0, 0, 120, 0, 121, 0, 0, 196, 0, 122,
	0, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 0, 127, 128, 0, 129, 0, 197, 130, 198,
	131, 132, 0, 0, 0, 0, 0, 133, 199, 0,
	134, 0, 200, 135, 136, 0, 201, 137, 202, 0,
	138, 139, 203, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 204, 148, 0, 149, 150, 0,
	151, 251, 0, 152, 153, 0, 154, 205, 155, 0,
	156, 158, 206, 157, 207, 0, 0, 159, 160, 0,
	253, 208, 0, 0, 252, 209, 210, 0, 161, 162,
	163, 164, 0, 86, 165, 166, 0, 0, 167, 168,
	169, 211, 212, 0, 170, 89, 90, 0, 91, 171,
	172, 173, 174, 0, 0, 0, 0, 92, 93, 175,
	176, 177, 94, 178, 179, 0, 95, 180, 96, 0,
	0, 181, 182, 0, 183, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 184,
	108, 185, 186, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 187, 112, 188, 0, 0,
	113, 114, 189, 115, 0, 0, 0, 0, 0, 116,
	190, 0, 191, 0, 117, 993, 0, 0, 0, 0,
	119, 192, 193, 194, 0, 195, 0, 0, 120, 0,
	121, 0, 0, 196, 0, 122, 0, 0, 249, 0,
	0, 0, 123, 124, 125, 126, 250, 0, 127, 128,
	0, 129, 0, 197, 130, 198, 131, 132, 0, 0,
	0, 0, 0, 133, 199, 0, 134, 0, 200, 135,
	136, 0, 201, 137, 202, 0, 138, 139, 203, 140,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	204, 148, 0, 149, 150, 0, 151, 251, 0, 152,
	153, 0, 154, 205, 155, 0, 156, 158, 206, 157,
	207, 0, 0, 159, 160, 0, 253, 208, 0, 0,
	252, 209, 210, 0, 161, 162, 163, 164, 0, 86,
	165, 166, 0, 0, 167, 168, 169, 211, 212, 0,
	170, 89, 90, 0, 91, 171, 172, 173, 174, 0,
	0, 0, 0, 92, 93, 175, 176, 177, 94, 178,
	179, 0, 95, 180, 96, 0, 0, 181, 182, 0,
	183, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 184, 108, 185, 186, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 187, 112, 188, 0, 0, 113, 114, 189, 115,
	0, 0, 0, 0, 0, 116, 190, 0, 191, 0,
	117, 620, 0, 0, 0, 0, 119, 192, 193, 194,
	0, 195, 0, 0, 120, 0, 121, 0, 0, 196,
	0, 122, 0, 0, 249, 0, 0, 0, 123, 124,
	125, 126, 250, 0, 127, 128, 0, 129, 0, 197,
	130, 198, 131, 132, 0, 0, 0, 0, 0, 133,
	199, 0, 134, 0, 200, 135, 136, 0, 201, 137,
	202, 0, 138, 139, 203, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 204, 148, 0, 149,
	150, 0, 151, 251, 0, 152, 153, 0, 154, 205,
	155, 0, 156, 158, 206, 157, 207, 0, 0, 159,
	160, 0, 253, 208, 0, 0, 252, 209, 210, 0,
	161, 162, 163, 164, 0, 86, 165, 166, 0, 0,
	167, 168, 169, 211, 212, 0, 170, 89, 90, 0,
	91, 171, 172, 173, 174, 0, 477, 0, 0, 92,
	93, 175, 176, 177, 94, 178, 179, 0, 95, 180,
	96, 0, 0, 181, 182, 0, 183, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 184, 108, 185, 186, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 187, 112, 188,
	0, 0, 113, 114, 189, 115, 0, 0, 0, 0,
	0, 116, 190, 0, 191, 0, 117, 118, 0, 0,
	0, 0, 119, 192, 193, 194, 0, 195, 0, 0,
	120, 0, 121, 0, 0, 196, 0, 122, 0, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 0,
	127, 128, 0, 129, 0, 197, 130, 198, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 0, 134, 0,
	200, 135, 136, 0, 201, 137, 202, 0, 138, 139,
	203, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 204, 148, 0, 149, 150, 0, 151, 251,
	0, 0, 153, 0, 154, 205, 155, 0, 156, 158,
	206, 157, 207, 0, 0, 159, 160, 0, 253, 208,
	0, 0, 252, 209, 210, 0, 161, 162, 163, 164,
	0, 86, 165, 166, 0, 0, 167, 168, 169, 211,
	212, 0, 170, 89, 90, 0, 91, 171, 172, 173,
	174, 0, 0, 0, 0, 92, 93, 175, 176, 177,
	94, 178, 179, 0, 95, 180, 96, 0, 0, 181,
	182, 0, 183, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 184, 108, 185,
	186, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 187, 112, 188, 0, 0, 113, 114,
	189, 115, 0, 0, 0, 0, 0, 116, 190, 0,
	191, 0, 117, 337, 0, 0, 0, 0, 119, 192,
	193, 194, 0, 195, 0, 0, 120, 0, 121, 0,
	0, 196, 0, 122, 0, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 0, 127, 128, 0, 129,
	0, 197, 130, 198, 131, 132, 0, 0, 0, 0,
	0, 133, 199, 0, 134, 0, 200, 135, 136, 0,
	201, 137, 202, 0, 138, 139, 203, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 204, 148,
	0, 149, 150, 0, 151, 251, 0, 152, 153, 0,
	154, 205, 155, 0, 156, 158, 206, 157, 207, 0,
	0, 159, 160, 0, 253, 208, 0, 0, 252, 209,
	210, 0, 161, 162, 163, 164, 0, 86, 165, 166,
	0, 0, 167, 168, 169, 211, 212, 0, 170, 89,
	90, 0, 91, 171, 172, 173, 174, 0, 0, 0,
	0, 92, 93, 175, 176, 177, 94, 178, 179, 0,
	95, 180, 96, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 184, 108, 185, 186, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 187,
	112, 188, 0, 0, 113, 114, 189, 115, 0, 0,
	0, 0, 0, 116, 190, 0, 191, 0, 117, 334,
	0, 0, 0, 0, 119, 192, 193, 194, 0, 195,
	0, 0, 120, 0, 121, 0, 0, 196, 0, 122,
	0, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 0, 127, 128, 0, 129, 0, 197, 130, 198,
	131, 132, 0, 0, 0, 0, 0, 133, 199, 0,
	134, 0, 200, 135, 136, 0, 201, 137, 202, 0,
	138, 139, 203, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 204, 148, 0, 149, 150, 0,
	151, 251, 0, 152, 153, 0, 154, 205, 155, 0,
	156, 158, 206, 157, 207, 0, 0, 159, 160, 0,
	253, 208, 0, 0, 252, 209, 210, 0, 161, 162,
	163, 164, 0, 86, 165, 166, 0, 0, 167, 168,
	169, 211, 212, 0, 170, 89, 90, 0, 91, 171,
	172, 173, 174, 0, 0, 0, 0, 92, 93, 175,
	176, 177, 94, 178, 179, 0, 95, 180, 96, 0,
	0, 181, 182, 0, 183, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 184,
	108, 185, 186, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 187, 112, 188, 0, 0,
	113, 114, 189, 115, 0, 0, 0, 0, 0, 116,
	190, 0, 191, 0, 117, 118, 0, 0, 0, 0,
	119, 192, 193, 194, 0, 195, 0, 0, 120, 0,
	121, 0, 0, 196, 0, 122, 0, 0, 249, 0,
	0, 0, 123, 124, 125, 126, 83, 0, 127, 128,
	0, 129, 0, 197, 130, 198, 131, 132, 0, 0,
	0, 0, 0, 133, 199, 0, 134, 0, 200, 135,
	136, 0, 201, 137, 202, 0, 138, 139, 203, 140,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	204, 148, 0, 149, 150, 0, 151, 251, 0, 152,
	153, 0, 154, 205, 155, 0, 156, 158, 206, 157,
	207, 0, 0, 159, 160, 0, 82, 208, 0, 0,
	78, 209, 210, 0, 161, 162, 163, 164, 0, 86,
	165, 166, 0, 0, 167, 168, 169, 211, 212, 0,
	170, 89, 90, 0, 91, 171, 172, 173, 174, 0,
	0, 0, 0, 92, 93, 175, 176, 177, 94, 178,
	179, 0, 95, 180, 96, 0, 0, 181, 182, 0,
	183, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 184, 108, 185, 186, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 187, 112, 188, 0, 0, 113, 114, 189, 115,
	0, 0, 0, 0, 0, 116, 190, 0, 191, 0,
	117, 282, 0, 0, 0, 0, 119, 192, 193, 194,
	0, 195, 0, 0, 120, 0, 121, 0, 0, 196,
	0, 122, 0, 0, 249, 0, 0, 0, 123, 124,
	125, 126, 250, 0, 127, 128, 0, 129, 0, 197,
	130, 198, 131, 132, 0, 0, 0, 0, 0, 133,
	199, 0, 134, 0, 200, 135, 136, 0, 201, 137,
	202, 0, 138, 139, 203, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 204, 148, 0, 149,
	150, 0, 151, 251, 0, 152, 153, 0, 154, 205,
	155, 0, 156, 158, 206, 157, 207, 0, 0, 159,
	160, 0, 253, 208, 0, 0, 252, 209, 210, 0,
	161, 162, 163, 164, 0, 86, 165, 166, 0, 0,
	167, 168, 169, 211, 212, 0, 170, 89, 90, 0,
	91, 171, 172, 173, 174, 0, 0, 0, 0, 92,
	93, 175, 176, 177, 94, 178, 179, 0, 95, 180,
	96, 0, 0, 181, 182, 0, 183, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 184, 108, 185, 186, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 187, 112, 188,
	0, 0, 113, 114, 189, 115, 0, 0, 0, 0,
	0, 116, 190, 0, 191, 0, 117, 279, 0, 0,
	0, 0, 119, 192, 193, 194, 0, 195, 0, 0,
	120, 0, 121, 0, 0, 196, 0, 122, 0, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 0,
	127, 128, 0, 129, 0, 197, 130, 198, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 0, 134, 0,
	200, 135, 136, 0, 201, 137, 202, 0, 138, 139,
	203, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 204, 148, 0, 149, 150, 0, 151, 251,
	0, 152, 153, 0, 154, 205, 155, 0, 156, 158,
	206, 157, 207, 0, 0, 159, 160, 0, 253, 208,
	0, 0, 252, 209, 210, 0, 161, 162, 163, 164,
	0, 86, 165, 166, 0, 0, 167, 168, 169, 211,
	212, 0, 170, 89, 90, 0, 91, 171, 172, 173,
	174, 0, 0, 0, 0, 92, 93, 175, 176, 177,
	94, 178, 179, 0, 95, 180, 96, 0, 0, 181,
	182, 0, 183, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 184, 108, 185,
	186, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 187, 112, 188, 0, 0, 113, 114,
	189, 115, 0, 0, 0, 0, 0, 116, 190, 0,
	191, 0, 117, 277, 0, 0, 0, 0, 119, 192,
	193, 194, 0, 195, 0, 0, 120, 0, 121, 0,
	0, 196, 0, 122, 0, 0, 249, 0, 0, 0,
	123, 124, 125, 126, 250, 0, 127, 128, 0, 129,
	0, 197, 130, 198, 131, 132, 0, 0, 0, 0,
	0, 133, 199, 0, 134, 0, 200, 135, 136, 0,
	201, 137, 202, 0, 138, 139, 203, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 204, 148,
	0, 149, 150, 0, 151, 251, 0, 152, 153, 0,
	154, 205, 155, 0, 156, 158, 206, 157, 207, 0,
	0, 159, 160, 0, 253, 208, 0, 0, 252, 209,
	210, 0, 161, 162, 163, 164, 0, 86, 165, 166,
	0, 0, 167, 168, 169, 211, 212, 0, 170, 89,
	90, 0, 91, 171, 172, 173, 174, 0, 0, 0,
	0, 92, 93, 175, 176, 177, 94, 178, 179, 0,
	95, 180, 96, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 184, 108, 185, 186, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 187,
	112, 188, 0, 0, 113, 114, 189, 115, 0, 0,
	0, 0, 0, 116, 190, 0, 191, 0, 117, 271,
	0, 0, 0, 0, 119, 192, 193, 194, 0, 195,
	0, 0, 120, 0, 121, 0, 0, 196, 0, 122,
	0, 0, 249, 0, 0, 0, 123, 124, 125, 126,
	250, 0, 127, 128, 0, 129, 0, 197, 130, 198,
	131, 132, 0, 0, 0, 0, 0, 133, 199, 0,
	134, 0, 200, 135, 136, 0, 201, 137, 202, 0,
	138, 139, 203, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 204, 148, 0, 149, 150, 0,
	151, 251, 0, 152, 153, 0, 154, 205, 155, 0,
	156, 158, 206, 157, 207, 0, 0, 159, 160, 0,
	253, 208, 0, 0, 252, 209, 210, 0, 161, 162,
	163, 164, 0, 86, 165, 166, 0, 0, 167, 168,
	169, 211, 212, 0, 170, 89, 90, 0, 91, 171,
	172, 173, 174, 0, 0, 0, 0, 92, 93, 175,
	176, 177, 94, 178, 179, 0, 95, 180, 96, 0,
	0, 181, 182, 0, 183, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 184,
	108, 185, 186, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 187, 112, 188, 0, 0,
	113, 114, 189, 115, 0, 0, 0, 0, 0, 116,
	190, 0, 191, 0, 117, 118, 0, 0, 0, 0,
	119, 192, 193, 194, 0, 195, 0, 0, 120, 0,
	121, 0, 0, 196, 0, 122, 0, 0, 249, 0,
	0, 0, 123, 124, 125, 126, 250, 0, 127, 128,
	0, 129, 0, 197, 130, 198, 131, 132, 0, 0,
	0, 0, 0, 133, 199, 0, 134, 0, 200, 135,
	136, 0, 201, 137, 202, 0, 138, 139, 203, 246,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	204, 148, 0, 149, 150, 0, 151, 251, 0, 152,
	153, 0, 154, 205, 155, 0, 156, 158, 206, 157,
	207, 0, 0, 159, 160, 0, 253, 208, 0, 0,
	252, 209, 210, 0, 161, 162, 163, 164, 0, 86,
	165, 166, 0, 0, 167, 168, 169, 211, 212, 0,
	170, 89, 90, 0, 91, 171, 172, 173, 174, 0,
	0, 0, 0, 92, 93, 175, 176, 177, 94, 178,
	179, 0, 95, 180, 96, 0, 0, 181, 182, 0,
	183, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 184, 108, 185, 186, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 187, 112, 188, 0, 0, 113, 114, 189, 115,
	0, 0, 0, 0, 0, 116, 190, 0, 191, 0,
	117, 118, 0, 0, 0, 0, 119, 192, 193, 194,
	0, 195, 0, 0, 120, 0, 121, 0, 0, 196,
	0, 122, 0, 0, 76, 0, 0, 0, 123, 124,
	125, 126, 83, 0, 127, 128, 0, 129, 0, 197,
	130, 198, 131, 132, 0, 0, 0, 0, 0, 133,
	199, 0, 134, 0, 200, 135, 136, 0, 201, 137,
	202, 0, 138, 139, 203, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 204, 148, 0, 149,
	150, 0, 151, 77, 0, 152, 153, 0, 154, 205,
	155, 0, 156, 158, 206, 157, 207, 0, 0, 159,
	160, 0, 82, 208, 0, 0, 78, 209, 210, 0,
	161, 162, 163, 164, 0, 86, 165, 166, 0, 0,
	167, 168, 169, 211, 212, 0, 170, 89, 90, 0,
	91, 171, 172, 173, 174, 0, 0, 0, 0, 92,
	93, 175, 176, 177, 94, 178, 179, 0, 95, 180,
	96, 0, 0, 181, 182, 0, 183, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 184, 108, 185, 186, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 187, 112, 188,
	0, 0, 113, 114, 189, 115, 0, 0, 0, 0,
	0, 116, 190, 0, 191, 0, 117, 118, 0, 0,
	0, 0, 119, 192, 193, 194, 0, 195, 0, 0,
	120, 0, 121, 0, 0, 196, 0, 122, 0, 0,
	249, 0, 0, 0, 123, 124, 125, 126, 250, 0,
	127, 128, 0, 129, 0, 197, 130, 198, 131, 132,
	0, 0, 0, 0, 0, 133, 199, 0, 134, 0,
	200, 135, 0, 0, 201, 137, 202, 0, 0, 139,
	203, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 204, 0, 0, 149, 150, 0, 151, 251,
	0, 152, 153, 0, 154, 205, 155, 0, 156, 158,
	206, 157, 207, 0, 0, 159, 160, 0, 253, 208,
	0, 0, 252, 209, 210, 0, 161, 162, 163, 164,
	0, 0, 165, 166, 0, 0, 167, 168, 169, 211,
	212, 644, 170, 662, 663, 664, 0, 171, 172, 173,
	174, 0, 0, 665, 0, 0, 0, 0, 0, 646,
	644, 671, 662, 663, 664, 0, 0, 0, 0, 0,
	0, 0, 665, 0, 0, 0, 0, 645, 646, 0,
	671, 0, 0, 659, 0, 0, 0, 644, 0, 662,
	663, 664, 0, 0, 0, 0, 645, 0, 0, 665,
	0, 0, 659, 0, 0, 646, 0, 671, 0, 0,
	0, 0, 0, 0, 644, 0, 662, 663, 664, 0,
	0, 0, 0, 645, 0, 0, 665, 0, 0, 659,
	0, 0, 646, 0, 671, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	645, 0, 0, 0, 0, 0, 659, 672, 667, 0,
	0, 0, 0, 660, 0, 0, 0, 0, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 660, 666, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 666, 0, 667, 0, 0, 0, 0, 660,
	0, 672, 0, 0, 661, 0, 0, 0, 0, 0,
	0, 0, 670, 669, 0, 0, 0, 0, 0, 666,
	0, 667, 0, 661, 0, 0, 660, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 668, 0, 0, 656, 657, 658, 0, 655, 652,
	653, 654, 647, 648, 649, 650, 651, 661, 0, 0,
	668, 0, 1505, 656, 657, 658, 669, 655, 652, 653,
	654, 647, 648, 649, 650, 651, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 668, 0, 0,
	656, 657, 658, 0, 655, 652, 653, 654, 647, 648,
	649, 650, 651, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 668, 0, 0, 656, 657, 658,
	0, 655, 652, 653, 654, 647, 648, 649, 650, 651,
	644, 0, 662, 663, 664, 1474, 0, 0, 0, 0,
	0, 0, 665, 0, 0, 0, 0, 0, 646, 644,
	671, 662, 663, 664, 0, 0, 0, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 645, 646, 0, 671,
	0, 0, 659, 0, 0, 0, 644, 0, 662, 663,
	664, 0, 0, 0, 0, 645, 0, 0, 665, 0,
	0, 659, 0, 0, 646, 0, 671, 0, 0, 0,
	0, 0, 0, 644, 0, 662, 663, 664, 0, 0,
	0, 0, 645, 0, 0, 665, 0, 0, 659, 0,
	0, 646, 0, 671, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 670, 645,
	0, 0, 0, 0, 0, 659, 672, 667, 0, 0,
	0, 0, 660, 0, 0, 0, 0, 670, 0, 0,
	0, 0, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 660, 666, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 0,
	0, 666, 0, 667, 0, 0, 0, 0, 660, 0,
	672, 0, 0, 661, 0, 0, 0, 0, 0, 0,
	0, 670, 669, 0, 0, 0, 0, 0, 666, 0,
	667, 0, 661, 0, 0, 660, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	668, 0, 0, 656, 657, 658, 0, 655, 652, 653,
	654, 647, 648, 649, 650, 651, 661, 0, 0, 668,
	0, 1416, 656, 657, 658, 669, 655, 652, 653, 654,
	647, 648, 649, 650, 651, 0, 0, 0, 0, 0,
	1393, 0, 0, 0, 0, 0, 668, 0, 0, 656,
	657, 658, 0, 655, 652, 653, 654, 647, 648, 649,
	650, 651, 0, 0, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 668, 0, 0, 656, 657, 658, 0,
	655, 652, 653, 654, 647, 648, 649, 650, 651, 644,
	0, 662, 663, 664, 1273, 0, 0, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 646, 644, 671,
	662, 663, 664, 0, 0, 0, 0, 0, 0, 0,
	665, 0, 0, 0, 0, 645, 646, 0, 671, 0,
	0, 659, 0, 0, 0, 644, 0, 662, 663, 664,
	0, 0, 0, 0, 645, 0, 0, 665, 0, 0,
	659, 0, 0, 646, 0, 671, 0, 0, 0, 0,
	0, 0, 644, 0, 662, 663, 664, 0, 0, 0,
	0, 645, 0, 0, 665, 0, 0, 659, 0, 0,
	646, 0, 671, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 645, 0,
	0, 0, 0, 0, 659, 672, 667, 0, 0, 0,
	0, 660, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	660, 666, 672, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 1157, 0, 1156,
	666, 0, 667, 0, 0, 0, 0, 660, 0, 672,
	0, 0, 661, 0, 0, 0, 0, 0, 0, 0,
	670, 669, 0, 0, 0, 0, 0, 666, 0, 667,
	0, 661, 0, 0, 660, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 666, 0, 0, 0, 661, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 668,
	0, 0, 656, 657, 658, 0, 655, 652, 653, 654,
	647, 648, 649, 650, 651, 661, 0, 0, 668, 0,
	1248, 656, 657, 658, 669, 655, 652, 653, 654, 647,
	648, 649, 650, 651, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 668, 0, 0, 656, 657,
	658, 0, 655, 652, 653, 654, 647, 648, 649, 650,
	651, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 656, 657, 658, 0, 655,
	652, 653, 654, 647, 648, 649, 650, 651, 644, 0,
	662, 663, 664, 0, 0, 0, 0, 0, 0, 0,
	665, 675, 0, 0, 816, 0, 646, 644, 671, 662,
	663, 664, 0, 0, 0, 0, 0, 0, 0, 665,
	0, 0, 674, 0, 645, 646, 0, 671, 0, 0,
	659, 0, 0, 0, 644, 0, 662, 663, 664, 0,
	0, 0, 0, 645, 0, 0, 665, 0, 0, 659,
	0, 0, 646, 0, 671, 817, 0, 0, 0, 0,
	0, 644, 0, 662, 663, 664, 0, 0, 0, 0,
	645, 0, 0, 665, 0, 0, 659, 0, 0, 646,
	0, 671, 0, 0, 0, 672, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 645, 0, 0,
	0, 0, 0, 659, 672, 667, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 660,
	666, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 666,
	0, 667, 0, 0, 0, 0, 660, 0, 672, 0,
	0, 661, 0, 0, 0, 0, 0, 0, 0, 670,
	669, 0, 0, 0, 0, 0, 666, 241, 667, 0,
	661, 0, 0, 660, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 669, 0, 668, 0,
	0, 656, 657, 658, 0, 655, 652, 653, 654, 647,
	648, 649, 650, 651, 661, 0, 0, 668, 0, 0,
	656, 657, 658, 669, 655, 652, 653, 654, 647, 648,
	649, 650, 651, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 656, 657, 658,
	0, 655, 652, 653, 654, 647, 648, 649, 650, 651,
	1127, 0, 1143, 1144, 1145, 0, 0, 0, 0, 0,
	0, 668, 1385, 0, 656, 657, 658, 0, 655, 652,
	653, 654, 647, 648, 649, 650, 651, 644, 0, 662,
	663, 664, 0, 0, 0, 0, 0, 0, 0, 665,
	0, 0, 1140, 0, 0, 646, 644, 671, 662, 663,
	664, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 1158, 0, 645, 646, 0, 671, 0, 0, 659,
	0, 0, 0, 644, 0, 662, 663, 664, 0, 0,
	0, 0, 645, 0, 0, 665, 0, 0, 659, 0,
	0, 646, 0, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 645,
	0, 0, 0, 0, 1163, 659, 0, 0, 0, 0,
	0, 0, 1141, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 0, 672, 667, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 660, 666,
	672, 0, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 0, 0, 0, 666, 0,
	667, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 1125, 0, 0, 669, 0,
	0, 0, 0, 1137, 1138, 1139, 0, 1136, 1133, 1134,
	1135, 1128, 1129, 1130, 1131, 1132, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 668, 0, 0,
	656, 657, 658, 0, 655, 652, 653, 654, 647, 648,
	649, 650, 651, 0, 0, 0, 668, 0, 0, 656,
	657, 658, 0, 655, 652, 653, 654, 647, 648, 649,
	650, 651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 656, 657, 658, 0,
	655, 652, 653, 654, 647, 648, 649, 650, 651, 644,
	0, 662, 663, 664, 0, 0, 0, 0, 0, 0,
	0, 665, 0, 0, 1120, 0, 0, 646, 644, 671,
	662, 663, 664, 0, 0, 0, 0, 0, 0, 0,
	665, 0, 0, 0, 0, 645, 646, 0, 671, 0,
	0, 659, 0, 0, 0, 644, 0, 662, 663, 664,
	0, 0, 0, 0, 645, 0, 0, 665, 0, 0,
	659, 0, 0, 646, 0, 671, 0, 0, 0, 0,
	0, 0, 644, 0, 662, 663, 664, 0, 0, 0,
	0, 645, 0, 0, 0, 0, 0, 659, 0, 0,
	646, 644, 671, 662, 663, 664, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 645, 646,
	0, 671, 0, 0, 659, 672, 667, 0, 0, 0,
	0, 660, 0, 0, 0, 0, 670, 645, 0, 0,
	0, 0, 0, 659, 0, 667, 0, 0, 0, 0,
	660, 666, 672, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 0, 0, 0,
	666, 0, 667, 0, 0, 0, 0, 660, 0, 672,
	0, 0, 661, 1127, 0, 1143, 1144, 1145, 0, 0,
	670, 669, 0, 0, 0, 1242, 0, 0, 672, 667,
	0, 661, 0, 0, 660, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 660, 0, 1140, 0, 0, 661, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 668,
	0, 0, 656, 657, 658, 0, 655, 652, 653, 654,
	647, 648, 649, 650, 651, 661, 0, 0, 668, 0,
	0, 656, 657, 658, 669, 655, 652, 653, 654, 647,
	648, 649, 650, 651, 661, 0, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 668, 0, 0, 656, 657,
	658, 1146, 655, 652, 653, 654, 647, 648, 649, 650,
	651, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 656, 657, 658, 0, 655,
	652, 653, 654, 647, 648, 649, 650, 651, 0, 0,
	0, 668, 0, 0, 656, 657, 658, 0, 655, 652,
	653, 654, 647, 648, 649, 650, 651, 1127, 0, 1143,
	1144, 1145, 0, 0, 0, 0, 1142, 0, 0, 1241,
	1127, 0, 1143, 1144, 1145, 0, 0, 0, 0, 0,
	0, 0, 0, 1127, 0, 1143, 1144, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 1140,
	1143, 1144, 1145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 1137, 1138, 1139, 0,
	1136, 1133, 1134, 1135, 1128, 1129, 1130, 1131, 1132, 0,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1146, 0, 1147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1146, 1141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1137, 1138, 1139, 0, 1136, 1133, 1134, 1135, 1128, 1129,
	1130, 1131, 1132, 1137, 1138, 1139, 0, 1136, 1133, 1134,
	1135, 1128, 1129, 1130, 1131, 1132, 1137, 1138, 1139, 0,
	1136, 1133, 1134, 1135, 1128, 1129, 1130, 1131, 1132, 0,
	0, 1137, 1138, 1139, 0, 1136, 1133, 1134, 1135, 1128,
	1129, 1130, 1131, 1132,
}
var sqlPact = [...]int{

	143, -1000, -130, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 661,
	-1000, -1000, -1000, 471, 579, 49, 963, 963, -1000, -1000,
	14935, 1602, 304, 304, 304, 396, 537, 67, -1000, 634,
	4, 14719, 11911, 1067, -17, 11263, 187, 143, 11695, 11911,
	14503, 915, 834, 11263, 14287, 14071, 13855, -1000, 7868, -1000,
	-1000, -1000, -1000, 684, -1000, -19, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 680, -1000, 13639, 13639, 821, -1000,
	-1000, 472, 241, 1082, -1000, -8, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 914, -1000, 677, 913, 912,
	240, 830, -1000, 821, -1000, -1000, -1000, 11263, -1000, 13423,
	855, 13207, -1000, 634, -1000, -1000, -1000, 698, 1064, 1064,
	1064, 1098, 69, 60, 67, -21, 11911, -1000, 189, -1000,
	-1000, -1000, -1000, -1000, -21, 5973, 5973, -1000, -1000, 187,
	-1000, 209, 10163, -146, -1000, 5499, -1000, 687, 989, 465,
	459, 984, 11263, 11911, 427, 12991, -1000, 979, 74, 978,
	-1000, -31, 977, -1000, -33, -1000, -1000, -1000, -1000, -1000,
	-1000, 187, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11479, 961, 11479, -1000, -1000,
	-1000, 783, 8344, 8107, 1033, 1107, -1000, -1000, -1000, -12,
	3357, 11911, 920, 11479, 11911, -1000, 11911, -1000, 768, -1000,
	-1000, 85, -1000, 186, 727, 12775, -1000, 725, -1000, 698,
	-1000, 651, 757, 6230, 6941, 67, -1000, -1000, 67, 67,
	6941, -1000, -1000, 11911, -21, 1123, 11911, 899, -23, -1000,
	16347, -1000, -1000, 6941, 6941, 6941, 6941, 6941, 538, 185,
	-1000, -1000, -1000, 3832, -1000, -1000, -146, 185, 200, -1000,
	-1000, 182, -146, -1000, -1000, -1000, -1000, 179, 1215, 319,
	-1000, -1000, -1000, 6941, 246, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 919, -1000, -1000, -1000, -1000, -1000,
	-1000, 178, 177, 176, 172, 171, 170, 167, 163, 162,
	158, 157, 526, -1000, 258, -1000, -1000, 258, 258, -1000,
	146, 146, 147, -1000, -1000, -1000, 146, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 156, 24, -1000, -1000,
	-1000, 11911, -146, -1000, 3119, 3357, 6941, -43, -1000, 16958,
	-1000, -48, 536, -1000, 10821, 1055, 1054, 1066, 11263, 379,
	377, 11911, 251, 48, 1121, 9731, -1000, 11911, 11911, -1000,
	11911, -1000, -1000, 11911, 11911, 11911, 4, 10379, 372, -35,
	11911, 11911, -1000, 898, 663, -26, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1189, -1000, -1000, -1000,
	-1000, 1205, -26, -1000, -1000, -1000, -1000, -1000, 318, -1000,
	-1000, -1000, -1000, 3357, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11911, -1000, -1000, -1000, -1000, -1000, 11263, 10595, 962, 662,
	722, -1000, 957, -1000, -1000, -1000, -1000, 16958, -1000, 16958,
	460, 840, -1000, 840, -27, -1000, 16328, -1000, 155, -47,
	-1000, 251, 9515, 5973, 2077, 11911, 380, 6941, 6941, 6941,
	6941, 6941, 6941, 6941, 6941, 6941, 6941, 6941, 6941, 6941,
	6941, 6941, 6941, 6941, 6941, 6941, 6941, 6941, 781, 368,
	1176, 588, 144, 791, 3357, -1000, -1000, 1151, 1151, 1151,
	17012, 17012, 129, -1000, -131, 16028, -28, -146, -1000, -1000,
	5025, 4786, -146, 2825, -1000, 845, 1204, 254, 16958, 929,
	869, 154, 6941, 769, 6941, 7178, 6941, 6941, 4071, 6941,
	6941, 6941, 6941, -1000, 152, -1000, -1000, -1000, -1000, 1198,
	-1000, -1000, 1192, -1000, 1191, 251, 57, -1000, -1000, -1000,
	-1000, 2115, 5499, -1000, 673, 11911, 11911, 11911, -1000, -1000,
	721, 12559, -1000, 2077, 11911, -1000, 150, 148, 789, 786,
	11911, 11911, 12343, 12127, 11911, 666, 11911, 11911, 449, -1000,
	6941, 658, -1000, 9043, 262, 11911, 17, -1000, -1000, -1000,
	232, 11911, -1000, -1000, -1000, 74, -1000, -31, -1000, -1000,
	11911, -35, -37, 11911, -1000, 451, 520, -1000, -1000, 8581,
	-1000, -1000, -1000, 845, 1181, -1000, -68, -1000, -1000, 56,
	-41, -1000, -1000, -1000, -1000, 11911, 193, 11911, 11911, 955,
	11911, -1000, -1000, -1000, 6941, -1000, -1000, -1000, 4, 11911,
	-1000, 864, -42, 1312, 11047, 11047, -1000, 8807, -1000, -1000,
	1126, -1000, -1000, -1000, -1000, 40, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 147, 526, 146, 146,
	146, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 258,
	258, 258, -1000, -1000, 239, 738, 738, 1124, 1124, 1124,
	800, 800, 1580, 570, 2390, 2390, 2390, 359, 484, 484,
	2390, 2390, 2390, 17012, 16985, 216, 6941, 367, 576, 144,
	6941, -1000, 1086, -1000, -1000, -1000, 897, 142, 7178, 7178,
	-1000, -1000, -1000, 3832, 141, -1000, -1000, -1000, -1000, -1000,
	140, 6941, -1000, 6941, -44, -122, -1000, 16958, -1000, -51,
	-1000, -1000, -45, 6941, 6941, 6941, 55, -1000, 361, -1000,
	357, 355, 353, -1000, 137, 54, 413, -1000, 6941, 541,
	136, 124, 6941, 16939, 53, 892, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 50, 16693, 46, 17290, -1000, 7178, 7178,
	7178, 3832, 123, 45, 16082, -123, 16666, 5736, 5736, 5736,
	44, 16647, 6941, -123, 2287, -52, -53, -58, 1174, -59,
	43, 42, 864, -1000, -1000, 6941, -1000, -1000, -1000, 339,
	337, 954, -1000, 707, -1000, 650, 6941, 11911, 119, 113,
	598, -1000, 946, 604, 945, 604, -1000, -48, 535, -1000,
	-1000, 331, 16958, -1000, 1051, -60, -1000, -1000, 251, 9731,
	5499, -64, -1000, -68, -68, -1000, -1000, -1000, -1000, -1000,
	41, 11911, -1000, 10595, 112, 11911, 103, 101, 11911, -1000,
	-1000, 38, -1000, -1000, -1000, -1000, -1000, 860, 1096, 9515,
	825, 805, 9515, 981, 559, 559, 559, -1000, -1000, -1000,
	11911, 100, -1000, 9279, 37, 1312, 202, 201, -1000, 1172,
	6941, 216, 6941, 7178, 7178, -1000, 216, -1000, -1000, -1000,
	-1000, 891, 99, 6941, 2077, 17277, 17113, -66, -1000, 3832,
	4547, -93, 16009, 6941, -1000, -1000, 200, -1000, 35, 5262,
	-1000, 16374, -24, -24, -1000, 736, 767, 600, 433, 1166,
	1214, 966, -1000, 6941, 16401, -1000, 9947, 252, 568, 15763,
	2077, -1000, 6941, -1000, 887, 6941, -1000, 2077, 7178, 7178,
	7178, 7178, 7178, 7178, 7178, 7178, 7178, 7178, 7178, 7178,
	7178, 7178, 7178, 7178, 7178, 7178, 820, 7178, 1145, 1145,
	1145, -105, 4308, -1000, 918, 887, 6941, 6941, 2077, 33,
	32, 26, -1000, 6941, -123, 6941, -1000, -1000, -1000, 25,
	-1000, 1160, -1000, -1000, 860, 16055, 11911, 11911, 11911, 943,
	1524, -1000, 15736, -70, 11911, 11911, -1000, 844, 886, 295,
	11911, -1000, 11911, -1000, 11911, 11911, 11911, 11911, 135, 4,
	-1000, -1000, -1000, 228, 1213, -1000, -1000, 11911, 97, 10595,
	7652, 617, -1000, 249, 6941, 6941, 1312, 9515, 9515, 908,
	803, 9515, -1000, -1000, -1000, -1000, 96, 11911, 11047, 362,
	1155, 21, 1119, 216, 16620, 1933, 6941, 2077, 17031, -72,
	-1000, 6941, 6941, -1000, 15709, -76, -1000, 6941, -1000, 16958,
	-1000, 1212, 6941, 19, 18, 14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13, -1000, -1000, 16958, 6941, -1000, -1000,
	15151, 6941, 12, -1000, 10, 16958, 918, 16958, -1000, 446,
	446, 1145, 1145, 1145, 342, 342, 419, 750, 376, 376,
	376, 544, 382, 382, 376, 376, 376, 885, 764, 95,
	17303, 6941, -77, -1000, -1000, -1000, 16958, 16958, 6, -1000,
	-1000, -1000, -123, 15690, -1000, 2, 249, -1000, -1000, -1000,
	-1000, 11911, -1000, 11911, -1000, 11911, 702, -1000, -1000, 774,
	94, 7178, 11911, -1000, 565, -78, -82, 700, -1000, 692,
	6941, -1000, 2077, 604, 604, -1000, 330, 317, -1000, 968,
	7652, 1056, -1000, 93, -1000, -83, 11911, 0, -84, -1000,
	61, 1075, 6941, -1000, -1000, 90, 11911, -1000, 11911, 16958,
	-123, -1000, 908, -1000, 81, 6941, 9515, -1000, 11911, -88,
	-1000, -1000, 196, 195, -1000, 6941, 6941, 17031, -94, -1000,
	2077, 216, 216, -1000, -1000, 15444, -1000, 16374, -1000, -1000,
	-1000, -1000, 16958, 534, -1000, 15417, -1000, -1000, -1000, 7178,
	878, 80, 2077, 15390, -1000, -1000, -1000, -1000, -1000, -1000,
	964, -1000, -1000, -1000, 6941, 17303, 68, -1000, 77, -1000,
	-1000, -1000, 503, -1000, -1000, 16958, 1078, -1000, -1000, 11911,
	11911, 378, -95, 11911, -1000, -1000, 3593, 565, -96, -1000,
	565, 7652, 1050, -146, 11911, 1050, 15371, 2825, 76, -111,
	-1000, 1113, -1000, 11911, 16958, -1000, -100, -1000, -1000, -1000,
	216, 216, -1000, -1000, -1000, -2, 568, 1094, -1000, 17318,
	7178, 2077, -101, -1000, -1000, 2546, 747, 11911, 11911, 11911,
	273, 11911, -1000, -1000, 395, -1000, 251, -1000, -1000, 565,
	-1000, -1000, -1000, -1000, -1000, 1075, -45, 7652, 11911, 75,
	-106, -1000, -1000, 635, 6941, 17318, -110, -1000, -1000, 582,
	672, -114, -118, 68, -1000, 6941, -1000, 9731, -1000, -1000,
	1050, -3, -126, -1000, -1000, -1000, -6, 6704, 6704, -123,
	-1000, -1000, 609, 593, 467, -1000, -1000, -1000, -1000, -1000,
	747, 16958, -116, -1000, -1000, 565, -1000, -1000, -1000, 7415,
	709, 438, 2573, -1000, -1000, 1011, -1000, 276, 737, 737,
	582, -1000, -1000, 1129, -1000, -1000, -1000, -1000, -1000, -1000,
	1137, -1000, -1000, 787, -1000, -1000, 6467, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1442, 1440, 1128, 1435, 1433, 1428, 1427, 1426, 74,
	1424, 1423, 84, 1419, 70, 1417, 1416, 1415, 57, 1414,
	1413, 1411, 1409, 65, 50, 1756, 102, 94, 1407, 1406,
	1405, 10, 78, 73, 1401, 30, 1399, 517, 1255, 45,
	1396, 19, 26, 69, 1392, 1391, 1385, 1380, 34, 1379,
	1378, 1377, 11, 35, 14, 1373, 16, 24, 1372, 1371,
	71, 1365, 72, 82, 89, 265, 1364, 1362, 461, 1361,
	12, 46, 1355, 28, 1354, 29, 52, 95, 1353, 510,
	42, 22, 43, 1352, 1351, 1350, 56, 60, 32, 1349,
	37, 41, 1347, 47, 1346, 90, 92, 1345, 1344, 1343,
	1342, 1340, 1339, 1095, 1338, 8, 38, 44, 4, 23,
	0, 789, 714, 1337, 54, 36, 40, 25, 1336, 79,
	1335, 1334, 1331, 1330, 1329, 53, 1328, 1327, 48, 104,
	33, 61, 64, 21, 27, 55, 103, 109, 81, 1326,
	86, 1325, 39, 1324, 1321, 875, 97, 1320, 1316, 1314,
	859, 677, 640, 156, 1313, 1308, 313, 272, 1303, 1299,
	59, 1296, 1295, 105, 1294, 99, 80, 1293, 85, 1292,
	66, 1290, 450, 77, 67, 1289, 93, 49, 1283, 1282,
	1281, 18, 1, 9, 5, 6, 3, 17, 15, 1280,
	1279, 87, 62, 1274, 475, 1273, 1271, 31, 1269, 1267,
	13, 1266, 20, 1260, 7, 2, 1251, 101, 1247, 68,
	1239, 1143, 1235, 106, 1225, 1224, 1144, 58,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 64, 64,
	63, 63, 67, 67, 11, 11, 12, 12, 12, 12,
	141, 141, 140, 13, 17, 207, 207, 207, 211, 211,
	212, 212, 213, 213, 213, 213, 213, 213, 213, 209,
	209, 19, 19, 19, 103, 103, 102, 102, 102, 102,
	104, 104, 104, 104, 165, 163, 163, 170, 170, 170,
	46, 46, 46, 46, 46, 162, 162, 162, 162, 171,
	171, 171, 171, 171, 171, 171, 47, 47, 47, 169,
	169, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 164, 164, 208, 208, 210, 210, 8, 8, 48,
	48, 49, 49, 107, 107, 107, 106, 179, 179, 180,
	180, 180, 181, 181, 181, 181, 181, 181, 181, 178,
	178, 176, 176, 177, 177, 177, 177, 214, 214, 105,
	105, 52, 52, 184, 184, 184, 184, 182, 182, 182,
	182, 182, 185, 183, 186, 186, 186, 186, 186, 129,
	129, 129, 22, 7, 7, 92, 92, 56, 56, 133,
	133, 133, 42, 42, 31, 31, 31, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 93, 93, 94, 94,
	21, 21, 21, 216, 216, 36, 36, 37, 6, 6,
	14, 44, 44, 99, 99, 99, 101, 101, 101, 100,
	100, 100, 23, 70, 70, 71, 71, 139, 72, 72,
	18, 18, 25, 25, 24, 24, 24, 24, 24, 24,
	26, 26, 27, 27, 27, 27, 27, 27, 27, 192,
	192, 192, 194, 194, 191, 15, 15, 15, 15, 193,
	193, 215, 215, 79, 79, 79, 51, 50, 50, 54,
	54, 53, 55, 55, 132, 77, 77, 77, 77, 95,
	96, 96, 97, 97, 98, 98, 76, 76, 115, 115,
	28, 28, 60, 60, 61, 61, 134, 134, 134, 134,
	135, 135, 135, 135, 135, 135, 130, 130, 130, 130,
	131, 131, 82, 82, 82, 82, 80, 80, 81, 81,
	136, 136, 136, 136, 78, 78, 137, 137, 137, 108,
	108, 142, 142, 142, 59, 59, 59, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 146, 146, 146, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 147, 147, 154,
	154, 155, 155, 156, 157, 148, 148, 149, 149, 150,
	151, 158, 158, 158, 160, 160, 152, 152, 153, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 88, 88, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 187,
	187, 187, 187, 187, 187, 187, 189, 189, 190, 190,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 195, 195, 196, 196, 197, 197, 198, 198, 200,
	201, 201, 201, 202, 206, 206, 199, 199, 203, 203,
	203, 204, 204, 205, 205, 205, 205, 205, 119, 119,
	119, 120, 120, 121, 127, 127, 127, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 40, 40, 40, 65, 65, 117, 117,
	116, 116, 116, 118, 118, 66, 159, 159, 159, 159,
	159, 159, 159, 83, 83, 89, 84, 84, 85, 85,
	85, 85, 85, 85, 90, 91, 86, 86, 86, 114,
	114, 122, 126, 126, 125, 124, 124, 123, 123, 109,
	109, 109, 109, 109, 73, 73, 217, 217, 128, 128,
	74, 74, 75, 69, 69, 68, 68, 138, 138, 138,
	138, 62, 62, 43, 43, 57, 57, 58, 58, 41,
	41, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 161, 161, 161, 38, 38, 38, 39, 39,
	167, 167, 167, 168, 168, 168, 168, 166, 166, 166,
	166, 166, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 3, 3, 4,
	2, 2, 0, 2, 0, 2, 0, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 3, 2, 0, 3,
	1, 2, 2, 1, 1, 2, 4, 2, 5, 6,
	7, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	3, 2, 2, 1, 0, 1, 0, 3, 3, 6,
	6, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 7, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 2, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 4, 5, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 6, 2,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 2,
	2, 2, 3, 5, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -193, 81, 87, 99, 177, -24, -25,
	190, 191, 29, 50, 179, 215, 56, -192, -27, -26,
	260, 235, 242, 186, -28, 203, 228, 263, 203, 68,
	108, 76, 111, 222, 68, 108, 203, -12, 260, -18,
	-14, -23, -9, -211, 18, -212, -213, 56, 81, 99,
	186, 111, 76, 222, -211, -103, 129, 188, 211, -104,
	-102, -165, 207, 137, -63, -38, 4, -172, -174, 16,
	17, 19, 28, 29, 33, 37, 39, 49, 50, 51,
	53, 55, 58, 59, 66, 67, 68, 69, 71, 76,
	80, 81, 87, 91, 92, 94, 100, 105, 106, 111,
	119, 121, 126, 133, 134, 135, 136, 139, 140, 142,
	145, 147, 148, 154, 157, 160, 161, 164, 167, 168,
	170, 171, 173, 174, 175, 177, 179, 180, 182, 184,
	185, 187, 190, 191, 193, 195, 197, 200, 198, 204,
	205, 215, 216, 217, 218, 221, 222, 225, 226, 227,
	231, 236, 237, 238, 239, 30, 31, 32, 34, 35,
	38, 42, 43, 45, 70, 72, 73, 86, 88, 93,
	101, 103, 112, 113, 114, 116, 124, 144, 146, 155,
	159, 163, 165, 169, 181, 194, 199, 201, 208, 212,
	213, 228, 229, 4, 68, 49, 69, 100, 108, 204,
	207, 211, 18, -216, 211, -216, -216, -215, 203, 203,
	-92, 68, 220, -26, -27, -25, -53, -54, 219, 115,
	85, 153, -24, -25, -192, -194, 170, -191, -38, 129,
	137, 188, 211, 207, -194, -50, -51, 18, 78, 264,
	-136, -43, 151, -38, -75, 260, -3, -136, 106, -38,
	-43, 106, 97, 117, -137, -136, -38, 106, -62, 106,
	-43, -64, 106, -63, -141, -140, -168, 4, -172, -174,
	-173, 228, 47, 57, 98, 110, 118, 120, 125, 127,
	138, 156, 158, 178, 192, 150, 264, 150, -103, -103,
	-37, 119, 209, 245, 97, 239, -47, 6, 74, -67,
	262, 97, -208, 150, 97, -164, 97, 239, 119, -36,
	-37, -78, -136, -63, 106, 108, -38, 106, -53, -54,
	-77, -95, -96, 128, 149, -79, 18, 78, -79, -79,
	37, 261, 261, 264, -194, -58, 260, -69, -68, -138,
	-110, 253, -112, 251, 252, 257, 141, 240, -119, 220,
	-43, -113, 9, 260, -122, -189, -25, 86, 24, -120,
	-121, 181, -38, 8, 5, 6, 7, -41, -144, -153,
	214, 89, 143, 40, -187, -188, 4, -172, -167, -145,
	-155, -149, -152, 116, 47, 61, 64, 62, 65, 189,
	223, 41, 88, 159, 163, 201, 212, 213, 144, 45,
	101, 124, 80, 31, 32, 34, 35, 42, 43, 70,
	72, 73, 93, 112, 113, 114, 146, 169, 194, 208,
	229, -173, -156, -157, -150, -151, -158, -68, -75, 253,
	-43, 260, -73, -109, 262, 265, 258, -74, -128, -110,
	74, -33, 173, -32, 17, 19, 81, 226, 86, 173,
	173, 86, -137, -44, -43, 190, -38, 25, 86, -35,
	264, 39, 175, 86, 264, 86, 261, 264, -207, -62,
	203, 68, -213, -207, 126, -163, 74, -170, -162, -129,
	9, 214, 89, 150, -169, 5, 252, -161, -168, 6,
	8, 251, -163, 74, 59, -171, 6, 4, -153, -129,
	74, 129, 116, 262, -166, 4, -172, -174, -173, -175,
	18, 20, 21, 22, 23, 24, 25, 26, 27, 36,
	40, 41, 44, 46, 48, 54, 56, 60, 61, 62,
	63, 64, 65, 74, 75, 77, 78, 79, 82, 83,
	85, 89, 90, 95, 96, 97, 99, 102, 104, 107,
	108, 109, 115, 117, 122, 123, 128, 130, 131, 141,
	143, 149, 150, 151, 152, 153, 162, 166, 172, 176,
	186, 189, 196, 202, 203, 206, 209, 210, 214, 219,
	220, 223, 224, 230, 232, 233, 234, 235, -165, -210,
	95, -207, -165, -165, 126, -35, 264, 260, 141, -39,
	106, -38, 141, -77, -96, -95, -97, -110, 18, -110,
	-112, -26, -26, -26, -55, -132, -110, -191, 25, -57,
	-38, -60, 97, 264, 10, 46, 28, 251, 252, 253,
	254, 255, 248, 249, 250, 247, 243, 244, 245, 52,
	132, 183, 12, 13, 14, 22, 152, 127, 240, 192,
	118, 30, 107, -40, 25, 4, -45, -110, -110, -110,
	-110, -110, 158, -25, -25, -110, -65, -73, -25, -116,
	258, 260, -73, 260, 6, 6, 260, -123, -110, -195,
	236, 95, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 165, -160, 231, -160, -160, -146, 260,
	-146, -147, 260, -146, 260, -60, -43, -109, -166, 253,
	-166, -110, 264, 261, 264, 209, -93, 54, 48, -106,
	106, 48, -176, -38, 54, -177, 44, 220, 166, 96,
	-93, 54, -93, 54, 54, -136, 209, 209, -43, -108,
	233, -99, -18, 260, 74, 25, -70, -71, -139, -72,
	-43, 260, -38, -38, -43, -62, -63, -64, -12, -140,
	209, -62, -57, 97, -46, 168, 174, 195, 187, 264,
	5, 8, 8, 6, 260, -166, -209, -38, -136, -48,
	-49, -107, -106, -178, -176, 108, 220, 86, 150, 141,
	86, -98, 181, 182, 264, -31, 26, 77, 260, 264,
	261, -108, -61, -134, -136, -25, -135, 260, -138, -142,
	-143, -145, -154, -148, -152, -153, 33, 38, 205, 199,
	112, 113, 114, 194, 31, 169, 93, 80, 73, 72,
	146, 35, 34, -156, -157, -150, -151, 70, 208, 32,
	43, 42, 229, -63, 207, -110, -110, -110, -110, -110,
	-110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
	-110, -110, -110, -110, -110, -110, 127, 192, 30, 107,
	209, 143, 141, 214, 89, 221, 78, 147, -217, 202,
	27, -114, -25, 260, -127, 23, 196, 18, -166, -119,
	181, 260, 261, 264, -65, -118, 259, -110, -116, -65,
	261, 261, -65, 230, 18, 78, 253, -87, 238, 135,
	71, 105, 134, -88, 185, 8, -126, -125, 232, -196,
	91, 102, 260, -110, -66, -159, 4, 238, 135, 71,
	105, 134, 185, -83, -110, -84, -111, -112, 251, 252,
	257, 260, 181, -85, -110, -65, -110, 36, 123, 210,
	-86, -110, 97, -65, -110, -65, -65, -65, 260, 8,
	8, 8, -108, 261, 259, 266, -128, -32, -43, -38,
	-38, 141, -106, 106, -142, -38, 260, 260, 121, 121,
	-38, -38, 106, -38, 106, -38, -38, -33, 173, -38,
	-38, 173, -110, -101, 150, -62, 228, -38, -60, 264,
	245, -62, -35, -209, -209, 218, 51, 168, -170, -87,
	8, 264, 261, 264, -39, 108, -63, -43, 86, -38,
	-132, -15, -18, -14, -23, -9, -38, -76, 102, 264,
	57, -82, 120, 138, 98, 125, 178, 110, -131, -130,
	25, -38, -131, -25, -135, -134, -59, 24, -87, 260,
	239, -110, 209, -217, 202, -114, -110, 143, 214, 89,
	221, 78, 147, 97, 260, -111, -111, -65, -25, 260,
	260, -65, -110, 264, 259, 259, 264, 261, -54, 264,
	-53, -110, -65, -65, 261, 209, 209, 209, 209, 260,
	261, -124, -125, 82, -110, -201, 157, 260, 260, -110,
	25, 261, 97, 261, -89, 162, 261, 10, 251, 252,
	253, 254, 255, 248, 249, 250, 247, 243, 244, 245,
	52, 132, 183, 12, 13, 14, 118, 107, -111, -111,
	-111, -65, 260, 261, -90, -91, 97, 95, 25, -86,
	-86, -86, 261, 97, -65, 264, 261, 261, 261, 8,
	261, 264, 261, 261, -76, -110, 209, 209, 86, 141,
	-179, -177, -110, -57, 260, 260, -29, 81, 190, -94,
	86, -35, 86, -35, 209, -93, 54, 209, 53, 261,
	-108, -71, -128, 261, 261, -38, -107, 260, -39, 260,
	260, -38, 261, -115, 104, 37, -134, 120, 120, -134,
	-82, 120, -80, 156, -80, -80, -38, 260, 261, 258,
	258, 8, -110, -110, -111, -111, 97, 260, -110, -117,
	-142, 22, 22, 261, -110, -65, 261, 264, 261, -110,
	-116, 261, 230, -54, -54, -54, 135, 105, 134, -88,
	134, -88, -88, 8, 6, 83, -110, 206, -202, -38,
	260, 233, -53, 261, -142, -110, -90, -110, -142, -111,
	-111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
	-111, -111, -111, -111, -111, -111, -111, 78, 141, 147,
	-111, 264, -65, 261, -91, -90, -110, -110, -142, 261,
	261, 261, -65, -110, 261, 8, -115, 259, -38, -38,
	-106, 86, -180, 54, -181, 46, 141, 143, 220, 166,
	44, 74, 172, 261, 261, -57, -57, 141, 74, 141,
	74, 67, 216, -38, -38, -43, -38, -38, -38, -100,
	260, 150, -18, 245, 6, -57, 260, -48, -56, -133,
	-38, -190, 260, -187, -188, -41, 150, -197, 234, -110,
	-65, -134, -134, -81, 224, 150, 120, -134, 260, -57,
	-130, 259, 8, 8, 261, 22, 22, -110, -117, 261,
	264, -110, -110, 261, 261, -110, 6, -110, 261, 261,
	261, 261, -110, -206, -38, -110, 261, 261, -91, 97,
	78, 147, 260, -110, 261, 261, 261, 261, -197, -106,
	-38, -63, 143, 121, 260, -111, -43, -105, -214, 55,
	200, 261, 261, 143, 143, -110, -142, -35, -35, 209,
	209, 79, -56, 54, -75, -25, 260, 261, -57, 261,
	261, 264, -42, -73, 46, -42, -110, 260, -43, -198,
	-200, -38, -81, 260, -110, -134, -57, 261, 259, 259,
	-110, -110, 261, -142, 261, -54, -199, 161, 261, -111,
	97, 260, -117, 261, -181, -110, -52, 260, 260, 172,
	-34, 46, -38, -38, 222, 142, 261, -38, -105, 261,
	-105, -133, -31, -63, -31, 261, -65, 260, 264, 25,
	-57, 261, 261, -54, 37, -111, -117, 261, 261, -184,
	133, -57, -57, -43, -30, 224, -63, 190, -108, -105,
	-42, -54, -56, -200, -202, 261, -203, 167, 182, -65,
	261, -182, -185, -183, 150, 98, 160, 193, 261, 261,
	-52, -110, -70, -31, 261, 261, 261, -204, -205, 30,
	217, 59, -110, -204, -183, 150, -185, 150, 222, 76,
	-184, -108, -105, -205, 164, 94, 181, 164, 94, -186,
	140, 175, 39, 190, -186, -182, 22, 16, 143, 74,
	-205,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 290, 0, 0, 260, -2,
	0, 0, 234, 234, 234, 292, 206, 289, -2, 300,
	0, 0, 0, 298, 274, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 66,
	67, 68, 69, 0, 78, 79, 80, 82, 83, 84,
	85, 86, 87, 88, 0, 91, 756, 787, 797, 95,
	100, 0, 845, -2, 104, 60, 705, 706, 707, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 757, 758, 759, 760, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 846, 847,
	848, 849, 850, 131, 132, 0, 134, 144, 0, 142,
	0, 0, 140, 236, 233, 231, 232, 0, 291, 0,
	0, 0, 205, -2, 270, 271, -2, 0, 295, 295,
	295, 0, 0, 271, 0, 279, 775, 282, 688, 756,
	761, 787, 797, 845, 280, 674, 0, 297, 296, 0,
	275, 350, 0, 683, 320, 0, 2, 0, 751, 0,
	0, 751, 0, 0, 0, 356, 52, 751, 43, 751,
	681, 56, 751, 58, 0, 70, 72, 713, 714, 715,
	716, 849, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 0, 0, 0, 92, 93,
	94, 0, 0, 0, 0, 0, 103, 126, 127, 61,
	0, 0, 146, 0, 0, 137, 0, 138, 0, 230,
	235, 43, 354, 0, 751, 709, 238, 751, -2, 0,
	266, 307, 308, 0, 0, 0, 293, 294, 0, 0,
	0, 262, 263, 0, 281, 0, 0, 323, 673, 675,
	679, 680, 435, 0, 0, 0, 0, 0, 0, 0,
	517, 518, 519, 0, 521, 522, 523, 824, 0, 527,
	528, 841, 683, 691, 692, 693, 694, 0, 0, 0,
	699, 700, 701, 658, 562, 537, -2, -2, 689, 377,
	378, 379, 380, -2, 851, 541, 542, 543, 544, 545,
	546, 0, 825, 837, 838, 844, 847, 848, 834, 820,
	827, 833, 743, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 712, 401, 402, 407, 408, 410, 323, 321, 351,
	352, 0, 684, 664, 0, 0, 0, 0, 670, 668,
	669, 20, 227, 22, 0, 227, 227, 0, 0, 0,
	0, 0, 360, 0, 241, 0, 357, 0, 0, 54,
	0, 41, 42, 0, 0, 0, 290, 0, 0, 75,
	0, 739, 81, 0, 0, 96, 98, 105, 107, 108,
	109, 115, 116, 117, 118, 199, 0, 201, 129, 130,
	702, 0, 97, 99, 101, 102, 119, 120, 0, 123,
	124, 125, 418, 0, 62, 717, 718, 719, 720, 721,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 133, 135,
	0, 143, 136, 141, 139, 202, 0, 150, 0, 0,
	751, 708, 0, 269, 305, 306, 309, 312, 313, 310,
	435, 276, 277, 278, 301, 302, 216, 283, 0, 0,
	685, 360, 0, 0, 0, 0, 0, 597, 598, 599,
	600, 601, 604, 605, 602, 603, 606, 607, 608, 609,
	0, 0, 610, 611, 612, 0, 0, 614, 0, 0,
	0, 667, 0, 0, 0, 678, 613, 439, 440, 441,
	462, 463, 0, 489, -2, 616, 0, 524, 525, 526,
	0, 0, -2, 0, 696, 432, 0, 0, 657, 564,
	0, 0, 0, 0, 0, 637, 643, 0, 0, 0,
	0, 0, 0, 391, 404, 414, 412, 411, 393, 0,
	392, 390, 0, 394, 0, 360, 0, 665, 659, 660,
	661, 0, 0, 672, 0, 0, 0, 0, 226, 24,
	751, 0, 34, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 248, 243, 0, 0, 0, 323, 253, 255, 256,
	0, 0, 358, 53, 682, 43, 59, 57, 65, 71,
	0, 76, 77, 0, 237, 0, 0, 113, 114, 0,
	200, 704, 703, 432, 0, 63, 145, 89, 355, 0,
	149, 151, 153, 154, 155, 709, 0, 0, 0, 0,
	0, 311, 314, 315, 0, 304, 214, 215, 290, 0,
	687, 317, 322, 324, 341, 341, 328, 0, 676, 436,
	366, 367, 368, 369, 370, 432, 373, 374, 375, 376,
	384, 385, 386, 387, 388, 389, 398, 0, 383, 383,
	383, 395, 396, 399, 400, 405, 406, 416, 417, 415,
	415, 415, 413, 437, 0, 442, 443, 444, 445, 446,
	447, 448, 449, 450, -2, -2, -2, 454, 455, 456,
	-2, -2, -2, 460, 461, -2, 615, 0, 667, 0,
	0, 468, 0, 471, 473, 475, 0, 0, 0, 0,
	666, 485, 649, 0, 0, 594, 595, 596, 677, 470,
	0, 0, 520, 0, 0, 0, 622, 616, 623, 0,
	-2, 529, 300, 0, 0, 0, 0, 697, 419, 420,
	421, 422, 423, 424, 433, 0, 656, 652, 0, 572,
	0, 0, 0, 0, 0, 0, 626, 627, 628, 629,
	630, 631, 632, 0, 0, 0, 0, 490, 0, 0,
	0, 0, 841, 0, 616, 642, 0, 0, 0, 0,
	0, 616, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 353, 662, 0, 671, 23, 218, 0,
	0, 0, 26, 751, 158, 0, 0, 0, 0, 0,
	229, 35, 751, 43, 751, 43, 36, 21, 227, 217,
	220, 0, 359, 240, 0, 0, 245, 242, 360, 0,
	0, 0, 55, 73, 74, 110, 111, 112, 106, 121,
	0, 0, 147, 0, 0, 709, 0, 0, 0, 239,
	303, 0, 285, 286, 287, 288, 686, 319, 0, 0,
	0, 0, 0, 0, 347, 347, 347, 345, 326, 340,
	0, 339, 327, -2, 328, 0, 361, 363, 371, 0,
	0, -2, 0, 0, 0, 486, -2, 469, 472, 474,
	476, 0, 0, 0, 0, 0, 0, 0, 487, 0,
	0, 0, 617, 0, 620, 621, 0, -2, 0, 0,
	299, 300, 300, 300, 535, 0, 0, 0, 0, 0,
	0, 0, 653, 0, 0, 536, 0, 0, 0, 0,
	0, 548, 0, 549, 0, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 492, 493,
	494, 0, 0, 551, 640, 641, 0, 0, 0, 0,
	0, 0, 556, 0, 647, 0, 558, 559, 560, 0,
	381, 0, 397, 409, 319, 0, 0, 0, 0, 0,
	156, 171, 0, 0, 0, 0, 28, 0, 0, 0,
	0, 32, 0, 38, 0, 0, 0, 0, 251, 0,
	252, 254, 257, 0, 0, 90, 152, 0, 0, 150,
	0, 0, 284, 566, 0, 0, 325, 0, 0, 0,
	0, 0, 342, 346, 343, 344, 337, 0, 330, 0,
	0, 0, 438, -2, 0, 0, 0, 0, -2, 0,
	618, 0, 0, 650, 0, 0, 589, 0, -2, 617,
	624, 530, 0, 0, 0, 0, 425, 426, 427, 428,
	429, 430, 431, 0, 698, 651, 655, 0, 570, 571,
	575, 0, 0, 540, 0, 625, 634, 635, 491, 495,
	496, 497, 498, 499, 500, 501, 502, 503, -2, -2,
	-2, 507, 508, 509, -2, -2, -2, 0, 0, 0,
	636, 0, 0, 592, 638, 639, 644, 645, 0, 553,
	554, 555, 646, 0, 403, 0, 566, 663, 222, 224,
	25, 0, 157, 0, 160, 0, 0, 163, 164, 0,
	0, 0, 0, 173, 180, 0, 0, 0, 40, 0,
	0, 228, 0, 43, 43, 219, 0, 0, 221, 0,
	0, 0, 244, 0, 122, 0, 0, 0, 0, 207,
	213, 213, 0, 538, 539, 0, 0, 272, 0, 318,
	316, 331, 0, 333, 0, 0, 0, 335, 0, 0,
	329, 364, 0, 0, 372, 0, 0, -2, 0, 479,
	0, -2, -2, 488, 588, 617, 695, 300, 531, 533,
	534, 434, 654, 577, 574, 0, 561, 547, 633, 0,
	0, 0, 0, 617, 591, 552, 557, 382, 273, 27,
	0, 161, 162, 165, 0, 167, 182, 174, 0, 177,
	178, 175, 0, 29, 30, 39, 45, 31, 37, 0,
	0, 0, 0, 0, 258, 259, 0, 180, 0, 148,
	180, 0, 216, 690, 0, 216, 0, 0, 0, 565,
	567, 0, 332, 0, 349, 334, 0, 338, 365, 362,
	-2, -2, 480, 619, 590, 0, 300, 0, 563, -2,
	0, 0, 0, 593, 159, 0, 186, 0, 0, 0,
	47, 0, 223, 225, 0, 247, 360, 250, 169, 180,
	203, 208, 209, 212, 210, 213, 300, 0, 0, 0,
	0, 336, 532, 580, 0, -2, 0, 515, 166, 191,
	0, 0, 0, 182, 33, 0, 44, 0, 249, 170,
	216, 0, 0, 568, 569, 348, 0, 0, 0, 576,
	516, 168, 187, 188, 0, 183, 184, 185, 181, 179,
	186, 46, 360, 211, 530, 180, 573, 578, 581, -2,
	800, 736, 0, 579, 189, 0, 190, 0, 0, 0,
	191, 246, 204, 0, 583, 584, 585, 586, 587, 192,
	0, 195, 196, 0, 193, 176, 0, 194, 197, 198,
	582,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 249, 3, 255, 250, 3,
	260, 261, 253, 251, 264, 252, 262, 254, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 266, 263,
	243, 245, 244, 3, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 258, 3, 259, 248, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 247, 3, 257,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 246, 256,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lookahead func() int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.lookahead()
}

func sqlNewParser() sqlParser {
	p := &sqlParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqllval sqlSymType
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := make([]sqlSymType, sqlMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlchar := -1
	sqltoken := -1 // sqlchar translated into internal numbering
	sqlrcvr.lookahead = func() int { return sqlchar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlchar = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlchar < 0 {
		sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlchar = -1
		sqltoken = -1
		sqlVAL = sqllval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlchar < 0 {
			sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlchar = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:439
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:445
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:451
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:470
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:479
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:485
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:489
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:495
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:499
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:506
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:511
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:516
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:521
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:525
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:527
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:529
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:532
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:537
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:542
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:545
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:549
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:551
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:554
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:559
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:564
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:565
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:568
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:569
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:570
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:574
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:578
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:589
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:596
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:600
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:604
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:608
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:612
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:616
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:622
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:626
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:632
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:636
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:642
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:646
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:653
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:657
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:663
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:672
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:676
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:686
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:700
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:704
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:710
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:720
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[2].isoLevel}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:822
		{
			unimplemented()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:857
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.expr = DBool(true)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.expr = DBool(false)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			unimplemented()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			unimplemented()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:898
		{
			unimplemented()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:899
		{
			unimplemented()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			unimplemented()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			unimplemented()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			unimplemented()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:907
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.stmt = nil
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.stmt = nil
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.qname = nil
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.targetListPtr = nil
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.strs = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.tblDefs = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.colQuals = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1098
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: NameList(sqlDollar[4].strs),
				Storing: sqlDollar[6].strs,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: NameList(sqlDollar[5].strs),
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1135
		{
			unimplemented()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1155
		{
			unimplemented()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.strs = nil
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.strs = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			unimplemented()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1193
		{
			unimplemented()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1194
		{
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			unimplemented()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1205
		{
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1214
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1217
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1218
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.expr = IntVal(sqlDollar[1].ival)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].strs,
				Storing: sqlDollar[10].strs,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].strs,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.boolVal = true
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.boolVal = false
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			// TODO(pmattis): Support opt_asc_desc.
			sqlVAL.str = sqlDollar[1].str
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1295
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1298
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1299
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.dir = Ascending
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.dir = Descending
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.dir = DefaultDirection
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.stmt = nil
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.stmt = nil
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.boolVal = true
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.boolVal = false
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1365
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1366
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1385
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.isoLevel = UnspecifiedIsolation
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.stmt = &Insert{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1441
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1442
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1446
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1448
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{StarSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1693
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			unimplemented()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1714
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.boolVal = true
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.boolVal = false
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.boolVal = false
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.boolVal = true
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1738
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.orderBy = nil
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.expr = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.groupBy = nil
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.expr = nil
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.tblExprs = nil
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1970
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.str = ""
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.str = astFullJoin
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.str = astLeftJoin
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.str = astRightJoin
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.str = astInnerJoin
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2009
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.expr = nil
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2102
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2107
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2108
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2116
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival), Scale: int(sqlDollar[4].ival)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.ival = 0
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2293
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2294
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.colType = &DateType{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2313
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			unimplemented()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
			unimplemented()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2317
		{
			unimplemented()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			unimplemented()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			unimplemented()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			unimplemented()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			unimplemented()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.expr = &IsExpr{Operator: IsNull, Expr: sqlDollar[1].expr}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotNull, Expr: sqlDollar[1].expr}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.expr = &IsExpr{Operator: IsTrue, Expr: sqlDollar[1].expr}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotTrue, Expr: sqlDollar[1].expr}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.expr = &IsExpr{Operator: IsFalse, Expr: sqlDollar[1].expr}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotFalse, Expr: sqlDollar[1].expr}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.expr = &IsExpr{Operator: IsUnknown, Expr: sqlDollar[1].expr}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotUnknown, Expr: sqlDollar[1].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2555
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2556
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2730
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2734
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2735
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2736
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2738
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Distinct: true, Exprs: sqlDollar[4].exprs}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2797
		{
			unimplemented()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2799
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2800
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2801
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2802
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2803
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2805
		{
			unimplemented()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2812
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2813
		{
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2816
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2822
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			unimplemented()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2832
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2834
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2838
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2853
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2854
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2864
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2878
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.expr = Row(nil)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.expr = Row(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.expr = Array(nil)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3019
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3046
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3047
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.expr = nil
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.expr = nil
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3149
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.selExprs = nil
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.selExpr = StarSelectExpr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3264
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.expr = IntVal(sqlDollar[1].ival)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3300
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3311
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.expr = DBool(true)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.expr = DBool(false)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.expr = DNull
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.ival = +sqlDollar[2].ival
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.ival = -sqlDollar[2].ival
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
