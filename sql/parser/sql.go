// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:29
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           IntVal
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	aliasClause    AliasClause
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
	userPriority   UserPriority
	idxElem        IndexElem
	idxElems       IndexElemList
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHECK = 57387
const COALESCE = 57388
const COLLATE = 57389
const COLLATION = 57390
const COLUMN = 57391
const COLUMNS = 57392
const COMMIT = 57393
const COMMITTED = 57394
const CONCAT = 57395
const CONFLICT = 57396
const CONSTRAINT = 57397
const COVERING = 57398
const CREATE = 57399
const CROSS = 57400
const CUBE = 57401
const CURRENT = 57402
const CURRENT_CATALOG = 57403
const CURRENT_DATE = 57404
const CURRENT_ROLE = 57405
const CURRENT_TIME = 57406
const CURRENT_TIMESTAMP = 57407
const CURRENT_USER = 57408
const CYCLE = 57409
const DATA = 57410
const DATABASE = 57411
const DATABASES = 57412
const DATE = 57413
const DAY = 57414
const DEC = 57415
const DECIMAL = 57416
const DEFAULT = 57417
const DEFERRABLE = 57418
const DELETE = 57419
const DESC = 57420
const DISTINCT = 57421
const DO = 57422
const DOUBLE = 57423
const DROP = 57424
const ELSE = 57425
const END = 57426
const ESCAPE = 57427
const EXCEPT = 57428
const EXISTS = 57429
const EXPLAIN = 57430
const EXTRACT = 57431
const FALSE = 57432
const FETCH = 57433
const FILTER = 57434
const FIRST = 57435
const FLOAT = 57436
const FOLLOWING = 57437
const FOR = 57438
const FOREIGN = 57439
const FROM = 57440
const FULL = 57441
const GRANT = 57442
const GRANTS = 57443
const GREATEST = 57444
const GROUP = 57445
const GROUPING = 57446
const HAVING = 57447
const HIGH = 57448
const HOUR = 57449
const IF = 57450
const IFNULL = 57451
const IN = 57452
const INDEX = 57453
const INITIALLY = 57454
const INNER = 57455
const INSERT = 57456
const INT = 57457
const INT64 = 57458
const INTEGER = 57459
const INTERSECT = 57460
const INTERVAL = 57461
const INTO = 57462
const IS = 57463
const ISOLATION = 57464
const JOIN = 57465
const KEY = 57466
const LATERAL = 57467
const LEADING = 57468
const LEAST = 57469
const LEFT = 57470
const LEVEL = 57471
const LIKE = 57472
const LIMIT = 57473
const LOCAL = 57474
const LOCALTIME = 57475
const LOCALTIMESTAMP = 57476
const LOW = 57477
const LSHIFT = 57478
const MATCH = 57479
const MINUTE = 57480
const MONTH = 57481
const NAME = 57482
const NAMES = 57483
const NATURAL = 57484
const NEXT = 57485
const NO = 57486
const NORMAL = 57487
const NOT = 57488
const NOTHING = 57489
const NULL = 57490
const NULLIF = 57491
const NULLS = 57492
const NUMERIC = 57493
const OF = 57494
const OFF = 57495
const OFFSET = 57496
const ON = 57497
const ONLY = 57498
const OR = 57499
const ORDER = 57500
const ORDINALITY = 57501
const OUT = 57502
const OUTER = 57503
const OVER = 57504
const OVERLAPS = 57505
const OVERLAY = 57506
const PARTIAL = 57507
const PARTITION = 57508
const PLACING = 57509
const POSITION = 57510
const PRECEDING = 57511
const PRECISION = 57512
const PRIMARY = 57513
const PRIORITY = 57514
const RANGE = 57515
const READ = 57516
const REAL = 57517
const RECURSIVE = 57518
const REF = 57519
const REFERENCES = 57520
const RENAME = 57521
const REPEATABLE = 57522
const RESTRICT = 57523
const RETURNING = 57524
const REVOKE = 57525
const RIGHT = 57526
const ROLLBACK = 57527
const ROLLUP = 57528
const ROW = 57529
const ROWS = 57530
const RSHIFT = 57531
const SEARCH = 57532
const SECOND = 57533
const SELECT = 57534
const SERIALIZABLE = 57535
const SESSION = 57536
const SESSION_USER = 57537
const SET = 57538
const SHOW = 57539
const SIMILAR = 57540
const SIMPLE = 57541
const SMALLINT = 57542
const SNAPSHOT = 57543
const SOME = 57544
const SQL = 57545
const START = 57546
const STRICT = 57547
const STRING = 57548
const STORING = 57549
const SUBSTRING = 57550
const SYMMETRIC = 57551
const TABLE = 57552
const TABLES = 57553
const TEXT = 57554
const THEN = 57555
const TIME = 57556
const TIMESTAMP = 57557
const TO = 57558
const TRAILING = 57559
const TRANSACTION = 57560
const TREAT = 57561
const TRIM = 57562
const TRUE = 57563
const TRUNCATE = 57564
const TYPE = 57565
const UNBOUNDED = 57566
const UNCOMMITTED = 57567
const UNION = 57568
const UNIQUE = 57569
const UNKNOWN = 57570
const UPDATE = 57571
const USER = 57572
const USING = 57573
const VALID = 57574
const VALIDATE = 57575
const VALUE = 57576
const VALUES = 57577
const VARCHAR = 57578
const VARIADIC = 57579
const VARYING = 57580
const WHEN = 57581
const WHERE = 57582
const WINDOW = 57583
const WITH = 57584
const WITHIN = 57585
const WITHOUT = 57586
const YEAR = 57587
const ZONE = 57588
const NOT_LA = 57589
const WITH_LA = 57590
const POSTFIXOP = 57591
const UMINUS = 57592

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:3914

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	269, 19,
	-2, 303,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 274,
	155, 274,
	267, 274,
	269, 274,
	-2, 284,
	-1, 40,
	1, 277,
	155, 277,
	267, 277,
	269, 277,
	-2, 283,
	-1, 49,
	1, 19,
	269, 19,
	-2, 303,
	-1, 85,
	1, 135,
	269, 135,
	-2, 763,
	-1, 244,
	131, 313,
	154, 313,
	-2, 280,
	-1, 247,
	131, 312,
	154, 312,
	-2, 278,
	-1, 355,
	131, 312,
	154, 312,
	-2, 281,
	-1, 412,
	266, 711,
	-2, 706,
	-1, 413,
	266, 712,
	-2, 707,
	-1, 419,
	6, 432,
	266, 432,
	-2, 840,
	-1, 441,
	6, 402,
	-2, 818,
	-1, 442,
	6, 429,
	266, 429,
	-2, 819,
	-1, 443,
	6, 410,
	-2, 820,
	-1, 444,
	6, 409,
	-2, 821,
	-1, 445,
	6, 429,
	266, 429,
	-2, 824,
	-1, 446,
	6, 429,
	266, 429,
	-2, 825,
	-1, 447,
	6, 430,
	-2, 827,
	-1, 448,
	6, 397,
	-2, 828,
	-1, 449,
	6, 397,
	-2, 829,
	-1, 450,
	6, 412,
	-2, 832,
	-1, 451,
	6, 398,
	-2, 837,
	-1, 452,
	6, 399,
	-2, 838,
	-1, 453,
	6, 400,
	-2, 839,
	-1, 454,
	6, 397,
	-2, 843,
	-1, 455,
	6, 403,
	-2, 848,
	-1, 456,
	6, 401,
	-2, 850,
	-1, 457,
	6, 431,
	-2, 854,
	-1, 458,
	6, 427,
	266, 427,
	-2, 858,
	-1, 712,
	86, 284,
	118, 284,
	131, 284,
	154, 284,
	158, 284,
	226, 284,
	-2, 534,
	-1, 720,
	266, 691,
	-2, 681,
	-1, 913,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 465,
	-1, 914,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 466,
	-1, 915,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 467,
	-1, 919,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 471,
	-1, 920,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 472,
	-1, 921,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 473,
	-1, 924,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 478,
	-1, 955,
	163, 604,
	-2, 607,
	-1, 1102,
	86, 284,
	118, 284,
	131, 284,
	154, 284,
	158, 284,
	226, 284,
	-2, 354,
	-1, 1110,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 479,
	-1, 1115,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 480,
	-1, 1134,
	163, 603,
	-2, 606,
	-1, 1271,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 481,
	-1, 1276,
	121, 0,
	-2, 491,
	-1, 1285,
	163, 605,
	-2, 608,
	-1, 1325,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 515,
	-1, 1326,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 516,
	-1, 1327,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 517,
	-1, 1331,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 521,
	-1, 1332,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 522,
	-1, 1333,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 523,
	-1, 1425,
	121, 0,
	-2, 492,
	-1, 1429,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 495,
	-1, 1430,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 497,
	-1, 1509,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 496,
	-1, 1510,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 498,
	-1, 1518,
	121, 0,
	-2, 524,
	-1, 1555,
	121, 0,
	-2, 525,
	-1, 1600,
	30, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 817,
}

const sqlNprod = 950
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18846

var sqlAct = [...]int{

	952, 1599, 1582, 1466, 1620, 791, 1560, 1583, 798, 1526,
	1010, 1598, 1305, 1584, 248, 1499, 853, 1277, 1394, 1363,
	275, 411, 840, 86, 499, 410, 861, 403, 471, 1411,
	1393, 1405, 715, 1098, 1192, 1191, 837, 1251, 968, 1260,
	717, 650, 1488, 1137, 839, 478, 1090, 799, 768, 405,
	777, 461, 1086, 940, 386, 13, 972, 937, 253, 28,
	1278, 864, 746, 962, 750, 1101, 255, 39, 666, 526,
	289, 832, 18, 512, 10, 6, 672, 481, 483, 385,
	345, 61, 294, 1007, 28, 247, 376, 472, 473, 90,
	537, 842, 39, 553, 509, 258, 296, 40, 63, 59,
	62, 64, 272, 460, 862, 272, 292, 281, 28, 358,
	272, 459, 291, 359, 41, 83, 39, 346, 357, 528,
	524, 508, 285, 68, 1490, 475, 475, 670, 369, 476,
	476, 19, 474, 474, 501, 501, 1596, 245, 965, 1487,
	792, 32, 252, 1590, 1589, 796, 857, 857, 675, 252,
	300, 297, 271, 1581, 244, 278, 1428, 673, 673, 1576,
	286, 322, 857, 34, 1557, 1551, 677, 1428, 857, 38,
	1058, 1545, 301, 966, 1487, 1536, 1511, 1506, 1487, 1428,
	857, 1496, 1130, 1486, 1487, 676, 1487, 1471, 1132, 1470,
	857, 690, 857, 1133, 24, 45, 35, 1548, 323, 1451,
	25, 1338, 1130, 1431, 967, 964, 1130, 1427, 1373, 1284,
	1428, 857, 26, 47, 1281, 1242, 1238, 1130, 500, 500,
	1209, 1207, 1206, 1210, 1130, 1130, 1205, 1134, 1131, 1130,
	1130, 858, 765, 1130, 857, 764, 506, 1070, 48, 507,
	766, 1088, 1072, 857, 813, 43, 1164, 504, 1180, 1181,
	1182, 44, 948, 852, 1136, 826, 674, 969, 1424, 356,
	370, 1130, 45, 45, 350, 645, 644, 377, 377, 42,
	518, 517, 317, 49, 691, 502, 502, 479, 270, 476,
	47, 47, 45, 552, 334, 375, 1597, 1595, 355, 1177,
	1552, 466, 1495, 272, 1456, 27, 1452, 36, 1444, 1443,
	47, 1438, 1437, 1436, 45, 48, 48, 470, 30, 31,
	1435, 963, 43, 43, 1422, 1353, 33, 1390, 44, 44,
	1348, 1347, 47, 1346, 1288, 48, 945, 692, 468, 1058,
	674, 1266, 1108, 1074, 37, 1250, 795, 60, 272, 494,
	1212, 475, 1211, 349, 1527, 476, 1199, 48, 474, 1190,
	1163, 1160, 1158, 245, 43, 1147, 42, 1183, 1141, 1071,
	44, 658, 660, 1022, 500, 647, 979, 978, 667, 369,
	244, 368, 1178, 646, 723, 1307, 1547, 1528, 42, 547,
	1520, 706, 707, 708, 709, 710, 1502, 1493, 286, 1485,
	713, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	714, 1463, 1449, 1420, 718, 946, 492, 1416, 675, 1401,
	726, 1275, 1265, 1248, 1247, 1245, 300, 300, 1224, 1223,
	1189, 1164, 1155, 1154, 556, 1179, 677, 1146, 1389, 1127,
	1123, 720, 942, 751, 754, 1036, 1035, 1017, 301, 301,
	516, 515, 977, 856, 756, 676, 557, 744, 541, 548,
	743, 637, 742, 741, 641, 740, 642, 1164, 739, 640,
	245, 738, 1164, 245, 245, 737, 668, 736, 735, 656,
	1164, 734, 655, 733, 732, 654, 761, 662, 731, 730,
	663, 664, 721, 719, 42, 1174, 1175, 1176, 1036, 1173,
	1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169, 648, 759,
	276, 373, 1508, 1507, 1268, 1267, 467, 771, 748, 749,
	1392, 1059, 1109, 341, 752, 256, 329, 1164, 728, 755,
	675, 1406, 792, 328, 758, 418, 1308, 993, 808, 294,
	973, 747, 1055, 1566, 782, 784, 1535, 1164, 677, 1180,
	1181, 1182, 757, 272, 1609, 1150, 790, 1178, 362, 794,
	802, 1066, 28, 465, 344, 806, 1381, 676, 291, 233,
	265, 234, 61, 1610, 556, 28, 556, 463, 760, 1479,
	762, 1478, 413, 39, 807, 1236, 774, 1216, 770, 63,
	1177, 62, 64, 1178, 1235, 1215, 557, 462, 557, 415,
	242, 1145, 1144, 787, 1143, 1142, 1178, 300, 297, 820,
	1179, 816, 817, 89, 811, 814, 810, 770, 484, 1111,
	485, 903, 809, 769, 239, 929, 89, 89, 1534, 301,
	89, 812, 789, 89, 89, 89, 788, 1568, 89, 89,
	89, 89, 939, 299, 724, 819, 1179, 1184, 939, 815,
	53, 326, 556, 1226, 1468, 495, 831, 969, 1183, 1179,
	1617, 89, 89, 850, 851, 678, 679, 680, 681, 682,
	1419, 1050, 490, 1178, 557, 1170, 1171, 1172, 1165, 1166,
	1167, 1168, 1169, 486, 489, 377, 327, 54, 859, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	902, 973, 272, 1172, 1165, 1166, 1167, 1168, 1169, 1165,
	1166, 1167, 1168, 1169, 56, 1609, 1179, 1165, 1166, 1167,
	1168, 1169, 1529, 778, 1065, 873, 835, 893, 272, 949,
	954, 240, 957, 980, 1067, 991, 867, 1001, 1003, 1008,
	1011, 1012, 1013, 1578, 759, 1233, 379, 1002, 243, 759,
	325, 324, 836, 1014, 1015, 1016, 57, 1227, 1579, 953,
	1369, 866, 834, 1021, 1297, 479, 1167, 1168, 1169, 680,
	681, 682, 745, 371, 767, 781, 1174, 1175, 1176, 892,
	1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169, 347,
	1370, 944, 55, 1051, 556, 1469, 1031, 1294, 943, 365,
	366, 325, 484, 484, 485, 485, 1516, 711, 1153, 51,
	1025, 89, 822, 89, 1113, 89, 557, 969, 824, 501,
	938, 342, 1027, 1616, 487, 873, 1261, 893, 1295, 252,
	89, 825, 1061, 1293, 1585, 1608, 1033, 965, 1606, 823,
	1404, 1053, 846, 337, 318, 1026, 89, 360, 1586, 780,
	291, 52, 316, 667, 361, 58, 89, 89, 291, 89,
	1447, 1365, 1473, 1366, 1218, 1046, 1054, 486, 486, 1075,
	361, 343, 966, 1472, 1060, 1057, 546, 534, 545, 892,
	539, 969, 1623, 1461, 1062, 1073, 1368, 1063, 1030, 89,
	1064, 89, 1104, 1371, 1069, 1630, 1068, 1615, 847, 299,
	299, 1076, 653, 967, 964, 779, 935, 555, 89, 649,
	89, 89, 1081, 89, 1587, 28, 300, 933, 360, 1561,
	272, 1079, 643, 39, 983, 89, 1110, 1103, 1097, 1083,
	1115, 1082, 1084, 1448, 927, 1334, 519, 1107, 301, 1462,
	675, 1038, 1367, 89, 1120, 1377, 89, 549, 1588, 1129,
	50, 1414, 752, 1126, 755, 1118, 969, 1128, 677, 1138,
	502, 251, 749, 748, 1047, 482, 1093, 1037, 1629, 69,
	1139, 1140, 1135, 931, 1151, 930, 1380, 676, 1156, 936,
	1096, 1256, 1114, 1379, 1255, 1112, 1621, 250, 1164, 74,
	1259, 551, 986, 250, 70, 1094, 324, 284, 352, 713,
	523, 1252, 1335, 1087, 550, 1008, 1008, 1008, 1336, 1188,
	963, 1519, 71, 1116, 928, 1446, 1376, 1121, 487, 487,
	1201, 976, 1193, 1622, 1274, 1214, 73, 987, 1149, 521,
	1159, 1177, 1122, 252, 925, 818, 1221, 673, 1624, 522,
	340, 338, 89, 335, 283, 1194, 729, 555, 932, 555,
	639, 1095, 975, 1360, 1378, 934, 1231, 89, 988, 985,
	479, 89, 1229, 1239, 89, 1302, 691, 1230, 89, 1232,
	89, 89, 1217, 89, 1213, 1077, 89, 89, 89, 848,
	299, 845, 505, 89, 89, 1220, 1117, 1164, 1196, 1197,
	1198, 503, 498, 1119, 491, 488, 1234, 77, 1480, 1610,
	854, 249, 926, 331, 72, 1241, 1240, 363, 661, 268,
	1270, 989, 1271, 802, 1178, 1254, 1246, 1244, 1257, 692,
	543, 770, 770, 1276, 675, 555, 1482, 785, 783, 540,
	535, 1286, 675, 786, 1262, 1263, 1237, 1286, 1282, 1258,
	1490, 75, 677, 272, 675, 1531, 272, 1554, 3, 1253,
	677, 1303, 855, 1290, 1291, 1292, 367, 65, 1549, 1106,
	1312, 676, 797, 1314, 1222, 984, 669, 1179, 364, 676,
	269, 1627, 332, 873, 1287, 893, 319, 320, 1628, 1164,
	675, 676, 1296, 1298, 1299, 76, 685, 678, 679, 680,
	681, 682, 1421, 827, 1343, 1344, 828, 1313, 277, 1309,
	1339, 872, 1354, 1350, 1351, 1352, 1300, 873, 1269, 893,
	1208, 1349, 89, 1178, 873, 1020, 893, 1019, 1311, 1018,
	89, 89, 232, 970, 829, 1315, 1341, 892, 1342, 1433,
	1301, 1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169,
	1359, 830, 722, 895, 238, 873, 89, 893, 1467, 89,
	691, 1355, 67, 1407, 638, 336, 1345, 235, 236, 237,
	1440, 892, 1577, 894, 1408, 869, 1179, 1399, 892, 1152,
	1399, 1398, 1515, 1400, 1398, 1425, 1400, 555, 1498, 1403,
	1429, 1430, 1409, 1410, 1402, 1432, 1415, 974, 1384, 727,
	1434, 23, 1396, 1426, 1391, 391, 1361, 28, 1219, 892,
	1418, 872, 841, 692, 558, 1439, 544, 533, 414, 1442,
	272, 272, 339, 527, 272, 536, 982, 464, 416, 870,
	417, 871, 753, 404, 868, 873, 295, 893, 800, 971,
	1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169, 1450,
	89, 89, 89, 895, 1148, 725, 89, 390, 1445, 89,
	396, 1374, 1375, 395, 950, 89, 89, 89, 89, 89,
	387, 89, 89, 894, 321, 869, 81, 82, 89, 1052,
	89, 678, 679, 680, 681, 682, 89, 1388, 793, 892,
	1474, 849, 657, 1458, 1228, 89, 89, 1457, 1460, 241,
	1161, 89, 1000, 1417, 992, 990, 981, 348, 1492, 299,
	477, 801, 374, 1089, 333, 860, 1105, 1476, 1477, 372,
	665, 1399, 267, 1483, 1503, 1398, 89, 1400, 89, 89,
	1481, 89, 266, 1399, 1509, 1510, 1465, 1398, 1489, 1400,
	89, 873, 1494, 893, 838, 89, 89, 330, 89, 1491,
	1501, 1504, 1475, 520, 1093, 821, 493, 1530, 1565, 1514,
	1225, 46, 66, 17, 1523, 16, 15, 14, 1096, 1497,
	12, 11, 1080, 9, 1525, 1124, 1125, 1521, 1091, 272,
	8, 7, 22, 1094, 21, 20, 5, 4, 873, 1524,
	893, 2, 994, 1, 0, 892, 479, 1092, 0, 1512,
	1538, 69, 0, 0, 0, 0, 0, 0, 0, 873,
	1546, 893, 0, 0, 1544, 1540, 1539, 0, 1542, 1399,
	0, 74, 0, 1398, 1541, 1400, 70, 0, 759, 0,
	0, 0, 0, 1185, 1186, 1187, 0, 0, 0, 1095,
	1553, 0, 892, 1369, 71, 1364, 0, 398, 1556, 0,
	0, 0, 1569, 1362, 1505, 0, 0, 0, 73, 1572,
	0, 0, 0, 892, 0, 1567, 0, 0, 0, 1571,
	0, 0, 1575, 1370, 1574, 1580, 0, 1592, 87, 1399,
	873, 0, 893, 1398, 1591, 1400, 0, 1593, 1573, 1603,
	1603, 259, 259, 0, 1564, 274, 1570, 1594, 274, 280,
	274, 1604, 1607, 274, 287, 274, 87, 1605, 1611, 1612,
	1613, 1603, 1614, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 1626, 1625, 87, 87, 0, 0,
	0, 0, 0, 802, 892, 0, 72, 0, 1603, 1631,
	1550, 89, 0, 0, 1365, 0, 1366, 0, 0, 0,
	1272, 1273, 0, 89, 0, 89, 0, 89, 0, 872,
	89, 0, 0, 0, 0, 1562, 1563, 0, 0, 1368,
	0, 89, 0, 75, 89, 0, 1371, 0, 0, 0,
	0, 0, 89, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 872, 994, 994, 0, 0, 0, 0,
	872, 895, 0, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 894, 1337, 869, 0, 1367, 675, 0, 693, 694,
	695, 872, 0, 0, 0, 895, 89, 0, 696, 1089,
	0, 0, 895, 0, 677, 0, 702, 0, 0, 0,
	0, 0, 994, 994, 994, 894, 0, 869, 0, 0,
	0, 0, 894, 676, 869, 0, 0, 0, 0, 690,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 274, 0, 87, 0,
	353, 0, 0, 894, 1096, 869, 0, 0, 89, 89,
	89, 0, 0, 0, 1091, 259, 89, 89, 0, 1094,
	0, 872, 89, 0, 89, 0, 89, 89, 89, 89,
	0, 274, 0, 1092, 0, 0, 703, 0, 0, 0,
	89, 274, 274, 0, 496, 0, 1413, 701, 89, 89,
	0, 0, 89, 0, 0, 0, 698, 0, 89, 89,
	0, 0, 691, 895, 0, 0, 1164, 0, 1180, 1181,
	1182, 0, 0, 0, 513, 1095, 513, 0, 0, 994,
	994, 0, 0, 894, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 513, 87, 0, 87, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 1177,
	652, 0, 0, 0, 0, 692, 0, 0, 1464, 0,
	0, 0, 1412, 0, 700, 0, 0, 872, 259, 0,
	0, 671, 994, 994, 994, 994, 994, 994, 994, 994,
	994, 994, 994, 994, 994, 994, 994, 994, 994, 994,
	0, 994, 0, 89, 0, 89, 0, 89, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 895,
	392, 29, 0, 699, 872, 687, 688, 689, 0, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 0, 894,
	0, 869, 1178, 0, 1518, 872, 29, 89, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 89,
	246, 0, 0, 254, 0, 0, 895, 0, 0, 0,
	29, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 254, 0, 675, 0, 0, 894, 895, 869, 0,
	0, 0, 775, 0, 0, 1179, 274, 0, 0, 274,
	0, 677, 0, 274, 0, 804, 805, 894, 274, 869,
	675, 274, 87, 87, 0, 0, 872, 1555, 513, 671,
	676, 89, 89, 0, 0, 89, 0, 0, 677, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 676, 0, 0,
	0, 0, 0, 0, 0, 1174, 1175, 1176, 895, 1173,
	1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169, 0, 0,
	89, 89, 89, 0, 89, 222, 0, 0, 894, 0,
	869, 0, 0, 0, 0, 0, 0, 994, 0, 231,
	675, 89, 693, 694, 695, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 0, 677, 691,
	702, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 0, 690, 0, 0, 691, 0, 0, 0,
	223, 225, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 274, 775, 0, 0, 0,
	0, 0, 692, 994, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 246, 0, 0, 0,
	0, 274, 227, 0, 87, 0, 0, 0, 0, 692,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 675, 0, 693, 694, 695, 0, 0, 0,
	698, 0, 0, 0, 696, 0, 691, 0, 0, 0,
	677, 0, 702, 0, 0, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 0, 994, 697, 0, 676,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 0, 0, 0, 0, 274, 1028, 1029, 700, 0,
	0, 775, 228, 246, 1034, 229, 246, 246, 0, 230,
	1039, 1040, 1042, 1044, 1045, 0, 1048, 1049, 0, 0,
	0, 0, 703, 274, 0, 1056, 0, 0, 0, 0,
	712, 274, 0, 701, 716, 0, 0, 0, 0, 0,
	833, 513, 698, 0, 0, 0, 833, 699, 691, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 0, 0, 1023, 0, 0, 0, 697,
	0, 652, 1024, 87, 274, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	1100, 1100, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 692, 675, 0, 693, 694, 695, 0, 0, 0,
	700, 0, 0, 0, 696, 0, 0, 0, 0, 0,
	677, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 690, 0, 29, 0, 1164,
	0, 1180, 1181, 1182, 0, 0, 0, 0, 0, 699,
	0, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 0, 675, 0, 693,
	694, 695, 1453, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 1177, 0, 0, 677, 0, 702, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 676, 0, 0, 0, 0, 0,
	690, 0, 698, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1183, 0, 0, 0, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1178, 0, 703, 0, 0,
	0, 692, 0, 0, 0, 0, 274, 0, 701, 0,
	700, 0, 0, 0, 0, 0, 0, 698, 1243, 0,
	775, 0, 652, 691, 0, 1249, 0, 0, 0, 0,
	0, 0, 0, 0, 863, 0, 274, 0, 0, 274,
	0, 0, 0, 0, 697, 0, 0, 1264, 1179, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 687, 688, 689, 941, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 692, 0, 0, 0,
	0, 0, 1204, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 0, 0, 0, 0, 0, 0, 1174, 1175,
	1176, 0, 1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168,
	1169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 0, 0, 0, 0, 254, 1203, 0, 0,
	0, 0, 0, 1357, 1358, 775, 0, 0, 0, 0,
	0, 671, 671, 0, 0, 0, 0, 1382, 0, 1383,
	0, 274, 1385, 1386, 1387, 0, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 775, 1395, 0, 0, 0,
	0, 0, 0, 274, 274, 0, 0, 274, 0, 0,
	0, 0, 0, 671, 1100, 0, 0, 29, 0, 0,
	675, 0, 693, 694, 695, 0, 1102, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 0, 677, 0,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 676, 0, 0,
	0, 0, 0, 690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 693, 694, 695, 0,
	0, 0, 0, 0, 0, 0, 696, 0, 0, 941,
	0, 0, 677, 0, 702, 0, 0, 0, 0, 0,
	0, 0, 1164, 712, 1180, 1181, 1182, 0, 775, 0,
	1459, 676, 87, 0, 1423, 0, 0, 690, 0, 274,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 0, 0, 0, 1395, 0, 0,
	698, 0, 0, 0, 0, 1177, 691, 0, 0, 1395,
	0, 0, 274, 0, 1500, 0, 0, 0, 0, 712,
	0, 0, 274, 0, 671, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 675, 0, 693, 694,
	695, 0, 0, 0, 698, 0, 0, 0, 696, 692,
	691, 0, 0, 0, 677, 0, 702, 0, 700, 0,
	0, 0, 0, 1183, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 676, 0, 0, 1532, 1533, 1178, 690,
	1537, 0, 0, 0, 0, 1395, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 863,
	671, 0, 863, 692, 0, 0, 0, 699, 0, 687,
	688, 689, 700, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 0, 0, 671, 671, 274, 0, 87,
	1202, 1179, 0, 0, 0, 0, 703, 0, 0, 675,
	0, 693, 694, 695, 0, 1395, 1500, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 677, 0, 702,
	0, 699, 691, 687, 688, 689, 274, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 676, 0, 0, 0,
	0, 1559, 690, 697, 0, 0, 0, 0, 0, 0,
	0, 1174, 1175, 1176, 0, 1173, 1170, 1171, 1172, 1165,
	1166, 1167, 1168, 1169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 0, 691, 863, 863, 0, 0,
	863, 0, 0, 699, 0, 687, 688, 689, 0, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 0, 0,
	0, 0, 0, 1558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	0, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 91, 92, 559,
	93, 560, 561, 562, 563, 564, 565, 566, 567, 94,
	95, 181, 182, 183, 96, 184, 185, 568, 97, 186,
	187, 98, 569, 570, 188, 189, 571, 190, 572, 303,
	573, 99, 100, 101, 0, 102, 574, 103, 575, 304,
	104, 105, 576, 577, 578, 579, 580, 581, 106, 107,
	108, 109, 191, 110, 192, 193, 582, 583, 111, 584,
	585, 586, 112, 113, 587, 588, 712, 589, 194, 114,
	195, 590, 591, 115, 116, 196, 117, 592, 593, 594,
	305, 595, 118, 197, 596, 198, 597, 119, 120, 199,
	200, 598, 599, 600, 306, 121, 201, 202, 203, 601,
	204, 602, 307, 122, 308, 123, 603, 604, 205, 309,
	124, 310, 605, 260, 606, 607, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 608, 133, 609,
	206, 134, 207, 135, 136, 610, 611, 612, 613, 614,
	137, 208, 312, 138, 313, 209, 139, 140, 615, 210,
	141, 211, 616, 142, 143, 144, 212, 145, 146, 617,
	147, 148, 149, 618, 150, 314, 151, 152, 213, 153,
	0, 154, 155, 619, 156, 262, 620, 157, 158, 315,
	159, 214, 160, 621, 161, 162, 164, 215, 163, 216,
	622, 623, 165, 166, 624, 264, 217, 625, 626, 263,
	218, 219, 627, 167, 168, 169, 170, 628, 629, 171,
	172, 630, 631, 173, 174, 175, 220, 221, 632, 176,
	633, 634, 635, 636, 177, 178, 179, 180, 0, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 91, 92, 559, 93, 560, 561, 562, 563, 564,
	565, 566, 567, 94, 95, 181, 182, 183, 96, 184,
	185, 568, 97, 186, 187, 98, 569, 570, 188, 189,
	571, 190, 572, 303, 573, 99, 100, 101, 0, 102,
	574, 103, 575, 304, 104, 105, 576, 577, 578, 579,
	580, 581, 106, 107, 108, 109, 191, 110, 192, 193,
	582, 583, 111, 584, 585, 586, 112, 113, 587, 588,
	0, 589, 194, 114, 195, 590, 591, 115, 116, 196,
	117, 592, 593, 594, 305, 595, 118, 197, 596, 198,
	597, 119, 120, 199, 200, 598, 599, 600, 306, 121,
	201, 202, 203, 601, 204, 602, 307, 122, 308, 123,
	603, 604, 205, 309, 124, 310, 605, 260, 606, 607,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 608, 133, 609, 206, 134, 207, 135, 136, 610,
	611, 612, 613, 614, 137, 208, 312, 138, 313, 209,
	139, 140, 615, 210, 141, 211, 616, 142, 143, 144,
	212, 145, 146, 617, 147, 148, 149, 618, 150, 314,
	151, 152, 213, 153, 0, 154, 155, 619, 156, 262,
	620, 157, 158, 315, 159, 214, 160, 621, 161, 162,
	164, 215, 163, 216, 622, 623, 165, 166, 624, 264,
	217, 625, 626, 263, 218, 219, 627, 167, 168, 169,
	170, 628, 629, 171, 172, 630, 631, 173, 174, 175,
	220, 221, 632, 176, 633, 634, 635, 636, 177, 178,
	179, 180, 412, 400, 401, 402, 399, 388, 0, 0,
	0, 0, 0, 0, 91, 92, 959, 93, 0, 0,
	0, 0, 394, 0, 0, 0, 94, 95, 181, 441,
	442, 96, 443, 444, 0, 97, 186, 187, 98, 409,
	427, 445, 446, 0, 437, 0, 420, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 105, 0,
	421, 423, 0, 422, 424, 106, 107, 108, 109, 447,
	110, 448, 449, 0, 0, 111, 0, 960, 0, 440,
	113, 0, 0, 0, 0, 393, 114, 428, 407, 0,
	115, 116, 450, 117, 0, 0, 0, 305, 0, 118,
	438, 0, 198, 0, 119, 120, 434, 436, 0, 0,
	0, 306, 121, 451, 452, 453, 0, 419, 0, 307,
	122, 308, 123, 0, 0, 439, 309, 124, 310, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 383, 133, 408, 435, 134, 454,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 312,
	138, 313, 429, 139, 140, 0, 430, 141, 211, 0,
	142, 143, 144, 455, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 397, 153, 0, 154, 155,
	0, 156, 262, 425, 157, 158, 315, 159, 456, 160,
	0, 161, 162, 164, 215, 163, 431, 0, 0, 165,
	166, 0, 264, 457, 0, 0, 263, 432, 433, 406,
	167, 168, 169, 170, 0, 0, 171, 172, 426, 0,
	173, 174, 175, 220, 458, 958, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 384, 0, 412, 400, 401,
	402, 399, 388, 0, 0, 380, 381, 961, 0, 91,
	92, 382, 93, 0, 389, 956, 0, 394, 0, 0,
	0, 94, 95, 181, 441, 442, 96, 443, 444, 0,
	97, 186, 187, 98, 409, 427, 445, 446, 0, 437,
	0, 420, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 421, 423, 0, 422, 424,
	106, 107, 108, 109, 447, 110, 448, 449, 480, 0,
	111, 0, 0, 0, 440, 113, 0, 0, 0, 0,
	393, 114, 428, 407, 0, 115, 116, 450, 117, 0,
	0, 0, 305, 0, 118, 438, 0, 198, 0, 119,
	120, 434, 436, 0, 0, 0, 306, 121, 451, 452,
	453, 0, 419, 0, 307, 122, 308, 123, 0, 0,
	439, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 383,
	133, 408, 435, 134, 454, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 429, 139, 140,
	0, 430, 141, 211, 0, 142, 143, 144, 455, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	397, 153, 0, 154, 155, 45, 156, 262, 425, 157,
	158, 315, 159, 456, 160, 0, 161, 162, 164, 215,
	163, 431, 0, 47, 165, 166, 0, 264, 457, 0,
	0, 263, 432, 433, 406, 167, 168, 169, 170, 0,
	0, 171, 172, 426, 0, 173, 174, 175, 302, 458,
	0, 176, 0, 0, 0, 43, 177, 178, 179, 180,
	384, 44, 412, 400, 401, 402, 399, 388, 0, 0,
	380, 381, 0, 0, 91, 92, 382, 93, 0, 389,
	0, 0, 394, 0, 0, 0, 94, 95, 181, 441,
	442, 96, 443, 444, 0, 97, 186, 187, 98, 409,
	427, 445, 446, 0, 437, 0, 420, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 105, 0,
	421, 423, 0, 422, 424, 106, 107, 108, 109, 447,
	110, 448, 449, 0, 0, 111, 0, 0, 0, 440,
	113, 0, 0, 0, 0, 393, 114, 428, 407, 0,
	115, 116, 450, 117, 0, 0, 0, 305, 0, 118,
	438, 0, 198, 0, 119, 120, 434, 436, 0, 0,
	0, 306, 121, 451, 452, 453, 0, 419, 0, 307,
	122, 308, 123, 0, 0, 439, 309, 124, 310, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 383, 133, 408, 435, 134, 454,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 312,
	138, 313, 429, 139, 140, 0, 430, 141, 211, 0,
	142, 143, 144, 455, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 397, 153, 0, 154, 155,
	45, 156, 262, 425, 157, 158, 315, 159, 456, 160,
	0, 161, 162, 164, 215, 163, 431, 0, 47, 165,
	166, 0, 264, 457, 0, 0, 263, 432, 433, 406,
	167, 168, 169, 170, 0, 0, 171, 172, 426, 0,
	173, 174, 175, 302, 458, 0, 176, 0, 0, 0,
	43, 177, 178, 179, 180, 384, 44, 412, 400, 401,
	402, 399, 388, 0, 0, 380, 381, 0, 0, 91,
	92, 382, 93, 0, 389, 0, 0, 394, 0, 0,
	0, 94, 95, 181, 441, 442, 96, 443, 444, 1004,
	97, 186, 187, 98, 409, 427, 445, 446, 0, 437,
	0, 420, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 421, 423, 0, 422, 424,
	106, 107, 108, 109, 447, 110, 448, 449, 0, 0,
	111, 0, 0, 0, 440, 113, 0, 0, 0, 0,
	393, 114, 428, 407, 0, 115, 116, 450, 117, 0,
	0, 1009, 305, 0, 118, 438, 0, 198, 0, 119,
	120, 434, 436, 0, 0, 0, 306, 121, 451, 452,
	453, 0, 419, 0, 307, 122, 308, 123, 0, 1005,
	439, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 383,
	133, 408, 435, 134, 454, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 429, 139, 140,
	0, 430, 141, 211, 0, 142, 143, 144, 455, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	397, 153, 0, 154, 155, 0, 156, 262, 425, 157,
	158, 315, 159, 456, 160, 0, 161, 162, 164, 215,
	163, 431, 0, 0, 165, 166, 0, 264, 457, 0,
	1006, 263, 432, 433, 406, 167, 168, 169, 170, 0,
	0, 171, 172, 426, 0, 173, 174, 175, 220, 458,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	384, 0, 412, 400, 401, 402, 399, 388, 0, 0,
	380, 381, 0, 0, 91, 92, 382, 93, 0, 389,
	0, 0, 394, 0, 0, 0, 94, 95, 181, 441,
	442, 96, 443, 444, 0, 97, 186, 187, 98, 409,
	427, 445, 446, 0, 437, 0, 420, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 105, 0,
	421, 423, 0, 422, 424, 106, 107, 108, 109, 447,
	110, 448, 449, 0, 0, 111, 0, 0, 0, 440,
	113, 0, 0, 0, 0, 393, 114, 428, 407, 0,
	115, 116, 450, 117, 0, 0, 0, 305, 0, 118,
	438, 0, 198, 0, 119, 120, 434, 436, 0, 0,
	0, 306, 121, 451, 452, 453, 0, 419, 0, 307,
	122, 308, 123, 0, 0, 439, 309, 124, 310, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 383, 133, 408, 435, 134, 454,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 312,
	138, 313, 429, 139, 140, 0, 430, 141, 211, 0,
	142, 143, 144, 455, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 397, 153, 0, 154, 155,
	0, 156, 262, 425, 157, 158, 315, 159, 456, 160,
	0, 161, 162, 164, 215, 163, 431, 0, 0, 165,
	166, 0, 264, 457, 0, 0, 263, 432, 433, 406,
	167, 168, 169, 170, 0, 0, 171, 172, 426, 0,
	173, 174, 175, 220, 458, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 384, 0, 412, 400, 401,
	402, 399, 388, 0, 0, 380, 381, 0, 0, 91,
	92, 382, 93, 0, 389, 1340, 0, 394, 0, 0,
	0, 94, 95, 181, 441, 442, 96, 443, 444, 0,
	97, 186, 187, 98, 409, 427, 445, 446, 0, 437,
	0, 420, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 421, 423, 0, 422, 424,
	106, 107, 108, 109, 447, 110, 448, 449, 0, 0,
	111, 0, 0, 0, 440, 113, 0, 0, 0, 0,
	393, 114, 428, 407, 0, 115, 116, 450, 117, 0,
	0, 0, 305, 0, 118, 438, 0, 198, 0, 119,
	120, 434, 436, 0, 0, 0, 306, 121, 451, 452,
	453, 0, 419, 0, 307, 122, 308, 123, 0, 0,
	439, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 383,
	133, 408, 435, 134, 454, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 429, 139, 140,
	0, 430, 141, 211, 0, 142, 143, 144, 455, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	397, 153, 0, 154, 155, 0, 156, 262, 425, 157,
	158, 315, 159, 456, 160, 0, 161, 162, 164, 215,
	163, 431, 0, 0, 165, 166, 0, 264, 457, 0,
	0, 263, 432, 433, 406, 167, 168, 169, 170, 0,
	0, 171, 172, 426, 0, 173, 174, 175, 220, 458,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	384, 0, 412, 400, 401, 402, 399, 388, 0, 0,
	380, 381, 0, 0, 91, 92, 382, 93, 0, 389,
	1283, 0, 394, 0, 0, 0, 94, 95, 181, 441,
	442, 96, 443, 444, 0, 97, 186, 187, 98, 409,
	427, 445, 446, 0, 437, 0, 420, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 105, 0,
	421, 423, 0, 422, 424, 106, 107, 108, 109, 447,
	110, 448, 449, 0, 0, 111, 0, 0, 0, 440,
	113, 0, 0, 0, 0, 393, 114, 428, 407, 0,
	115, 116, 450, 117, 0, 0, 0, 305, 0, 118,
	438, 0, 198, 0, 119, 120, 434, 436, 0, 0,
	0, 306, 121, 451, 452, 453, 0, 419, 0, 307,
	122, 308, 123, 0, 0, 439, 309, 124, 310, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 383, 133, 408, 435, 134, 454,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 312,
	138, 313, 429, 139, 140, 0, 430, 141, 211, 0,
	142, 143, 144, 455, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 397, 153, 0, 154, 155,
	0, 156, 262, 425, 157, 158, 315, 159, 456, 160,
	0, 161, 162, 164, 215, 163, 431, 0, 0, 165,
	166, 0, 264, 457, 0, 0, 263, 432, 433, 406,
	167, 168, 169, 170, 0, 0, 171, 172, 426, 0,
	173, 174, 175, 220, 458, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 384, 0, 412, 400, 401,
	402, 399, 388, 0, 0, 380, 381, 0, 0, 91,
	92, 382, 93, 0, 389, 955, 0, 394, 0, 0,
	0, 94, 95, 181, 441, 442, 96, 443, 444, 0,
	97, 186, 187, 98, 409, 427, 445, 446, 0, 437,
	0, 420, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 421, 423, 0, 422, 424,
	106, 107, 108, 109, 447, 110, 448, 449, 0, 0,
	111, 0, 0, 0, 440, 113, 0, 0, 0, 0,
	393, 114, 428, 407, 0, 115, 116, 450, 117, 0,
	0, 0, 305, 0, 118, 438, 0, 198, 0, 119,
	120, 434, 436, 0, 0, 0, 306, 121, 451, 452,
	453, 0, 419, 0, 307, 122, 308, 123, 0, 0,
	439, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 383,
	133, 408, 435, 134, 454, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 429, 139, 140,
	0, 430, 141, 211, 0, 142, 143, 144, 455, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	397, 153, 0, 154, 155, 0, 156, 262, 425, 157,
	158, 315, 159, 456, 160, 0, 161, 162, 164, 215,
	163, 431, 0, 0, 165, 166, 0, 264, 457, 0,
	0, 263, 432, 433, 406, 167, 168, 169, 170, 0,
	0, 171, 172, 426, 0, 173, 174, 175, 220, 458,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 381, 0, 0, 0, 0, 382, 718, 951, 389,
	412, 400, 401, 402, 399, 388, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 0,
	394, 0, 0, 0, 94, 95, 181, 441, 442, 96,
	443, 444, 0, 97, 186, 187, 98, 409, 427, 445,
	446, 0, 437, 0, 420, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 304, 104, 105, 0, 421, 423,
	0, 422, 424, 106, 107, 108, 109, 447, 110, 448,
	449, 0, 0, 111, 0, 0, 0, 440, 113, 0,
	0, 0, 0, 393, 114, 428, 407, 0, 115, 116,
	450, 117, 0, 0, 0, 305, 0, 118, 438, 0,
	198, 0, 119, 120, 434, 436, 0, 0, 0, 306,
	121, 451, 452, 453, 0, 419, 0, 307, 122, 308,
	123, 0, 0, 439, 309, 124, 310, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 311, 130,
	131, 132, 383, 133, 408, 435, 134, 454, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 312, 138, 313,
	429, 139, 140, 0, 430, 141, 211, 0, 142, 143,
	144, 455, 145, 146, 0, 147, 148, 149, 0, 150,
	314, 151, 152, 397, 153, 0, 154, 155, 0, 156,
	262, 425, 157, 158, 315, 159, 456, 160, 0, 161,
	162, 164, 215, 163, 431, 0, 0, 165, 166, 0,
	264, 457, 0, 0, 263, 432, 433, 406, 167, 168,
	169, 170, 0, 0, 171, 172, 426, 0, 173, 174,
	175, 220, 458, 1289, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 384, 0, 412, 400, 401, 402, 399,
	388, 0, 0, 380, 381, 0, 0, 91, 92, 382,
	93, 0, 389, 0, 0, 394, 0, 0, 0, 94,
	95, 181, 441, 442, 96, 443, 444, 0, 97, 186,
	187, 98, 409, 427, 445, 446, 0, 437, 0, 420,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 304,
	104, 105, 0, 421, 423, 0, 422, 424, 106, 107,
	108, 109, 447, 110, 448, 449, 480, 0, 111, 0,
	0, 0, 440, 113, 0, 0, 0, 0, 393, 114,
	428, 407, 0, 115, 116, 450, 117, 0, 0, 0,
	305, 0, 118, 438, 0, 198, 0, 119, 120, 434,
	436, 0, 0, 0, 306, 121, 451, 452, 453, 0,
	419, 0, 307, 122, 308, 123, 0, 0, 439, 309,
	124, 310, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 383, 133, 408,
	435, 134, 454, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 312, 138, 313, 429, 139, 140, 0, 430,
	141, 211, 0, 142, 143, 144, 455, 145, 146, 0,
	147, 148, 149, 0, 150, 314, 151, 152, 397, 153,
	0, 154, 155, 0, 156, 262, 425, 157, 158, 315,
	159, 456, 160, 0, 161, 162, 164, 215, 163, 431,
	0, 0, 165, 166, 0, 264, 457, 0, 0, 263,
	432, 433, 406, 167, 168, 169, 170, 0, 0, 171,
	172, 426, 0, 173, 174, 175, 220, 458, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 384, 0,
	412, 400, 401, 402, 399, 388, 0, 0, 380, 381,
	0, 0, 91, 92, 382, 93, 0, 389, 0, 0,
	394, 0, 0, 0, 94, 95, 181, 441, 442, 96,
	443, 444, 0, 97, 186, 187, 98, 409, 427, 445,
	446, 0, 437, 0, 420, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 304, 104, 105, 0, 421, 423,
	0, 422, 424, 106, 107, 108, 109, 447, 110, 448,
	449, 0, 0, 111, 0, 0, 0, 440, 113, 0,
	0, 0, 0, 393, 114, 428, 407, 0, 115, 116,
	450, 117, 0, 0, 1009, 305, 0, 118, 438, 0,
	198, 0, 119, 120, 434, 436, 0, 0, 0, 306,
	121, 451, 452, 453, 0, 419, 0, 307, 122, 308,
	123, 0, 0, 439, 309, 124, 310, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 311, 130,
	131, 132, 383, 133, 408, 435, 134, 454, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 312, 138, 313,
	429, 139, 140, 0, 430, 141, 211, 0, 142, 143,
	144, 455, 145, 146, 0, 147, 148, 149, 0, 150,
	314, 151, 152, 397, 153, 0, 154, 155, 0, 156,
	262, 425, 157, 158, 315, 159, 456, 160, 0, 161,
	162, 164, 215, 163, 431, 0, 0, 165, 166, 0,
	264, 457, 0, 0, 263, 432, 433, 406, 167, 168,
	169, 170, 0, 0, 171, 172, 426, 0, 173, 174,
	175, 220, 458, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 384, 0, 412, 400, 401, 402, 399,
	388, 0, 0, 380, 381, 0, 0, 91, 92, 382,
	93, 0, 389, 0, 0, 394, 0, 0, 0, 94,
	95, 181, 441, 442, 96, 443, 444, 0, 97, 186,
	187, 98, 409, 427, 445, 446, 0, 437, 0, 420,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 304,
	104, 105, 0, 421, 423, 0, 422, 424, 106, 107,
	108, 109, 447, 110, 448, 449, 0, 0, 111, 0,
	0, 0, 440, 113, 0, 0, 0, 0, 393, 114,
	428, 407, 0, 115, 116, 450, 117, 0, 0, 0,
	305, 0, 118, 438, 0, 198, 0, 119, 120, 434,
	436, 0, 0, 0, 306, 121, 451, 452, 453, 0,
	419, 0, 307, 122, 308, 123, 0, 0, 439, 309,
	124, 310, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 383, 133, 408,
	435, 134, 454, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 312, 138, 313, 429, 139, 140, 0, 430,
	141, 211, 0, 142, 143, 144, 455, 145, 146, 0,
	147, 148, 149, 0, 150, 314, 151, 152, 397, 153,
	0, 154, 155, 0, 156, 262, 425, 157, 158, 315,
	159, 456, 160, 0, 161, 162, 164, 215, 163, 431,
	0, 0, 165, 166, 0, 264, 457, 0, 0, 263,
	432, 433, 406, 167, 168, 169, 170, 0, 0, 171,
	172, 426, 0, 173, 174, 175, 220, 458, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 381,
	378, 0, 0, 0, 382, 0, 0, 389, 412, 400,
	401, 402, 399, 388, 0, 0, 0, 0, 0, 0,
	91, 92, 659, 93, 0, 0, 0, 0, 394, 0,
	0, 0, 94, 95, 181, 441, 442, 96, 443, 444,
	0, 97, 186, 187, 98, 409, 427, 445, 446, 0,
	437, 0, 420, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 421, 423, 0, 422,
	424, 106, 107, 108, 109, 447, 110, 448, 449, 0,
	0, 111, 0, 0, 0, 440, 113, 0, 0, 0,
	0, 393, 114, 428, 407, 0, 115, 116, 450, 117,
	0, 0, 0, 305, 0, 118, 438, 0, 198, 0,
	119, 120, 434, 436, 0, 0, 0, 306, 121, 451,
	452, 453, 0, 419, 0, 307, 122, 308, 123, 0,
	0, 439, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	383, 133, 408, 435, 134, 454, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 429, 139,
	140, 0, 430, 141, 211, 0, 142, 143, 144, 455,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 397, 153, 0, 154, 155, 0, 156, 262, 425,
	157, 158, 315, 159, 456, 160, 0, 161, 162, 164,
	215, 163, 431, 0, 0, 165, 166, 0, 264, 457,
	0, 0, 263, 432, 433, 406, 167, 168, 169, 170,
	0, 0, 171, 172, 426, 0, 173, 174, 175, 220,
	458, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 384, 0, 412, 400, 401, 402, 399, 388, 0,
	0, 380, 381, 0, 0, 91, 92, 382, 93, 0,
	389, 0, 0, 394, 0, 0, 0, 94, 95, 181,
	441, 442, 96, 443, 444, 0, 97, 186, 187, 98,
	409, 427, 445, 446, 0, 437, 0, 420, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 304, 104, 1602,
	0, 421, 423, 0, 422, 424, 106, 107, 108, 109,
	447, 110, 448, 449, 0, 0, 111, 0, 0, 0,
	440, 113, 0, 0, 0, 0, 393, 114, 428, 407,
	0, 115, 116, 450, 117, 0, 0, 0, 305, 0,
	118, 438, 0, 198, 0, 119, 120, 434, 436, 0,
	0, 0, 306, 121, 451, 452, 453, 0, 419, 0,
	307, 122, 308, 123, 0, 0, 439, 309, 124, 310,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 311, 130, 131, 132, 383, 133, 408, 435, 134,
	454, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	312, 138, 313, 429, 139, 140, 0, 430, 141, 211,
	0, 142, 143, 144, 455, 145, 146, 0, 147, 148,
	149, 0, 150, 314, 151, 152, 397, 153, 0, 154,
	155, 0, 156, 262, 425, 157, 158, 315, 159, 456,
	160, 0, 161, 162, 164, 215, 163, 431, 0, 0,
	165, 166, 0, 264, 457, 0, 0, 263, 432, 433,
	406, 167, 168, 1601, 170, 0, 0, 171, 172, 426,
	0, 173, 174, 175, 220, 458, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 384, 0, 412, 400,
	401, 402, 399, 388, 0, 0, 380, 381, 0, 0,
	91, 92, 382, 93, 0, 389, 0, 0, 394, 0,
	0, 0, 94, 95, 1600, 441, 442, 96, 443, 444,
	0, 97, 186, 187, 98, 409, 427, 445, 446, 0,
	437, 0, 420, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 1602, 0, 421, 423, 0, 422,
	424, 106, 107, 108, 109, 447, 110, 448, 449, 0,
	0, 111, 0, 0, 0, 440, 113, 0, 0, 0,
	0, 393, 114, 428, 407, 0, 115, 116, 450, 117,
	0, 0, 0, 305, 0, 118, 438, 0, 198, 0,
	119, 120, 434, 436, 0, 0, 0, 306, 121, 451,
	452, 453, 0, 419, 0, 307, 122, 308, 123, 0,
	0, 439, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	383, 133, 408, 435, 134, 454, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 429, 139,
	140, 0, 430, 141, 211, 0, 142, 143, 144, 455,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 397, 153, 0, 154, 155, 0, 156, 262, 425,
	157, 158, 315, 159, 456, 160, 0, 161, 162, 164,
	215, 163, 431, 0, 0, 165, 166, 0, 264, 457,
	0, 0, 263, 432, 433, 406, 167, 168, 1601, 170,
	0, 0, 171, 172, 426, 0, 173, 174, 175, 220,
	458, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 384, 0, 412, 400, 401, 402, 399, 388, 0,
	0, 380, 381, 0, 0, 91, 92, 382, 93, 0,
	389, 0, 0, 394, 0, 0, 0, 94, 95, 181,
	441, 442, 96, 443, 444, 0, 97, 186, 187, 98,
	409, 427, 445, 446, 0, 437, 0, 420, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 304, 104, 105,
	0, 421, 423, 0, 422, 424, 106, 107, 108, 109,
	447, 110, 448, 449, 0, 0, 111, 0, 0, 0,
	440, 113, 0, 0, 0, 0, 393, 114, 428, 407,
	0, 115, 116, 450, 117, 0, 0, 0, 305, 0,
	118, 438, 0, 198, 0, 119, 120, 434, 436, 0,
	0, 0, 306, 121, 451, 452, 453, 0, 419, 0,
	307, 122, 308, 123, 0, 0, 439, 309, 124, 310,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 311, 130, 131, 132, 383, 133, 408, 435, 134,
	454, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	312, 138, 313, 429, 139, 140, 0, 430, 141, 211,
	0, 142, 143, 144, 455, 145, 146, 0, 147, 148,
	149, 0, 150, 314, 151, 152, 397, 153, 0, 154,
	155, 0, 156, 262, 425, 157, 158, 315, 159, 456,
	160, 0, 161, 162, 164, 215, 163, 431, 0, 0,
	165, 166, 0, 264, 457, 0, 0, 263, 432, 433,
	406, 167, 168, 169, 170, 0, 0, 171, 172, 426,
	0, 173, 174, 175, 220, 458, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 384, 0, 412, 400,
	401, 402, 399, 388, 0, 0, 380, 381, 0, 0,
	91, 92, 382, 93, 0, 389, 0, 0, 394, 0,
	0, 0, 94, 95, 181, 441, 442, 96, 443, 444,
	0, 97, 186, 187, 98, 409, 427, 445, 446, 0,
	437, 0, 420, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 421, 423, 0, 422,
	424, 106, 107, 108, 109, 447, 110, 448, 449, 0,
	0, 111, 0, 0, 0, 440, 113, 0, 0, 0,
	0, 393, 114, 428, 407, 0, 115, 116, 450, 117,
	0, 0, 0, 305, 0, 118, 438, 0, 198, 0,
	119, 120, 434, 436, 0, 0, 0, 306, 121, 451,
	452, 453, 0, 419, 0, 307, 122, 308, 123, 0,
	0, 439, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	0, 133, 408, 435, 134, 454, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 429, 139,
	140, 0, 430, 141, 211, 0, 142, 143, 144, 455,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 999, 153, 0, 154, 155, 0, 156, 262, 425,
	157, 158, 315, 159, 456, 160, 0, 161, 162, 164,
	215, 163, 431, 0, 0, 165, 166, 0, 264, 457,
	0, 0, 263, 432, 433, 406, 167, 168, 169, 170,
	0, 0, 171, 172, 426, 0, 173, 174, 175, 220,
	458, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 412, 400, 401, 402, 399, 388, 0, 0, 0,
	0, 995, 996, 91, 92, 0, 93, 997, 0, 0,
	998, 394, 0, 0, 0, 94, 95, 0, 441, 442,
	96, 443, 444, 0, 97, 186, 187, 98, 409, 427,
	445, 446, 0, 437, 0, 420, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 304, 104, 1602, 0, 421,
	423, 0, 422, 424, 106, 107, 108, 109, 447, 110,
	448, 449, 0, 0, 111, 0, 0, 0, 440, 113,
	0, 0, 0, 0, 393, 114, 428, 407, 0, 115,
	116, 450, 117, 0, 0, 0, 305, 0, 118, 438,
	0, 198, 0, 119, 120, 434, 436, 0, 0, 0,
	306, 121, 451, 452, 453, 0, 419, 0, 0, 122,
	308, 123, 0, 0, 439, 309, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 311,
	130, 131, 132, 383, 133, 408, 435, 134, 454, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 312, 138,
	313, 429, 139, 140, 0, 430, 141, 211, 0, 142,
	143, 144, 455, 145, 146, 0, 147, 148, 149, 0,
	150, 314, 151, 152, 397, 153, 0, 154, 155, 0,
	156, 262, 425, 157, 158, 0, 159, 456, 160, 0,
	161, 162, 164, 215, 163, 431, 0, 0, 165, 166,
	0, 264, 457, 0, 0, 263, 432, 433, 406, 167,
	168, 1601, 170, 0, 0, 171, 172, 426, 0, 173,
	174, 175, 220, 458, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 381, 91, 92, 0, 93,
	382, 0, 0, 389, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 427, 188, 189, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	105, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 428,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 201, 202, 203, 0, 204,
	0, 307, 122, 308, 123, 0, 0, 439, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 0, 133, 0, 435,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 425, 157, 158, 315, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 432,
	433, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 220, 221, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 1397, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 303, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 305, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 306, 121, 201, 202,
	203, 0, 204, 0, 307, 122, 308, 123, 0, 0,
	205, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	213, 153, 0, 154, 155, 45, 156, 262, 0, 157,
	158, 315, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 47, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 302, 221,
	0, 176, 0, 0, 0, 43, 177, 178, 179, 180,
	0, 44, 298, 534, 538, 0, 539, 529, 0, 0,
	0, 0, 0, 0, 91, 92, 0, 93, 0, 42,
	0, 0, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 303, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 542, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 531, 0,
	115, 116, 196, 117, 0, 0, 0, 305, 0, 118,
	197, 0, 198, 0, 119, 120, 199, 200, 0, 0,
	0, 306, 121, 201, 202, 203, 0, 204, 0, 307,
	122, 308, 123, 0, 0, 205, 309, 124, 310, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 532, 0, 0, 0, 137, 208, 312,
	138, 313, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 315, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 530,
	167, 168, 169, 170, 0, 0, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 298, 534, 538, 0, 539,
	529, 0, 0, 0, 0, 540, 535, 91, 92, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 303,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 304,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 525, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 531, 0, 115, 116, 196, 117, 0, 0, 0,
	305, 0, 118, 197, 0, 198, 0, 119, 120, 199,
	200, 0, 0, 0, 306, 121, 201, 202, 203, 0,
	204, 0, 307, 122, 308, 123, 0, 0, 205, 309,
	124, 310, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 532, 0, 0, 0,
	137, 208, 312, 138, 313, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 314, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 315,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 530, 167, 168, 169, 170, 0, 0, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 298, 534,
	538, 0, 539, 529, 0, 0, 0, 0, 540, 535,
	91, 92, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 303, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 531, 0, 115, 116, 196, 117,
	0, 0, 0, 305, 0, 118, 197, 0, 198, 0,
	119, 120, 199, 200, 0, 0, 0, 306, 121, 201,
	202, 203, 0, 204, 0, 307, 122, 308, 123, 0,
	0, 205, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 532,
	0, 0, 0, 137, 208, 312, 138, 313, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 315, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 530, 167, 168, 169, 170,
	0, 0, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 88, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	0, 540, 535, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 273, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 45,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 47, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 302, 221, 0, 176, 0, 0, 0, 43,
	177, 178, 179, 180, 88, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 865, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 199, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 45, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	47, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 302, 221, 0, 176, 0,
	0, 0, 43, 177, 178, 179, 180, 88, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 42, 0, 1099, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 0,
	369, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 273, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 0, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 865, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 199, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 803, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 0,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 0, 93, 0, 0, 0, 1307, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 199, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 469, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 511, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 199, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 510, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 514, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 199,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 298, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	514, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 303, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 305, 0, 118, 197, 0, 198, 0,
	119, 120, 199, 200, 0, 0, 0, 306, 121, 201,
	202, 203, 0, 204, 0, 307, 122, 308, 123, 0,
	0, 205, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 315, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 778, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 776, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 781, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 843, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 780, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 844, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 88, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 778, 190, 0, 0, 773,
	99, 100, 101, 0, 102, 776, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 781, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 772, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 780, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 779, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 88, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 0, 0, 1099, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 273, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 279, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 273, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 1043, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 1041, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 1032,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 651, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 497, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 0, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 354, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 351, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 85, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	84, 217, 0, 0, 80, 218, 219, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 293, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	290, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 288, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 282, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 199,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 257, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 199, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 78, 0, 0, 125,
	0, 126, 127, 128, 129, 85, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 79, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 84, 217,
	0, 0, 80, 218, 219, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 0, 0, 210, 141, 211, 0, 142,
	0, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 0, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 675, 176, 693, 694, 695, 0,
	177, 178, 179, 180, 0, 0, 696, 0, 0, 0,
	0, 0, 677, 0, 702, 0, 675, 0, 693, 694,
	695, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	0, 676, 0, 0, 677, 0, 702, 690, 675, 0,
	693, 694, 695, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 676, 0, 0, 677, 0, 702, 690,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 676, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 0, 1164, 0, 1180,
	1181, 1182, 0, 0, 0, 701, 0, 0, 0, 1280,
	0, 0, 0, 0, 698, 0, 703, 0, 0, 0,
	691, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 0, 703, 0,
	1177, 697, 691, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 0, 0, 697, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 1183, 675,
	0, 693, 694, 695, 0, 0, 0, 692, 0, 0,
	0, 696, 0, 1178, 0, 0, 700, 677, 0, 702,
	0, 699, 0, 687, 688, 689, 0, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 676, 0, 0, 0,
	0, 1543, 690, 699, 0, 687, 688, 689, 0, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 0, 0,
	0, 0, 0, 1522, 0, 699, 1179, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	675, 0, 693, 694, 695, 1517, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 0, 677, 703,
	702, 0, 0, 0, 675, 0, 693, 694, 695, 0,
	701, 0, 0, 0, 0, 0, 696, 676, 0, 698,
	0, 0, 677, 690, 702, 691, 1174, 1175, 1176, 0,
	1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169, 0,
	0, 676, 0, 0, 0, 0, 697, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	703, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	0, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 0, 0, 703, 0, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 697, 0, 0,
	691, 0, 0, 0, 0, 0, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 697, 0, 0, 0, 0, 1513, 0, 675, 692,
	693, 694, 695, 0, 0, 0, 0, 0, 700, 0,
	696, 0, 0, 0, 0, 0, 677, 0, 702, 0,
	0, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 676, 675, 0, 693, 694,
	695, 690, 0, 0, 0, 0, 0, 0, 696, 0,
	0, 0, 0, 0, 677, 0, 702, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 676, 0, 0, 0, 1455, 0, 690,
	0, 699, 0, 687, 688, 689, 0, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 0, 0, 703, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 0, 0, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 692, 0, 0,
	0, 0, 0, 697, 0, 0, 700, 0, 675, 0,
	693, 694, 695, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 677, 0, 702, 0,
	0, 0, 0, 0, 0, 692, 675, 0, 693, 694,
	695, 0, 0, 0, 700, 676, 0, 0, 696, 0,
	0, 690, 0, 0, 677, 699, 702, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	0, 0, 0, 676, 0, 1372, 0, 0, 0, 690,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 699, 0, 687, 688, 689, 0, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 703, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 701,
	675, 0, 693, 694, 695, 0, 0, 0, 698, 0,
	0, 0, 696, 0, 691, 0, 703, 0, 677, 0,
	702, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 0, 0, 0, 0, 697, 698, 676, 0, 0,
	0, 0, 691, 690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 697, 0, 0, 0, 692, 0, 0,
	0, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	703, 0, 0, 0, 700, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 0, 0, 0, 699, 691, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	0, 0, 0, 0, 0, 1285, 0, 697, 0, 0,
	0, 0, 0, 699, 0, 687, 688, 689, 0, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 0, 0,
	0, 0, 675, 947, 693, 694, 695, 0, 0, 692,
	0, 0, 0, 0, 696, 0, 0, 0, 700, 0,
	677, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 690, 675, 0, 693, 694,
	695, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	0, 0, 0, 0, 677, 0, 702, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 676, 0, 1356, 0, 1619, 675, 690,
	693, 694, 695, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 703, 0, 854, 0, 677, 0, 702, 0,
	0, 0, 0, 701, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 676, 0, 0, 691, 0,
	0, 690, 1194, 0, 1193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 697,
	0, 0, 0, 0, 0, 0, 855, 701, 0, 0,
	0, 1618, 0, 0, 0, 0, 698, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 703, 0,
	700, 0, 0, 697, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 0, 0, 0, 691, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 697, 0, 0, 677, 699,
	702, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 705, 676, 0, 0,
	0, 0, 675, 690, 693, 694, 695, 692, 0, 0,
	0, 0, 0, 0, 696, 0, 700, 704, 0, 0,
	677, 0, 702, 699, 0, 687, 688, 689, 0, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 0, 676,
	0, 0, 0, 0, 675, 690, 693, 694, 695, 0,
	0, 0, 0, 0, 0, 0, 696, 0, 0, 0,
	703, 0, 677, 0, 702, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	698, 676, 0, 0, 0, 0, 691, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 0, 0, 0, 703, 0, 0, 0, 700, 697,
	0, 0, 0, 0, 0, 701, 675, 0, 693, 694,
	695, 0, 0, 0, 698, 0, 0, 0, 696, 0,
	691, 0, 0, 0, 677, 0, 702, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 697, 252, 676, 0, 0, 0, 699, 0, 690,
	0, 0, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 699,
	0, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 0, 0, 0,
	0, 699, 691, 687, 688, 689, 0, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 0, 0, 0, 0,
	0, 0, 0, 697, 0, 0, 0, 0, 0, 0,
	675, 0, 693, 694, 695, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 0, 677, 0,
	702, 0, 0, 0, 675, 692, 693, 694, 695, 0,
	0, 0, 0, 0, 700, 0, 696, 676, 0, 1195,
	0, 0, 677, 690, 702, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 676, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 699, 0, 687, 688, 689, 1200, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 0, 0,
	703, 0, 0, 0, 0, 675, 0, 693, 694, 695,
	0, 701, 0, 0, 0, 0, 0, 696, 0, 0,
	698, 0, 0, 677, 703, 702, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 0,
	0, 0, 676, 0, 698, 0, 0, 697, 690, 0,
	691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 0, 0, 0, 0, 675, 692,
	693, 694, 695, 0, 0, 0, 0, 0, 700, 0,
	696, 0, 0, 1157, 0, 0, 677, 0, 702, 0,
	0, 0, 0, 692, 0, 703, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 676, 701, 0, 0, 0,
	0, 690, 0, 0, 0, 698, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 697, 0, 1164, 0, 1180, 1181, 1182, 0,
	0, 699, 1162, 687, 688, 689, 1279, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 0, 0, 703, 0,
	0, 0, 0, 675, 692, 693, 694, 695, 0, 701,
	0, 0, 0, 700, 0, 696, 0, 1177, 698, 0,
	0, 677, 0, 702, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 697, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 692, 675, 0,
	693, 694, 695, 0, 0, 1183, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 677, 0, 702, 0,
	1178, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 676, 0, 0, 0, 0,
	0, 690, 0, 698, 0, 0, 0, 0, 0, 691,
	0, 0, 0, 0, 0, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	697, 0, 0, 1179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 0, 0, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 1174, 1175, 1176, 0, 1173, 1170, 1171,
	1172, 1165, 1166, 1167, 1168, 1169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 0, 687, 688, 689, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 0, 0, 692, 0, 0,
	0, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	883, 898, 874, 891, 890, 0, 0, 876, 875, 0,
	0, 0, 900, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 888, 887, 0, 699, 0, 687, 688, 689,
	886, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 880, 881, 0, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 877, 0, 0, 897, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901,
}
var sqlPact = [...]int{

	112, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 740,
	-1000, -1000, -1000, 563, 645, 71, 1434, 1434, -1000, -1000,
	16114, 2101, 341, 343, 341, 341, 341, 404, 521, 90,
	-1000, 875, 3, 15891, 12992, 1091, 8, 12546, 234, 112,
	12769, 12992, 15668, 946, 877, 12546, 15445, 15222, 14999, -1000,
	8523, -1000, -1000, -1000, -1000, 697, -1000, 2, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 689, -1000, 14776, 14776,
	629, -1000, -1000, 425, 270, 1097, -1000, 16, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 945, -1000, 688, 943, 942, 267,
	699, -1000, 629, -1000, 629, -1000, -1000, -1000, 12546, -1000,
	14553, 887, 14330, -1000, 875, -1000, -1000, -1000, 716, 1089,
	1089, 1089, 1119, 104, 102, 90, -10, 12992, -1000, 235,
	-1000, -1000, -1000, -1000, -1000, -10, 6551, 6551, -1000, -1000,
	234, -1000, 247, 10945, -138, -1000, 6061, -1000, 786, 1008,
	495, 483, 1007, 12546, 12992, 449, 14107, -1000, 1005, 94,
	1004, -1000, -23, 995, -1000, -31, -1000, -1000, -1000, -1000,
	-1000, -1000, 234, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11188, 912, 11188, -1000,
	-1000, -1000, 1, 0, 807, 894, 9011, 8768, 1060, 872,
	-1000, -1000, -1000, 15, 3595, 12992, 954, 11188, 12992, -1000,
	12992, -1000, 793, -1000, -1000, -4, -5, -1000, 95, -1000,
	232, 763, 13884, -1000, 756, -1000, 716, -1000, 700, 787,
	6814, 7549, 90, -1000, -1000, 90, 90, 7549, -1000, -1000,
	12992, -10, 1141, 12992, 939, -14, -1000, 17772, -1000, -1000,
	7549, 7549, 7549, 7549, 7549, 644, -1000, -1000, -1000, 4328,
	-1000, -1000, -138, 218, 140, -1000, -1000, 217, -138, -1000,
	-1000, -1000, -1000, 216, 1236, 368, -1000, -1000, -1000, 7549,
	275, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	950, 213, 212, -1000, -1000, -1000, -1000, 208, 207, 205,
	202, 201, 199, 195, 192, 189, 187, 186, 184, 181,
	602, -1000, 293, -1000, -1000, 293, 293, -1000, 167, 167,
	168, -1000, -1000, -1000, 167, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 178, 60, -1000, -1000, -1000, 12992,
	-138, -1000, -1000, -1000, 3595, 7549, 3351, -35, -1000, 18363,
	-1000, -30, 558, -1000, 12090, 1073, 1072, 1078, 12546, 410,
	406, 12992, 282, 70, 1137, 10459, -1000, 12992, 12992, -1000,
	12992, -1000, -1000, 12992, 12992, 12992, 3, 11634, 405, -26,
	11411, 12992, -1000, 11, -1000, -1000, 937, 578, 874, 638,
	-1000, -1000, -1000, -1000, -15, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1188, -1000, -1000, -1000, -1000,
	1216, -15, -1000, -1000, -1000, -1000, -1000, 1235, -1000, -1000,
	-1000, -1000, 3595, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12992,
	-1000, -1000, -1000, -1000, 578, 874, -1000, 12546, 11857, 994,
	687, 752, -1000, 992, -1000, -1000, -1000, -1000, 18363, -1000,
	18363, 466, 869, -1000, 869, -17, -1000, 17598, -1000, 177,
	-36, -1000, 282, 10216, 6551, 18609, 12992, 397, 7549, 7549,
	7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549,
	7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549, 904,
	399, 827, 611, 166, 3595, -1000, 1170, 1170, 1170, 3069,
	3069, 139, -139, 17256, -18, -138, -1000, -1000, 5553, 5308,
	-138, 3838, -1000, 765, 1215, 291, 18363, 960, 918, 176,
	100, 99, 7549, 920, 7549, 7794, 7549, 7549, 4573, 7549,
	7549, 7549, 7549, 7549, 7549, -1000, 171, -1000, -1000, -1000,
	-1000, 1211, -1000, -1000, 1209, -1000, 1207, 282, 96, -1000,
	-1000, 2110, -1000, -1000, 6061, -1000, 591, 12992, 12992, 12992,
	-1000, -1000, 742, 13661, -1000, 18609, 12992, -1000, 170, 169,
	843, 817, 12992, 12992, 13438, 13215, 12992, 785, 12992, 12992,
	482, -1000, 7549, 686, -1000, 9730, 297, 12992, 59, -1000,
	-1000, -1000, 260, 12992, -1000, -1000, -1000, 94, -1000, -23,
	-1000, -1000, 12992, 11411, -26, -27, -1000, -1000, 12992, -1000,
	-1000, -1000, 499, -1000, 560, -1000, 9254, -1000, -1000, -1000,
	765, -1000, -33, -1000, -1000, -1000, -1000, 92, -28, -1000,
	-1000, -1000, -1000, 12992, 222, 12992, 12992, 988, 12992, -1000,
	-1000, -1000, 7549, -1000, -1000, -1000, 3, 12992, -1000, 900,
	-29, 1345, 12323, 12323, -1000, 9487, -1000, -1000, 1135, -1000,
	-1000, -1000, -1000, 66, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 168, 602, 167, 167, 167,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 293, 293,
	293, -1000, -1000, 266, 510, 510, 1122, 1122, 1122, 930,
	930, 1114, 2030, 17730, 17730, 17730, 2003, 398, 398, 17730,
	17730, 17730, 3069, 1706, 138, 7549, 393, 605, 166, 7549,
	-1000, 865, -1000, -1000, -1000, 934, 164, 7794, 7794, -1000,
	-1000, -1000, 4328, -1000, -1000, 163, 7549, -1000, 7549, -37,
	-77, -1000, 18363, -1000, -40, -1000, -1000, -16, 7549, 7549,
	7549, 91, -1000, 379, -1000, 378, 376, 375, -1000, 161,
	88, 462, -1000, 7549, 646, 157, 156, 7549, -1000, -1000,
	18258, 85, 932, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	84, 18185, 83, 527, -1000, 7794, 7794, 7794, 4328, 154,
	82, 17556, -88, 18104, 6306, 6306, 6306, 79, 18080, 7549,
	-88, 2800, 2477, 2402, -41, -45, -46, 1202, -47, 75,
	73, 900, -1000, -1000, 7549, -1000, -1000, -1000, 369, 361,
	985, -1000, 718, -1000, 678, 7549, 12992, 153, 152, 561,
	-1000, 975, 779, 969, 779, -1000, -30, 529, -1000, -1000,
	359, 18363, -1000, 1082, -51, -1000, -1000, 282, 10459, 6061,
	-52, -1000, -33, -1000, -33, -1000, -1000, -1000, -1000, -1000,
	12992, -1000, 11857, 149, 12992, 148, 147, 12992, -1000, -1000,
	68, -1000, -1000, -1000, -1000, -1000, 896, 1112, 10216, 861,
	858, 10216, 867, 665, 665, 665, -1000, -1000, -1000, 12992,
	146, -1000, 9973, 64, 1345, 241, 240, -1000, 1200, 7549,
	138, 7549, 7794, 7794, -1000, 138, -1000, -1000, -1000, -1000,
	926, 145, 7549, 18609, 18334, 16667, -53, 5063, -61, 17228,
	7549, -1000, -1000, 140, -1000, 57, 5816, -1000, 17814, -9,
	-9, -1000, 694, 690, 626, 456, 1198, 1224, 981, -1000,
	7549, 17926, -1000, 10702, 286, 671, 17076, 18609, -1000, 7549,
	-1000, 924, 7549, -1000, 18609, 7794, 7794, 7794, 7794, 7794,
	7794, 7794, 7794, 7794, 7794, 7794, 7794, 7794, 7794, 7794,
	7794, 7794, 7794, 856, 7794, 1169, 1169, 1169, -69, 4818,
	-1000, 949, 924, 7549, 7549, 18609, 56, 54, 53, -1000,
	7549, -88, 7549, 7549, 7549, -1000, -1000, -1000, 48, -1000,
	1194, -1000, -1000, 896, 17340, 12992, 12992, 12992, 966, 1488,
	-1000, 17038, -59, 12992, 12992, -1000, 870, 908, 333, 12992,
	-1000, 12992, -1000, 12992, 12992, 12992, 12992, 162, 3, -1000,
	-1000, -1000, 259, -1000, -1000, 8280, 143, 11857, 8280, 685,
	-1000, 280, 7549, 7549, 1345, 10216, 10216, 1671, 828, 10216,
	-1000, -1000, -1000, -1000, 141, 12992, 12323, 395, 1184, 47,
	1134, 138, 2882, 236, 7549, 18609, 18438, -60, -1000, 7549,
	7549, -1000, -64, -1000, 7549, -1000, 18363, -1000, 1223, 7549,
	43, 36, 35, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	34, -1000, -1000, 18363, 7549, -1000, -1000, 16337, 7549, 32,
	-1000, 31, 18363, 949, 18363, -1000, 507, 507, 1169, 1169,
	1169, 447, 447, 460, 411, 978, 978, 978, 1077, 452,
	452, 978, 978, 978, 917, 781, 136, 2449, 7549, -68,
	-1000, -1000, -1000, 18363, 18363, 29, -1000, -1000, -1000, -88,
	2222, 16884, 16860, -1000, 27, 280, -1000, -1000, -1000, -1000,
	12992, -1000, 12992, -1000, 12992, 735, -1000, -1000, 815, 135,
	7794, 12992, -1000, 588, -78, -80, 725, -1000, 714, 7549,
	-1000, 18609, 779, 779, -1000, 355, 353, -1000, 1018, 8280,
	1071, -1000, 123, -84, -1000, 77, 1093, 7549, -1000, -1000,
	121, 8280, 25, -86, 12992, -1000, 12992, 18363, -88, -1000,
	1671, -1000, 120, 7549, 10216, -1000, 12992, -90, -1000, -1000,
	238, 237, -1000, 7549, 7549, 18438, -91, -1000, 18609, 138,
	138, -1000, 16779, -1000, 17814, -1000, -1000, -1000, -1000, 18363,
	640, -1000, 16608, -1000, -1000, -1000, 7794, 913, 114, 18609,
	16586, -1000, -1000, 7549, -1000, -1000, -1000, -1000, -1000, 715,
	-1000, -1000, -1000, 7549, 2449, 78, -1000, 111, -1000, -1000,
	-1000, 544, -1000, -1000, 18363, 1098, -1000, -1000, 12992, 12992,
	389, -92, 12992, -1000, -1000, 4083, 588, 8280, 1074, -138,
	12992, 1074, 16564, 3838, -96, -1000, 588, 110, -73, -1000,
	1133, -1000, 12992, 18363, -1000, -102, -1000, -1000, -1000, 138,
	138, -1000, -1000, -1000, 23, 671, 1110, -1000, 1836, 7794,
	18609, -103, -1000, 2966, -1000, 2854, 782, 12992, 12992, 12992,
	302, 12992, -1000, -1000, 431, -1000, 282, -1000, -1000, -1000,
	-1000, -1000, -1000, 1093, -16, 588, -1000, 8280, 12992, 109,
	-108, -1000, -1000, 570, 7549, 1836, -114, -1000, -1000, -1000,
	679, 749, -123, -124, 78, -1000, 7549, -1000, 10459, -1000,
	1074, 20, -1000, -131, -1000, -1000, -1000, 19, 7304, 7304,
	-88, -1000, -1000, 683, 680, 486, -1000, -1000, -1000, -1000,
	-1000, 782, 18363, -100, -1000, -1000, 588, -1000, -1000, -1000,
	8037, 728, 463, 17512, -1000, -1000, 1022, -1000, 315, 842,
	842, 679, -1000, -1000, 1149, -1000, -1000, -1000, -1000, -1000,
	-1000, 1162, -1000, -1000, 820, -1000, -1000, 7059, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1483, 1481, 1148, 1477, 1476, 1475, 1474, 1472, 75,
	1471, 1470, 99, 1463, 74, 1462, 1461, 1460, 55, 1457,
	1456, 1455, 1453, 72, 58, 1950, 114, 97, 1451, 1450,
	1448, 16, 78, 77, 1447, 24, 80, 117, 1537, 41,
	27, 42, 54, 73, 1446, 1445, 1443, 1437, 36, 1434,
	1422, 1412, 9, 43, 14, 1410, 30, 127, 1409, 1406,
	76, 1405, 70, 94, 23, 106, 10, 1404, 285, 1402,
	8, 47, 1401, 32, 1400, 20, 52, 118, 1397, 548,
	39, 29, 46, 1396, 1395, 1394, 1392, 83, 63, 38,
	1390, 1389, 48, 1384, 109, 113, 1382, 1381, 1378, 1377,
	1369, 1367, 1097, 1366, 1364, 554, 3, 22, 44, 5,
	88, 87, 28, 0, 527, 746, 1360, 35, 34, 53,
	37, 40, 17, 1354, 79, 1353, 1350, 1347, 1345, 1344,
	56, 1329, 45, 119, 33, 65, 68, 18, 26, 61,
	104, 122, 86, 1328, 96, 1326, 60, 1324, 1323, 589,
	64, 1322, 1321, 1320, 587, 567, 525, 49, 1319, 1318,
	103, 51, 1317, 1316, 62, 1315, 1313, 120, 1312, 115,
	93, 1308, 90, 1307, 69, 1306, 572, 111, 89, 1304,
	91, 50, 1302, 1298, 1296, 19, 2, 13, 6, 7,
	4, 25, 21, 1295, 1292, 95, 66, 1291, 515, 1289,
	1287, 31, 1278, 1272, 15, 1269, 12, 1262, 11, 1,
	1260, 121, 1255, 71, 1254, 1157, 1252, 123, 1248, 1244,
	1222, 57,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 65, 65,
	64, 64, 67, 67, 11, 11, 12, 12, 12, 12,
	145, 145, 144, 13, 17, 211, 211, 211, 215, 215,
	216, 216, 217, 217, 217, 217, 217, 217, 217, 213,
	213, 19, 19, 19, 102, 102, 104, 104, 104, 104,
	37, 101, 101, 101, 101, 103, 103, 103, 103, 169,
	167, 167, 174, 174, 174, 45, 45, 45, 45, 45,
	46, 46, 46, 166, 166, 166, 166, 175, 175, 175,
	175, 175, 175, 47, 47, 47, 173, 173, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 168,
	168, 212, 212, 214, 214, 8, 8, 48, 48, 49,
	49, 108, 108, 108, 107, 183, 183, 184, 184, 184,
	185, 185, 185, 185, 185, 185, 185, 182, 182, 180,
	180, 181, 181, 181, 181, 218, 218, 106, 106, 52,
	52, 188, 188, 188, 188, 186, 186, 186, 186, 186,
	189, 187, 190, 190, 190, 190, 190, 133, 133, 133,
	22, 7, 7, 91, 91, 56, 56, 137, 137, 137,
	41, 41, 31, 31, 31, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 92, 92, 93, 93, 21, 21,
	21, 21, 21, 220, 220, 105, 105, 105, 105, 105,
	36, 6, 6, 14, 44, 44, 98, 98, 98, 100,
	100, 100, 99, 99, 99, 23, 70, 70, 71, 71,
	143, 72, 72, 18, 18, 25, 25, 24, 24, 24,
	24, 24, 24, 26, 26, 27, 27, 27, 27, 27,
	27, 27, 196, 196, 196, 198, 198, 195, 15, 15,
	15, 15, 197, 197, 219, 219, 79, 79, 79, 51,
	50, 50, 54, 54, 53, 55, 55, 136, 77, 77,
	77, 77, 94, 95, 95, 96, 96, 97, 97, 76,
	76, 120, 120, 28, 28, 60, 60, 61, 61, 138,
	138, 138, 138, 139, 139, 139, 139, 139, 139, 134,
	134, 134, 134, 135, 135, 82, 82, 82, 82, 80,
	80, 81, 81, 140, 140, 140, 140, 78, 78, 141,
	141, 141, 109, 109, 146, 146, 146, 59, 59, 59,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 148, 148, 148, 148, 150, 150, 150, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 151, 151, 158, 158, 159, 159, 160, 161, 152,
	152, 153, 153, 154, 155, 162, 162, 162, 164, 164,
	156, 156, 157, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 89, 89, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	191, 191, 191, 191, 191, 191, 191, 193, 193, 194,
	194, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 199, 199, 200, 200,
	201, 201, 202, 202, 204, 205, 205, 205, 206, 210,
	210, 203, 203, 207, 207, 207, 208, 208, 209, 209,
	209, 209, 209, 124, 124, 124, 125, 125, 126, 66,
	66, 122, 122, 121, 121, 121, 123, 123, 83, 163,
	163, 163, 163, 163, 163, 163, 84, 84, 90, 85,
	85, 86, 86, 86, 86, 86, 86, 117, 118, 87,
	87, 87, 119, 119, 127, 131, 131, 130, 129, 129,
	128, 128, 112, 112, 112, 112, 112, 111, 110, 73,
	73, 221, 221, 132, 132, 74, 74, 75, 69, 69,
	68, 68, 142, 142, 142, 142, 62, 62, 63, 63,
	42, 42, 43, 43, 43, 43, 57, 57, 58, 58,
	40, 40, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 165, 165, 165, 38, 38, 38, 39,
	39, 171, 171, 171, 172, 172, 172, 172, 170, 170,
	170, 170, 170, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	4, 2, 4, 4, 3, 3, 4, 3, 2, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 1, 1, 2, 4, 2, 5, 6, 7, 3,
	1, 4, 5, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 10, 13, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 3, 3,
	2, 2, 2, 1, 0, 1, 1, 3, 3, 0,
	3, 3, 6, 6, 1, 3, 1, 4, 2, 8,
	5, 0, 4, 3, 0, 7, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 2,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	4, 5, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 1, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 2, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 2, 1, 2, 2, 1, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -197, 82, 88, 100, 183, -24, -25,
	196, 197, 29, 204, 51, 84, 185, 222, 57, -196,
	-27, -26, 266, 242, 248, 192, -28, 210, 235, 269,
	210, 69, 111, 77, 114, 229, 69, 111, 210, -12,
	266, -18, -14, -23, -9, -215, 18, -216, -217, 57,
	82, 100, 192, 114, 77, 229, -215, -102, 132, 194,
	218, -103, -101, -169, 214, 141, -64, -38, 4, -176,
	-178, 16, 17, 19, 28, 29, 33, 37, 40, 50,
	51, 52, 54, 56, 59, 60, 67, 68, 69, 70,
	72, 77, 81, 82, 88, 92, 93, 95, 101, 106,
	107, 114, 122, 124, 129, 135, 137, 138, 139, 140,
	143, 144, 145, 147, 150, 152, 153, 159, 162, 165,
	166, 169, 172, 173, 174, 176, 177, 179, 180, 181,
	183, 185, 186, 188, 190, 191, 193, 196, 197, 199,
	201, 203, 204, 207, 205, 211, 212, 222, 223, 224,
	225, 228, 229, 232, 233, 234, 238, 243, 244, 245,
	246, 30, 31, 32, 34, 35, 38, 39, 43, 44,
	46, 71, 73, 74, 87, 89, 94, 102, 104, 108,
	109, 115, 116, 117, 119, 127, 149, 151, 160, 164,
	168, 170, 175, 187, 200, 206, 208, 215, 219, 220,
	235, 236, 4, 69, 50, 70, 101, 111, 211, 214,
	218, 18, -220, 218, 218, -220, -220, -220, -219, 210,
	210, -91, 69, 227, -26, -27, -25, -53, -54, 226,
	118, 86, 158, -24, -25, -196, -198, 176, -195, -38,
	132, 141, 194, 218, 214, -198, -50, -51, 18, 79,
	270, -140, -42, 156, -38, -75, 266, -3, -140, 108,
	-38, -42, 108, 98, 120, -141, -140, -38, 108, -62,
	108, -42, -65, 108, -64, -145, -144, -172, 4, -176,
	-178, -177, 235, 48, 58, 99, 113, 121, 123, 128,
	130, 142, 161, 163, 184, 198, 155, 270, 155, -102,
	-102, -104, -36, -37, 122, 172, 216, 251, 98, 246,
	-47, 6, 75, -67, 268, 98, -212, 155, 98, -168,
	98, 246, 122, 172, -105, -36, -37, -105, -78, -140,
	-64, 108, 111, -38, 108, -53, -54, -77, -94, -95,
	131, 154, -79, 18, 79, -79, -79, 37, 267, 267,
	270, -198, -58, 266, -69, -68, -142, -113, 259, -115,
	257, 258, 263, 146, 247, -124, -42, -116, 9, 266,
	-127, -193, -25, 87, 24, -125, -126, 187, -38, 8,
	5, 6, 7, -40, -148, -157, 221, 90, 148, 41,
	-191, -192, 4, -176, -171, -149, -159, -153, -156, 119,
	48, 62, 65, 63, 66, 195, 230, 42, 89, 164,
	168, 208, 219, 220, 108, 149, 109, 46, 102, 127,
	81, 31, 32, 34, 35, 43, 44, 71, 73, 74,
	94, 115, 116, 117, 151, 175, 200, 215, 236, -177,
	-160, -161, -154, -155, -162, -68, -75, 259, -42, 266,
	-73, -112, -111, -110, 271, 264, 268, -74, -132, -113,
	75, -33, 179, -32, 17, 19, 82, 233, 87, 179,
	179, 87, -141, -44, -42, 196, -38, 25, 87, -35,
	270, 40, 181, 87, 270, 87, 267, 270, -211, -63,
	210, 69, -43, -38, 259, -217, -211, 270, 270, 129,
	-46, 135, 145, 106, -167, 75, -174, -166, -133, 9,
	221, 90, 155, -173, 5, 258, -165, -172, 6, 8,
	257, -167, 75, 60, -175, 6, 4, -157, -133, 75,
	132, 119, 268, -170, 4, -176, -178, -177, -179, 18,
	20, 21, 22, 23, 24, 25, 26, 27, 36, 41,
	42, 45, 47, 49, 55, 57, 61, 62, 63, 64,
	65, 66, 75, 76, 78, 79, 80, 83, 84, 86,
	90, 91, 96, 97, 98, 100, 103, 105, 110, 111,
	112, 118, 120, 125, 126, 131, 133, 134, 146, 148,
	154, 155, 156, 157, 158, 167, 171, 178, 182, 192,
	195, 202, 209, 210, 213, 216, 217, 221, 226, 227,
	230, 231, 237, 239, 240, 241, 242, -169, -214, 96,
	-211, -169, -169, 129, 270, 270, -35, 270, 266, 146,
	-39, 108, -38, 146, -77, -95, -94, -96, -113, 18,
	-113, -115, -26, -26, -26, -55, -136, -113, -195, 25,
	-57, -38, -60, 98, 270, 10, 47, 28, 257, 258,
	259, 260, 261, 254, 255, 256, 253, 249, 250, 251,
	53, 136, 189, 12, 13, 14, 22, 157, 130, 247,
	198, 121, 30, 110, 25, 4, -113, -113, -113, -113,
	-113, 163, -25, -113, -66, -73, -25, -121, 264, 266,
	-73, 266, 6, 6, 266, -128, -113, -199, 243, 96,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 170, -164, 238, -164, -164,
	-150, 266, -150, -151, 266, -150, 266, -60, -42, -112,
	-170, -113, -170, 259, 270, 267, 270, 216, -92, 55,
	49, -107, 108, 49, -180, -38, 55, -181, 45, 227,
	171, 97, -92, 55, -92, 55, 55, -140, 216, 216,
	-42, -109, 240, -98, -18, 266, 75, 25, -70, -71,
	-143, -72, -42, 266, -38, -38, -42, -62, -64, -65,
	-12, -144, 216, 270, -63, -57, -111, -110, 98, -37,
	-36, -45, 174, 201, 180, 193, 270, 5, 8, 8,
	6, -170, -213, -38, -37, -36, -140, -48, -49, -108,
	-107, -182, -180, 111, 227, 87, 155, 146, 87, -97,
	187, 188, 270, -31, 26, 78, 266, 270, 267, -109,
	-61, -138, -140, -25, -139, 266, -142, -146, -147, -149,
	-158, -152, -156, -157, 33, 39, 38, 212, 206, 115,
	116, 117, 200, 31, 175, 94, 81, 74, 73, 151,
	35, 34, -160, -161, -154, -155, 71, 215, 32, 44,
	43, 236, -64, 214, -113, -113, -113, -113, -113, -113,
	-113, -113, -113, -113, -113, -113, -113, -113, -113, -113,
	-113, -113, -113, -113, -113, 130, 198, 30, 110, 216,
	148, 146, 221, 90, 228, 79, 152, -221, 209, 27,
	-119, -25, 266, -170, -124, 187, 266, 267, 270, -66,
	-123, 265, -113, -121, -66, 267, 267, -66, 237, 18,
	79, 259, -88, 245, 139, 72, 107, 138, -89, 191,
	8, -131, -130, 239, -200, 92, 103, 266, 267, 267,
	-113, -83, -163, 4, 245, 139, 72, 107, 138, 191,
	-84, -113, -85, -114, -115, 257, 258, 263, 266, 187,
	-86, -113, -66, -113, 36, 126, 217, -87, -113, 98,
	-66, -113, -113, -113, -66, -66, -66, 266, 8, 8,
	8, -109, 267, 265, 272, -132, -32, -42, -38, -38,
	146, -107, 108, -146, -38, 266, 266, 124, 124, -38,
	-38, 108, -38, 108, -38, -38, -33, 179, -38, -38,
	179, -113, -100, 155, -62, 235, -38, -60, 270, 251,
	-62, -35, -213, -43, -213, 225, 52, 174, -174, -88,
	270, 267, 270, -39, 111, -64, -42, 87, -38, -136,
	-15, -18, -14, -23, -9, -38, -76, 103, 270, 58,
	-82, 123, 142, 99, 128, 184, 113, -135, -134, 25,
	-38, -135, -25, -139, -138, -59, 24, -88, 266, 246,
	-113, 216, -221, 209, -119, -113, 148, 221, 90, 228,
	79, 152, 98, 266, -114, -114, -66, 266, -66, -113,
	270, 265, 265, 270, 267, -54, 270, -53, -113, -66,
	-66, 267, 216, 216, 216, 216, 266, 267, -129, -130,
	83, -113, -205, 162, 266, 266, -113, 25, 267, 98,
	267, -90, 167, 267, 10, 257, 258, 259, 260, 261,
	254, 255, 256, 253, 249, 250, 251, 53, 136, 189,
	12, 13, 14, 121, 110, -114, -114, -114, -66, 266,
	267, -117, -118, 98, 96, 25, -87, -87, -87, 267,
	98, -66, 270, 270, 270, 267, 267, 267, 8, 267,
	270, 267, 267, -76, -113, 216, 216, 87, 146, -183,
	-181, -113, -57, 266, 266, -29, 82, 196, -93, 87,
	-35, 87, -35, 216, -92, 55, 216, 54, 267, -109,
	-71, -132, 267, -38, -108, 266, -39, 266, 266, -38,
	267, -120, 105, 37, -138, 123, 123, -138, -82, 123,
	-80, 161, -80, -80, -38, 266, 267, 264, 264, 8,
	-113, -113, -114, -114, 98, 266, -113, -122, -146, 22,
	22, 267, -66, 267, 270, 267, -113, -121, 267, 237,
	-54, -54, -54, 139, 107, 138, -89, 138, -89, -89,
	8, 6, 84, -113, 213, -206, -38, 266, 240, -53,
	267, -146, -113, -117, -113, -146, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, 79, 146, 152, -114, 270, -66,
	267, -118, -117, -113, -113, -146, 267, 267, 267, -66,
	-113, -113, -113, 267, 8, -120, 265, -38, -38, -107,
	87, -184, 55, -185, 47, 146, 148, 227, 171, 45,
	75, 178, 267, 267, -57, -57, 146, 75, 146, 75,
	68, 223, -38, -38, -42, -38, -38, -38, -99, 266,
	155, -18, 251, -56, -137, -38, -194, 266, -191, -192,
	-40, 266, -48, -56, 155, -201, 241, -113, -66, -138,
	-138, -81, 231, 155, 123, -138, 266, -57, -134, 265,
	8, 8, 267, 22, 22, -113, -122, 267, 270, -113,
	-113, 267, -113, 6, -113, 267, 267, 267, 267, -113,
	-210, -38, -113, 267, 267, -118, 98, 79, 152, 266,
	-113, 267, 267, 270, 267, 267, 267, -201, -107, -38,
	-64, 148, 124, 266, -114, -42, -106, -218, 56, 207,
	267, 267, 148, 148, -113, -146, -35, -35, 216, 216,
	80, -56, 55, -75, -25, 266, 267, 270, -41, -73,
	47, -41, -113, 266, -56, 267, 267, -42, -202, -204,
	-38, -81, 266, -113, -138, -57, 267, 265, 265, -113,
	-113, 267, -146, 267, -54, -203, 166, 267, -114, 98,
	266, -122, 267, -113, -185, -113, -52, 266, 266, 178,
	-34, 47, -38, -38, 229, 147, 267, -38, -106, -137,
	-31, -64, -31, 267, -66, 267, -106, 266, 270, 25,
	-57, 267, 267, -54, 37, -114, -122, 267, 267, 267,
	-188, 137, -57, -57, -42, -30, 231, -64, 196, -109,
	-41, -54, -106, -56, -204, -206, 267, -207, 173, 188,
	-66, 267, -186, -189, -187, 155, 99, 165, 199, 267,
	267, -52, -113, -70, -31, 267, 267, 267, -208, -209,
	30, 224, 60, -113, -208, -187, 155, -189, 155, 229,
	77, -188, -109, -106, -209, 169, 95, 187, 169, 95,
	-190, 144, 181, 40, 196, -190, -186, 22, 16, 148,
	75, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 303, 0, 0, 273, -2,
	0, 0, 244, 0, 244, 244, 244, 305, 214, 302,
	-2, 313, 0, 0, 0, 311, 287, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 757, 791,
	802, 95, 105, 0, 853, -2, 109, 60, 706, 707,
	708, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 758, 759, 760, 761, 762,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 854, 855, 856,
	857, 858, 138, 139, 0, 141, 152, 0, 150, 0,
	0, 148, 249, 243, 249, 240, 241, 242, 0, 304,
	0, 0, 0, 213, -2, 283, 284, -2, 0, 308,
	308, 308, 0, 0, 284, 0, 292, 779, 295, 689,
	757, 763, 791, 802, 853, 293, 669, 0, 310, 309,
	0, 288, 363, 0, 680, 333, 0, 2, 0, 835,
	0, 0, 835, 0, 0, 0, 369, 52, 835, 43,
	835, 676, 56, 835, 58, 0, 70, 72, 714, 715,
	716, 717, 857, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 0, 0, 0, 92,
	93, 94, 96, 97, 0, 0, 0, 0, 0, 0,
	108, 133, 134, 61, 0, 0, 154, 0, 0, 144,
	0, 145, 0, 147, 238, 245, 246, 239, 43, 367,
	0, 835, 710, 251, 835, -2, 0, 279, 320, 321,
	0, 0, 0, 306, 307, 0, 0, 0, 275, 276,
	0, 294, 0, 0, 336, 668, 670, 674, 675, 449,
	0, 0, 0, 0, 0, 0, 528, 529, 530, 0,
	532, 533, 534, 830, 0, 538, 539, 849, 680, 692,
	693, 694, 695, 0, 0, 0, 700, 701, 702, 651,
	577, 548, -2, -2, 690, 391, 392, 393, 394, -2,
	859, 552, 554, 556, 557, 558, 559, 0, 831, 845,
	846, 852, 855, 856, 835, 842, 836, 826, 833, 841,
	744, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 713,
	415, 416, 421, 422, 424, 336, 334, 364, 365, 0,
	681, 659, 652, 653, 0, 0, 0, 0, 665, 663,
	664, 20, 235, 22, 0, 235, 235, 0, 0, 0,
	0, 0, 373, 0, 254, 0, 370, 0, 0, 54,
	0, 41, 42, 0, 0, 0, 303, 0, 0, 75,
	0, 740, 678, 682, 685, 81, 0, 0, 0, 0,
	100, 120, 121, 122, 101, 103, 110, 112, 113, 114,
	123, 124, 125, 126, 207, 0, 209, 136, 137, 703,
	0, 102, 104, 106, 107, 127, 128, 0, 130, 131,
	132, 432, 0, 62, 718, 719, 720, 721, 722, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 140, 142, 0,
	151, 143, 149, 146, 0, 0, 210, 0, 158, 0,
	0, 835, 709, 0, 282, 318, 319, 322, 325, 326,
	323, 449, 289, 290, 291, 314, 315, 224, 296, 0,
	0, 686, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 662, 0, 0, 673, 453, 454, 455, 476,
	477, 0, -2, 609, 0, 535, 536, 537, 0, 0,
	-2, 0, 697, 446, 0, 0, 650, 579, 0, 0,
	0, 0, 0, 0, 0, 630, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 405, 418, 428, 426, 425,
	407, 0, 406, 404, 0, 408, 0, 373, 0, 660,
	654, 0, 657, 658, 0, 667, 0, 0, 0, 0,
	234, 24, 835, 0, 34, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 261, 256, 0, 0, 0, 336, 266,
	268, 269, 0, 0, 371, 53, 677, 43, 59, 57,
	65, 71, 0, 0, 76, 77, 683, 684, 0, 98,
	99, 250, 0, 117, 0, 119, 0, 208, 705, 704,
	446, 63, 153, 89, 247, 248, 368, 0, 157, 159,
	161, 162, 163, 710, 0, 0, 0, 0, 0, 324,
	327, 328, 0, 317, 222, 223, 303, 0, 688, 330,
	335, 337, 354, 354, 341, 0, 671, 450, 379, 380,
	381, 382, 383, 446, 386, 387, 388, 389, 390, 398,
	399, 400, 401, 402, 403, 412, 0, 397, 397, 397,
	409, 410, 413, 414, 419, 420, 430, 431, 429, 429,
	429, 427, 451, 0, 456, 457, 458, 459, 460, 461,
	462, 463, 464, -2, -2, -2, 468, 469, 470, -2,
	-2, -2, 474, 475, -2, 0, 0, 662, 0, 0,
	482, 0, 485, 487, 489, 0, 0, 0, 0, 661,
	499, 642, 0, 672, 484, 0, 0, 531, 0, 0,
	0, 615, 609, 616, 0, -2, 540, 313, 0, 0,
	0, 0, 698, 433, 434, 435, 436, 437, 438, 447,
	0, 649, 645, 0, 587, 0, 0, 0, 553, 555,
	0, 0, 0, 619, 620, 621, 622, 623, 624, 625,
	0, 0, 0, 0, 501, 0, 0, 0, 0, 849,
	0, 609, 635, 0, 0, 0, 0, 0, 609, 0,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 366, 655, 0, 666, 23, 226, 0, 0,
	0, 26, 835, 166, 0, 0, 0, 0, 0, 237,
	35, 835, 43, 835, 43, 36, 21, 235, 225, 228,
	0, 372, 253, 0, 0, 258, 255, 373, 0, 0,
	0, 55, 73, 679, 74, 115, 116, 118, 111, 129,
	0, 155, 0, 0, 710, 0, 0, 0, 252, 316,
	0, 298, 299, 300, 301, 687, 332, 0, 0, 0,
	0, 0, 0, 360, 360, 360, 358, 339, 353, 0,
	352, 340, -2, 341, 0, 374, 376, 384, 0, 0,
	-2, 0, 0, 0, 500, -2, 483, 486, 488, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 613, 614, 0, -2, 0, 0, 312, 313, 313,
	313, 546, 0, 0, 0, 0, 0, 0, 0, 646,
	0, 0, 547, 0, 0, 0, 0, 0, 561, 0,
	562, 0, 0, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 503, 504, 505, 0, 0,
	564, 633, 634, 0, 0, 0, 0, 0, 0, 569,
	0, 640, 0, 0, 0, 573, 574, 575, 0, 395,
	0, 411, 423, 332, 0, 0, 0, 0, 0, 164,
	179, 0, 0, 0, 0, 28, 0, 0, 0, 0,
	32, 0, 38, 0, 0, 0, 0, 264, 0, 265,
	267, 270, 0, 90, 160, 0, 0, 158, 0, 0,
	297, 581, 0, 0, 338, 0, 0, 0, 0, 0,
	355, 359, 356, 357, 350, 0, 343, 0, 0, 0,
	452, -2, 0, 0, 0, 0, -2, 0, 611, 0,
	0, 643, 0, 604, 0, -2, 610, 617, 541, 0,
	0, 0, 0, 439, 440, 441, 442, 443, 444, 445,
	0, 699, 644, 648, 0, 585, 586, 590, 0, 0,
	551, 0, 618, 627, 628, 502, 506, 507, 508, 509,
	510, 511, 512, 513, 514, -2, -2, -2, 518, 519,
	520, -2, -2, -2, 0, 0, 0, 629, 0, 0,
	607, 631, 632, 637, 638, 0, 566, 567, 568, 639,
	0, 0, 0, 417, 0, 581, 656, 230, 232, 25,
	0, 165, 0, 168, 0, 0, 171, 172, 0, 0,
	0, 0, 181, 188, 0, 0, 0, 40, 0, 0,
	236, 0, 43, 43, 227, 0, 0, 229, 0, 0,
	0, 257, 0, 0, 215, 221, 221, 0, 549, 550,
	0, 0, 0, 0, 0, 285, 0, 331, 329, 344,
	0, 346, 0, 0, 0, 348, 0, 0, 342, 377,
	0, 0, 385, 0, 0, -2, 0, 493, 0, -2,
	-2, 603, 610, 696, 313, 542, 544, 545, 448, 647,
	592, 589, 0, 576, 560, 626, 0, 0, 0, 0,
	610, 606, 565, 0, 571, 572, 396, 286, 27, 0,
	169, 170, 173, 0, 175, 190, 182, 0, 185, 186,
	183, 0, 29, 30, 39, 45, 31, 37, 0, 0,
	0, 0, 0, 271, 272, 0, 188, 0, 224, 691,
	0, 224, 0, 0, 0, 156, 188, 0, 580, 582,
	0, 345, 0, 362, 347, 0, 351, 378, 375, -2,
	-2, 494, 612, 605, 0, 313, 0, 578, -2, 0,
	0, 0, 608, 0, 167, 0, 194, 0, 0, 0,
	47, 0, 231, 233, 0, 260, 373, 263, 177, 216,
	217, 220, 218, 221, 313, 188, 211, 0, 0, 0,
	0, 349, 543, 595, 0, -2, 0, 526, 570, 174,
	199, 0, 0, 0, 190, 33, 0, 44, 0, 262,
	224, 0, 178, 0, 583, 584, 361, 0, 0, 0,
	591, 527, 176, 195, 196, 0, 191, 192, 193, 189,
	187, 194, 46, 373, 219, 541, 188, 588, 593, 596,
	-2, 805, 737, 0, 594, 197, 0, 198, 0, 0,
	0, 199, 259, 212, 0, 598, 599, 600, 601, 602,
	200, 0, 203, 204, 0, 201, 184, 0, 202, 205,
	206, 597,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 255, 3, 261, 256, 3,
	266, 267, 259, 257, 270, 258, 268, 260, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 272, 269,
	249, 251, 250, 3, 271, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 264, 3, 265, 254, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 253, 3, 263,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 252, 262,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:452
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:458
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:464
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:483
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:492
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:498
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:502
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:508
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:512
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:519
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:524
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:529
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:534
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:538
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:540
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:542
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:545
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:550
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:555
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:558
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:562
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:564
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:567
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:572
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:578
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:581
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:582
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:583
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:586
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:587
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:590
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:591
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:602
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:609
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:613
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:617
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:621
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:625
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:629
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:635
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:639
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:645
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:649
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:655
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:659
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:666
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:670
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:676
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:685
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:706
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:713
		{
			// Unless "DATABASE" is specified, "TABLE" is the default.
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:722
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:732
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.stmt = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.userPriority = sqlDollar[2].userPriority
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			unimplemented()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.userPriority = Low
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.userPriority = Normal
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.userPriority = High
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.expr = DBool(true)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.expr = DBool(false)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:957
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.stmt = &Show{Name: "TIME ZONE"}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.stmt = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.qname = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.targetListPtr = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.strs = nil
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.tblDefs = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.colQuals = nil
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1167
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1180
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].idxElems,
				Storing: sqlDollar[6].strs,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].idxElems,
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1217
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1237
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.strs = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.strs = nil
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1276
		{
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1284
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1287
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1300
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival.Val)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].idxElems,
				Storing: sqlDollar[10].strs,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].idxElems,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.boolVal = true
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.boolVal = false
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.idxElems = IndexElemList{sqlDollar[1].idxElem}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.idxElems = append(sqlDollar[1].idxElems, sqlDollar[3].idxElem)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.idxElem = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].dir}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1376
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1380
		{
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.dir = Ascending
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.dir = Descending
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.dir = DefaultDirection
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.stmt = nil
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.stmt = nil
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.boolVal = true
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.boolVal = false
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1447
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.stmt = &Insert{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1547
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1548
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1549
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1552
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1554
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			unimplemented()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1803
		{
			unimplemented()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			unimplemented()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1816
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.boolVal = true
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.boolVal = false
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.boolVal = false
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.boolVal = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.orderBy = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1902
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.expr = nil
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.groupBy = nil
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.expr = nil
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.tblExprs = nil
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: sqlDollar[2].aliasClause}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: sqlDollar[2].aliasClause}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2033
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].strs)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].strs)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.aliasClause = AliasClause{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.str = astFullJoin
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.str = astLeftJoin
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.str = astRightJoin
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.str = astInnerJoin
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2121
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.expr = nil
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2214
		{
			unimplemented()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			unimplemented()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2219
		{
			unimplemented()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2220
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2228
		{
			unimplemented()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.colType = &BytesType{Name: "BYTEA"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val), Scale: int(sqlDollar[4].ival.Val)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival.Val)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.ival = IntVal{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival.Val)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival.Val)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2409
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2410
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.colType = &DateType{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2429
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2430
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2433
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			unimplemented()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2445
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2474
		{
			unimplemented()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2846
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2850
		{
			unimplemented()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2851
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2853
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: All, Exprs: sqlDollar[4].exprs}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2858
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: Distinct, Exprs: sqlDollar[4].exprs}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2876
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			unimplemented()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2896
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2914
		{
			unimplemented()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.expr = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].exprs}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2937
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].exprs}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2981
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2982
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2991
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2995
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3003
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3007
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3018
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3019
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3022
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3023
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3033
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3037
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.expr = Row(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.expr = Row(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.expr = Array(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr, sqlDollar[4].expr}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.exprs = Exprs{sqlDollar[3].expr, sqlDollar[1].expr}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.exprs = nil
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[3].expr, sqlDollar[2].expr}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, DInt(1), sqlDollar[2].expr}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.exprs = nil
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.exprs = append(sqlDollar[3].exprs, sqlDollar[1].expr)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.expr = nil
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.expr = nil
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.indirectElem = sqlDollar[1].indirectElem
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.indirectElem = sqlDollar[1].indirectElem
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3378
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.selExprs = nil
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.selExpr = starSelectExpr()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].indirectElem}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].indirectElem}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.qname = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3526
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.expr = &IntVal{Val: sqlDollar[1].ival.Val, Str: sqlDollar[1].ival.Str}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3562
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3573
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.expr = DBool(true)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.expr = DBool(false)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.expr = DNull
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.ival = IntVal{Val: -sqlDollar[2].ival.Val, Str: "-" + sqlDollar[2].ival.Str}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
