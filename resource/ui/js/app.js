// Generated by tsc.
// source: cockroach/resource/us/ts/...
// DO NOT EDIT!
//
// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Authors: Bram Gruneir (bramgruneir@gmail.com)
//		    Andrew Bonventre (andybons@gmail.com)
//		    Matt Tracy (matt@cockroachlabs.com)
//
var headerDescription = 'This file is designed to add the header to the top of the combined js file.';
// source: controllers/rest_explorer.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
var AdminViews;
(function (AdminViews) {
    var RestExplorer;
    (function (RestExplorer) {
        var Model;
        (function (Model) {
            Model.singleKey = m.prop("");
            Model.singleValue = m.prop("");
            Model.singleCounter = m.prop(0);
            Model.rangeStart = m.prop("");
            Model.rangeEnd = m.prop("");
            Model.responseLog = m.prop([]);
            function logResponse(xhr, opts) {
                var data;
                if (xhr.responseType === "json") {
                    data = JSON.stringify(xhr.response);
                }
                else {
                    data = xhr.responseText;
                }
                data = data.length > 0 ? data : "(no response body)";
                data = ['[', opts.method, '] ', xhr.status, ' ', opts.url, ': ', data].join('');
                Model.responseLog().push(data);
                return JSON.stringify(data);
            }
            function scan(method) {
                var endpoint = "/kv/rest/range?start=" + encodeURIComponent(Model.rangeStart());
                if (!!Model.rangeEnd()) {
                    endpoint += '&end=' + encodeURIComponent(Model.rangeEnd());
                }
                return m.request({
                    method: method,
                    url: endpoint,
                    extract: logResponse,
                });
            }
            Model.scan = scan;
            function entry(method) {
                var endpoint = "/kv/rest/entry/" + Model.singleKey();
                var request = {
                    method: method,
                    url: endpoint,
                    extract: logResponse,
                    serialize: function (data) { return data; },
                };
                if (method === "POST") {
                    request.config = function (xhr, opts) {
                        xhr.setRequestHeader("Content-Type", "text/plain; charset=UTF-8");
                        return xhr;
                    };
                    request.data = Model.singleValue();
                }
                return m.request(request);
            }
            Model.entry = entry;
            function counter(method) {
                var endpoint = "/kv/rest/counter/" + Model.singleKey();
                var request = {
                    method: method,
                    url: endpoint,
                    extract: logResponse,
                    serialize: function (data) { return data; },
                };
                if (method === "POST") {
                    request.config = function (xhr, opts) {
                        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
                        return xhr;
                    };
                    request.data = Model.singleCounter();
                }
                return m.request(request);
            }
            Model.counter = counter;
            function clearLog() {
                Model.responseLog([]);
            }
            Model.clearLog = clearLog;
            ;
        })(Model || (Model = {}));
        function button(text, onclick, disabled) {
            return m("input[type=button]", {
                value: text,
                disabled: disabled(),
                onclick: onclick,
            });
        }
        function field(text, value, disabled) {
            return m("input[type=text]", {
                placeholder: text,
                disabled: disabled(),
                value: value(),
                onchange: m.withAttr("value", value),
            });
        }
        var EntryComponent;
        (function (EntryComponent) {
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.responsePending = m.prop(false);
                    this.key = Model.singleKey;
                    this.val = Model.singleValue;
                    this.complete = function () { return _this.responsePending(false); };
                    this.get = function () { return _this.request("GET"); };
                    this.post = function () { return _this.request("POST"); };
                    this.head = function () { return _this.request("HEAD"); };
                    this.delete = function () { return _this.request("DELETE"); };
                }
                Controller.prototype.request = function (method) {
                    this.responsePending(true);
                    Model.entry(method).then(this.complete, this.complete);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            EntryComponent.controller = controller;
            function view(ctrl) {
                return m("section.restExplorerControls-control", [
                    m("h3", "K/V Pair"),
                    m("form", [
                        field("Key", ctrl.key, ctrl.responsePending),
                        m.trust("&rarr;"),
                        field("Value", ctrl.val, ctrl.responsePending),
                        button("Get", ctrl.get, ctrl.responsePending),
                        button("Head", ctrl.head, ctrl.responsePending),
                        button("Put", ctrl.post, ctrl.responsePending),
                        button("Delete", ctrl.delete, ctrl.responsePending),
                    ])
                ]);
            }
            EntryComponent.view = view;
        })(EntryComponent || (EntryComponent = {}));
        var RangeComponent;
        (function (RangeComponent) {
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.responsePending = m.prop(false);
                    this.rangeStart = Model.rangeStart;
                    this.rangeEnd = Model.rangeEnd;
                    this.complete = function () { return _this.responsePending(false); };
                    this.get = function () { return _this.request("GET"); };
                    this.delete = function () { return _this.request("DELETE"); };
                }
                Controller.prototype.request = function (method) {
                    this.responsePending(true);
                    Model.scan(method).then(this.complete, this.complete);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            RangeComponent.controller = controller;
            function view(ctrl) {
                return m("section.restExplorerControls-control", [
                    m("h3", "Range"),
                    m("form", [
                        field("Start", ctrl.rangeStart, ctrl.responsePending),
                        m.trust("&rarr;"),
                        field("End", ctrl.rangeEnd, ctrl.responsePending),
                        button("Get", ctrl.get, ctrl.responsePending),
                        button("Delete", ctrl.delete, ctrl.responsePending),
                    ])
                ]);
            }
            RangeComponent.view = view;
        })(RangeComponent || (RangeComponent = {}));
        var CounterComponent;
        (function (CounterComponent) {
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.responsePending = m.prop(false);
                    this.key = Model.singleKey;
                    this.val = Model.singleCounter;
                    this.complete = function () { return _this.responsePending(false); };
                    this.get = function () { return _this.request("GET"); };
                    this.post = function () { return _this.request("POST"); };
                    this.head = function () { return _this.request("HEAD"); };
                    this.delete = function () { return _this.request("DELETE"); };
                }
                Controller.prototype.request = function (method) {
                    this.responsePending(true);
                    Model.counter(method).then(this.complete, this.complete);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            CounterComponent.controller = controller;
            function view(ctrl) {
                return m("section.restExplorerControls-control", [
                    m("h3", "Counter"),
                    m("form", [
                        field("Key", ctrl.key, ctrl.responsePending),
                        m.trust("&rarr;"),
                        field("Value", ctrl.val, ctrl.responsePending),
                        button("Get", ctrl.get, ctrl.responsePending),
                        button("Head", ctrl.head, ctrl.responsePending),
                        button("Put", ctrl.post, ctrl.responsePending),
                        button("Delete", ctrl.delete, ctrl.responsePending),
                    ])
                ]);
            }
            CounterComponent.view = view;
        })(CounterComponent || (CounterComponent = {}));
        var LogComponent;
        (function (LogComponent) {
            function controller() {
                return {
                    log: Model.responseLog,
                    clear: Model.clearLog,
                };
            }
            LogComponent.controller = controller;
            function view(ctrl) {
                console.log("Redrawing log component");
                return m(".restExplorerLog", [
                    m("h3", "Console"),
                    button("Clear", ctrl.clear, function () { return false; }),
                    ctrl.log().map(function (str) {
                        return m("", str);
                    })
                ]);
            }
            LogComponent.view = view;
        })(LogComponent || (LogComponent = {}));
        var Page;
        (function (Page) {
            function controller() { }
            Page.controller = controller;
            function view() {
                return m(".restExplorer", [
                    m(".restExplorerControls", [
                        EntryComponent,
                        RangeComponent,
                        CounterComponent,
                    ]),
                    LogComponent,
                ]);
            }
            Page.view = view;
        })(Page = RestExplorer.Page || (RestExplorer.Page = {}));
    })(RestExplorer = AdminViews.RestExplorer || (AdminViews.RestExplorer = {}));
})(AdminViews || (AdminViews = {}));
// source: controllers/monitor.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
var AdminViews;
(function (AdminViews) {
    var Monitor;
    (function (Monitor) {
        var Page;
        (function (Page) {
            function controller() { }
            Page.controller = controller;
            function view() {
                return m("h3", "Monitor Placeholder");
            }
            Page.view = view;
        })(Page = Monitor.Page || (Monitor.Page = {}));
    })(Monitor = AdminViews.Monitor || (AdminViews.Monitor = {}));
})(AdminViews || (AdminViews = {}));
// source: app.ts
/// <reference path="typings/mithriljs/mithril.d.ts" />
/// <reference path="controllers/rest_explorer.ts" />
/// <reference path="controllers/monitor.ts" />
m.route.mode = "hash";
m.route(document.getElementById("root"), "/rest-explorer", {
    "/rest-explorer": AdminViews.RestExplorer.Page,
    "/monitor": AdminViews.Monitor.Page,
});
