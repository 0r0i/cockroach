From e1c707b7eca8eed9416d074226c2ae59411ea24d Mon Sep 17 00:00:00 2001
From: Daniel Harrison <daniel.harrison@gmail.com>
Date: Mon, 26 Jun 2017 15:52:13 -0400
Subject: [PATCH] Use MockEnv instead of MemEnv

This is a partial version of
https://github.com/facebook/rocksdb/commit/5a9b4d74354c1499839728831fecafd9b75b0af5
---
 CMakeLists.txt        |  4 +--
 util/memenv.cc        |  8 -----
 util/mock_env.cc      | 89 ++++++++++++++++++++++++++++++++++++++++++++++++---
 util/mock_env.h       | 11 +++++++
 util/mock_env_test.cc |  2 +-
 5 files changed, 99 insertions(+), 15 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 56b9149..acb668c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -378,13 +378,14 @@ set(SOURCES
         util/histogram_windowing.cc
         util/instrumented_mutex.cc
         util/iostats_context.cc
-        
+
         util/lru_cache.cc
         tools/ldb_cmd.cc
         tools/ldb_tool.cc
         util/logging.cc
         util/log_buffer.cc
         util/memenv.cc
+        util/mock_env.cc
         util/murmurhash.cc
         util/options.cc
         util/options_helper.cc
@@ -674,7 +675,6 @@ endforeach(sourcefile ${BENCHMARKS})
 set(TESTUTIL_SOURCE
     db/db_test_util.cc
     table/mock_table.cc
-    util/mock_env.cc
     util/fault_injection_test_env.cc
     util/thread_status_updater_debug.cc
 )
diff --git a/util/memenv.cc b/util/memenv.cc
index 03dfe6c..9824e72 100644
--- a/util/memenv.cc
+++ b/util/memenv.cc
@@ -438,14 +438,6 @@ class InMemoryEnv : public EnvWrapper {
 
 }  // namespace
 
-Env* NewMemEnv(Env* base_env) {
-  return new InMemoryEnv(base_env);
-}
-
-#else  // ROCKSDB_LITE
-
-Env* NewMemEnv(Env* base_env) { return nullptr; }
-
 #endif  // !ROCKSDB_LITE
 
 }  // namespace rocksdb
diff --git a/util/mock_env.cc b/util/mock_env.cc
index 09736bb..d704bc1 100644
--- a/util/mock_env.cc
+++ b/util/mock_env.cc
@@ -2,18 +2,20 @@
 //  This source code is licensed under the BSD-style license found in the
 //  LICENSE file in the root directory of this source tree. An additional grant
 //  of patent rights can be found in the PATENTS file in the same directory.
+//  This source code is also licensed under the GPLv2 license found in the
+//  COPYING file in the root directory of this source tree.
 //
 // Copyright (c) 2011 The LevelDB Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file. See the AUTHORS file for names of contributors.
 
 #include "util/mock_env.h"
-#include "port/sys_time.h"
 #include <algorithm>
 #include <chrono>
-#include "util/rate_limiter.h"
-#include "util/random.h"
+#include "port/sys_time.h"
 #include "util/murmurhash.h"
+#include "util/random.h"
+#include "util/rate_limiter.h"
 
 namespace rocksdb {
 
@@ -116,6 +118,17 @@ class MemFile {
     return Status::OK();
   }
 
+  Status Write(uint64_t offset, const Slice& data) {
+    MutexLock lock(&mutex_);
+    if (offset + data.size() > data_.size()) {
+      data_.resize(offset + data.size());
+    }
+    data_.replace(offset, data.size(), data.data(), data.size());
+    size_ = data_.size();
+    modified_time_ = Now();
+    return Status::OK();
+  }
+
   Status Append(const Slice& data) {
     MutexLock lock(&mutex_);
     data_.append(data.data(), data.size());
@@ -223,6 +236,31 @@ class MockRandomAccessFile : public RandomAccessFile {
   MemFile* file_;
 };
 
+class MockRandomRWFile : public RandomRWFile {
+ public:
+  explicit MockRandomRWFile(MemFile* file) : file_(file) { file_->Ref(); }
+
+  ~MockRandomRWFile() { file_->Unref(); }
+
+  virtual Status Write(uint64_t offset, const Slice& data) override {
+    return file_->Write(offset, data);
+  }
+
+  virtual Status Read(uint64_t offset, size_t n, Slice* result,
+                      char* scratch) const override {
+    return file_->Read(offset, n, result, scratch);
+  }
+
+  virtual Status Close() override { return file_->Fsync(); }
+
+  virtual Status Flush() override { return Status::OK(); }
+
+  virtual Status Sync() override { return file_->Fsync(); }
+
+ private:
+  MemFile* file_;
+};
+
 class MockWritableFile : public WritableFile {
  public:
   MockWritableFile(MemFile* file, RateLimiter* rate_limiter)
@@ -248,6 +286,7 @@ class MockWritableFile : public WritableFile {
     return Status::OK();
   }
   virtual Status Truncate(uint64_t size) override {
+    file_->Truncate(size);
     return Status::OK();
   }
   virtual Status Close() override { return file_->Fsync(); }
@@ -340,7 +379,9 @@ class TestMemLogger : public Logger {
       gettimeofday(&now_tv, nullptr);
       const time_t seconds = now_tv.tv_sec;
       struct tm t;
-      localtime_r(&seconds, &t);
+      memset(&t, 0, sizeof(t));
+      auto ret __attribute__((__unused__)) = localtime_r(&seconds, &t);
+      assert(ret);
       p += snprintf(p, limit - p,
                     "%04d/%02d/%02d-%02d:%02d:%02d.%06d ",
                     t.tm_year + 1900,
@@ -439,6 +480,35 @@ Status MockEnv::NewRandomAccessFile(const std::string& fname,
   return Status::OK();
 }
 
+Status MockEnv::NewRandomRWFile(const std::string& fname,
+                                unique_ptr<RandomRWFile>* result,
+                                const EnvOptions& soptions) {
+  auto fn = NormalizePath(fname);
+  MutexLock lock(&mutex_);
+  if (file_map_.find(fn) == file_map_.end()) {
+    *result = NULL;
+    return Status::IOError(fn, "File not found");
+  }
+  auto* f = file_map_[fn];
+  if (f->is_lock_file()) {
+    return Status::InvalidArgument(fn, "Cannot open a lock file.");
+  }
+  result->reset(new MockRandomRWFile(f));
+  return Status::OK();
+}
+
+Status MockEnv::ReuseWritableFile(const std::string& fname,
+                                  const std::string& old_fname,
+                                  unique_ptr<WritableFile>* result,
+                                  const EnvOptions& options) {
+  auto s = RenameFile(old_fname, fname);
+  if (!s.ok()) {
+    return s;
+  }
+  result->reset();
+  return NewWritableFile(fname, result, options);
+}
+
 Status MockEnv::NewWritableFile(const std::string& fname,
                                 unique_ptr<WritableFile>* result,
                                 const EnvOptions& env_options) {
@@ -598,6 +668,7 @@ Status MockEnv::LinkFile(const std::string& src, const std::string& dest) {
 
   DeleteFileInternal(t);
   file_map_[t] = file_map_[s];
+  file_map_[t]->Ref();  // Otherwise it might get deleted when noone uses s
   return Status::OK();
 }
 
@@ -713,4 +784,14 @@ void MockEnv::FakeSleepForMicroseconds(int64_t micros) {
   fake_sleep_micros_.fetch_add(micros);
 }
 
+#ifndef ROCKSDB_LITE
+// This is to maintain the behavior before swithcing from InMemoryEnv to MockEnv
+Env* NewMemEnv(Env* base_env) { return new MockEnv(base_env); }
+
+#else  // ROCKSDB_LITE
+
+Env* NewMemEnv(Env* base_env) { return nullptr; }
+
+#endif  // !ROCKSDB_LITE
+
 }  // namespace rocksdb
diff --git a/util/mock_env.h b/util/mock_env.h
index d4bbdc8..d116c3a 100644
--- a/util/mock_env.h
+++ b/util/mock_env.h
@@ -2,6 +2,8 @@
 //  This source code is licensed under the BSD-style license found in the
 //  LICENSE file in the root directory of this source tree. An additional grant
 //  of patent rights can be found in the PATENTS file in the same directory.
+//  This source code is also licensed under the GPLv2 license found in the
+//  COPYING file in the root directory of this source tree.
 //
 // Copyright (c) 2011 The LevelDB Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
@@ -35,6 +37,15 @@ class MockEnv : public EnvWrapper {
                                      unique_ptr<RandomAccessFile>* result,
                                      const EnvOptions& soptions) override;
 
+  virtual Status NewRandomRWFile(const std::string& fname,
+                                 unique_ptr<RandomRWFile>* result,
+                                 const EnvOptions& options) override;
+
+  virtual Status ReuseWritableFile(const std::string& fname,
+                                   const std::string& old_fname,
+                                   unique_ptr<WritableFile>* result,
+                                   const EnvOptions& options) override;
+
   virtual Status NewWritableFile(const std::string& fname,
                                  unique_ptr<WritableFile>* result,
                                  const EnvOptions& env_options) override;
diff --git a/util/mock_env_test.cc b/util/mock_env_test.cc
index 1f6cced..19e259c 100644
--- a/util/mock_env_test.cc
+++ b/util/mock_env_test.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file. See the AUTHORS file for names of contributors.
 
-#include "util/mock_env.h"
+#include "env/mock_env.h"
 
 #include <memory>
 #include <string>
-- 
2.9.0

