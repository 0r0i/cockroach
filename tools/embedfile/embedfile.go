// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Andrew Bonventre (andybons@gmail.com)
//
// embedfile takes an input file and outputs a go source file with the
// input defined as a constant. It is used to eliminate the need for
// extra files (HTML templates, for example) for deployment.
package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	var (
		inputFile    = flag.String("input", "", "input file to embed")
		constantName = flag.String("constantname", "", "the name of the constant that will contain the contents of the input file")
	)
	flag.Parse()
	if len(*inputFile) == 0 || len(*constantName) == 0 {
		fmt.Printf("usage: %s\n", os.Args[0])
		flag.PrintDefaults()
		os.Exit(1)
	}
	packageName := os.Getenv("GOPACKAGE")
	if len(packageName) == 0 {
		log.Fatalln("the $GOPACKAGE environment variable must be set")
	}
	r, err := os.Open(*inputFile)
	if err != nil {
		log.Fatalln(err)
	}
	_, outputFile := filepath.Split(*inputFile)
	outputFile = strings.Replace(outputFile, filepath.Ext(outputFile), "", -1)
	outputFile += "." + os.Args[0] + ".go"
	w, err := os.OpenFile(outputFile, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Fprintf(w, "// Code generated by %s\n", os.Args[0])
	fmt.Fprintf(w, "// source: %s\n", *inputFile)
	fmt.Fprintf(w, "// DO NOT EDIT!\n\npackage %s\n\n", packageName)
	fmt.Fprintf(w, "const %s = `", *constantName)
	if _, err := io.Copy(w, r); err != nil {
		log.Fatalln(err)
	}
	fmt.Fprintln(w, "`")
}
