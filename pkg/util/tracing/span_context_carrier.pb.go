// Code generated by protoc-gen-gogo.
// source: cockroach/util/tracing/span_context_carrier.proto
// DO NOT EDIT!

/*
	Package tracing is a generated protocol buffer package.

	It is generated from these files:
		cockroach/util/tracing/span_context_carrier.proto

	It has these top-level messages:
		SpanContextCarrier
*/
package tracing

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A SpanContextCarrier message holds metadata of a (potentially ongoing) span
// of a distributed trace as per the OpenTracing specification. See
// http://opentracing.io/spec/ for details.
type SpanContextCarrier struct {
	TraceID uint64            `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanID  uint64            `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Sampled bool              `protobuf:"varint,3,opt,name=sampled,proto3" json:"sampled,omitempty"`
	Baggage map[string]string `protobuf:"bytes,4,rep,name=baggage" json:"baggage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SpanContextCarrier) Reset()         { *m = SpanContextCarrier{} }
func (m *SpanContextCarrier) String() string { return proto.CompactTextString(m) }
func (*SpanContextCarrier) ProtoMessage()    {}
func (*SpanContextCarrier) Descriptor() ([]byte, []int) {
	return fileDescriptorSpanContextCarrier, []int{0}
}

func init() {
	proto.RegisterType((*SpanContextCarrier)(nil), "cockroach.util.tracing.SpanContextCarrier")
}
func (m *SpanContextCarrier) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SpanContextCarrier) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSpanContextCarrier(data, i, uint64(m.TraceID))
	}
	if m.SpanID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSpanContextCarrier(data, i, uint64(m.SpanID))
	}
	if m.Sampled {
		data[i] = 0x18
		i++
		if m.Sampled {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Baggage) > 0 {
		keysForBaggage := make([]string, 0, len(m.Baggage))
		for k := range m.Baggage {
			keysForBaggage = append(keysForBaggage, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForBaggage)
		for _, k := range keysForBaggage {
			data[i] = 0x22
			i++
			v := m.Baggage[string(k)]
			mapSize := 1 + len(k) + sovSpanContextCarrier(uint64(len(k))) + 1 + len(v) + sovSpanContextCarrier(uint64(len(v)))
			i = encodeVarintSpanContextCarrier(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSpanContextCarrier(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSpanContextCarrier(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func encodeFixed64SpanContextCarrier(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SpanContextCarrier(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSpanContextCarrier(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SpanContextCarrier) Size() (n int) {
	var l int
	_ = l
	if m.TraceID != 0 {
		n += 1 + sovSpanContextCarrier(uint64(m.TraceID))
	}
	if m.SpanID != 0 {
		n += 1 + sovSpanContextCarrier(uint64(m.SpanID))
	}
	if m.Sampled {
		n += 2
	}
	if len(m.Baggage) > 0 {
		for k, v := range m.Baggage {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpanContextCarrier(uint64(len(k))) + 1 + len(v) + sovSpanContextCarrier(uint64(len(v)))
			n += mapEntrySize + 1 + sovSpanContextCarrier(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSpanContextCarrier(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpanContextCarrier(x uint64) (n int) {
	return sovSpanContextCarrier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpanContextCarrier) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpanContextCarrier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanContextCarrier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanContextCarrier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			m.TraceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TraceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			m.SpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SpanID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sampled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sampled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baggage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpanContextCarrier
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSpanContextCarrier
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Baggage == nil {
				m.Baggage = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpanContextCarrier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpanContextCarrier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSpanContextCarrier
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Baggage[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Baggage[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpanContextCarrier(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpanContextCarrier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpanContextCarrier(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpanContextCarrier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpanContextCarrier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpanContextCarrier
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpanContextCarrier
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpanContextCarrier(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpanContextCarrier = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpanContextCarrier   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("cockroach/util/tracing/span_context_carrier.proto", fileDescriptorSpanContextCarrier)
}

var fileDescriptorSpanContextCarrier = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x3d, 0x4f, 0x02, 0x31,
	0x18, 0xc7, 0x29, 0x20, 0x07, 0xc5, 0xc1, 0x34, 0xc4, 0x5c, 0x18, 0x0a, 0x6a, 0x62, 0x98, 0x7a,
	0x51, 0x07, 0x0d, 0x23, 0xe0, 0x70, 0xa3, 0xd5, 0xc9, 0x85, 0x94, 0x5e, 0x53, 0x2f, 0x9c, 0xd7,
	0x4b, 0x29, 0x46, 0xbe, 0x82, 0x93, 0x1f, 0x8b, 0xd1, 0xd1, 0x89, 0x68, 0xfd, 0x22, 0xa6, 0x3d,
	0x30, 0x26, 0xba, 0x3d, 0x4f, 0xff, 0x2f, 0xf9, 0xf5, 0x81, 0x67, 0x5c, 0xf1, 0xb9, 0x56, 0x8c,
	0x3f, 0x44, 0x4b, 0x93, 0x66, 0x91, 0xd1, 0x8c, 0xa7, 0xb9, 0x8c, 0x16, 0x05, 0xcb, 0xa7, 0x5c,
	0xe5, 0x46, 0x3c, 0x9b, 0x29, 0x67, 0x5a, 0xa7, 0x42, 0x93, 0x42, 0x2b, 0xa3, 0xd0, 0xe1, 0x4f,
	0x84, 0xb8, 0x08, 0xd9, 0x46, 0xba, 0x1d, 0xa9, 0xa4, 0xf2, 0x96, 0xc8, 0x4d, 0xa5, 0xfb, 0xf8,
	0xa5, 0x0a, 0xd1, 0x6d, 0xc1, 0xf2, 0x71, 0xd9, 0x35, 0x2e, 0xab, 0xd0, 0x29, 0x6c, 0xba, 0x9c,
	0x98, 0xa6, 0x49, 0x08, 0xfa, 0x60, 0x50, 0x1f, 0xb5, 0xed, 0xa6, 0x17, 0xdc, 0xb9, 0xb7, 0x78,
	0x42, 0x03, 0x2f, 0xc6, 0x09, 0x3a, 0x81, 0x81, 0x47, 0x49, 0x93, 0xb0, 0xea, 0x6d, 0xd0, 0x6e,
	0x7a, 0x0d, 0x57, 0x18, 0x4f, 0x68, 0xc3, 0x49, 0x71, 0x82, 0x42, 0x18, 0x2c, 0xd8, 0x63, 0x91,
	0x89, 0x24, 0xac, 0xf5, 0xc1, 0xa0, 0x49, 0x77, 0x2b, 0xba, 0x81, 0xc1, 0x8c, 0x49, 0xc9, 0xa4,
	0x08, 0xeb, 0xfd, 0xda, 0xa0, 0x7d, 0x7e, 0x49, 0xfe, 0xa7, 0x27, 0x7f, 0x19, 0xc9, 0xa8, 0x4c,
	0x5e, 0xe7, 0x46, 0xaf, 0xe8, 0xae, 0xa7, 0x3b, 0x84, 0xfb, 0xbf, 0x05, 0x74, 0x00, 0x6b, 0x73,
	0xb1, 0xf2, 0x9f, 0x68, 0x51, 0x37, 0xa2, 0x0e, 0xdc, 0x7b, 0x62, 0xd9, 0x52, 0x78, 0xe2, 0x16,
	0x2d, 0x97, 0x61, 0xf5, 0x0a, 0x8c, 0x8e, 0xd6, 0x9f, 0xb8, 0xb2, 0xb6, 0x18, 0xbc, 0x59, 0x0c,
	0xde, 0x2d, 0x06, 0x1f, 0x16, 0x83, 0xd7, 0x2f, 0x5c, 0xb9, 0x0f, 0xb6, 0x1c, 0xb3, 0x86, 0x3f,
	0xdb, 0xc5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x15, 0xdc, 0x0d, 0x99, 0x01, 0x00, 0x00,
}
