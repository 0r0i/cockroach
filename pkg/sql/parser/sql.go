// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5882

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 33,
	354, 33,
	-2, 506,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 66,
	1, 478,
	197, 478,
	241, 478,
	350, 478,
	352, 478,
	354, 478,
	-2, 488,
	-1, 112,
	1, 481,
	197, 481,
	241, 481,
	350, 481,
	352, 481,
	354, 481,
	-2, 487,
	-1, 130,
	1, 33,
	354, 33,
	-2, 506,
	-1, 511,
	122, 1087,
	293, 1087,
	336, 1087,
	353, 1087,
	-2, 0,
	-1, 522,
	1, 215,
	354, 215,
	-2, 1092,
	-1, 534,
	111, 516,
	170, 516,
	195, 516,
	-2, 484,
	-1, 542,
	111, 515,
	170, 515,
	195, 515,
	-2, 482,
	-1, 695,
	351, 1019,
	-2, 1012,
	-1, 696,
	351, 1020,
	-2, 1013,
	-1, 702,
	5, 686,
	351, 686,
	-2, 1217,
	-1, 727,
	5, 645,
	-2, 1187,
	-1, 728,
	5, 680,
	351, 680,
	-2, 1189,
	-1, 729,
	5, 655,
	-2, 1190,
	-1, 730,
	5, 654,
	-2, 1191,
	-1, 731,
	5, 680,
	351, 680,
	-2, 1194,
	-1, 732,
	5, 680,
	351, 680,
	-2, 1195,
	-1, 733,
	5, 681,
	-2, 1198,
	-1, 734,
	5, 637,
	-2, 1199,
	-1, 735,
	5, 637,
	-2, 1200,
	-1, 736,
	5, 662,
	-2, 1204,
	-1, 737,
	5, 647,
	-2, 1205,
	-1, 738,
	5, 648,
	-2, 1206,
	-1, 739,
	5, 638,
	-2, 1211,
	-1, 740,
	5, 639,
	-2, 1212,
	-1, 741,
	5, 640,
	-2, 1213,
	-1, 742,
	5, 641,
	-2, 1214,
	-1, 743,
	5, 642,
	-2, 1215,
	-1, 744,
	5, 643,
	-2, 1216,
	-1, 745,
	5, 637,
	-2, 1221,
	-1, 746,
	5, 646,
	-2, 1226,
	-1, 747,
	5, 644,
	-2, 1229,
	-1, 748,
	5, 678,
	351, 678,
	-2, 1231,
	-1, 749,
	5, 682,
	-2, 1234,
	-1, 750,
	5, 684,
	-2, 1235,
	-1, 751,
	5, 677,
	351, 677,
	-2, 1240,
	-1, 795,
	211, 504,
	-2, 378,
	-1, 800,
	111, 515,
	170, 515,
	195, 515,
	-2, 485,
	-1, 903,
	102, 488,
	111, 488,
	151, 488,
	170, 488,
	195, 488,
	201, 488,
	304, 488,
	-2, 572,
	-1, 980,
	102, 488,
	111, 488,
	151, 488,
	170, 488,
	195, 488,
	201, 488,
	304, 488,
	-2, 805,
	-1, 989,
	351, 996,
	-2, 984,
	-1, 1234,
	1, 573,
	70, 573,
	102, 573,
	111, 573,
	123, 573,
	127, 573,
	129, 573,
	142, 573,
	151, 573,
	158, 573,
	167, 573,
	170, 573,
	182, 573,
	195, 573,
	197, 573,
	201, 573,
	241, 573,
	243, 573,
	304, 573,
	312, 573,
	323, 573,
	324, 573,
	333, 573,
	350, 573,
	352, 573,
	354, 573,
	355, 573,
	-2, 572,
	-1, 1283,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 721,
	-1, 1284,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 722,
	-1, 1285,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 723,
	-1, 1289,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 727,
	-1, 1290,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 728,
	-1, 1291,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 729,
	-1, 1294,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 734,
	-1, 1300,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 736,
	-1, 1302,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 740,
	-1, 1303,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 741,
	-1, 1304,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 742,
	-1, 1305,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 743,
	-1, 1331,
	206, 878,
	-2, 881,
	-1, 1368,
	122, 918,
	351, 1019,
	-2, 1012,
	-1, 1369,
	122, 919,
	-2, 1183,
	-1, 1370,
	122, 920,
	-2, 1091,
	-1, 1371,
	122, 921,
	-2, 1055,
	-1, 1372,
	122, 922,
	-2, 1072,
	-1, 1373,
	122, 923,
	-2, 1090,
	-1, 1374,
	122, 924,
	-2, 1142,
	-1, 1569,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 735,
	-1, 1570,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 737,
	-1, 1575,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 738,
	-1, 1593,
	206, 877,
	-2, 880,
	-1, 1792,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 739,
	-1, 1797,
	154, 0,
	-2, 755,
	-1, 1807,
	206, 879,
	-2, 882,
	-1, 1849,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 782,
	-1, 1850,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 783,
	-1, 1851,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 784,
	-1, 1855,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 788,
	-1, 1856,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 789,
	-1, 1857,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 790,
	-1, 1962,
	154, 0,
	-2, 756,
	-1, 1965,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 759,
	-1, 1966,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 761,
	-1, 2073,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 760,
	-1, 2074,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 762,
	-1, 2081,
	154, 0,
	-2, 791,
	-1, 2147,
	154, 0,
	-2, 792,
	-1, 2219,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1186,
}

const sqlPrivate = 57344

const sqlLast = 31435

var sqlAct = [...]int{

	696, 2226, 1884, 2218, 2195, 2263, 2103, 2227, 1117, 2228,
	2217, 1242, 1250, 1826, 543, 2088, 2030, 1907, 392, 2135,
	686, 2016, 1124, 2001, 1473, 1030, 1229, 65, 1397, 1713,
	672, 639, 694, 1551, 2055, 1891, 1537, 1454, 139, 693,
	1431, 139, 617, 1436, 1659, 1080, 1890, 897, 139, 1487,
	1518, 689, 1444, 1938, 1435, 1354, 139, 1604, 1262, 394,
	1658, 139, 139, 1112, 985, 139, 558, 1251, 139, 1715,
	1329, 877, 1524, 1517, 1120, 139, 884, 1236, 368, 1756,
	1686, 1184, 901, 1230, 1182, 1469, 1432, 1106, 774, 1081,
	1394, 1339, 1155, 1317, 1478, 666, 1314, 809, 915, 1439,
	807, 878, 773, 561, 1020, 1348, 1016, 976, 366, 621,
	562, 802, 1365, 665, 888, 1244, 567, 1031, 653, 1217,
	550, 110, 1204, 609, 139, 139, 816, 1104, 817, 131,
	139, 499, 517, 815, 139, 139, 2017, 553, 688, 647,
	521, 384, 548, 861, 919, 519, 135, 624, 607, 860,
	821, 503, 515, 1592, 1770, 1114, 112, 1771, 1243, 1114,
	1351, 1114, 547, 2249, 2240, 1247, 910, 1258, 547, 2239,
	2237, 542, 1258, 2015, 113, 2235, 2189, 110, 910, 1412,
	619, 2163, 122, 898, 2015, 2152, 140, 1725, 2151, 2149,
	1562, 496, 1412, 2142, 2118, 2115, 910, 2015, 910, 502,
	1237, 2114, 125, 551, 2015, 2113, 1563, 1352, 910, 895,
	2101, 2075, 2063, 2015, 1412, 910, 2060, 2052, 1206, 910,
	1258, 631, 1759, 2051, 1138, 122, 1258, 752, 109, 2014,
	129, 1258, 2015, 1989, 1629, 1630, 1258, 1647, 1648, 1649,
	1967, 1964, 1596, 1258, 1412, 395, 1951, 1597, 2180, 910,
	1961, 110, 1353, 1350, 931, 932, 111, 951, 952, 953,
	961, 962, 963, 55, 1418, 56, 128, 535, 570, 1801,
	954, 109, 1258, 611, 123, 1790, 1785, 934, 1241, 1241,
	965, 124, 931, 932, 1759, 534, 396, 1644, 1766, 58,
	1696, 1767, 1676, 910, 1674, 1677, 1205, 1258, 1595, 111,
	114, 933, 568, 1258, 1237, 934, 55, 948, 56, 1673,
	1672, 1593, 1258, 1258, 1258, 1540, 1258, 1514, 1258, 1485,
	910, 1420, 1603, 1726, 1258, 1411, 1418, 1355, 1412, 933,
	125, 1257, 58, 1240, 1258, 948, 1241, 1211, 1862, 927,
	1210, 1635, 928, 569, 1804, 910, 1115, 1697, 1472, 1428,
	1115, 1088, 1115, 1333, 873, 139, 931, 932, 129, 629,
	139, 939, 657, 616, 130, 2018, 376, 24, 567, 125,
	564, 635, 1532, 902, 1110, 788, 2241, 2233, 1650, 934,
	958, 966, 2216, 2202, 2144, 2116, 1994, 1990, 1982, 939,
	1981, 1980, 1976, 828, 128, 548, 1975, 129, 964, 1645,
	1974, 1973, 123, 933, 1349, 1937, 1882, 1956, 1877, 124,
	1872, 1871, 125, 956, 1870, 1812, 1480, 1695, 671, 949,
	1700, 1681, 116, 1678, 1666, 1657, 1416, 1325, 1246, 993,
	931, 932, 1628, 128, 1625, 1624, 636, 1622, 1609, 1562,
	129, 1608, 1544, 1362, 955, 1361, 1360, 949, 986, 828,
	1234, 1205, 986, 934, 114, 125, 827, 1123, 1880, 350,
	1828, 2192, 1136, 939, 900, 116, 1131, 114, 1113, 648,
	2179, 899, 1646, 2178, 2171, 2165, 128, 933, 654, 2161,
	2139, 2098, 2083, 129, 123, 2072, 2021, 2013, 638, 1997,
	1987, 124, 950, 1905, 1903, 1902, 1901, 24, 1898, 1888,
	1796, 139, 1774, 1762, 1749, 1747, 1701, 1704, 959, 1656,
	114, 1618, 1617, 1614, 1589, 139, 1584, 1319, 1542, 128,
	950, 1513, 1021, 567, 1024, 139, 1404, 123, 1359, 139,
	139, 139, 1326, 139, 124, 1222, 1116, 939, 139, 139,
	139, 139, 139, 1028, 1629, 1630, 1014, 1013, 622, 801,
	1012, 1011, 1010, 114, 568, 1009, 1008, 1007, 1641, 1642,
	1643, 1955, 1006, 1640, 1638, 1639, 1631, 1632, 1633, 1634,
	1636, 1637, 1005, 567, 1004, 957, 1003, 1002, 945, 946,
	947, 960, 1001, 944, 942, 943, 935, 936, 937, 938,
	940, 941, 800, 1000, 122, 569, 999, 998, 997, 1991,
	990, 931, 932, 139, 139, 139, 139, 139, 979, 139,
	784, 944, 942, 943, 935, 936, 937, 938, 940, 941,
	114, 618, 876, 2138, 934, 768, 139, 139, 813, 567,
	139, 759, 1701, 651, 790, 1996, 394, 1995, 139, 834,
	109, 1969, 1769, 1765, 1223, 139, 139, 139, 933, 139,
	805, 1635, 1684, 548, 911, 1683, 764, 139, 977, 882,
	772, 635, 833, 900, 2154, 637, 1192, 769, 111, 793,
	917, 796, 781, 1716, 1959, 55, 905, 56, 804, 804,
	925, 1629, 1630, 659, 783, 881, 1190, 1772, 935, 936,
	937, 938, 940, 941, 1564, 834, 824, 825, 548, 982,
	1237, 58, 868, 1191, 902, 565, 1468, 535, 1680, 568,
	1679, 1568, 780, 865, 1467, 782, 871, 1530, 908, 1026,
	765, 1094, 995, 832, 1027, 534, 1121, 1687, 2056, 896,
	1243, 1829, 532, 1340, 864, 1629, 1630, 1600, 1017, 1558,
	856, 110, 1921, 2208, 1185, 2255, 1186, 862, 2141, 605,
	569, 2045, 1421, 1692, 648, 602, 2009, 874, 601, 568,
	900, 567, 596, 139, 937, 938, 940, 941, 139, 2256,
	597, 851, 2133, 904, 2132, 992, 909, 2131, 649, 857,
	2130, 1936, 567, 567, 918, 1935, 929, 1918, 1917, 394,
	2010, 921, 1613, 1612, 1611, 1610, 1571, 1085, 139, 930,
	569, 1879, 540, 1511, 1510, 1122, 604, 1111, 1508, 1098,
	1097, 1037, 564, 559, 1301, 568, 1455, 1261, 989, 863,
	1187, 628, 395, 1489, 125, 1953, 1408, 834, 1171, 1932,
	1407, 1272, 1103, 1185, 116, 1186, 1180, 139, 1018, 1019,
	1022, 139, 1635, 139, 139, 139, 139, 139, 139, 525,
	1025, 1095, 129, 139, 1779, 781, 569, 139, 139, 539,
	1185, 1780, 1186, 396, 139, 2105, 1130, 2140, 1548, 1133,
	1380, 1135, 913, 1127, 139, 1179, 1489, 139, 1633, 1634,
	1636, 1637, 1488, 1316, 1316, 356, 1161, 767, 128, 2005,
	139, 2006, 1082, 1101, 2183, 1923, 123, 922, 782, 394,
	1083, 1355, 139, 124, 848, 1470, 1471, 2246, 139, 1187,
	1107, 139, 1445, 1084, 837, 1087, 1552, 1225, 1100, 1099,
	1754, 2008, 114, 139, 1751, 139, 2186, 1323, 1228, 567,
	2011, 528, 1321, 1199, 394, 1129, 1187, 357, 941, 1198,
	1214, 849, 2230, 649, 1142, 1141, 2168, 568, 603, 1015,
	2187, 838, 1271, 1693, 836, 533, 1450, 1074, 810, 1172,
	529, 1340, 2261, 1203, 754, 2079, 1819, 1351, 568, 568,
	530, 110, 1165, 2266, 2090, 395, 1102, 1159, 535, 1447,
	1224, 535, 535, 1037, 1037, 2255, 1162, 606, 569, 1166,
	1167, 1168, 1169, 1170, 1691, 1181, 1151, 1201, 1114, 1152,
	1153, 538, 1176, 1177, 1209, 1215, 1822, 2007, 1330, 569,
	569, 1820, 1219, 1220, 1352, 1334, 396, 1178, 1637, 1342,
	2245, 917, 867, 810, 853, 649, 974, 526, 2231, 1616,
	541, 1367, 1367, 1378, 753, 1389, 1259, 1249, 1188, 654,
	537, 1401, 1402, 1403, 622, 906, 1745, 1260, 110, 1263,
	1270, 1337, 1218, 1629, 1630, 1424, 916, 1930, 1924, 1353,
	1350, 701, 1233, 649, 920, 920, 1426, 1631, 1632, 1633,
	1634, 1636, 1637, 1183, 2106, 1629, 1630, 1446, 1647, 1648,
	1649, 1355, 547, 1327, 2232, 395, 1355, 1427, 1324, 854,
	1883, 1960, 1556, 527, 505, 1912, 546, 385, 2229, 1425,
	2254, 359, 358, 2252, 2029, 1452, 1644, 1312, 1410, 2264,
	1486, 394, 506, 842, 139, 568, 1375, 139, 2244, 390,
	395, 762, 1310, 656, 139, 386, 396, 1188, 1644, 1429,
	1573, 1315, 139, 139, 1355, 139, 1552, 139, 139, 394,
	139, 139, 855, 1415, 820, 545, 819, 565, 560, 1547,
	110, 2274, 387, 2262, 1188, 1985, 569, 1462, 1417, 139,
	1635, 396, 1858, 1495, 2265, 139, 777, 1022, 2125, 1025,
	2124, 389, 507, 2096, 1322, 2158, 1920, 1736, 1732, 139,
	139, 139, 1635, 1019, 1018, 2267, 139, 1453, 1196, 1115,
	139, 1422, 1306, 2041, 1128, 547, 2044, 1118, 139, 360,
	1307, 139, 1308, 2043, 1195, 818, 1313, 139, 394, 1147,
	1093, 1349, 1818, 139, 139, 1538, 1515, 139, 1645, 1650,
	2196, 1520, 139, 1430, 1193, 139, 1519, 1464, 681, 1490,
	820, 778, 139, 1581, 1460, 779, 1496, 1498, 1461, 1298,
	1645, 1194, 139, 1175, 1458, 819, 1459, 139, 1579, 139,
	1466, 1534, 2273, 1091, 1986, 1859, 139, 1089, 1908, 2097,
	2031, 1860, 139, 1522, 1523, 1092, 136, 1528, 1706, 351,
	1705, 508, 1457, 804, 548, 804, 353, 1483, 1554, 1148,
	1539, 388, 1481, 1560, 365, 1493, 1245, 1521, 1245, 495,
	136, 1646, 2040, 501, 110, 1509, 501, 395, 544, 1501,
	1476, 1527, 2042, 523, 818, 1529, 1533, 1516, 622, 1213,
	1512, 1212, 1309, 1646, 497, 1629, 1630, 1543, 1576, 1311,
	494, 777, 646, 645, 545, 395, 1235, 797, 1577, 1885,
	1998, 641, 1582, 640, 1546, 391, 2094, 132, 396, 1296,
	1299, 1254, 380, 32, 3, 1557, 1939, 548, 1587, 509,
	1757, 1358, 610, 610, 1565, 1590, 1567, 1602, 351, 2082,
	2095, 1984, 136, 632, 887, 1660, 396, 1795, 1778, 1623,
	1583, 1549, 1295, 1606, 1607, 379, 31, 1507, 1504, 1419,
	510, 1239, 1640, 1638, 1639, 1631, 1632, 1633, 1634, 1636,
	1637, 361, 859, 1574, 395, 1572, 375, 28, 858, 1641,
	1642, 1643, 378, 17, 1640, 1638, 1639, 1631, 1632, 1633,
	1634, 1636, 1637, 548, 1655, 852, 1588, 891, 847, 567,
	139, 846, 1635, 372, 13, 1668, 845, 382, 844, 567,
	1599, 362, 843, 840, 760, 396, 894, 891, 1578, 756,
	644, 139, 1661, 139, 139, 1580, 1173, 1164, 374, 16,
	139, 595, 889, 139, 373, 14, 894, 139, 996, 850,
	363, 892, 364, 1699, 1037, 1702, 1357, 1297, 633, 2225,
	634, 630, 1216, 32, 385, 627, 890, 139, 371, 12,
	1645, 892, 1663, 1664, 1665, 834, 1037, 139, 139, 139,
	2193, 1526, 2039, 139, 1928, 1926, 390, 139, 139, 139,
	139, 139, 386, 1919, 1150, 1712, 31, 1456, 1688, 139,
	1690, 139, 139, 1449, 1689, 1200, 1694, 1197, 1189, 1140,
	1139, 1137, 1718, 1719, 1134, 1720, 1132, 28, 139, 387,
	1682, 1809, 649, 17, 139, 1714, 1733, 893, 2067, 377,
	10, 822, 614, 139, 139, 2256, 1037, 1109, 389, 370,
	8, 1721, 1698, 1646, 13, 810, 810, 893, 1503, 2069,
	1768, 1506, 1727, 139, 139, 1723, 1500, 1728, 369, 4,
	1489, 598, 599, 1786, 1489, 381, 1499, 1477, 1764, 16,
	1497, 1474, 1784, 642, 2175, 14, 1744, 2018, 351, 1783,
	1708, 839, 1755, 931, 932, 1758, 1761, 1482, 810, 1484,
	1760, 2146, 1940, 826, 755, 568, 1525, 1505, 649, 12,
	1798, 1502, 1698, 823, 615, 568, 810, 139, 1802, 649,
	1814, 1815, 1816, 1773, 1781, 622, 1777, 1776, 2181, 1775,
	1787, 622, 622, 2027, 110, 622, 1037, 1788, 1451, 498,
	933, 1789, 1475, 931, 932, 1448, 569, 1631, 1632, 1633,
	1634, 1636, 1637, 505, 1248, 1202, 569, 1086, 388, 1029,
	1550, 1414, 1808, 1805, 2259, 916, 934, 1821, 1823, 1824,
	10, 506, 1037, 1037, 916, 2272, 1830, 2062, 698, 1832,
	8, 1037, 1037, 1629, 1630, 1863, 1945, 1835, 1837, 1381,
	933, 931, 932, 830, 829, 1881, 1873, 1878, 139, 4,
	1825, 139, 830, 1865, 1685, 1675, 1535, 1409, 1406, 1405,
	1347, 887, 391, 139, 1037, 983, 567, 1904, 831, 1971,
	1866, 2191, 1897, 1889, 1068, 2089, 394, 139, 1817, 763,
	1709, 507, 993, 991, 1896, 766, 524, 2104, 1263, 1833,
	383, 1895, 1163, 523, 1915, 841, 1531, 1263, 1838, 1914,
	1221, 2185, 1886, 351, 1977, 1615, 1899, 523, 795, 523,
	139, 798, 2134, 139, 891, 2078, 523, 523, 351, 811,
	632, 1356, 994, 394, 139, 139, 1933, 48, 1934, 567,
	1869, 1893, 1910, 894, 1909, 675, 1999, 1887, 1438, 1437,
	397, 1947, 1911, 1096, 1067, 1931, 697, 552, 1366, 889,
	1949, 1264, 757, 699, 1927, 1034, 1929, 1946, 892, 700,
	1941, 1035, 1023, 1944, 1942, 1707, 687, 1032, 1710, 652,
	1958, 1036, 1963, 890, 1952, 1252, 1320, 1338, 1598, 139,
	508, 501, 351, 351, 870, 351, 987, 610, 667, 679,
	678, 1335, 758, 1536, 1555, 834, 1954, 1146, 1037, 1943,
	1465, 1143, 1925, 531, 351, 351, 1626, 650, 136, 1387,
	1379, 1950, 1376, 789, 883, 975, 351, 1253, 787, 1746,
	1561, 1711, 1748, 351, 351, 351, 1413, 923, 875, 1154,
	1983, 613, 612, 1433, 893, 136, 785, 1090, 1423, 968,
	967, 600, 2160, 776, 775, 1724, 1068, 1068, 1119, 139,
	1735, 2260, 568, 139, 139, 1729, 504, 2174, 509, 1897,
	567, 1922, 395, 2207, 127, 2019, 126, 2153, 139, 139,
	139, 1896, 1897, 2087, 1545, 73, 1897, 139, 1895, 139,
	1753, 139, 139, 139, 1896, 2012, 139, 139, 1896, 510,
	2035, 1895, 30, 569, 2026, 1895, 622, 29, 2024, 2034,
	92, 91, 2028, 396, 90, 89, 139, 88, 87, 395,
	926, 86, 85, 2038, 84, 568, 1067, 1067, 83, 2058,
	82, 81, 80, 79, 2065, 78, 2033, 2059, 2032, 77,
	76, 1254, 622, 75, 2064, 2022, 520, 2077, 72, 2025,
	71, 136, 70, 1036, 1036, 69, 523, 27, 1381, 1381,
	396, 139, 2070, 394, 139, 23, 569, 95, 22, 20,
	21, 26, 139, 2084, 25, 18, 15, 9, 19, 394,
	53, 2092, 54, 52, 51, 50, 1126, 2061, 11, 46,
	139, 45, 44, 567, 1897, 43, 1897, 2109, 42, 1037,
	139, 2108, 2068, 41, 2110, 7, 1896, 94, 1896, 917,
	2112, 2107, 39, 1895, 38, 1895, 6, 139, 93, 5,
	2102, 106, 139, 103, 2122, 523, 1381, 1381, 1381, 523,
	139, 136, 523, 523, 523, 523, 523, 105, 102, 104,
	107, 1174, 99, 2123, 100, 523, 523, 101, 2137, 98,
	97, 139, 501, 2145, 36, 139, 568, 1037, 35, 2121,
	548, 2120, 610, 34, 33, 632, 2164, 2, 2162, 2148,
	2128, 2129, 1, 0, 0, 2156, 0, 2157, 351, 2169,
	0, 567, 0, 0, 0, 2170, 0, 2167, 0, 0,
	1232, 139, 139, 2166, 0, 1037, 351, 569, 0, 1238,
	2173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 1957, 1256, 2184, 0, 676, 66, 0, 0,
	0, 0, 139, 2127, 0, 2198, 139, 2190, 2182, 139,
	2199, 0, 0, 2204, 0, 2188, 394, 0, 622, 0,
	0, 139, 0, 0, 139, 1585, 1586, 2172, 0, 395,
	2206, 2201, 1897, 139, 2209, 2213, 2215, 2214, 2223, 1070,
	2212, 0, 2234, 0, 1896, 395, 0, 2210, 2211, 0,
	0, 1895, 2236, 66, 0, 0, 0, 0, 2205, 568,
	0, 0, 0, 2243, 0, 0, 139, 2242, 0, 0,
	396, 122, 0, 0, 0, 0, 2253, 2251, 0, 0,
	0, 2257, 0, 0, 2258, 0, 396, 0, 0, 0,
	0, 0, 2200, 1652, 1653, 1654, 1381, 1381, 0, 2269,
	569, 2270, 2268, 2271, 0, 0, 0, 536, 0, 0,
	0, 549, 0, 0, 0, 0, 0, 109, 0, 2224,
	0, 0, 0, 0, 0, 0, 623, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 568, 0, 0,
	0, 0, 55, 0, 56, 1381, 1381, 1381, 1381, 1381,
	1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
	1381, 1381, 1381, 1381, 0, 1381, 0, 0, 58, 0,
	0, 0, 351, 0, 0, 1434, 0, 0, 569, 2048,
	0, 0, 632, 0, 0, 2054, 0, 0, 0, 0,
	523, 523, 395, 523, 1069, 351, 351, 0, 1463, 632,
	0, 1070, 1070, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 0, 1479, 2117, 0, 0, 0, 0, 1068,
	0, 0, 0, 396, 0, 0, 0, 351, 351, 351,
	0, 0, 0, 0, 1494, 0, 931, 932, 351, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 351,
	2100, 0, 0, 0, 0, 351, 0, 0, 1033, 934,
	0, 351, 351, 1793, 1794, 351, 0, 1067, 2119, 0,
	1232, 0, 0, 1232, 0, 658, 0, 0, 761, 1068,
	1541, 125, 0, 933, 0, 1629, 1630, 0, 0, 1067,
	351, 116, 0, 0, 1036, 351, 0, 1559, 0, 0,
	0, 0, 1629, 1630, 351, 0, 0, 791, 792, 129,
	1479, 0, 0, 0, 0, 0, 1036, 0, 0, 0,
	0, 122, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 0, 1861, 939, 549, 128, 0, 0, 0, 1067,
	931, 932, 0, 123, 0, 0, 1069, 1069, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 109, 0, 1068,
	0, 0, 0, 934, 0, 0, 1036, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1635, 879, 879, 111, 0, 933, 0, 885,
	0, 949, 55, 0, 56, 1068, 1068, 2203, 0, 1635,
	0, 0, 0, 0, 1068, 1068, 0, 0, 0, 0,
	0, 0, 1254, 0, 0, 0, 0, 0, 58, 0,
	1033, 1033, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 969, 970, 971, 972, 973, 0, 1068, 0, 0,
	1645, 981, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 988, 0, 0, 0, 0, 1036, 1645, 1479, 0,
	0, 0, 0, 0, 950, 1067, 1067, 0, 0, 0,
	0, 0, 0, 0, 1067, 1067, 0, 0, 1381, 1126,
	0, 1126, 1703, 0, 0, 0, 0, 0, 523, 0,
	0, 351, 1036, 1036, 0, 1717, 0, 0, 0, 0,
	0, 1036, 1036, 0, 1381, 949, 0, 1067, 0, 0,
	0, 0, 0, 1646, 0, 351, 0, 536, 2009, 0,
	0, 2002, 0, 0, 0, 351, 1730, 1731, 0, 2000,
	1646, 1494, 0, 2004, 1036, 1737, 1738, 1740, 1742, 1743,
	0, 125, 0, 0, 0, 0, 0, 1750, 0, 1752,
	351, 116, 2010, 0, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 351, 0, 0, 129,
	0, 1068, 1232, 0, 2003, 0, 1381, 0, 950, 0,
	0, 632, 1232, 0, 0, 0, 0, 66, 0, 1144,
	0, 1149, 903, 0, 0, 0, 0, 1156, 0, 0,
	0, 351, 351, 0, 0, 128, 1639, 1631, 1632, 1633,
	1634, 1636, 1637, 123, 0, 0, 0, 0, 0, 0,
	124, 1640, 1638, 1639, 1631, 1632, 1633, 1634, 1636, 1637,
	0, 0, 0, 0, 0, 978, 0, 980, 0, 367,
	0, 1067, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 2005, 0, 2006, 0, 1827, 0, 0, 0, 0,
	0, 0, 1070, 0, 0, 2081, 0, 0, 1036, 0,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	0, 0, 0, 2008, 1070, 0, 0, 0, 0, 0,
	0, 2099, 2011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 0, 1300,
	0, 1302, 1303, 1304, 1305, 0, 1494, 0, 0, 1126,
	1892, 0, 0, 0, 1070, 0, 0, 0, 1328, 0,
	0, 1906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 2147, 0, 1916, 0, 0, 0, 2007,
	0, 1363, 1364, 0, 0, 1377, 0, 1388, 1390, 1395,
	1398, 1399, 1400, 0, 0, 0, 0, 0, 536, 0,
	0, 536, 536, 0, 0, 0, 0, 0, 351, 0,
	0, 632, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1232, 632, 0, 0, 0, 66, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 1067, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 931, 932, 0, 623, 0, 1068, 1036,
	0, 0, 0, 0, 0, 0, 0, 1978, 0, 0,
	1070, 1070, 0, 0, 0, 0, 934, 0, 0, 1070,
	1070, 0, 0, 0, 0, 0, 66, 0, 66, 0,
	1067, 0, 0, 0, 66, 0, 0, 0, 0, 0,
	933, 1033, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 1070, 0, 0, 1629, 1630, 1036, 1647, 1648,
	1649, 0, 0, 1033, 0, 0, 0, 1892, 1067, 0,
	0, 1800, 0, 1318, 0, 0, 0, 632, 0, 0,
	1892, 632, 1434, 0, 1892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1036, 2036, 2037, 1494, 0,
	939, 0, 0, 0, 0, 2046, 0, 2047, 1644, 351,
	2049, 2050, 0, 0, 2053, 351, 879, 0, 0, 931,
	932, 885, 0, 1033, 0, 961, 962, 963, 0, 0,
	0, 0, 2066, 0, 632, 0, 66, 0, 0, 1069,
	0, 0, 934, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 1553, 0, 0, 0, 949, 0,
	0, 0, 1635, 0, 0, 0, 933, 0, 0, 1566,
	0, 0, 948, 0, 0, 1069, 1069, 0, 0, 2091,
	0, 0, 2093, 0, 1069, 1069, 1070, 0, 0, 0,
	351, 0, 1892, 0, 1892, 0, 0, 0, 0, 1650,
	0, 0, 0, 0, 0, 0, 1569, 1570, 351, 0,
	0, 0, 1575, 1033, 0, 0, 0, 1069, 1494, 0,
	1645, 0, 0, 0, 0, 0, 939, 0, 0, 1629,
	1630, 950, 0, 0, 0, 2136, 0, 0, 0, 0,
	1232, 0, 0, 0, 1594, 958, 966, 0, 2143, 1033,
	1033, 1601, 0, 0, 1605, 0, 0, 0, 1033, 1033,
	0, 0, 1629, 1630, 0, 1647, 1648, 1649, 0, 2155,
	1619, 0, 0, 1126, 0, 0, 0, 0, 956, 0,
	66, 0, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 1033, 0, 1646, 0, 0, 981, 0, 66, 0,
	0, 66, 1395, 1395, 1395, 0, 0, 0, 0, 2176,
	2177, 0, 0, 623, 0, 1644, 0, 0, 0, 623,
	623, 0, 0, 623, 943, 935, 936, 937, 938, 940,
	941, 0, 0, 0, 0, 0, 1635, 0, 0, 0,
	2197, 0, 0, 0, 632, 0, 0, 351, 0, 0,
	1892, 1069, 0, 549, 0, 0, 0, 950, 0, 2136,
	0, 0, 351, 0, 0, 0, 0, 0, 0, 1635,
	0, 632, 0, 959, 0, 0, 0, 1070, 1722, 1641,
	1642, 1643, 0, 1156, 1640, 1638, 1639, 1631, 1632, 1633,
	1634, 1636, 1637, 0, 1645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2250, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1033, 980, 1645, 0, 0,
	0, 0, 0, 0, 0, 1070, 0, 1763, 0, 0,
	957, 0, 0, 0, 0, 0, 960, 0, 944, 942,
	943, 935, 936, 937, 938, 940, 941, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 0, 1646, 0, 0,
	0, 0, 0, 1070, 0, 885, 0, 0, 0, 1791,
	0, 0, 1792, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 1797, 0, 0, 0, 0, 0,
	1646, 931, 932, 1806, 951, 952, 953, 961, 962, 963,
	0, 1810, 0, 0, 1566, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 1834, 0, 0, 0, 1836, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 948, 66, 0, 0, 66, 1638,
	1639, 1631, 1632, 1633, 1634, 1636, 1637, 0, 0, 0,
	0, 1867, 1868, 0, 0, 0, 0, 0, 0, 0,
	1874, 1875, 1876, 0, 0, 0, 1641, 1642, 1643, 0,
	0, 1640, 1638, 1639, 1631, 1632, 1633, 1634, 1636, 1637,
	1069, 0, 0, 0, 0, 0, 0, 0, 939, 66,
	0, 0, 66, 0, 0, 1900, 1033, 0, 0, 0,
	66, 0, 0, 0, 0, 0, 0, 958, 966, 0,
	0, 0, 0, 0, 623, 0, 1629, 1630, 1069, 1647,
	1648, 1649, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 1799, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 949, 0, 0, 0,
	623, 0, 0, 0, 1033, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1644,
	0, 955, 0, 0, 0, 0, 0, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 1962, 0, 0, 0,
	1965, 1966, 1033, 954, 0, 1968, 0, 0, 0, 0,
	934, 0, 1970, 965, 1972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	1979, 0, 0, 1635, 933, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 959, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 0, 0, 0, 0, 0,
	0, 0, 954, 1988, 931, 932, 0, 0, 0, 934,
	1650, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 1645, 0, 933, 939, 2020, 0, 0, 0, 948,
	0, 1629, 1630, 0, 1647, 1648, 1649, 0, 0, 0,
	0, 933, 957, 958, 966, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 0,
	0, 964, 0, 0, 0, 0, 1671, 0, 0, 0,
	2057, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 949, 939, 1644, 0, 623, 0, 0, 0,
	0, 2073, 2074, 0, 1646, 0, 0, 0, 0, 0,
	0, 939, 958, 966, 0, 0, 0, 955, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 2086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 1635, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 0, 0, 1651, 949,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 959, 0, 0, 2126, 1650, 0, 0, 0, 0,
	1641, 1642, 1643, 0, 0, 1640, 1638, 1639, 1631, 1632,
	1633, 1634, 1636, 1637, 0, 0, 1645, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2159,
	959, 0, 950, 0, 0, 0, 0, 0, 957, 0,
	0, 945, 946, 947, 960, 0, 944, 942, 943, 935,
	936, 937, 938, 940, 941, 0, 0, 0, 0, 0,
	0, 0, 1670, 0, 0, 0, 0, 0, 0, 1646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 0, 2222, 2222, 0,
	0, 1669, 0, 0, 0, 0, 935, 936, 937, 938,
	940, 941, 0, 0, 0, 0, 0, 0, 0, 2238,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2222, 0, 0, 0, 66, 1641, 1642, 1643, 0, 0,
	1640, 1638, 1639, 1631, 1632, 1633, 1634, 1636, 1637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 0, 0, 0,
	2222, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	141, 142, 412, 143, 413, 414, 415, 416, 294, 417,
	418, 419, 420, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 421, 148, 301, 302, 149, 150, 422,
	423, 303, 304, 305, 424, 151, 306, 425, 398, 426,
	152, 153, 154, 0, 155, 427, 156, 157, 158, 428,
	399, 159, 160, 429, 430, 432, 431, 433, 434, 435,
	161, 162, 352, 163, 307, 164, 308, 309, 436, 165,
	437, 166, 438, 167, 439, 440, 168, 169, 441, 170,
	442, 0, 443, 310, 171, 172, 173, 311, 312, 444,
	445, 446, 174, 175, 313, 314, 315, 0, 176, 447,
	177, 448, 449, 400, 450, 178, 316, 451, 317, 452,
	179, 180, 181, 182, 318, 319, 402, 453, 186, 454,
	183, 455, 401, 184, 320, 185, 321, 322, 323, 324,
	325, 456, 326, 457, 403, 187, 188, 189, 404, 190,
	191, 192, 458, 194, 193, 459, 327, 405, 195, 406,
	460, 196, 461, 462, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 463, 464, 465,
	329, 207, 330, 208, 209, 466, 210, 467, 468, 211,
	469, 470, 212, 331, 408, 213, 409, 332, 214, 215,
	216, 217, 218, 471, 219, 333, 220, 334, 221, 472,
	222, 223, 224, 225, 226, 335, 227, 228, 473, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 474, 241, 410, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 475, 253, 337, 252, 254, 255, 476,
	256, 245, 246, 257, 411, 258, 338, 339, 259, 477,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 478,
	266, 479, 267, 268, 269, 270, 271, 272, 273, 480,
	342, 343, 344, 481, 482, 274, 275, 345, 346, 483,
	276, 277, 278, 279, 484, 485, 280, 281, 282, 283,
	486, 284, 487, 347, 285, 286, 287, 348, 349, 488,
	489, 288, 490, 491, 492, 493, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 0, 0, 0, 0, 1226,
	0, 0, 0, 0, 0, 0, 0, 1227, 141, 142,
	412, 143, 413, 414, 415, 416, 294, 417, 418, 419,
	420, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 421, 148, 301, 302, 149, 150, 422, 423, 303,
	304, 305, 424, 151, 306, 425, 398, 426, 152, 153,
	154, 0, 155, 427, 156, 157, 158, 428, 399, 159,
	160, 429, 430, 432, 431, 433, 434, 435, 161, 162,
	352, 163, 307, 164, 308, 309, 436, 165, 437, 166,
	438, 167, 439, 440, 168, 169, 441, 170, 442, 0,
	443, 310, 171, 172, 173, 311, 312, 444, 445, 446,
	174, 175, 313, 314, 315, 0, 176, 447, 177, 448,
	449, 400, 450, 178, 316, 451, 317, 452, 179, 180,
	181, 182, 318, 319, 402, 453, 186, 454, 183, 455,
	401, 184, 320, 185, 321, 322, 323, 324, 325, 456,
	326, 457, 403, 187, 188, 189, 404, 190, 191, 192,
	458, 194, 193, 459, 327, 405, 195, 406, 460, 196,
	461, 462, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 463, 464, 465, 329, 207,
	330, 208, 209, 466, 210, 467, 468, 211, 469, 470,
	212, 331, 408, 213, 409, 332, 214, 215, 216, 217,
	218, 471, 219, 333, 220, 334, 221, 472, 222, 223,
	224, 225, 226, 335, 227, 228, 473, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 474,
	241, 410, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 475, 253, 337, 252, 254, 255, 476, 256, 245,
	246, 257, 411, 258, 338, 339, 259, 477, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 478, 266, 479,
	267, 268, 269, 270, 271, 272, 273, 480, 342, 343,
	344, 481, 482, 274, 275, 345, 346, 483, 276, 277,
	278, 279, 484, 485, 280, 281, 282, 283, 486, 284,
	487, 347, 285, 286, 287, 348, 349, 488, 489, 288,
	490, 491, 492, 493, 289, 290, 291, 292, 293, 0,
	0, 0, 393, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1948, 141, 142,
	412, 143, 413, 414, 415, 416, 294, 417, 418, 419,
	420, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 421, 148, 301, 302, 149, 150, 422, 423, 303,
	304, 305, 424, 151, 306, 425, 398, 426, 152, 153,
	154, 0, 155, 427, 156, 157, 158, 428, 399, 159,
	160, 429, 430, 432, 431, 433, 434, 435, 161, 162,
	352, 163, 307, 164, 308, 309, 436, 165, 437, 166,
	438, 167, 439, 440, 168, 169, 441, 170, 442, 0,
	443, 310, 171, 172, 173, 311, 312, 444, 445, 446,
	174, 175, 313, 314, 315, 0, 176, 447, 177, 448,
	449, 400, 450, 178, 316, 451, 317, 452, 179, 180,
	181, 182, 318, 319, 402, 453, 186, 454, 183, 455,
	401, 184, 320, 185, 321, 322, 323, 324, 325, 456,
	326, 457, 403, 187, 188, 189, 404, 190, 191, 192,
	458, 194, 193, 459, 327, 405, 195, 406, 460, 196,
	461, 462, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 463, 464, 465, 329, 207,
	330, 208, 209, 466, 210, 467, 468, 211, 469, 470,
	212, 331, 408, 213, 409, 332, 214, 215, 216, 217,
	218, 471, 219, 333, 220, 334, 221, 472, 222, 223,
	224, 225, 226, 335, 227, 228, 473, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 474,
	241, 410, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 475, 253, 337, 252, 254, 255, 476, 256, 245,
	246, 257, 411, 258, 338, 339, 259, 477, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 478, 266, 479,
	267, 268, 269, 270, 271, 272, 273, 480, 342, 343,
	344, 481, 482, 274, 275, 345, 346, 483, 276, 277,
	278, 279, 484, 485, 280, 281, 282, 283, 486, 284,
	487, 347, 285, 286, 287, 348, 349, 488, 489, 288,
	490, 491, 492, 493, 289, 290, 291, 292, 293, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 141, 142, 412, 143, 413,
	414, 415, 416, 294, 417, 418, 419, 420, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 421, 148,
	301, 302, 149, 150, 422, 423, 303, 304, 305, 424,
	151, 306, 425, 398, 426, 152, 153, 154, 0, 155,
	427, 156, 157, 158, 428, 399, 159, 160, 429, 430,
	432, 431, 433, 434, 435, 161, 162, 352, 163, 307,
	164, 308, 309, 436, 165, 437, 166, 438, 167, 439,
	440, 168, 169, 441, 170, 442, 0, 443, 310, 171,
	172, 173, 311, 312, 444, 445, 446, 174, 175, 313,
	314, 315, 0, 176, 447, 177, 448, 449, 400, 450,
	178, 316, 451, 317, 452, 179, 180, 181, 182, 318,
	319, 402, 453, 186, 454, 183, 455, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 456, 326, 457, 403,
	187, 188, 189, 404, 190, 191, 192, 458, 194, 193,
	459, 327, 405, 195, 406, 460, 196, 461, 462, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 463, 464, 465, 329, 207, 330, 208, 209,
	466, 210, 467, 468, 211, 469, 470, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 471, 219,
	333, 220, 334, 221, 472, 222, 223, 224, 225, 226,
	335, 227, 228, 473, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 474, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 475, 253,
	337, 252, 254, 255, 476, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 477, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 478, 266, 479, 267, 268, 269,
	270, 271, 272, 273, 480, 342, 343, 344, 481, 482,
	274, 275, 345, 346, 483, 276, 277, 278, 279, 484,
	485, 280, 281, 282, 283, 486, 284, 487, 347, 285,
	286, 287, 348, 349, 488, 489, 288, 490, 491, 492,
	493, 289, 290, 291, 292, 293, 695, 684, 685, 682,
	683, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	712, 677, 0, 0, 0, 144, 145, 146, 295, 727,
	297, 728, 147, 729, 730, 0, 148, 301, 302, 149,
	150, 680, 711, 731, 732, 305, 0, 151, 723, 0,
	703, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 704, 705, 707, 0,
	706, 708, 161, 162, 352, 163, 733, 164, 734, 735,
	886, 165, 0, 166, 0, 167, 0, 0, 726, 169,
	0, 170, 0, 0, 0, 668, 171, 172, 173, 713,
	714, 691, 0, 0, 174, 175, 736, 737, 738, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 724, 0,
	317, 0, 179, 180, 181, 182, 720, 722, 402, 0,
	186, 0, 183, 0, 401, 184, 739, 185, 740, 741,
	742, 743, 744, 0, 702, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 725, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 663,
	0, 692, 721, 207, 745, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 715,
	214, 215, 216, 217, 218, 0, 219, 716, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 746, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 669, 244,
	0, 248, 249, 250, 251, 125, 253, 337, 252, 254,
	255, 709, 256, 245, 246, 257, 411, 258, 747, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 748, 263,
	717, 0, 266, 129, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 749, 750, 0, 0, 274, 275, 718,
	719, 690, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 710, 284, 0, 347, 285, 286, 287, 655,
	751, 0, 0, 288, 0, 0, 0, 123, 289, 290,
	291, 292, 293, 664, 124, 0, 0, 0, 0, 662,
	0, 0, 0, 0, 660, 661, 695, 684, 685, 682,
	683, 674, 0, 670, 0, 0, 0, 0, 673, 0,
	0, 0, 141, 142, 1344, 143, 0, 0, 0, 0,
	712, 677, 0, 0, 0, 144, 145, 146, 295, 727,
	297, 728, 147, 729, 730, 0, 148, 301, 302, 149,
	150, 680, 711, 731, 732, 305, 0, 151, 723, 0,
	703, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 704, 705, 707, 0,
	706, 708, 161, 162, 352, 163, 733, 164, 734, 735,
	0, 165, 0, 166, 0, 167, 1345, 0, 726, 169,
	0, 170, 0, 0, 0, 668, 171, 172, 173, 713,
	714, 691, 0, 0, 174, 175, 736, 737, 738, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 724, 0,
	317, 0, 179, 180, 181, 182, 720, 722, 402, 0,
	186, 0, 183, 0, 401, 184, 739, 185, 740, 741,
	742, 743, 744, 0, 702, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 725, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 663,
	0, 692, 721, 207, 745, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 715,
	214, 215, 216, 217, 218, 0, 219, 716, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 746, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 669, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 709, 256, 245, 246, 257, 411, 258, 747, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 748, 263,
	717, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 749, 750, 0, 0, 274, 275, 718,
	719, 690, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 710, 284, 0, 347, 285, 286, 287, 348,
	751, 1343, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 664, 0, 0, 0, 0, 0, 662,
	0, 0, 0, 0, 660, 661, 1346, 695, 684, 685,
	682, 683, 674, 670, 1341, 0, 0, 0, 673, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 712, 677, 0, 0, 0, 144, 145, 146, 295,
	727, 297, 728, 147, 729, 730, 0, 148, 301, 302,
	149, 150, 680, 711, 731, 732, 305, 0, 151, 723,
	0, 703, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 704, 705, 707,
	0, 706, 708, 161, 162, 352, 163, 733, 164, 734,
	735, 0, 165, 0, 166, 0, 167, 0, 0, 726,
	169, 0, 170, 0, 0, 0, 668, 171, 172, 173,
	713, 714, 691, 0, 0, 174, 175, 736, 737, 738,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 724,
	0, 317, 0, 179, 180, 181, 182, 720, 722, 402,
	0, 186, 0, 183, 0, 401, 184, 739, 185, 740,
	741, 742, 743, 744, 0, 702, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 725,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	663, 0, 692, 721, 207, 745, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	715, 214, 215, 216, 217, 218, 0, 219, 716, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 746, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 669,
	244, 0, 248, 249, 250, 251, 125, 253, 337, 252,
	254, 255, 709, 256, 245, 246, 257, 411, 258, 747,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 748,
	263, 717, 0, 266, 129, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 749, 750, 0, 0, 274, 275,
	718, 719, 690, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 710, 284, 0, 347, 285, 286, 287,
	655, 751, 0, 0, 288, 0, 0, 0, 123, 289,
	290, 291, 292, 293, 664, 124, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 660, 661, 695, 684, 685,
	682, 683, 674, 0, 670, 0, 0, 0, 0, 673,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 712, 677, 0, 0, 0, 144, 145, 146, 295,
	727, 297, 728, 147, 729, 730, 1391, 148, 301, 302,
	149, 150, 680, 711, 731, 732, 305, 0, 151, 723,
	0, 703, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 704, 705, 707,
	0, 706, 708, 161, 162, 352, 163, 733, 164, 734,
	735, 0, 165, 0, 166, 0, 167, 0, 0, 726,
	169, 0, 170, 0, 0, 0, 668, 171, 172, 173,
	713, 714, 691, 0, 0, 174, 175, 736, 737, 738,
	0, 176, 0, 177, 0, 1396, 400, 0, 178, 724,
	0, 317, 0, 179, 180, 181, 182, 720, 722, 402,
	0, 186, 0, 183, 0, 401, 184, 739, 185, 740,
	741, 742, 743, 744, 0, 702, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 1392, 725,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	663, 0, 692, 721, 207, 745, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	715, 214, 215, 216, 217, 218, 0, 219, 716, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 746, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 669,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 709, 256, 245, 246, 257, 411, 258, 747,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 748,
	263, 717, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 749, 750, 0, 1393, 274, 275,
	718, 719, 690, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 710, 284, 0, 347, 285, 286, 287,
	348, 751, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 664, 0, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 660, 661, 695, 684, 685,
	682, 683, 674, 0, 670, 0, 0, 0, 0, 673,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 712, 677, 0, 0, 0, 144, 145, 146, 295,
	727, 297, 728, 147, 729, 730, 0, 148, 301, 302,
	149, 150, 680, 711, 731, 732, 305, 0, 151, 723,
	0, 703, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 704, 705, 707,
	0, 706, 708, 161, 162, 352, 163, 733, 164, 734,
	735, 0, 165, 0, 166, 0, 167, 0, 0, 726,
	169, 0, 170, 0, 0, 0, 668, 171, 172, 173,
	713, 714, 691, 0, 0, 174, 175, 736, 737, 738,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 724,
	0, 317, 0, 179, 180, 181, 182, 720, 722, 402,
	0, 186, 0, 183, 0, 401, 184, 739, 185, 740,
	741, 742, 743, 744, 0, 702, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 725,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	663, 1782, 692, 721, 207, 745, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	715, 214, 215, 216, 217, 218, 0, 219, 716, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 746, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 669,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 709, 256, 245, 246, 257, 411, 258, 747,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 748,
	263, 717, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 749, 750, 0, 0, 274, 275,
	718, 719, 690, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 710, 284, 0, 347, 285, 286, 287,
	348, 751, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 664, 0, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 660, 661, 880, 695, 684,
	685, 682, 683, 674, 670, 0, 0, 0, 0, 673,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 712, 677, 0, 0, 0, 144, 145, 146,
	295, 727, 297, 728, 147, 729, 730, 0, 148, 301,
	302, 149, 150, 680, 711, 731, 732, 305, 0, 151,
	723, 0, 703, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 704, 705,
	707, 0, 706, 708, 161, 162, 352, 163, 733, 164,
	734, 735, 0, 165, 0, 166, 0, 167, 0, 0,
	726, 169, 0, 170, 0, 0, 0, 668, 171, 172,
	173, 713, 714, 691, 0, 0, 174, 175, 736, 737,
	738, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	724, 0, 317, 0, 179, 180, 181, 182, 720, 722,
	402, 0, 186, 1158, 183, 0, 401, 184, 739, 185,
	740, 741, 742, 743, 744, 0, 702, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	725, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 663, 0, 692, 721, 207, 745, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 715, 214, 215, 216, 217, 218, 0, 219, 716,
	220, 334, 221, 1157, 222, 223, 224, 225, 226, 746,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	669, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 709, 256, 245, 246, 257, 411, 258,
	747, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	748, 263, 717, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 749, 750, 0, 0, 274,
	275, 718, 719, 690, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 710, 284, 0, 347, 285, 286,
	287, 348, 751, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 664, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 660, 661, 695, 684,
	685, 682, 683, 674, 0, 670, 0, 0, 0, 0,
	673, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 712, 677, 0, 0, 0, 144, 145, 146,
	295, 727, 297, 728, 147, 729, 730, 0, 148, 301,
	302, 149, 150, 680, 711, 731, 732, 305, 0, 151,
	723, 0, 703, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 704, 705,
	707, 0, 706, 708, 161, 162, 352, 163, 733, 164,
	734, 735, 0, 165, 0, 166, 0, 167, 0, 0,
	726, 169, 0, 170, 0, 0, 0, 668, 171, 172,
	173, 713, 714, 691, 0, 0, 174, 175, 736, 737,
	738, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	724, 0, 317, 0, 179, 180, 181, 182, 720, 722,
	402, 0, 186, 0, 183, 0, 401, 184, 739, 185,
	740, 741, 742, 743, 744, 0, 702, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	725, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 663, 0, 692, 721, 207, 745, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 715, 214, 215, 216, 217, 218, 0, 219, 716,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 746,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	669, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 709, 256, 245, 246, 257, 411, 258,
	747, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	748, 263, 717, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 749, 750, 0, 0, 274,
	275, 718, 719, 690, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 710, 284, 0, 347, 285, 286,
	287, 348, 751, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 664, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 660, 661, 0, 0,
	0, 0, 0, 986, 1336, 670, 0, 0, 0, 0,
	673, 695, 684, 685, 682, 683, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 712, 677, 0, 0, 0,
	144, 145, 146, 295, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 680, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 0, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	668, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 402, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 663, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 669, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 411, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 664, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 660,
	661, 695, 684, 685, 682, 683, 674, 0, 670, 1864,
	0, 0, 0, 673, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 712, 677, 0, 0, 0,
	144, 145, 146, 295, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 680, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 0, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	668, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 402, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 663, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 669, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 411, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 1813, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 664, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 660,
	661, 695, 684, 685, 682, 683, 674, 0, 670, 0,
	0, 0, 0, 673, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 712, 677, 0, 0, 0,
	144, 145, 146, 295, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 680, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 0, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	668, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 402, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 663, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 669, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 411, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 664, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 660,
	661, 695, 684, 685, 682, 683, 674, 0, 670, 1803,
	0, 0, 0, 673, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 712, 677, 0, 0, 0,
	144, 145, 146, 295, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 680, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 886, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	668, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 402, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 663, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 669, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 411, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 664, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 660,
	661, 695, 684, 685, 682, 683, 674, 0, 670, 0,
	0, 0, 0, 673, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 712, 677, 0, 0, 0,
	144, 145, 146, 295, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 680, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 0, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	668, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 1396,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 402, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 663, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 669, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 411, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 664, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 660,
	661, 695, 684, 685, 682, 683, 674, 0, 670, 0,
	0, 0, 0, 673, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 712, 677, 0, 0, 0,
	144, 145, 146, 295, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 680, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 0, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	668, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 402, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 663, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 669, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 411, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 664, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 660,
	661, 880, 695, 684, 685, 682, 683, 674, 670, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 295, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 680, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 164, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 668, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	181, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 663, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 669, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 664,
	0, 0, 0, 0, 0, 662, 0, 0, 0, 0,
	660, 661, 695, 684, 685, 682, 683, 674, 0, 670,
	1331, 0, 0, 0, 673, 0, 0, 0, 141, 142,
	1145, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 295, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 680, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 164, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 668, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	181, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 663, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 669, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 664,
	0, 0, 0, 0, 0, 662, 0, 0, 0, 0,
	660, 661, 695, 684, 685, 682, 683, 674, 0, 670,
	0, 0, 0, 0, 673, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 295, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 680, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	2221, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 164, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 668, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	181, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 663, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 669, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	2220, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 664,
	0, 0, 0, 0, 0, 662, 0, 0, 0, 0,
	660, 661, 695, 684, 685, 682, 683, 674, 0, 670,
	0, 0, 0, 0, 673, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 295, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 680, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 164, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 668, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	181, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 663, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 669, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 664,
	0, 0, 0, 0, 0, 662, 0, 0, 0, 0,
	660, 661, 695, 684, 685, 682, 683, 674, 0, 670,
	0, 0, 0, 0, 673, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 2219, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 680, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	2221, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 164, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 668, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	181, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 663, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 669, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	2220, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 664,
	0, 0, 0, 0, 0, 662, 0, 0, 0, 0,
	660, 661, 1368, 684, 685, 682, 683, 674, 0, 670,
	0, 0, 0, 0, 673, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 295, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 680, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 1371, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 668, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	1372, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 1373, 1370, 202, 328, 201,
	407, 203, 204, 206, 205, 663, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 669, 244, 0, 248, 249, 250,
	1374, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 1369, 293, 664,
	0, 0, 0, 0, 0, 662, 0, 0, 0, 0,
	660, 661, 695, 684, 685, 682, 683, 674, 0, 670,
	0, 0, 0, 0, 673, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 295, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 680, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 164, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 668, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	181, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 0, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 1386, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 0,
	0, 0, 0, 0, 0, 1384, 0, 0, 0, 0,
	1382, 1383, 695, 684, 685, 682, 683, 674, 0, 1385,
	0, 0, 0, 0, 673, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 712, 677, 0, 0,
	0, 144, 145, 146, 295, 727, 297, 728, 147, 729,
	730, 0, 148, 301, 302, 149, 150, 0, 711, 731,
	732, 305, 0, 151, 723, 0, 703, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 704, 705, 707, 0, 706, 708, 161, 162,
	352, 163, 733, 164, 734, 735, 0, 165, 0, 166,
	0, 167, 0, 0, 726, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 713, 714, 691, 0, 0,
	174, 175, 736, 737, 738, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 724, 0, 317, 0, 179, 180,
	181, 182, 720, 722, 402, 0, 186, 0, 183, 0,
	401, 184, 739, 185, 740, 741, 742, 743, 744, 0,
	702, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 725, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 0, 0, 692, 721, 207,
	745, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 715, 214, 215, 216, 217,
	218, 0, 219, 716, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 746, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 1386, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 709, 256, 245,
	246, 257, 411, 258, 747, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 748, 263, 717, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 749,
	750, 0, 0, 274, 275, 718, 719, 690, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 710, 284,
	0, 347, 285, 286, 287, 348, 751, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 0,
	0, 695, 684, 685, 682, 683, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 1385,
	143, 0, 0, 0, 673, 712, 677, 0, 0, 0,
	144, 145, 146, 0, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 680, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 2221,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 0, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	668, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 0, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 0, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 663, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 669, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 0, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 2220,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	661, 0, 0, 0, 141, 142, 0, 143, 670, 0,
	0, 0, 712, 673, 0, 0, 0, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 711, 303, 304, 305, 0, 151,
	723, 0, 703, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 704, 705,
	707, 0, 706, 708, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 713, 714, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	724, 0, 317, 0, 179, 180, 181, 182, 720, 722,
	402, 0, 186, 0, 183, 0, 401, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	725, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 0, 0, 0, 721, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 715, 214, 215, 216, 217, 218, 0, 219, 716,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 709, 256, 245, 246, 257, 411, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 717, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 718, 719, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 710, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 566, 0, 0,
	289, 290, 291, 292, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 1894, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 398, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 402,
	0, 186, 0, 183, 0, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 327,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 125, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 129, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	655, 349, 0, 0, 288, 0, 0, 0, 123, 289,
	290, 291, 292, 293, 0, 124, 566, 563, 0, 564,
	559, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 114, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	1108, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 556, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 557,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 555, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 566, 563, 0, 564, 559, 554, 0,
	0, 0, 0, 0, 565, 560, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 398, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 1105, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 556, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 402, 0, 186, 0, 183,
	0, 401, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 327, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 557, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 411, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 555, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 0,
	284, 0, 347, 285, 286, 287, 348, 349, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	566, 563, 0, 564, 559, 554, 0, 0, 0, 0,
	0, 565, 560, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 398, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 786, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 556, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 402, 0, 186, 0, 183, 0, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 327, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 557, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 555, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 566, 563, 0,
	564, 559, 554, 0, 0, 0, 0, 0, 565, 560,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 398, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 556, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 402,
	0, 186, 0, 183, 0, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 327,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	557, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 555, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 138, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 565, 560, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 0, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 0, 0, 186, 0, 183,
	0, 0, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 0, 187, 188, 189, 0, 190, 191,
	192, 0, 194, 193, 0, 327, 0, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 0, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 0, 626, 211, 0,
	0, 212, 331, 0, 213, 0, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 0, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 125, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 0, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	129, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 0, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 0,
	284, 0, 347, 285, 286, 287, 655, 349, 0, 0,
	288, 0, 138, 0, 123, 289, 290, 291, 292, 293,
	0, 124, 0, 0, 0, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 620, 0,
	625, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 0, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 0, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 0, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 125, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 129,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 0, 284,
	0, 347, 285, 286, 287, 655, 349, 0, 0, 288,
	0, 138, 0, 123, 289, 290, 291, 292, 293, 0,
	124, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 114,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 626, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 0, 0, 288, 0,
	138, 0, 0, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 620, 0, 625, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	138, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 914, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 138,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 1255, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 138, 0,
	0, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 0, 1828, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 0, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 0, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 0, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 695, 684, 685, 682, 683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 907, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 727, 297,
	728, 147, 729, 730, 0, 148, 301, 302, 149, 150,
	0, 0, 731, 732, 305, 0, 151, 306, 0, 398,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 733, 164, 734, 735, 0,
	165, 0, 166, 0, 167, 0, 0, 726, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	691, 0, 0, 174, 175, 736, 737, 738, 0, 176,
	0, 177, 0, 0, 400, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 402, 0, 186,
	0, 183, 0, 401, 184, 739, 185, 740, 741, 742,
	743, 744, 0, 702, 0, 403, 187, 188, 189, 404,
	190, 191, 192, 0, 194, 193, 0, 327, 405, 195,
	406, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 0, 0,
	692, 329, 207, 745, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 408, 213, 409, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 746, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 410, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 411, 258, 747, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 748, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 749, 750, 0, 0, 274, 275, 345, 346,
	690, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 751,
	566, 563, 288, 0, 0, 835, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 398, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 402, 0, 186, 0, 183, 0, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 327, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 134, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 133, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	566, 563, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 137, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 398, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 402, 0, 186, 0, 183, 0, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 327, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	566, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 137, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 398, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 402, 0, 186, 0, 183, 0, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 327, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 1445, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 1443, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 1442, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 1447, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	1440, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	1446, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 1441, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	1445, 151, 306, 0, 0, 1492, 152, 153, 154, 0,
	155, 1443, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 1447, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	1491, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 1446, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 1495, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 1231, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 626, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 1160, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	872, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 626, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 866, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 626,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 643, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 355, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 354,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 1741, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	1739, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 1734, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 500, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 1125, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 924, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 0, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 869, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	814, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 812, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	808, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 806, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	803, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 799, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	794, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 770, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 522, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 518, 343, 344, 0, 0, 274, 771, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 608, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 138, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 512, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 511, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 522, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 513, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 514, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 518, 343, 344, 0, 0, 274, 516, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 0, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 0,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 0, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 0, 0, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 965, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 933, 0, 0, 0, 934, 0,
	948, 965, 0, 931, 932, 0, 951, 952, 953, 961,
	962, 963, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 933, 0, 0, 0, 934, 0, 948, 965,
	0, 0, 931, 932, 0, 951, 952, 953, 961, 962,
	963, 0, 0, 0, 0, 0, 0, 0, 954, 0,
	933, 0, 0, 0, 939, 934, 948, 0, 965, 0,
	931, 932, 0, 951, 952, 953, 961, 962, 963, 0,
	0, 0, 0, 958, 966, 0, 954, 0, 0, 933,
	0, 0, 939, 934, 0, 948, 965, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 966, 0, 0, 0, 956, 933, 0, 0,
	939, 0, 949, 948, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	966, 0, 0, 0, 956, 0, 0, 955, 0, 939,
	949, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 966,
	0, 0, 956, 0, 0, 955, 0, 939, 949, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 958, 966, 0, 0,
	0, 956, 0, 955, 0, 0, 0, 949, 0, 0,
	0, 959, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 956,
	0, 0, 955, 0, 0, 949, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	950, 945, 946, 947, 960, 0, 944, 942, 943, 935,
	936, 937, 938, 940, 941, 0, 959, 0, 0, 0,
	0, 0, 1621, 0, 0, 0, 957, 0, 950, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 0, 959, 0, 0, 2194, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 0, 0, 0, 0, 2150, 0, 0, 0, 0,
	0, 0, 0, 957, 0, 0, 945, 946, 947, 960,
	0, 944, 942, 943, 935, 936, 937, 938, 940, 941,
	0, 0, 0, 0, 2111, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	931, 932, 2085, 951, 952, 953, 961, 962, 963, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 965, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 0, 0, 0,
	0, 0, 0, 0, 954, 0, 0, 933, 0, 0,
	0, 934, 0, 948, 965, 0, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 0, 0, 0, 0, 0,
	0, 0, 954, 0, 0, 933, 0, 0, 0, 934,
	0, 948, 965, 0, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 933, 0, 0, 0, 939, 934, 948,
	0, 965, 0, 931, 932, 0, 951, 952, 953, 961,
	962, 963, 0, 0, 0, 0, 958, 966, 0, 954,
	0, 0, 933, 0, 0, 939, 934, 0, 948, 965,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 966, 0, 0, 0, 956,
	933, 0, 0, 939, 0, 949, 948, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 966, 0, 0, 0, 956, 0, 0,
	955, 0, 939, 949, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 966, 0, 0, 956, 0, 0, 955, 0,
	939, 949, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 958,
	966, 0, 0, 0, 956, 0, 955, 0, 0, 0,
	949, 0, 0, 0, 959, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 956, 0, 0, 955, 0, 0, 949, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 950, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 959,
	0, 0, 2080, 0, 0, 0, 0, 0, 0, 957,
	0, 950, 945, 946, 947, 960, 0, 944, 942, 943,
	935, 936, 937, 938, 940, 941, 0, 959, 0, 0,
	2076, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 0, 0, 2023, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 0, 0, 0, 0, 1993, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 0, 0, 931, 932, 1992, 951, 952, 953, 961,
	962, 963, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 965,
	0, 931, 932, 0, 951, 952, 953, 961, 962, 963,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	933, 0, 0, 0, 934, 0, 948, 965, 0, 931,
	932, 0, 951, 952, 953, 961, 962, 963, 0, 0,
	0, 0, 0, 0, 0, 954, 0, 0, 933, 0,
	0, 0, 934, 0, 948, 965, 0, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 0, 0, 0,
	0, 0, 0, 0, 954, 0, 933, 0, 0, 0,
	939, 934, 948, 0, 965, 0, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 0, 0, 0, 0, 958,
	966, 0, 954, 0, 0, 933, 0, 0, 939, 934,
	0, 948, 965, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 966, 0,
	0, 0, 956, 933, 0, 0, 939, 0, 949, 948,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 966, 0, 0, 0,
	956, 0, 0, 955, 0, 939, 949, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 966, 0, 0, 956, 0,
	0, 955, 0, 939, 949, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 958, 966, 0, 0, 0, 956, 0, 955,
	0, 0, 0, 949, 0, 0, 0, 959, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 956, 0, 0, 955, 0,
	0, 949, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 950, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 0, 959, 0, 0, 1913, 0, 0, 0, 0,
	0, 0, 957, 0, 950, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 0,
	959, 0, 0, 1831, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 945, 946, 947, 960, 0, 944, 942,
	943, 935, 936, 937, 938, 940, 941, 0, 0, 0,
	0, 1807, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 945, 946, 947, 960, 0, 944, 942, 943,
	935, 936, 937, 938, 940, 941, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 122, 0, 1591, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 117, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 0, 108, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 0,
	0, 934, 119, 0, 965, 0, 0, 0, 40, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	47, 948, 0, 0, 49, 0, 0, 0, 111, 0,
	0, 120, 0, 0, 0, 55, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 939, 2248, 0, 0, 0,
	0, 1629, 1630, 0, 1647, 1648, 1649, 0, 0, 0,
	0, 0, 0, 0, 958, 966, 0, 0, 0, 0,
	931, 932, 0, 951, 952, 953, 961, 962, 963, 0,
	0, 0, 964, 0, 0, 0, 954, 0, 0, 0,
	0, 1474, 0, 934, 0, 0, 965, 956, 0, 0,
	0, 0, 0, 949, 1644, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 933, 0, 60,
	0, 0, 0, 948, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 68, 61,
	0, 62, 0, 63, 2247, 121, 0, 0, 0, 0,
	64, 0, 1475, 0, 125, 0, 0, 0, 1635, 0,
	0, 74, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 950, 939, 0, 0,
	0, 0, 129, 931, 932, 0, 951, 952, 953, 961,
	962, 963, 959, 0, 0, 1650, 958, 966, 0, 954,
	0, 96, 0, 0, 0, 0, 934, 0, 0, 965,
	115, 0, 0, 0, 964, 0, 1645, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 956,
	933, 0, 0, 124, 0, 949, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 0, 957,
	955, 0, 945, 946, 947, 960, 0, 944, 942, 943,
	935, 936, 937, 938, 940, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1646,
	939, 0, 1661, 0, 0, 1660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1208, 0, 950, 958,
	966, 0, 931, 932, 0, 951, 952, 953, 961, 962,
	963, 0, 0, 0, 959, 0, 0, 964, 954, 0,
	0, 0, 1207, 0, 0, 934, 0, 0, 965, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 955, 0, 1641, 1642, 1643, 0, 0,
	1640, 1638, 1639, 1631, 1632, 1633, 1634, 1636, 1637, 0,
	0, 957, 0, 0, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 950, 0, 0, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 0, 0, 0, 959, 958, 966,
	0, 954, 0, 0, 0, 0, 0, 0, 934, 0,
	0, 965, 0, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 933, 0, 0, 0, 0, 949, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 957, 0, 0, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 931, 932, 0, 951, 952, 953, 961,
	962, 963, 0, 0, 0, 0, 0, 0, 0, 954,
	950, 958, 966, 0, 0, 0, 934, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 0, 956, 0, 948, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 957, 0, 0, 945, 946, 947, 960,
	939, 944, 942, 943, 935, 936, 937, 938, 940, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	966, 0, 0, 950, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 0, 0, 0, 964, 0, 959,
	0, 954, 0, 0, 0, 0, 0, 0, 934, 0,
	0, 965, 956, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 939, 0, 0, 0, 0, 1667, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 959, 0, 0,
	0, 958, 966, 0, 954, 0, 0, 0, 1662, 0,
	0, 934, 0, 0, 965, 0, 0, 0, 0, 964,
	0, 0, 1811, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 933, 0, 0, 0, 0,
	949, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 955, 0, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 939, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 0, 0, 0, 0, 0,
	0, 0, 954, 950, 958, 966, 0, 0, 0, 934,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 956, 0, 948,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 945,
	946, 947, 960, 939, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 966, 0, 0, 950, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 0, 0, 0,
	964, 0, 959, 0, 954, 0, 0, 0, 1620, 0,
	0, 934, 0, 0, 965, 956, 0, 0, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 945, 946, 947, 960, 0, 944, 942, 943,
	935, 936, 937, 938, 940, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 939, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 0, 0, 0, 0, 0,
	959, 0, 954, 0, 958, 966, 0, 0, 0, 934,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 956, 0, 948,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 955, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 0, 0, 0, 0,
	0, 931, 932, 939, 951, 952, 953, 961, 962, 963,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 958, 966, 934, 0, 950, 965, 0, 0,
	931, 932, 0, 951, 952, 953, 961, 962, 963, 0,
	964, 0, 959, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 934, 948, 956, 965, 0, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 948, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 957,
	0, 0, 945, 946, 947, 960, 0, 944, 942, 943,
	935, 936, 937, 938, 940, 941, 0, 958, 966, 0,
	0, 0, 0, 0, 950, 931, 932, 939, 951, 952,
	953, 961, 962, 963, 0, 964, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 958, 966, 934, 0,
	956, 965, 0, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 948, 956,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 0, 0, 0, 950,
	0, 0, 939, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 958, 966, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	0, 0, 0, 950, 0, 0, 1056, 1046, 1075, 1038,
	1066, 1065, 0, 0, 1040, 1039, 0, 0, 0, 959,
	1077, 1076, 0, 0, 0, 0, 0, 0, 0, 1056,
	1046, 1075, 1038, 1066, 1065, 0, 0, 1040, 1039, 0,
	0, 0, 0, 1077, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 1063, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 1063, 1062,
	0, 0, 0, 1060, 1058, 1059, 957, 0, 1061, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 0, 0, 0, 1060, 1058, 1059, 0,
	0, 0, 0, 1049, 1048, 1050, 1051, 1052, 1053, 1054,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 1048, 1050, 1051,
	1052, 1053, 1054, 0, 1074, 0, 0, 0, 0, 1042,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 505, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 1057, 574, 0, 0, 1267, 1265,
	1266, 1269, 1268, 0, 0, 0, 0, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 573, 0,
	0, 0, 0, 575, 0, 1055, 1044, 0, 581, 582,
	0, 0, 591, 0, 0, 1079, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 507, 576, 1041, 1055, 1044,
	1072, 1073, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 594, 0,
	1041, 0, 1045, 1072, 1073, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 0, 0,
	1078, 0, 578, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 0, 0, 580, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 588, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 589, 0, 0, 0, 593,
	0, 0, 0, 510, 0, 0, 0, 0, 586, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592,
}
var sqlPact = [...]int{

	29251, -1000, 10, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17821, -1000, -1000,
	21916, -1000, -1000, -1000, -1000, -1000, -1000, 21601, 794, 1177,
	-1000, -1000, -1000, -1000, -1000, 21916, 2478, 1405, 5205, 1164,
	21916, 17821, 1158, 1405, 23176, -1000, -1000, 23176, 1649, -1000,
	-1000, -1000, -1000, -1000, 27271, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 568, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 871, 650,
	116, 720, -1000, 994, -51, 14633, 31123, 466, 474, 466,
	466, 462, 667, 26956, 21916, 1520, 8, -1000, 270, 15587,
	29251, 528, 4, 18451, 21916, -1000, 18, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	314, 18, -1000, -1000, 21286, -1000, 1318, 1170, 1169, 20026,
	-1000, -1000, -1000, -1000, -1000, 282, -1000, 13323, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 926, -1000, 7, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10988, 280, 1312, 10988, 924, -1000,
	21916, -1000, -1000, -1000, 1090, -1000, -1000, -1000, -1000, -1000,
	390, 1733, 626, 274, 26641, -1000, 1011, -1000, 382, 562,
	-1000, -1000, 14306, 22, 20026, -1000, 10988, 10988, 26326, 21916,
	21916, 1188, 26011, -1000, 994, -1000, -1000, 25696, 25381, 25066,
	24751, 24436, -1000, 1035, 1519, 1519, 1519, 1559, 104, 97,
	116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1686, -1000, -1000, -1000, -1000, 1711, -1000, -1000, -1000, -1000,
	-1000, 1090, 17506, 693, 1536, 1311, -1000, 916, 1310, 1306,
	1304, 1299, 1296, -1000, 683, -1000, 1340, 476, -1000, 1293,
	869, 459, -1000, 1276, 1270, 1011, -1000, 1011, -1000, -1000,
	-1000, 526, 23176, 20971, 24121, 21916, 20656, -1, 21916, -1000,
	271, -1, 9627, 9627, -1000, -1000, 270, -1000, 8947, 1641,
	202, -173, 120, 372, -1000, 14949, 16864, -1000, 17506, 18451,
	4, -10, -1000, -1000, -1000, 4878, 598, 15906, 18, -1000,
	-1000, -1000, -1000, -1000, 20026, 21916, 21916, 637, 23806, 319,
	-1000, 10988, -13, -1000, -1000, 270, 17821, 1028, 30466, -1000,
	10988, 10988, 10988, 10988, 10988, 820, 309, -1000, 269, 257,
	6213, -1000, -1000, 1708, -1000, -1000, -1000, 103, -1000, -1000,
	10988, 18, -1000, -1000, -1000, -1000, 249, 1728, -1000, 424,
	-1000, -1000, -1000, 396, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1339, 247, 246, 245, -1000, -1000, -1000,
	-1000, 242, 231, 226, 225, 223, 221, 211, 206, 205,
	204, 201, 200, 199, 196, 195, 732, -1000, 417, -1000,
	-1000, 417, 417, -1000, 171, 171, 173, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 171, -1000, -1000, -1000, 392,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 192, 1629, 30942,
	17506, 30466, 17821, -1000, -1000, -1000, -1000, 21916, 10988, -1000,
	1627, 1011, -4, -1000, -1000, -1000, -1000, 1089, 1079, 523,
	805, 13979, 13652, 1475, -1000, -1000, -1000, 21, 5205, 113,
	-1000, 30466, 30466, 185, 1010, 401, 106, 23491, 401, 1007,
	-1000, 1035, 111, 1423, -1000, 111, 1421, 107, 1418, -1000,
	-132, -1000, 1417, -10, 1416, -1000, 949, 1134, 10308, 1096,
	10988, 116, -1000, -1000, 116, 116, 7234, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20341, -1000, -1000, 624,
	21916, 1328, 17821, 21916, 21916, 21916, 21916, 21916, -1000, -1000,
	571, 1327, 21916, 1075, -1000, -1000, 21916, 21916, 736, 555,
	-1000, -4, -1000, 23176, -1000, 839, 1415, 416, 954, 1414,
	705, 699, 1412, 21916, -1, 1625, 21916, 96, -1000, 29652,
	-1000, 96, -1000, -15, -1000, 30466, -1000, 1153, 1151, 15587,
	1314, 848, 848, 848, -1000, 184, 294, 372, 4210, 10988,
	-1000, 19711, 860, 41, 98, 1641, -1000, 21916, 367, -1000,
	21916, -1000, -1000, -1000, 1259, -19, -1000, -1000, 407, 77,
	1624, 77, 16226, -1000, 21916, -21, 30466, 2208, 18766, 524,
	-1000, 30919, 30942, 5205, 541, 10988, 10988, 10988, 10988, 10988,
	10988, 10988, 10988, 10988, 10988, 10988, 10988, 10988, 10988, 10988,
	10988, 10988, 10988, 10988, 10988, 10988, 10988, 1203, 10988, 521,
	10988, 10988, 10988, 10988, 1013, 852, 166, 905, -1000, 1681,
	1681, 1681, 30600, 30600, 181, 309, -1000, 10988, -1000, 9968,
	97, 28898, -2, -1000, -1000, -1000, 7574, 411, 30466, 18,
	5872, -1000, 1703, 882, 1354, 1224, 177, 94, 93, 91,
	10988, 10988, 11668, 11668, 10988, 12008, 10988, 10988, 6553, 10988,
	10988, 10988, 10988, 10988, 10988, -1000, 175, -1000, -1000, -1000,
	-1000, 1702, -1000, -1000, 1701, -1000, 540, 536, 1700, -51,
	-27, -1000, 1632, -1000, -1000, -1000, -1000, 75, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	173, 732, 171, 171, 171, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 392, -1000, -1000, 417, 417, 417, -1000, -1000,
	-29, -1000, 1257, -1000, 379, -31, 456, -4, 1011, 831,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1727, -6, -1000, -1000, -6, -1000, -1000,
	5205, -1000, -1000, 20026, -1000, -1000, 19081, 1615, 1410, -1000,
	745, -1000, 1608, 21916, 908, 1000, -1000, 532, 1404, -1000,
	-1000, 21916, 21916, -1000, 21916, -1000, 21916, 21916, 5205, 21916,
	21916, -1000, -1000, -1000, 30466, -1000, 363, -1000, -1000, 30466,
	659, 1173, -1000, 1173, -7, -1000, 29410, 1141, 21916, -1000,
	-1000, -1000, -1000, -1000, 21916, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 159, -1000, -1000, -1000, -1000, 21916, 21916,
	21916, -1000, -36, 817, -1000, 19396, 1515, 1511, 1501, 20026,
	1578, -51, 1256, 1574, -51, 1255, 515, 21916, 511, 510,
	20026, -1000, 170, -35, 407, 9627, 15587, 5205, -1000, 407,
	8947, -1000, 15587, 15587, 1294, 1143, 15587, -1000, -1000, -1000,
	-1000, 19711, 365, 372, 19711, -1000, 1699, 1095, -37, -1000,
	-1000, 21916, 167, -1000, 372, 90, 1201, 956, -1000, 594,
	1249, 21916, 675, 10988, 895, -1000, 15268, 422, 21916, 675,
	84, -1000, -1000, -1000, 358, 21916, -1000, -1000, 10988, -1000,
	-1000, 21916, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 381, 420, 420, 591, 591, 591, 591, 1633,
	3033, 3814, 2520, 3159, 3159, 3159, 2406, 346, 346, 3159,
	3159, 3159, 30600, 30571, 272, 10988, 10988, 503, 851, 166,
	272, 10988, 272, 272, 272, 272, -1000, 1139, -1000, -1000,
	-1000, -1000, 1248, 165, 12008, 12008, -1000, -1000, -1000, 6213,
	12348, -1000, -1000, -1000, -1000, 163, 10988, -1000, 28926, -206,
	-41, -1000, -1000, 10988, -52, -108, -1000, -1000, 639, -1000,
	10988, -1000, -33, 10988, 10988, 10988, 89, 86, -1000, 502,
	-1000, 501, 500, 499, -1000, 162, 824, 161, 160, 10988,
	-1000, -1000, -1000, 30358, 27907, 85, 1247, -124, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 83, 82, 30226, -124, 80,
	3851, -1000, 12008, 12008, 12008, 6213, 158, 73, 29523, -124,
	30118, 9287, 9287, 9287, 72, 30005, 10988, -124, 3796, 3737,
	3541, -42, -43, -58, 1698, -60, 71, 380, 378, 69,
	-1000, -1000, 30942, 306, 303, -1000, 1697, 402, 17506, 21916,
	-1000, 1166, -1000, -1000, 691, -1000, 729, -1000, 14633, -1000,
	-1000, 65, -62, -8, 30942, -1000, -1000, -1000, -1000, -1000,
	21916, 281, 21916, 21916, -1000, 156, 1111, 1109, -51, 21916,
	1725, -51, 21916, 1402, 1436, 337, 21916, -1000, 111, 111,
	-1000, 107, -1000, -1000, -10, 659, -1000, 10988, 1695, -1000,
	-1000, -1000, 7234, -1000, -1000, -1000, 21916, -169, -32, -1000,
	-1000, -1000, -1000, -1000, 367, 723, 21916, 21916, 21916, -1000,
	-1000, 991, 22861, 990, 30942, 155, 21916, 21916, 22546, 22231,
	21916, 812, -51, -1000, 154, -51, -1000, 153, 21916, 690,
	21916, 21916, 686, -51, -1000, 1223, -1000, -133, 1641, -1000,
	1223, -1000, -1000, 1294, -1000, 152, 10988, 15587, -1000, 293,
	-1000, -64, -1000, 19711, -1000, 292, -201, -1000, 351, -1000,
	372, 151, 21916, 19711, -1000, 402, 1246, 574, -1000, 587,
	-1000, -1000, 6893, 30466, -1000, 675, 1518, -76, -1000, -1000,
	-1000, 407, 16226, 15587, 8947, -77, 30466, -32, 10988, 272,
	272, 10988, 12008, 12008, -1000, 272, -1000, -1000, -1000, -1000,
	-1000, 1245, 149, 10988, 30942, 3676, 3095, -83, -1000, 8607,
	-11, -1000, 10988, -1000, 28869, -1000, -1000, 99, 1431, -1000,
	10988, 29873, 63, 8267, -1000, 29765, -39, -39, -1000, 1723,
	1034, 834, 829, 649, 1693, -1000, 16545, 408, 881, 28841,
	30919, 30942, -1000, 10988, -1000, -1000, 1243, 10988, -1000, 30919,
	30942, 12008, 12008, 12008, 12008, 12008, 12008, 12008, 12008, 12008,
	12008, 12008, 12008, 12008, 12008, 12008, 12008, 12008, 12008, 12008,
	1068, 12008, 1673, 1673, 1673, -17, 7927, -1000, 1323, 1243,
	10988, 10988, 30942, 62, 59, 58, -1000, 10988, -124, 10988,
	10988, 10988, -1000, -1000, -1000, 56, -1000, 1690, -1000, -1000,
	-1000, -1000, -1000, 451, 1688, 54, -1000, 891, -1000, -32,
	-1000, -1000, -1000, -1000, -1000, 1191, -1000, 19081, -1000, 148,
	21916, 13004, 147, 858, 10988, 145, 144, -1000, 143, -1000,
	-1000, 142, 21916, 1094, 337, 18136, -1000, 401, -1000, -1000,
	-1000, 897, 28813, -1000, 1550, 5205, 21916, -1000, -1000, -1000,
	495, 494, 1400, -1000, 989, -1000, 428, 798, -1000, 1392,
	950, 1391, 950, -1000, -36, 764, -1000, 10988, -1000, 10988,
	-1000, 492, -1000, -1000, 488, 53, 1217, 1558, -1000, 15587,
	1217, -1000, 21916, 30466, -1000, -173, -1000, 1679, -1000, -1000,
	1095, -1000, 4548, 19711, 21916, -106, -1000, -1000, 17506, 535,
	-1000, -59, -1000, -1000, 210, -51, 675, -1000, -71, -1000,
	338, 1583, 272, 1065, 224, 10988, 30942, 30705, -111, 10988,
	10988, -1000, -112, -1000, 10988, 291, 30466, -1000, -1000, -1000,
	30466, 10988, 1714, 10988, 49, 48, 44, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 40, -1000, -1000, 27586, 10988,
	39, -1000, 38, 36, 30466, 1323, 30466, -1000, -1000, 534,
	534, 671, 671, 671, 671, 1673, 2455, 1305, 3269, 1043,
	1043, 1043, 2472, 725, 725, 1043, 1043, 1043, 1239, 1061,
	139, 29391, 10988, -119, -1000, -1000, -1000, 30466, 30466, 35,
	-1000, -1000, -1000, -124, 244, 28473, 28445, -1000, 34, -1000,
	287, 285, -1000, 138, -1000, 1193, -1000, 2654, 13004, 136,
	-123, -1000, 308, 1530, 10988, -1000, -1000, 135, 21916, -1000,
	28416, 13004, 21916, 19081, 1603, 13004, 907, 1097, 337, 18136,
	-1000, 532, -1000, -1000, -1000, 1550, -1000, 21916, 21916, 21916,
	1389, -1000, -1000, 1105, 1115, 450, 21916, -1000, 21916, -1000,
	21916, 21916, 21916, -129, -135, 21916, 21916, -1000, 404, 10988,
	10988, 1641, 404, -136, 372, -1000, -1000, -1000, 1670, -1000,
	-140, -1000, -91, 17191, 1443, 21916, 1494, -1000, -1000, 134,
	10988, 10988, 30705, -141, -1000, 272, 272, -1000, 28388, -1000,
	30466, -1000, 29765, -1000, -1000, -1000, -1000, 755, -1000, 28360,
	-1000, -1000, -1000, -1000, 12008, 1237, 131, 30942, 28020, -1000,
	-1000, 10988, -1000, -1000, -1000, -1000, -1000, 1720, 766, -1000,
	21916, -1000, 5205, 21916, 1226, 984, -1000, -1000, 1100, 130,
	12008, 21916, -142, 13004, 797, 13004, 1550, 18, 5205, 1550,
	27992, 5872, -147, -1000, -151, -157, 33, -51, -158, 21916,
	-1000, 337, 18136, -1000, 1436, -1000, -1000, -1000, -1000, 21916,
	981, -1000, 979, 10988, -1000, 30942, 950, 950, -1000, 487,
	484, 481, 479, -1000, -1000, -1000, 21916, 30466, -124, -1000,
	-1000, 19711, 273, -1000, -1000, 129, 18, 560, -159, 21916,
	-1000, -1000, 5532, 272, 272, -1000, -1000, 32, 881, 1557,
	-1000, 3302, 12008, 30942, -163, -1000, 27963, -167, -1000, 328,
	21916, 702, -1000, -1000, 21916, 988, -1000, -1000, 10988, 29391,
	128, 797, -171, 1191, 124, -1000, -1000, -1000, -1000, -1000,
	-1000, 1530, -33, -1000, -1000, 718, 1191, -1000, 797, 123,
	18136, -1000, 1094, -1000, -1000, -1000, 30466, 1527, -1000, -1000,
	21916, 21916, 122, 119, -107, -1000, 1598, -1000, -1000, 10988,
	634, -1000, 407, -1000, -1000, 703, 10988, 3302, -176, -1000,
	-1000, 1720, -1000, -1000, 1716, 110, -1000, -1000, 1387, 27935,
	1044, 21916, 1191, 797, -1000, 21916, 1550, 31, 21916, -1000,
	1191, 13004, -1000, 1097, 431, 5205, -1000, -1000, 10988, 10988,
	21916, 109, -39, 16226, -1000, 30, 11328, 11328, -124, -1000,
	-1000, -1000, 21916, 1359, -1000, 901, 819, 25, -1000, 1191,
	-177, -1000, -1000, 106, -1000, -182, -1000, -1000, 10988, -1000,
	-183, -188, -1000, -1000, 24, -165, -1000, -1000, -1000, 12677,
	902, 661, 29278, -1000, -189, 21916, -1000, 906, 903, 678,
	-1000, -1000, -1000, -1000, -1000, -1000, 1044, 797, 30466, -1000,
	-1000, 1714, -1000, 1638, -1000, -1000, -1000, -1000, -1000, 914,
	-1000, -1000, 1454, -1000, 438, 925, 925, 901, 1191, 10648,
	-1000, -1000, -1000, -1000, 1655, -1000, -1000, 1063, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2112, 2107, 1344, 1568, 2104, 2103, 2098, 2094, 2090,
	2089, 2087, 2084, 2082, 2080, 2079, 2078, 2077, 2063, 2061,
	2059, 2058, 2056, 2054, 2052, 2047, 2045, 1549, 2043, 2038,
	2035, 2032, 2031, 2029, 1539, 2028, 1478, 2025, 2024, 2023,
	2022, 2020, 1454, 1448, 2018, 78, 108, 1423, 2017, 2016,
	1402, 2015, 2014, 2011, 2010, 2009, 2008, 366, 2007, 2005,
	1997, 1995, 1992, 1990, 1988, 132, 152, 1986, 1396, 1983,
	1980, 1979, 1975, 1973, 1972, 1971, 1970, 1968, 1964, 1962,
	1961, 1958, 1957, 1955, 1954, 1951, 1950, 151, 1947, 1942,
	1375, 1342, 1925, 1924, 15, 1923, 80, 1917, 27, 174,
	2156, 156, 1916, 1914, 1913, 1911, 24, 81, 84, 1907,
	63, 1901, 1900, 37, 29, 17, 16, 1898, 88, 1894,
	1893, 1228, 22, 1892, 1891, 131, 1890, 20, 21, 418,
	146, 144, 97, 100, 1889, 1888, 1887, 1886, 40, 1883,
	2, 1882, 1881, 8, 57, 14, 1879, 46, 86, 1878,
	1876, 122, 1870, 73, 98, 1337, 140, 111, 28, 1868,
	71, 12, 67, 1867, 1865, 136, 31, 1864, 42, 79,
	133, 1863, 33, 150, 119, 72, 114, 112, 1862, 1860,
	1859, 90, 1857, 105, 55, 1856, 1853, 49, 1852, 126,
	128, 1851, 1850, 85, 1847, 115, 1846, 1844, 149, 143,
	102, 6, 43, 54, 11, 1333, 1331, 107, 70, 47,
	36, 1843, 1960, 870, 683, 30, 95, 60, 44, 93,
	53, 64, 138, 25, 1842, 1841, 113, 1840, 1839, 1838,
	1836, 1828, 91, 1827, 1826, 76, 137, 83, 26, 82,
	92, 35, 50, 147, 109, 139, 101, 1825, 77, 118,
	1819, 117, 1817, 1816, 1678, 104, 1812, 1811, 1809, 1604,
	1439, 1061, 51, 1805, 1803, 1034, 964, 1802, 1801, 58,
	1798, 106, 103, 1797, 127, 145, 18, 1796, 110, 66,
	87, 1793, 89, 45, 0, 227, 186, 1790, 99, 52,
	1789, 1788, 1787, 1786, 23, 1, 9, 4, 7, 5,
	39, 32, 1785, 1781, 123, 120, 74, 1777, 148, 1772,
	1771, 1765, 34, 1762, 19, 1755, 13, 1754, 1751, 10,
	3, 1750, 1746, 129, 1745, 94, 1742, 1575, 1740, 141,
	1737, 1736, 1451, 69, 96,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 7, 8, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 108,
	108, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 105, 105, 110, 110,
	110, 112, 112, 109, 109, 104, 104, 20, 55, 282,
	282, 283, 283, 93, 93, 97, 97, 94, 95, 95,
	96, 96, 26, 26, 26, 22, 22, 23, 24, 27,
	27, 27, 27, 27, 27, 34, 35, 35, 35, 35,
	35, 36, 36, 36, 36, 36, 41, 41, 39, 39,
	38, 38, 37, 37, 40, 40, 157, 157, 156, 156,
	159, 159, 42, 42, 45, 45, 45, 45, 45, 46,
	46, 46, 46, 46, 46, 46, 46, 250, 250, 249,
	44, 224, 224, 47, 182, 182, 48, 48, 48, 48,
	49, 56, 323, 323, 323, 327, 327, 328, 328, 329,
	329, 329, 329, 329, 329, 329, 325, 325, 53, 53,
	92, 60, 60, 60, 60, 60, 60, 62, 64, 61,
	61, 61, 63, 63, 65, 65, 65, 65, 66, 66,
	66, 66, 67, 67, 137, 137, 275, 274, 274, 280,
	280, 280, 135, 135, 135, 135, 135, 136, 136, 136,
	273, 273, 273, 273, 281, 281, 281, 281, 281, 281,
	279, 279, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	80, 80, 87, 87, 87, 87, 87, 87, 69, 74,
	74, 74, 70, 75, 76, 77, 77, 77, 71, 71,
	79, 79, 79, 78, 84, 84, 84, 84, 81, 81,
	81, 82, 82, 85, 85, 85, 72, 73, 86, 83,
	83, 83, 43, 324, 324, 326, 326, 51, 30, 30,
	31, 31, 138, 138, 139, 139, 203, 203, 203, 203,
	140, 140, 111, 111, 111, 202, 292, 292, 293, 293,
	293, 293, 293, 293, 294, 294, 294, 294, 294, 294,
	294, 290, 290, 291, 288, 288, 289, 289, 289, 289,
	330, 330, 201, 201, 143, 143, 297, 297, 297, 297,
	295, 295, 295, 295, 295, 298, 296, 299, 299, 299,
	299, 299, 236, 236, 236, 89, 32, 117, 117, 33,
	29, 29, 186, 186, 147, 147, 241, 241, 241, 128,
	128, 106, 106, 106, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 187, 187, 188, 188, 52,
	54, 59, 88, 88, 88, 21, 21, 25, 25, 58,
	332, 332, 124, 124, 124, 124, 125, 125, 198, 198,
	199, 199, 200, 200, 200, 119, 118, 120, 120, 28,
	28, 113, 113, 114, 114, 115, 115, 116, 116, 333,
	333, 50, 50, 91, 131, 131, 195, 195, 195, 197,
	197, 196, 196, 196, 172, 172, 172, 90, 152, 152,
	161, 161, 162, 162, 247, 163, 163, 57, 57, 100,
	100, 98, 98, 98, 98, 98, 98, 99, 99, 101,
	101, 101, 101, 101, 101, 101, 103, 305, 305, 305,
	308, 308, 304, 306, 306, 307, 307, 331, 331, 173,
	173, 173, 142, 141, 141, 145, 145, 144, 146, 146,
	240, 240, 240, 170, 170, 170, 170, 189, 189, 190,
	190, 191, 191, 192, 192, 192, 193, 193, 194, 194,
	169, 169, 220, 220, 102, 102, 151, 151, 153, 153,
	210, 210, 210, 211, 211, 209, 209, 209, 209, 242,
	242, 242, 242, 242, 242, 242, 321, 321, 321, 322,
	322, 239, 239, 243, 243, 243, 243, 243, 243, 237,
	237, 237, 237, 238, 238, 248, 248, 176, 176, 176,
	176, 174, 174, 175, 175, 244, 244, 244, 244, 171,
	171, 245, 245, 245, 204, 204, 251, 251, 251, 269,
	269, 150, 150, 150, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 253, 253, 253, 253, 255, 255, 255, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 268, 268, 268, 268,
	268, 256, 256, 263, 263, 264, 264, 265, 266, 257,
	257, 258, 258, 259, 260, 267, 267, 267, 267, 271,
	271, 261, 261, 261, 261, 261, 262, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 184, 184, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 214, 214, 214, 214, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	300, 300, 300, 300, 300, 300, 300, 302, 302, 303,
	303, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	309, 309, 310, 310, 312, 312, 313, 313, 314, 315,
	315, 315, 316, 317, 317, 311, 311, 318, 318, 318,
	319, 319, 320, 320, 320, 320, 320, 226, 226, 226,
	227, 227, 228, 234, 234, 234, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 126, 126, 126, 126, 126, 158, 158, 223,
	223, 221, 221, 221, 225, 225, 177, 177, 270, 270,
	270, 270, 270, 270, 270, 178, 178, 178, 185, 179,
	179, 180, 180, 180, 180, 180, 180, 217, 218, 181,
	181, 181, 219, 219, 229, 233, 233, 232, 231, 231,
	230, 230, 207, 207, 208, 208, 206, 205, 166, 166,
	165, 165, 164, 164, 334, 334, 235, 235, 167, 167,
	168, 160, 160, 246, 246, 246, 246, 154, 154, 133,
	133, 155, 155, 129, 129, 132, 132, 130, 130, 130,
	130, 148, 148, 149, 149, 127, 127, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 272, 272,
	272, 222, 121, 121, 121, 122, 122, 123, 123, 277,
	277, 277, 278, 278, 278, 278, 276, 276, 276, 276,
	276, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 6, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 4, 6, 4, 6,
	4, 6, 3, 5, 3, 5, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 3, 3, 0, 2, 3, 2, 3,
	6, 6, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 1, 1, 1, 1, 1, 3, 4, 5, 3,
	2, 6, 3, 4, 3, 3, 3, 3, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 1, 1, 1, 1, 1, 2, 3, 4,
	4, 4, 4, 2, 4, 4, 4, 4, 4, 4,
	2, 3, 3, 2, 4, 5, 4, 5, 2, 3,
	3, 4, 2, 4, 3, 3, 4, 4, 2, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 4, 3, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	3, 2, 1, 1, 1, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 1, 4, 4, 4, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -44,
	-55, -54, -56, -59, -57, -52, -53, -60, -68, -88,
	-89, -90, -91, -5, -6, -7, -8, 34, -23, -24,
	67, -28, -29, -30, -31, -32, -33, 89, -307, 93,
	-37, -38, -39, -41, -40, 104, 106, 124, 130, 212,
	218, 238, 240, 242, 249, -98, -100, 236, 237, -61,
	-62, -63, -64, -92, 260, -69, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -86, -21, -25, -58, 300, -9, -10, -13,
	-12, -11, -16, -18, -15, -17, -19, -14, 47, 69,
	-305, 97, -101, -99, 351, 309, 263, 35, 272, 61,
	100, 244, 23, 325, 332, 253, -102, -103, 317, 281,
	354, -323, -155, 281, 82, -130, -121, 344, 4, -284,
	-286, 20, 21, 23, 33, 34, 35, 40, 44, 47,
	48, 55, 60, 61, 62, 64, 66, 67, 68, 71,
	72, 80, 81, 83, 85, 89, 91, 93, 96, 97,
	99, 104, 105, 106, 112, 113, 118, 120, 125, 130,
	131, 132, 133, 140, 143, 145, 138, 155, 156, 157,
	159, 160, 161, 164, 163, 168, 171, 174, 176, 177,
	178, 181, 179, 183, 184, 186, 185, 191, 193, 194,
	196, 199, 202, 205, 208, 209, 210, 211, 212, 214,
	216, 218, 220, 221, 222, 223, 224, 226, 227, 229,
	230, 231, 232, 233, 236, 234, 235, 237, 238, 239,
	240, 242, 244, 245, 247, 261, 262, 273, 249, 250,
	251, 252, 256, 254, 257, 258, 260, 263, 265, 268,
	271, 272, 274, 277, 275, 270, 280, 282, 283, 284,
	285, 286, 287, 288, 295, 296, 300, 301, 302, 303,
	306, 307, 308, 309, 311, 314, 315, 316, 321, 326,
	327, 328, 329, 330, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 84, 86, 87,
	103, 107, 108, 114, 115, 116, 126, 128, 134, 135,
	144, 146, 147, 148, 149, 150, 152, 166, 180, 190,
	192, 203, 207, 215, 217, 225, 246, 255, 266, 267,
	276, 278, 290, 291, 292, 297, 298, 313, 317, 318,
	-129, -121, 82, -121, 218, 22, 91, 143, 308, 307,
	22, 214, 254, 283, 285, -121, -46, 351, -45, -4,
	-27, -36, -47, -42, -43, -68, -57, -34, -50, -90,
	-91, -327, 22, -328, -329, 69, 97, 124, 253, 143,
	91, 307, -276, 4, -284, -286, -285, -287, 58, 70,
	123, 142, 136, 154, 158, 167, 169, 182, 204, 206,
	243, 264, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 69, 73,
	74, 76, 75, 77, 78, 79, 88, 90, 92, 94,
	95, 98, 100, 102, 109, 110, 111, 119, 121, 122,
	124, 127, 129, 137, 139, 141, 151, 153, 162, 165,
	170, 172, 173, 187, 188, 189, 195, 197, 198, 200,
	201, 213, 219, 228, 241, 253, 259, 269, 279, 281,
	289, 293, 294, 299, 304, 305, 310, 312, 319, 320,
	322, 323, 324, 325, 156, -121, -323, 156, -327, -125,
	249, -121, -125, -87, 257, 4, 22, 82, 181, 259,
	290, 171, 55, 246, 257, -66, 296, -65, 290, -275,
	-67, -156, 181, -121, -331, 281, 156, 222, 281, 310,
	320, -186, 82, 305, -99, -101, -100, 320, 281, 139,
	82, 310, -144, -145, 304, 151, 102, 201, -98, -100,
	-305, -280, -273, -236, 9, 299, 109, 197, -279, 8,
	343, -272, -278, 5, 7, 342, 4, -284, -286, -285,
	-87, 257, 34, 55, 22, 60, 83, 125, 139, 140,
	160, 65, 66, 221, 171, 157, 295, 161, 258, 282,
	296, 69, 311, 286, 105, -332, 296, 296, -332, -332,
	-124, 296, 293, 281, 139, 82, 320, -308, 226, -304,
	-121, -308, -141, -142, 22, 94, 355, -168, 351, -242,
	349, -244, -129, -100, -243, 351, 198, -3, 293, 355,
	-155, -148, -121, -206, -205, 353, 122, 351, -165, -166,
	-205, -206, -121, 22, 122, 153, 153, -245, -244, -129,
	-182, 351, -250, -249, -278, 317, 197, 355, -212, -214,
	342, 343, 337, 187, 331, -226, -216, -229, 103, 246,
	351, -129, -215, 356, 9, -302, -100, 29, -227, -228,
	49, -121, 7, 8, 5, 6, -127, -253, -222, -262,
	299, 109, 189, -300, -301, 4, -284, -277, -254, -264,
	-258, -261, 152, 58, 74, 75, 78, 76, 79, 259,
	310, 50, 28, 107, 108, 207, 215, 278, 297, 298,
	134, 190, 135, 56, 126, 166, 96, 37, 39, 41,
	42, 51, 52, 84, 86, 87, 114, 115, 116, 144,
	146, 147, 148, 149, 150, 192, 225, 266, 276, 291,
	292, 318, -285, -265, -266, -259, -260, -267, -224, 351,
	122, -212, 197, -121, -87, 330, 2, 261, 351, -66,
	53, 296, -199, -200, -118, -119, -120, 155, 220, 224,
	330, 293, 336, 122, -280, -137, 88, -159, 353, -171,
	-244, -212, -212, -156, 134, -121, -156, 139, -121, 134,
	-144, -145, -157, 134, -156, -157, 134, -133, 134, -132,
	-129, -121, 134, -148, 134, -170, -189, -190, 170, 111,
	195, -173, 22, 94, -173, -173, 44, 352, 352, 8,
	7, 7, -87, -282, -279, 9, 261, 221, 258, 55,
	122, -324, 197, 122, 122, 122, 122, 122, 221, 258,
	119, 295, 122, 155, 220, 273, 281, 320, 122, 122,
	-198, -199, -198, 293, -125, -244, 134, -129, -132, 134,
	-121, -244, 134, 355, -308, -149, 351, -160, -246, -212,
	344, -160, -168, -167, -235, -212, 88, 70, -176, 158,
	182, 123, 167, 243, 142, 7, -46, -209, 356, 351,
	344, -239, 332, -100, -243, -242, -129, 351, -282, -130,
	355, -276, 344, 274, 352, -154, -129, -166, -245, -131,
	-129, -131, 260, -121, 30, -158, -212, 352, 355, -323,
	-329, 10, 11, 57, 33, 342, 343, 344, 345, 117,
	346, 347, 340, 341, 339, 334, 335, 336, 63, 175,
	248, 13, 14, 15, 26, 200, 169, 331, 136, 264,
	337, 16, 17, 18, 154, 36, 137, -126, -134, -212,
	-212, -212, -212, -212, 206, -164, -207, 349, -100, 351,
	-100, -212, -158, 7, -100, -221, 349, -230, -212, -165,
	351, 5, 351, 5, -309, 326, 119, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 217, -271, 321, -271, -271,
	-255, 351, -255, -256, 351, -255, 327, 332, 351, 30,
	-223, -251, -252, -254, -263, -257, -261, -262, 40, 46,
	45, 288, 180, 255, 267, 313, 38, 196, 145, 144,
	146, 147, 148, 149, 150, 266, 37, 225, 115, 116,
	114, 96, 87, 86, 192, 42, 41, -265, -266, -259,
	-260, 84, 291, 292, 152, 39, 52, 51, 318, 276,
	-283, -282, -323, -65, -275, -158, 30, -199, 355, 168,
	-136, 174, 186, 131, 198, 328, -281, 5, 4, -222,
	-236, 88, 171, -262, -274, 88, -280, -274, 88, 72,
	353, -276, -110, 355, 48, 239, 351, -143, 187, -117,
	-306, 325, -143, 351, -122, 134, -121, -306, 187, -170,
	-110, 355, 103, -110, 103, -110, 355, 103, 356, 103,
	103, -190, -189, -191, -212, 22, -194, 113, 183, -212,
	-214, -99, -99, -99, -146, -240, -212, 219, 139, -156,
	22, 262, -275, -326, 119, -323, -275, -275, -275, -275,
	-275, 257, -46, 119, -121, 168, -275, -275, 281, 139,
	281, -125, -108, 234, -107, 21, 23, 97, 315, 103,
	270, 287, 250, 270, 287, 250, 234, 103, 234, 234,
	103, -304, 30, -148, -151, 355, 122, 30, 4, -151,
	355, 352, 158, 158, -242, -176, 158, -174, 204, -174,
	-174, -321, 351, 350, -239, -276, 349, 357, -158, -238,
	-237, 30, -121, 202, 352, -129, -248, 333, -121, 122,
	352, 355, -204, 323, -195, -57, 351, 88, 30, -195,
	-161, -162, -247, -163, -129, 351, -121, 352, 355, -46,
	-249, 293, -269, -251, -268, 230, 231, 229, 233, 232,
	-251, -276, 290, -212, -212, -212, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, 169, 136, 264, 36, 137,
	-212, 293, -212, -212, -212, -212, 179, 187, 189, 299,
	109, 306, 94, 193, -334, 279, 32, -219, -100, 351,
	-234, 27, 269, 22, -226, 246, 351, -207, -212, -208,
	-158, 352, 352, 355, -158, -225, 350, -221, -233, -232,
	322, 352, -158, 319, 22, 94, 344, 7, -183, 329,
	178, 85, 132, 177, -184, 252, -310, 112, 127, 351,
	352, 352, 352, -212, -212, -177, -270, -158, 4, 329,
	178, 85, 132, 177, 252, -177, -178, -212, -158, -179,
	-213, -214, 342, 343, 337, 351, 246, -180, -212, -158,
	-212, 43, 165, 294, -181, -212, 122, -158, -212, -212,
	-212, -158, -158, -158, 351, 7, 7, 290, 290, 7,
	-45, 352, 355, -150, 29, -183, 351, -248, 355, 122,
	352, 296, -200, -135, 224, 268, 235, 256, 355, -276,
	-244, -138, -148, -139, -121, -203, -202, -290, -291, -288,
	139, 305, 110, 65, -289, 54, 219, 121, 30, 103,
	211, 30, 197, 187, -113, 284, 103, -156, -157, -157,
	-132, -133, -276, -121, -148, -192, -272, 351, 343, -193,
	246, 247, 355, -106, 31, 92, 159, -129, -325, -121,
	257, -46, -129, -132, -129, 355, 293, -187, 65, 59,
	-202, 134, 59, -288, -121, 305, -187, 65, -187, 65,
	65, -244, 33, -57, 122, 33, -57, 122, 293, -132,
	293, 293, -244, 351, 352, -204, -246, -153, -242, -276,
	-204, -235, -242, -242, -175, 312, 197, 158, -242, -237,
	352, -322, 7, -239, -238, 7, -211, -210, 120, 185,
	352, -121, 351, -239, 352, -93, 133, 193, 274, 122,
	-129, -172, 241, -212, -172, -197, 197, -154, 317, -121,
	-172, -152, 355, 122, 336, -154, -212, -325, 330, -212,
	-212, 293, -334, 279, -219, -212, 179, 189, 299, 109,
	306, 94, 193, 122, 351, -213, -213, -158, -216, 351,
	-158, 350, 359, 352, -212, 350, 350, 355, -231, -232,
	98, -212, -145, 355, -144, -212, -158, -158, 352, 352,
	293, 293, 293, 293, 351, -315, 205, 351, 351, -212,
	30, 355, 352, 122, 352, 352, -185, 213, 352, 10,
	11, 342, 343, 344, 345, 117, 346, 347, 340, 341,
	339, 334, 335, 336, 63, 175, 248, 13, 14, 15,
	154, 137, -213, -213, -213, -158, 351, 352, -217, -218,
	122, 119, 30, -181, -181, -181, 352, 122, -158, 355,
	355, 355, 352, 352, 352, 7, 352, 355, 352, 330,
	330, 352, -251, 349, 349, 7, -96, 325, -282, -325,
	-118, 303, 62, 224, -280, 352, 352, 355, -251, -122,
	139, 351, -122, -121, 351, 159, 159, -57, -156, 5,
	-57, -129, 103, -114, 99, -333, 336, -121, -110, -110,
	-110, -193, -212, -240, -129, 356, 355, -248, -107, -129,
	-121, -121, 187, -202, 134, -112, 187, -121, -121, 134,
	-121, 134, -121, -121, -108, 234, -57, 351, -57, 351,
	-121, 234, -121, -129, 234, -45, -169, 127, -248, 355,
	-169, -175, 351, -212, -242, 350, 352, 355, -238, 350,
	355, 358, 336, -239, 351, -148, -237, -96, 122, 280,
	274, -160, 188, -172, 64, 352, -204, -162, -153, -235,
	352, -212, -212, -213, -213, 122, 351, -212, -223, 26,
	26, 352, -158, 352, 355, -208, -212, 352, -221, 100,
	-212, 289, 352, 319, -145, -145, -145, 5, 178, 132,
	177, -184, 177, -184, -184, 7, -316, -121, 351, 323,
	-144, 352, -269, -251, -212, -217, -212, -269, -251, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, 94, 187,
	193, -213, 355, -158, 352, -218, -217, -212, -212, -251,
	352, 352, 352, -158, -212, -212, -212, 352, 7, 350,
	7, 7, 352, 199, -140, 138, -203, -292, 351, -122,
	-147, -241, -121, -303, 351, -300, -301, -127, 351, -289,
	-212, 351, 351, 351, -143, 351, -121, -115, 164, -333,
	-279, -306, 198, 352, -106, -276, -121, 293, 293, 103,
	187, 314, -105, 97, 260, -188, 103, -110, 103, -110,
	293, -187, 65, -158, -158, 293, 293, 352, -220, 129,
	44, -242, -220, -148, -209, 7, -210, -276, 349, -238,
	-148, 352, -283, 290, -196, 351, 197, -57, -172, 336,
	26, 26, -212, -223, 352, -212, -212, 352, -212, 350,
	-212, 5, -212, 352, 352, 352, 352, -317, -121, -212,
	352, 352, 352, -218, 122, 94, 193, 351, -212, 352,
	352, 355, 352, 352, 352, 350, 350, 351, 137, -293,
	65, -294, 57, 110, 69, 187, 189, 305, 219, 54,
	88, 228, -147, 351, 352, 355, -128, -165, 57, -128,
	-212, 351, -148, 352, -147, -148, -138, 30, -147, 197,
	-116, 163, -333, -279, -113, -106, -121, -121, -202, 103,
	187, 88, 187, 88, 81, 301, -121, -121, -129, -121,
	-121, 352, 352, -121, -129, -312, 324, -212, -158, -312,
	352, -239, 7, 352, -215, -127, -121, 95, -148, 65,
	-168, -100, 351, -212, -212, 352, 352, -145, -311, 210,
	352, -213, 122, 351, -223, 352, -212, -95, -94, 5,
	208, -121, -276, -121, 110, 134, 189, 159, 351, -213,
	-129, 352, -147, -201, -330, 68, 277, -241, -106, -276,
	-106, 352, -158, 352, 352, 352, 352, -57, 352, -129,
	-333, -279, -114, -202, 189, 189, -212, -251, -110, -110,
	293, 293, 293, 293, -313, -314, -121, -238, 350, 351,
	307, 188, 352, -121, 352, -145, 44, -213, -223, 352,
	352, 355, 352, -97, 336, -121, -294, -122, 187, -212,
	-123, 351, -201, 352, -140, 351, -128, -145, 228, -140,
	-201, 351, -279, -115, -109, 57, -121, -121, 351, 351,
	355, 30, -158, 260, -204, -318, 223, 247, -158, 352,
	-94, 5, 351, 103, 352, -297, 176, -121, -140, -201,
	-148, -106, 352, -129, -140, -147, -116, -104, 312, -276,
	-158, -158, -314, -316, -145, -161, 352, -319, -320, 36,
	302, 72, -212, -319, -148, 110, -295, -298, -296, 197,
	123, 209, 265, 352, -140, 352, -143, 352, -212, 352,
	352, 352, -204, -320, 216, 118, 246, 216, 118, 352,
	-121, -296, 197, -298, 197, 307, 91, -297, -201, 26,
	-111, 48, 239, -299, 184, 239, 48, 260, -299, -295,
	-140, -320, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 34, 35, 36, 37, 0, 105, 106,
	0, 109, 110, 111, 112, 113, 114, 0, 0, 0,
	121, 122, 123, 124, 125, 0, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 477, -2, 0, 0, 191,
	192, 193, 194, 195, 0, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 412, 413, 414, 508, 38, 39, 40,
	41, 42, 45, 46, 47, 48, 43, 44, 0, 383,
	505, 0, -2, 516, 0, 0, 0, 421, 0, 421,
	421, 425, 0, 0, 0, 514, 491, 492, 0, 0,
	-2, 0, 172, 0, 1053, 981, 987, 988, 1012, 1013,
	1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	0, 983, 1053, 166, 1112, 168, 0, 0, 0, 0,
	116, 117, 118, 119, 120, 165, 142, 0, 149, 150,
	151, 152, 153, 154, 155, 156, 144, 145, 146, 147,
	148, 0, 175, 176, 177, 179, 180, 181, 182, 183,
	184, 185, 302, 1026, 1027, 1028, 1029, 1030, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 0, 162, 0, 0, 0, 411,
	1139, 427, 409, 188, 0, 262, 263, 264, 265, 266,
	0, -2, 1041, 1227, 1145, 200, 1166, 208, 1233, 0,
	211, 216, -2, 138, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 382, -2, 487, 488, 0, 0, 0,
	0, 0, -2, 0, 511, 511, 511, 0, 0, 488,
	0, 190, 219, 220, 221, 230, 231, 232, 233, 372,
	0, 374, 240, 241, 1008, 0, 1022, 1023, 1024, 1025,
	260, 0, 0, 0, 263, 0, 273, 304, 0, 0,
	0, 0, 0, 280, 0, 283, 0, 0, 288, 292,
	0, 0, 298, 0, 0, 429, 420, 429, 417, 418,
	419, 422, 0, 0, 0, 0, 0, 497, 1118, 500,
	994, 498, 0, 0, 513, 512, 0, 544, 0, 496,
	506, 558, 595, 572, 563, 0, 0, 2, 0, 0,
	173, 174, 991, 989, 990, 0, 0, 0, 984, 960,
	958, 959, 167, 169, 0, 0, 0, 0, 601, 595,
	163, 0, 0, 157, 159, 1239, 0, 0, 307, 703,
	0, 0, 0, 0, 0, 0, 795, 797, 1201, 1227,
	0, 799, 800, 0, 802, 804, 805, 0, 808, 809,
	951, 983, 997, 998, 999, 1000, 0, 0, 1003, 0,
	1005, 1006, 1007, 851, 818, -2, -2, 995, 631, 632,
	633, 634, -2, 1241, 822, 824, 826, 828, 829, 830,
	831, 0, 1185, 1202, 1203, 1223, 1224, 1232, 1236, 1237,
	1209, 1220, 1210, 1197, 1207, 1218, 1059, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1021, 665, 666, 671, 672, 674, 0, 0,
	0, 410, 0, 426, 189, 267, 196, 0, 0, 199,
	1196, 1166, 202, 430, 432, 433, 434, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 139, 0, 80,
	599, 107, 108, 355, 1209, -2, 355, 1016, 504, 1209,
	-2, 0, 80, 1209, 136, 80, 1209, 80, 1209, 979,
	986, 132, 1209, 134, 1209, 483, 525, 526, 0, 0,
	0, 0, 509, 510, 0, 0, 0, 479, 480, 373,
	1010, 1009, 261, 268, 89, 90, 0, 281, 289, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 282, 290,
	506, 0, 0, 0, 294, 295, 0, 0, 0, 0,
	415, 428, 416, 0, 424, 0, 1209, 595, 0, 1209,
	0, 0, 1209, 0, 499, 0, 0, 547, 971, 975,
	976, 547, 545, 0, 968, 966, 967, 0, 0, 0,
	0, 592, 592, 592, 590, 566, 0, 572, 0, 0,
	596, 584, 0, -2, 563, 0, 597, 0, 586, 982,
	0, 956, 957, 102, 0, 0, 977, 961, 605, 0,
	454, 0, 0, 602, 0, 0, 907, 506, 0, 0,
	178, 0, 0, 0, 0, 886, 887, 888, 889, 890,
	891, 894, 895, 892, 893, 896, 897, 898, 0, 0,
	0, 899, 900, 901, 0, 0, 903, 0, 905, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 902, 708,
	709, 710, 732, 733, 0, 796, 962, 955, 798, 0,
	-2, 907, 0, 801, 806, 807, 0, 0, 950, -2,
	0, 1002, 0, 700, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 668, 679, 676, 675,
	652, 0, 651, 649, 0, 653, 0, 0, 0, 506,
	0, 909, 613, 614, 615, 616, 617, 700, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	662, 0, 637, 637, 637, 654, 655, 663, 664, 669,
	670, 681, 682, 684, 686, 680, 680, 680, 677, 678,
	586, 91, 0, 197, 0, 0, 0, 203, 0, 0,
	435, 227, 228, 229, 437, 438, 209, 234, 235, 236,
	237, 238, 239, 0, 204, 206, 217, 205, 207, 210,
	0, 140, 375, 0, 78, 79, 313, 0, 0, 376,
	0, 503, 0, 0, 0, 1209, 1015, 442, 0, 486,
	126, 0, 0, 128, 0, 130, 0, 0, 0, 0,
	0, 523, 524, 527, 531, 532, 535, 538, 539, 529,
	703, 493, 494, 495, 517, 518, 393, 0, 0, 269,
	270, 271, 272, 274, 0, 303, 275, 276, 277, 278,
	279, 284, 286, 506, 291, 293, 296, 297, 0, 0,
	0, 423, 49, 406, 59, 0, 406, 406, 0, 0,
	0, 0, 55, 0, 0, 57, 0, 0, 0, 0,
	0, 501, 0, 0, 605, 0, 0, 0, 974, 605,
	0, 970, 0, 0, 0, 0, 0, 587, 591, 588,
	589, 0, 0, 572, 584, 555, 0, 0, 0, 562,
	583, 0, 582, 571, -2, 0, 94, 0, 992, 0,
	0, 0, 466, 0, 466, 456, 0, 0, 0, 466,
	469, 470, 472, 473, 0, 0, 603, 164, 0, 143,
	158, 0, 704, 609, 610, 656, 657, 658, 659, 660,
	705, 706, 0, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, -2, -2, -2, 724, 725, 726, -2,
	-2, -2, 730, 731, -2, 904, 906, 0, 965, 0,
	-2, 0, -2, -2, -2, -2, 744, 0, 746, 749,
	751, 753, 0, 0, 0, 0, 964, 763, 942, 0,
	0, 883, 884, 885, 748, 0, 0, 963, 954, 0,
	0, -2, 803, 0, 0, 0, 913, 914, 949, 945,
	0, 810, 516, 0, 0, 0, 0, 0, 1011, 687,
	688, 689, 690, 691, 692, 701, 861, 0, 0, 0,
	823, 825, 827, 0, 0, 0, 0, 917, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 907, 927, 0,
	0, 766, 0, 0, 0, 0, 1227, 0, 907, 935,
	0, 0, 0, 0, 0, 907, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 161, 0, 606, 608, 618, 0, 101, 0, 0,
	198, 0, 431, 436, 0, 224, 0, 226, 0, 141,
	600, 0, 0, 312, 991, 314, 316, 317, 318, 319,
	1016, 0, 1016, 0, 345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 450, 0, 137, 80, 80,
	980, 80, 985, 133, 135, 0, 533, 0, 0, 530,
	536, 537, 0, 520, 391, 392, 0, 0, 305, 186,
	285, 287, 299, 300, 586, 0, 0, 0, 0, 405,
	61, 1209, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 54, 0, 0, 0,
	0, 0, 0, 506, 993, 541, 972, 586, 548, 973,
	541, 969, 574, 0, 576, 0, 0, 0, 578, 0,
	567, 0, 569, 584, 560, 0, 0, 553, 0, 552,
	572, 580, 0, 0, 598, 101, 0, 0, 103, 0,
	978, 115, 0, 604, 451, 466, 0, 0, 458, 455,
	453, 605, 0, 0, 0, 0, 908, 170, 0, -2,
	-2, 0, 0, 0, 764, -2, 745, 747, 750, 752,
	754, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 952, 955, -2, 908, 911, 912, 0, 0, 946,
	0, 0, 0, 0, 515, 516, 516, 516, 816, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 834, 0, 835, 836, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 769, 770, 771, 0, 0, 838, 933, 934,
	0, 0, 0, 0, 0, 0, 843, 0, 940, 0,
	0, 0, 847, 848, 849, 0, 635, 0, 661, 683,
	685, 673, 910, 0, 0, 0, 88, 0, 92, 171,
	201, 222, 223, 225, 218, 321, 354, 0, 327, 0,
	1016, 0, 0, 0, 0, 0, 0, 310, 355, 377,
	379, 0, 0, 446, 450, 0, 449, 504, 127, 129,
	131, 0, 0, 519, 393, 0, 0, 301, 60, 395,
	0, 0, 0, 63, 1209, 71, 0, 408, 72, 1209,
	80, 1209, 80, 73, 50, 406, 51, 0, 52, 0,
	403, 0, 394, 401, 0, 0, 543, 0, 546, 0,
	543, 575, 0, 594, 577, 558, 568, 0, 565, 556,
	0, 557, 0, 584, 0, 0, 564, 87, 0, 0,
	104, 464, 465, 452, 463, 0, 466, 471, 468, 474,
	0, 707, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 943, 0, 878, 0, 0, 954, -2, 915, 944,
	948, 0, 811, 0, 0, 0, 0, 1004, 693, 694,
	695, 696, 697, 698, 699, 0, 859, 860, 864, 0,
	0, 821, 0, 0, 916, 926, 928, 767, 768, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, -2,
	-2, -2, 785, 786, 787, -2, -2, -2, 0, 0,
	0, 929, 0, 0, 881, 931, 932, 937, 938, 0,
	840, 841, 842, 939, 0, 0, 0, 667, 0, 611,
	0, 0, 619, 0, 308, 0, 315, 325, 0, 0,
	0, 384, 390, 390, 0, 819, 820, 0, 0, 344,
	0, 0, 0, 313, 0, 0, 0, 448, 450, 0,
	441, 442, 528, 534, 521, 393, 187, 0, 0, 0,
	0, 81, 65, 0, 0, 0, 0, 69, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 502, 855, 0,
	0, 549, 855, 0, 572, 570, 554, 550, 0, 561,
	0, 581, 93, 0, 0, 0, 0, 457, 467, 0,
	0, 0, -2, 0, 757, -2, -2, 877, 908, 953,
	947, 1001, 516, 812, 814, 815, 702, 866, 863, 0,
	850, 832, 833, 925, 0, 0, 0, 0, 908, 880,
	839, 0, 845, 846, 636, 612, 607, 0, 0, 326,
	0, 329, 0, 0, 0, 0, 335, 336, 0, 0,
	0, 0, 0, 0, 353, 0, 393, 996, 0, 393,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	439, 450, 0, 443, 444, 522, 397, 399, 62, 0,
	0, 77, 0, 0, 407, 0, 80, 80, 396, 0,
	0, 0, 0, 404, 402, 489, 0, 542, 540, 490,
	593, 584, 0, 579, 585, 0, 0, 0, 0, 0,
	475, 476, 0, -2, -2, 758, 879, 0, 516, 0,
	852, -2, 0, 0, 0, 882, 0, 0, 98, 96,
	0, 0, 330, 331, 1016, 0, 334, 337, 0, 339,
	1018, 353, 0, 321, 0, 350, 351, 385, 386, 389,
	387, 390, 516, 343, 348, 0, 321, 311, 353, 0,
	0, 445, 446, 64, 66, 67, 76, 84, 68, 74,
	0, 0, 0, 0, 854, 856, 0, 559, 551, 0,
	0, 460, 605, 462, 813, 869, 0, -2, 0, 793,
	844, 0, 100, 97, 0, 0, 328, 332, 0, 0,
	359, 0, 321, 353, 347, 0, 393, 0, 0, 309,
	321, 0, 447, 448, 86, 0, 398, 400, 0, 0,
	0, 0, 516, 0, 461, 0, 0, 0, 865, 794,
	99, 95, 0, 0, 338, 364, 0, 0, 341, 321,
	0, 388, 811, 355, 380, 0, 440, 70, 0, 83,
	0, 0, 857, 858, 0, 605, 862, 867, 870, -2,
	1169, 1050, 0, 868, 0, 0, 340, 360, 361, 0,
	356, 357, 358, 1017, 342, 352, 359, 353, 85, 56,
	58, 0, 459, 0, 872, 873, 874, 875, 876, 324,
	333, 362, 0, 363, 0, 0, 0, 364, 321, 0,
	320, 322, 323, 365, 0, 368, 369, 0, 366, 349,
	381, 871, 367, 370, 371,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1063
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = nil
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DropCascade
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = DropRestrict
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = DropDefault
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1136
		{
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter using")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1140
		{
		}
	case 87:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.str = ""
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1215
		{
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{ /* SKIP DOC */
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{ /* SKIP DOC */
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{ /* SKIP DOC */
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			return unimplemented(sqllex, "set local")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			return unimplemented(sqllex, "set from current")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1683
		{
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1685
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = Low
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = Normal
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = High
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.str = "client_encoding"
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = DropDefault
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			return unimplemented(sqllex, "match full")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			return unimplemented(sqllex, "match partial")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			return unimplemented(sqllex, "match simple")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2338
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			return unimplemented(sqllex, "no action")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			return unimplemented(sqllex, "action set null")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			return unimplemented(sqllex, "action set default")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = true
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = false
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2461
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2465
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = Ascending
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = Descending
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2505
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2507
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = true
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.str = ""
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.str = ""
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = ReadOnly
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = ReadWrite
		}
	case 439:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.str = ""
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2821
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2856
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3095
		{
			return unimplemented(sqllex, "cte")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3103
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = true
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = false
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = false
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = true
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3131
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3255
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &From{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3345
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3390
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3407
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = nil
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = true
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = false
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.str = astFullJoin
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.str = astLeftJoin
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.str = astRightJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.str = astInnerJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3590
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3689
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3704
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3713
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3785
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = nil
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3850
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3946
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4018
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = year
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = month
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = day
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = hour
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = minute
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = month
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = hour
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = minute
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = nil
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = second
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4113
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4148
		{
			return unimplemented(sqllex, "at tz")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4382
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4555
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4608
		{
			return unimplemented(sqllex, "variadic")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4609
		{
			return unimplemented(sqllex, "variadic")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4632
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			return unimplemented(sqllex, "func_application")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4653
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			return unimplemented(sqllex, "current role")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			return unimplemented(sqllex, "current user")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			return unimplemented(sqllex, "session user")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			return unimplemented(sqllex, "user")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4710
		{
			return unimplemented(sqllex, "treat")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4754
		{
			return unimplemented(sqllex, "within group")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4755
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = Window(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.str = ""
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4852
		{
			return unimplemented(sqllex, "frame range")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4853
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4854
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4857
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4858
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4864
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4865
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4867
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4868
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = Any
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = Some
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = All
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = Plus
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = Minus
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = Mult
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = Div
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = FloorDiv
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = Mod
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = Bitand
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = Bitor
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = Pow
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = Bitxor
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = LT
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = GT
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = EQ
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = LE
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = GE
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = NE
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = Like
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = NotLike
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = ILike
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = NotILike
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5232
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5233
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5351
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5395
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5431
		{
			return unimplemented(sqllex, "func const")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5440
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = DNull
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5467
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.str = ""
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
