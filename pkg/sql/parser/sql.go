// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6518

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	358, 54,
	-2, 672,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 525,
	-2, 0,
	-1, 61,
	92, 672,
	145, 672,
	310, 672,
	311, 672,
	-2, 0,
	-1, 72,
	103, 647,
	112, 647,
	153, 647,
	172, 647,
	197, 647,
	203, 647,
	307, 647,
	-2, 636,
	-1, 103,
	4, 674,
	20, 674,
	21, 674,
	23, 674,
	28, 674,
	33, 674,
	34, 674,
	35, 674,
	36, 674,
	37, 674,
	38, 674,
	39, 674,
	40, 674,
	41, 674,
	42, 674,
	44, 674,
	45, 674,
	46, 674,
	47, 674,
	48, 674,
	51, 674,
	52, 674,
	53, 674,
	55, 674,
	56, 674,
	60, 674,
	61, 674,
	62, 674,
	64, 674,
	66, 674,
	67, 674,
	68, 674,
	71, 674,
	72, 674,
	73, 674,
	81, 674,
	82, 674,
	83, 674,
	84, 674,
	85, 674,
	86, 674,
	87, 674,
	88, 674,
	90, 674,
	92, 674,
	94, 674,
	97, 674,
	98, 674,
	100, 674,
	104, 674,
	105, 674,
	106, 674,
	107, 674,
	108, 674,
	109, 674,
	113, 674,
	114, 674,
	115, 674,
	116, 674,
	117, 674,
	119, 674,
	121, 674,
	126, 674,
	127, 674,
	129, 674,
	131, 674,
	132, 674,
	133, 674,
	134, 674,
	135, 674,
	136, 674,
	137, 674,
	140, 674,
	142, 674,
	145, 674,
	146, 674,
	147, 674,
	148, 674,
	149, 674,
	150, 674,
	151, 674,
	152, 674,
	154, 674,
	157, 674,
	158, 674,
	159, 674,
	161, 674,
	162, 674,
	163, 674,
	165, 674,
	166, 674,
	168, 674,
	170, 674,
	173, 674,
	176, 674,
	178, 674,
	179, 674,
	180, 674,
	181, 674,
	182, 674,
	183, 674,
	185, 674,
	186, 674,
	187, 674,
	188, 674,
	192, 674,
	193, 674,
	194, 674,
	195, 674,
	196, 674,
	198, 674,
	200, 674,
	201, 674,
	204, 674,
	205, 674,
	207, 674,
	209, 674,
	210, 674,
	211, 674,
	212, 674,
	213, 674,
	214, 674,
	216, 674,
	217, 674,
	218, 674,
	219, 674,
	220, 674,
	222, 674,
	223, 674,
	224, 674,
	225, 674,
	226, 674,
	227, 674,
	228, 674,
	229, 674,
	231, 674,
	232, 674,
	233, 674,
	234, 674,
	235, 674,
	236, 674,
	237, 674,
	238, 674,
	239, 674,
	240, 674,
	241, 674,
	242, 674,
	244, 674,
	246, 674,
	247, 674,
	248, 674,
	249, 674,
	251, 674,
	252, 674,
	253, 674,
	254, 674,
	256, 674,
	257, 674,
	258, 674,
	259, 674,
	260, 674,
	262, 674,
	263, 674,
	264, 674,
	265, 674,
	267, 674,
	268, 674,
	269, 674,
	270, 674,
	272, 674,
	273, 674,
	274, 674,
	275, 674,
	276, 674,
	277, 674,
	278, 674,
	279, 674,
	280, 674,
	281, 674,
	283, 674,
	285, 674,
	286, 674,
	287, 674,
	288, 674,
	289, 674,
	290, 674,
	291, 674,
	293, 674,
	294, 674,
	295, 674,
	298, 674,
	299, 674,
	300, 674,
	301, 674,
	303, 674,
	304, 674,
	305, 674,
	306, 674,
	309, 674,
	310, 674,
	311, 674,
	312, 674,
	314, 674,
	316, 674,
	317, 674,
	318, 674,
	319, 674,
	320, 674,
	321, 674,
	324, 674,
	329, 674,
	330, 674,
	331, 674,
	332, 674,
	333, 674,
	-2, 0,
	-1, 116,
	103, 646,
	112, 646,
	153, 646,
	172, 646,
	197, 646,
	203, 646,
	307, 646,
	-2, 639,
	-1, 120,
	1, 574,
	157, 574,
	222, 574,
	226, 574,
	357, 574,
	358, 574,
	-2, 0,
	-1, 122,
	1, 574,
	357, 574,
	358, 574,
	-2, 0,
	-1, 123,
	1, 574,
	357, 574,
	358, 574,
	-2, 0,
	-1, 124,
	1, 578,
	357, 578,
	358, 578,
	-2, 0,
	-1, 131,
	4, 680,
	5, 680,
	6, 680,
	7, 680,
	8, 680,
	9, 680,
	20, 680,
	21, 680,
	23, 680,
	28, 680,
	29, 680,
	33, 680,
	34, 680,
	35, 680,
	36, 680,
	37, 680,
	38, 680,
	39, 680,
	40, 680,
	41, 680,
	42, 680,
	44, 680,
	45, 680,
	46, 680,
	47, 680,
	48, 680,
	49, 680,
	50, 680,
	51, 680,
	52, 680,
	53, 680,
	55, 680,
	56, 680,
	58, 680,
	60, 680,
	61, 680,
	62, 680,
	64, 680,
	66, 680,
	67, 680,
	68, 680,
	70, 680,
	71, 680,
	72, 680,
	73, 680,
	75, 680,
	76, 680,
	77, 680,
	79, 680,
	80, 680,
	81, 680,
	82, 680,
	83, 680,
	84, 680,
	85, 680,
	86, 680,
	87, 680,
	88, 680,
	90, 680,
	92, 680,
	94, 680,
	97, 680,
	98, 680,
	100, 680,
	104, 680,
	105, 680,
	106, 680,
	107, 680,
	108, 680,
	109, 680,
	110, 680,
	113, 680,
	114, 680,
	115, 680,
	116, 680,
	117, 680,
	119, 680,
	121, 680,
	124, 680,
	126, 680,
	127, 680,
	129, 680,
	131, 680,
	132, 680,
	133, 680,
	134, 680,
	135, 680,
	136, 680,
	137, 680,
	138, 680,
	140, 680,
	142, 680,
	144, 680,
	145, 680,
	146, 680,
	147, 680,
	148, 680,
	149, 680,
	150, 680,
	151, 680,
	152, 680,
	154, 680,
	156, 680,
	157, 680,
	158, 680,
	159, 680,
	160, 680,
	161, 680,
	162, 680,
	163, 680,
	165, 680,
	166, 680,
	168, 680,
	169, 680,
	170, 680,
	171, 680,
	173, 680,
	176, 680,
	178, 680,
	179, 680,
	180, 680,
	181, 680,
	182, 680,
	183, 680,
	184, 680,
	185, 680,
	186, 680,
	187, 680,
	188, 680,
	189, 680,
	191, 680,
	192, 680,
	193, 680,
	194, 680,
	195, 680,
	196, 680,
	198, 680,
	201, 680,
	204, 680,
	205, 680,
	206, 680,
	207, 680,
	208, 680,
	209, 680,
	210, 680,
	211, 680,
	212, 680,
	213, 680,
	214, 680,
	216, 680,
	217, 680,
	218, 680,
	219, 680,
	220, 680,
	222, 680,
	223, 680,
	224, 680,
	225, 680,
	226, 680,
	227, 680,
	228, 680,
	229, 680,
	231, 680,
	232, 680,
	233, 680,
	234, 680,
	235, 680,
	236, 680,
	237, 680,
	238, 680,
	239, 680,
	240, 680,
	241, 680,
	242, 680,
	244, 680,
	245, 680,
	246, 680,
	247, 680,
	248, 680,
	249, 680,
	251, 680,
	252, 680,
	253, 680,
	254, 680,
	256, 680,
	257, 680,
	258, 680,
	259, 680,
	260, 680,
	261, 680,
	262, 680,
	263, 680,
	264, 680,
	265, 680,
	266, 680,
	267, 680,
	268, 680,
	269, 680,
	270, 680,
	272, 680,
	273, 680,
	274, 680,
	275, 680,
	276, 680,
	277, 680,
	278, 680,
	279, 680,
	280, 680,
	281, 680,
	283, 680,
	285, 680,
	286, 680,
	287, 680,
	288, 680,
	289, 680,
	290, 680,
	291, 680,
	293, 680,
	294, 680,
	295, 680,
	298, 680,
	299, 680,
	300, 680,
	301, 680,
	302, 680,
	303, 680,
	304, 680,
	305, 680,
	306, 680,
	309, 680,
	310, 680,
	311, 680,
	312, 680,
	313, 680,
	314, 680,
	316, 680,
	317, 680,
	318, 680,
	319, 680,
	320, 680,
	321, 680,
	324, 680,
	329, 680,
	330, 680,
	331, 680,
	332, 680,
	333, 680,
	334, 680,
	340, 680,
	345, 680,
	346, 680,
	347, 680,
	354, 680,
	360, 680,
	-2, 0,
	-1, 134,
	1, 54,
	358, 54,
	-2, 672,
	-1, 601,
	123, 1268,
	296, 1268,
	339, 1268,
	356, 1268,
	-2, 0,
	-1, 602,
	123, 1220,
	296, 1220,
	339, 1220,
	356, 1220,
	-2, 0,
	-1, 604,
	123, 1326,
	296, 1326,
	339, 1326,
	356, 1326,
	-2, 0,
	-1, 606,
	123, 1348,
	296, 1348,
	339, 1348,
	356, 1348,
	-2, 0,
	-1, 613,
	1, 311,
	357, 311,
	358, 311,
	-2, 1273,
	-1, 639,
	1, 393,
	353, 393,
	355, 393,
	357, 393,
	358, 393,
	-2, 0,
	-1, 640,
	1, 441,
	120, 441,
	353, 441,
	355, 441,
	357, 441,
	358, 441,
	-2, 0,
	-1, 646,
	1, 407,
	353, 407,
	355, 407,
	357, 407,
	358, 407,
	-2, 0,
	-1, 648,
	1, 411,
	353, 411,
	355, 411,
	357, 411,
	358, 411,
	-2, 0,
	-1, 651,
	1, 419,
	353, 419,
	355, 419,
	357, 419,
	358, 419,
	-2, 0,
	-1, 652,
	1, 424,
	353, 424,
	355, 424,
	357, 424,
	358, 424,
	-2, 0,
	-1, 655,
	1, 434,
	353, 434,
	355, 434,
	357, 434,
	358, 434,
	-2, 0,
	-1, 664,
	112, 682,
	172, 682,
	197, 682,
	-2, 642,
	-1, 667,
	112, 681,
	172, 681,
	197, 681,
	-2, 640,
	-1, 797,
	354, 1198,
	-2, 1191,
	-1, 798,
	354, 1199,
	-2, 1192,
	-1, 804,
	5, 855,
	354, 855,
	-2, 1399,
	-1, 829,
	5, 814,
	-2, 1369,
	-1, 830,
	5, 849,
	354, 849,
	-2, 1371,
	-1, 831,
	5, 824,
	-2, 1372,
	-1, 832,
	5, 823,
	-2, 1373,
	-1, 833,
	5, 849,
	354, 849,
	-2, 1376,
	-1, 834,
	5, 849,
	354, 849,
	-2, 1377,
	-1, 835,
	5, 850,
	-2, 1380,
	-1, 836,
	5, 806,
	-2, 1381,
	-1, 837,
	5, 806,
	-2, 1382,
	-1, 838,
	5, 831,
	-2, 1386,
	-1, 839,
	5, 816,
	-2, 1387,
	-1, 840,
	5, 817,
	-2, 1388,
	-1, 841,
	5, 807,
	-2, 1393,
	-1, 842,
	5, 808,
	-2, 1394,
	-1, 843,
	5, 809,
	-2, 1395,
	-1, 844,
	5, 810,
	-2, 1396,
	-1, 845,
	5, 811,
	-2, 1397,
	-1, 846,
	5, 812,
	-2, 1398,
	-1, 847,
	5, 806,
	-2, 1403,
	-1, 848,
	5, 815,
	-2, 1408,
	-1, 849,
	5, 813,
	-2, 1411,
	-1, 850,
	5, 847,
	354, 847,
	-2, 1413,
	-1, 851,
	5, 851,
	-2, 1416,
	-1, 852,
	5, 853,
	-2, 1417,
	-1, 853,
	5, 846,
	354, 846,
	-2, 1422,
	-1, 871,
	213, 670,
	-2, 518,
	-1, 875,
	199, 1195,
	-2, 0,
	-1, 910,
	1, 209,
	353, 209,
	355, 209,
	357, 209,
	358, 209,
	-2, 645,
	-1, 913,
	4, 1421,
	10, 1421,
	11, 1421,
	13, 1421,
	14, 1421,
	15, 1421,
	16, 1421,
	17, 1421,
	18, 1421,
	20, 1421,
	21, 1421,
	23, 1421,
	26, 1421,
	28, 1421,
	30, 1421,
	33, 1421,
	34, 1421,
	35, 1421,
	36, 1421,
	37, 1421,
	38, 1421,
	39, 1421,
	40, 1421,
	41, 1421,
	42, 1421,
	44, 1421,
	45, 1421,
	46, 1421,
	47, 1421,
	48, 1421,
	51, 1421,
	52, 1421,
	53, 1421,
	55, 1421,
	56, 1421,
	57, 1421,
	60, 1421,
	61, 1421,
	62, 1421,
	63, 1421,
	64, 1421,
	66, 1421,
	67, 1421,
	68, 1421,
	70, 1421,
	71, 1421,
	72, 1421,
	73, 1421,
	81, 1421,
	82, 1421,
	83, 1421,
	84, 1421,
	85, 1421,
	86, 1421,
	87, 1421,
	88, 1421,
	90, 1421,
	92, 1421,
	94, 1421,
	97, 1421,
	98, 1421,
	100, 1421,
	104, 1421,
	105, 1421,
	106, 1421,
	107, 1421,
	108, 1421,
	109, 1421,
	113, 1421,
	114, 1421,
	115, 1421,
	116, 1421,
	117, 1421,
	118, 1421,
	119, 1421,
	121, 1421,
	124, 1421,
	126, 1421,
	127, 1421,
	129, 1421,
	131, 1421,
	132, 1421,
	133, 1421,
	134, 1421,
	135, 1421,
	136, 1421,
	137, 1421,
	138, 1421,
	139, 1421,
	140, 1421,
	142, 1421,
	144, 1421,
	145, 1421,
	146, 1421,
	147, 1421,
	148, 1421,
	149, 1421,
	150, 1421,
	151, 1421,
	152, 1421,
	154, 1421,
	156, 1421,
	157, 1421,
	158, 1421,
	159, 1421,
	160, 1421,
	161, 1421,
	162, 1421,
	163, 1421,
	165, 1421,
	166, 1421,
	168, 1421,
	169, 1421,
	170, 1421,
	171, 1421,
	173, 1421,
	176, 1421,
	177, 1421,
	178, 1421,
	179, 1421,
	180, 1421,
	181, 1421,
	182, 1421,
	183, 1421,
	184, 1421,
	185, 1421,
	186, 1421,
	187, 1421,
	188, 1421,
	192, 1421,
	193, 1421,
	194, 1421,
	195, 1421,
	196, 1421,
	198, 1421,
	201, 1421,
	202, 1421,
	204, 1421,
	205, 1421,
	207, 1421,
	209, 1421,
	210, 1421,
	211, 1421,
	212, 1421,
	213, 1421,
	214, 1421,
	216, 1421,
	217, 1421,
	218, 1421,
	219, 1421,
	220, 1421,
	222, 1421,
	223, 1421,
	224, 1421,
	225, 1421,
	226, 1421,
	227, 1421,
	228, 1421,
	229, 1421,
	231, 1421,
	232, 1421,
	233, 1421,
	234, 1421,
	235, 1421,
	236, 1421,
	237, 1421,
	238, 1421,
	239, 1421,
	240, 1421,
	241, 1421,
	242, 1421,
	244, 1421,
	245, 1421,
	246, 1421,
	247, 1421,
	248, 1421,
	249, 1421,
	250, 1421,
	251, 1421,
	252, 1421,
	253, 1421,
	254, 1421,
	256, 1421,
	257, 1421,
	258, 1421,
	259, 1421,
	260, 1421,
	262, 1421,
	263, 1421,
	264, 1421,
	265, 1421,
	266, 1421,
	267, 1421,
	268, 1421,
	269, 1421,
	270, 1421,
	272, 1421,
	273, 1421,
	274, 1421,
	275, 1421,
	276, 1421,
	277, 1421,
	278, 1421,
	279, 1421,
	280, 1421,
	281, 1421,
	283, 1421,
	285, 1421,
	286, 1421,
	287, 1421,
	288, 1421,
	289, 1421,
	290, 1421,
	291, 1421,
	293, 1421,
	294, 1421,
	295, 1421,
	298, 1421,
	299, 1421,
	300, 1421,
	301, 1421,
	303, 1421,
	304, 1421,
	305, 1421,
	306, 1421,
	309, 1421,
	310, 1421,
	311, 1421,
	312, 1421,
	314, 1421,
	316, 1421,
	317, 1421,
	318, 1421,
	319, 1421,
	320, 1421,
	321, 1421,
	324, 1421,
	329, 1421,
	330, 1421,
	331, 1421,
	332, 1421,
	333, 1421,
	334, 1421,
	335, 1421,
	337, 1421,
	338, 1421,
	339, 1421,
	340, 1421,
	342, 1421,
	343, 1421,
	344, 1421,
	345, 1421,
	346, 1421,
	347, 1421,
	348, 1421,
	349, 1421,
	350, 1421,
	352, 1421,
	355, 1421,
	356, 1421,
	359, 1421,
	360, 1421,
	-2, 0,
	-1, 943,
	123, 1348,
	296, 1348,
	339, 1348,
	356, 1348,
	-2, 0,
	-1, 1011,
	112, 681,
	172, 681,
	197, 681,
	-2, 643,
	-1, 1065,
	103, 647,
	112, 647,
	153, 647,
	172, 647,
	197, 647,
	203, 647,
	307, 647,
	-2, 741,
	-1, 1146,
	103, 647,
	112, 647,
	153, 647,
	172, 647,
	197, 647,
	203, 647,
	307, 647,
	-2, 974,
	-1, 1156,
	354, 1175,
	-2, 1163,
	-1, 1173,
	355, 1115,
	-2, 0,
	-1, 1409,
	1, 742,
	70, 742,
	103, 742,
	112, 742,
	124, 742,
	128, 742,
	130, 742,
	144, 742,
	153, 742,
	160, 742,
	169, 742,
	172, 742,
	184, 742,
	197, 742,
	199, 742,
	203, 742,
	243, 742,
	245, 742,
	307, 742,
	315, 742,
	326, 742,
	327, 742,
	336, 742,
	353, 742,
	355, 742,
	357, 742,
	358, 742,
	359, 742,
	-2, 741,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 890,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 891,
	-1, 1471,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 892,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 896,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 897,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 898,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 903,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 905,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 909,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 910,
	-1, 1490,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 911,
	-1, 1491,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 912,
	-1, 1517,
	208, 1057,
	-2, 1060,
	-1, 1559,
	123, 1097,
	354, 1198,
	-2, 1191,
	-1, 1560,
	123, 1098,
	-2, 1365,
	-1, 1561,
	123, 1099,
	-2, 1272,
	-1, 1562,
	123, 1100,
	-2, 1235,
	-1, 1563,
	123, 1101,
	-2, 1252,
	-1, 1564,
	123, 1102,
	-2, 1271,
	-1, 1565,
	123, 1103,
	-2, 1323,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 904,
	-1, 1772,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 906,
	-1, 1777,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 907,
	-1, 1795,
	208, 1056,
	-2, 1059,
	-1, 2006,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 908,
	-1, 2011,
	156, 0,
	-2, 924,
	-1, 2021,
	208, 1058,
	-2, 1061,
	-1, 2063,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 951,
	-1, 2064,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 952,
	-1, 2065,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 953,
	-1, 2069,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 957,
	-1, 2070,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 958,
	-1, 2071,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 959,
	-1, 2197,
	156, 0,
	-2, 925,
	-1, 2200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 928,
	-1, 2201,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 930,
	-1, 2302,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 929,
	-1, 2303,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 931,
	-1, 2310,
	156, 0,
	-2, 960,
	-1, 2365,
	156, 0,
	-2, 961,
	-1, 2436,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1368,
}

const sqlPrivate = 57344

const sqlLast = 41984

var sqlAct = [...]int{

	798, 2435, 2094, 2419, 2388, 2465, 1630, 2420, 1638, 2277,
	2434, 1932, 2238, 2421, 1202, 2340, 668, 2040, 1610, 2104,
	2170, 1209, 2156, 1244, 2125, 1294, 2127, 788, 1295, 71,
	1899, 1696, 1901, 796, 1222, 774, 1591, 795, 453, 25,
	173, 865, 469, 1404, 173, 724, 966, 1978, 1063, 2257,
	1609, 1726, 173, 791, 1614, 1904, 2119, 2136, 1861, 1627,
	1059, 173, 1977, 1046, 471, 1245, 1639, 173, 173, 1068,
	1040, 173, 1613, 1705, 173, 1205, 1860, 1515, 1448, 1806,
	1713, 173, 1152, 1692, 1413, 1948, 1422, 1405, 1445, 438,
	1322, 856, 1370, 947, 1680, 1198, 612, 1525, 1503, 768,
	1500, 1071, 1073, 1588, 1041, 688, 1183, 900, 730, 1535,
	689, 1541, 897, 1632, 946, 1187, 890, 1611, 435, 911,
	694, 676, 115, 1555, 1141, 1617, 173, 173, 767, 1391,
	1050, 733, 1378, 712, 173, 116, 585, 1014, 680, 1015,
	1320, 164, 609, 1013, 117, 1216, 790, 607, 673, 1031,
	461, 887, 169, 2171, 1030, 710, 1019, 589, 1794, 1631,
	605, 173, 173, 173, 173, 1224, 685, 1962, 173, 173,
	1963, 2462, 950, 25, 672, 1093, 2443, 1096, 1097, 672,
	2169, 2431, 1224, 115, 1224, 1653, 2430, 754, 1060, 2427,
	1653, 2415, 1915, 1093, 2414, 1668, 1653, 667, 1668, 1446,
	1099, 2405, 2383, 727, 2379, 1661, 2252, 2371, 1093, 577,
	677, 2169, 2367, 2322, 2319, 2317, 1661, 2169, 1093, 2169,
	1916, 2304, 1951, 1380, 1098, 1661, 1096, 1097, 1946, 1116,
	1117, 1118, 1126, 1127, 1128, 2288, 1090, 951, 2384, 1093,
	1573, 952, 1119, 2287, 2265, 1668, 2262, 2169, 1093, 1099,
	1093, 665, 1130, 2252, 2224, 2202, 115, 633, 1653, 1653,
	664, 2199, 2191, 2189, 2168, 1661, 1653, 1653, 2169, 738,
	742, 748, 2149, 1098, 2118, 1951, 1093, 2113, 1608, 1113,
	2015, 1608, 714, 1958, 1653, 1104, 1926, 1959, 1888, 1379,
	1889, 1878, 1093, 1096, 1097, 1879, 1116, 1117, 1118, 1126,
	1127, 1128, 1876, 1875, 1874, 1941, 1653, 1653, 1653, 1119,
	1446, 1831, 1832, 1795, 1798, 1797, 1099, 1653, 1729, 1130,
	1799, 1653, 1653, 1702, 1670, 1660, 2076, 1093, 1653, 1661,
	1653, 2018, 1652, 1668, 1104, 1805, 1653, 1411, 1831, 1832,
	1098, 1849, 1850, 1851, 1114, 1607, 1113, 1093, 1385, 1608,
	1889, 1538, 1384, 1237, 1123, 1131, 1695, 1238, 1225, 716,
	1678, 717, 1096, 1097, 1846, 1116, 1117, 1118, 1126, 1127,
	1128, 1519, 1129, 1035, 1303, 1225, 752, 1225, 1119, 925,
	134, 1096, 1097, 2172, 131, 1099, 174, 1121, 1130, 923,
	691, 1846, 922, 1114, 921, 920, 919, 918, 1539, 917,
	173, 1104, 173, 173, 1099, 173, 675, 916, 915, 1098,
	173, 914, 718, 133, 715, 1113, 173, 1115, 1120, 1837,
	660, 1123, 1131, 131, 659, 658, 631, 630, 1098, 173,
	173, 173, 173, 173, 629, 628, 1831, 1832, 694, 1129,
	627, 626, 625, 624, 1540, 1537, 1837, 623, 622, 132,
	472, 904, 133, 621, 1121, 620, 1915, 125, 619, 1379,
	1114, 618, 617, 616, 126, 615, 1115, 673, 600, 599,
	1104, 598, 426, 425, 1721, 424, 1230, 423, 1847, 422,
	407, 406, 1124, 118, 1852, 1120, 2455, 398, 132, 1104,
	1123, 1131, 1635, 1223, 397, 1354, 869, 396, 395, 873,
	388, 387, 1831, 1832, 158, 1847, 695, 157, 1129, 1109,
	1107, 1108, 1100, 1101, 1102, 1103, 1105, 1106, 156, 1542,
	155, 154, 118, 1121, 889, 893, 893, 153, 152, 1114,
	151, 150, 149, 1115, 148, 147, 146, 145, 144, 143,
	142, 141, 140, 139, 1837, 138, 894, 864, 912, 1124,
	1122, 1848, 137, 1110, 1111, 1112, 1125, 136, 1109, 1107,
	1108, 1100, 1101, 1102, 1103, 1105, 1106, 135, 758, 1552,
	1550, 1548, 173, 1064, 1326, 2226, 1831, 1832, 1848, 961,
	2433, 2426, 2393, 2362, 2320, 2245, 2229, 2225, 173, 2217,
	2216, 2215, 2211, 1026, 2210, 2209, 2208, 1536, 2135, 2124,
	2091, 2086, 1115, 2085, 2084, 173, 2026, 1891, 1887, 1883,
	1837, 1880, 1868, 1859, 694, 1830, 1827, 1122, 1124, 1666,
	1110, 1111, 1112, 1125, 1826, 1109, 1107, 1108, 1100, 1101,
	1102, 1103, 1105, 1106, 1824, 1811, 694, 1810, 862, 1733,
	1026, 1511, 1873, 1842, 1840, 1841, 1833, 1834, 1835, 1836,
	1838, 1839, 1409, 1241, 1831, 1832, 725, 1025, 131, 131,
	685, 1160, 173, 1208, 964, 1843, 1844, 1845, 926, 1847,
	1842, 1840, 1841, 1833, 1834, 1835, 1836, 1838, 1839, 2042,
	1930, 1012, 758, 1153, 1837, 1144, 1122, 133, 133, 1110,
	1111, 1112, 1125, 2406, 1109, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 2374, 957, 2361, 1062, 2360, 2359, 2351,
	173, 2349, 173, 1061, 2334, 2333, 1100, 1101, 1102, 1103,
	1105, 1106, 2332, 132, 132, 1663, 2312, 2274, 692, 1691,
	2253, 125, 125, 2232, 2222, 173, 173, 1690, 126, 126,
	2244, 2175, 1848, 1847, 1011, 2102, 2100, 1512, 934, 2099,
	2097, 2010, 694, 173, 1986, 1985, 944, 1634, 118, 471,
	1966, 1954, 1837, 1039, 673, 941, 1858, 1096, 1097, 1820,
	1010, 1833, 1834, 1835, 1836, 1838, 1839, 1819, 1816, 1791,
	1091, 1786, 1505, 1096, 1097, 1764, 1759, 1746, 1745, 1731,
	1099, 1044, 962, 1701, 1188, 1191, 1600, 1546, 1396, 1201,
	1195, 1094, 673, 1181, 1180, 1179, 1099, 1178, 1177, 1148,
	1176, 1175, 665, 1174, 1098, 1173, 1848, 1172, 1171, 1170,
	1746, 664, 1719, 1169, 695, 1168, 1167, 1022, 1023, 1166,
	1098, 1165, 1164, 1157, 1842, 1840, 1841, 1833, 1834, 1835,
	1836, 1838, 1839, 1145, 1144, 726, 1034, 1038, 1058, 940,
	929, 115, 908, 2343, 2251, 1032, 2204, 2123, 1961, 1957,
	1397, 1831, 1832, 1153, 173, 1928, 1066, 1036, 1142, 863,
	1062, 1902, 956, 2255, 954, 1104, 173, 855, 2254, 2248,
	1964, 1917, 173, 1446, 173, 1064, 173, 1193, 1207, 1882,
	173, 1881, 1194, 1770, 936, 953, 1184, 1631, 1310, 1162,
	1314, 1313, 1933, 691, 686, 1092, 1200, 1206, 2258, 1840,
	1841, 1833, 1834, 1835, 1836, 1838, 1839, 955, 2043, 1526,
	1004, 1911, 1551, 1549, 1547, 173, 1802, 1973, 1081, 1227,
	2396, 694, 1229, 173, 1538, 1657, 1232, 1156, 1242, 173,
	1185, 1186, 2378, 2452, 2183, 1235, 1671, 2453, 1079, 705,
	707, 1938, 1213, 1189, 703, 694, 694, 2298, 2297, 1005,
	996, 701, 471, 1192, 1096, 1097, 1080, 1423, 400, 173,
	427, 2296, 1096, 1097, 173, 698, 1074, 1299, 1075, 173,
	173, 1539, 173, 1251, 173, 1317, 173, 1099, 173, 2295,
	889, 1835, 1836, 1838, 1839, 1099, 1074, 2001, 1075, 173,
	695, 685, 685, 1415, 1327, 173, 173, 1319, 726, 1997,
	1159, 1098, 1999, 1970, 1969, 1815, 1814, 1113, 1813, 1098,
	1812, 1282, 695, 1062, 803, 1773, 1929, 1540, 1537, 1311,
	412, 1218, 1656, 1215, 173, 1426, 173, 1487, 1442, 173,
	1074, 1415, 1075, 1438, 1353, 954, 1436, 1414, 1664, 404,
	1288, 431, 173, 1076, 159, 1033, 751, 1377, 2194, 1304,
	1604, 471, 2377, 1603, 173, 1328, 1239, 1458, 173, 1318,
	1628, 173, 1104, 1076, 1296, 173, 1240, 1352, 2004, 173,
	1104, 1298, 2093, 413, 173, 662, 1297, 1351, 955, 1502,
	173, 471, 1316, 1301, 173, 572, 1323, 673, 1402, 471,
	1315, 1884, 1542, 1399, 1102, 1103, 1105, 1106, 1398, 430,
	2279, 1003, 1342, 1502, 1196, 115, 1332, 1076, 2423, 1434,
	1335, 1388, 1336, 1106, 1337, 1440, 1338, 1509, 1339, 1416,
	1340, 1114, 1507, 1444, 1425, 162, 2412, 1219, 695, 1114,
	1331, 1457, 939, 1905, 990, 472, 1304, 1346, 1348, 1542,
	1251, 1251, 1526, 1357, 1356, 665, 1355, 1988, 665, 665,
	1427, 1429, 1449, 1456, 1366, 2452, 2459, 1367, 1368, 1375,
	1374, 1693, 1694, 2474, 673, 761, 671, 1383, 1766, 673,
	1536, 991, 1516, 1389, 1393, 1394, 1148, 1432, 1282, 1282,
	1520, 1757, 1437, 163, 1528, 1937, 2468, 1443, 1200, 1066,
	1419, 1839, 173, 1761, 1115, 2424, 1558, 1558, 1571, 173,
	1583, 1072, 1115, 2036, 2402, 1084, 1595, 1596, 1598, 1909,
	173, 1424, 173, 1082, 173, 935, 670, 173, 2354, 173,
	1350, 173, 173, 1224, 173, 173, 1523, 1939, 2403, 694,
	1995, 692, 687, 173, 709, 1182, 699, 708, 415, 414,
	399, 699, 429, 1651, 1783, 1633, 995, 1633, 700, 1088,
	1623, 2425, 2308, 1905, 2316, 1513, 1000, 1818, 1510, 1781,
	1139, 969, 699, 1077, 405, 1087, 672, 1392, 1412, 401,
	1408, 432, 672, 2422, 2033, 2131, 2451, 2458, 1542, 402,
	2449, 428, 977, 1077, 1566, 1085, 1109, 1107, 1108, 1100,
	1101, 1102, 1103, 1105, 1106, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 1086, 2237, 1831, 1832, 695, 1484, 1625,
	1645, 1989, 2280, 893, 1018, 893, 421, 471, 932, 2164,
	2034, 1001, 1637, 1659, 2466, 173, 160, 1077, 1648, 1775,
	1778, 695, 695, 1646, 1649, 1647, 416, 1769, 472, 912,
	1779, 173, 173, 173, 1784, 173, 1654, 924, 1655, 115,
	1658, 1665, 2290, 1501, 2165, 115, 2475, 663, 1674, 1679,
	2289, 858, 389, 2272, 173, 161, 1508, 571, 2346, 1676,
	669, 173, 471, 1667, 1002, 1703, 2457, 173, 173, 2467,
	1709, 173, 1189, 1972, 1192, 1742, 173, 1186, 1185, 173,
	1677, 1049, 1330, 938, 1302, 1542, 2220, 173, 1831, 1832,
	2469, 1738, 1675, 173, 173, 173, 1304, 1626, 1672, 173,
	1482, 1485, 173, 1837, 1708, 1498, 1225, 2179, 173, 173,
	173, 173, 173, 950, 1214, 1017, 783, 173, 1203, 173,
	1496, 945, 1723, 173, 2032, 2389, 1722, 472, 1710, 1017,
	1707, 2479, 2105, 1481, 1345, 1053, 1711, 1712, 1732, 1685,
	1717, 1780, 1683, 1687, 2160, 115, 2161, 1689, 1782, 1305,
	462, 1727, 1758, 1739, 1251, 1056, 170, 472, 1763, 2072,
	393, 2239, 1847, 1718, 1704, 472, 1743, 1049, 408, 978,
	2273, 1051, 970, 467, 1748, 1016, 2163, 433, 951, 463,
	1054, 1747, 952, 575, 170, 2166, 2221, 583, 166, 1016,
	588, 1492, 1282, 592, 1734, 1052, 1837, 614, 1362, 1493,
	1018, 1494, 1309, 867, 582, 1499, 464, 2178, 390, 971,
	1715, 593, 968, 1699, 1756, 673, 2164, 1728, 866, 2157,
	417, 1053, 1789, 1716, 459, 1804, 466, 2155, 1483, 1792,
	580, 2159, 857, 2478, 1387, 1848, 1386, 950, 574, 950,
	670, 1056, 713, 713, 875, 2182, 1307, 1808, 1809, 886,
	393, 2165, 2181, 2073, 2095, 1847, 1055, 1051, 1308, 2074,
	418, 884, 2230, 2162, 1776, 1774, 1054, 800, 2270, 1363,
	1768, 462, 594, 2158, 391, 2137, 950, 393, 393, 746,
	393, 1052, 456, 33, 170, 755, 1790, 1949, 673, 173,
	419, 1863, 420, 2271, 467, 1857, 1545, 999, 2311, 173,
	463, 173, 1801, 173, 951, 695, 173, 1870, 952, 2219,
	173, 697, 1495, 1862, 2009, 173, 3, 173, 2003, 1497,
	1890, 988, 1892, 1885, 173, 994, 1714, 464, 1848, 1841,
	1833, 1834, 1835, 1836, 1838, 1839, 465, 173, 694, 1825,
	1893, 951, 1055, 1896, 673, 952, 1251, 466, 1785, 694,
	173, 2160, 2180, 2161, 455, 32, 753, 986, 1743, 694,
	1669, 1919, 1920, 1606, 1921, 1922, 1925, 984, 1907, 1865,
	1866, 1867, 595, 1913, 756, 1441, 773, 1934, 454, 29,
	173, 982, 1544, 2163, 1282, 1435, 579, 1008, 980, 757,
	1007, 468, 2166, 472, 573, 1251, 1053, 173, 930, 1894,
	451, 21, 885, 173, 974, 685, 882, 1927, 452, 22,
	1910, 1343, 173, 173, 883, 2418, 1056, 33, 998, 1918,
	392, 1787, 1788, 1833, 1834, 1835, 1836, 1838, 1839, 1334,
	1967, 1924, 1390, 1282, 702, 704, 450, 19, 448, 18,
	1163, 1054, 987, 993, 1935, 1936, 1960, 2386, 472, 1940,
	596, 736, 1942, 2153, 1984, 1993, 1991, 465, 1965, 2002,
	1983, 1971, 1898, 1629, 1982, 1622, 1956, 1992, 1944, 1994,
	2162, 1947, 1234, 1953, 1950, 1952, 1998, 1233, 985, 1231,
	1228, 2000, 597, 1900, 449, 17, 1226, 1281, 983, 32,
	2012, 442, 13, 1089, 444, 16, 1854, 1855, 1856, 173,
	1968, 1083, 981, 115, 2028, 2029, 2030, 1078, 2016, 979,
	731, 1975, 468, 29, 443, 14, 614, 1055, 871, 614,
	1251, 876, 1996, 854, 2023, 973, 879, 881, 2327, 441,
	12, 963, 393, 592, 591, 21, 592, 740, 744, 2453,
	750, 2250, 2249, 22, 721, 614, 614, 393, 901, 755,
	1020, 593, 2019, 1325, 593, 2120, 1251, 1251, 1282, 2329,
	457, 1415, 2022, 1431, 722, 1251, 1251, 1430, 1449, 2047,
	173, 19, 173, 18, 2112, 2077, 2356, 1449, 2052, 173,
	2044, 2046, 694, 447, 10, 2049, 2087, 473, 2172, 2101,
	2051, 440, 8, 2098, 1282, 1282, 173, 173, 1251, 2079,
	972, 2114, 2364, 1282, 1282, 2035, 2037, 2038, 446, 6,
	2083, 1697, 594, 2106, 173, 594, 445, 5, 2080, 17,
	2138, 1024, 173, 1021, 1439, 1415, 13, 471, 2107, 16,
	581, 1428, 173, 1433, 1250, 173, 1282, 723, 439, 4,
	2385, 2235, 2096, 696, 2111, 471, 173, 173, 1636, 14,
	173, 173, 173, 2141, 1281, 1281, 2109, 2133, 1624, 2108,
	1621, 2117, 2115, 2121, 12, 2148, 1707, 173, 1376, 2134,
	2116, 1300, 173, 1698, 173, 1243, 173, 173, 173, 2472,
	173, 2173, 173, 2477, 694, 2177, 2264, 2145, 614, 2147,
	2140, 1096, 1097, 1984, 2144, 2007, 2008, 2143, 2142, 1983,
	2122, 2139, 2092, 1982, 933, 2039, 2152, 1831, 1832, 2193,
	1096, 1097, 595, 1028, 2198, 595, 1028, 1027, 10, 1931,
	1877, 614, 1724, 173, 695, 1605, 8, 1602, 2176, 1096,
	1097, 1601, 1534, 1150, 1029, 695, 2206, 2031, 1098, 1895,
	1160, 1158, 1006, 6, 1251, 695, 997, 992, 989, 975,
	937, 5, 1099, 661, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 4, 2075, 2278, 1098, 460, 393, 1333,
	173, 173, 1282, 976, 1720, 1395, 2401, 694, 2218, 2212,
	596, 590, 744, 596, 1817, 2339, 2307, 1543, 2233, 1161,
	52, 1250, 1250, 1980, 777, 1984, 2154, 750, 1974, 1616,
	1984, 1983, 1615, 474, 1312, 1982, 1983, 799, 2240, 679,
	1982, 1557, 597, 1450, 859, 597, 588, 801, 713, 1248,
	802, 2234, 2246, 2241, 173, 1249, 173, 1190, 471, 173,
	2231, 789, 1246, 909, 1640, 2236, 2256, 173, 2242, 1506,
	2247, 393, 393, 471, 1524, 2260, 1800, 1154, 769, 781,
	780, 1521, 1236, 928, 1725, 1908, 2243, 1361, 1688, 170,
	2261, 2263, 1358, 1990, 1365, 403, 1828, 1984, 907, 1580,
	2268, 1572, 2282, 1983, 1568, 2284, 1009, 1982, 2266, 1045,
	1140, 1641, 2286, 1200, 960, 2283, 1914, 2281, 1662, 2293,
	2294, 1037, 2300, 1369, 2306, 720, 719, 958, 1306, 1673,
	2299, 1133, 1132, 706, 2348, 949, 948, 1251, 173, 1204,
	1741, 694, 2473, 2355, 1987, 173, 2313, 2395, 130, 2292,
	127, 129, 128, 173, 173, 694, 694, 1767, 79, 173,
	1984, 31, 30, 2328, 173, 98, 1983, 97, 96, 95,
	1982, 173, 2324, 2326, 2321, 1282, 1251, 94, 2336, 2335,
	2350, 696, 93, 2337, 2338, 92, 91, 2325, 695, 90,
	2344, 89, 2345, 88, 2330, 2318, 173, 173, 1281, 87,
	393, 1284, 86, 2353, 85, 84, 2352, 2342, 83, 82,
	81, 610, 1212, 78, 1282, 77, 76, 173, 393, 75,
	393, 28, 393, 2372, 2363, 694, 1220, 2370, 24, 102,
	173, 23, 2373, 472, 694, 694, 2366, 27, 26, 15,
	9, 20, 57, 58, 56, 55, 2376, 54, 1574, 11,
	173, 472, 173, 50, 49, 173, 47, 471, 744, 2381,
	2382, 170, 673, 46, 45, 44, 1251, 7, 101, 170,
	2391, 2375, 41, 2407, 40, 614, 2409, 100, 113, 110,
	112, 2408, 109, 111, 2392, 173, 2413, 114, 106, 2411,
	695, 107, 108, 105, 104, 37, 2398, 2399, 2400, 2397,
	2416, 2404, 1984, 2417, 1282, 614, 2275, 173, 1983, 2428,
	614, 2442, 1982, 173, 2440, 170, 614, 2432, 614, 173,
	614, 2444, 614, 36, 614, 2441, 2445, 2446, 35, 2450,
	34, 731, 1069, 2454, 2448, 1344, 2, 2410, 2456, 1,
	0, 614, 614, 0, 0, 1250, 0, 0, 0, 0,
	0, 2464, 0, 2463, 0, 0, 0, 696, 2471, 2470,
	2310, 0, 0, 0, 0, 0, 2476, 0, 1284, 1284,
	588, 458, 713, 0, 2480, 755, 0, 0, 0, 696,
	0, 0, 1283, 0, 0, 0, 0, 0, 393, 0,
	1281, 459, 0, 695, 0, 0, 0, 38, 0, 0,
	1407, 0, 0, 0, 393, 0, 0, 393, 39, 0,
	0, 1420, 0, 0, 0, 393, 0, 1247, 0, 0,
	393, 42, 0, 0, 0, 0, 393, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 0, 462, 1281,
	38, 0, 0, 48, 472, 0, 0, 0, 0, 0,
	0, 39, 2365, 0, 0, 0, 0, 0, 0, 472,
	1199, 467, 0, 0, 42, 0, 0, 463, 0, 0,
	0, 0, 59, 759, 860, 0, 0, 0, 744, 60,
	1217, 61, 1217, 0, 0, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 464, 696, 0, 0, 0, 0,
	0, 0, 473, 0, 0, 63, 0, 0, 64, 0,
	0, 0, 0, 0, 466, 59, 0, 0, 0, 0,
	0, 0, 60, 0, 61, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 1612, 0,
	0, 695, 695, 0, 0, 755, 0, 0, 63, 1283,
	1283, 64, 0, 0, 0, 0, 393, 0, 1644, 0,
	614, 0, 0, 614, 1281, 614, 0, 393, 393, 0,
	1650, 755, 0, 0, 0, 0, 1574, 1574, 0, 1420,
	0, 0, 0, 0, 1247, 1247, 1250, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 1281, 0, 0, 0, 0, 0, 0, 0, 1281,
	1281, 695, 0, 0, 67, 0, 68, 0, 0, 0,
	695, 695, 0, 0, 465, 0, 0, 0, 0, 131,
	0, 65, 0, 1682, 0, 0, 0, 0, 0, 99,
	0, 0, 1281, 472, 0, 0, 0, 0, 731, 0,
	0, 1574, 1574, 1574, 0, 0, 927, 67, 133, 68,
	0, 0, 931, 0, 731, 0, 0, 1410, 0, 0,
	0, 1681, 131, 0, 696, 744, 1341, 0, 0, 468,
	744, 0, 99, 0, 0, 0, 750, 393, 393, 393,
	0, 393, 1284, 0, 132, 0, 0, 0, 696, 696,
	0, 133, 125, 0, 0, 473, 0, 0, 0, 126,
	393, 1250, 0, 0, 0, 0, 0, 393, 0, 0,
	0, 0, 0, 393, 393, 0, 0, 393, 118, 0,
	0, 0, 1407, 0, 0, 1407, 0, 132, 0, 0,
	0, 0, 0, 1730, 0, 125, 0, 1250, 1250, 393,
	1736, 1737, 126, 0, 0, 1420, 1250, 1250, 1744, 0,
	0, 0, 0, 436, 1749, 1750, 1752, 1754, 1755, 0,
	0, 118, 0, 393, 0, 1762, 0, 0, 0, 1765,
	0, 0, 0, 0, 38, 0, 0, 0, 1281, 1250,
	0, 0, 0, 0, 0, 39, 0, 0, 0, 0,
	0, 0, 1042, 1042, 473, 0, 0, 0, 42, 1047,
	0, 0, 0, 0, 0, 0, 1642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 750, 0,
	48, 0, 0, 0, 473, 1831, 1832, 0, 1849, 1850,
	1851, 0, 473, 0, 0, 1134, 1135, 1136, 1137, 1138,
	1574, 1574, 0, 0, 0, 1147, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 1155, 60, 0, 61, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 1096, 1097, 0, 1284, 0, 0, 0, 1846, 0,
	0, 0, 63, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 778, 72, 0, 1247, 1574,
	1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
	1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1098, 1574,
	0, 0, 0, 1284, 0, 1250, 0, 0, 0, 0,
	0, 0, 0, 1837, 0, 393, 0, 1684, 750, 1686,
	0, 744, 0, 0, 0, 1212, 0, 1212, 0, 614,
	0, 1281, 393, 0, 1853, 0, 1903, 72, 0, 0,
	1700, 393, 0, 1912, 0, 65, 0, 731, 0, 0,
	393, 1852, 696, 731, 731, 0, 0, 731, 0, 1104,
	0, 0, 0, 1681, 0, 0, 0, 0, 0, 0,
	1281, 67, 1847, 68, 0, 0, 1681, 0, 0, 1735,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 666, 0, 0, 674, 0, 99, 0, 0, 0,
	0, 0, 0, 1760, 0, 0, 393, 0, 0, 732,
	72, 0, 0, 0, 0, 133, 0, 0, 1114, 0,
	0, 0, 0, 393, 0, 0, 0, 0, 1284, 1407,
	0, 0, 0, 0, 0, 1283, 0, 0, 755, 1407,
	473, 0, 0, 0, 0, 1848, 0, 0, 0, 0,
	0, 132, 0, 1979, 0, 0, 0, 0, 0, 125,
	1281, 0, 0, 0, 1284, 1284, 126, 0, 0, 1359,
	1247, 1364, 0, 1284, 1284, 1096, 1097, 1371, 1250, 0,
	0, 0, 0, 0, 1283, 437, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 473, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 1247,
	0, 0, 1098, 0, 0, 2041, 0, 0, 0, 0,
	0, 0, 1843, 1844, 1845, 0, 0, 1842, 1840, 1841,
	1833, 1834, 1835, 1836, 1838, 1839, 0, 0, 0, 0,
	0, 0, 0, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1886, 1486, 0, 1488, 1489,
	1490, 1491, 0, 1104, 0, 1108, 1100, 1101, 1102, 1103,
	1105, 1106, 1897, 0, 0, 1514, 1420, 0, 1212, 0,
	0, 1199, 1147, 0, 0, 2103, 0, 1250, 0, 1283,
	1199, 1574, 0, 0, 0, 0, 0, 0, 0, 0,
	1553, 1554, 393, 393, 1570, 0, 1582, 1584, 1589, 1592,
	1593, 1594, 0, 0, 0, 0, 0, 0, 0, 0,
	2128, 0, 1114, 0, 1247, 1283, 1283, 0, 2130, 0,
	0, 0, 1284, 0, 1283, 1283, 0, 0, 393, 0,
	0, 755, 0, 0, 0, 1574, 1945, 0, 0, 0,
	0, 0, 1407, 755, 0, 0, 2150, 2151, 1420, 0,
	1247, 1247, 0, 731, 0, 0, 0, 1283, 0, 1247,
	1247, 0, 1979, 755, 0, 0, 0, 0, 2184, 0,
	2185, 0, 393, 2187, 2188, 0, 393, 0, 2192, 0,
	0, 0, 0, 674, 0, 1115, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1831, 1832, 0, 1849,
	1850, 1851, 0, 0, 0, 0, 0, 0, 0, 2213,
	0, 0, 0, 0, 0, 0, 0, 1574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 0, 0, 1846,
	0, 0, 696, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1979, 0, 755, 1612, 0, 1979,
	1100, 1101, 1102, 1103, 1105, 1106, 0, 0, 0, 1057,
	0, 0, 0, 0, 0, 1284, 0, 0, 0, 0,
	0, 0, 1042, 1283, 0, 38, 0, 1047, 0, 0,
	0, 0, 0, 0, 1837, 0, 39, 1831, 1832, 0,
	1849, 1850, 1851, 0, 0, 0, 0, 0, 0, 42,
	1420, 0, 2267, 2196, 1284, 2269, 0, 0, 1247, 0,
	0, 0, 0, 393, 0, 0, 1979, 0, 0, 0,
	0, 48, 1642, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1846, 2301, 0, 1847, 0, 0, 0, 0, 39, 0,
	59, 0, 0, 0, 0, 0, 0, 60, 731, 61,
	0, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1771, 1772, 0, 0, 0, 1979,
	1777, 0, 0, 63, 393, 0, 64, 0, 0, 0,
	0, 755, 666, 0, 1284, 1837, 0, 0, 0, 2128,
	2128, 0, 2186, 0, 0, 2341, 2190, 0, 0, 0,
	1407, 0, 1796, 0, 0, 0, 1848, 1212, 0, 1803,
	0, 0, 1807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1852, 0, 0, 0, 0, 0, 1821,
	0, 0, 2357, 2358, 0, 72, 1283, 0, 64, 0,
	1065, 0, 0, 0, 1847, 696, 0, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 65, 0, 0, 0,
	0, 1147, 0, 0, 0, 0, 2380, 0, 1589, 1589,
	1589, 1247, 0, 0, 0, 1283, 1143, 0, 1146, 0,
	0, 0, 67, 0, 68, 1151, 2390, 0, 755, 0,
	473, 393, 0, 1843, 1844, 1845, 0, 131, 1842, 1840,
	1841, 1833, 1834, 1835, 1836, 1838, 1839, 99, 473, 0,
	1247, 1979, 0, 0, 1906, 0, 0, 1848, 65, 0,
	0, 2341, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1923, 0, 0, 0,
	0, 0, 0, 755, 67, 0, 68, 696, 0, 393,
	0, 0, 0, 0, 0, 2447, 0, 0, 0, 131,
	0, 0, 132, 2276, 0, 1283, 0, 0, 0, 99,
	125, 0, 0, 1943, 0, 0, 0, 126, 1371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 1955, 0,
	1247, 0, 0, 0, 1843, 1844, 1845, 0, 0, 1842,
	1840, 1841, 1833, 1834, 1835, 1836, 1838, 1839, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 1976, 0,
	0, 0, 125, 0, 2323, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 2005, 0, 0, 2006, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2011, 0,
	0, 0, 0, 0, 1096, 1097, 0, 2020, 0, 0,
	1126, 1127, 1128, 0, 0, 2024, 0, 0, 1923, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 72,
	1130, 473, 0, 0, 0, 0, 0, 0, 2048, 0,
	0, 0, 2050, 2369, 0, 0, 473, 0, 0, 0,
	0, 1098, 0, 0, 0, 666, 0, 1113, 666, 666,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2081, 2082, 0, 0, 0,
	0, 2394, 0, 0, 2088, 2089, 2090, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 696, 0, 72, 0, 1042, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 696, 696,
	1047, 0, 1123, 1131, 0, 0, 0, 0, 0, 1642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 1097, 0, 1116,
	1117, 1118, 1126, 1127, 1128, 1121, 0, 1504, 0, 0,
	0, 1114, 1119, 0, 0, 0, 0, 0, 0, 1099,
	674, 0, 1130, 0, 0, 1146, 0, 0, 0, 0,
	0, 0, 0, 0, 2174, 0, 0, 0, 696, 0,
	0, 0, 0, 1098, 0, 0, 0, 696, 696, 1113,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 2197, 0, 39, 0, 2200, 2201, 0, 0,
	473, 2203, 0, 0, 0, 0, 0, 42, 2205, 0,
	2207, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 72, 0, 2214, 0, 0, 48,
	1124, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 1123, 1131, 0, 0, 59, 2223,
	0, 0, 0, 0, 0, 60, 0, 61, 0, 0,
	0, 0, 1129, 0, 0, 0, 1096, 1097, 0, 1116,
	1117, 1118, 1126, 1127, 1128, 0, 0, 1121, 0, 0,
	0, 63, 1119, 1114, 64, 0, 0, 0, 1122, 1099,
	0, 0, 1130, 0, 1125, 0, 1109, 1107, 1108, 1100,
	1101, 1102, 1103, 1105, 1106, 0, 0, 0, 1120, 0,
	2259, 0, 0, 1098, 0, 0, 0, 0, 0, 1113,
	1831, 1832, 0, 1849, 1850, 1851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2195, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2291, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 2302, 2303,
	0, 0, 1124, 1846, 1104, 0, 732, 0, 0, 0,
	0, 0, 732, 732, 0, 0, 732, 0, 0, 0,
	67, 0, 68, 0, 1123, 1131, 0, 0, 0, 2315,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1121, 1837, 72,
	0, 0, 0, 1114, 133, 72, 0, 0, 0, 0,
	1122, 0, 0, 1110, 1111, 1112, 1125, 2347, 1109, 1107,
	1108, 1100, 1101, 1102, 1103, 1105, 1106, 0, 1120, 0,
	0, 0, 0, 0, 0, 1872, 1852, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 1504, 0, 0, 0, 126, 0, 1847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1146, 0, 0, 118, 1047, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1848, 0, 0, 0, 0, 0, 0, 0, 0, 2429,
	0, 0, 0, 0, 1146, 2439, 2439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 0, 0, 1110, 1111, 1112, 1125, 0, 1109, 1107,
	1108, 1100, 1101, 1102, 1103, 1105, 1106, 0, 0, 2439,
	0, 0, 0, 0, 0, 1871, 0, 72, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2439, 0, 1843, 1844, 1845,
	0, 0, 1842, 1840, 1841, 1833, 1834, 1835, 1836, 1838,
	1839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 1533,
	0, 797, 786, 787, 784, 785, 776, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 175, 176, 1530,
	177, 0, 0, 0, 0, 814, 779, 0, 0, 0,
	178, 179, 180, 332, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 782, 813, 833, 834,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 1531, 0, 828, 204, 0, 205, 0, 0,
	0, 770, 206, 207, 208, 815, 816, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 479, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 765, 0, 794, 823,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 732, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 771, 280, 732, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 488, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 820, 821, 792,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 853, 1529,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 766, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 762, 763, 1532, 0, 0, 0, 0, 0,
	0, 772, 1527, 0, 0, 0, 0, 775, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	470, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2331, 0, 175, 176, 489, 177,
	490, 491, 492, 493, 331, 494, 495, 496, 497, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 498,
	182, 338, 339, 183, 184, 499, 500, 340, 341, 342,
	501, 185, 343, 502, 475, 503, 186, 187, 188, 0,
	189, 504, 190, 191, 192, 505, 476, 193, 194, 195,
	506, 507, 509, 508, 510, 511, 512, 196, 197, 394,
	198, 344, 199, 345, 346, 513, 200, 514, 201, 515,
	202, 516, 517, 203, 204, 518, 205, 519, 1146, 520,
	347, 206, 207, 208, 348, 349, 521, 522, 523, 209,
	210, 350, 351, 352, 0, 211, 524, 212, 525, 526,
	477, 527, 213, 353, 528, 354, 529, 214, 215, 216,
	217, 218, 355, 356, 479, 530, 222, 531, 219, 532,
	478, 220, 357, 221, 358, 359, 360, 361, 362, 533,
	363, 534, 480, 223, 224, 225, 481, 226, 227, 228,
	535, 230, 229, 536, 364, 482, 231, 483, 537, 232,
	538, 539, 233, 0, 234, 235, 236, 238, 365, 237,
	484, 239, 240, 242, 241, 540, 541, 542, 366, 243,
	367, 244, 245, 543, 246, 544, 545, 247, 546, 547,
	248, 368, 485, 249, 486, 369, 250, 251, 252, 253,
	254, 548, 255, 370, 256, 371, 257, 549, 258, 259,
	260, 261, 262, 372, 263, 264, 550, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 551,
	277, 487, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 552, 289, 374, 288, 290, 291, 553, 292, 281,
	282, 293, 488, 294, 375, 376, 295, 554, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 555, 303,
	556, 304, 305, 306, 307, 308, 309, 310, 557, 379,
	380, 381, 558, 559, 311, 312, 382, 383, 560, 313,
	314, 315, 316, 561, 562, 317, 318, 319, 320, 563,
	321, 564, 384, 322, 323, 324, 385, 386, 565, 566,
	325, 567, 568, 569, 570, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 470, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 0, 1401, 175, 176,
	489, 177, 490, 491, 492, 493, 331, 494, 495, 496,
	497, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 498, 182, 338, 339, 183, 184, 499, 500, 340,
	341, 342, 501, 185, 343, 502, 475, 503, 186, 187,
	188, 0, 189, 504, 190, 191, 192, 505, 476, 193,
	194, 195, 506, 507, 509, 508, 510, 511, 512, 196,
	197, 394, 198, 344, 199, 345, 346, 513, 200, 514,
	201, 515, 202, 516, 517, 203, 204, 518, 205, 519,
	0, 520, 347, 206, 207, 208, 348, 349, 521, 522,
	523, 209, 210, 350, 351, 352, 0, 211, 524, 212,
	525, 526, 477, 527, 213, 353, 528, 354, 529, 214,
	215, 216, 217, 218, 355, 356, 479, 530, 222, 531,
	219, 532, 478, 220, 357, 221, 358, 359, 360, 361,
	362, 533, 363, 534, 480, 223, 224, 225, 481, 226,
	227, 228, 535, 230, 229, 536, 364, 482, 231, 483,
	537, 232, 538, 539, 233, 0, 234, 235, 236, 238,
	365, 237, 484, 239, 240, 242, 241, 540, 541, 542,
	366, 243, 367, 244, 245, 543, 246, 544, 545, 247,
	546, 547, 248, 368, 485, 249, 486, 369, 250, 251,
	252, 253, 254, 548, 255, 370, 256, 371, 257, 549,
	258, 259, 260, 261, 262, 372, 263, 264, 550, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 551, 277, 487, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 552, 289, 374, 288, 290, 291, 553,
	292, 281, 282, 293, 488, 294, 375, 376, 295, 554,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	555, 303, 556, 304, 305, 306, 307, 308, 309, 310,
	557, 379, 380, 381, 558, 559, 311, 312, 382, 383,
	560, 313, 314, 315, 316, 561, 562, 317, 318, 319,
	320, 563, 321, 564, 384, 322, 323, 324, 385, 386,
	565, 566, 325, 567, 568, 569, 570, 326, 327, 328,
	329, 330, 0, 0, 0, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2146, 175, 176, 489, 177, 490, 491, 492, 493, 331,
	494, 495, 496, 497, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 498, 182, 338, 339, 183, 184,
	499, 500, 340, 341, 342, 501, 185, 343, 502, 475,
	503, 186, 187, 188, 0, 189, 504, 190, 191, 192,
	505, 476, 193, 194, 195, 506, 507, 509, 508, 510,
	511, 512, 196, 197, 394, 198, 344, 199, 345, 346,
	513, 200, 514, 201, 515, 202, 516, 517, 203, 204,
	518, 205, 519, 0, 520, 347, 206, 207, 208, 348,
	349, 521, 522, 523, 209, 210, 350, 351, 352, 0,
	211, 524, 212, 525, 526, 477, 527, 213, 353, 528,
	354, 529, 214, 215, 216, 217, 218, 355, 356, 479,
	530, 222, 531, 219, 532, 478, 220, 357, 221, 358,
	359, 360, 361, 362, 533, 363, 534, 480, 223, 224,
	225, 481, 226, 227, 228, 535, 230, 229, 536, 364,
	482, 231, 483, 537, 232, 538, 539, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	540, 541, 542, 366, 243, 367, 244, 245, 543, 246,
	544, 545, 247, 546, 547, 248, 368, 485, 249, 486,
	369, 250, 251, 252, 253, 254, 548, 255, 370, 256,
	371, 257, 549, 258, 259, 260, 261, 262, 372, 263,
	264, 550, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 551, 277, 487, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 552, 289, 374, 288,
	290, 291, 553, 292, 281, 282, 293, 488, 294, 375,
	376, 295, 554, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 555, 303, 556, 304, 305, 306, 307,
	308, 309, 310, 557, 379, 380, 381, 558, 559, 311,
	312, 382, 383, 560, 313, 314, 315, 316, 561, 562,
	317, 318, 319, 320, 563, 321, 564, 384, 322, 323,
	324, 385, 386, 565, 566, 325, 567, 568, 569, 570,
	326, 327, 328, 329, 330, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 175, 176, 489, 177, 490, 491, 492, 493, 331,
	494, 495, 496, 497, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 498, 182, 338, 339, 183, 184,
	499, 500, 340, 341, 342, 501, 185, 343, 502, 475,
	503, 186, 187, 188, 0, 189, 504, 190, 191, 192,
	505, 476, 193, 194, 195, 506, 507, 509, 508, 510,
	511, 512, 196, 197, 394, 198, 344, 199, 345, 346,
	513, 200, 514, 201, 515, 202, 516, 517, 203, 204,
	518, 205, 519, 0, 520, 347, 206, 207, 208, 348,
	349, 521, 522, 523, 209, 210, 350, 351, 352, 0,
	211, 524, 212, 525, 526, 477, 527, 213, 353, 528,
	354, 529, 214, 215, 216, 217, 218, 355, 356, 479,
	530, 222, 531, 219, 532, 478, 220, 357, 221, 358,
	359, 360, 361, 362, 533, 363, 534, 480, 223, 224,
	225, 481, 226, 227, 228, 535, 230, 229, 536, 364,
	482, 231, 483, 537, 232, 538, 539, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	540, 541, 542, 366, 243, 367, 244, 245, 543, 246,
	544, 545, 247, 546, 547, 248, 368, 485, 249, 486,
	369, 250, 251, 252, 253, 254, 548, 255, 370, 256,
	371, 257, 549, 258, 259, 260, 261, 262, 372, 263,
	264, 550, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 551, 277, 487, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 552, 289, 374, 288,
	290, 291, 553, 292, 281, 282, 293, 488, 294, 375,
	376, 295, 554, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 555, 303, 556, 304, 305, 306, 307,
	308, 309, 310, 557, 379, 380, 381, 558, 559, 311,
	312, 382, 383, 560, 313, 314, 315, 316, 561, 562,
	317, 318, 319, 320, 563, 321, 564, 384, 322, 323,
	324, 385, 386, 565, 566, 325, 567, 568, 569, 570,
	326, 327, 328, 329, 330, 797, 786, 787, 784, 785,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 332, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 199, 836, 837,
	1048, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 216, 217, 218, 822, 824, 479,
	0, 222, 0, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 287, 131, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 133, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 913, 853, 0, 0, 325, 0, 0, 0, 125,
	326, 327, 328, 329, 330, 766, 126, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 0, 0,
	0, 0, 0, 0, 0, 1149, 0, 0, 0, 0,
	675, 775, 797, 786, 787, 784, 785, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 814, 779, 0, 0,
	0, 178, 179, 180, 332, 829, 334, 830, 181, 831,
	832, 0, 182, 338, 339, 183, 184, 782, 813, 833,
	834, 342, 0, 185, 825, 0, 805, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 476, 193,
	194, 195, 0, 806, 807, 809, 0, 808, 810, 196,
	197, 394, 198, 835, 199, 836, 837, 0, 200, 0,
	201, 0, 202, 0, 0, 828, 204, 0, 205, 0,
	0, 0, 770, 206, 207, 208, 815, 816, 793, 0,
	0, 209, 210, 838, 839, 840, 0, 211, 0, 212,
	0, 0, 477, 0, 213, 826, 0, 354, 0, 214,
	215, 216, 217, 218, 822, 824, 479, 0, 222, 0,
	219, 0, 478, 220, 841, 221, 842, 843, 844, 845,
	846, 0, 804, 0, 480, 223, 224, 225, 481, 226,
	227, 228, 0, 230, 229, 0, 827, 482, 231, 483,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 484, 239, 240, 242, 241, 765, 0, 794,
	823, 243, 847, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 485, 249, 486, 817, 250, 251,
	252, 253, 254, 0, 255, 818, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 848, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 487, 278, 279, 771, 280, 0, 284,
	285, 286, 287, 131, 289, 374, 288, 290, 291, 811,
	292, 281, 282, 293, 488, 294, 849, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 850, 299, 300, 819,
	0, 303, 133, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 851, 852, 0, 0, 311, 312, 820, 821,
	792, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 812, 321, 0, 384, 322, 323, 324, 913, 853,
	0, 0, 325, 0, 0, 0, 125, 326, 327, 328,
	329, 330, 766, 126, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 762, 763, 797, 786, 787, 784, 785,
	776, 0, 1149, 0, 0, 0, 0, 0, 775, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 332, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 199, 836, 837,
	0, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 216, 217, 218, 822, 824, 479,
	0, 222, 0, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 287, 131, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 133, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 913, 853, 0, 0, 325, 0, 0, 0, 125,
	326, 327, 328, 329, 330, 766, 126, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 797, 786,
	787, 784, 785, 776, 0, 1149, 0, 0, 0, 0,
	0, 775, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 814, 779, 0, 0, 0, 178, 179, 180,
	332, 829, 334, 830, 181, 831, 832, 1585, 182, 338,
	339, 183, 184, 782, 813, 833, 834, 342, 0, 185,
	825, 0, 805, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 476, 193, 194, 195, 0, 806,
	807, 809, 0, 808, 810, 196, 197, 394, 198, 835,
	199, 836, 837, 0, 200, 0, 201, 0, 202, 0,
	0, 828, 204, 0, 205, 0, 0, 0, 770, 206,
	207, 208, 815, 816, 793, 0, 0, 209, 210, 838,
	839, 840, 0, 211, 0, 212, 0, 1590, 477, 0,
	213, 826, 0, 354, 0, 214, 215, 216, 217, 218,
	822, 824, 479, 0, 222, 0, 219, 0, 478, 220,
	841, 221, 842, 843, 844, 845, 846, 0, 804, 0,
	480, 223, 224, 225, 481, 226, 227, 228, 0, 230,
	229, 1586, 827, 482, 231, 483, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 484, 239,
	240, 242, 241, 765, 0, 794, 823, 243, 847, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	485, 249, 486, 817, 250, 251, 252, 253, 254, 0,
	255, 818, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 848, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 487,
	278, 279, 771, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 811, 292, 281, 282, 293,
	488, 294, 849, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 850, 299, 300, 819, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 851, 852,
	0, 1587, 311, 312, 820, 821, 792, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 812, 321, 0,
	384, 322, 323, 324, 385, 853, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 766, 0,
	0, 0, 0, 0, 764, 0, 0, 0, 0, 762,
	763, 797, 786, 787, 784, 785, 776, 0, 772, 0,
	0, 0, 0, 0, 775, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 814, 779, 0, 0, 0,
	178, 179, 180, 332, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 782, 813, 833, 834,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 0, 0, 828, 204, 0, 205, 0, 0,
	0, 770, 206, 207, 208, 815, 816, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 479, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 765, 2110, 794, 823,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 0, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 771, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 488, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 820, 821, 792,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 853, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 766, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 762, 763, 1043, 797, 786, 787, 784, 785,
	776, 772, 0, 0, 0, 0, 0, 775, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 332, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 199, 836, 837,
	0, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 216, 217, 218, 822, 824, 479,
	0, 222, 1373, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 1372, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 385, 853, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 766, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 797, 786,
	787, 784, 785, 776, 0, 772, 0, 0, 0, 0,
	0, 775, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 814, 779, 0, 0, 0, 178, 179, 180,
	332, 829, 334, 830, 181, 831, 832, 0, 182, 338,
	339, 183, 184, 782, 813, 833, 834, 342, 0, 185,
	825, 0, 805, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 476, 193, 194, 195, 0, 806,
	807, 809, 0, 808, 810, 196, 197, 394, 198, 835,
	199, 836, 837, 0, 200, 0, 201, 0, 202, 0,
	0, 828, 204, 0, 205, 0, 0, 0, 770, 206,
	207, 208, 815, 816, 793, 0, 0, 209, 210, 838,
	839, 840, 0, 211, 0, 212, 0, 0, 477, 0,
	213, 826, 0, 354, 0, 214, 215, 216, 217, 218,
	822, 824, 479, 0, 222, 0, 219, 0, 478, 220,
	841, 221, 842, 843, 844, 845, 846, 0, 804, 0,
	480, 223, 224, 225, 481, 226, 227, 228, 0, 230,
	229, 0, 827, 482, 231, 483, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 484, 239,
	240, 242, 241, 765, 0, 794, 823, 243, 847, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	485, 249, 486, 817, 250, 251, 252, 253, 254, 0,
	255, 818, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 848, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 487,
	278, 279, 771, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 811, 292, 281, 282, 293,
	488, 294, 849, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 850, 299, 300, 819, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 851, 852,
	0, 0, 311, 312, 820, 821, 792, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 812, 321, 0,
	384, 322, 323, 324, 385, 853, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 766, 0,
	0, 0, 0, 0, 764, 0, 0, 0, 0, 762,
	763, 0, 0, 0, 0, 0, 1153, 1522, 772, 0,
	0, 0, 0, 0, 775, 797, 786, 787, 784, 785,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 332, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 199, 836, 837,
	1048, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 216, 217, 218, 822, 824, 479,
	0, 222, 0, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 385, 853, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 766, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 797, 786,
	787, 784, 785, 776, 0, 772, 0, 0, 0, 0,
	0, 775, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 814, 779, 0, 0, 0, 178, 179, 180,
	332, 829, 334, 830, 181, 831, 832, 0, 182, 338,
	339, 183, 184, 782, 813, 833, 834, 342, 0, 185,
	825, 0, 805, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 476, 193, 194, 195, 0, 806,
	807, 809, 0, 808, 810, 196, 197, 394, 198, 835,
	199, 836, 837, 0, 200, 0, 201, 0, 202, 0,
	0, 828, 204, 0, 205, 0, 0, 0, 770, 206,
	207, 208, 815, 816, 793, 0, 0, 209, 210, 838,
	839, 840, 0, 211, 0, 212, 0, 0, 477, 0,
	213, 826, 0, 354, 0, 214, 215, 216, 217, 218,
	822, 824, 479, 0, 222, 0, 219, 0, 478, 220,
	841, 221, 842, 843, 844, 845, 846, 0, 804, 0,
	480, 223, 224, 225, 481, 226, 227, 228, 0, 230,
	229, 0, 827, 482, 231, 483, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 484, 239,
	240, 242, 241, 765, 0, 794, 823, 243, 847, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	485, 249, 486, 817, 250, 251, 252, 253, 254, 0,
	255, 818, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 848, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 487,
	278, 279, 771, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 811, 292, 281, 282, 293,
	488, 294, 849, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 850, 299, 300, 819, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 851, 852,
	0, 0, 311, 312, 820, 821, 792, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 812, 321, 0,
	384, 322, 323, 324, 385, 853, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 766, 0,
	0, 0, 0, 0, 764, 0, 0, 0, 0, 762,
	763, 797, 786, 787, 784, 785, 776, 0, 772, 2078,
	0, 0, 0, 0, 775, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 814, 779, 0, 0, 0,
	178, 179, 180, 332, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 782, 813, 833, 834,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 0, 0, 828, 204, 0, 205, 0, 0,
	0, 770, 206, 207, 208, 815, 816, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 479, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 765, 0, 794, 823,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 0, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 771, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 488, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 820, 821, 792,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 853, 2027,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 766, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 762, 763, 797, 786, 787, 784, 785, 776,
	0, 772, 0, 0, 0, 0, 0, 775, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 814, 779,
	0, 0, 0, 178, 179, 180, 332, 829, 334, 830,
	181, 831, 832, 0, 182, 338, 339, 183, 184, 782,
	813, 833, 834, 342, 0, 185, 825, 0, 805, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	476, 193, 194, 195, 0, 806, 807, 809, 0, 808,
	810, 196, 197, 394, 198, 835, 199, 836, 837, 0,
	200, 0, 201, 0, 202, 0, 0, 828, 204, 0,
	205, 0, 0, 0, 770, 206, 207, 208, 815, 816,
	793, 0, 0, 209, 210, 838, 839, 840, 0, 211,
	0, 212, 0, 0, 477, 0, 213, 826, 0, 354,
	0, 214, 215, 216, 217, 218, 822, 824, 479, 0,
	222, 0, 219, 0, 478, 220, 841, 221, 842, 843,
	844, 845, 846, 0, 804, 0, 480, 223, 224, 225,
	481, 226, 227, 228, 0, 230, 229, 0, 827, 482,
	231, 483, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 484, 239, 240, 242, 241, 765,
	0, 794, 823, 243, 847, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 485, 249, 486, 817,
	250, 251, 252, 253, 254, 0, 255, 818, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 848, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 487, 278, 279, 771, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 811, 292, 281, 282, 293, 488, 294, 849, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 850, 299,
	300, 819, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 851, 852, 0, 0, 311, 312,
	820, 821, 792, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 812, 321, 0, 384, 322, 323, 324,
	385, 853, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 766, 0, 0, 0, 0, 0,
	764, 0, 0, 0, 0, 762, 763, 797, 786, 787,
	784, 785, 776, 0, 772, 2017, 0, 0, 0, 0,
	775, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 814, 779, 0, 0, 0, 178, 179, 180, 332,
	829, 334, 830, 181, 831, 832, 0, 182, 338, 339,
	183, 184, 782, 813, 833, 834, 342, 0, 185, 825,
	0, 805, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 476, 193, 194, 195, 0, 806, 807,
	809, 0, 808, 810, 196, 197, 394, 198, 835, 199,
	836, 837, 0, 200, 0, 201, 0, 202, 0, 0,
	828, 204, 0, 205, 0, 0, 0, 770, 206, 207,
	208, 815, 816, 793, 0, 0, 209, 210, 838, 839,
	840, 0, 211, 0, 212, 0, 1590, 477, 0, 213,
	826, 0, 354, 0, 214, 215, 216, 217, 218, 822,
	824, 479, 0, 222, 0, 219, 0, 478, 220, 841,
	221, 842, 843, 844, 845, 846, 0, 804, 0, 480,
	223, 224, 225, 481, 226, 227, 228, 0, 230, 229,
	0, 827, 482, 231, 483, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 484, 239, 240,
	242, 241, 765, 0, 794, 823, 243, 847, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 485,
	249, 486, 817, 250, 251, 252, 253, 254, 0, 255,
	818, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	848, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 487, 278,
	279, 771, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 811, 292, 281, 282, 293, 488,
	294, 849, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 850, 299, 300, 819, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 851, 852, 0,
	0, 311, 312, 820, 821, 792, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 812, 321, 0, 384,
	322, 323, 324, 385, 853, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 766, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 0, 762, 763,
	797, 786, 787, 784, 785, 776, 0, 772, 0, 0,
	0, 0, 0, 775, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 814, 779, 0, 0, 0, 178,
	179, 180, 332, 829, 334, 830, 181, 831, 832, 0,
	182, 338, 339, 183, 184, 782, 813, 833, 834, 342,
	0, 185, 825, 0, 805, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 476, 193, 194, 195,
	0, 806, 807, 809, 0, 808, 810, 196, 197, 394,
	198, 835, 199, 836, 837, 0, 200, 0, 201, 0,
	202, 0, 0, 828, 204, 0, 205, 0, 0, 0,
	770, 206, 207, 208, 815, 816, 793, 0, 0, 209,
	210, 838, 839, 840, 0, 211, 0, 212, 0, 0,
	477, 0, 213, 826, 0, 354, 0, 214, 215, 216,
	217, 218, 822, 824, 479, 0, 222, 0, 219, 0,
	478, 220, 841, 221, 842, 843, 844, 845, 846, 0,
	804, 0, 480, 223, 224, 225, 481, 226, 227, 228,
	0, 230, 229, 0, 827, 482, 231, 483, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	484, 239, 240, 242, 241, 765, 0, 794, 823, 243,
	847, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 485, 249, 486, 817, 250, 251, 252, 253,
	254, 0, 255, 818, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 848, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 487, 278, 279, 771, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 811, 292, 281,
	282, 293, 488, 294, 849, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 850, 299, 300, 819, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	851, 852, 0, 0, 311, 312, 820, 821, 792, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 812,
	321, 0, 384, 322, 323, 324, 385, 853, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	766, 0, 0, 0, 0, 0, 764, 0, 0, 0,
	0, 762, 763, 1043, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 0, 1599, 775, 797, 786, 787,
	784, 785, 776, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 814, 779, 0, 0, 0, 178, 179, 180, 332,
	829, 334, 830, 181, 831, 832, 0, 182, 338, 339,
	183, 184, 782, 813, 833, 834, 342, 0, 185, 825,
	0, 805, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 476, 193, 194, 195, 0, 806, 807,
	809, 0, 808, 810, 196, 197, 394, 198, 835, 199,
	836, 837, 0, 200, 0, 201, 0, 202, 0, 0,
	828, 204, 0, 205, 0, 0, 0, 770, 206, 207,
	208, 815, 816, 793, 0, 0, 209, 210, 838, 839,
	840, 0, 211, 0, 212, 0, 0, 477, 0, 213,
	826, 0, 354, 0, 214, 215, 216, 217, 218, 822,
	824, 479, 0, 222, 0, 219, 0, 478, 220, 841,
	221, 842, 843, 844, 845, 846, 0, 804, 0, 480,
	223, 224, 225, 481, 226, 227, 228, 0, 230, 229,
	0, 827, 482, 231, 483, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 484, 239, 240,
	242, 241, 765, 0, 794, 823, 243, 847, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 485,
	249, 486, 817, 250, 251, 252, 253, 254, 0, 255,
	818, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	848, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 487, 278,
	279, 771, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 811, 292, 281, 282, 293, 488,
	294, 849, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 850, 299, 300, 819, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 851, 852, 0,
	0, 311, 312, 820, 821, 792, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 812, 321, 0, 384,
	322, 323, 324, 385, 853, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 766, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 0, 762, 763,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 0, 1597, 775, 797, 786, 787, 784, 785, 776,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 814, 779,
	0, 0, 0, 178, 179, 180, 332, 829, 334, 830,
	181, 831, 832, 0, 182, 338, 339, 183, 184, 782,
	813, 833, 834, 342, 0, 185, 825, 0, 805, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	476, 193, 194, 195, 0, 806, 807, 809, 0, 808,
	810, 196, 197, 394, 198, 835, 199, 836, 837, 0,
	200, 0, 201, 0, 202, 0, 0, 828, 204, 0,
	205, 0, 0, 0, 770, 206, 207, 208, 815, 816,
	793, 0, 0, 209, 210, 838, 839, 840, 0, 211,
	0, 212, 0, 0, 477, 0, 213, 826, 0, 354,
	0, 214, 215, 216, 217, 218, 822, 824, 479, 0,
	222, 0, 219, 0, 478, 220, 841, 221, 842, 843,
	844, 845, 846, 0, 804, 0, 480, 223, 224, 225,
	481, 226, 227, 228, 0, 230, 229, 0, 827, 482,
	231, 483, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 484, 239, 240, 242, 241, 765,
	0, 794, 823, 243, 847, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 485, 249, 486, 817,
	250, 251, 252, 253, 254, 0, 255, 818, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 848, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 487, 278, 279, 771, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 811, 292, 281, 282, 293, 488, 294, 849, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 850, 299,
	300, 819, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 851, 852, 0, 0, 311, 312,
	820, 821, 792, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 812, 321, 0, 384, 322, 323, 324,
	385, 853, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 766, 0, 0, 0, 0, 0,
	764, 0, 0, 0, 0, 762, 763, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 1581,
	775, 797, 786, 787, 784, 785, 776, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 814, 779, 0, 0, 0,
	178, 179, 180, 332, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 782, 813, 833, 834,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 0, 0, 828, 204, 0, 205, 0, 0,
	0, 770, 206, 207, 208, 815, 816, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 479, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 765, 0, 794, 823,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 0, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 771, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 488, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 820, 821, 792,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 853, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 766, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 762, 763, 0, 0, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 0, 1569, 775, 797, 786,
	787, 784, 785, 776, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 814, 779, 0, 0, 0, 178, 179, 180,
	332, 829, 334, 830, 181, 831, 832, 0, 182, 338,
	339, 183, 184, 782, 813, 833, 834, 342, 0, 185,
	825, 0, 805, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 476, 193, 194, 195, 0, 806,
	807, 809, 0, 808, 810, 196, 197, 394, 198, 835,
	199, 836, 837, 0, 200, 0, 201, 0, 202, 0,
	0, 828, 204, 0, 205, 0, 0, 0, 770, 206,
	207, 208, 815, 816, 793, 0, 0, 209, 210, 838,
	839, 840, 0, 211, 0, 212, 0, 0, 477, 0,
	213, 826, 0, 354, 0, 214, 215, 216, 217, 218,
	822, 824, 479, 0, 222, 0, 219, 0, 478, 220,
	841, 221, 842, 843, 844, 845, 846, 0, 804, 0,
	480, 223, 224, 225, 481, 226, 227, 228, 0, 230,
	229, 0, 827, 482, 231, 483, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 484, 239,
	240, 242, 241, 765, 0, 794, 823, 243, 847, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	485, 249, 486, 817, 250, 251, 252, 253, 254, 0,
	255, 818, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 848, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 487,
	278, 279, 771, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 811, 292, 281, 282, 293,
	488, 294, 849, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 850, 299, 300, 819, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 851, 852,
	0, 0, 311, 312, 820, 821, 792, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 812, 321, 0,
	384, 322, 323, 324, 385, 853, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 766, 0,
	0, 0, 0, 0, 764, 0, 0, 0, 0, 762,
	763, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 0, 1567, 775, 1559, 786, 787, 784, 785,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 332, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 1562, 836, 837,
	0, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 1563, 217, 218, 822, 824, 479,
	0, 222, 0, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	1564, 1561, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 1565, 0, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 385, 853, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 1560, 330, 766, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 0, 0,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 0,
	1556, 775, 1559, 786, 787, 784, 785, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 814, 779, 0, 0,
	0, 178, 179, 180, 332, 829, 334, 830, 181, 831,
	832, 0, 182, 338, 339, 183, 184, 782, 813, 833,
	834, 342, 0, 185, 825, 0, 805, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 476, 193,
	194, 195, 0, 806, 807, 809, 0, 808, 810, 196,
	197, 394, 198, 835, 1562, 836, 837, 0, 200, 0,
	201, 0, 202, 0, 0, 828, 204, 0, 205, 0,
	0, 0, 770, 206, 207, 208, 815, 816, 793, 0,
	0, 209, 210, 838, 839, 840, 0, 211, 0, 212,
	0, 0, 477, 0, 213, 826, 0, 354, 0, 214,
	215, 1563, 217, 218, 822, 824, 479, 0, 222, 0,
	219, 0, 478, 220, 841, 221, 842, 843, 844, 845,
	846, 0, 804, 0, 480, 223, 224, 225, 481, 226,
	227, 228, 0, 230, 229, 0, 827, 482, 231, 483,
	0, 232, 0, 0, 233, 0, 234, 1564, 1561, 238,
	365, 237, 484, 239, 240, 242, 241, 765, 0, 794,
	823, 243, 847, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 485, 249, 486, 817, 250, 251,
	252, 253, 254, 0, 255, 818, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 848, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 487, 278, 279, 771, 280, 0, 284,
	285, 286, 1565, 0, 289, 374, 288, 290, 291, 811,
	292, 281, 282, 293, 488, 294, 849, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 850, 299, 300, 819,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 851, 852, 0, 0, 311, 312, 820, 821,
	792, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 812, 321, 0, 384, 322, 323, 324, 385, 853,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	1560, 330, 766, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 762, 763, 797, 786, 787, 784, 785,
	776, 0, 772, 0, 0, 0, 0, 0, 775, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 332, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 199, 836, 837,
	0, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 216, 217, 218, 822, 824, 479,
	0, 222, 0, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 385, 853, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 766, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 0, 0,
	0, 0, 0, 0, 0, 772, 1517, 0, 0, 0,
	1403, 775, 797, 786, 787, 784, 785, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 814, 779, 0, 0,
	0, 178, 179, 180, 332, 829, 334, 830, 181, 831,
	832, 0, 182, 338, 339, 183, 184, 782, 813, 833,
	834, 342, 0, 185, 825, 0, 805, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 476, 193,
	194, 195, 0, 806, 807, 809, 0, 808, 810, 196,
	197, 394, 198, 835, 199, 836, 837, 0, 200, 0,
	201, 0, 202, 0, 0, 828, 204, 0, 205, 0,
	0, 0, 770, 206, 207, 208, 815, 816, 793, 0,
	0, 209, 210, 838, 839, 840, 0, 211, 0, 212,
	0, 0, 477, 0, 213, 826, 0, 354, 0, 214,
	215, 216, 217, 218, 822, 824, 479, 0, 222, 0,
	219, 0, 478, 220, 841, 221, 842, 843, 844, 845,
	846, 0, 804, 0, 480, 223, 224, 225, 481, 226,
	227, 228, 0, 230, 229, 0, 827, 482, 231, 483,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 484, 239, 240, 242, 241, 765, 0, 794,
	823, 243, 847, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 485, 249, 486, 817, 250, 251,
	252, 253, 254, 0, 255, 818, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 848, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 487, 278, 279, 771, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 811,
	292, 281, 282, 293, 488, 294, 849, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 850, 299, 300, 819,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 851, 852, 0, 0, 311, 312, 820, 821,
	792, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 812, 321, 0, 384, 322, 323, 324, 385, 853,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 766, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 762, 763, 797, 786, 787, 784, 785,
	776, 0, 772, 0, 0, 0, 0, 0, 775, 0,
	0, 175, 176, 1360, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 332, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 199, 836, 837,
	0, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 216, 217, 218, 822, 824, 479,
	0, 222, 0, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 385, 853, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 766, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 0, 0,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 0,
	861, 775, 797, 786, 787, 784, 785, 776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 814, 779, 0, 0,
	0, 178, 179, 180, 332, 829, 334, 830, 181, 831,
	832, 0, 182, 338, 339, 183, 184, 782, 813, 833,
	834, 342, 0, 185, 825, 0, 805, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 476, 193,
	194, 195, 0, 806, 807, 809, 0, 808, 810, 196,
	197, 394, 198, 835, 199, 836, 837, 0, 200, 0,
	201, 0, 202, 0, 0, 828, 204, 0, 205, 0,
	0, 0, 770, 206, 207, 208, 815, 816, 793, 0,
	0, 209, 210, 838, 839, 840, 0, 211, 0, 212,
	0, 0, 477, 0, 213, 826, 0, 354, 0, 214,
	215, 216, 217, 218, 822, 824, 479, 0, 222, 0,
	219, 0, 478, 220, 841, 221, 842, 843, 844, 845,
	846, 0, 804, 0, 480, 223, 224, 225, 481, 226,
	227, 228, 0, 230, 229, 0, 827, 482, 231, 483,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 484, 239, 240, 242, 241, 765, 0, 794,
	823, 243, 847, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 485, 249, 486, 817, 250, 251,
	252, 253, 254, 0, 255, 818, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 848, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 487, 278, 279, 771, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 811,
	292, 281, 282, 293, 488, 294, 849, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 850, 299, 300, 819,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 851, 852, 0, 0, 311, 312, 820, 821,
	792, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 812, 321, 0, 384, 322, 323, 324, 385, 853,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 766, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 762, 763, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 760, 775, 797,
	786, 787, 784, 785, 776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 814, 779, 0, 0, 0, 178, 179,
	180, 332, 829, 334, 830, 181, 831, 832, 0, 182,
	338, 339, 183, 184, 782, 813, 833, 834, 342, 0,
	185, 825, 0, 805, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 476, 193, 194, 195, 0,
	806, 807, 809, 0, 808, 810, 196, 197, 394, 198,
	835, 199, 836, 837, 0, 200, 0, 201, 0, 202,
	0, 0, 828, 204, 0, 205, 0, 0, 0, 770,
	206, 207, 208, 815, 816, 793, 0, 0, 209, 210,
	838, 839, 840, 0, 211, 0, 212, 0, 0, 477,
	0, 213, 826, 0, 354, 0, 214, 215, 216, 217,
	218, 822, 824, 479, 0, 222, 0, 219, 0, 478,
	220, 841, 221, 842, 843, 844, 845, 846, 0, 804,
	0, 480, 223, 224, 225, 481, 226, 227, 228, 0,
	230, 229, 0, 827, 482, 231, 483, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 484,
	239, 240, 242, 241, 765, 0, 794, 823, 243, 847,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 485, 249, 486, 817, 250, 251, 252, 253, 254,
	0, 255, 818, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 848, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	487, 278, 279, 771, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 811, 292, 281, 282,
	293, 488, 294, 849, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 850, 299, 300, 819, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 851,
	852, 0, 0, 311, 312, 820, 821, 792, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 812, 321,
	0, 384, 322, 323, 324, 385, 853, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 766,
	0, 0, 0, 0, 0, 764, 0, 0, 0, 0,
	762, 763, 797, 786, 787, 784, 785, 776, 0, 772,
	0, 0, 0, 0, 0, 775, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 814, 779, 0, 0,
	0, 178, 179, 180, 332, 829, 334, 830, 181, 831,
	832, 0, 182, 338, 339, 183, 184, 782, 813, 833,
	834, 342, 0, 185, 825, 0, 805, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 476, 193,
	194, 2438, 0, 806, 807, 809, 0, 808, 810, 196,
	197, 394, 198, 835, 199, 836, 837, 0, 200, 0,
	201, 0, 202, 0, 0, 828, 204, 0, 205, 0,
	0, 0, 770, 206, 207, 208, 815, 816, 793, 0,
	0, 209, 210, 838, 839, 840, 0, 211, 0, 212,
	0, 0, 477, 0, 213, 826, 0, 354, 0, 214,
	215, 216, 217, 218, 822, 824, 479, 0, 222, 0,
	219, 0, 478, 220, 841, 221, 842, 843, 844, 845,
	846, 0, 804, 0, 480, 223, 224, 225, 481, 226,
	227, 228, 0, 230, 229, 0, 827, 482, 231, 483,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 484, 239, 240, 242, 241, 765, 0, 794,
	823, 243, 847, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 485, 249, 486, 817, 250, 251,
	252, 253, 254, 0, 255, 818, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 848, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 487, 278, 279, 771, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 811,
	292, 281, 282, 293, 488, 294, 849, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 850, 299, 300, 819,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 851, 852, 0, 0, 311, 312, 820, 821,
	792, 313, 314, 2437, 316, 0, 0, 317, 318, 319,
	320, 812, 321, 0, 384, 322, 323, 324, 385, 853,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 766, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 762, 763, 797, 786, 787, 784, 785,
	776, 0, 772, 0, 0, 0, 0, 0, 775, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 814,
	779, 0, 0, 0, 178, 179, 180, 2436, 829, 334,
	830, 181, 831, 832, 0, 182, 338, 339, 183, 184,
	782, 813, 833, 834, 342, 0, 185, 825, 0, 805,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 2438, 0, 806, 807, 809, 0,
	808, 810, 196, 197, 394, 198, 835, 199, 836, 837,
	0, 200, 0, 201, 0, 202, 0, 0, 828, 204,
	0, 205, 0, 0, 0, 770, 206, 207, 208, 815,
	816, 793, 0, 0, 209, 210, 838, 839, 840, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 826, 0,
	354, 0, 214, 215, 216, 217, 218, 822, 824, 479,
	0, 222, 0, 219, 0, 478, 220, 841, 221, 842,
	843, 844, 845, 846, 0, 804, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 827,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	765, 0, 794, 823, 243, 847, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	817, 250, 251, 252, 253, 254, 0, 255, 818, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 848, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 771,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 811, 292, 281, 282, 293, 488, 294, 849,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 850,
	299, 300, 819, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 851, 852, 0, 0, 311,
	312, 820, 821, 792, 313, 314, 2437, 316, 0, 0,
	317, 318, 319, 320, 812, 321, 0, 384, 322, 323,
	324, 385, 853, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 766, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 762, 763, 797, 786,
	787, 784, 785, 776, 0, 772, 0, 0, 0, 0,
	0, 775, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 814, 779, 0, 0, 0, 178, 179, 180,
	332, 829, 334, 830, 181, 831, 832, 0, 182, 338,
	339, 183, 184, 782, 813, 833, 834, 342, 0, 185,
	825, 0, 805, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 476, 193, 194, 195, 0, 806,
	807, 809, 0, 808, 810, 196, 197, 394, 198, 835,
	199, 836, 837, 0, 200, 0, 201, 0, 202, 0,
	0, 828, 204, 0, 205, 0, 0, 0, 770, 206,
	207, 208, 815, 816, 793, 0, 0, 209, 210, 838,
	839, 840, 0, 211, 0, 212, 0, 0, 477, 0,
	213, 826, 0, 354, 0, 214, 215, 216, 217, 218,
	822, 824, 479, 0, 222, 0, 219, 0, 478, 220,
	841, 221, 842, 843, 844, 845, 846, 0, 804, 0,
	480, 223, 224, 225, 481, 226, 227, 228, 0, 230,
	229, 0, 827, 482, 231, 483, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 484, 239,
	240, 242, 241, 765, 0, 794, 823, 243, 847, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	485, 249, 486, 817, 250, 251, 252, 253, 254, 0,
	255, 818, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 848, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 487,
	278, 279, 771, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 811, 292, 281, 282, 293,
	488, 294, 849, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 850, 299, 300, 819, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 851, 852,
	0, 0, 311, 312, 820, 821, 792, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 812, 321, 0,
	384, 322, 323, 324, 385, 853, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 766, 0,
	0, 0, 0, 0, 764, 0, 0, 0, 0, 762,
	763, 797, 786, 787, 784, 785, 776, 0, 772, 0,
	0, 0, 0, 0, 775, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 814, 779, 0, 0, 0,
	178, 179, 180, 332, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 782, 813, 833, 834,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 0, 0, 828, 204, 0, 205, 0, 0,
	0, 770, 206, 207, 208, 815, 816, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 479, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 0, 0, 794, 823,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 0, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 1579, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 488, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 820, 821, 792,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 853, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 797, 786, 787, 784, 785, 776, 1577, 0, 0,
	0, 0, 1575, 1576, 0, 0, 0, 175, 176, 0,
	177, 1578, 0, 0, 0, 814, 779, 775, 0, 0,
	178, 179, 180, 332, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 0, 813, 833, 834,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 0, 0, 828, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 815, 816, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 479, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 0, 0, 794, 823,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 0, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 1579, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 488, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 820, 821, 792,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 853, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 797, 786, 787, 784, 785, 776, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 1578, 0, 0, 0, 814, 779, 775, 0, 0,
	178, 179, 180, 0, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 782, 813, 833, 834,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	2438, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 0, 0, 828, 204, 0, 205, 0, 0,
	0, 770, 206, 207, 208, 815, 816, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 0, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 0, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 765, 0, 794, 823,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 0, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 771, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 0, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 820, 821, 792,
	313, 314, 2437, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 853, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 797, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 763, 0, 0, 0, 175, 176, 0,
	177, 772, 0, 0, 0, 814, 0, 775, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 813, 340, 341,
	342, 0, 185, 825, 0, 805, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 806, 807, 809, 0, 808, 810, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 815, 816, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 826, 0, 354, 0, 214, 215,
	216, 217, 218, 822, 824, 479, 0, 222, 0, 219,
	0, 478, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 827, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 0, 0, 0, 823,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 817, 250, 251, 252,
	253, 254, 0, 255, 818, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 811, 292,
	281, 282, 293, 488, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 819, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 820, 821, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	812, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 910, 0, 693, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 1981, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 475, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	476, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 477, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 479, 0,
	222, 0, 219, 0, 478, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 480, 223, 224, 225,
	481, 226, 227, 228, 0, 230, 229, 0, 364, 482,
	231, 483, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 484, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 485, 249, 486, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 487, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 131, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 488, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 133, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	913, 386, 0, 0, 325, 0, 0, 0, 125, 326,
	327, 328, 329, 330, 0, 126, 693, 690, 0, 691,
	686, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 118, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	475, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 476, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 1324, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 683, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 477, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	479, 0, 222, 0, 219, 0, 478, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 480, 223,
	224, 225, 481, 226, 227, 228, 0, 230, 229, 0,
	364, 482, 231, 483, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 484, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 684, 0, 247, 0, 0, 248, 368, 485, 249,
	486, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 487, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 488, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 682, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 693, 690, 0, 691,
	686, 681, 0, 0, 0, 0, 0, 692, 687, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	475, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 476, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 1321, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 683, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 477, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	479, 0, 222, 0, 219, 0, 478, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 480, 223,
	224, 225, 481, 226, 227, 228, 0, 230, 229, 0,
	364, 482, 231, 483, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 484, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 684, 0, 247, 0, 0, 248, 368, 485, 249,
	486, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 487, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 488, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 682, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 693, 690, 0, 691,
	686, 681, 0, 0, 0, 0, 0, 692, 687, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	475, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 476, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 959, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 683, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 477, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	479, 0, 222, 0, 219, 0, 478, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 480, 223,
	224, 225, 481, 226, 227, 228, 0, 230, 229, 0,
	364, 482, 231, 483, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 484, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 684, 0, 247, 0, 0, 248, 368, 485, 249,
	486, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 487, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 488, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 682, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 678, 0, 693, 690,
	0, 691, 686, 681, 0, 0, 0, 692, 687, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 475, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 476, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 683, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 477, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 479, 0, 222, 0, 219, 0, 478, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	480, 223, 224, 225, 481, 226, 227, 228, 0, 230,
	229, 0, 364, 482, 231, 483, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 484, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 684, 0, 247, 0, 0, 248, 368,
	485, 249, 486, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 487,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	488, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 682, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 693, 690,
	0, 691, 686, 681, 0, 0, 0, 0, 0, 692,
	687, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 475, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 476, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 683, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 477, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 479, 0, 222, 0, 219, 0, 478, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	480, 223, 224, 225, 481, 226, 227, 228, 0, 230,
	229, 0, 364, 482, 231, 483, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 484, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 684, 0, 247, 0, 0, 248, 368,
	485, 249, 486, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 487,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	488, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 682, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 675, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 692,
	687, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 735, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	131, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 133,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 913, 386, 0, 0, 325,
	0, 172, 0, 125, 326, 327, 328, 329, 330, 0,
	126, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 729, 0, 1067,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 735, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 131, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 133, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 913, 386, 0,
	0, 325, 675, 0, 172, 125, 326, 327, 328, 329,
	330, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 729,
	0, 1067, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 131, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 133, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	913, 386, 0, 0, 325, 1706, 0, 172, 125, 326,
	327, 328, 329, 330, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 118, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 735, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 728, 0,
	172, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 729, 0, 734, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 735, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 0,
	325, 0, 172, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 729, 0,
	734, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 735, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 172, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	729, 0, 734, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 0, 325, 0, 0, 172, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 1197, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 0, 172,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 1643, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 0, 325,
	0, 172, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 2042,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 797, 786, 787, 784, 785, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 1070, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 829, 334, 830, 181, 831, 832,
	0, 182, 338, 339, 183, 184, 0, 0, 833, 834,
	342, 0, 185, 343, 0, 475, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 476, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 835, 199, 836, 837, 0, 200, 0, 201,
	0, 202, 0, 0, 828, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 793, 0, 0,
	209, 210, 838, 839, 840, 0, 211, 0, 212, 0,
	0, 477, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 479, 0, 222, 0, 219,
	0, 478, 220, 841, 221, 842, 843, 844, 845, 846,
	0, 804, 0, 480, 223, 224, 225, 481, 226, 227,
	228, 0, 230, 229, 0, 364, 482, 231, 483, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 484, 239, 240, 242, 241, 0, 0, 794, 366,
	243, 847, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 485, 249, 486, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 848, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 487, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 488, 294, 849, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 850, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 851, 852, 0, 0, 311, 312, 382, 383, 792,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 853, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 965, 0, 693, 690, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 475, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 476,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 477, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 479, 0, 222,
	0, 219, 0, 478, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 480, 223, 224, 225, 481,
	226, 227, 228, 0, 230, 229, 0, 364, 482, 231,
	483, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 484, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 485, 249, 486, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 487, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 488, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 578, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 168, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 167, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 165, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 171, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 168, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 167, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 693, 690, 325, 0, 0, 967, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 171, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 475, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 476,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 477, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 479, 0, 222,
	0, 219, 0, 478, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 480, 223, 224, 225, 481,
	226, 227, 228, 0, 230, 229, 0, 364, 482, 231,
	483, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 484, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 485, 249, 486, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 487, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 488, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 167, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 693,
	690, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 171, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 475, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 476, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 477,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 479, 0, 222, 0, 219, 0, 478,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 480, 223, 224, 225, 481, 226, 227, 228, 0,
	230, 229, 0, 364, 482, 231, 483, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 484,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 485, 249, 486, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	487, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 488, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 693, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	171, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 475,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 476, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 477, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 479,
	0, 222, 0, 219, 0, 478, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 480, 223, 224,
	225, 481, 226, 227, 228, 0, 230, 229, 0, 364,
	482, 231, 483, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 484, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 485, 249, 486,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 487, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 488, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 1423, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 1421, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	1620, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 1426, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	1618, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	1425, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 1619, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 1423, 185, 343, 0, 0, 1418, 186, 187, 188,
	0, 189, 1421, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 1426,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 1417, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 1425, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 1424, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	888, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 735, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 741, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 743, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 735,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 737, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 739, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	735, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 411, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 410, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 409, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 1406,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 2129, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	2129, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 2126, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 735, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 1349, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 1347, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 1329, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 1211, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	1210, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 611, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 942, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 613, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 608, 380,
	381, 0, 0, 311, 943, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 906, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 905, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 903,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 902, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	899, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 898, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 896, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 895, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 892, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 891, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 172, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 175, 176,
	880, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 878, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 877, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 874, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 872, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 868, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 870, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 747, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 749,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 745, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 611, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	602, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 601, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 613, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 603, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 604, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 608, 380,
	381, 0, 0, 311, 606, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 586, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 587, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 584,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	576, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 434, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 1753, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 1751,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 1740, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	587, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 1221, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 0,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 711, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 0, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 0, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 0, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 1096, 1097, 0,
	1116, 1117, 1118, 1126, 1127, 1128, 0, 0, 0, 0,
	0, 0, 0, 1119, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1130, 0, 1096, 1097, 0, 1116, 1117,
	1118, 1126, 1127, 1128, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 1098, 0, 0, 0, 1099, 0,
	1113, 1130, 0, 1096, 1097, 0, 1116, 1117, 1118, 1126,
	1127, 1128, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 1098, 0, 0, 0, 1099, 0, 1113, 1130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 1104, 1113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 1131, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 1131, 0, 0, 0, 1121, 0,
	0, 1104, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 1131, 0, 0, 0, 1121, 0, 0, 1120,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 1129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 1120, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 1124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 1096, 1097, 0, 1116,
	1117, 1118, 1126, 1127, 1128, 0, 0, 0, 0, 0,
	0, 1124, 1119, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 1130, 1115, 1096, 1097, 0, 1116, 1117, 1118,
	1126, 1127, 1128, 0, 0, 0, 0, 0, 0, 1124,
	1119, 0, 0, 1098, 0, 0, 0, 1099, 0, 1113,
	1130, 1122, 0, 0, 1110, 1111, 1112, 1125, 0, 1109,
	1107, 1108, 1100, 1101, 1102, 1103, 1105, 1106, 0, 0,
	0, 1098, 0, 0, 0, 0, 1823, 1113, 0, 1122,
	0, 0, 1110, 1111, 1112, 1125, 0, 1109, 1107, 1108,
	1100, 1101, 1102, 1103, 1105, 1106, 0, 0, 0, 0,
	2387, 0, 0, 0, 1104, 0, 0, 1122, 0, 0,
	1110, 1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101,
	1102, 1103, 1105, 1106, 1123, 1131, 0, 0, 2368, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 1131, 0, 0, 0, 1121, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	1129, 0, 0, 0, 0, 0, 1096, 1097, 0, 1116,
	1117, 1118, 1126, 1127, 1128, 1121, 0, 0, 1120, 0,
	0, 1114, 1119, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 1130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127,
	1128, 0, 1124, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 1115, 1099, 0, 0, 1130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 0, 0, 0, 1104, 0, 0, 0, 0, 1098,
	0, 0, 0, 1096, 1097, 1113, 1116, 1117, 1118, 1126,
	1127, 1128, 0, 0, 1123, 1131, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1130,
	1122, 0, 1129, 1110, 1111, 1112, 1125, 0, 1109, 1107,
	1108, 1100, 1101, 1102, 1103, 1105, 1106, 1121, 0, 0,
	1098, 2314, 0, 1114, 0, 0, 1113, 0, 1122, 0,
	1104, 1110, 1111, 1112, 1125, 0, 1109, 1107, 1108, 1100,
	1101, 1102, 1103, 1105, 1106, 0, 0, 0, 1120, 2309,
	1123, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 1121, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 1123, 1131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 1120, 0, 0, 0, 0, 1129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 0,
	1122, 0, 0, 1110, 1111, 1112, 1125, 0, 1109, 1107,
	1108, 1100, 1101, 1102, 1103, 1105, 1106, 0, 0, 0,
	0, 2305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 1096, 1097, 0, 1116,
	1117, 1118, 1126, 1127, 1128, 0, 0, 0, 0, 1124,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 1130, 0, 0, 0, 1122, 0, 0, 1110,
	1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 1098, 0, 0, 0, 2285, 0, 1113,
	1096, 1097, 0, 1116, 1117, 1118, 1126, 1127, 1128, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 1130, 1122, 0, 0,
	1110, 1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101,
	1102, 1103, 1105, 1106, 0, 0, 0, 1098, 2228, 0,
	0, 0, 0, 1113, 1104, 0, 0, 0, 0, 0,
	0, 0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127,
	1128, 0, 0, 0, 1123, 1131, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1130, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1121, 1104, 1098,
	0, 0, 0, 1114, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 1114, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	1123, 1131, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1121, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127,
	1128, 0, 0, 0, 1120, 0, 1124, 0, 1119, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1130, 0,
	1122, 0, 0, 1110, 1111, 1112, 1125, 0, 1109, 1107,
	1108, 1100, 1101, 1102, 1103, 1105, 1106, 0, 0, 1098,
	0, 2227, 0, 0, 0, 1113, 0, 0, 0, 0,
	1096, 1097, 1115, 1116, 1117, 1118, 1126, 1127, 1128, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 1124, 0,
	0, 0, 0, 1099, 1122, 0, 1130, 1110, 1111, 1112,
	1125, 0, 1109, 1107, 1108, 1100, 1101, 1102, 1103, 1105,
	1106, 0, 0, 0, 0, 2167, 0, 1098, 0, 0,
	1104, 0, 0, 1113, 0, 0, 0, 1096, 1097, 0,
	1116, 1117, 1118, 1126, 1127, 1128, 0, 0, 0, 0,
	1123, 1131, 0, 1119, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 1130, 0, 0, 1122, 0, 1129, 1110,
	1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 1121, 1098, 0, 0, 2132, 1104, 1114,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 1131,
	0, 0, 0, 0, 1120, 0, 0, 0, 0, 0,
	1831, 1832, 0, 1849, 1850, 1851, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2014, 0, 0, 0,
	0, 1121, 0, 0, 0, 1104, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 1123, 1131, 0, 0, 0,
	0, 0, 1120, 1846, 0, 0, 0, 0, 1124, 0,
	0, 0, 0, 1129, 1831, 1832, 0, 1849, 1850, 1851,
	0, 0, 0, 0, 0, 0, 0, 0, 1121, 0,
	2013, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 1837, 1120,
	0, 0, 0, 0, 0, 0, 1124, 1846, 0, 0,
	0, 0, 0, 0, 0, 0, 1122, 0, 0, 1110,
	1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 0, 0, 0, 1852, 2045, 0, 0,
	0, 0, 0, 0, 0, 1096, 1097, 1115, 1116, 1117,
	1118, 1126, 1127, 1128, 0, 0, 0, 1847, 0, 0,
	0, 1119, 1837, 1124, 0, 0, 0, 0, 1099, 0,
	0, 1130, 0, 0, 1122, 0, 0, 1110, 1111, 1112,
	1125, 0, 1109, 1107, 1108, 1100, 1101, 1102, 1103, 1105,
	1106, 0, 1098, 0, 0, 2021, 0, 0, 1113, 0,
	1852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1847, 0, 0, 0, 0, 0, 0, 0, 0,
	1848, 1122, 0, 0, 1110, 1111, 1112, 1125, 0, 1109,
	1107, 1108, 1100, 1101, 1102, 1103, 1105, 1106, 0, 0,
	0, 0, 1518, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 1848, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1121, 39, 120, 0,
	0, 0, 1114, 0, 0, 0, 0, 1843, 1844, 1845,
	42, 0, 1842, 1840, 1841, 1833, 1834, 1835, 1836, 1838,
	1839, 0, 0, 0, 122, 0, 0, 1120, 0, 0,
	43, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 53, 0, 0,
	0, 59, 0, 0, 123, 0, 0, 0, 60, 0,
	61, 1843, 1844, 1845, 0, 1115, 1842, 1840, 1841, 1833,
	1834, 1835, 1836, 1838, 1839, 0, 0, 0, 62, 0,
	0, 1124, 0, 0, 63, 0, 0, 64, 0, 0,
	0, 0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127,
	1128, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 1130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 1122,
	0, 0, 1110, 1111, 1112, 1125, 0, 1109, 1107, 1108,
	1100, 1101, 1102, 1103, 1105, 1106, 0, 65, 1793, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 67, 0, 68, 0, 69, 0, 124,
	1104, 2461, 0, 0, 70, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 99, 0,
	1123, 1131, 0, 0, 0, 1096, 1097, 121, 1116, 1117,
	1118, 1126, 1127, 1128, 0, 0, 0, 133, 1129, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 1130, 0, 1121, 0, 0, 103, 0, 0, 1114,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 1098, 132, 0, 0, 0, 0, 1113, 0,
	0, 125, 0, 0, 1120, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2460, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 1104, 0, 1863, 0, 0, 1862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 0,
	0, 0, 0, 1123, 1131, 0, 1096, 1097, 0, 1116,
	1117, 1118, 1126, 1127, 1128, 0, 0, 0, 0, 0,
	0, 1129, 1119, 0, 0, 0, 0, 1697, 0, 1099,
	0, 0, 1130, 0, 0, 0, 1121, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1122, 1120, 0, 1110,
	1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 0, 0, 0, 0, 0, 0, 1698,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 1115, 1382, 0, 0, 0,
	0, 0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127,
	1128, 1124, 0, 0, 1123, 1131, 0, 0, 1119, 0,
	0, 0, 1381, 0, 0, 1099, 0, 0, 1130, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1121, 0, 1098,
	0, 0, 0, 1114, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 1122,
	0, 0, 1110, 1111, 1112, 1125, 0, 1109, 1107, 1108,
	1100, 1101, 1102, 1103, 1105, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	1123, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 1129, 0,
	0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127, 1128,
	0, 0, 0, 1121, 0, 0, 0, 1119, 0, 1114,
	0, 0, 0, 0, 1099, 0, 0, 1130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	1122, 0, 0, 1110, 1111, 1112, 1125, 0, 1109, 1107,
	1108, 1100, 1101, 1102, 1103, 1105, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 1104,
	1096, 1097, 0, 1116, 1117, 1118, 1126, 1127, 1128, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 1123,
	1131, 0, 0, 1099, 0, 0, 1130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 1121, 1113, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 1122, 0, 0, 1110,
	1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 1120, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 1096,
	1097, 0, 1116, 1117, 1118, 1126, 1127, 1128, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 1123, 1131,
	0, 1115, 1099, 0, 0, 1130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 1124, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 1121, 1113, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 0, 1104, 1110, 1111,
	1112, 1125, 1869, 1109, 1107, 1108, 1100, 1101, 1102, 1103,
	1105, 1106, 0, 0, 0, 0, 0, 1123, 1131, 0,
	1115, 0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127,
	1128, 0, 0, 0, 0, 1129, 1124, 0, 1119, 0,
	0, 0, 1864, 0, 0, 1099, 0, 0, 1130, 0,
	1121, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 2025, 0, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 0, 0, 1110, 1111, 1112,
	1125, 0, 1109, 1107, 1108, 1100, 1101, 1102, 1103, 1105,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	1104, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127, 1128,
	0, 0, 0, 0, 0, 1124, 0, 1119, 0, 0,
	1123, 1131, 0, 0, 1099, 0, 0, 1130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 1121, 1113, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 1120, 0, 1110, 1111, 1112, 1125,
	0, 1109, 1107, 1108, 1100, 1101, 1102, 1103, 1105, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	1131, 0, 1115, 0, 1096, 1097, 0, 1116, 1117, 1118,
	1126, 1127, 1128, 0, 0, 0, 0, 1129, 1124, 0,
	1119, 0, 0, 0, 1822, 0, 0, 1099, 0, 0,
	1130, 0, 1121, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1122, 0, 0, 1110,
	1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102,
	1103, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 1104, 1096, 1097, 0, 1116, 1117, 1118, 1126,
	1127, 1128, 0, 0, 0, 0, 0, 1124, 0, 1119,
	0, 0, 1123, 1131, 0, 0, 1099, 0, 0, 1130,
	0, 1096, 1097, 0, 1116, 1117, 1118, 1126, 1127, 1128,
	1129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 1099, 1121, 1113, 1130, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 1113, 1122, 1120, 0, 1110, 1111,
	1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102, 1103,
	1105, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 1131, 0, 1115, 0, 0, 0, 0, 1104,
	1096, 1097, 0, 1116, 1117, 1118, 1126, 1127, 1128, 1129,
	1124, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	1131, 0, 0, 1099, 1121, 0, 1130, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 1121, 1113, 0, 1120, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 1110, 1111, 1112, 1125, 0, 1109, 1107, 1108, 1100,
	1101, 1102, 1103, 1105, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 1131,
	0, 1115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	1110, 1111, 1112, 1125, 0, 1109, 1107, 1108, 1100, 1101,
	1102, 1103, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 0, 0, 1110, 1111,
	1112, 1125, 0, 1109, 1107, 1108, 1100, 1101, 1102, 1103,
	1105, 1106, 0, 1270, 1260, 1289, 1252, 1280, 1279, 0,
	1115, 1254, 1253, 0, 0, 0, 0, 1291, 1290, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 1277, 1276, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 1272, 1273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 0, 0, 1110, 1111, 1112,
	1125, 0, 1109, 1107, 1108, 1100, 1101, 1102, 1103, 1105,
	1106, 0, 1263, 1262, 1264, 1265, 1266, 1267, 1268, 0,
	1288, 0, 0, 0, 0, 0, 0, 0, 1270, 1260,
	1289, 1252, 1280, 1279, 0, 0, 1254, 1253, 0, 0,
	0, 0, 1291, 1290, 0, 0, 0, 0, 1256, 0,
	0, 632, 0, 592, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 637, 0, 0, 0, 0, 1285, 0, 1277, 1276,
	0, 0, 0, 635, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 1271, 0, 0, 0, 1453, 1451, 1452,
	1455, 1454, 0, 0, 636, 0, 1274, 1272, 1273, 638,
	0, 0, 0, 0, 644, 645, 0, 0, 654, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 0, 594, 639, 1269, 1258, 0, 1263, 1262, 1264,
	1265, 1266, 1267, 1268, 1293, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 657, 0, 1255, 0, 0,
	1286, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1256, 0, 640, 0, 0, 0, 0,
	0, 0, 1259, 0, 0, 1278, 0, 1292, 0, 1261,
	641, 642, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 648, 0,
	0, 643, 650, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 1293,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1255, 0, 0, 1286, 1287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1259, 634, 651,
	596, 0, 1292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 0, 0, 0, 656, 0,
	0, 0, 597, 0, 0, 0, 0, 649, 653, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 655,
}
var sqlPact = [...]int{

	39783, -1000, 22, -1000, -1000, 210, -1000, -1000, -1000, 200,
	195, 188, -1000, 186, 185, 184, -1000, 183, 182, 181,
	180, 179, 178, 177, 175, -1000, 174, 173, -1000, -1000,
	-1000, 171, 170, 164, 163, 161, 150, 147, 1052, 23481,
	144, 143, 1370, 35637, 141, 140, 137, 130, 966, 124,
	123, 26991, 938, 1324, 122, 120, 118, 116, 115, 968,
	35319, 2861, 2469, 6241, 1093, 1556, 34998, 23160, 1548, 1522,
	34677, -1000, -1000, 34356, 1852, 114, 112, 111, -1000, -1000,
	34035, 108, 106, 105, 104, 101, 98, 96, 91, 90,
	86, 85, 84, 83, 78, -1000, 77, 70, 69, 41669,
	68, 67, 63, 1083, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 168, -1000, 1073, 404, 18624,
	973, 959, 952, 947, 948, 37545, 35637, 57, 2, 55,
	-1000, 1862, 654, 20566, 39783, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26670, 26349, 33714, 33393, 760, -1000, 17, 24753, 35637, -1000,
	212, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14615, 14258, 515, 212, -1000, -1000, -1000, -1000, -1000, 33072,
	-1000, 32751, 32430, 1423, 32109, -1000, -1000, -1000, -1000, 31788,
	-1000, -1000, 1724, 1579, 1567, 26028, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31470, 31149,
	30828, 30507, 30186, 498, -1000, -1000, -1000, 17300, -1000, -1000,
	-1000, -1000, 54, -1000, -1000, 51, -1000, 50, 42, 40,
	39, 38, 37, -1000, -1000, 35, 32, 1158, -1000, -1000,
	20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35637, -1000, 15644, -1000, 496, -1000, 1595, -1000, 15644,
	-1000, 1129, -1000, -1000, -1000, -1000, -1000, 35637, -1000, -1000,
	1509, -1000, -1000, -1000, -1000, -1000, -1000, 892, -1000, -1000,
	-1000, 2068, 1140, 495, 29865, -1000, 1439, -1000, 562, 749,
	-1000, -1000, -1000, 18292, 223, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1849, 22839, 1269, 1865, 1722, 2067,
	1290, 1706, 1699, 1685, 1675, 1639, 2066, 921, 2065, 1643,
	958, 2064, 1615, 1109, 636, 2060, 1587, 1584, -1000, -1000,
	-1000, 28263, -1000, -1000, 1073, -1000, -1000, -1000, 1323, 1848,
	1848, 1848, 1897, 302, 285, -1000, 168, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2029, -1000, -1000,
	-1000, -1000, 2047, -1000, -1000, -1000, -1000, 1276, -1000, -1000,
	1276, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 759, 36909,
	14, 35637, -1000, 493, 14, -1000, -1000, 491, -1000, 10716,
	10716, -1000, -1000, -1000, -1000, -1000, 9001, 1417, -1000, 3542,
	-172, 359, 550, -1000, 19597, 22177, -1000, -1000, 975, 1723,
	676, -1000, 987, 1717, 523, -1000, 979, -1000, 1023, 1709,
	-124, 23799, 24753, 17, -12, -1000, -1000, -1000, 5911, 41143,
	-1000, -1000, 15644, 15644, 15644, 15644, 15644, 1062, 516, -1000,
	490, 489, 7271, -1000, -1000, 2046, -1000, -1000, -1000, 331,
	-1000, -1000, 15644, 212, -1000, -1000, -1000, -1000, 479, 2056,
	-1000, 656, -1000, -1000, -1000, 570, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1640, 478, 477, 475, -1000,
	-1000, -1000, -1000, 472, 471, 469, 465, 464, 463, 461,
	459, 457, 456, 454, 453, 451, 450, 449, 1026, -1000,
	572, -1000, -1000, 572, 572, -1000, 440, 440, 441, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 440, -1000, -1000,
	-1000, 557, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 446,
	41143, -1000, 838, 21210, 212, -1000, -1000, -1000, -1000, 445,
	1249, 579, -1000, 309, -1000, 29544, 579, 1245, -1000, -1000,
	-1000, 28263, -1000, 35637, -1000, 35637, -1000, 875, -1000, 37227,
	134, 1702, -1000, -1000, 134, 1696, -1000, 117, 1695, -1000,
	-1000, 1185, 1693, -1000, -12, 1688, -1000, -1000, 15644, -2,
	-1000, -1000, -1000, 654, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 24117, 1401, 584, 41143, 1965, 41611,
	23799, 41143, 24117, -1000, -1000, -1000, -1000, -1000, 35637, -1000,
	15644, -1000, 1961, 1402, 15, -1000, -1000, -1000, -1000, -1000,
	1299, 1390, 698, 896, 17962, 17632, 1800, -1000, -1000, -1000,
	218, 6241, -1000, -1000, -1000, -1000, -1000, -1000, 29223, -1000,
	-1000, -1000, 1138, 35637, -1000, -1000, 1629, -1000, 24117, 35637,
	-1000, 35637, -1000, 35637, -1000, 35637, -1000, 35637, -1000, -1000,
	-1000, -1000, -1000, 2517, -1000, 1611, -1000, -1000, 35637, -1000,
	1284, -1000, -1000, -1000, 28905, 28584, -1000, 946, 793, 136,
	-1000, -1000, 1323, -1000, 1127, 1337, 13901, 1404, 15644, 168,
	-1000, -1000, 168, 168, 8301, -1000, -1000, -1000, -1000, -1000,
	-1000, 15, -1000, 36909, -1000, 35637, 14, 1958, 35637, -1000,
	100, -1000, 40292, -1000, 100, -7, -1000, 41143, -1000, 1396,
	1394, 20888, 1592, 1071, 1071, 1071, -1000, 444, 507, 550,
	5236, 13558, -1000, 27309, 1076, 238, 297, 19275, 1417, -1000,
	35637, -22, 982, -1000, 25707, 1886, 1822, 1818, 28263, 1920,
	129, 1582, 750, 28263, 747, 1911, 129, 1572, 742, 35637,
	6241, 547, -1000, 35637, -1000, -1000, 41486, 41611, 6241, 774,
	15644, 15644, 15644, 15644, 15644, 15644, 15644, 15644, 15644, 15644,
	15644, 15644, 15644, 15644, 15644, 15644, 15644, 15644, 15644, 15644,
	15644, 15644, 1282, 15644, 741, 15644, 15644, 15644, 15644, 1330,
	1081, 428, 1105, -1000, 2020, 2020, 2020, 41171, 41171, 393,
	516, -1000, 15644, -1000, 129, 13201, 285, 39407, 12, 6928,
	-1000, -1000, -1000, 8644, 594, 41143, 212, 4707, -1000, 2045,
	848, 1589, 1488, 443, 569, 568, 567, 15644, 15644, 12858,
	12501, 12144, 15987, 11787, 15644, 7614, 15644, 15644, 15644, 15644,
	11430, 11073, -1000, 442, -1000, -1000, -1000, -1000, 2044, -1000,
	-1000, 2040, -1000, 770, 767, 2038, -1000, 1560, -10, -1000,
	-1000, 25389, 1950, 1681, -1000, 1047, -1000, 1948, 35637, 1120,
	1228, -1000, -1000, 783, 1679, 571, 403, 1938, 403, 21533,
	-1000, 35637, -1000, 35637, -1000, -1000, 35637, -1000, 35637, -1000,
	35637, 35637, -1000, 35637, 35637, -23, 41143, 4160, 25071, 736,
	-1000, 620, 25389, 3604, -30, -1000, 696, -1000, -1000, -1000,
	-1000, 265, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 441, 1026, 440, 440, 440, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 557, -1000, -1000, 572,
	572, 572, -1000, -1000, -26, -1000, 1557, -1000, 578, -31,
	647, 15, -1000, 1276, -1000, 1142, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2055,
	1, -1000, -1000, 1, -1000, -1000, 6241, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35637, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2474, -1000, -1000, -1000, -1000, -1000, -1000,
	35637, 35637, 35637, -1000, 28263, -1000, -1000, -1000, -1000, 41143,
	-1000, 383, -1000, -1000, 41143, 923, 1407, -1000, 1407, -3,
	-1000, 40176, 1372, 35637, -1000, -1000, 439, -32, 571, 10716,
	20243, 6241, -1000, 571, 9001, -1000, 20888, 20888, 1331, 1383,
	20888, -1000, -1000, -1000, -1000, 27309, 467, 550, 27309, -1000,
	2035, 1350, -37, -1000, -1000, -1000, 35637, 435, -1000, 550,
	284, 1019, 35637, 35637, 35637, -1000, -1000, 1222, 36591, 1206,
	41611, 35637, -1000, 434, 433, 1340, 1333, 35637, 35637, 36273,
	35955, 35637, 955, 129, -1000, 432, 35637, 967, 35637, 129,
	-1000, 431, 35637, 942, -1000, 1455, 1152, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 560, 757,
	757, 773, 773, 773, 773, 2039, 2971, 3195, 962, 3964,
	3964, 3964, 167, 371, 371, 3964, 3964, 3964, 41171, 352,
	954, 15644, 15644, 729, 1057, 428, 954, 15644, 954, 954,
	954, 954, -1000, 1159, -1000, -1000, -1000, -1000, 1545, 427,
	15987, 15987, -1000, -1000, -1000, 7271, 16317, -1000, -1000, -1000,
	-1000, 425, 15644, -1000, 39645, -205, -42, -1000, -1000, 15644,
	-38, -39, -1000, -1000, 827, -1000, 15644, -1000, -24, 15644,
	15644, 15644, 282, -1000, 280, -1000, 724, -1000, 722, 720,
	719, -1000, 424, 1060, 423, 415, 15644, -1000, -1000, -1000,
	-1000, -1000, -1000, 41034, 38187, 279, -1000, 1536, -163, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 269, -1000, 261, -1000,
	40901, -163, 260, 2925, -1000, 15987, 15987, 15987, 7271, 412,
	258, -1000, 40045, -163, 40792, 10373, 10373, 10373, 257, 40659,
	15644, -163, 4266, 4116, 283, -51, -52, -1000, -53, -1000,
	2033, -64, 256, 558, 556, 254, 825, 1520, 35637, 253,
	-67, -9, 41611, -1000, -1000, -1000, -1000, -1000, 35637, 466,
	35637, 129, 35637, 2054, 129, 35637, 1678, 1703, 532, 35637,
	900, 15644, 1020, -1000, 19920, 601, 35637, 900, 97, -1000,
	-1000, -1000, 542, 35637, -1000, -1000, 134, 134, -1000, 117,
	1185, -12, -1000, 15644, -1000, -1000, 35637, 23799, -69, -1000,
	-1000, 41611, -1000, 513, 673, -1000, 2032, 574, 23799, 35637,
	-1000, 1400, -1000, -1000, 889, -1000, 1011, -1000, 18954, -1000,
	-54, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 923, -1000,
	15644, 2026, -1000, -1000, -1000, 8301, -1000, -1000, -1000, 35637,
	-132, 3604, -1000, 1479, -1000, -137, -1000, 1417, -1000, 1479,
	-1000, -1000, 1331, -1000, 407, 15644, 20888, -1000, 506, -1000,
	-72, -1000, 27309, -1000, 505, -192, -1000, 541, -1000, 550,
	406, 35637, 27309, -1000, -1000, -1000, 718, 717, 1677, -1000,
	1204, -1000, 610, -1000, 913, 15644, 16977, 401, 400, 1059,
	-1000, 1672, 1185, 1671, 1185, -1000, -22, 944, -1000, 15644,
	-1000, 716, -1000, -1000, 15644, -1000, 701, 574, 1515, 795,
	15644, 954, 954, 15644, 15987, 15987, -1000, 954, -1000, -1000,
	-1000, -1000, -1000, 1511, 397, 15644, 41611, 39554, 39490, -75,
	-1000, 10030, -28, -1000, 15644, -1000, 39350, -1000, -1000, 511,
	1743, -1000, 15644, 40550, 251, 9687, -1000, 40441, -29, -29,
	-1000, 2052, 1264, 1151, 1034, 895, 2018, -1000, 21855, 592,
	1079, 39292, 41486, 41611, -1000, 15644, -1000, -1000, 1510, 15644,
	-1000, 41486, 41611, 15987, 15987, 15987, 15987, 15987, 15987, 15987,
	15987, 15987, 15987, 15987, 15987, 15987, 15987, 15987, 15987, 15987,
	15987, 15987, 1384, 15987, 2017, 2017, 2017, -33, 9344, -1000,
	1491, 1510, 15644, 15644, 41611, 249, 248, 246, -1000, 15644,
	-163, 15644, 15644, 15644, -1000, -1000, -1000, 245, -1000, 2015,
	-1000, -1000, -1000, -1000, -1000, 806, -1000, 1434, -1000, 25389,
	396, 35637, 395, -1000, 392, -1000, -1000, 391, 35637, 1286,
	532, 24435, -1000, 579, -1000, 7957, 41143, -1000, 900, 1830,
	-78, -1000, -1000, -1000, 571, 21533, 20888, 9001, -81, -1000,
	-1000, -1000, -1000, 41143, -54, 1804, 1804, -1000, 2013, -1000,
	504, 244, -1000, 27945, -1000, -54, -1000, -1000, -1000, -1000,
	-1000, 35637, 1085, 39112, -1000, 1900, 6241, 243, 1465, 1896,
	-1000, 20888, 1465, -1000, 35637, 41143, -1000, -172, -1000, 2010,
	-1000, -1000, 1350, -1000, 5578, 27309, 35637, -83, -1000, 35637,
	35637, 35637, 1669, -1000, 1482, -1000, 39050, -91, -1000, 326,
	1851, 15644, -1000, -1000, 387, 16977, 35637, -1000, 1338, 1483,
	640, 35637, -1000, 35637, -1000, 35637, 35637, 35637, -92, 35637,
	-93, 35637, -1000, 23799, 765, 2001, 954, 4320, 3567, 15644,
	41611, 41280, -94, 15644, 15644, -1000, -100, -1000, 15644, 503,
	41143, -1000, -1000, -1000, 41143, 15644, 2051, 15644, 241, 240,
	239, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 237,
	-1000, -1000, 37863, 15644, 236, -1000, 235, 234, 41143, 1491,
	41143, -1000, -1000, 644, 644, 851, 851, 851, 851, 2017,
	1305, 1398, 566, 301, 301, 301, 492, 426, 426, 301,
	301, 301, 1506, 1311, 380, 328, 15644, -101, -1000, -1000,
	-1000, 41143, 41143, 232, -1000, -1000, -1000, -163, 216, 38996,
	38753, -1000, 231, -1000, -1000, 1443, -1000, 16977, 379, 35637,
	25389, 1931, 16977, 1115, 1316, 532, 24435, -1000, 783, -70,
	-1000, -1000, 386, 129, 900, -1000, -84, -1000, 540, 1780,
	-1000, 1779, 501, -1000, -1000, -106, 376, -1000, 539, 534,
	-1000, -1000, -1000, -1000, 1900, -1000, 581, 15644, 15644, 1417,
	581, -109, 550, -1000, -1000, -1000, 1999, -1000, -111, -1000,
	-1000, -1000, -1000, 35637, -1000, 35637, -1000, 6241, 35637, 1477,
	1182, -1000, -1000, 1329, 373, 15987, 35637, -1000, 1042, 16977,
	1900, 212, 6241, 1900, 38702, 4707, -112, -120, 1179, -1000,
	1171, 15644, -1000, 41611, 1185, 1185, -1000, 693, 675, 662,
	-1000, 661, -1000, -114, 22507, 15644, 15644, 41280, -134, -1000,
	954, 954, -1000, 38636, -1000, 41143, -1000, 40441, -1000, -1000,
	-1000, -1000, 1050, -1000, 38484, -1000, -1000, -1000, -1000, 15987,
	1495, 372, 41611, 38456, -1000, -1000, 15644, -1000, -1000, -1000,
	1054, -140, 16977, -141, 229, 129, -142, 35637, -1000, 532,
	24435, -1000, 1703, 1752, 35637, 1814, -1000, -1000, 368, 361,
	360, -1000, 27627, 27627, 23799, 23799, -1000, -1000, 35637, 41143,
	-163, -1000, -1000, 27309, 500, -1000, -1000, 1275, -1000, -1000,
	35637, 1189, -1000, -1000, 15644, 328, 357, 1434, 355, -1000,
	-1000, -1000, -1000, -1000, -1000, 1851, -24, -1000, 998, -1000,
	-1000, 41143, 1839, -1000, -1000, 35637, 35637, 354, 353, -1000,
	351, 212, 954, 954, -1000, -1000, 228, 1079, 1878, -1000,
	3456, 15987, 41611, -143, -1000, 38243, 35637, 1042, -148, -1000,
	1434, -1000, 1042, 349, 24435, -1000, 1286, 752, -151, 35637,
	-1000, -1000, 6571, 23799, 23799, -1000, -153, -1000, -1000, -121,
	-1000, 1930, -1000, -1000, -1000, -1000, 1663, 38215, 1267, 35637,
	-1000, 35637, 1900, 227, 35637, 615, 6241, -1000, -1000, 15644,
	15644, 15644, -1000, 989, 15644, 3456, -154, -1000, -1000, 339,
	1434, 1042, -1000, 1434, 16977, -1000, 1316, 874, -1000, 571,
	-1000, -161, -164, -1000, 35637, 325, 1624, -1000, 1084, 994,
	226, -166, -1000, -1000, 309, -1000, 15644, -1000, -169, -174,
	-29, 225, 15301, 15301, -163, -1000, 35637, -1000, 1434, -1000,
	-179, -1000, 21533, -1000, 574, 574, -1000, -1000, 35637, -1000,
	1091, 1087, 855, -1000, -1000, -1000, -1000, -1000, 1267, 41143,
	-1000, -1000, 131, -1000, -1000, -1000, 16647, 1168, 918, 39912,
	-1000, -184, -1000, 1042, -167, -1000, -1000, -1000, -1000, 1767,
	-1000, 633, 1148, 1148, 1084, 2051, 1973, -1000, -1000, -1000,
	-1000, -1000, 1125, 1434, -1000, -1000, 1983, -1000, -1000, 1362,
	-1000, -1000, 14958, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 2439, 2436, 1636, 1958, 2430, 2428, 2423, 2395, 2394,
	2393, 2392, 2391, 2388, 2387, 2383, 2382, 2380, 2379, 2378,
	1936, 2377, 1928, 2374, 2372, 2368, 2367, 1911, 2365, 2364,
	2363, 2356, 2354, 2353, 1903, 2349, 1849, 2347, 2345, 2344,
	2343, 2342, 1834, 1814, 2341, 89, 118, 1811, 2340, 2339,
	1804, 1758, 1756, 2338, 2337, 1728, 1720, 2331, 38, 2329,
	2328, 2321, 2319, 2316, 2315, 2313, 147, 160, 2311, 1698,
	2310, 2309, 2308, 2305, 2304, 2302, 2299, 2293, 2291, 2289,
	2286, 2285, 2282, 2277, 2269, 2268, 2267, 2265, 157, 2262,
	2261, 1674, 1602, 2258, 2257, 26, 24, 11, 56, 29,
	144, 3005, 135, 2252, 2251, 2250, 2248, 2247, 2244, 31,
	102, 101, 2243, 34, 2242, 2240, 59, 30, 19, 12,
	2239, 93, 2236, 2235, 1436, 21, 2234, 2233, 136, 2232,
	27, 20, 1696, 152, 145, 107, 112, 2231, 2229, 2228,
	2227, 50, 117, 2, 2226, 2225, 14, 79, 16, 2223,
	62, 18, 2221, 2218, 132, 2216, 73, 95, 1508, 96,
	116, 36, 2214, 70, 8, 66, 2211, 2210, 153, 41,
	2209, 45, 85, 143, 2206, 55, 156, 129, 80, 130,
	123, 2204, 2201, 2199, 103, 2198, 109, 111, 2196, 2195,
	84, 2193, 137, 139, 2192, 2188, 83, 2187, 113, 2186,
	2185, 154, 149, 114, 9, 54, 72, 6, 1538, 1523,
	124, 77, 60, 51, 2184, 2182, 240, 1175, 35, 99,
	76, 58, 98, 57, 82, 146, 23, 2183, 2181, 128,
	2180, 2179, 2178, 2177, 2176, 97, 2174, 2169, 63, 138,
	87, 43, 48, 92, 47, 69, 131, 108, 151, 104,
	2164, 88, 119, 2163, 65, 2162, 2161, 1587, 115, 2157,
	2155, 2150, 1552, 1371, 1024, 53, 2149, 2147, 877, 91,
	2144, 2143, 78, 2141, 106, 105, 2139, 140, 142, 42,
	2137, 110, 46, 90, 2134, 28, 25, 0, 1843, 386,
	2133, 125, 86, 2132, 2129, 2128, 2126, 22, 3, 13,
	4, 7, 5, 37, 33, 2124, 2123, 133, 121, 75,
	2120, 155, 2119, 2117, 2116, 49, 2115, 15, 2114, 17,
	2109, 2106, 10, 1, 2105, 2104, 141, 2103, 94, 2099,
	1880, 2097, 150, 2095, 2073, 1631, 32, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 111,
	111, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 108, 108, 113, 113,
	113, 115, 115, 112, 112, 107, 107, 20, 20, 56,
	56, 98, 51, 51, 51, 285, 285, 286, 286, 94,
	94, 95, 95, 95, 95, 96, 96, 97, 97, 97,
	26, 26, 26, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 34, 34, 35, 35,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 41, 41, 41, 39, 39,
	39, 38, 38, 38, 37, 37, 37, 40, 40, 40,
	160, 160, 159, 159, 162, 162, 42, 42, 42, 42,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 46, 46, 46, 46, 46, 46, 46, 46, 253,
	253, 252, 44, 44, 227, 227, 47, 47, 185, 185,
	48, 48, 48, 48, 48, 49, 49, 57, 57, 326,
	326, 326, 330, 330, 331, 331, 332, 332, 332, 332,
	332, 332, 332, 328, 328, 54, 54, 54, 93, 93,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 63,
	63, 65, 62, 62, 62, 64, 64, 64, 64, 66,
	66, 66, 66, 67, 67, 67, 67, 67, 68, 68,
	140, 140, 278, 277, 277, 283, 283, 283, 138, 138,
	138, 138, 138, 139, 139, 139, 276, 276, 276, 276,
	284, 284, 284, 284, 284, 284, 282, 282, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 81, 81, 81, 88, 88, 88,
	88, 88, 88, 88, 70, 70, 75, 75, 75, 75,
	75, 71, 71, 76, 76, 77, 77, 78, 78, 78,
	78, 78, 78, 72, 72, 72, 72, 80, 80, 80,
	80, 79, 79, 85, 85, 85, 85, 85, 85, 82,
	82, 82, 82, 83, 83, 83, 86, 86, 86, 86,
	73, 73, 74, 74, 87, 87, 84, 84, 84, 43,
	327, 327, 329, 329, 52, 52, 30, 30, 31, 31,
	141, 141, 142, 142, 206, 206, 206, 206, 143, 143,
	114, 114, 114, 205, 295, 295, 296, 296, 296, 296,
	296, 296, 297, 297, 297, 297, 297, 297, 297, 293,
	293, 294, 291, 291, 292, 292, 292, 292, 333, 333,
	204, 204, 146, 146, 300, 300, 300, 300, 298, 298,
	298, 298, 298, 301, 299, 302, 302, 302, 302, 302,
	239, 239, 239, 90, 90, 32, 32, 120, 120, 33,
	33, 29, 29, 29, 189, 189, 150, 150, 244, 244,
	244, 131, 131, 109, 109, 109, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 190, 190, 191,
	191, 53, 53, 55, 55, 60, 60, 89, 89, 89,
	89, 89, 89, 21, 21, 21, 21, 25, 25, 25,
	25, 59, 59, 335, 335, 127, 127, 127, 127, 128,
	128, 201, 201, 202, 202, 202, 203, 203, 203, 122,
	121, 123, 123, 28, 28, 28, 116, 116, 117, 117,
	118, 118, 119, 119, 336, 336, 50, 50, 50, 92,
	92, 134, 134, 198, 198, 198, 200, 200, 199, 199,
	199, 175, 175, 175, 91, 91, 155, 155, 164, 164,
	165, 165, 250, 166, 166, 58, 58, 101, 101, 99,
	99, 99, 99, 99, 99, 100, 100, 100, 102, 102,
	102, 102, 102, 102, 102, 105, 105, 105, 106, 106,
	106, 104, 104, 308, 308, 308, 311, 311, 307, 309,
	309, 310, 310, 334, 334, 176, 176, 176, 145, 144,
	144, 148, 148, 147, 149, 149, 243, 243, 243, 173,
	173, 173, 173, 192, 192, 193, 193, 194, 194, 195,
	195, 195, 196, 196, 197, 197, 172, 172, 223, 223,
	103, 103, 103, 154, 154, 154, 156, 156, 213, 213,
	213, 214, 214, 212, 212, 212, 212, 245, 245, 245,
	245, 245, 245, 245, 245, 324, 324, 324, 325, 325,
	242, 242, 246, 246, 246, 246, 246, 246, 240, 240,
	240, 240, 241, 241, 251, 251, 179, 179, 179, 179,
	177, 177, 178, 178, 247, 247, 247, 247, 174, 174,
	248, 248, 248, 207, 207, 254, 254, 254, 272, 272,
	153, 153, 153, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	256, 256, 256, 256, 258, 258, 258, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 271, 271, 271, 271, 271,
	259, 259, 266, 266, 267, 267, 268, 269, 260, 260,
	261, 261, 262, 263, 270, 270, 270, 270, 274, 274,
	264, 264, 264, 264, 264, 265, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	187, 187, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 217, 217, 217, 217, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 303,
	303, 303, 303, 303, 303, 303, 303, 305, 305, 306,
	306, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 312,
	312, 313, 313, 315, 315, 316, 316, 317, 318, 318,
	318, 319, 320, 320, 314, 314, 321, 321, 321, 322,
	322, 323, 323, 323, 323, 323, 229, 229, 229, 230,
	230, 231, 237, 237, 237, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 129, 129, 129, 129, 129, 161, 161, 226, 226,
	224, 224, 224, 228, 228, 180, 180, 273, 273, 273,
	273, 273, 273, 273, 181, 181, 181, 188, 182, 182,
	183, 183, 183, 183, 183, 183, 220, 221, 184, 184,
	184, 222, 222, 232, 236, 236, 235, 234, 234, 233,
	233, 210, 210, 211, 211, 209, 208, 169, 169, 168,
	168, 167, 167, 337, 337, 238, 238, 170, 170, 171,
	163, 163, 249, 249, 249, 249, 157, 157, 136, 136,
	158, 158, 132, 132, 135, 135, 133, 133, 133, 133,
	151, 151, 152, 152, 130, 130, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 275, 275, 275,
	225, 124, 124, 124, 125, 125, 126, 126, 280, 280,
	280, 281, 281, 281, 281, 279, 279, 279, 279, 279,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 2, 6, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 5, 2, 3, 0, 3, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 2, 6, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 4,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 3, 3, 1, 3, 3, 1, 1, 2, 2,
	1, 0, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 4, 3, 5, 3, 4, 5, 2,
	3, 3, 3, 4, 2, 3, 4, 3, 3, 3,
	4, 4, 4, 4, 2, 3, 5, 5, 5, 2,
	2, 0, 2, 0, 3, 2, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 2, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 2, 3, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 134, 214, 220, 240, 242, 244,
	251, -99, -101, 238, 239, -62, -63, -64, -65, -93,
	262, -70, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, 265,
	-21, -25, -59, 303, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -102, -100, 354, 312,
	35, 274, 61, 101, 246, 328, 335, -105, -103, -104,
	-106, 255, 320, 284, 358, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 2,
	284, 323, 83, 141, -326, 2, -158, 284, 83, -133,
	-124, 347, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 131, 132, 133, 134, 135, 142,
	145, 147, 140, 157, 158, 159, 161, 162, 163, 166,
	165, 170, 173, 176, 178, 179, 180, 183, 181, 185,
	186, 188, 187, 193, 195, 196, 198, 201, 204, 207,
	210, 211, 212, 213, 214, 216, 218, 220, 222, 223,
	224, 225, 226, 228, 229, 231, 232, 233, 234, 235,
	238, 236, 237, 239, 240, 241, 242, 244, 246, 247,
	249, 263, 264, 275, 251, 252, 253, 254, 258, 256,
	259, 260, 262, 265, 267, 270, 273, 274, 276, 279,
	280, 277, 272, 283, 285, 286, 287, 288, 289, 290,
	291, 298, 299, 303, 304, 305, 306, 309, 310, 311,
	312, 314, 317, 318, 319, 324, 329, 330, 331, 332,
	333, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 85, 87, 88, 104, 108, 109,
	115, 116, 117, 127, 129, 136, 137, 146, 148, 149,
	150, 151, 152, 154, 168, 182, 192, 194, 205, 209,
	217, 219, 227, 248, 257, 268, 269, 278, 281, 293,
	294, 295, 300, 301, 316, 320, 321, 357, 357, 2,
	158, 224, -132, -124, 83, 357, 357, 357, 357, 284,
	2, 313, 323, -189, 83, 308, 357, 357, -124, 220,
	22, 2, 92, 145, 311, 310, 22, 216, 256, 286,
	288, 2, 357, 357, 357, 357, 357, 2, 323, 284,
	141, 83, 313, -124, 2, -46, 2, 354, -45, -4,
	-27, -36, -47, -42, -43, -20, -22, -34, -51, -50,
	-52, -56, -55, -58, -69, -91, -92, -330, 2, 22,
	-331, -332, 69, 98, 125, 255, 145, 92, 310, -279,
	4, -287, -289, -288, -290, 58, 70, 124, 144, 138,
	156, 160, 169, 171, 184, 206, 208, 245, 266, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 65, 69, 74, 75, 77, 76,
	78, 79, 80, 89, 91, 93, 95, 96, 99, 101,
	103, 110, 111, 112, 120, 122, 123, 125, 128, 130,
	139, 141, 143, 153, 155, 164, 167, 172, 174, 175,
	189, 190, 191, 197, 199, 200, 202, 203, 215, 221,
	230, 243, 255, 261, 271, 282, 284, 292, 296, 297,
	302, 307, 308, 313, 315, 322, 323, 325, 326, 327,
	328, 284, 2, 158, 2, -124, 2, -326, 2, 158,
	2, -330, 2, -124, 2, -128, 2, 251, -124, -88,
	259, 2, 4, 22, 83, 183, 261, 293, 357, 357,
	357, 173, 55, 248, 259, -67, 299, -66, 293, -278,
	-68, 2, -159, 183, -124, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 2, -88, 259, 34, 55, 22, 60, 84,
	126, 141, 142, 162, 65, 66, 223, 173, 159, 298,
	163, 260, 285, 299, 69, 314, 289, 106, 357, 357,
	357, -334, 2, 284, -100, -102, -101, -147, -148, 307,
	153, 103, 203, -99, -101, 2, -308, -283, 2, -276,
	-239, 9, 302, 110, 199, -282, 8, 346, -275, -281,
	5, 7, 345, 4, -287, -289, -288, -335, 2, 299,
	299, 2, -335, 2, -335, 2, -127, 2, 299, 296,
	-311, 228, -307, -124, -311, 357, 357, 359, 357, -144,
	-145, 2, 22, 95, -171, 2, 354, -245, 2, 352,
	-247, -132, -101, -246, 354, 200, -3, 2, -247, 136,
	-132, 2, -247, 136, -132, 2, -124, 2, -135, 136,
	-132, 296, 359, -158, -151, -124, -209, -208, 356, -215,
	2, -217, 345, 346, 340, 189, 334, -229, -219, -232,
	104, 248, 354, -132, -218, 360, 9, -305, -101, 29,
	-230, -231, 49, -124, 7, 8, 5, 6, -130, -256,
	-225, -265, 302, 110, 191, -303, -304, 4, -287, -280,
	-257, -267, -261, -264, 154, 58, 75, 76, 79, 77,
	80, 261, 313, 50, 28, 108, 109, 209, 217, 281,
	300, 301, 136, 192, 137, 56, 127, 168, 97, 37,
	39, 41, 42, 51, 52, 85, 87, 88, 115, 116,
	117, 146, 148, 149, 150, 151, 152, 194, 227, 268,
	278, 294, 295, 321, -288, -268, -269, -262, -263, -270,
	-215, 2, 123, 354, -168, -169, -208, -209, 2, -159,
	136, -124, 2, -159, 2, 141, -124, 136, 2, -124,
	22, 123, 2, 155, 2, 155, 2, -248, 2, -247,
	-160, 136, 2, -159, -160, 136, 2, -136, 136, 2,
	-135, -124, 136, 2, -151, 136, 2, -185, 354, -253,
	2, -252, -281, 320, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 199, 359, -159, -215, -227, 354,
	123, -215, 199, -124, -88, 333, 2, 2, 263, 2,
	354, -67, 53, 299, -202, 2, -203, -121, -122, -123,
	157, 222, 226, 333, 296, 339, 123, -283, -140, 89,
	-162, 356, -88, 2, -285, 2, -282, 9, 263, 2,
	223, 260, 55, 123, 2, 2, -327, 2, 199, 123,
	2, 123, 2, 123, 2, 123, 2, 123, 2, 2,
	223, 260, 2, 120, 2, 298, 2, 2, 123, 2,
	157, 222, 275, 2, 284, 323, 2, 123, 123, -174,
	-247, -147, -148, -173, -192, -193, 172, 112, 197, -176,
	22, 95, -176, -176, 44, 355, 355, 8, 7, 7,
	-201, -202, -201, 296, -128, 359, -311, -152, 354, -171,
	-163, -249, -215, 347, -163, -170, -238, -215, 89, 70,
	-179, 160, 184, 124, 169, 245, 144, 7, -46, -212,
	360, 354, 347, -242, 335, -101, -246, 354, -245, -132,
	354, -111, 236, -110, 21, 23, 98, 318, 104, 272,
	290, 252, 236, 104, 236, 272, 290, 252, 236, 104,
	360, -285, -133, 359, -279, 347, 10, 11, 57, 33,
	345, 346, 347, 348, 118, 349, 350, 343, 344, 342,
	337, 338, 339, 63, 177, 250, 13, 14, 15, 26,
	202, 171, 334, 138, 266, 340, 16, 17, 18, 156,
	36, 139, -129, -137, -215, -215, -215, -215, -215, 208,
	-167, -210, 352, -101, 354, 354, -101, -215, -161, 354,
	7, -101, -224, 352, -233, -215, -168, 354, 5, 354,
	5, -312, 329, 120, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 219, -274, 324, -274, -274, -258, 354, -258,
	-259, 354, -258, 330, 335, 354, 276, 355, -157, -132,
	-169, 354, -146, 189, -120, -309, 328, -146, 354, -125,
	136, 2, -124, -309, 189, -248, -134, -132, -134, 262,
	-124, 30, -113, 359, 48, 241, 104, -113, 104, -113,
	359, 104, -113, 104, 104, -161, -215, 355, 359, -326,
	-332, 69, 354, 30, -226, -254, -255, -257, -266, -260,
	-264, -265, 40, 46, 45, 291, 182, 257, 269, 316,
	38, 198, 147, 146, 148, 149, 150, 151, 152, 268,
	37, 227, 116, 117, 115, 97, 88, 87, 194, 42,
	41, -268, -269, -262, -263, 85, 294, 295, 154, 39,
	52, 51, 321, 278, -286, -285, -326, -66, -278, -161,
	30, -202, 2, 359, -203, 170, -139, 176, 188, 132,
	200, 331, -284, 5, 4, -225, -239, 89, 173, -265,
	-277, 89, -283, -277, 89, 73, 356, -279, -159, 22,
	264, 2, -278, -329, 120, -326, -278, -278, -278, -278,
	-278, 259, -46, 120, -124, 170, -278, 2, -278, 2,
	284, 141, 284, -113, 359, -173, -193, -192, -194, -215,
	22, -197, 114, 185, -215, -217, -100, -100, -100, -149,
	-243, -215, 221, 141, -128, -307, 30, -151, -154, 359,
	123, 30, 4, -154, 359, 355, 160, 160, -245, -179,
	160, -177, 206, -177, -177, -324, 354, 353, -242, -279,
	352, 361, -161, 2, -241, -240, 30, -124, 204, 355,
	-132, 359, 296, -190, 65, 59, -205, 136, 59, -291,
	-124, 65, -292, 54, 308, 221, 122, -190, 65, -190,
	65, 65, -247, 33, -58, 123, 296, -247, 296, 33,
	-58, 123, 296, -135, -279, -251, 336, -124, -272, -254,
	-271, 232, 233, 231, 235, 234, -254, -279, 293, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, 171, 138, 266, 36, 139, -215, 296, -215, -215,
	-215, -215, 181, 189, 191, 302, 110, 309, 95, 195,
	-337, 282, 32, -222, -101, 354, -237, 27, 271, 22,
	-229, 248, 354, -210, -215, -211, -161, 355, 355, 359,
	-161, -228, 353, -224, -236, -235, 325, 355, -161, 322,
	22, 95, 347, 2, 7, -186, 332, 180, 86, 133,
	179, -187, 254, -313, 113, 128, 354, 355, 2, 355,
	2, 355, 2, -215, -215, -180, 2, -273, -161, 4,
	332, 180, 86, 133, 179, 254, -180, 2, -181, 2,
	-215, -161, -182, -216, -217, 345, 346, 340, 354, 248,
	-183, 2, -215, -161, -215, 43, 167, 297, -184, -215,
	123, -161, -215, -215, -215, -161, -161, 2, -161, 2,
	354, 7, 7, 293, 293, 7, 123, 355, 359, -141,
	-151, -142, -124, -206, -205, -293, -294, -291, 141, 308,
	111, 30, 104, 213, 30, 199, 189, -116, 287, 104,
	-207, 326, -198, -58, 354, 89, 30, -198, -164, -165,
	-250, -166, -132, 354, -124, -159, -160, -160, -135, -136,
	-124, -151, 355, 359, -46, -252, 296, 315, -142, -45,
	355, 359, -153, 29, 352, -186, 354, -251, 359, 123,
	355, 299, -203, -138, 226, 270, 237, 258, 359, -279,
	-328, -124, 259, -46, -132, -135, -132, -247, -195, -275,
	354, 346, -196, 248, 249, 359, -109, 31, 93, 161,
	-132, 354, 355, -207, -249, -156, 2, -245, -279, -207,
	-238, -245, -245, -178, 315, 199, 160, -245, -240, 355,
	-325, 7, -242, -241, 7, -214, -213, 121, 187, 355,
	-124, 354, -242, 355, -110, -132, -124, -124, 189, -205,
	136, -115, 189, -254, -124, 354, 354, 161, 161, -124,
	-124, 136, -124, 136, -124, -124, -111, 236, -58, 354,
	-132, 236, -124, -58, 354, -124, 236, -94, 135, 195,
	333, -215, -215, 296, -337, 282, -222, -215, 181, 191,
	302, 110, 309, 95, 195, 123, 354, -216, -216, -161,
	-219, 354, -161, 353, 363, 355, -215, 353, 353, 359,
	-234, -235, 99, -215, -148, 359, -147, -215, -161, -161,
	355, 355, 296, 296, 296, 296, 354, -318, 207, 354,
	354, -215, 30, 359, 355, 123, 355, 355, -188, 215,
	355, 10, 11, 345, 346, 347, 348, 118, 349, 350,
	343, 344, 342, 337, 338, 339, 63, 177, 250, 13,
	14, 15, 156, 139, -216, -216, -216, -161, 354, 355,
	-220, -221, 123, 120, 30, -184, -184, -184, 355, 123,
	-161, 359, 359, 359, 355, 355, 355, 7, 355, 359,
	355, 333, 333, 355, 276, 123, -132, 355, 355, 359,
	-125, 141, -125, -58, -159, 5, -58, -132, 104, -117,
	100, -336, 339, -124, -175, 243, -215, -175, -200, 199,
	-157, 320, -124, -175, -155, 359, 123, 339, -157, -113,
	-113, -113, -113, -215, -328, -285, 355, -254, 352, 353,
	7, 7, -97, 328, -285, -328, -121, 306, 62, 226,
	-283, 359, -196, -215, -243, -132, 360, -45, -172, 128,
	-251, 359, -172, -178, 354, -215, -245, 353, 355, 359,
	-241, 353, 359, 362, 339, -242, 354, -151, -240, 296,
	296, 104, 189, 317, -295, -292, -215, -150, -244, -124,
	-306, 354, -303, -304, -130, 354, 354, -108, 98, 262,
	-191, 104, -113, 104, -113, 296, -190, 65, -161, 296,
	-161, 296, -97, 123, 283, -215, -215, -216, -216, 123,
	354, -215, -226, 26, 26, 355, -161, 355, 359, -211,
	-215, 355, -224, 101, -215, 292, 355, 322, -148, -148,
	-148, 5, 180, 133, 179, -187, 179, -187, -187, 7,
	-319, -124, 354, 326, -147, 355, -272, -254, -215, -220,
	-215, -272, -254, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, 95, 189, 195, -216, 359, -161, 355, -221,
	-220, -215, -215, -254, 355, 355, 355, -161, -215, -215,
	-215, 355, 7, 276, -143, 140, -206, 354, -125, 354,
	354, -146, 354, -124, -118, 166, -336, -282, -309, -163,
	190, -175, 64, 355, -207, -165, -156, -238, 355, -98,
	71, -98, 7, 353, 355, -96, 201, -95, -124, 5,
	-124, 200, 355, -109, -279, 355, -223, 130, 44, -245,
	-223, -151, -212, 7, -213, -279, 352, -241, -151, 355,
	-124, -124, -205, 104, -296, 65, -297, 57, 111, 69,
	189, 191, 308, 221, 54, 89, 230, 355, 355, 359,
	-131, -168, 57, -131, -215, 354, -150, -151, 189, 89,
	189, 89, 82, 304, -124, -124, -132, -124, -124, 355,
	-132, 355, -124, -286, 293, 26, 26, -215, -226, 355,
	-215, -215, 355, -215, 353, -215, 5, -215, 355, 355,
	355, 355, -320, -124, -215, 355, 355, 355, -221, 123,
	95, 195, 354, -215, 355, 355, 359, 355, 355, 355,
	139, -150, 354, -151, -141, 30, -150, 199, -119, 165,
	-336, -282, -116, -199, 354, 199, -58, -175, 339, 82,
	82, 353, 359, 354, 339, 339, -109, -315, 327, -215,
	-161, -315, 355, -242, 7, 355, -205, -124, -279, -124,
	111, 136, 191, 161, 354, -216, -132, -204, -333, 68,
	280, -244, -109, -279, -109, 355, -161, 355, 355, 191,
	191, -215, -254, -113, -113, 296, 296, 296, 296, -218,
	-130, -124, -215, -215, 355, 355, -148, -314, 212, 355,
	-216, 123, 354, -226, 355, -215, 210, 355, -150, 355,
	355, -58, 355, -132, -336, -282, -117, 96, -151, 65,
	-171, -101, 354, 354, 354, -95, -96, -285, -285, -316,
	-317, -124, -241, 353, -297, -125, 189, -215, -126, 354,
	-143, 354, -131, -148, 230, -112, 57, -124, -124, 354,
	354, 354, 355, -148, 44, -216, -226, 355, 355, -132,
	-204, 355, -143, -204, 354, -282, -118, 310, 190, 355,
	-124, -286, -286, 355, 359, 30, 104, 355, -300, 178,
	-124, -151, -109, 355, -132, -107, 315, -279, -161, -161,
	-161, -321, 225, 249, -161, 355, 354, -143, -204, -143,
	-150, -119, 262, -207, 355, 355, -317, -319, 111, -298,
	-301, -299, 199, 124, 211, 267, 355, 355, -146, -215,
	355, 355, -148, 355, -322, -323, 36, 305, 73, -215,
	-322, -151, -143, 355, -164, -97, -97, -124, -299, 199,
	-301, 199, 310, 92, -300, 355, -323, 218, 119, 248,
	218, 119, 355, -204, -207, -302, 186, 241, 48, 262,
	-302, -298, 26, -114, 48, 241, -143, 20, 191, 89,
	-323,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 45, 46,
	47, 48, 50, 52, 55, 57, 59, 61, 0, 0,
	143, 145, 0, 0, 152, 154, 156, 158, -2, 161,
	163, 0, 0, 0, 174, 176, 178, 180, 182, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 635, -2, 0, 0, 280, 282, 284, 286, 287,
	0, 338, 340, 342, 344, 346, 348, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 367, 369, 371, 0,
	557, 559, 561, -2, 64, 65, 66, 67, 68, 74,
	75, 76, 77, 70, 72, 671, -2, 682, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 648, 650, 652,
	654, -2, 0, 0, -2, 6, 11, 13, 15, 18,
	20, 22, 25, 27, 29, 31, 33, 35, 37, 39,
	42, 44, 49, 51, 53, 56, 58, 60, 62, 63,
	0, 0, 0, 0, 0, 118, 259, 0, 1233, 1160,
	1166, 1167, 1191, 1192, 1193, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 144, 146, 147,
	0, 0, 0, 1162, 1233, 153, 155, 157, 159, 0,
	165, 0, 0, 0, 0, 524, 162, 164, 250, 1293,
	252, 254, 0, 0, 0, 0, 168, 169, 170, 171,
	172, 173, 175, 177, 179, 181, 183, 184, 0, 0,
	0, 0, 0, 249, 247, 206, 207, 0, 231, 232,
	233, 234, 235, 237, 238, 210, 212, 213, 215, 217,
	219, 221, 223, 225, 226, 227, 229, 0, 256, 262,
	263, 264, 266, 267, 268, 269, 270, 271, 272, 439,
	1205, 1206, 1207, 1208, 1209, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 0, 124, 0, 445, 245, 243, 0, 120, 0,
	554, 0, 258, 555, 556, 551, 552, 1320, 580, 275,
	0, 277, 377, 378, 379, 380, 381, 0, 281, 283,
	285, -2, -2, 1409, -2, 293, -2, 303, 1415, 0,
	306, 307, 312, -2, 202, 339, 341, 343, 345, 347,
	349, 351, 353, 355, 357, 359, 361, 363, 365, 368,
	370, 372, 373, 374, 0, 0, 0, 378, 0, -2,
	-2, 0, 0, 0, 0, 0, -2, 0, -2, 0,
	0, -2, -2, 0, 0, -2, 0, 0, 558, 560,
	562, 0, 514, 673, -2, 646, 647, -2, 0, 677,
	677, 677, 0, 0, 647, 645, 0, 278, 279, 315,
	316, 317, 326, 327, 328, 329, 510, 0, 512, 336,
	337, 1187, 0, 1201, 1202, 1203, 1204, 582, 564, 573,
	582, 566, 567, 568, 569, 570, 571, 572, 575, 0,
	663, 1299, 666, 1173, 664, 649, 651, 0, 653, 0,
	0, 657, 679, 678, 710, 711, 0, 661, 662, 672,
	726, 764, 741, 732, 0, 0, 2, 69, 0, 1391,
	764, 71, 0, 1391, 764, 73, 0, 78, 0, 1391,
	1165, 0, 0, 260, 261, 1170, 1168, 1169, 0, 148,
	149, 872, 0, 0, 0, 0, 0, 0, 964, 966,
	1383, 1409, 0, 968, 969, 0, 971, 973, 974, 0,
	977, 978, 1130, 1162, 1176, 1177, 1178, 1179, 0, 0,
	1182, 0, 1184, 1185, 1186, 1030, 988, -2, -2, 1174,
	800, 801, 802, 803, -2, 1423, 992, 995, 998, 1001,
	1002, 1003, 1004, 0, 1367, 1384, 1385, 1405, 1406, 1414,
	1418, 1419, 1391, 1402, 1392, 1379, 1389, 1400, 1239, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1200, 834, 835, 840, 841, 843,
	150, 151, 0, 0, 1163, 1139, 1137, 1138, 160, 493,
	1391, -2, 516, 493, 520, -2, 670, 1391, 595, 251,
	253, 0, 167, 0, 608, 0, 610, 0, 625, 770,
	110, 1391, 187, 200, 110, 1391, 190, 110, 1391, 193,
	1158, 110, 1391, 196, 197, 1391, 199, 246, 0, 0,
	-2, 239, 241, -2, 236, 211, 214, 216, 218, 220,
	222, 224, 228, 230, 0, 0, 0, 444, 0, 0,
	0, 553, 0, 579, 276, 382, 383, 288, 0, 290,
	0, 292, 1378, -2, 295, 296, 583, 586, 587, 588,
	0, 0, 0, 0, 0, 0, 0, 308, 309, 310,
	203, 0, 375, 376, 384, 385, 125, 126, 0, 388,
	409, 421, 0, 0, 392, 394, 443, 396, 0, 0,
	398, 0, 400, 0, 402, 0, 404, 0, 406, 408,
	410, 422, 412, 672, 414, 0, 416, 420, 0, 425,
	0, 427, 428, 429, 0, 0, 435, 0, 0, 110,
	768, -2, 0, 641, 691, 692, 0, 0, 0, 0,
	675, 676, 0, 0, 0, 637, 638, 511, 1189, 1188,
	563, 581, 565, 0, 577, 0, 665, 0, 0, 712,
	715, 1150, 1154, 1155, 715, 0, 1147, 1145, 1146, 0,
	0, 0, 0, 761, 761, 761, 759, 735, 0, 741,
	0, 0, 765, 753, 0, -2, 732, 0, 0, 766,
	0, 79, 548, 89, 0, 548, 548, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 755, 1161, 0, 1135, 1136, 0, 0, 0, 0,
	1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1071, 1072,
	1075, 1076, 1077, 0, 0, 0, 1078, 1079, 1080, 0,
	0, 1082, 0, 1084, 0, 0, 0, 0, 0, 0,
	1144, 0, 0, 1081, 877, 878, 879, 901, 902, 0,
	965, 1141, 1134, 967, 0, 0, -2, 1086, 0, 0,
	970, 975, 976, 0, 0, 1129, -2, 0, 1181, 0,
	869, 1032, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 819, 837, 848, 845, 844, 821, 0, 820,
	818, 0, 822, 0, 0, 0, 140, 0, 0, 1156,
	1140, 451, 0, 0, 515, 0, 669, 0, 0, 0,
	1391, 523, 1194, 597, 0, 774, 0, 611, 0, 0,
	771, 0, 185, 0, 108, 109, 0, 188, 0, 191,
	0, 0, 194, 0, 0, 0, 1086, 672, 0, 0,
	265, 0, 0, 672, 0, 1088, 782, 783, 784, 785,
	786, 869, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 831, 0, 806, 806, 806, 823,
	824, 832, 833, 838, 839, 850, 851, 853, 855, 849,
	849, 849, 846, 847, 755, 127, 0, 289, 0, 0,
	0, 297, 298, 0, 585, 0, 589, 323, 324, 325,
	591, 592, 304, 330, 331, 332, 333, 334, 335, 0,
	299, 301, 313, 300, 302, 305, 0, 204, 386, 387,
	389, 390, 391, 395, 0, 440, 397, 399, 401, 403,
	405, 413, 417, 672, 423, 426, 430, 431, 432, 433,
	0, 0, 0, 513, 0, 644, 689, 690, 693, 697,
	698, 701, 704, 705, 695, 872, 658, 659, 660, 683,
	684, 535, 0, 0, 576, 667, 0, 0, 774, 0,
	0, 0, 1153, 774, 0, 1149, 0, 0, 0, 0,
	0, 756, 760, 757, 758, 0, 0, 741, 753, 723,
	0, 0, 0, 730, 731, 752, 0, 751, 740, -2,
	0, 0, 0, 0, 0, 547, 91, 1391, 0, 112,
	0, 0, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 1164, 130, 0, 1171, 873, 778,
	779, 825, 826, 827, 828, 829, 874, 875, 0, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, -2,
	-2, -2, 893, 894, 895, -2, -2, -2, 899, 900,
	-2, 1083, 1085, 0, 1144, 0, -2, 0, -2, -2,
	-2, -2, 913, 0, 915, 918, 920, 922, 0, 0,
	0, 0, 1143, 932, 1121, 0, 0, 1062, 1063, 1064,
	917, 0, 0, 1142, 1133, 0, 0, -2, 972, 0,
	0, 0, 1092, 1093, 1128, 1124, 0, 979, 682, 0,
	0, 0, 0, 986, 0, 1190, 856, 857, 858, 859,
	860, 861, 870, 1040, 0, 0, 0, 993, 994, 996,
	997, 999, 1000, 0, 0, 0, 1008, 0, 1096, -2,
	-2, -2, -2, -2, -2, -2, 0, 1010, 0, 1012,
	1086, 1106, 0, 0, 935, 0, 0, 0, 0, 1409,
	0, 1015, 1086, 1114, 0, 0, 0, 0, 0, 1086,
	0, 1120, 0, 0, 0, 0, 0, 1026, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 450, 1170, 452, 454, 455, 456, 457, 1195, 0,
	1195, 0, 0, 0, 0, 0, 0, 599, 605, 0,
	623, 0, 623, 613, 0, 0, 0, 623, 627, 628,
	630, 631, 0, 0, 772, 201, 110, 110, 1159, 110,
	110, 198, 248, 0, 208, 240, 0, 0, 0, 242,
	244, 0, 775, 777, 0, 787, 0, 139, 0, 0,
	291, 0, 584, 590, 0, 320, 0, 322, 0, 205,
	442, 273, 415, 418, 436, 437, 438, 769, 0, 699,
	0, 0, 696, 702, 703, 0, 686, 533, 534, 0,
	0, 672, 1172, 707, 1151, 755, 714, 716, 1152, 707,
	1148, 743, 0, 745, 0, 0, 0, 747, 0, 736,
	0, 738, 753, 728, 0, 0, 721, 0, 720, 741,
	749, 0, 0, 767, 90, 537, 0, 0, 0, 93,
	1391, 101, 0, 465, 0, 0, 0, 0, 0, 550,
	102, 1391, 110, 1391, 110, 103, 80, 548, 81, 0,
	543, 0, 536, 82, 0, 545, 0, 139, 0, 0,
	0, -2, -2, 0, 0, 0, 933, -2, 914, 916,
	919, 921, 923, 0, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 1131, 1134, -2, 1087, 1090, 1091, 0,
	0, 1125, 0, 0, 0, 0, 681, 682, 682, 682,
	985, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 1007, 0, 1009, 1011, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 939, 940, 0, 0, 1014,
	1112, 1113, 0, 0, 0, 0, 0, 0, 1020, 0,
	1119, 0, 0, 0, 1024, 1025, 1027, 0, 804, 0,
	830, 852, 854, 842, 141, 0, 1157, 459, 492, 0,
	0, 1195, 0, 448, 493, 517, 519, 0, 0, 601,
	605, 0, 604, 670, 166, 0, 773, 606, 623, 0,
	0, 615, 612, 609, 774, 0, 0, 0, 0, 186,
	189, 192, 195, 1087, 255, 0, 0, 1089, 0, 780,
	0, 0, 119, 0, 128, 257, 294, 318, 319, 321,
	314, 0, 0, 0, 685, 535, 0, 0, 709, 0,
	713, 0, 709, 744, 0, 763, 746, 726, 737, 0,
	734, 724, 0, 725, 0, 753, 0, 0, 733, 0,
	0, 0, 0, 111, 463, 482, 0, 0, 526, 532,
	532, 0, 989, 990, 0, 0, 0, 95, 0, 0,
	0, 0, 99, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 876, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1122, 0, 1057, 0, 0,
	1133, -2, 1094, 1123, 1127, 0, 980, 0, 0, 0,
	0, 1183, 862, 863, 864, 865, 866, 867, 868, 0,
	1038, 1039, 1043, 0, 0, 991, 0, 0, 1095, 1105,
	1107, 936, 937, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, -2, -2, -2, 954, 955, 956, -2,
	-2, -2, 0, 0, 0, 1108, 0, 0, 1060, 1110,
	1111, 1116, 1117, 0, 1017, 1018, 1019, 1118, 0, 0,
	0, 836, 0, 142, 446, 0, 453, 0, 0, 0,
	451, 0, 0, 0, 603, 605, 0, 596, 597, 621,
	622, 607, 620, 0, 623, 629, 626, 632, 0, 0,
	121, 0, 0, 781, 788, 137, 1283, 135, 132, 134,
	274, 694, 700, 687, 535, 668, 1034, 0, 0, 717,
	1034, 0, 741, 739, 722, 718, 0, 729, 0, 750,
	539, 541, 92, 0, 464, 0, 467, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 484, 491, 0,
	535, 1175, 0, 535, 0, 0, 0, 0, 0, 107,
	0, 0, 549, 0, 110, 110, 538, 0, 0, 0,
	544, 0, 546, 129, 0, 0, 0, -2, 0, 926,
	-2, -2, 1056, 1087, 1132, 1126, 1180, 682, 981, 983,
	984, 871, 1045, 1042, 0, 1029, 1005, 1006, 1104, 0,
	0, 0, 0, 1087, 1059, 1016, 0, 1022, 1023, 805,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 605,
	0, 598, 599, 0, 0, 0, 614, 624, 0, 0,
	0, 776, 0, 0, 0, 0, 688, 655, 0, 708,
	706, 656, 762, 753, 0, 748, 94, 0, 468, 469,
	1195, 0, 472, 475, 0, 477, 1197, 459, 0, 488,
	489, 527, 528, 531, 529, 532, 682, 486, 0, 96,
	97, 106, 114, 98, 104, 0, 0, 0, 0, 754,
	0, 0, -2, -2, 927, 1058, 0, 682, 0, 1031,
	-2, 0, 0, 0, 1061, 0, 0, 491, 0, 481,
	459, 449, 491, 0, 0, 600, 601, 0, 0, 0,
	633, 634, 0, 0, 0, 136, 0, 131, 133, 1033,
	1035, 0, 727, 719, 466, 470, 0, 0, 497, 0,
	485, 0, 535, 0, 0, 116, 0, 540, 542, 0,
	0, 0, 982, 1048, 0, -2, 0, 962, 1021, 0,
	459, 491, 447, 459, 0, 602, 603, 0, 617, 774,
	619, 0, 0, 138, 0, 0, 0, 476, 502, 0,
	0, 0, 530, 980, 493, 100, 0, 113, 0, 0,
	682, 0, 0, 0, 1044, 963, 0, 479, 459, 521,
	0, 594, 0, 618, 139, 139, 1036, 1037, 0, 478,
	498, 499, 0, 494, 495, 496, 1196, 490, 497, 115,
	86, 88, 0, 1041, 1046, 1049, -2, 1351, 1230, 0,
	1047, 0, 480, 491, 774, 122, 123, 471, 500, 0,
	501, 0, 0, 0, 502, 0, 0, 1051, 1052, 1053,
	1054, 1055, 462, 459, 616, 503, 0, 506, 507, 0,
	504, 487, 0, 458, 460, 461, 522, 505, 508, 509,
	1050,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESET")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1038
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1127
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1199
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1200
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1204
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1364
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CREATE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			return helpWith(sqllex, "DELETE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1617
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "INSERT")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1636
		{ /* SKIP DOC */
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			return helpWith(sqllex, "GRANT")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			return helpWith(sqllex, "RESET")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{ /* SKIP DOC */
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{ /* SKIP DOC */
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex, "set local")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1939
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1964
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			return unimplemented(sqllex, "set from current")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1987
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = Low
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = Normal
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = High
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.str = "client_encoding"
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2348
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2396
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2400
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2404
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2416
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2543
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2547
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex, "match full")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			return unimplemented(sqllex, "match partial")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			return unimplemented(sqllex, "match simple")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2775
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2778
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			return unimplemented(sqllex, "no action")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			return unimplemented(sqllex, "action set null")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			return unimplemented(sqllex, "action set default")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2830
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2891
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2922
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2926
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = Ascending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = Descending
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2966
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2968
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3002
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3101
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = ""
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = ReadOnly
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = ReadWrite
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			return helpWith(sqllex, "INSERT")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3354
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3358
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3394
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			return helpWith(sqllex, "SELECT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			return helpWith(sqllex, "VALUES")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			return helpWith(sqllex, "TABLE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			return helpWith(sqllex, "SELECT")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			return helpWith(sqllex, "TABLE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3662
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3667
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			return unimplemented(sqllex, "cte")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3674
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3678
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3682
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = true
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = true
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3706
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			return helpWith(sqllex, "VALUES")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &From{}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3927
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3972
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4009
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = nil
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = false
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.str = astFullJoin
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.str = astLeftJoin
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.str = astRightJoin
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.str = astInnerJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4193
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4293
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4336
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4408
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = nil
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4569
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4601
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4641
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = year
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = month
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = day
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = hour
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = minute
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = month
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = hour
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = minute
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = minute
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = nil
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = second
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4736
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4771
		{
			return unimplemented(sqllex, "at tz")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5005
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5178
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5231
		{
			return unimplemented(sqllex, "variadic")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5232
		{
			return unimplemented(sqllex, "variadic")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5256
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5272
		{
			return unimplemented(sqllex, "func_application")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5273
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5277
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			return unimplemented(sqllex, "current role")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5306
		{
			return unimplemented(sqllex, "current user")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5307
		{
			return unimplemented(sqllex, "session user")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5308
		{
			return unimplemented(sqllex, "user")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5341
		{
			return unimplemented(sqllex, "treat")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5387
		{
			return unimplemented(sqllex, "within group")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5388
		{
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5423
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.str = ""
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5485
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5486
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5487
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5491
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5497
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5499
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5500
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5501
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = Any
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Some
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = All
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = Plus
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = Minus
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = Mult
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = Div
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = Mod
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = Bitand
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = Bitor
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = Pow
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = Bitxor
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = LT
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = GT
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = EQ
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = LE
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = GE
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = NE
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = Like
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = NotLike
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = ILike
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = NotILike
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5865
		{
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5866
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6028
		{
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6064
		{
			return unimplemented(sqllex, "func const")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6073
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = DNull
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6100
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.str = ""
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
