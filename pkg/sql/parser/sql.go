// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const RANGE = 57551
const READ = 57552
const REAL = 57553
const RECURSIVE = 57554
const REF = 57555
const REFERENCES = 57556
const REGCLASS = 57557
const REGPROC = 57558
const REGPROCEDURE = 57559
const REGNAMESPACE = 57560
const REGTYPE = 57561
const RENAME = 57562
const REPEATABLE = 57563
const RELEASE = 57564
const RESET = 57565
const RESTORE = 57566
const RESTRICT = 57567
const RETURNING = 57568
const REVOKE = 57569
const RIGHT = 57570
const ROLLBACK = 57571
const ROLLUP = 57572
const ROW = 57573
const ROWS = 57574
const RSHIFT = 57575
const SAVEPOINT = 57576
const SCATTER = 57577
const SEARCH = 57578
const SECOND = 57579
const SELECT = 57580
const SERIAL = 57581
const SERIALIZABLE = 57582
const SESSION = 57583
const SESSION_USER = 57584
const SET = 57585
const SETTING = 57586
const SETTINGS = 57587
const SHOW = 57588
const SIMILAR = 57589
const SIMPLE = 57590
const SMALLINT = 57591
const SMALLSERIAL = 57592
const SNAPSHOT = 57593
const SOME = 57594
const SPLIT = 57595
const SQL = 57596
const START = 57597
const STATUS = 57598
const STDIN = 57599
const STRICT = 57600
const STRING = 57601
const STORING = 57602
const SUBSTRING = 57603
const SYMMETRIC = 57604
const SYSTEM = 57605
const TABLE = 57606
const TABLES = 57607
const TEMPLATE = 57608
const TESTING_RANGES = 57609
const TESTING_RELOCATE = 57610
const TEXT = 57611
const THEN = 57612
const TIME = 57613
const TIMESTAMP = 57614
const TIMESTAMPTZ = 57615
const TO = 57616
const TRAILING = 57617
const TRANSACTION = 57618
const TREAT = 57619
const TRIM = 57620
const TRUE = 57621
const TRUNCATE = 57622
const TYPE = 57623
const UNBOUNDED = 57624
const UNCOMMITTED = 57625
const UNION = 57626
const UNIQUE = 57627
const UNKNOWN = 57628
const UPDATE = 57629
const UPSERT = 57630
const USE = 57631
const USER = 57632
const USERS = 57633
const USING = 57634
const UUID = 57635
const VALID = 57636
const VALIDATE = 57637
const VALUE = 57638
const VALUES = 57639
const VARCHAR = 57640
const VARIADIC = 57641
const VIEW = 57642
const VARYING = 57643
const WHEN = 57644
const WHERE = 57645
const WINDOW = 57646
const WITH = 57647
const WITHIN = 57648
const WITHOUT = 57649
const YEAR = 57650
const ZONE = 57651
const NOT_LA = 57652
const WITH_LA = 57653
const AS_LA = 57654
const POSTFIXOP = 57655
const UMINUS = 57656

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5508

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	333, 32,
	-2, 434,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 407,
	187, 407,
	226, 407,
	329, 407,
	331, 407,
	333, 407,
	-2, 417,
	-1, 68,
	1, 410,
	187, 410,
	226, 410,
	329, 410,
	331, 410,
	333, 410,
	-2, 416,
	-1, 77,
	1, 32,
	333, 32,
	-2, 434,
	-1, 440,
	1, 202,
	333, 202,
	-2, 1009,
	-1, 501,
	108, 444,
	160, 444,
	185, 444,
	-2, 413,
	-1, 504,
	108, 443,
	160, 443,
	185, 443,
	-2, 411,
	-1, 643,
	108, 443,
	160, 443,
	185, 443,
	-2, 414,
	-1, 703,
	330, 941,
	-2, 934,
	-1, 704,
	330, 942,
	-2, 935,
	-1, 710,
	5, 610,
	330, 610,
	-2, 1119,
	-1, 734,
	5, 571,
	-2, 1093,
	-1, 735,
	5, 604,
	330, 604,
	-2, 1095,
	-1, 736,
	5, 579,
	-2, 1096,
	-1, 737,
	5, 578,
	-2, 1097,
	-1, 738,
	5, 604,
	330, 604,
	-2, 1100,
	-1, 739,
	5, 604,
	330, 604,
	-2, 1101,
	-1, 740,
	5, 605,
	-2, 1104,
	-1, 741,
	5, 565,
	-2, 1105,
	-1, 742,
	5, 565,
	-2, 1106,
	-1, 743,
	5, 586,
	-2, 1110,
	-1, 744,
	5, 566,
	-2, 1115,
	-1, 745,
	5, 567,
	-2, 1116,
	-1, 746,
	5, 568,
	-2, 1117,
	-1, 747,
	5, 569,
	-2, 1118,
	-1, 748,
	5, 565,
	-2, 1123,
	-1, 749,
	5, 572,
	-2, 1128,
	-1, 750,
	5, 570,
	-2, 1131,
	-1, 751,
	5, 602,
	330, 602,
	-2, 1133,
	-1, 752,
	5, 606,
	-2, 1136,
	-1, 753,
	5, 608,
	-2, 1137,
	-1, 754,
	5, 601,
	330, 601,
	-2, 1142,
	-1, 1014,
	99, 417,
	108, 417,
	144, 417,
	160, 417,
	185, 417,
	191, 417,
	284, 417,
	-2, 729,
	-1, 1023,
	330, 918,
	-2, 906,
	-1, 1239,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 645,
	-1, 1240,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 646,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 647,
	-1, 1245,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 651,
	-1, 1246,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 652,
	-1, 1247,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 653,
	-1, 1250,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 658,
	-1, 1256,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 660,
	-1, 1258,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 664,
	-1, 1259,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 665,
	-1, 1260,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 666,
	-1, 1261,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 667,
	-1, 1288,
	196, 800,
	-2, 803,
	-1, 1317,
	117, 840,
	330, 941,
	-2, 934,
	-1, 1318,
	117, 841,
	-2, 1089,
	-1, 1319,
	117, 842,
	-2, 1008,
	-1, 1320,
	117, 843,
	-2, 976,
	-1, 1321,
	117, 844,
	-2, 992,
	-1, 1322,
	117, 845,
	-2, 1007,
	-1, 1323,
	117, 846,
	-2, 1054,
	-1, 1483,
	99, 417,
	108, 417,
	144, 417,
	160, 417,
	185, 417,
	191, 417,
	284, 417,
	-2, 500,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 659,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 661,
	-1, 1493,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 662,
	-1, 1511,
	196, 799,
	-2, 802,
	-1, 1703,
	1, 501,
	69, 501,
	99, 501,
	108, 501,
	118, 501,
	122, 501,
	124, 501,
	137, 501,
	144, 501,
	149, 501,
	157, 501,
	160, 501,
	172, 501,
	185, 501,
	187, 501,
	191, 501,
	226, 501,
	228, 501,
	284, 501,
	292, 501,
	303, 501,
	304, 501,
	312, 501,
	329, 501,
	331, 501,
	333, 501,
	334, 501,
	-2, 500,
	-1, 1705,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 663,
	-1, 1710,
	147, 0,
	-2, 679,
	-1, 1720,
	196, 801,
	-2, 804,
	-1, 1754,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 706,
	-1, 1755,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 707,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 708,
	-1, 1760,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 712,
	-1, 1761,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 713,
	-1, 1762,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 714,
	-1, 1883,
	147, 0,
	-2, 680,
	-1, 1886,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 683,
	-1, 1887,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 685,
	-1, 1993,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 684,
	-1, 1994,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 686,
	-1, 2001,
	147, 0,
	-2, 715,
	-1, 2057,
	147, 0,
	-2, 716,
	-1, 2122,
	36, 0,
	131, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 1092,
}

const sqlPrivate = 57344

const sqlLast = 29924

var sqlAct = [...]int{

	704, 2121, 1657, 2099, 1698, 2146, 2063, 2100, 1927, 1108,
	2120, 2101, 505, 929, 1116, 1731, 1848, 1953, 1874, 293,
	1973, 702, 694, 1174, 1699, 1667, 826, 1478, 1805, 1604,
	1859, 1454, 605, 1791, 90, 90, 90, 52, 1203, 526,
	680, 1605, 1481, 512, 67, 701, 311, 90, 90, 90,
	1675, 935, 90, 1853, 550, 90, 487, 568, 1192, 1456,
	1178, 1522, 1173, 90, 90, 1404, 492, 1571, 295, 20,
	1286, 1019, 90, 90, 1211, 1572, 90, 795, 1468, 90,
	90, 90, 90, 1218, 1684, 90, 90, 931, 67, 1177,
	770, 1210, 1398, 679, 1148, 1117, 1077, 1343, 483, 1296,
	767, 663, 1463, 674, 1273, 1068, 1216, 1270, 510, 541,
	302, 22, 955, 1199, 890, 1132, 1100, 626, 810, 300,
	30, 67, 299, 16, 309, 796, 1165, 799, 1141, 282,
	772, 504, 301, 8, 1314, 1010, 627, 569, 673, 664,
	562, 560, 486, 1110, 563, 1181, 20, 960, 1053, 68,
	1049, 1806, 646, 515, 645, 647, 478, 82, 437, 441,
	696, 91, 427, 888, 803, 418, 86, 556, 513, 524,
	651, 69, 531, 534, 1986, 524, 625, 1987, 509, 32,
	476, 308, 1510, 308, 1109, 509, 812, 812, 22, 812,
	33, 57, 281, 430, 1479, 2137, 1113, 30, 792, 2116,
	16, 2111, 1804, 2110, 1151, 1151, 1151, 312, 1542, 1543,
	8, 1560, 1561, 1562, 1514, 1415, 59, 502, 1213, 1515,
	532, 1416, 35, 438, 66, 472, 66, 493, 66, 2107,
	962, 2097, 792, 1145, 1138, 2092, 786, 2088, 792, 501,
	792, 517, 2059, 48, 2053, 1138, 2035, 792, 2031, 1804,
	43, 792, 43, 60, 43, 2026, 1101, 47, 2025, 44,
	1557, 44, 1101, 44, 1542, 1543, 1995, 1983, 1980, 1138,
	821, 1981, 2041, 1967, 1104, 49, 1804, 1146, 1466, 73,
	1466, 45, 961, 45, 1104, 45, 1767, 473, 1717, 90,
	90, 90, 90, 90, 523, 492, 1964, 529, 1962, 792,
	536, 1804, 1440, 1938, 1937, 75, 792, 1804, 1909, 1888,
	1548, 1151, 1151, 1885, 1066, 1444, 1138, 1147, 1144, 1877,
	1825, 1151, 1151, 1151, 963, 964, 1824, 1290, 1521, 1151,
	1564, 1803, 510, 1714, 1804, 1202, 1151, 1643, 76, 1638,
	1107, 1589, 1107, 1163, 1590, 1563, 71, 966, 73, 659,
	1587, 570, 72, 1151, 1346, 1586, 1585, 1511, 1151, 1151,
	1151, 924, 46, 1558, 813, 813, 1548, 813, 1513, 1443,
	965, 70, 792, 1151, 75, 1807, 1542, 1543, 62, 63,
	34, 923, 524, 50, 534, 61, 1207, 1149, 1155, 792,
	51, 1151, 1150, 882, 73, 1151, 73, 1137, 73, 54,
	1138, 881, 56, 792, 56, 1106, 56, 76, 1107, 697,
	1065, 58, 539, 1064, 90, 71, 581, 522, 489, 1558,
	75, 72, 75, 77, 75, 820, 971, 545, 821, 90,
	1482, 1559, 90, 90, 902, 549, 64, 566, 1415, 602,
	1112, 547, 2135, 2119, 73, 65, 492, 961, 2106, 1867,
	658, 565, 565, 76, 2068, 76, 493, 76, 1143, 2054,
	1965, 71, 1914, 71, 1910, 71, 1902, 72, 1901, 72,
	75, 72, 90, 816, 811, 90, 927, 1900, 1548, 1896,
	1142, 1833, 1895, 1894, 1839, 755, 70, 1559, 70, 308,
	1691, 1282, 1782, 1777, 1776, 1775, 90, 90, 90, 1725,
	90, 1703, 1674, 76, 1647, 1594, 1591, 557, 1579, 1570,
	1541, 1554, 1555, 1556, 644, 90, 1553, 1551, 1552, 1544,
	1545, 1546, 1547, 1549, 1550, 1538, 90, 1537, 1535, 1446,
	1527, 313, 1526, 1442, 66, 1360, 70, 763, 1311, 492,
	90, 1310, 1542, 1543, 1480, 1027, 311, 492, 658, 90,
	1020, 494, 70, 590, 90, 90, 90, 657, 90, 934,
	43, 1733, 762, 643, 2080, 2038, 2024, 2023, 524, 44,
	2022, 604, 591, 90, 90, 1544, 1545, 1546, 1547, 1549,
	1550, 90, 2014, 90, 1645, 2012, 827, 2003, 90, 1990,
	1283, 45, 1976, 1960, 1924, 492, 492, 1907, 1879, 1842,
	1542, 1543, 1830, 311, 801, 1810, 1709, 493, 90, 90,
	1689, 90, 90, 90, 90, 90, 90, 90, 1665, 764,
	1663, 761, 90, 90, 1832, 584, 586, 483, 483, 1662,
	90, 1660, 1613, 1612, 630, 967, 968, 969, 970, 972,
	973, 90, 800, 628, 1548, 1569, 1531, 524, 804, 804,
	1530, 545, 1507, 933, 548, 636, 1502, 639, 1275, 1431,
	90, 1389, 502, 90, 790, 1387, 531, 534, 1374, 1373,
	793, 963, 964, 1353, 1309, 1206, 1054, 1057, 654, 655,
	1061, 1047, 815, 660, 501, 818, 959, 1544, 1545, 1546,
	1547, 1549, 1550, 632, 966, 1046, 2118, 1558, 1045, 1044,
	493, 1043, 1548, 1042, 73, 1041, 791, 312, 493, 1040,
	1039, 1038, 56, 1037, 824, 1036, 510, 965, 1035, 1034,
	805, 802, 1033, 1032, 1031, 1374, 1024, 903, 1013, 938,
	75, 70, 490, 1198, 928, 527, 662, 588, 874, 577,
	876, 1197, 575, 2090, 1985, 1890, 878, 875, 1868, 1864,
	926, 1838, 1837, 1692, 898, 1020, 493, 493, 897, 891,
	1542, 1543, 1425, 76, 312, 1559, 90, 905, 910, 1424,
	596, 71, 557, 1865, 90, 1011, 763, 72, 90, 2028,
	494, 1593, 1988, 594, 1457, 1836, 90, 90, 780, 1417,
	90, 822, 925, 90, 1101, 1482, 294, 1592, 1486, 940,
	942, 502, 941, 1145, 502, 502, 778, 90, 617, 90,
	90, 879, 90, 957, 597, 90, 1029, 90, 90, 932,
	90, 779, 492, 951, 595, 1059, 952, 953, 1399, 1060,
	1854, 1109, 907, 1734, 1071, 911, 912, 913, 914, 915,
	1129, 1023, 1518, 1297, 1050, 918, 919, 1146, 1089, 621,
	1600, 1092, 1552, 1544, 1545, 1546, 1547, 1549, 1550, 1063,
	1411, 773, 2071, 774, 67, 2133, 2132, 1818, 1154, 67,
	1026, 524, 1111, 2030, 1111, 471, 763, 470, 570, 534,
	1082, 1084, 289, 524, 1437, 622, 465, 1147, 1144, 1051,
	1052, 1055, 1078, 1070, 1133, 963, 964, 1058, 285, 1624,
	1120, 466, 1948, 311, 1947, 534, 1644, 1946, 534, 1062,
	90, 1945, 1103, 1546, 1547, 1549, 1550, 1628, 966, 1074,
	1627, 90, 90, 90, 1070, 1597, 1095, 594, 90, 90,
	1069, 494, 872, 1596, 775, 90, 290, 1489, 1430, 80,
	773, 965, 774, 880, 1429, 1135, 508, 286, 1134, 1115,
	1428, 1427, 1124, 499, 1257, 1081, 1125, 1149, 1136, 1130,
	419, 1152, 1127, 90, 1128, 1098, 311, 1329, 595, 1829,
	1208, 896, 895, 1097, 489, 484, 1126, 565, 773, 565,
	774, 424, 2029, 493, 1094, 833, 420, 973, 629, 963,
	964, 507, 667, 79, 1357, 538, 1087, 971, 1356, 1228,
	1157, 311, 1193, 1055, 783, 1058, 922, 901, 1099, 475,
	784, 421, 966, 775, 1167, 534, 1169, 1631, 1156, 1052,
	1051, 524, 781, 1272, 494, 783, 1272, 1164, 1143, 1499,
	423, 313, 494, 1016, 618, 965, 921, 782, 509, 573,
	1929, 980, 1171, 781, 1497, 1633, 1080, 1279, 1401, 1297,
	797, 775, 1277, 899, 1615, 1475, 1214, 904, 782, 607,
	1170, 587, 1168, 2132, 312, 2078, 291, 806, 90, 90,
	90, 1652, 1359, 2149, 90, 1149, 1550, 90, 801, 2143,
	494, 494, 2154, 90, 90, 90, 90, 90, 313, 1196,
	1227, 971, 1294, 2103, 619, 90, 288, 287, 90, 90,
	1405, 1209, 292, 1799, 1409, 492, 1436, 1494, 90, 1622,
	2094, 1394, 866, 90, 1391, 90, 788, 1495, 1542, 1543,
	787, 1500, 90, 78, 1079, 1280, 2017, 312, 900, 593,
	422, 506, 90, 2095, 1367, 776, 1800, 495, 812, 1385,
	1067, 1149, 620, 1405, 981, 1284, 1172, 1281, 1048, 1649,
	510, 1476, 1438, 90, 90, 1188, 1305, 1386, 500, 81,
	1388, 1363, 312, 496, 492, 1361, 920, 1254, 1999, 572,
	1557, 1324, 592, 497, 2104, 1159, 1407, 771, 1384, 425,
	2142, 1413, 1961, 90, 1008, 90, 1161, 90, 1529, 1650,
	1685, 90, 1393, 1200, 1201, 90, 483, 1362, 1702, 509,
	2147, 1403, 1632, 1616, 1672, 1162, 800, 2102, 969, 970,
	972, 973, 982, 650, 776, 800, 1160, 1496, 90, 757,
	1548, 2131, 756, 2105, 1498, 524, 2129, 1795, 1799, 1796,
	1400, 1792, 593, 1930, 1445, 1397, 1447, 709, 1847, 1790,
	1410, 1190, 610, 1794, 1419, 582, 1420, 1421, 580, 1418,
	67, 2148, 776, 1491, 1448, 510, 1271, 1798, 1451, 1149,
	2155, 1800, 1252, 1255, 1801, 649, 493, 1763, 1940, 2150,
	2160, 2141, 1435, 1558, 1939, 1133, 1922, 1278, 1439, 1433,
	1434, 2009, 1793, 1599, 1452, 689, 1441, 1370, 490, 485,
	1251, 1905, 1485, 1814, 56, 1366, 1191, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 887, 494, 1648, 1459,
	939, 1214, 1520, 510, 930, 1461, 813, 648, 947, 87,
	87, 283, 1462, 1477, 1484, 493, 1135, 1465, 2064, 1134,
	917, 883, 410, 411, 412, 1797, 1668, 429, 1817, 1136,
	442, 1559, 650, 1875, 885, 1816, 1449, 649, 429, 442,
	1422, 1849, 1795, 1764, 1796, 1467, 886, 516, 516, 1765,
	1492, 283, 1490, 2159, 283, 283, 535, 283, 1287, 1923,
	87, 542, 510, 833, 833, 1291, 1376, 1375, 1253, 1299,
	1506, 948, 1798, 1906, 1813, 1862, 1680, 1679, 313, 1801,
	1316, 1316, 1327, 592, 1338, 1517, 1610, 1611, 555, 648,
	1350, 1351, 1352, 1876, 1471, 640, 416, 554, 507, 1658,
	1840, 1396, 1676, 1464, 1308, 1920, 90, 90, 2002, 1904,
	1609, 1573, 1708, 1474, 1639, 1471, 1553, 1551, 1552, 1544,
	1545, 1546, 1547, 1549, 1550, 1469, 1815, 1921, 1576, 1577,
	1578, 90, 1630, 1472, 1474, 90, 1536, 90, 1501, 1402,
	1153, 313, 419, 1105, 90, 1093, 1683, 492, 1470, 759,
	1797, 1090, 1595, 1664, 1472, 624, 623, 90, 616, 1602,
	90, 615, 614, 424, 1636, 613, 612, 611, 420, 608,
	311, 553, 90, 546, 1574, 833, 313, 1030, 1629, 1670,
	909, 1623, 1307, 2098, 2061, 1788, 1690, 1620, 1661, 1619,
	1618, 1621, 1598, 421, 1453, 1194, 1186, 1634, 1641, 1120,
	1214, 1640, 1131, 1384, 1473, 1669, 819, 817, 1642, 814,
	67, 1693, 423, 1651, 1653, 1654, 809, 789, 785, 1711,
	90, 777, 1722, 1455, 1659, 1473, 1727, 1728, 1729, 1955,
	652, 1678, 520, 1204, 1681, 2133, 1671, 83, 833, 1682,
	1219, 1226, 893, 1070, 1957, 1086, 1637, 1686, 1687, 1085,
	1214, 3, 552, 1214, 551, 1070, 2019, 599, 603, 1807,
	2056, 1083, 1677, 656, 283, 558, 283, 442, 442, 1091,
	1088, 1718, 306, 25, 2042, 1845, 833, 1721, 305, 24,
	494, 304, 23, 1735, 303, 11, 1189, 90, 90, 90,
	307, 10, 1205, 1185, 1694, 963, 964, 1740, 1114, 653,
	415, 521, 958, 877, 90, 464, 825, 1737, 493, 90,
	1140, 90, 422, 90, 90, 90, 1742, 2157, 90, 90,
	1505, 492, 540, 873, 1610, 1611, 1808, 1812, 1508, 528,
	1771, 312, 1811, 950, 1467, 2158, 1784, 1770, 600, 494,
	543, 965, 544, 297, 9, 2091, 1524, 1525, 1609, 1787,
	25, 426, 1371, 90, 90, 2045, 24, 296, 7, 23,
	492, 425, 11, 298, 4, 467, 468, 1872, 10, 1783,
	90, 90, 1610, 1611, 90, 1655, 1843, 1610, 1611, 1568,
	1841, 1646, 492, 1471, 90, 1846, 1542, 1543, 1871, 578,
	1581, 90, 1851, 963, 964, 1835, 1609, 1834, 1828, 634,
	633, 1609, 1474, 1588, 583, 634, 1821, 442, 442, 1426,
	963, 964, 1827, 1358, 1469, 1423, 1844, 1355, 1850, 510,
	1852, 9, 1472, 1354, 90, 1870, 1884, 1304, 1017, 635,
	1892, 2077, 1625, 966, 1626, 7, 1880, 1470, 570, 1869,
	1954, 4, 1730, 1450, 1857, 1858, 1027, 429, 1863, 1025,
	283, 474, 1861, 1371, 1928, 417, 965, 908, 609, 1866,
	1688, 2093, 1897, 1214, 1214, 1528, 1972, 1214, 1998, 1306,
	1028, 442, 638, 442, 42, 641, 1607, 683, 1789, 90,
	1601, 90, 493, 311, 90, 860, 1180, 1179, 859, 314,
	516, 894, 90, 1473, 705, 477, 1315, 1220, 311, 760,
	707, 283, 830, 832, 708, 831, 1903, 1056, 695, 828,
	1118, 1276, 1295, 1516, 1021, 87, 1610, 1611, 675, 687,
	686, 493, 1292, 90, 283, 1697, 574, 1873, 1915, 283,
	283, 283, 55, 807, 1932, 758, 1931, 1934, 90, 1916,
	1609, 492, 1950, 493, 589, 90, 1956, 436, 283, 283,
	1408, 801, 1715, 90, 1610, 1611, 87, 1860, 87, 1831,
	1949, 90, 1963, 442, 946, 1984, 1958, 1195, 943, 1617,
	90, 90, 498, 1970, 1971, 1539, 576, 1336, 1609, 1975,
	1328, 706, 1979, 442, 442, 1926, 87, 442, 442, 442,
	442, 442, 916, 1991, 1325, 1992, 1997, 442, 442, 1969,
	631, 1982, 833, 766, 1966, 429, 1009, 1918, 1119, 601,
	1989, 90, 1414, 1139, 1768, 661, 937, 954, 519, 518,
	2013, 1175, 1933, 598, 2004, 1778, 884, 1978, 1943, 1944,
	1158, 1968, 494, 833, 833, 516, 90, 90, 542, 2016,
	1002, 2007, 833, 833, 312, 999, 1214, 469, 90, 2011,
	1187, 1369, 90, 2153, 2015, 313, 2018, 1614, 2036, 312,
	492, 2034, 2008, 2070, 74, 2027, 2037, 90, 684, 53,
	1952, 1395, 31, 90, 29, 833, 26, 2046, 21, 311,
	90, 90, 19, 18, 2051, 28, 17, 2040, 510, 27,
	2043, 15, 2039, 2047, 14, 2048, 13, 12, 41, 40,
	39, 2055, 493, 90, 2052, 90, 38, 37, 90, 36,
	311, 6, 2044, 53, 5, 2, 1, 67, 0, 0,
	2058, 1330, 1856, 0, 0, 862, 0, 2081, 2066, 0,
	2083, 2079, 90, 2076, 2082, 90, 503, 0, 0, 511,
	0, 283, 0, 0, 2067, 0, 53, 2085, 2087, 1075,
	1610, 1611, 2086, 283, 0, 0, 0, 0, 2084, 2089,
	0, 283, 1096, 0, 0, 283, 0, 0, 1102, 90,
	0, 90, 0, 2108, 1609, 2115, 0, 0, 2112, 0,
	0, 0, 283, 2113, 1122, 1123, 0, 283, 0, 90,
	283, 0, 442, 442, 2114, 442, 2126, 0, 0, 2130,
	0, 2069, 2128, 2049, 0, 2134, 494, 0, 90, 833,
	1219, 1738, 2139, 2136, 2140, 2138, 0, 0, 0, 1219,
	1743, 493, 0, 2117, 0, 0, 0, 0, 2152, 2151,
	0, 2156, 0, 0, 2072, 1268, 0, 0, 0, 0,
	312, 0, 665, 665, 0, 494, 0, 0, 0, 2161,
	1266, 768, 1774, 0, 0, 1936, 0, 0, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 494, 0, 0,
	0, 312, 0, 860, 860, 0, 859, 859, 0, 0,
	0, 0, 0, 0, 0, 1166, 0, 0, 0, 0,
	0, 832, 832, 0, 0, 0, 283, 283, 283, 0,
	0, 0, 0, 283, 1176, 0, 0, 0, 0, 0,
	542, 0, 0, 1262, 0, 0, 0, 0, 833, 0,
	0, 1263, 0, 1264, 0, 0, 0, 1269, 1503, 1504,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 1542, 1543, 0, 1560, 1561,
	1562, 0, 0, 1330, 1330, 963, 964, 0, 0, 0,
	0, 1882, 0, 511, 0, 0, 0, 0, 313, 0,
	0, 0, 944, 0, 949, 0, 0, 0, 966, 0,
	956, 0, 0, 313, 0, 860, 0, 0, 859, 1565,
	1566, 1567, 1003, 1004, 1005, 1006, 1007, 1557, 0, 0,
	0, 965, 1015, 832, 0, 0, 0, 833, 0, 0,
	0, 0, 1022, 0, 1330, 1330, 1330, 0, 0, 0,
	0, 0, 0, 1265, 0, 0, 494, 0, 1542, 1543,
	1267, 1560, 1561, 1562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 1364, 1365, 0, 1548, 860, 1075,
	0, 859, 1372, 0, 0, 0, 0, 971, 1377, 1378,
	1380, 1382, 1383, 0, 0, 0, 832, 2073, 2074, 2075,
	1390, 0, 0, 1392, 283, 0, 0, 0, 0, 0,
	1557, 0, 1563, 283, 0, 0, 860, 0, 283, 859,
	1412, 0, 0, 0, 0, 1942, 0, 283, 0, 0,
	1558, 2096, 0, 833, 832, 0, 0, 283, 0, 0,
	981, 861, 0, 862, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1166, 1166,
	1548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 494, 0, 0, 1706, 1707,
	0, 0, 0, 0, 0, 0, 0, 829, 937, 0,
	937, 0, 442, 0, 313, 1563, 283, 0, 1559, 0,
	1458, 0, 0, 1330, 1330, 0, 0, 0, 982, 0,
	0, 503, 0, 1558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 313, 0, 0, 0, 0,
	0, 0, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 0, 1766, 0, 0, 862, 0, 1330, 1330, 1330,
	1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
	1330, 1330, 1330, 1330, 1330, 1330, 0, 1330, 1554, 1555,
	1556, 1559, 0, 1553, 1551, 1552, 1544, 1545, 1546, 1547,
	1549, 1550, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 665, 0, 0, 862, 0,
	0, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 0, 1256, 0, 1258, 1259, 1260, 1261,
	503, 0, 0, 503, 503, 0, 862, 0, 0, 0,
	0, 1554, 1555, 1556, 0, 1285, 1553, 1551, 1552, 1544,
	1545, 1546, 1547, 1549, 1550, 1012, 0, 1014, 0, 0,
	1606, 0, 0, 0, 1018, 0, 0, 1312, 1313, 0,
	0, 1326, 0, 1337, 1339, 1344, 1347, 1348, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 283, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 859, 1656, 0, 0, 0,
	1075, 0, 937, 1542, 1543, 0, 0, 0, 0, 1666,
	832, 0, 0, 1406, 0, 0, 0, 0, 0, 0,
	963, 964, 283, 860, 860, 283, 859, 859, 53, 0,
	0, 53, 860, 860, 0, 859, 859, 1701, 1925, 0,
	0, 832, 832, 966, 0, 0, 0, 0, 0, 0,
	832, 832, 53, 0, 53, 1432, 0, 1542, 1543, 0,
	0, 0, 0, 1330, 0, 860, 965, 0, 859, 53,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 861,
	861, 0, 0, 832, 0, 1732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 1548, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 829, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1785, 1786, 1075, 1487, 1488, 0, 1558, 1548,
	0, 1493, 0, 0, 0, 0, 0, 1330, 1606, 542,
	0, 0, 0, 0, 1819, 981, 1820, 0, 283, 1822,
	1823, 0, 0, 1826, 283, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 1512, 0, 0, 0, 0, 860,
	0, 1519, 859, 0, 1523, 0, 0, 0, 0, 0,
	0, 1215, 1558, 1532, 0, 0, 1606, 832, 542, 1176,
	0, 1606, 0, 0, 0, 0, 1559, 0, 0, 0,
	0, 0, 862, 0, 0, 283, 283, 829, 1015, 283,
	2057, 0, 0, 982, 1344, 1344, 1344, 1274, 0, 1701,
	0, 963, 964, 0, 861, 0, 1878, 0, 0, 0,
	0, 0, 0, 862, 862, 1330, 0, 0, 0, 0,
	0, 0, 862, 862, 966, 0, 0, 1603, 0, 0,
	1559, 0, 0, 0, 0, 0, 0, 0, 0, 1898,
	0, 0, 861, 0, 0, 0, 0, 965, 0, 0,
	829, 0, 0, 0, 0, 862, 0, 0, 860, 665,
	0, 859, 1551, 1552, 1544, 1545, 1546, 1547, 1549, 1550,
	0, 768, 0, 0, 0, 0, 832, 0, 0, 974,
	975, 967, 968, 969, 970, 972, 973, 53, 829, 0,
	53, 0, 0, 0, 1075, 0, 1917, 0, 0, 1919,
	0, 0, 0, 971, 0, 0, 0, 283, 0, 0,
	1606, 511, 0, 0, 0, 1553, 1551, 1552, 1544, 1545,
	1546, 1547, 1549, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1951, 0, 0, 542, 0,
	1704, 0, 0, 1705, 0, 0, 0, 860, 1606, 0,
	859, 0, 0, 283, 0, 1710, 981, 0, 0, 0,
	1974, 0, 0, 0, 1719, 832, 0, 0, 283, 0,
	0, 0, 1723, 0, 0, 1432, 1701, 0, 0, 0,
	0, 0, 0, 0, 53, 542, 1701, 0, 53, 862,
	1739, 0, 0, 0, 1741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 937, 1772, 1773, 0,
	0, 0, 0, 0, 963, 964, 1779, 1780, 1781, 0,
	0, 0, 0, 860, 0, 0, 859, 0, 0, 0,
	0, 2020, 2021, 0, 1274, 0, 0, 966, 0, 0,
	0, 832, 1809, 2032, 0, 0, 0, 2033, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	965, 0, 542, 0, 0, 0, 0, 0, 1701, 1542,
	1543, 0, 1560, 1561, 1562, 1701, 542, 0, 862, 0,
	0, 0, 0, 0, 0, 1881, 0, 0, 0, 0,
	0, 975, 967, 968, 969, 970, 972, 973, 2065, 0,
	542, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	1855, 0, 0, 1014, 0, 0, 971, 0, 0, 0,
	0, 1557, 0, 0, 1606, 0, 0, 1974, 0, 0,
	1701, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1883, 0, 0, 0, 1886, 1887, 861, 0,
	0, 1889, 0, 0, 0, 0, 0, 0, 1891, 0,
	1893, 0, 0, 0, 283, 0, 542, 862, 1899, 981,
	0, 1548, 0, 0, 0, 0, 0, 0, 0, 861,
	861, 0, 0, 0, 2127, 0, 0, 0, 861, 861,
	0, 0, 0, 0, 829, 1215, 0, 0, 0, 0,
	0, 1908, 0, 1701, 0, 0, 1563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 1558, 829, 829, 0, 0, 0,
	0, 0, 0, 0, 829, 829, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 1215, 0, 0, 1215, 0,
	1941, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 862, 0, 963, 964, 829, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 997, 1559, 0, 0, 1977, 0, 963, 964, 0,
	983, 984, 985, 993, 994, 995, 0, 0, 0, 0,
	0, 965, 0, 986, 0, 1993, 1994, 980, 0, 0,
	966, 0, 0, 997, 0, 967, 968, 969, 970, 972,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 2006, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 861, 0, 0, 2010, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 1554, 1555, 1556, 0, 0, 1553, 1551, 1552,
	1544, 1545, 1546, 1547, 1549, 1550, 990, 998, 0, 0,
	0, 0, 0, 0, 768, 0, 0, 0, 0, 971,
	0, 829, 996, 0, 0, 963, 964, 0, 983, 984,
	985, 993, 994, 995, 988, 0, 0, 53, 990, 998,
	981, 986, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 997, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 988, 0, 0, 0,
	0, 965, 981, 0, 0, 0, 0, 980, 1215, 1215,
	0, 0, 1215, 0, 861, 0, 0, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	850, 842, 867, 834, 858, 857, 0, 0, 836, 835,
	0, 0, 991, 869, 868, 2109, 0, 971, 0, 0,
	829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 990, 998, 2125, 2125,
	0, 0, 0, 0, 991, 863, 0, 855, 854, 0,
	0, 0, 996, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 0, 861, 988, 0, 2125, 0, 0, 0,
	981, 0, 0, 0, 852, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 987, 0, 0, 0, 1911,
	0, 2125, 845, 844, 846, 847, 848, 989, 866, 829,
	977, 978, 979, 992, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 0, 1959, 0, 0, 0, 0,
	0, 1584, 0, 838, 53, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 843,
	0, 1215, 991, 0, 0, 0, 0, 0, 0, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 1223, 1221,
	1222, 1225, 1224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 839, 0, 0, 829, 0, 0, 0, 0,
	0, 0, 849, 840, 0, 989, 0, 0, 977, 978,
	979, 992, 871, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 837, 0, 0, 864, 865, 0, 0, 1583,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 841, 310, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 92, 93, 329, 94, 330, 331, 332,
	333, 229, 334, 335, 336, 337, 95, 96, 97, 230,
	231, 232, 233, 98, 234, 235, 338, 99, 236, 237,
	100, 339, 340, 238, 239, 240, 341, 101, 241, 342,
	315, 343, 102, 103, 104, 0, 105, 344, 106, 107,
	108, 345, 316, 109, 110, 346, 347, 348, 349, 350,
	351, 111, 112, 284, 113, 242, 114, 243, 244, 352,
	115, 353, 116, 354, 355, 356, 117, 118, 357, 119,
	358, 0, 359, 245, 120, 121, 122, 246, 247, 360,
	361, 362, 123, 124, 248, 0, 125, 363, 126, 364,
	365, 317, 366, 127, 249, 367, 250, 368, 128, 129,
	130, 131, 251, 252, 319, 369, 135, 370, 132, 371,
	318, 133, 253, 134, 254, 255, 256, 372, 257, 373,
	320, 136, 321, 137, 138, 374, 140, 139, 375, 258,
	322, 141, 323, 376, 142, 377, 378, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	379, 380, 381, 260, 153, 261, 154, 155, 382, 156,
	383, 384, 157, 385, 386, 158, 262, 325, 159, 326,
	263, 160, 161, 162, 163, 387, 264, 164, 265, 165,
	388, 166, 167, 168, 266, 169, 170, 389, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 390,
	182, 327, 183, 184, 267, 185, 0, 189, 190, 191,
	192, 391, 268, 193, 194, 392, 195, 186, 187, 196,
	328, 197, 269, 270, 198, 393, 204, 199, 200, 188,
	201, 203, 271, 202, 272, 394, 205, 395, 206, 207,
	208, 209, 210, 396, 273, 274, 275, 397, 398, 211,
	276, 277, 399, 212, 213, 214, 215, 400, 401, 216,
	217, 218, 219, 402, 220, 403, 278, 221, 222, 223,
	279, 280, 404, 405, 224, 406, 407, 408, 409, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 0, 0, 0,
	0, 1695, 0, 0, 0, 0, 0, 0, 0, 1696,
	92, 93, 329, 94, 330, 331, 332, 333, 229, 334,
	335, 336, 337, 95, 96, 97, 230, 231, 232, 233,
	98, 234, 235, 338, 99, 236, 237, 100, 339, 340,
	238, 239, 240, 341, 101, 241, 342, 315, 343, 102,
	103, 104, 0, 105, 344, 106, 107, 108, 345, 316,
	109, 110, 346, 347, 348, 349, 350, 351, 111, 112,
	284, 113, 242, 114, 243, 244, 352, 115, 353, 116,
	354, 355, 356, 117, 118, 357, 119, 358, 0, 359,
	245, 120, 121, 122, 246, 247, 360, 361, 362, 123,
	124, 248, 0, 125, 363, 126, 364, 365, 317, 366,
	127, 249, 367, 250, 368, 128, 129, 130, 131, 251,
	252, 319, 369, 135, 370, 132, 371, 318, 133, 253,
	134, 254, 255, 256, 372, 257, 373, 320, 136, 321,
	137, 138, 374, 140, 139, 375, 258, 322, 141, 323,
	376, 142, 377, 378, 143, 0, 144, 145, 146, 148,
	259, 147, 324, 149, 150, 152, 151, 379, 380, 381,
	260, 153, 261, 154, 155, 382, 156, 383, 384, 157,
	385, 386, 158, 262, 325, 159, 326, 263, 160, 161,
	162, 163, 387, 264, 164, 265, 165, 388, 166, 167,
	168, 266, 169, 170, 389, 171, 172, 173, 174, 175,
	177, 178, 176, 179, 180, 181, 390, 182, 327, 183,
	184, 267, 185, 0, 189, 190, 191, 192, 391, 268,
	193, 194, 392, 195, 186, 187, 196, 328, 197, 269,
	270, 198, 393, 204, 199, 200, 188, 201, 203, 271,
	202, 272, 394, 205, 395, 206, 207, 208, 209, 210,
	396, 273, 274, 275, 397, 398, 211, 276, 277, 399,
	212, 213, 214, 215, 400, 401, 216, 217, 218, 219,
	402, 220, 403, 278, 221, 222, 223, 279, 280, 404,
	405, 224, 406, 407, 408, 409, 225, 226, 227, 228,
	0, 0, 0, 310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2050, 92,
	93, 329, 94, 330, 331, 332, 333, 229, 334, 335,
	336, 337, 95, 96, 97, 230, 231, 232, 233, 98,
	234, 235, 338, 99, 236, 237, 100, 339, 340, 238,
	239, 240, 341, 101, 241, 342, 315, 343, 102, 103,
	104, 0, 105, 344, 106, 107, 108, 345, 316, 109,
	110, 346, 347, 348, 349, 350, 351, 111, 112, 284,
	113, 242, 114, 243, 244, 352, 115, 353, 116, 354,
	355, 356, 117, 118, 357, 119, 358, 0, 359, 245,
	120, 121, 122, 246, 247, 360, 361, 362, 123, 124,
	248, 0, 125, 363, 126, 364, 365, 317, 366, 127,
	249, 367, 250, 368, 128, 129, 130, 131, 251, 252,
	319, 369, 135, 370, 132, 371, 318, 133, 253, 134,
	254, 255, 256, 372, 257, 373, 320, 136, 321, 137,
	138, 374, 140, 139, 375, 258, 322, 141, 323, 376,
	142, 377, 378, 143, 0, 144, 145, 146, 148, 259,
	147, 324, 149, 150, 152, 151, 379, 380, 381, 260,
	153, 261, 154, 155, 382, 156, 383, 384, 157, 385,
	386, 158, 262, 325, 159, 326, 263, 160, 161, 162,
	163, 387, 264, 164, 265, 165, 388, 166, 167, 168,
	266, 169, 170, 389, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 390, 182, 327, 183, 184,
	267, 185, 0, 189, 190, 191, 192, 391, 268, 193,
	194, 392, 195, 186, 187, 196, 328, 197, 269, 270,
	198, 393, 204, 199, 200, 188, 201, 203, 271, 202,
	272, 394, 205, 395, 206, 207, 208, 209, 210, 396,
	273, 274, 275, 397, 398, 211, 276, 277, 399, 212,
	213, 214, 215, 400, 401, 216, 217, 218, 219, 402,
	220, 403, 278, 221, 222, 223, 279, 280, 404, 405,
	224, 406, 407, 408, 409, 225, 226, 227, 228, 310,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 794, 0, 0, 92, 93, 329, 94, 330,
	331, 332, 333, 229, 334, 335, 336, 337, 95, 96,
	97, 230, 231, 232, 233, 98, 234, 235, 338, 99,
	236, 237, 100, 339, 340, 238, 239, 240, 341, 101,
	241, 342, 315, 343, 102, 103, 104, 0, 105, 344,
	106, 107, 108, 345, 316, 109, 110, 346, 347, 348,
	349, 350, 351, 111, 112, 284, 113, 242, 114, 243,
	244, 352, 115, 353, 116, 354, 355, 356, 117, 118,
	357, 119, 358, 0, 359, 245, 120, 121, 122, 246,
	247, 360, 361, 362, 123, 124, 248, 0, 125, 363,
	126, 364, 365, 317, 366, 127, 249, 367, 250, 368,
	128, 129, 130, 131, 251, 252, 319, 369, 135, 370,
	132, 371, 318, 133, 253, 134, 254, 255, 256, 372,
	257, 373, 320, 136, 321, 137, 138, 374, 140, 139,
	375, 258, 322, 141, 323, 376, 142, 377, 378, 143,
	0, 144, 145, 146, 148, 259, 147, 324, 149, 150,
	152, 151, 379, 380, 381, 260, 153, 261, 154, 155,
	382, 156, 383, 384, 157, 385, 386, 158, 262, 325,
	159, 326, 263, 160, 161, 162, 163, 387, 264, 164,
	265, 165, 388, 166, 167, 168, 266, 169, 170, 389,
	171, 172, 173, 174, 175, 177, 178, 176, 179, 180,
	181, 390, 182, 327, 183, 184, 267, 185, 0, 189,
	190, 191, 192, 391, 268, 193, 194, 392, 195, 186,
	187, 196, 328, 197, 269, 270, 198, 393, 204, 199,
	200, 188, 201, 203, 271, 202, 272, 394, 205, 395,
	206, 207, 208, 209, 210, 396, 273, 274, 275, 397,
	398, 211, 276, 277, 399, 212, 213, 214, 215, 400,
	401, 216, 217, 218, 219, 402, 220, 403, 278, 221,
	222, 223, 279, 280, 404, 405, 224, 406, 407, 408,
	409, 225, 226, 227, 228, 703, 692, 693, 690, 691,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 719,
	685, 0, 0, 0, 95, 96, 97, 230, 734, 232,
	735, 98, 736, 737, 0, 99, 236, 237, 100, 688,
	718, 738, 739, 240, 0, 101, 730, 0, 711, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 712, 714, 0, 713, 715, 111,
	112, 284, 113, 740, 114, 741, 742, 769, 115, 0,
	116, 0, 0, 0, 733, 118, 0, 119, 0, 0,
	0, 676, 120, 121, 122, 720, 721, 699, 0, 0,
	123, 124, 743, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 731, 0, 250, 0, 128, 129, 130, 131,
	727, 729, 319, 0, 135, 0, 132, 0, 318, 133,
	744, 134, 745, 746, 747, 0, 710, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 732, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 671, 0,
	700, 728, 153, 748, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 722, 160,
	161, 162, 163, 0, 723, 164, 265, 165, 0, 166,
	167, 168, 749, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 677, 185, 0, 189, 190, 191, 192, 73,
	268, 193, 194, 716, 195, 186, 187, 196, 328, 197,
	750, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	751, 202, 724, 0, 205, 75, 206, 207, 208, 209,
	210, 0, 273, 752, 753, 0, 0, 211, 725, 726,
	698, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 717, 220, 0, 278, 221, 222, 223, 571, 754,
	0, 0, 224, 0, 0, 0, 71, 225, 226, 227,
	228, 672, 72, 0, 0, 0, 0, 670, 0, 0,
	0, 0, 668, 669, 703, 692, 693, 690, 691, 682,
	0, 678, 0, 0, 0, 0, 681, 0, 0, 0,
	92, 93, 1301, 94, 0, 0, 0, 0, 719, 685,
	0, 0, 0, 95, 96, 97, 230, 734, 232, 735,
	98, 736, 737, 0, 99, 236, 237, 100, 688, 718,
	738, 739, 240, 0, 101, 730, 0, 711, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 316,
	109, 110, 0, 712, 714, 0, 713, 715, 111, 112,
	284, 113, 740, 114, 741, 742, 0, 115, 0, 116,
	0, 1302, 0, 733, 118, 0, 119, 0, 0, 0,
	676, 120, 121, 122, 720, 721, 699, 0, 0, 123,
	124, 743, 0, 125, 0, 126, 0, 0, 317, 0,
	127, 731, 0, 250, 0, 128, 129, 130, 131, 727,
	729, 319, 0, 135, 0, 132, 0, 318, 133, 744,
	134, 745, 746, 747, 0, 710, 0, 320, 136, 321,
	137, 138, 0, 140, 139, 0, 732, 322, 141, 323,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	259, 147, 324, 149, 150, 152, 151, 671, 0, 700,
	728, 153, 748, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 262, 325, 159, 326, 722, 160, 161,
	162, 163, 0, 723, 164, 265, 165, 0, 166, 167,
	168, 749, 169, 170, 0, 171, 172, 173, 174, 175,
	177, 178, 176, 179, 180, 181, 0, 182, 327, 183,
	184, 677, 185, 0, 189, 190, 191, 192, 0, 268,
	193, 194, 716, 195, 186, 187, 196, 328, 197, 750,
	270, 198, 0, 204, 199, 200, 188, 201, 203, 751,
	202, 724, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 273, 752, 753, 0, 0, 211, 725, 726, 698,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 219,
	717, 220, 0, 278, 221, 222, 223, 279, 754, 1300,
	0, 224, 0, 0, 0, 0, 225, 226, 227, 228,
	672, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 668, 669, 1303, 703, 692, 693, 690, 691, 682,
	678, 1298, 0, 0, 0, 681, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 719, 685,
	0, 0, 0, 95, 96, 97, 230, 734, 232, 735,
	98, 736, 737, 0, 99, 236, 237, 100, 688, 718,
	738, 739, 240, 0, 101, 730, 0, 711, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 316,
	109, 110, 0, 712, 714, 0, 713, 715, 111, 112,
	284, 113, 740, 114, 741, 742, 0, 115, 0, 116,
	0, 0, 0, 733, 118, 0, 119, 0, 0, 0,
	676, 120, 121, 122, 720, 721, 699, 0, 0, 123,
	124, 743, 0, 125, 0, 126, 0, 0, 317, 0,
	127, 731, 0, 250, 0, 128, 129, 130, 131, 727,
	729, 319, 0, 135, 0, 132, 0, 318, 133, 744,
	134, 745, 746, 747, 0, 710, 0, 320, 136, 321,
	137, 138, 0, 140, 139, 0, 732, 322, 141, 323,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	259, 147, 324, 149, 150, 152, 151, 671, 0, 700,
	728, 153, 748, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 262, 325, 159, 326, 722, 160, 161,
	162, 163, 0, 723, 164, 265, 165, 0, 166, 167,
	168, 749, 169, 170, 0, 171, 172, 173, 174, 175,
	177, 178, 176, 179, 180, 181, 0, 182, 327, 183,
	184, 677, 185, 0, 189, 190, 191, 192, 73, 268,
	193, 194, 716, 195, 186, 187, 196, 328, 197, 750,
	270, 198, 0, 204, 199, 200, 188, 201, 203, 751,
	202, 724, 0, 205, 75, 206, 207, 208, 209, 210,
	0, 273, 752, 753, 0, 0, 211, 725, 726, 698,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 219,
	717, 220, 0, 278, 221, 222, 223, 571, 754, 0,
	0, 224, 0, 0, 0, 71, 225, 226, 227, 228,
	672, 72, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 668, 669, 703, 692, 693, 690, 691, 682, 0,
	678, 0, 0, 0, 0, 681, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 719, 685, 0,
	0, 0, 95, 96, 97, 230, 734, 232, 735, 98,
	736, 737, 1340, 99, 236, 237, 100, 688, 718, 738,
	739, 240, 0, 101, 730, 0, 711, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 316, 109,
	110, 0, 712, 714, 0, 713, 715, 111, 112, 284,
	113, 740, 114, 741, 742, 0, 115, 0, 116, 0,
	0, 0, 733, 118, 0, 119, 0, 0, 0, 676,
	120, 121, 122, 720, 721, 699, 0, 0, 123, 124,
	743, 0, 125, 0, 126, 0, 1345, 317, 0, 127,
	731, 0, 250, 0, 128, 129, 130, 131, 727, 729,
	319, 0, 135, 0, 132, 0, 318, 133, 744, 134,
	745, 746, 747, 0, 710, 0, 320, 136, 321, 137,
	138, 0, 140, 139, 1341, 732, 322, 141, 323, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 259,
	147, 324, 149, 150, 152, 151, 671, 0, 700, 728,
	153, 748, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 262, 325, 159, 326, 722, 160, 161, 162,
	163, 0, 723, 164, 265, 165, 0, 166, 167, 168,
	749, 169, 170, 0, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 0, 182, 327, 183, 184,
	677, 185, 0, 189, 190, 191, 192, 0, 268, 193,
	194, 716, 195, 186, 187, 196, 328, 197, 750, 270,
	198, 0, 204, 199, 200, 188, 201, 203, 751, 202,
	724, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	273, 752, 753, 0, 1342, 211, 725, 726, 698, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 219, 717,
	220, 0, 278, 221, 222, 223, 279, 754, 0, 0,
	224, 0, 0, 0, 0, 225, 226, 227, 228, 672,
	0, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	668, 669, 703, 692, 693, 690, 691, 682, 0, 678,
	0, 0, 0, 0, 681, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 719, 685, 0, 0,
	0, 95, 96, 97, 230, 734, 232, 735, 98, 736,
	737, 0, 99, 236, 237, 100, 688, 718, 738, 739,
	240, 0, 101, 730, 0, 711, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 712, 714, 0, 713, 715, 111, 112, 284, 113,
	740, 114, 741, 742, 0, 115, 0, 116, 0, 0,
	0, 733, 118, 0, 119, 0, 0, 0, 676, 120,
	121, 122, 720, 721, 699, 0, 0, 123, 124, 743,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 731,
	0, 250, 0, 128, 129, 130, 131, 727, 729, 319,
	0, 135, 0, 132, 0, 318, 133, 744, 134, 745,
	746, 747, 0, 710, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 732, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 671, 1635, 700, 728, 153,
	748, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 722, 160, 161, 162, 163,
	0, 723, 164, 265, 165, 0, 166, 167, 168, 749,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 677,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	716, 195, 186, 187, 196, 328, 197, 750, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 751, 202, 724,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	752, 753, 0, 0, 211, 725, 726, 698, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 717, 220,
	0, 278, 221, 222, 223, 279, 754, 0, 0, 224,
	0, 0, 0, 0, 225, 226, 227, 228, 672, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 668,
	669, 666, 703, 692, 693, 690, 691, 682, 678, 0,
	0, 0, 0, 681, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 719, 685, 0, 0,
	0, 95, 96, 97, 230, 734, 232, 735, 98, 736,
	737, 0, 99, 236, 237, 100, 688, 718, 738, 739,
	240, 0, 101, 730, 0, 711, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 712, 714, 0, 713, 715, 111, 112, 284, 113,
	740, 114, 741, 742, 0, 115, 0, 116, 0, 0,
	0, 733, 118, 0, 119, 0, 0, 0, 676, 120,
	121, 122, 720, 721, 699, 0, 0, 123, 124, 743,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 731,
	0, 250, 0, 128, 129, 130, 131, 727, 729, 319,
	0, 135, 0, 132, 0, 318, 133, 744, 134, 745,
	746, 747, 0, 710, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 732, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 671, 0, 700, 728, 153,
	748, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 722, 160, 161, 162, 163,
	0, 723, 164, 265, 165, 0, 166, 167, 168, 749,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 677,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	716, 195, 186, 187, 196, 328, 197, 750, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 751, 202, 724,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	752, 753, 0, 0, 211, 725, 726, 698, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 717, 220,
	0, 278, 221, 222, 223, 279, 754, 0, 0, 224,
	0, 0, 0, 0, 225, 226, 227, 228, 672, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 668,
	669, 0, 0, 0, 0, 0, 1020, 1293, 678, 0,
	0, 0, 0, 681, 703, 692, 693, 690, 691, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 719, 685,
	0, 0, 0, 95, 96, 97, 230, 734, 232, 735,
	98, 736, 737, 0, 99, 236, 237, 100, 688, 718,
	738, 739, 240, 0, 101, 730, 0, 711, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 316,
	109, 110, 0, 712, 714, 0, 713, 715, 111, 112,
	284, 113, 740, 114, 741, 742, 0, 115, 0, 116,
	0, 0, 0, 733, 118, 0, 119, 0, 0, 0,
	676, 120, 121, 122, 720, 721, 699, 0, 0, 123,
	124, 743, 0, 125, 0, 126, 0, 0, 317, 0,
	127, 731, 0, 250, 0, 128, 129, 130, 131, 727,
	729, 319, 0, 135, 0, 132, 0, 318, 133, 744,
	134, 745, 746, 747, 0, 710, 0, 320, 136, 321,
	137, 138, 0, 140, 139, 0, 732, 322, 141, 323,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	259, 147, 324, 149, 150, 152, 151, 671, 0, 700,
	728, 153, 748, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 262, 325, 159, 326, 722, 160, 161,
	162, 163, 0, 723, 164, 265, 165, 0, 166, 167,
	168, 749, 169, 170, 0, 171, 172, 173, 174, 175,
	177, 178, 176, 179, 180, 181, 0, 182, 327, 183,
	184, 677, 185, 0, 189, 190, 191, 192, 0, 268,
	193, 194, 716, 195, 186, 187, 196, 328, 197, 750,
	270, 198, 0, 204, 199, 200, 188, 201, 203, 751,
	202, 724, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 273, 752, 753, 0, 0, 211, 725, 726, 698,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 219,
	717, 220, 0, 278, 221, 222, 223, 279, 754, 0,
	0, 224, 0, 0, 0, 0, 225, 226, 227, 228,
	672, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 668, 669, 703, 692, 693, 690, 691, 682, 0,
	678, 1769, 0, 0, 0, 681, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 719, 685, 0,
	0, 0, 95, 96, 97, 230, 734, 232, 735, 98,
	736, 737, 0, 99, 236, 237, 100, 688, 718, 738,
	739, 240, 0, 101, 730, 0, 711, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 316, 109,
	110, 0, 712, 714, 0, 713, 715, 111, 112, 284,
	113, 740, 114, 741, 742, 0, 115, 0, 116, 0,
	0, 0, 733, 118, 0, 119, 0, 0, 0, 676,
	120, 121, 122, 720, 721, 699, 0, 0, 123, 124,
	743, 0, 125, 0, 126, 0, 0, 317, 0, 127,
	731, 0, 250, 0, 128, 129, 130, 131, 727, 729,
	319, 0, 135, 0, 132, 0, 318, 133, 744, 134,
	745, 746, 747, 0, 710, 0, 320, 136, 321, 137,
	138, 0, 140, 139, 0, 732, 322, 141, 323, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 259,
	147, 324, 149, 150, 152, 151, 671, 0, 700, 728,
	153, 748, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 262, 325, 159, 326, 722, 160, 161, 162,
	163, 0, 723, 164, 265, 165, 0, 166, 167, 168,
	749, 169, 170, 0, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 0, 182, 327, 183, 184,
	677, 185, 0, 189, 190, 191, 192, 0, 268, 193,
	194, 716, 195, 186, 187, 196, 328, 197, 750, 270,
	198, 0, 204, 199, 200, 188, 201, 203, 751, 202,
	724, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	273, 752, 753, 0, 0, 211, 725, 726, 698, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 219, 717,
	220, 0, 278, 221, 222, 223, 279, 754, 1726, 0,
	224, 0, 0, 0, 0, 225, 226, 227, 228, 672,
	0, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	668, 669, 703, 692, 693, 690, 691, 682, 0, 678,
	0, 0, 0, 0, 681, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 719, 685, 0, 0,
	0, 95, 96, 97, 230, 734, 232, 735, 98, 736,
	737, 0, 99, 236, 237, 100, 688, 718, 738, 739,
	240, 0, 101, 730, 0, 711, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 712, 714, 0, 713, 715, 111, 112, 284, 113,
	740, 114, 741, 742, 0, 115, 0, 116, 0, 0,
	0, 733, 118, 0, 119, 0, 0, 0, 676, 120,
	121, 122, 720, 721, 699, 0, 0, 123, 124, 743,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 731,
	0, 250, 0, 128, 129, 130, 131, 727, 729, 319,
	0, 135, 0, 132, 0, 318, 133, 744, 134, 745,
	746, 747, 0, 710, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 732, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 671, 0, 700, 728, 153,
	748, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 722, 160, 161, 162, 163,
	0, 723, 164, 265, 165, 0, 166, 167, 168, 749,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 677,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	716, 195, 186, 187, 196, 328, 197, 750, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 751, 202, 724,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	752, 753, 0, 0, 211, 725, 726, 698, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 717, 220,
	0, 278, 221, 222, 223, 279, 754, 0, 0, 224,
	0, 0, 0, 0, 225, 226, 227, 228, 672, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 668,
	669, 703, 692, 693, 690, 691, 682, 0, 678, 1716,
	0, 0, 0, 681, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 719, 685, 0, 0, 0,
	95, 96, 97, 230, 734, 232, 735, 98, 736, 737,
	0, 99, 236, 237, 100, 688, 718, 738, 739, 240,
	0, 101, 730, 0, 711, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 316, 109, 110, 0,
	712, 714, 0, 713, 715, 111, 112, 284, 113, 740,
	114, 741, 742, 769, 115, 0, 116, 0, 0, 0,
	733, 118, 0, 119, 0, 0, 0, 676, 120, 121,
	122, 720, 721, 699, 0, 0, 123, 124, 743, 0,
	125, 0, 126, 0, 0, 317, 0, 127, 731, 0,
	250, 0, 128, 129, 130, 131, 727, 729, 319, 0,
	135, 0, 132, 0, 318, 133, 744, 134, 745, 746,
	747, 0, 710, 0, 320, 136, 321, 137, 138, 0,
	140, 139, 0, 732, 322, 141, 323, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 324,
	149, 150, 152, 151, 671, 0, 700, 728, 153, 748,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 325, 159, 326, 722, 160, 161, 162, 163, 0,
	723, 164, 265, 165, 0, 166, 167, 168, 749, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 327, 183, 184, 677, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 716,
	195, 186, 187, 196, 328, 197, 750, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 751, 202, 724, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 752,
	753, 0, 0, 211, 725, 726, 698, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 717, 220, 0,
	278, 221, 222, 223, 279, 754, 0, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 672, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 0, 668, 669,
	703, 692, 693, 690, 691, 682, 0, 678, 0, 0,
	0, 0, 681, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 719, 685, 0, 0, 0, 95,
	96, 97, 230, 734, 232, 735, 98, 736, 737, 0,
	99, 236, 237, 100, 688, 718, 738, 739, 240, 0,
	101, 730, 0, 711, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 316, 109, 110, 0, 712,
	714, 0, 713, 715, 111, 112, 284, 113, 740, 114,
	741, 742, 0, 115, 0, 116, 0, 0, 0, 733,
	118, 0, 119, 0, 0, 0, 676, 120, 121, 122,
	720, 721, 699, 0, 0, 123, 124, 743, 0, 125,
	0, 126, 0, 1345, 317, 0, 127, 731, 0, 250,
	0, 128, 129, 130, 131, 727, 729, 319, 0, 135,
	0, 132, 0, 318, 133, 744, 134, 745, 746, 747,
	0, 710, 0, 320, 136, 321, 137, 138, 0, 140,
	139, 0, 732, 322, 141, 323, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 671, 0, 700, 728, 153, 748, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 262,
	325, 159, 326, 722, 160, 161, 162, 163, 0, 723,
	164, 265, 165, 0, 166, 167, 168, 749, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 327, 183, 184, 677, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 716, 195,
	186, 187, 196, 328, 197, 750, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 751, 202, 724, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 752, 753,
	0, 0, 211, 725, 726, 698, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 219, 717, 220, 0, 278,
	221, 222, 223, 279, 754, 0, 0, 224, 0, 0,
	0, 0, 225, 226, 227, 228, 672, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 668, 669, 703,
	692, 693, 690, 691, 682, 0, 678, 0, 0, 0,
	0, 681, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 719, 685, 0, 0, 0, 95, 96,
	97, 230, 734, 232, 735, 98, 736, 737, 0, 99,
	236, 237, 100, 688, 718, 738, 739, 240, 0, 101,
	730, 0, 711, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 316, 109, 110, 0, 712, 714,
	0, 713, 715, 111, 112, 284, 113, 740, 114, 741,
	742, 0, 115, 0, 116, 0, 0, 0, 733, 118,
	0, 119, 0, 0, 0, 676, 120, 121, 122, 720,
	721, 699, 0, 0, 123, 124, 743, 0, 125, 0,
	126, 0, 0, 317, 0, 127, 731, 0, 250, 0,
	128, 129, 130, 131, 727, 729, 319, 0, 135, 0,
	132, 0, 318, 133, 744, 134, 745, 746, 747, 0,
	710, 0, 320, 136, 321, 137, 138, 0, 140, 139,
	0, 732, 322, 141, 323, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 259, 147, 324, 149, 150,
	152, 151, 671, 0, 700, 728, 153, 748, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 262, 325,
	159, 326, 722, 160, 161, 162, 163, 0, 723, 164,
	265, 165, 0, 166, 167, 168, 749, 169, 170, 0,
	171, 172, 173, 174, 175, 177, 178, 176, 179, 180,
	181, 0, 182, 327, 183, 184, 677, 185, 0, 189,
	190, 191, 192, 0, 268, 193, 194, 716, 195, 186,
	187, 196, 328, 197, 750, 270, 198, 0, 204, 199,
	200, 188, 201, 203, 751, 202, 724, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 273, 752, 753, 0,
	0, 211, 725, 726, 698, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 219, 717, 220, 0, 278, 221,
	222, 223, 279, 754, 0, 0, 224, 0, 0, 0,
	0, 225, 226, 227, 228, 672, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 0, 668, 669, 703, 692,
	693, 690, 691, 682, 0, 678, 1288, 0, 0, 0,
	681, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 719, 685, 0, 0, 0, 95, 96, 97,
	230, 734, 232, 735, 98, 736, 737, 0, 99, 236,
	237, 100, 688, 718, 738, 739, 240, 0, 101, 730,
	0, 711, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 316, 109, 110, 0, 712, 714, 0,
	713, 715, 111, 112, 284, 113, 740, 114, 741, 742,
	0, 115, 0, 116, 0, 0, 0, 733, 118, 0,
	119, 0, 0, 0, 676, 120, 121, 122, 720, 721,
	699, 0, 0, 123, 124, 743, 0, 125, 0, 126,
	0, 0, 317, 0, 127, 731, 0, 250, 0, 128,
	129, 130, 131, 727, 729, 319, 0, 135, 0, 132,
	0, 318, 133, 744, 134, 745, 746, 747, 0, 710,
	0, 320, 136, 321, 137, 138, 0, 140, 139, 0,
	732, 322, 141, 323, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 259, 147, 324, 149, 150, 152,
	151, 671, 0, 700, 728, 153, 748, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 262, 325, 159,
	326, 722, 160, 161, 162, 163, 0, 723, 164, 265,
	165, 0, 166, 167, 168, 749, 169, 170, 0, 171,
	172, 173, 174, 175, 177, 178, 176, 179, 180, 181,
	0, 182, 327, 183, 184, 677, 185, 0, 189, 190,
	191, 192, 0, 268, 193, 194, 716, 195, 186, 187,
	196, 328, 197, 750, 270, 198, 0, 204, 199, 200,
	188, 201, 203, 751, 202, 724, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 273, 752, 753, 0, 0,
	211, 725, 726, 698, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 219, 717, 220, 0, 278, 221, 222,
	223, 279, 754, 0, 0, 224, 0, 0, 0, 0,
	225, 226, 227, 228, 672, 0, 0, 0, 0, 0,
	670, 0, 0, 0, 0, 668, 669, 666, 703, 692,
	693, 690, 691, 682, 678, 0, 0, 0, 0, 681,
	0, 0, 0, 0, 92, 93, 945, 94, 0, 0,
	0, 0, 719, 685, 0, 0, 0, 95, 96, 97,
	230, 734, 232, 735, 98, 736, 737, 0, 99, 236,
	237, 100, 688, 718, 738, 739, 240, 0, 101, 730,
	0, 711, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 316, 109, 110, 0, 712, 714, 0,
	713, 715, 111, 112, 284, 113, 740, 114, 741, 742,
	0, 115, 0, 116, 0, 0, 0, 733, 118, 0,
	119, 0, 0, 0, 676, 120, 121, 122, 720, 721,
	699, 0, 0, 123, 124, 743, 0, 125, 0, 126,
	0, 0, 317, 0, 127, 731, 0, 250, 0, 128,
	129, 130, 131, 727, 729, 319, 0, 135, 0, 132,
	0, 318, 133, 744, 134, 745, 746, 747, 0, 710,
	0, 320, 136, 321, 137, 138, 0, 140, 139, 0,
	732, 322, 141, 323, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 259, 147, 324, 149, 150, 152,
	151, 671, 0, 700, 728, 153, 748, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 262, 325, 159,
	326, 722, 160, 161, 162, 163, 0, 723, 164, 265,
	165, 0, 166, 167, 168, 749, 169, 170, 0, 171,
	172, 173, 174, 175, 177, 178, 176, 179, 180, 181,
	0, 182, 327, 183, 184, 677, 185, 0, 189, 190,
	191, 192, 0, 268, 193, 194, 716, 195, 186, 187,
	196, 328, 197, 750, 270, 198, 0, 204, 199, 200,
	188, 201, 203, 751, 202, 724, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 273, 752, 753, 0, 0,
	211, 725, 726, 698, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 219, 717, 220, 0, 278, 221, 222,
	223, 279, 754, 0, 0, 224, 0, 0, 0, 0,
	225, 226, 227, 228, 672, 0, 0, 0, 0, 0,
	670, 0, 0, 0, 0, 668, 669, 703, 692, 693,
	690, 691, 682, 0, 678, 0, 0, 0, 0, 681,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 719, 685, 0, 0, 0, 95, 96, 97, 230,
	734, 232, 735, 98, 736, 737, 0, 99, 236, 237,
	100, 688, 718, 738, 739, 240, 0, 101, 730, 0,
	711, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 2124, 0, 712, 714, 0, 713,
	715, 111, 112, 284, 113, 740, 114, 741, 742, 0,
	115, 0, 116, 0, 0, 0, 733, 118, 0, 119,
	0, 0, 0, 676, 120, 121, 122, 720, 721, 699,
	0, 0, 123, 124, 743, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 731, 0, 250, 0, 128, 129,
	130, 131, 727, 729, 319, 0, 135, 0, 132, 0,
	318, 133, 744, 134, 745, 746, 747, 0, 710, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 732,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	671, 0, 700, 728, 153, 748, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	722, 160, 161, 162, 163, 0, 723, 164, 265, 165,
	0, 166, 167, 168, 749, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 677, 185, 0, 189, 190, 191,
	192, 0, 268, 193, 194, 716, 195, 186, 187, 196,
	328, 197, 750, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 751, 202, 724, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 273, 752, 753, 0, 0, 211,
	725, 726, 698, 212, 213, 2123, 215, 0, 0, 216,
	217, 218, 219, 717, 220, 0, 278, 221, 222, 223,
	279, 754, 0, 0, 224, 0, 0, 0, 0, 225,
	226, 227, 228, 672, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 668, 669, 703, 692, 693, 690,
	691, 682, 0, 678, 0, 0, 0, 0, 681, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	719, 685, 0, 0, 0, 95, 96, 97, 2122, 734,
	232, 735, 98, 736, 737, 0, 99, 236, 237, 100,
	688, 718, 738, 739, 240, 0, 101, 730, 0, 711,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 316, 109, 2124, 0, 712, 714, 0, 713, 715,
	111, 112, 284, 113, 740, 114, 741, 742, 0, 115,
	0, 116, 0, 0, 0, 733, 118, 0, 119, 0,
	0, 0, 676, 120, 121, 122, 720, 721, 699, 0,
	0, 123, 124, 743, 0, 125, 0, 126, 0, 0,
	317, 0, 127, 731, 0, 250, 0, 128, 129, 130,
	131, 727, 729, 319, 0, 135, 0, 132, 0, 318,
	133, 744, 134, 745, 746, 747, 0, 710, 0, 320,
	136, 321, 137, 138, 0, 140, 139, 0, 732, 322,
	141, 323, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 324, 149, 150, 152, 151, 671,
	0, 700, 728, 153, 748, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 325, 159, 326, 722,
	160, 161, 162, 163, 0, 723, 164, 265, 165, 0,
	166, 167, 168, 749, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	327, 183, 184, 677, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 716, 195, 186, 187, 196, 328,
	197, 750, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 751, 202, 724, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 752, 753, 0, 0, 211, 725,
	726, 698, 212, 213, 2123, 215, 0, 0, 216, 217,
	218, 219, 717, 220, 0, 278, 221, 222, 223, 279,
	754, 0, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 672, 0, 0, 0, 0, 0, 670, 0,
	0, 0, 0, 668, 669, 703, 692, 693, 690, 691,
	682, 0, 678, 0, 0, 0, 0, 681, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 719,
	685, 0, 0, 0, 95, 96, 97, 230, 734, 232,
	735, 98, 736, 737, 0, 99, 236, 237, 100, 688,
	718, 738, 739, 240, 0, 101, 730, 0, 711, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 712, 714, 0, 713, 715, 111,
	112, 284, 113, 740, 114, 741, 742, 0, 115, 0,
	116, 0, 0, 0, 733, 118, 0, 119, 0, 0,
	0, 676, 120, 121, 122, 720, 721, 699, 0, 0,
	123, 124, 743, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 731, 0, 250, 0, 128, 129, 130, 131,
	727, 729, 319, 0, 135, 0, 132, 0, 318, 133,
	744, 134, 745, 746, 747, 0, 710, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 732, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 671, 0,
	700, 728, 153, 748, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 722, 160,
	161, 162, 163, 0, 723, 164, 265, 165, 0, 166,
	167, 168, 749, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 677, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 716, 195, 186, 187, 196, 328, 197,
	750, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	751, 202, 724, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 752, 753, 0, 0, 211, 725, 726,
	698, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 717, 220, 0, 278, 221, 222, 223, 279, 754,
	0, 0, 224, 0, 0, 0, 0, 225, 226, 227,
	228, 672, 0, 0, 0, 0, 0, 670, 0, 0,
	0, 0, 668, 669, 1317, 692, 693, 690, 691, 682,
	0, 678, 0, 0, 0, 0, 681, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 719, 685,
	0, 0, 0, 95, 96, 97, 230, 734, 232, 735,
	98, 736, 737, 0, 99, 236, 237, 100, 688, 718,
	738, 739, 240, 0, 101, 730, 0, 711, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 316,
	109, 110, 0, 712, 714, 0, 713, 715, 111, 112,
	284, 113, 740, 1320, 741, 742, 0, 115, 0, 116,
	0, 0, 0, 733, 118, 0, 119, 0, 0, 0,
	676, 120, 121, 122, 720, 721, 699, 0, 0, 123,
	124, 743, 0, 125, 0, 126, 0, 0, 317, 0,
	127, 731, 0, 250, 0, 128, 129, 1321, 131, 727,
	729, 319, 0, 135, 0, 132, 0, 318, 133, 744,
	134, 745, 746, 747, 0, 710, 0, 320, 136, 321,
	137, 138, 0, 140, 139, 0, 732, 322, 141, 323,
	0, 142, 0, 0, 143, 0, 144, 1322, 1319, 148,
	259, 147, 324, 149, 150, 152, 151, 671, 0, 700,
	728, 153, 748, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 262, 325, 159, 326, 722, 160, 161,
	162, 163, 0, 723, 164, 265, 165, 0, 166, 167,
	168, 749, 169, 170, 0, 171, 172, 173, 174, 175,
	177, 178, 176, 179, 180, 181, 0, 182, 327, 183,
	184, 677, 185, 0, 189, 190, 191, 1323, 0, 268,
	193, 194, 716, 195, 186, 187, 196, 328, 197, 750,
	270, 198, 0, 204, 199, 200, 188, 201, 203, 751,
	202, 724, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 273, 752, 753, 0, 0, 211, 725, 726, 698,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 219,
	717, 220, 0, 278, 221, 222, 223, 279, 754, 0,
	0, 224, 0, 0, 0, 0, 225, 226, 1318, 228,
	672, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 668, 669, 703, 692, 693, 690, 691, 682, 0,
	678, 0, 0, 0, 0, 681, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 719, 685, 0,
	0, 0, 95, 96, 97, 230, 734, 232, 735, 98,
	736, 737, 0, 99, 236, 237, 100, 688, 718, 738,
	739, 240, 0, 101, 730, 0, 711, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 316, 109,
	110, 0, 712, 714, 0, 713, 715, 111, 112, 284,
	113, 740, 114, 741, 742, 0, 115, 0, 116, 0,
	0, 0, 733, 118, 0, 119, 0, 0, 0, 676,
	120, 121, 122, 720, 721, 699, 0, 0, 123, 124,
	743, 0, 125, 0, 126, 0, 0, 317, 0, 127,
	731, 0, 250, 0, 128, 129, 130, 131, 727, 729,
	319, 0, 135, 0, 132, 0, 318, 133, 744, 134,
	745, 746, 747, 0, 710, 0, 320, 136, 321, 137,
	138, 0, 140, 139, 0, 732, 322, 141, 323, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 259,
	147, 324, 149, 150, 152, 151, 0, 0, 700, 728,
	153, 748, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 262, 325, 159, 326, 722, 160, 161, 162,
	163, 0, 723, 164, 265, 165, 0, 166, 167, 168,
	749, 169, 170, 0, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 0, 182, 327, 183, 184,
	1335, 185, 0, 189, 190, 191, 192, 0, 268, 193,
	194, 716, 195, 186, 187, 196, 328, 197, 750, 270,
	198, 0, 204, 199, 200, 188, 201, 203, 751, 202,
	724, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	273, 752, 753, 0, 0, 211, 725, 726, 698, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 219, 717,
	220, 0, 278, 221, 222, 223, 279, 754, 0, 0,
	224, 0, 0, 0, 0, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	1331, 1332, 703, 692, 693, 690, 691, 682, 0, 1334,
	0, 0, 0, 0, 681, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 719, 685, 0, 0,
	0, 95, 96, 97, 230, 734, 232, 735, 98, 736,
	737, 0, 99, 236, 237, 100, 0, 718, 738, 739,
	240, 0, 101, 730, 0, 711, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 712, 714, 0, 713, 715, 111, 112, 284, 113,
	740, 114, 741, 742, 0, 115, 0, 116, 0, 0,
	0, 733, 118, 0, 119, 0, 0, 0, 245, 120,
	121, 122, 720, 721, 699, 0, 0, 123, 124, 743,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 731,
	0, 250, 0, 128, 129, 130, 131, 727, 729, 319,
	0, 135, 0, 132, 0, 318, 133, 744, 134, 745,
	746, 747, 0, 710, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 732, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 0, 0, 700, 728, 153,
	748, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 722, 160, 161, 162, 163,
	0, 723, 164, 265, 165, 0, 166, 167, 168, 749,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 1335,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	716, 195, 186, 187, 196, 328, 197, 750, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 751, 202, 724,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	752, 753, 0, 0, 211, 725, 726, 698, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 717, 220,
	0, 278, 221, 222, 223, 279, 754, 0, 0, 224,
	0, 0, 0, 0, 225, 226, 227, 228, 0, 0,
	703, 692, 693, 690, 691, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 1334, 94,
	0, 0, 0, 681, 719, 685, 0, 0, 0, 95,
	96, 97, 0, 734, 232, 735, 98, 736, 737, 0,
	99, 236, 237, 100, 688, 718, 738, 739, 240, 0,
	101, 730, 0, 711, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 316, 109, 2124, 0, 712,
	714, 0, 713, 715, 111, 112, 284, 113, 740, 114,
	741, 742, 0, 115, 0, 116, 0, 0, 0, 733,
	118, 0, 119, 0, 0, 0, 676, 120, 121, 122,
	720, 721, 699, 0, 0, 123, 124, 743, 0, 125,
	0, 126, 0, 0, 317, 0, 127, 731, 0, 250,
	0, 128, 129, 130, 131, 727, 729, 0, 0, 135,
	0, 132, 0, 318, 133, 744, 134, 745, 746, 747,
	0, 710, 0, 0, 136, 321, 137, 138, 0, 140,
	139, 0, 732, 322, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 671, 0, 700, 728, 153, 748, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 262,
	325, 159, 326, 722, 160, 161, 162, 163, 0, 723,
	164, 265, 165, 0, 166, 167, 168, 749, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 327, 183, 184, 677, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 716, 195,
	186, 187, 196, 0, 197, 750, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 751, 202, 724, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 752, 753,
	0, 0, 211, 725, 726, 698, 212, 213, 2123, 215,
	0, 0, 216, 217, 218, 219, 717, 220, 0, 278,
	221, 222, 223, 279, 754, 0, 0, 224, 0, 0,
	0, 0, 225, 226, 227, 228, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 668, 669, 0,
	0, 0, 92, 93, 0, 94, 678, 0, 0, 0,
	719, 681, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 718, 238, 239, 240, 0, 101, 730, 0, 711,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 316, 109, 110, 0, 712, 714, 0, 713, 715,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 720, 721, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	317, 0, 127, 731, 0, 250, 0, 128, 129, 130,
	131, 727, 729, 319, 0, 135, 0, 132, 0, 318,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 320,
	136, 321, 137, 138, 0, 140, 139, 0, 732, 322,
	141, 323, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 324, 149, 150, 152, 151, 0,
	0, 0, 728, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 325, 159, 326, 722,
	160, 161, 162, 163, 0, 723, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	327, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 716, 195, 186, 187, 196, 328,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 724, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 725,
	726, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 717, 220, 0, 278, 221, 222, 223, 279,
	280, 0, 0, 224, 491, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 229, 0,
	0, 0, 1608, 95, 96, 97, 230, 231, 232, 233,
	98, 234, 235, 0, 99, 236, 237, 100, 0, 0,
	238, 239, 240, 0, 101, 241, 0, 315, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 316,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	284, 113, 242, 114, 243, 244, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	245, 120, 121, 122, 246, 247, 0, 0, 0, 123,
	124, 248, 0, 125, 0, 126, 0, 0, 317, 0,
	127, 249, 0, 250, 0, 128, 129, 130, 131, 251,
	252, 319, 0, 135, 0, 132, 0, 318, 133, 253,
	134, 254, 255, 256, 0, 257, 0, 320, 136, 321,
	137, 138, 0, 140, 139, 0, 258, 322, 141, 323,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	259, 147, 324, 149, 150, 152, 151, 0, 0, 0,
	260, 153, 261, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 262, 325, 159, 326, 263, 160, 161,
	162, 163, 0, 264, 164, 265, 165, 0, 166, 167,
	168, 266, 169, 170, 0, 171, 172, 173, 174, 175,
	177, 178, 176, 179, 180, 181, 0, 182, 327, 183,
	184, 267, 185, 0, 189, 190, 191, 192, 73, 268,
	193, 194, 0, 195, 186, 187, 196, 328, 197, 269,
	270, 198, 0, 204, 199, 200, 188, 201, 203, 271,
	202, 272, 0, 205, 75, 206, 207, 208, 209, 210,
	0, 273, 274, 275, 0, 0, 211, 276, 277, 0,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 219,
	0, 220, 0, 278, 221, 222, 223, 571, 280, 0,
	0, 224, 0, 0, 0, 71, 225, 226, 227, 228,
	0, 72, 491, 488, 0, 489, 484, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	70, 94, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 95, 96, 97, 230, 231, 232, 233, 98, 234,
	235, 0, 99, 236, 237, 100, 0, 0, 238, 239,
	240, 0, 101, 241, 0, 315, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 284, 113,
	242, 114, 243, 244, 892, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 245, 120,
	121, 122, 246, 247, 481, 0, 0, 123, 124, 248,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 249,
	0, 250, 0, 128, 129, 130, 131, 251, 252, 319,
	0, 135, 0, 132, 0, 318, 133, 253, 134, 254,
	255, 256, 0, 257, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 258, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 0, 0, 0, 260, 153,
	261, 154, 155, 0, 156, 482, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 263, 160, 161, 162, 163,
	0, 264, 164, 265, 165, 0, 166, 167, 168, 266,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 267,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	0, 195, 186, 187, 196, 328, 197, 269, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 271, 202, 272,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	274, 275, 0, 0, 211, 276, 277, 480, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 0, 220,
	0, 278, 221, 222, 223, 279, 280, 491, 488, 224,
	489, 484, 479, 0, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 490,
	485, 229, 0, 0, 0, 0, 95, 96, 97, 230,
	231, 232, 233, 98, 234, 235, 0, 99, 236, 237,
	100, 0, 0, 238, 239, 240, 0, 101, 241, 0,
	315, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 284, 113, 242, 114, 243, 244, 889,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 245, 120, 121, 122, 246, 247, 481,
	0, 0, 123, 124, 248, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 249, 0, 250, 0, 128, 129,
	130, 131, 251, 252, 319, 0, 135, 0, 132, 0,
	318, 133, 253, 134, 254, 255, 256, 0, 257, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 258,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	0, 0, 0, 260, 153, 261, 154, 155, 0, 156,
	482, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	263, 160, 161, 162, 163, 0, 264, 164, 265, 165,
	0, 166, 167, 168, 266, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 267, 185, 0, 189, 190, 191,
	192, 0, 268, 193, 194, 0, 195, 186, 187, 196,
	328, 197, 269, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 271, 202, 272, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 273, 274, 275, 0, 0, 211,
	276, 277, 480, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 0, 220, 0, 278, 221, 222, 223,
	279, 280, 491, 488, 224, 489, 484, 479, 0, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 490, 485, 229, 0, 0, 0,
	0, 95, 96, 97, 230, 231, 232, 233, 98, 234,
	235, 0, 99, 236, 237, 100, 0, 0, 238, 239,
	240, 0, 101, 241, 0, 315, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 284, 113,
	242, 114, 243, 244, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 245, 120,
	121, 122, 246, 247, 481, 0, 0, 123, 124, 248,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 249,
	0, 250, 0, 128, 129, 130, 131, 251, 252, 319,
	0, 135, 0, 132, 0, 318, 133, 253, 134, 254,
	255, 256, 0, 257, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 258, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 0, 0, 0, 260, 153,
	261, 154, 155, 0, 156, 482, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 263, 160, 161, 162, 163,
	0, 264, 164, 265, 165, 0, 166, 167, 168, 266,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 267,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	0, 195, 186, 187, 196, 328, 197, 269, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 271, 202, 272,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	274, 275, 0, 0, 211, 276, 277, 480, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 0, 220,
	0, 278, 221, 222, 223, 279, 280, 89, 0, 224,
	0, 0, 0, 0, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 490,
	485, 229, 0, 0, 0, 0, 95, 96, 97, 230,
	231, 232, 233, 98, 234, 235, 0, 99, 236, 237,
	100, 0, 0, 238, 239, 240, 0, 101, 241, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 284, 113, 242, 114, 243, 244, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 245, 120, 121, 122, 246, 247, 0,
	0, 0, 123, 124, 248, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 249, 0, 250, 0, 128, 129,
	130, 131, 251, 252, 0, 0, 135, 0, 132, 0,
	0, 133, 253, 134, 254, 255, 256, 0, 257, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 258,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 260, 153, 261, 154, 155, 0, 156,
	0, 525, 157, 0, 0, 158, 262, 0, 159, 0,
	263, 160, 161, 162, 163, 0, 264, 164, 265, 165,
	0, 166, 167, 168, 266, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 0, 183, 184, 267, 185, 0, 189, 190, 191,
	192, 73, 268, 193, 194, 0, 195, 186, 187, 196,
	0, 197, 269, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 271, 202, 272, 0, 205, 75, 206, 207,
	208, 209, 210, 0, 273, 274, 275, 0, 0, 211,
	276, 277, 0, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 0, 220, 0, 278, 221, 222, 223,
	571, 280, 0, 0, 224, 89, 0, 0, 71, 225,
	226, 227, 228, 0, 72, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 229,
	0, 1212, 0, 1217, 95, 96, 97, 230, 231, 232,
	233, 98, 234, 235, 0, 99, 236, 237, 100, 0,
	0, 238, 239, 240, 0, 101, 241, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 284, 113, 242, 114, 243, 244, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 246, 247, 0, 0, 0,
	123, 124, 248, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 249, 0, 250, 0, 128, 129, 130, 131,
	251, 252, 0, 0, 135, 0, 132, 0, 0, 133,
	253, 134, 254, 255, 256, 0, 257, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 258, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 260, 153, 261, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 0, 159, 0, 263, 160,
	161, 162, 163, 0, 264, 164, 265, 165, 0, 166,
	167, 168, 266, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 0,
	183, 184, 267, 185, 0, 189, 190, 191, 192, 73,
	268, 193, 194, 0, 195, 186, 187, 196, 0, 197,
	269, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	271, 202, 272, 0, 205, 75, 206, 207, 208, 209,
	210, 0, 273, 274, 275, 0, 0, 211, 276, 277,
	0, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 0, 220, 0, 278, 221, 222, 223, 571, 280,
	0, 0, 224, 89, 0, 0, 71, 225, 226, 227,
	228, 0, 72, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 229, 0, 0,
	0, 70, 95, 96, 97, 230, 231, 232, 233, 98,
	234, 235, 0, 99, 236, 237, 100, 0, 0, 238,
	239, 240, 0, 101, 241, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 284,
	113, 242, 114, 243, 244, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 245,
	120, 121, 122, 246, 247, 0, 0, 0, 123, 124,
	248, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	249, 0, 250, 0, 128, 129, 130, 131, 251, 252,
	0, 0, 135, 0, 132, 0, 0, 133, 253, 134,
	254, 255, 256, 0, 257, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 258, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 259,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 260,
	153, 261, 154, 155, 0, 156, 0, 525, 157, 0,
	0, 158, 262, 0, 159, 0, 263, 160, 161, 162,
	163, 0, 264, 164, 265, 165, 0, 166, 167, 168,
	266, 169, 170, 0, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 0, 182, 0, 183, 184,
	267, 185, 0, 189, 190, 191, 192, 0, 268, 193,
	194, 0, 195, 186, 187, 196, 0, 197, 269, 270,
	198, 0, 204, 199, 200, 188, 201, 203, 271, 202,
	272, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	273, 274, 275, 0, 0, 211, 276, 277, 0, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 219, 0,
	220, 0, 278, 221, 222, 223, 279, 280, 0, 0,
	224, 89, 0, 0, 0, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 1212, 0, 1217,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 0, 0, 224, 0,
	89, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 229, 0, 0, 0, 798, 95,
	96, 97, 230, 231, 232, 233, 98, 234, 235, 0,
	99, 236, 237, 100, 0, 0, 238, 239, 240, 0,
	101, 241, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 284, 113, 242, 114,
	243, 244, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 245, 120, 121, 122,
	246, 247, 0, 0, 0, 123, 124, 248, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 249, 0, 250,
	0, 128, 129, 130, 131, 251, 252, 0, 0, 135,
	0, 132, 0, 0, 133, 253, 134, 254, 255, 256,
	0, 257, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 258, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 260, 153, 261, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 262,
	0, 159, 0, 263, 160, 161, 162, 163, 0, 264,
	164, 265, 165, 0, 166, 167, 168, 266, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 0, 183, 184, 267, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 0, 195,
	186, 187, 196, 0, 197, 269, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 271, 202, 272, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 274, 275,
	0, 0, 211, 276, 277, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 219, 0, 220, 0, 278,
	221, 222, 223, 279, 280, 0, 0, 224, 89, 0,
	0, 0, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 229, 0, 0, 0, 1121, 95, 96, 97,
	230, 231, 232, 233, 98, 234, 235, 0, 99, 236,
	237, 100, 0, 0, 238, 239, 240, 0, 101, 241,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 284, 113, 242, 114, 243, 244,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 245, 120, 121, 122, 246, 247,
	0, 0, 0, 123, 124, 248, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 249, 0, 250, 0, 128,
	129, 130, 131, 251, 252, 0, 0, 135, 0, 132,
	0, 0, 133, 253, 134, 254, 255, 256, 0, 257,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	258, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 259, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 260, 153, 261, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 262, 0, 159,
	0, 263, 160, 161, 162, 163, 0, 264, 164, 265,
	165, 0, 166, 167, 168, 266, 169, 170, 0, 171,
	172, 173, 174, 175, 177, 178, 176, 179, 180, 181,
	0, 182, 0, 183, 184, 267, 185, 0, 189, 190,
	191, 192, 0, 268, 193, 194, 0, 195, 186, 187,
	196, 0, 197, 269, 270, 198, 0, 204, 199, 200,
	188, 201, 203, 271, 202, 272, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 273, 274, 275, 0, 0,
	211, 276, 277, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 219, 0, 220, 0, 278, 221, 222,
	223, 279, 280, 0, 0, 224, 89, 0, 0, 0,
	225, 226, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 1733, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 0, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 703, 692, 693, 690, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 765, 0, 0, 0, 229, 0, 0, 0,
	0, 95, 96, 97, 230, 734, 232, 735, 98, 736,
	737, 0, 99, 236, 237, 100, 0, 0, 738, 739,
	240, 0, 101, 241, 0, 315, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 284, 113,
	740, 114, 741, 742, 0, 115, 0, 116, 0, 0,
	0, 733, 118, 0, 119, 0, 0, 0, 245, 120,
	121, 122, 246, 247, 699, 0, 0, 123, 124, 743,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 249,
	0, 250, 0, 128, 129, 130, 131, 251, 252, 319,
	0, 135, 0, 132, 0, 318, 133, 744, 134, 745,
	746, 747, 0, 710, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 258, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 0, 0, 700, 260, 153,
	748, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 263, 160, 161, 162, 163,
	0, 264, 164, 265, 165, 0, 166, 167, 168, 749,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 267,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	0, 195, 186, 187, 196, 328, 197, 750, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 751, 202, 272,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	752, 753, 0, 0, 211, 276, 277, 698, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 0, 220,
	0, 278, 221, 222, 223, 279, 754, 491, 488, 224,
	0, 0, 606, 0, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 229, 0, 0, 0, 0, 95, 96, 97, 230,
	231, 232, 233, 98, 234, 235, 0, 99, 236, 237,
	100, 0, 0, 238, 239, 240, 0, 101, 241, 0,
	315, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 284, 113, 242, 114, 243, 244, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 245, 120, 121, 122, 246, 247, 0,
	0, 0, 123, 124, 248, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 249, 0, 250, 0, 128, 129,
	130, 131, 251, 252, 319, 0, 135, 0, 132, 0,
	318, 133, 253, 134, 254, 255, 256, 0, 257, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 258,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	0, 0, 0, 260, 153, 261, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	263, 160, 161, 162, 163, 0, 264, 164, 265, 165,
	0, 166, 167, 168, 266, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 267, 185, 0, 189, 190, 191,
	192, 0, 268, 193, 194, 0, 195, 186, 187, 196,
	328, 197, 269, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 271, 202, 272, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 273, 274, 275, 0, 0, 211,
	276, 277, 0, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 0, 220, 0, 278, 221, 222, 223,
	279, 280, 89, 0, 224, 0, 0, 0, 0, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 95, 96, 97, 230, 231, 232, 233, 98, 234,
	235, 0, 99, 236, 237, 100, 0, 0, 238, 239,
	240, 0, 101, 241, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 85, 113,
	242, 114, 243, 244, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 245, 120,
	121, 122, 246, 247, 0, 0, 0, 123, 124, 248,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 249,
	0, 250, 0, 128, 129, 130, 131, 251, 252, 0,
	0, 135, 0, 132, 0, 0, 133, 253, 134, 254,
	255, 256, 0, 257, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 258, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 260, 153,
	261, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 0, 159, 0, 263, 160, 161, 162, 163,
	0, 264, 164, 265, 165, 0, 166, 167, 168, 266,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 0, 183, 184, 267,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	0, 195, 186, 187, 196, 0, 197, 269, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 271, 202, 272,
	0, 205, 84, 206, 207, 208, 209, 210, 0, 273,
	274, 275, 0, 0, 211, 276, 277, 0, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 0, 220,
	0, 278, 221, 222, 223, 279, 280, 0, 0, 224,
	491, 488, 0, 0, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 88, 0, 0, 229, 0, 0, 0, 0, 95,
	96, 97, 230, 231, 232, 233, 98, 234, 235, 0,
	99, 236, 237, 100, 0, 0, 238, 239, 240, 0,
	101, 241, 0, 315, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 316, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 284, 113, 242, 114,
	243, 244, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 245, 120, 121, 122,
	246, 247, 0, 0, 0, 123, 124, 248, 0, 125,
	0, 126, 0, 0, 317, 0, 127, 249, 0, 250,
	0, 128, 129, 130, 131, 251, 252, 319, 0, 135,
	0, 132, 0, 318, 133, 253, 134, 254, 255, 256,
	0, 257, 0, 320, 136, 321, 137, 138, 0, 140,
	139, 0, 258, 322, 141, 323, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 0, 0, 0, 260, 153, 261, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 262,
	325, 159, 326, 263, 160, 161, 162, 163, 0, 264,
	164, 265, 165, 0, 166, 167, 168, 266, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 327, 183, 184, 267, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 0, 195,
	186, 187, 196, 328, 197, 269, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 271, 202, 272, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 274, 275,
	0, 0, 211, 276, 277, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 219, 0, 220, 0, 278,
	221, 222, 223, 279, 280, 89, 0, 224, 0, 0,
	0, 0, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 95, 96, 97, 230, 231, 232,
	233, 98, 234, 235, 0, 99, 236, 237, 100, 0,
	0, 238, 239, 240, 0, 101, 241, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 284, 113, 242, 114, 243, 244, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 246, 247, 0, 0, 0,
	123, 124, 248, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 249, 0, 250, 0, 128, 129, 130, 131,
	251, 252, 0, 0, 135, 0, 132, 0, 0, 133,
	253, 134, 254, 255, 256, 0, 257, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 258, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 260, 153, 261, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 0, 159, 0, 263, 160,
	161, 162, 163, 0, 264, 164, 265, 165, 0, 166,
	167, 168, 266, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 0,
	183, 184, 267, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 0, 195, 186, 187, 196, 0, 197,
	269, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	271, 202, 272, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 274, 275, 0, 0, 211, 276, 277,
	0, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 0, 220, 0, 278, 221, 222, 223, 279, 280,
	0, 491, 224, 0, 0, 0, 0, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 88, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 315, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 316, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 317, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 319, 0,
	135, 0, 132, 0, 318, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 320, 136, 321, 137, 138, 0,
	140, 139, 0, 258, 322, 141, 323, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 324,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 325, 159, 326, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 327, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 328, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 1078, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 1076, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 1184,
	0, 123, 124, 248, 0, 125, 0, 126, 1081, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 1182, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 1080,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 1183, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	1078, 101, 241, 0, 0, 1073, 102, 103, 104, 0,
	105, 1076, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 1081, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 1072, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 1080, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 1079, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 1700, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 525, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 906, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 823, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 525, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 579, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 537, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 525, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 530, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	525, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 414,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 413, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 1381, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 1379, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 1368, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 936, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 428, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 808, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 0, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 642, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 637, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 585,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 440, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 439, 274,
	275, 0, 0, 435, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 440, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 439, 274, 275, 0, 0, 435, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 567, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 564, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 561, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 559, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 533, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 514, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 433, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 431, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 440, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 434, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 432, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 439, 274,
	275, 0, 0, 435, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 0, 163, 0, 264, 164, 265, 165, 0,
	166, 0, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 0, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 0, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 963, 964, 0, 983, 984, 985, 993, 994,
	995, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 997, 0,
	0, 0, 0, 0, 963, 964, 0, 983, 984, 985,
	993, 994, 995, 0, 0, 0, 0, 0, 965, 0,
	986, 0, 0, 0, 980, 0, 0, 966, 0, 0,
	997, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 0, 0, 0, 0, 0,
	965, 0, 986, 0, 0, 0, 980, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 990, 998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 971, 0, 0, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 988, 0, 444, 0, 990, 998, 981, 0, 0,
	0, 0, 0, 0, 0, 445, 0, 0, 971, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 988, 0, 446, 0, 990, 998, 981,
	449, 0, 0, 0, 0, 454, 455, 0, 0, 460,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 448, 450, 0, 987, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 452, 453, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 991, 0, 977, 978, 979, 992, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 0,
	0, 0, 0, 0, 0, 0, 1582, 0, 0, 0,
	0, 0, 0, 0, 989, 0, 0, 977, 978, 979,
	992, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 0, 0, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 977,
	978, 979, 992, 447, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 963, 964, 2062, 983, 984,
	985, 993, 994, 995, 0, 0, 457, 0, 462, 0,
	0, 986, 458, 0, 0, 0, 0, 459, 966, 963,
	964, 997, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 461, 0, 0, 986, 0, 0, 0, 0,
	0, 965, 966, 0, 0, 997, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 965, 0, 0, 0, 0,
	0, 980, 986, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 996, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 987, 0, 990, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 2060, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	2005, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 963, 964, 2000, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 966, 963,
	964, 997, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 965, 966, 0, 0, 997, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 965, 0, 0, 0, 0,
	0, 980, 986, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 996, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 987, 0, 990, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 1996, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	1935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 963, 964, 1913, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 966, 963,
	964, 997, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 965, 966, 0, 0, 997, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 965, 0, 0, 0, 0,
	0, 980, 986, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 996, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 987, 0, 990, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 1912, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	1802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 963, 964, 1736, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 966, 963,
	964, 997, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 965, 966, 0, 0, 997, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 965, 0, 0, 0, 0,
	0, 980, 986, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 996, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 987, 0, 990, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 1720, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	1673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 963, 964, 1289, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 966, 963,
	964, 997, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 965, 966, 0, 0, 997, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 983,
	984, 985, 993, 994, 995, 965, 0, 0, 0, 0,
	0, 980, 986, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	0, 971, 2145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 996, 0, 971, 0,
	1574, 0, 0, 1573, 0, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 987, 0, 990, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 981, 0, 2144, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 1509, 0, 0, 0, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 977,
	978, 979, 992, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 963, 964, 0, 983, 984, 985, 993,
	994, 995, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 1001, 0, 0, 1204, 0, 966, 963, 964, 997,
	983, 984, 985, 993, 994, 995, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 1000, 0, 965,
	966, 0, 0, 997, 0, 980, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 964, 0, 983, 984, 985,
	993, 994, 995, 965, 0, 0, 0, 0, 0, 980,
	986, 0, 0, 1205, 0, 0, 0, 966, 0, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 0, 0, 990, 998, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 990, 998,
	0, 0, 988, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 996, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 988, 0, 0, 0,
	0, 0, 981, 987, 0, 990, 998, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 988, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 987, 509, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 989, 0, 0, 977, 978, 979, 992,
	0, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	977, 978, 979, 992, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 0, 0, 977, 978, 979,
	992, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 963, 964, 0, 983, 984, 985, 993, 994, 995,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 966, 963, 964, 997, 983, 984,
	985, 993, 994, 995, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 965, 966, 0,
	0, 997, 0, 980, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 964, 0, 983, 984, 985, 993, 994,
	995, 965, 0, 0, 0, 0, 0, 980, 986, 0,
	0, 0, 1575, 0, 0, 966, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 980, 0, 0, 0, 0, 0,
	0, 0, 990, 998, 0, 0, 0, 971, 0, 0,
	0, 0, 1580, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 990, 998, 0, 0,
	988, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 996, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 988, 0, 0, 0, 0, 0,
	981, 987, 0, 990, 998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 996,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 988, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1724, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 989, 0, 0, 977, 978, 979, 992, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 989, 0, 0, 977, 978,
	979, 992, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 0, 977, 978, 979, 992, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 963,
	964, 0, 983, 984, 985, 993, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 966, 963, 964, 997, 983, 984, 985, 993,
	994, 995, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 1533, 0, 965, 966, 0, 0, 997,
	0, 980, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 964, 0, 983, 984, 985, 993, 994, 995, 965,
	0, 0, 0, 0, 0, 980, 986, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 0,
	990, 998, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 990, 998, 0, 0, 988, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	996, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 0, 0, 0, 0, 0, 981, 987,
	0, 990, 998, 0, 0, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 996, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 981, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 989,
	0, 0, 977, 978, 979, 992, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 0, 0,
	0, 0, 0, 989, 0, 0, 977, 978, 979, 992,
	0, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 0, 977, 978, 979, 992, 0, 976, 974,
	975, 967, 968, 969, 970, 972, 973, 963, 964, 0,
	983, 984, 985, 993, 994, 995, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	966, 963, 964, 997, 983, 984, 985, 993, 994, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 966, 0, 0, 997, 0, 980,
	0, 963, 964, 0, 983, 984, 985, 993, 994, 995,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 980, 966, 0, 0, 997, 0, 0,
	0, 963, 964, 0, 0, 0, 0, 993, 994, 995,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 971,
	0, 0, 0, 980, 966, 1542, 1543, 997, 1560, 1561,
	1562, 0, 0, 0, 0, 0, 0, 0, 990, 998,
	0, 1713, 0, 971, 0, 1542, 1543, 965, 1560, 1561,
	1562, 0, 0, 980, 996, 0, 0, 0, 0, 0,
	0, 1712, 990, 998, 0, 0, 988, 0, 0, 0,
	0, 0, 981, 971, 0, 0, 0, 1557, 996, 1542,
	1543, 0, 1560, 1561, 1562, 0, 0, 0, 0, 0,
	988, 0, 990, 998, 0, 0, 981, 1557, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 0, 990, 998, 0, 0, 981, 1548, 0, 0,
	0, 1557, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 1548, 0, 0,
	988, 0, 0, 0, 991, 0, 981, 0, 0, 0,
	0, 0, 1563, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	1558, 1548, 1563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	1558, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	977, 978, 979, 992, 982, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 1558, 0, 0, 0, 991, 0,
	0, 989, 0, 0, 977, 978, 979, 992, 1559, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1559, 0,
	0, 989, 0, 0, 977, 978, 979, 992, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 1559, 0, 0, 0, 0, 992, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1554, 1555,
	1556, 0, 0, 1553, 1551, 1552, 1544, 1545, 1546, 1547,
	1549, 1550, 0, 0, 0, 0, 0, 0, 1554, 1555,
	1556, 0, 0, 1553, 1551, 1552, 1544, 1545, 1546, 1547,
	1549, 1550, 850, 842, 867, 834, 858, 857, 0, 0,
	836, 835, 0, 0, 0, 869, 868, 0, 0, 0,
	0, 0, 1554, 1555, 1556, 0, 0, 1553, 1551, 1552,
	1544, 1545, 1546, 1547, 1549, 1550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 855,
	854, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 844, 846, 847, 848, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 864, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 870,
}
var sqlPact = [...]int{

	156, -1000, 90, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 859, 16048, 16048, 20182, -1000, -1000, -1000, -1000,
	-1000, -1000, 809, 802, 466, 4875, 20182, 20182, 19887, 1384,
	1384, 21657, -1000, -1000, 25197, -1000, 25931, 610, 625, 610,
	610, 601, 21657, 20182, 745, 13068, 873, 206, -1000, 847,
	41, 24902, 20182, 1520, 83, 18117, 405, 156, 19592, 24607,
	20182, 19297, 721, 78, 16641, 20182, -1000, 95, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1366, 324, 95, -1000, 1364, 1261, 1252, 18117, 24312,
	24017, 23722, 23427, -1000, 12170, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 905, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	412, 409, -1000, 19002, -1000, 1061, -1000, 82, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1058, -1000, 20182, -1000,
	-1000, 23132, 22837, 817, 407, 1024, -1000, -1000, 653, 505,
	1562, -1000, 107, -1000, 1514, 15753, 815, -1000, -1000, 1362,
	-1000, 1055, 1360, 1359, 1358, 1355, 1354, 1351, 499, 886,
	585, -1000, 1349, 1348, 1024, -1000, 1024, -1000, -1000, -1000,
	714, 21657, -1000, -1000, 18117, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1702, -1000, -1000, -1000, -1000,
	1732, -1000, -1000, -1000, -1000, 22542, 20182, 20182, 1271, 22247,
	-1000, 847, -1000, -1000, -1000, 1157, 1518, 1518, 1518, 1529,
	226, 217, 206, 15, 20182, -1000, 406, 15, 9024, 9024,
	-1000, -1000, 405, -1000, 453, 15152, -1000, 8067, -1000, 957,
	1431, 553, 790, 1428, -99, 900, 896, 1427, 15753, 16641,
	78, 69, -1000, -1000, -1000, 4569, 15753, 793, 14257, 95,
	-1000, -1000, -1000, 18117, 20182, 20182, 824, 21952, -1000, 1426,
	140, 1419, -1000, 139, 1417, -1000, 139, 1416, 94, -1000,
	-1000, 405, 18707, 20182, 1586, 29625, -1000, 10301, -1000, -1000,
	16048, 892, 16048, -1000, -1000, 1583, -1000, 20182, 10301, -1000,
	67, 59, 1173, 1180, 12773, 12478, 1481, 967, -1000, -1000,
	-1000, 102, 4875, 812, -1000, -1000, -1000, 18412, 20182, 1376,
	16048, 20182, 20182, 20182, 20182, 20182, 20182, -1000, 1172, -1000,
	-1000, 20182, 20182, 902, 742, -1000, 47, 27, -1000, 21657,
	-1000, 142, -1000, -1000, -1000, -1000, 404, 1137, 514, 229,
	21362, 514, 1133, -1000, 1157, -1000, 1028, 1239, 9344, 1208,
	10301, 206, -1000, -1000, 206, 206, 10301, -1000, -1000, 20182,
	15, 1582, 20182, 113, -1000, 28097, -1000, -1000, 10301, 10301,
	10301, 10301, 10301, 988, 447, -1000, 401, 398, 5820, -1000,
	-1000, 1731, -1000, -1000, -1000, 222, -1000, -1000, 10301, 95,
	-1000, -1000, -1000, -1000, 396, 1754, -1000, 540, -1000, -1000,
	-1000, 510, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1373, 394, 393, -1000, -1000, -1000, -1000, 392, 389,
	388, 385, 383, 381, 380, 379, 375, 373, 371, 369,
	368, 365, 351, 943, -1000, 543, -1000, -1000, 543, 543,
	-1000, 346, 346, 347, -1000, -1000, -1000, -1000, 346, -1000,
	-1000, -1000, 518, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	350, 113, -1000, -1000, -1000, 20182, 79, -1000, 28890, -1000,
	-20, 866, -1000, 17527, 1507, 1495, 1491, 18117, 1547, 41,
	1344, 1546, 41, 1338, 710, 20182, 20182, 699, 691, 18117,
	482, -1000, 20182, -1000, -1000, -50, -1000, -1000, 1336, 74,
	-1000, -1000, 528, 110, 1578, 110, 14556, -1000, 20182, 20182,
	-1000, 20182, -1000, -1000, 20182, -1000, 20182, 20182, -1000, 20182,
	158, 16937, 840, 1412, 769, 41, 66, -1000, 1591, -1000,
	-1000, -1000, -1000, 150, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 347, 943, 346, 346, 346, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 518, -1000, -1000, 543, 543, 543,
	-1000, -1000, 61, 28890, 687, -1000, 1333, 592, -1000, 509,
	57, 921, 1245, 965, -1000, -1000, -1000, -1000, 9, -1000,
	-1000, 9, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1751, 4875, -1000, -1000, -1000, -1000, -1000, -1000, 20182,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20182, 20182, 20182, 921, 1245, -1000, -1000, 18117, 17232, 1573,
	1406, 954, -1000, 1566, 20182, 1054, 1119, -1000, 736, 1405,
	-1000, -1000, -1000, -1000, 28890, -1000, 411, -1000, -1000, 28890,
	962, 1264, -1000, 1264, 1, -1000, 28073, -1000, 345, 55,
	528, 9024, 13959, 3653, 29625, 4875, 728, 10301, 10301, 10301,
	10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301,
	10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301, 1131,
	10301, 680, 10301, 10301, 10301, 10301, 2054, 994, 328, 1025,
	4875, -1000, -1000, 1693, 1693, 1693, 29231, 29231, 260, 447,
	-1000, 10301, -1000, 8705, 217, 27376, -7, -1000, -1000, -1000,
	6778, 541, 28890, 95, 5500, -1000, 1730, 720, 1383, 1292,
	344, 210, 207, 10301, 10301, 10620, 10620, 10301, 10939, 10301,
	10301, 6139, 10301, 10301, 10301, 10301, 10301, 10301, -1000, 343,
	-1000, -1000, -1000, -1000, 1726, -1000, -1000, 1720, -1000, 727,
	723, 1716, 528, 204, 8067, -1000, 840, 20182, 20182, 20182,
	-1000, -1000, 1118, 21067, 1110, 29625, 20182, -1000, 339, 338,
	1227, 1226, 20182, 20182, 20772, 20477, 20182, 919, 41, -1000,
	335, 41, -1000, 331, 20182, 894, -1000, 20182, 20182, 891,
	1283, 1052, -1000, 523, 15753, 791, 1332, 20182, 874, 10301,
	917, -1000, 13661, 563, 20182, 874, 104, -1000, -1000, -1000,
	474, 20182, -1000, -1000, -1000, 140, -1000, 139, 139, -1000,
	-1000, 18117, -1000, -1000, -1000, -1000, -1000, -1000, 29625, 441,
	434, -1000, 1712, 677, -1000, 676, 670, 664, -1000, 329,
	-1000, 10301, 20182, 20182, 1245, -1000, -1000, -1000, -1000, 823,
	-1000, 942, -1000, 13068, -1000, -32, -1000, -1000, -1000, 482,
	-1000, -1000, -1000, 202, 38, -19, 29625, -1000, -1000, -1000,
	-1000, -1000, 20182, 395, 20182, 41, 20182, -1000, 1748, 41,
	20182, 1404, 1437, 469, 20182, 962, -1000, 10301, 1708, -1000,
	-1000, -1000, 10301, -1000, -1000, -1000, 41, -1000, 1291, -1000,
	-56, 1286, 1048, -141, 214, 484, -1000, 13363, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 489, 885,
	885, 661, 661, 661, 661, 1710, 2971, 3204, 2740, 29291,
	29291, 29291, 2255, 314, 314, 29291, 29291, 29291, 29231, 29207,
	979, 10301, 10301, 663, 991, 328, 979, 10301, 979, 979,
	979, 979, -1000, 938, -1000, -1000, -1000, -1000, 1331, 326,
	10939, 10939, -1000, -1000, -1000, 5820, 11258, -1000, -1000, -1000,
	-1000, -1000, 322, 10301, -1000, 27695, -156, 26, -1000, -1000,
	10301, 39, -115, -1000, -1000, 747, -1000, 10301, -1000, -6,
	10301, 10301, 10301, 201, 199, -1000, 993, 320, 316, 10301,
	-1000, -1000, 28853, 25824, 197, 1329, -129, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 196, 194, 28829, -129, 179, 198,
	-1000, 10939, 10939, 10939, 5820, 315, 178, 27756, -129, 28512,
	8386, 8386, 8386, 177, 28475, 10301, -129, 25792, 3595, 3487,
	25, 24, 19, 1706, 10, 175, 488, 472, 174, 1291,
	-1000, -1000, -1000, -1000, 659, 651, 1402, -1000, 1106, -1000,
	556, -1000, 839, 10301, 11872, 303, 302, 960, -1000, 1400,
	1091, 1397, 1091, -1000, -20, 835, -1000, 10301, -1000, 10301,
	-1000, 646, -1000, -1000, 643, 523, 1325, 754, -1000, 1013,
	-1000, -1000, 788, -1000, -1000, 6458, 28890, -1000, 874, 1493,
	8, -1000, -1000, -1000, 528, 14556, 13959, 8067, 6, -1000,
	-1000, -1000, 840, -1000, 577, 1684, 173, 1140, 1022, 904,
	838, 1678, 28890, -32, -32, -1000, -1000, -1000, -1000, -1000,
	20182, -1000, 1276, -1000, 17232, 301, 20182, 299, -1000, 290,
	-1000, -1000, 288, 20182, 1182, 469, 16346, -1000, 514, 1016,
	27339, -1000, 171, 1288, 1528, -1000, 13959, 1238, 1237, 13959,
	1307, 996, 996, 996, -1000, 280, 160, 424, 484, 3943,
	10301, 17822, 1006, 119, 170, 1286, 10301, 979, 979, 10301,
	10939, 10939, -1000, 979, -1000, -1000, -1000, -1000, -1000, 1305,
	276, 10301, 29625, 29335, 29315, 2, -1000, 7748, -46, -1000,
	10301, -1000, 27315, -1000, -1000, 427, 1435, -1000, 10301, 28451,
	168, 7429, -1000, 28134, -13, -13, -1000, 1747, -1000, 14854,
	530, 1008, 26996, 3653, 29625, -1000, 10301, -1000, -1000, 1304,
	10301, -1000, 3653, 29625, 10939, 10939, 10939, 10939, 10939, 10939,
	10939, 10939, 10939, 10939, 10939, 10939, 10939, 10939, 10939, 10939,
	10939, 10939, 10939, 1176, 10939, 1686, 1686, 1686, -48, 7110,
	-1000, 1370, 1304, 10301, 10301, 29625, 164, 163, 162, -1000,
	10301, -129, 10301, 10301, 10301, -1000, -1000, -1000, 161, -1000,
	1672, -1000, -1000, -1000, -1000, 1288, 20182, 20182, 20182, 1395,
	-1000, 1175, -1000, 26959, 0, -1000, 319, 1513, 10301, -1000,
	-1000, 275, 11872, 20182, -1000, 1207, 1259, 586, 20182, -1000,
	20182, -1000, 20182, 20182, 20182, -5, -11, 20182, 20182, -1000,
	15753, 698, 272, -1000, -52, -1000, -1000, 294, 41, 874,
	-1000, -54, -1000, 470, -1000, 423, 422, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 153, -1000, -1000, 1278, -1000,
	11872, 269, 20182, 17232, 1555, 11872, 1051, 1198, 469, 16346,
	-1000, 736, -1000, -1000, -1000, 526, 10301, 10301, 1286, 13959,
	13959, 1575, 1236, 13959, -1000, -1000, -1000, -1000, 420, 442,
	419, 12170, 484, 17822, -1000, 1670, 1228, -12, -1000, -1000,
	20182, 268, -1000, 484, 1595, 979, 3259, 2245, 10301, 29625,
	29261, -18, 10301, 10301, -1000, -22, -1000, 10301, 416, 28890,
	-1000, -1000, -1000, 28890, 10301, 1735, 10301, 152, 151, 148,
	-1000, -1000, -1000, 25492, 10301, 146, -1000, 137, 135, 28890,
	1370, 28890, -1000, -1000, 590, 590, 750, 750, 750, 750,
	1686, 532, 254, 2723, 1108, 1108, 1108, 2777, 366, 366,
	1108, 1108, 1108, 1302, 1200, 267, 2328, 10301, -23, -1000,
	-1000, -1000, 28890, 28890, 133, -1000, -1000, -1000, -129, 3455,
	26935, 26616, -1000, 131, 526, -1000, -1000, -1000, 20182, -1000,
	20182, -1000, 4875, 20182, 1308, 1097, -1000, -1000, 1219, 264,
	10939, 20182, -1000, 973, 11872, 1512, 95, 4875, 1512, 26579,
	5500, -27, -28, 1095, -1000, 1089, 10301, -1000, 29625, 1091,
	1091, -1000, 637, 633, 630, 628, -1000, -1000, -60, 15458,
	1745, 1447, 20182, 1490, -1000, -1000, 263, -1000, -1000, -1000,
	984, -33, 11872, -35, 129, 41, -58, 20182, -1000, 469,
	16346, -1000, 1437, -1000, 20182, 28890, -129, -1000, 1575, -1000,
	262, 10301, 13959, -1000, -141, -1000, -63, -1000, 484, -64,
	17822, -1000, 415, -160, -1000, 467, -1000, 484, 259, 20182,
	17822, 10301, 10301, 29261, -65, -1000, 979, 979, -1000, 26555,
	-1000, 28890, -1000, 28134, -1000, -1000, -1000, 968, -1000, 26236,
	-1000, -1000, -1000, -1000, 10939, 1301, 257, 29625, 26199, -1000,
	-1000, 10301, -1000, -1000, -1000, -1000, -1000, 1050, -1000, -1000,
	20182, 1104, -1000, -1000, 10301, 2328, 255, 1276, 252, -1000,
	-1000, -1000, -1000, -1000, -1000, 1513, -6, -1000, 912, -1000,
	-1000, 28890, 1510, -1000, -1000, 20182, 20182, 240, 237, -1000,
	236, 95, -76, -1000, 464, 695, -83, 20182, -1000, -1000,
	5181, 20182, 973, -85, -1000, 1276, -1000, 973, 235, 16346,
	-1000, 1182, -62, -1000, 1554, -1000, 20182, 28890, -1000, 484,
	-1000, 1658, 17822, 158, -1000, -1000, 1228, -1000, 4260, 17822,
	20182, -87, -1000, 979, 979, -1000, -1000, 128, 1008, 1526,
	-1000, 29369, 10939, 29625, -89, -1000, 26175, -1000, -1000, 1394,
	25856, 1162, 20182, -1000, 20182, 1512, 123, 20182, 570, 4875,
	-1000, -1000, 10301, 10301, 10301, 1745, -1000, -1000, 1736, 822,
	-1000, 528, -1000, 234, 1276, 973, -1000, 1276, 11872, -1000,
	1198, 20182, 231, -94, 17822, -1000, -1000, 414, -1000, -1000,
	1648, -1000, -96, -1000, -1000, 901, 10301, 29369, -100, -1000,
	-1000, 1386, -1000, 1020, 975, 117, -102, -1000, -1000, 229,
	-1000, 10301, -1000, -128, -130, -13, -1000, -1000, 14556, -1000,
	20182, -1000, 1276, -1000, -132, -1000, -1000, -1000, -1000, -1000,
	484, 367, -1000, 112, 9982, 9982, -129, -1000, 20182, -1000,
	1039, 1034, 776, -1000, -1000, -1000, -1000, -1000, 1162, 28890,
	-1000, -1000, 111, -119, -136, -1000, 973, 17822, -1000, -1000,
	-1000, -1000, 11566, 1067, 848, 27719, -1000, -1000, -1000, 1456,
	-1000, 579, 1026, 1026, 1020, 1735, -1000, 1035, 1276, -1000,
	1601, -1000, -1000, -1000, -1000, -1000, -1000, 1625, -1000, -1000,
	1184, -1000, -1000, -1000, -1000, -1000, -1000, 9663, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 2026, 2025, 1561, 1673, 2024, 2021, 1667, 2019, 2017,
	2016, 2010, 2009, 2008, 132, 1653, 1600, 19, 1594, 2007,
	115, 2006, 2004, 2001, 122, 1999, 1996, 1995, 1993, 68,
	1992, 1988, 110, 1591, 1588, 1582, 1986, 1984, 119, 1982,
	1981, 17, 1980, 92, 1975, 37, 171, 1978, 149, 1974,
	1973, 1967, 38, 130, 90, 1966, 118, 1963, 1961, 58,
	31, 25, 16, 1960, 117, 136, 1285, 51, 1959, 1957,
	162, 1955, 22, 28, 93, 166, 164, 140, 141, 1950,
	1940, 1936, 1933, 62, 1931, 2, 1929, 1928, 13, 61,
	12, 1927, 29, 23, 1925, 1923, 147, 1922, 91, 127,
	1547, 159, 144, 354, 1919, 101, 14, 95, 1918, 1916,
	151, 54, 1913, 39, 102, 154, 1910, 65, 170, 84,
	30, 78, 134, 1904, 1890, 1887, 97, 1886, 128, 94,
	1885, 1882, 105, 1879, 152, 155, 1878, 1877, 113, 1874,
	143, 1869, 1860, 158, 193, 1857, 1854, 176, 1842, 8,
	60, 89, 9, 1564, 1562, 135, 70, 27, 18, 1837,
	1633, 967, 992, 40, 103, 67, 75, 104, 50, 71,
	160, 26, 1836, 1832, 138, 1830, 1829, 1828, 1824, 1823,
	99, 1822, 1821, 100, 156, 24, 4, 42, 112, 41,
	74, 106, 218, 167, 139, 1820, 116, 137, 57, 586,
	1819, 1818, 1891, 148, 1817, 1815, 1814, 1845, 1459, 1237,
	409, 1812, 1810, 1222, 1219, 1809, 1807, 83, 1806, 150,
	142, 1805, 163, 223, 124, 1804, 56, 32, 114, 1801,
	125, 77, 0, 485, 161, 1799, 145, 96, 1797, 1796,
	1790, 1788, 33, 3, 11, 6, 7, 5, 45, 21,
	1787, 1786, 153, 43, 87, 1784, 168, 1780, 1779, 1778,
	53, 1776, 20, 1775, 15, 1772, 1771, 10, 1, 1770,
	1769, 157, 1768, 126, 1767, 1610, 1765, 165, 1764, 1761,
	1615, 59, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 51, 51, 56, 56, 56, 58, 58, 55,
	55, 50, 50, 5, 5, 230, 230, 231, 231, 40,
	40, 44, 44, 41, 42, 42, 43, 43, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 102, 102, 101, 101,
	104, 104, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 198, 198, 197,
	19, 172, 172, 20, 20, 20, 20, 21, 127, 127,
	22, 22, 22, 22, 23, 28, 271, 271, 271, 275,
	275, 276, 276, 277, 277, 277, 277, 277, 277, 277,
	273, 273, 27, 39, 31, 31, 31, 31, 31, 31,
	148, 144, 144, 146, 146, 146, 146, 65, 143, 143,
	143, 143, 145, 145, 145, 145, 223, 222, 222, 228,
	228, 228, 80, 80, 80, 80, 80, 81, 81, 81,
	221, 221, 221, 221, 229, 229, 229, 229, 229, 229,
	82, 82, 82, 227, 227, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 18, 272, 272, 274, 274, 33, 33,
	34, 34, 35, 35, 35, 35, 10, 10, 11, 11,
	83, 83, 84, 84, 151, 151, 151, 151, 85, 85,
	57, 57, 57, 150, 240, 240, 241, 241, 241, 241,
	241, 241, 242, 242, 242, 242, 242, 242, 242, 238,
	238, 239, 236, 236, 237, 237, 237, 237, 278, 278,
	149, 149, 88, 88, 245, 245, 245, 245, 243, 243,
	243, 243, 243, 246, 244, 247, 247, 247, 247, 247,
	184, 184, 184, 37, 12, 63, 63, 13, 9, 9,
	131, 131, 92, 92, 189, 189, 189, 73, 73, 52,
	52, 52, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 132, 132, 133, 133, 25, 30, 36,
	36, 36, 36, 36, 280, 280, 69, 69, 69, 69,
	70, 70, 147, 147, 147, 147, 147, 64, 8, 8,
	59, 59, 60, 60, 61, 61, 62, 62, 281, 281,
	24, 24, 24, 76, 76, 140, 140, 140, 142, 142,
	141, 141, 141, 117, 117, 117, 38, 97, 97, 106,
	106, 107, 107, 195, 108, 108, 29, 29, 47, 47,
	45, 45, 45, 45, 45, 45, 46, 46, 48, 48,
	48, 48, 48, 48, 48, 253, 253, 253, 256, 256,
	252, 254, 254, 255, 255, 279, 279, 118, 118, 118,
	87, 86, 86, 90, 90, 89, 91, 91, 188, 115,
	115, 115, 115, 134, 134, 135, 135, 136, 136, 137,
	137, 137, 138, 138, 139, 139, 114, 114, 168, 168,
	49, 49, 96, 96, 98, 98, 158, 158, 158, 159,
	159, 157, 157, 157, 157, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 269, 269, 269, 270, 270, 187,
	187, 191, 191, 191, 191, 191, 191, 185, 185, 185,
	185, 186, 186, 196, 196, 121, 121, 121, 121, 119,
	119, 120, 120, 192, 192, 192, 192, 116, 116, 193,
	193, 193, 152, 152, 199, 199, 199, 217, 217, 95,
	95, 95, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 201,
	201, 201, 201, 203, 203, 203, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	216, 216, 216, 216, 216, 204, 204, 211, 211, 212,
	212, 213, 214, 205, 205, 206, 206, 207, 208, 215,
	215, 215, 215, 219, 219, 209, 209, 209, 209, 209,
	210, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 129, 129, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 162,
	162, 162, 162, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 248, 248, 248, 248, 248, 248,
	248, 250, 250, 251, 251, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 257, 257, 258, 258, 260, 260, 261, 261,
	262, 263, 263, 263, 264, 265, 265, 259, 259, 266,
	266, 266, 267, 267, 268, 268, 268, 268, 268, 174,
	174, 174, 175, 175, 176, 182, 182, 182, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 71, 71, 71, 71, 71, 103,
	103, 171, 171, 169, 169, 169, 173, 173, 122, 122,
	218, 218, 218, 218, 218, 218, 218, 123, 123, 123,
	130, 124, 124, 125, 125, 125, 125, 125, 125, 165,
	166, 126, 126, 126, 167, 167, 177, 181, 181, 180,
	179, 179, 178, 178, 155, 155, 156, 156, 154, 153,
	111, 111, 110, 110, 109, 109, 282, 282, 183, 183,
	112, 112, 113, 105, 105, 194, 194, 194, 194, 99,
	99, 78, 78, 100, 100, 74, 74, 77, 77, 75,
	75, 75, 75, 93, 93, 94, 94, 72, 72, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	220, 220, 220, 170, 66, 66, 66, 67, 67, 68,
	68, 225, 225, 225, 226, 226, 226, 226, 224, 224,
	224, 224, 224, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 3, 6, 3, 4, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 3, 4, 4,
	4, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	5, 5, 6, 2, 2, 0, 2, 0, 6, 6,
	5, 5, 4, 12, 4, 12, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 6, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 2,
	2, 1, 1, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 7, 4, 6, 3, 1,
	5, 6, 9, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, -39, 23, 34, 224, 66, -8, -9, -10, -11,
	-12, -13, -255, 94, 103, 125, 206, 101, 87, 119,
	227, 234, -45, -47, 243, -148, 246, 35, 255, 60,
	97, 229, 222, 223, 280, 289, 68, -253, -48, -46,
	330, 305, 311, 238, -49, 264, 297, 333, 264, 134,
	80, 300, -271, -100, 264, 80, -75, -66, 323, 4,
	-232, -234, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 212,
	213, 215, 216, 217, 218, 219, 222, 220, 221, 223,
	224, 225, 227, 229, 230, 232, 244, 245, 256, 234,
	235, 236, 237, 240, 241, 243, 246, 248, 251, 254,
	255, 257, 260, 258, 253, 263, 265, 266, 267, 268,
	269, 276, 280, 281, 282, 283, 286, 287, 288, 289,
	291, 294, 295, 296, 301, 306, 307, 308, 309, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 50, 51,
	52, 55, 82, 84, 85, 100, 104, 105, 111, 121,
	123, 129, 130, 139, 141, 142, 143, 145, 156, 170,
	180, 182, 193, 197, 203, 205, 211, 231, 239, 249,
	250, 259, 261, 271, 272, 273, 277, 278, 293, 297,
	298, -271, -74, -66, 80, 89, 138, 288, 287, 80,
	134, 264, 300, -17, 330, -29, -7, -15, -4, -24,
	-38, -14, -32, -18, -33, -34, -35, -16, 23, -224,
	4, -232, -234, -233, -235, 57, 69, 118, 137, 131,
	147, 149, 157, 159, 172, 194, 196, 228, 247, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 48,
	49, 53, 56, 58, 64, 68, 72, 73, 74, 75,
	76, 77, 86, 88, 90, 91, 92, 95, 97, 99,
	106, 107, 108, 114, 116, 117, 119, 122, 124, 132,
	134, 136, 144, 146, 152, 155, 160, 162, 163, 177,
	178, 179, 185, 187, 188, 190, 191, 202, 207, 214,
	226, 238, 242, 252, 262, 264, 270, 274, 275, 279,
	284, 285, 290, 292, 299, 300, 302, 303, 304, 305,
	-66, -66, -66, 206, 22, -275, 22, -276, -277, 68,
	94, 119, 238, 138, 89, 287, -275, -70, 234, -66,
	-144, 161, 241, 54, 231, 276, -145, -143, -223, 271,
	171, -101, -66, 4, 22, 34, 54, 242, 80, 59,
	81, 120, 134, 135, 64, 65, 151, 265, 271, 276,
	68, 291, 267, 102, -280, 276, 276, -280, -280, -69,
	276, 274, -70, -223, -279, 264, -228, -221, -184, 9,
	279, 106, 187, -227, 8, 322, -220, -226, 5, 7,
	321, 4, -232, -234, -233, 264, 290, 300, -131, 80,
	285, -46, -48, -47, -89, -90, 284, 144, 99, 191,
	-45, -47, -253, -256, 212, -252, -66, -256, -86, -87,
	22, 91, 334, -192, -74, 188, -113, 330, -3, -192,
	129, -74, -77, 129, -74, -66, -192, 129, 274, 334,
	-100, -93, -66, -154, -153, 332, 117, 117, 330, -110,
	-111, -153, -154, 117, 146, 146, -193, -192, -66, 129,
	-78, 129, -77, -102, 129, -101, -102, 129, -198, -197,
	-226, 297, 264, 134, -172, 330, -127, 330, -66, 22,
	187, 334, 187, -66, -144, 52, -144, 244, 330, -146,
	-64, -65, 148, 208, 274, 315, 117, 309, -82, 5,
	86, -104, 332, 54, -230, -227, 9, 244, 117, -272,
	187, 117, 117, 117, 117, 117, 117, 309, 148, 208,
	256, 264, 300, 117, 117, -147, -64, -65, -147, 274,
	-70, -116, -192, 8, 7, 7, -101, 129, -66, -101,
	134, -66, 129, -89, -90, -115, -134, -135, 160, 108,
	185, -118, 22, 91, -118, -118, 44, 331, 331, 334,
	-256, -94, 330, -105, -194, -160, 323, -162, 321, 322,
	316, 177, 310, -174, -164, -177, 100, 231, 330, -74,
	-163, 335, 9, -250, -47, 29, -175, -176, 48, -66,
	7, 8, 5, 6, -72, -201, -170, -210, 279, 106,
	179, -248, -249, 4, -232, -225, -202, -212, -206, -209,
	145, 57, 73, 76, 74, 77, 242, 290, 49, 28,
	104, 105, 197, 203, 261, 277, 278, 129, 180, 130,
	55, 121, 156, 93, 37, 39, 41, 42, 50, 51,
	82, 84, 85, 111, 139, 141, 142, 143, 182, 211,
	249, 259, 272, 273, 298, -233, -213, -214, -207, -208,
	-215, -105, -113, 323, -74, 330, -112, -183, -160, 86,
	-54, 220, -53, 21, 23, 94, 295, 100, 253, 268,
	235, 253, 268, 235, 220, 100, 335, 220, 220, 100,
	-230, -75, 334, -224, 323, -231, -230, 257, 331, -99,
	-74, -111, -193, -76, -74, -76, 243, -66, 30, 100,
	-56, 334, 47, 225, 100, -56, 334, 100, -56, 100,
	331, 334, -192, 129, -77, 30, -171, -199, -200, -202,
	-211, -205, -209, -210, 40, 46, 45, 269, 170, 239,
	250, 293, 38, 186, 140, 139, 141, 142, 143, 249,
	37, 211, 111, 93, 85, 84, 182, 42, 41, -213,
	-214, -207, -208, 82, 272, 273, 145, 39, 51, 50,
	298, 259, -103, -160, -271, -277, -271, 30, -143, -223,
	-103, 334, 334, 158, -81, 164, 176, 126, -222, 86,
	-228, -222, 86, 71, -229, 5, 4, -170, -184, 86,
	161, -210, 332, -224, 245, -101, 22, -223, -274, 114,
	-271, -223, -223, -223, -223, -223, -66, 158, -223, -223,
	264, 134, 264, 334, 334, -70, -56, 334, 330, -88,
	177, -254, 305, -88, 330, -67, 129, -66, -254, 177,
	-115, -135, -134, -136, -160, 22, -139, 110, 173, -160,
	-162, -46, -46, -46, -91, -188, -160, -252, 30, -93,
	-96, 334, 117, 10, 11, 56, 33, 321, 322, 323,
	324, 112, 325, 326, 319, 320, 318, 313, 314, 315,
	62, 165, 233, 13, 14, 15, 26, 190, 159, 310,
	131, 247, 316, 16, 17, 18, 147, 36, 132, -71,
	30, 4, -79, -160, -160, -160, -160, -160, 196, -109,
	-155, 328, -47, 330, -47, -160, -103, 7, -47, -169,
	328, -178, -160, -110, 330, 5, 330, 5, -257, 306,
	114, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 205, -219,
	301, -219, -219, -203, 330, -203, -204, 330, -203, 307,
	311, 330, -96, -74, 334, 331, 334, 274, -132, 64,
	58, -150, 129, 58, -236, -66, 64, -237, 53, 285,
	207, 116, -132, 64, -132, 64, 64, -192, 33, -29,
	117, 33, -29, 117, 274, -77, -66, 274, 274, -192,
	-196, 312, -66, -196, 334, 117, 331, 334, -152, 303,
	-140, -29, 330, 86, 30, -140, -106, -107, -195, -108,
	-74, 330, -66, -66, -77, -78, -101, -102, -102, -17,
	-197, 100, -20, -29, -24, -38, -14, 331, 334, -95,
	29, -128, 330, 308, 168, 83, 127, 167, -129, 237,
	331, 334, 274, 117, 276, 331, -65, -64, -80, 210,
	251, 221, 240, 334, -224, -273, -66, -74, -77, -74,
	-65, -64, -192, -83, -93, -84, -66, -151, -150, -238,
	-239, -236, 134, 285, 107, 30, 100, -63, 201, 30,
	187, 177, -59, 266, 100, -137, -220, 330, 322, -138,
	231, 232, 334, -52, 31, 90, 330, 331, -152, -194,
	-98, -190, 328, -192, -74, -47, -191, 330, -217, -199,
	-216, 216, 217, 215, 219, 218, -199, -224, 271, -160,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
	-160, 159, 131, 247, 36, 132, -160, 274, -160, -160,
	-160, -160, 169, 177, 179, 279, 106, 286, 91, 183,
	-282, 262, 32, -167, -47, 330, -182, 27, 252, 22,
	-224, -174, 231, 330, -155, -160, -156, -103, 331, 331,
	334, -103, -173, 329, -169, -181, -180, 302, 331, -103,
	299, 22, 91, 323, 7, -128, -258, 109, 122, 330,
	331, 331, -160, -160, -122, -218, -103, 4, 308, 168,
	83, 127, 167, 237, -122, -123, -160, -103, -124, -161,
	-162, 321, 322, 316, 330, 231, -125, -160, -103, -160,
	43, 155, 275, -126, -160, 117, -103, -160, -160, -160,
	-103, -103, -103, 330, 7, 7, 271, 271, 7, -152,
	331, -183, -53, -74, -66, -66, 177, -150, 129, -58,
	177, -199, -66, 330, 330, 150, 150, -66, -66, 129,
	-66, 129, -66, -66, -54, 220, -29, 330, -29, 330,
	-66, 220, -66, -74, 220, -40, 128, 183, -43, 305,
	-230, 257, 117, -74, -117, 226, -160, -117, -142, 187,
	-99, 297, -66, -117, -97, 334, 117, 315, -99, -56,
	-56, -56, -192, -199, 328, 328, 7, 274, 274, 274,
	274, 330, -160, -273, -273, -64, 283, 61, 210, -228,
	334, -196, 331, 331, 334, -67, 134, -67, -29, -101,
	5, -29, -74, 100, -60, 96, -281, 315, -66, -138,
	-160, -188, -20, -114, 122, -196, 334, 69, -121, 149,
	172, 118, 157, 228, 137, 7, 103, -32, -157, 335,
	330, -187, 311, -47, -191, -190, 309, -160, -160, 274,
	-282, 262, -167, -160, 169, 179, 279, 106, 286, 91,
	183, 117, 330, -161, -161, -103, -164, 330, -103, 329,
	338, 331, -160, 329, 329, 334, -179, -180, 95, -160,
	-90, 334, -89, -160, -103, -103, 331, 331, -263, 195,
	330, 330, -160, 30, 334, 331, 117, 331, 331, -130,
	202, 331, 10, 11, 321, 322, 323, 324, 112, 325,
	326, 319, 320, 318, 313, 314, 315, 62, 165, 233,
	13, 14, 15, 147, 132, -161, -161, -161, -103, 330,
	331, -165, -166, 117, 114, 30, -126, -126, -126, 331,
	117, -103, 334, 334, 334, 331, 331, 331, 7, 331,
	334, 331, 309, 309, 331, -114, 274, 274, 100, 177,
	294, -240, -237, -160, -92, -189, -66, -251, 330, -248,
	-249, -72, 330, 330, -51, 94, 243, -133, 100, -56,
	100, -56, 274, -132, 64, -103, -103, 274, 274, -43,
	117, 263, 189, 257, -105, 178, -117, 63, 331, -152,
	-107, -98, -183, 331, 329, 7, 7, 331, 168, 127,
	167, -129, 167, -129, -129, 7, -66, -85, 133, -151,
	330, -67, 330, 330, -88, 330, -66, -61, 154, -281,
	-227, -254, 188, 331, 331, -168, 124, 44, -190, 149,
	149, -190, -121, 149, -119, 194, -119, -119, -269, 330,
	-17, 330, 329, -187, -224, 328, 336, -103, -186, -185,
	30, -66, 192, 331, -160, -160, -161, -161, 117, 330,
	-160, -171, 26, 26, 331, -103, 331, 334, -156, -160,
	331, -169, 97, -160, 270, 331, 299, -90, -90, -90,
	5, -264, -66, 330, 303, -89, 331, -217, -199, -160,
	-165, -160, -217, -199, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, 91, 177, 183, -161, 334, -103, 331,
	-166, -165, -160, -160, -199, 331, 331, 331, -103, -160,
	-160, -160, 331, 7, -168, -66, -66, -150, 100, -241,
	64, -242, 56, 107, 68, 177, 179, 285, 207, 53,
	86, 214, 331, 331, 334, -73, -110, 56, -73, -160,
	330, -92, -93, 177, 86, 177, 86, 79, 281, -66,
	-66, -74, -66, -66, 331, 331, -66, -74, -231, 271,
	330, -141, 330, 187, -29, -117, 315, 329, 329, 331,
	132, -92, 330, -93, -83, 30, -92, 187, -62, 153,
	-281, -227, -59, -260, 304, -160, -103, -190, -190, -120,
	292, 187, 149, -190, 329, 331, -270, 7, 329, -198,
	-187, -186, 7, -159, -158, 115, 175, 331, -66, 330,
	-187, 26, 26, -160, -171, 331, -160, -160, 331, -160,
	329, -160, 5, -160, 331, 331, 331, -265, -66, -160,
	331, 331, 331, -166, 117, 91, 183, 330, -160, 331,
	331, 334, 331, 331, 331, -260, -150, -66, -224, -66,
	107, 129, 179, 150, 330, -161, -74, -149, -278, 67,
	260, -189, -52, -224, -52, 331, -103, 331, 331, 179,
	179, -160, -199, -56, -56, 274, 274, 274, 274, -163,
	-72, -66, -42, -41, 5, 92, -93, 64, -113, -47,
	330, 198, 331, -92, 331, 331, -29, 331, -74, -281,
	-227, -60, -261, -262, -66, -120, 330, -160, -190, -157,
	331, 334, -187, 331, -186, 329, 334, 337, 315, -187,
	330, -93, -185, -160, -160, 331, 331, -90, -259, 200,
	331, -161, 117, 330, -171, 331, -160, -242, -67, 177,
	-160, -68, 330, -85, 330, -73, -90, 214, -55, 56,
	-66, -66, 330, 330, 330, 334, 331, -44, 315, 287,
	178, 331, -66, -66, -149, 331, -85, -149, 330, -227,
	-61, 334, 30, -93, -187, 7, -186, -17, -158, -224,
	328, -186, -93, 331, 331, -90, 44, -161, -171, 331,
	331, 100, 331, -245, 166, -66, -93, -52, 331, -74,
	-50, 292, -224, -103, -103, -103, -41, 5, 243, -152,
	330, -85, -149, -85, -92, -62, -262, -264, 331, -185,
	329, 7, 331, -266, 209, 232, -103, 331, 107, -243,
	-246, -244, 187, 118, 199, 248, 331, 331, -88, -160,
	331, 331, -90, -106, -93, -85, 331, -187, 329, 331,
	-267, -268, 36, 282, 71, -160, -267, -66, -244, 187,
	-246, 187, 287, 89, -245, 331, -152, 331, -149, -186,
	-268, 204, 113, 231, 204, 113, -247, 174, 225, 47,
	243, -247, -243, -57, 47, 225, -85, 26, 20, 179,
	86, -268,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 434, 0, 0, 0, 0, 0,
	0, 0, 406, -2, 0, 159, 0, 355, 0, 355,
	355, 359, 0, 0, 436, 0, 321, 433, -2, 444,
	0, 0, 0, 442, 420, 0, 0, -2, 0, 0,
	0, 0, 0, 136, 0, 974, 903, 909, 910, 934,
	935, 936, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 0, 0, 905, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 0, 233,
	948, 949, 950, 951, 952, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	122, 129, 130, 1027, 132, 0, 139, 140, 141, 143,
	144, 145, 146, 147, 148, 149, 0, 348, 1051, 361,
	154, 1004, 1056, 962, 1129, 1073, 162, 172, 0, 1135,
	-2, 176, 98, 205, 206, 0, 0, 211, 212, 0,
	214, 235, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 229, 0, 0, 366, 354, 366, 351, 352, 353,
	356, 0, 347, 152, 0, 435, 153, 179, 180, 181,
	190, 191, 192, 193, 310, 0, 312, 203, 204, 930,
	0, 944, 945, 946, 947, 0, 0, 0, 0, 0,
	320, -2, 416, 417, -2, 0, 439, 439, 439, 0,
	0, 417, 0, 425, 1031, 428, 916, 426, 0, 0,
	441, 440, 0, 421, 523, 0, 470, 0, 2, 0,
	1113, 523, 0, 1113, 908, 0, 0, 1113, 0, 0,
	137, 138, 913, 911, 912, 0, 0, 0, 0, 906,
	882, 880, 881, 0, 0, 0, 0, 529, 88, 1113,
	56, 1113, 901, 56, 1113, 96, 56, 1113, 0, 117,
	119, 1141, 0, 0, 0, 0, 127, 0, 131, 133,
	0, 0, 0, 360, 155, 1102, 157, 0, 0, 161,
	163, 164, 0, 0, 0, 0, 0, 0, 175, 200,
	201, 99, 0, 0, 207, 65, 66, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 223, 0, 225,
	226, 0, 0, 0, 0, 349, 362, 363, 350, 0,
	358, 56, 527, 311, 932, 931, 293, 1113, 432, 293,
	938, 432, 1113, -2, 0, 412, 451, 452, 0, 0,
	0, 0, 437, 438, 0, 0, 0, 408, 409, 0,
	427, 0, 0, 473, 893, 897, 898, 627, 0, 0,
	0, 0, 0, 0, 719, 721, 1107, 1129, 0, 723,
	724, 0, 726, 728, 729, 0, 732, 733, 873, 905,
	919, 920, 921, 922, 0, 0, 925, 0, 927, 928,
	929, 773, 742, -2, -2, 917, 559, 560, 561, 562,
	-2, 1143, 746, 748, 750, 751, 752, 753, 0, 1091,
	1108, 1109, 1125, 1126, 1134, 1138, 1139, 1113, 1122, 1114,
	1103, 1111, 1120, 979, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 943, 589, 590, 595, 596,
	598, 473, 471, 524, 525, 0, 0, 890, 888, 889,
	33, 344, 35, 0, 344, 344, 0, 0, 0, 0,
	242, 0, 0, 244, 0, 0, 0, 0, 0, 0,
	514, 904, 0, 878, 879, 514, 67, 78, 0, 0,
	899, 883, 533, 0, 383, 0, 0, 530, 0, 0,
	90, 0, 54, 55, 0, 92, 0, 0, 94, 0,
	434, 0, 0, 1113, 0, 434, 0, 831, 541, 542,
	543, 544, 545, 624, 548, 549, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 566, 567, 568, 569, 570,
	571, 572, 586, 0, 565, 565, 565, 578, 579, 587,
	588, 593, 594, 605, 606, 608, 610, 604, 604, 604,
	601, 602, 0, 829, 0, 142, 0, 0, 158, 0,
	0, 0, 0, 0, 167, 187, 188, 189, 168, 170,
	177, 169, 171, 173, 174, 194, 195, 196, 197, 198,
	199, 0, 0, 100, 210, 208, 209, 213, 215, 0,
	234, 216, 217, 218, 219, 220, 221, 224, 227, 228,
	0, 0, 0, 0, 0, 357, 313, 0, 251, 0,
	0, 316, 431, 0, 0, 0, 1113, 937, 371, 0,
	415, 449, 450, 453, 457, 458, 461, 464, 465, 455,
	627, 422, 423, 424, 445, 446, 331, 429, 0, 0,
	533, 0, 0, 0, 0, 0, 0, 808, 809, 810,
	811, 812, 813, 816, 817, 814, 815, 818, 819, 820,
	0, 0, 0, 821, 822, 823, 0, 0, 825, 0,
	827, 0, 0, 0, 0, 0, 0, 887, 0, 0,
	0, 896, 824, 632, 633, 634, 656, 657, 0, 720,
	884, 877, 722, 0, -2, 829, 0, 725, 730, 731,
	0, 0, 872, -2, 0, 924, 0, 624, 775, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 592,
	603, 600, 599, 576, 0, 575, 573, 0, 577, 0,
	0, 0, 533, 0, 0, 892, 0, 0, 0, 0,
	343, 37, 1113, 0, 58, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 240,
	0, 0, 241, 0, 0, 0, 907, 0, 0, 0,
	70, 0, 914, 77, 0, 0, 0, 0, 395, 0,
	395, 385, 0, 0, 0, 395, 398, 399, 401, 402,
	0, 0, 531, 89, 902, 56, 97, 56, 56, 103,
	118, 0, 120, 123, 124, 125, 126, 121, 0, 534,
	536, 546, 0, 611, 612, 613, 614, 615, 616, 625,
	128, 0, 0, 0, 0, 160, 165, 166, 367, 0,
	184, 0, 186, 0, 101, 236, 150, 230, 231, 514,
	364, 365, 528, 0, 0, 250, 913, 252, 254, 255,
	256, 257, 938, 0, 938, 0, 0, 314, 0, 0,
	0, 0, 373, 379, 0, 0, 459, 0, 0, 456,
	462, 463, 0, 448, 329, 330, 434, 915, 467, 894,
	514, 474, 0, 484, 523, 500, 489, 0, 628, 537,
	538, 580, 581, 582, 583, 584, 629, 630, 0, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, -2,
	-2, -2, 648, 649, 650, -2, -2, -2, 654, 655,
	-2, 826, 828, 0, 887, 0, -2, 0, -2, -2,
	-2, -2, 668, 0, 670, 673, 675, 677, 0, 0,
	0, 0, 886, 687, 864, 0, 0, 805, 806, 807,
	895, 672, 0, 0, 885, 876, 0, 0, -2, 727,
	0, 0, 0, 835, 836, 871, 867, 0, 734, 444,
	0, 0, 0, 0, 0, 933, 783, 0, 0, 0,
	747, 749, 0, 0, 0, 0, 839, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 829, 849, 0, 0,
	690, 0, 0, 0, 0, 1129, 0, 829, 857, 0,
	0, 0, 0, 0, 829, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	526, 891, 36, 333, 0, 0, 0, 39, 1113, 47,
	0, 265, 0, 0, 0, 0, 0, 346, 48, 1113,
	56, 1113, 56, 49, 34, 344, 238, 0, 239, 0,
	337, 0, 332, 335, 0, 77, 0, 0, 64, 0,
	68, 79, 0, 900, 87, 0, 532, 380, 395, 0,
	0, 387, 384, 382, 533, 0, 0, 0, 0, 91,
	93, 95, 0, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 134, 135, 156, 182, 183, 185, 178,
	0, 232, 259, 292, 0, 0, 938, 0, 248, 293,
	315, 317, 0, 0, 375, 379, 0, 378, 432, 0,
	0, 447, 0, 469, 0, 472, 0, 0, 0, 0,
	0, 520, 520, 520, 518, 494, 434, 0, 500, 0,
	0, 512, 0, -2, 489, 0, 0, -2, -2, 0,
	0, 0, 688, -2, 669, 671, 674, 676, 678, 0,
	0, 0, 0, 0, 0, 0, 689, 0, 0, 874,
	877, -2, 830, 833, 834, 0, 0, 868, 0, 0,
	0, 0, 443, 444, 444, 444, 740, 0, 741, 0,
	0, 0, 0, 0, 0, 756, 0, 757, 758, 0,
	0, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 693, 694, 695, 0, 0,
	760, 855, 856, 0, 0, 0, 0, 0, 0, 765,
	0, 862, 0, 0, 0, 769, 770, 771, 0, 563,
	0, 585, 607, 609, 597, 469, 0, 0, 0, 0,
	57, 263, 282, 0, 0, 322, 328, 328, 0, 743,
	744, 0, 0, 0, 41, 0, 0, 0, 0, 45,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 80, 393, 394, 381, 392, 0, 395,
	400, 397, 403, 0, 539, 0, 0, 547, 617, 618,
	619, 620, 621, 622, 623, 0, 151, 246, 0, 253,
	0, 0, 0, 251, 0, 0, 0, 377, 379, 0,
	370, 371, 454, 460, 430, 777, 0, 0, 475, 0,
	0, 0, 0, 0, 515, 519, 516, 517, 0, 0,
	0, 0, 500, 512, 481, 0, 0, 0, 488, 511,
	0, 510, 499, -2, 631, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 865, 0, 800, 0, 0, 876,
	-2, 837, 866, 870, 0, 735, 0, 0, 0, 0,
	926, 781, 782, 786, 0, 0, 745, 0, 0, 838,
	848, 850, 691, 692, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, -2, -2, -2, 709, 710, 711,
	-2, -2, -2, 0, 0, 0, 851, 0, 0, 803,
	853, 854, 859, 860, 0, 762, 763, 764, 861, 0,
	0, 0, 591, 0, 777, 339, 341, 38, 0, 264,
	0, 267, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 284, 291, 0, 331, 918, 0, 331, 0,
	0, 0, 0, 0, 53, 0, 0, 345, 0, 56,
	56, 334, 0, 0, 0, 0, 338, 336, 69, 0,
	0, 0, 0, 0, 386, 396, 0, 540, 535, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 379,
	0, 372, 373, 418, 0, 468, 466, 502, 0, 504,
	0, 0, 0, 506, 484, 495, 0, 497, 500, 0,
	512, 486, 0, 0, 479, 0, 478, 500, 508, 0,
	0, 0, 0, -2, 0, 681, -2, -2, 799, 830,
	875, 869, 923, 444, 736, 738, 739, 788, 785, 0,
	772, 754, 755, 847, 0, 0, 0, 0, 830, 802,
	761, 0, 767, 768, 564, 419, 40, 0, 268, 269,
	938, 0, 272, 275, 0, 277, 940, 259, 0, 288,
	289, 323, 324, 327, 325, 328, 444, 286, 0, 42,
	43, 52, 60, 44, 50, 0, 0, 0, 0, 513,
	0, 0, 0, 74, 72, 0, 0, 0, 404, 405,
	0, 0, 291, 0, 281, 259, 249, 291, 0, 0,
	374, 375, 776, 778, 0, 503, 0, 522, 505, 500,
	496, 0, 512, 434, 493, 482, 0, 483, 0, 512,
	0, 0, 490, -2, -2, 682, 801, 0, 444, 0,
	774, -2, 0, 0, 0, 804, 0, 266, 270, 0,
	0, 297, 0, 285, 0, 331, 0, 0, 62, 0,
	340, 342, 0, 0, 0, 0, 76, 73, 0, 0,
	389, 533, 391, 0, 259, 291, 247, 259, 0, 376,
	377, 0, 0, 0, 0, 498, 491, 0, 480, 476,
	0, 487, 0, 509, 737, 791, 0, -2, 0, 717,
	766, 0, 276, 302, 0, 0, 0, 326, 735, 293,
	46, 0, 59, 0, 0, 444, 75, 71, 0, 390,
	0, 279, 259, 318, 0, 369, 779, 780, 521, 485,
	500, 0, 507, 0, 0, 0, 787, 718, 0, 278,
	298, 299, 0, 294, 295, 296, 939, 290, 297, 61,
	243, 245, 0, 533, 0, 280, 291, 512, 477, 784,
	789, 792, -2, 1076, 971, 0, 790, 271, 300, 0,
	301, 0, 0, 0, 302, 0, 388, 262, 259, 492,
	0, 794, 795, 796, 797, 798, 303, 0, 306, 307,
	0, 304, 287, 258, 260, 261, 319, 0, 305, 308,
	309, 793,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 319, 3, 325, 320, 3,
	330, 331, 323, 321, 334, 322, 332, 324, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 338, 333,
	313, 315, 314, 3, 335, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 328, 3, 329, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 336, 318, 337, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 317, 57656, 327, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:784
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:790
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return unimplemented(sqllex, "set local")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{ /* SKIP DOC */
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			return unimplemented(sqllex, "set from current")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return unimplemented(sqllex, "set names")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = Low
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = Normal
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = High
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1588
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1696
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1700
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1704
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1747
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1761
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1765
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1769
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = DropDefault
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
			return unimplemented(sqllex, "match full")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			return unimplemented(sqllex, "match partial")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			return unimplemented(sqllex, "match simple")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2062
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2072
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2075
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2078
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			return unimplemented(sqllex, "no action")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			return unimplemented(sqllex, "action set null")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			return unimplemented(sqllex, "action set default")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = true
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = false
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2195
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2199
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = Ascending
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = Descending
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2253
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2254
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = true
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = false
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2268
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2310
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2311
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.str = ""
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.str = ""
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.str = ""
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = ""
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.str = ""
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2433
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2434
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2498
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2502
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2510
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2532
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2769
		{
			return unimplemented(sqllex, "cte")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2781
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = true
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = false
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = false
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = true
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2805
		{
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &From{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3010
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3055
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3072
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = nil
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = true
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = false
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.str = astFullJoin
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = astLeftJoin
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = astRightJoin
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.str = astInnerJoin
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3257
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3356
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3371
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3380
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3452
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = nil
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3597
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3669
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = year
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = month
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = day
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = hour
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = minute
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = month
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = hour
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = minute
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = minute
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = nil
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = second
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3764
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3799
		{
			return unimplemented(sqllex, "at tz")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4033
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4259
		{
			return unimplemented(sqllex, "variadic")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4260
		{
			return unimplemented(sqllex, "variadic")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
			return unimplemented(sqllex, "func_application")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4304
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex, "current role")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex, "current user")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			return unimplemented(sqllex, "session user")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			return unimplemented(sqllex, "user")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4353
		{
			return unimplemented(sqllex, "treat")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4397
		{
			return unimplemented(sqllex, "within group")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4398
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = Window(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.str = ""
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			return unimplemented(sqllex, "frame range")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4497
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4501
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4509
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4510
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4511
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = Any
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = Some
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = All
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = Plus
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = Minus
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Mult
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = Div
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = FloorDiv
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = Mod
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = Bitand
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = Bitor
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = Pow
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = Bitxor
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = LT
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = GT
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = EQ
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = LE
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = GE
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = NE
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = Like
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = NotLike
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = ILike
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = NotILike
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4876
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5038
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5074
		{
			return unimplemented(sqllex, "func const")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5083
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = DNull
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.str = ""
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
