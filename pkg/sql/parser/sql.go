// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6501

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 674,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 527,
	-2, 0,
	-1, 61,
	92, 674,
	145, 674,
	310, 674,
	311, 674,
	-2, 0,
	-1, 72,
	103, 649,
	112, 649,
	153, 649,
	172, 649,
	197, 649,
	203, 649,
	307, 649,
	-2, 638,
	-1, 104,
	4, 676,
	20, 676,
	21, 676,
	23, 676,
	28, 676,
	33, 676,
	34, 676,
	35, 676,
	36, 676,
	37, 676,
	38, 676,
	39, 676,
	40, 676,
	41, 676,
	42, 676,
	44, 676,
	45, 676,
	46, 676,
	47, 676,
	48, 676,
	51, 676,
	52, 676,
	53, 676,
	55, 676,
	56, 676,
	60, 676,
	61, 676,
	62, 676,
	64, 676,
	66, 676,
	67, 676,
	68, 676,
	71, 676,
	72, 676,
	73, 676,
	81, 676,
	82, 676,
	83, 676,
	84, 676,
	85, 676,
	86, 676,
	87, 676,
	88, 676,
	90, 676,
	92, 676,
	94, 676,
	97, 676,
	98, 676,
	100, 676,
	104, 676,
	105, 676,
	106, 676,
	107, 676,
	108, 676,
	109, 676,
	113, 676,
	114, 676,
	115, 676,
	116, 676,
	117, 676,
	119, 676,
	121, 676,
	126, 676,
	127, 676,
	129, 676,
	131, 676,
	132, 676,
	133, 676,
	134, 676,
	135, 676,
	136, 676,
	137, 676,
	140, 676,
	142, 676,
	145, 676,
	146, 676,
	147, 676,
	148, 676,
	149, 676,
	150, 676,
	151, 676,
	152, 676,
	154, 676,
	157, 676,
	158, 676,
	159, 676,
	161, 676,
	162, 676,
	163, 676,
	165, 676,
	166, 676,
	168, 676,
	170, 676,
	173, 676,
	176, 676,
	178, 676,
	179, 676,
	180, 676,
	181, 676,
	182, 676,
	183, 676,
	185, 676,
	186, 676,
	187, 676,
	188, 676,
	192, 676,
	193, 676,
	194, 676,
	195, 676,
	196, 676,
	198, 676,
	200, 676,
	201, 676,
	204, 676,
	205, 676,
	207, 676,
	209, 676,
	210, 676,
	211, 676,
	212, 676,
	213, 676,
	214, 676,
	216, 676,
	217, 676,
	218, 676,
	219, 676,
	220, 676,
	222, 676,
	223, 676,
	224, 676,
	225, 676,
	226, 676,
	227, 676,
	228, 676,
	229, 676,
	231, 676,
	232, 676,
	233, 676,
	234, 676,
	235, 676,
	236, 676,
	237, 676,
	238, 676,
	239, 676,
	240, 676,
	241, 676,
	242, 676,
	244, 676,
	246, 676,
	247, 676,
	248, 676,
	249, 676,
	251, 676,
	252, 676,
	253, 676,
	254, 676,
	256, 676,
	257, 676,
	258, 676,
	259, 676,
	260, 676,
	262, 676,
	263, 676,
	264, 676,
	265, 676,
	267, 676,
	268, 676,
	269, 676,
	270, 676,
	272, 676,
	273, 676,
	274, 676,
	275, 676,
	276, 676,
	277, 676,
	278, 676,
	279, 676,
	280, 676,
	281, 676,
	283, 676,
	285, 676,
	286, 676,
	287, 676,
	288, 676,
	289, 676,
	290, 676,
	291, 676,
	293, 676,
	294, 676,
	295, 676,
	298, 676,
	299, 676,
	300, 676,
	301, 676,
	303, 676,
	304, 676,
	305, 676,
	306, 676,
	309, 676,
	310, 676,
	311, 676,
	312, 676,
	314, 676,
	316, 676,
	317, 676,
	318, 676,
	319, 676,
	320, 676,
	321, 676,
	324, 676,
	329, 676,
	330, 676,
	331, 676,
	332, 676,
	333, 676,
	-2, 0,
	-1, 117,
	103, 648,
	112, 648,
	153, 648,
	172, 648,
	197, 648,
	203, 648,
	307, 648,
	-2, 641,
	-1, 122,
	1, 576,
	157, 576,
	222, 576,
	226, 576,
	357, 576,
	358, 576,
	-2, 0,
	-1, 124,
	1, 576,
	357, 576,
	358, 576,
	-2, 0,
	-1, 125,
	1, 576,
	357, 576,
	358, 576,
	-2, 0,
	-1, 126,
	1, 580,
	357, 580,
	358, 580,
	-2, 0,
	-1, 133,
	4, 682,
	5, 682,
	6, 682,
	7, 682,
	8, 682,
	9, 682,
	20, 682,
	21, 682,
	23, 682,
	28, 682,
	29, 682,
	33, 682,
	34, 682,
	35, 682,
	36, 682,
	37, 682,
	38, 682,
	39, 682,
	40, 682,
	41, 682,
	42, 682,
	44, 682,
	45, 682,
	46, 682,
	47, 682,
	48, 682,
	49, 682,
	50, 682,
	51, 682,
	52, 682,
	53, 682,
	55, 682,
	56, 682,
	58, 682,
	60, 682,
	61, 682,
	62, 682,
	64, 682,
	66, 682,
	67, 682,
	68, 682,
	70, 682,
	71, 682,
	72, 682,
	73, 682,
	75, 682,
	76, 682,
	77, 682,
	79, 682,
	80, 682,
	81, 682,
	82, 682,
	83, 682,
	84, 682,
	85, 682,
	86, 682,
	87, 682,
	88, 682,
	90, 682,
	92, 682,
	94, 682,
	97, 682,
	98, 682,
	100, 682,
	104, 682,
	105, 682,
	106, 682,
	107, 682,
	108, 682,
	109, 682,
	110, 682,
	113, 682,
	114, 682,
	115, 682,
	116, 682,
	117, 682,
	119, 682,
	121, 682,
	124, 682,
	126, 682,
	127, 682,
	129, 682,
	131, 682,
	132, 682,
	133, 682,
	134, 682,
	135, 682,
	136, 682,
	137, 682,
	138, 682,
	140, 682,
	142, 682,
	144, 682,
	145, 682,
	146, 682,
	147, 682,
	148, 682,
	149, 682,
	150, 682,
	151, 682,
	152, 682,
	154, 682,
	156, 682,
	157, 682,
	158, 682,
	159, 682,
	160, 682,
	161, 682,
	162, 682,
	163, 682,
	165, 682,
	166, 682,
	168, 682,
	169, 682,
	170, 682,
	171, 682,
	173, 682,
	176, 682,
	178, 682,
	179, 682,
	180, 682,
	181, 682,
	182, 682,
	183, 682,
	184, 682,
	185, 682,
	186, 682,
	187, 682,
	188, 682,
	189, 682,
	191, 682,
	192, 682,
	193, 682,
	194, 682,
	195, 682,
	196, 682,
	198, 682,
	201, 682,
	204, 682,
	205, 682,
	206, 682,
	207, 682,
	208, 682,
	209, 682,
	210, 682,
	211, 682,
	212, 682,
	213, 682,
	214, 682,
	216, 682,
	217, 682,
	218, 682,
	219, 682,
	220, 682,
	222, 682,
	223, 682,
	224, 682,
	225, 682,
	226, 682,
	227, 682,
	228, 682,
	229, 682,
	231, 682,
	232, 682,
	233, 682,
	234, 682,
	235, 682,
	236, 682,
	237, 682,
	238, 682,
	239, 682,
	240, 682,
	241, 682,
	242, 682,
	244, 682,
	245, 682,
	246, 682,
	247, 682,
	248, 682,
	249, 682,
	251, 682,
	252, 682,
	253, 682,
	254, 682,
	256, 682,
	257, 682,
	258, 682,
	259, 682,
	260, 682,
	261, 682,
	262, 682,
	263, 682,
	264, 682,
	265, 682,
	266, 682,
	267, 682,
	268, 682,
	269, 682,
	270, 682,
	272, 682,
	273, 682,
	274, 682,
	275, 682,
	276, 682,
	277, 682,
	278, 682,
	279, 682,
	280, 682,
	281, 682,
	283, 682,
	285, 682,
	286, 682,
	287, 682,
	288, 682,
	289, 682,
	290, 682,
	291, 682,
	293, 682,
	294, 682,
	295, 682,
	298, 682,
	299, 682,
	300, 682,
	301, 682,
	302, 682,
	303, 682,
	304, 682,
	305, 682,
	306, 682,
	309, 682,
	310, 682,
	311, 682,
	312, 682,
	313, 682,
	314, 682,
	316, 682,
	317, 682,
	318, 682,
	319, 682,
	320, 682,
	321, 682,
	324, 682,
	329, 682,
	330, 682,
	331, 682,
	332, 682,
	333, 682,
	334, 682,
	340, 682,
	345, 682,
	346, 682,
	347, 682,
	354, 682,
	360, 682,
	-2, 0,
	-1, 136,
	1, 53,
	358, 53,
	-2, 674,
	-1, 599,
	123, 1270,
	296, 1270,
	339, 1270,
	356, 1270,
	-2, 0,
	-1, 600,
	123, 1222,
	296, 1222,
	339, 1222,
	356, 1222,
	-2, 0,
	-1, 602,
	123, 1328,
	296, 1328,
	339, 1328,
	356, 1328,
	-2, 0,
	-1, 604,
	123, 1350,
	296, 1350,
	339, 1350,
	356, 1350,
	-2, 0,
	-1, 611,
	123, 1275,
	296, 1275,
	339, 1275,
	356, 1275,
	-2, 318,
	-1, 637,
	1, 395,
	353, 395,
	355, 395,
	357, 395,
	358, 395,
	-2, 0,
	-1, 638,
	1, 443,
	120, 443,
	353, 443,
	355, 443,
	357, 443,
	358, 443,
	-2, 0,
	-1, 644,
	1, 409,
	353, 409,
	355, 409,
	357, 409,
	358, 409,
	-2, 0,
	-1, 646,
	1, 413,
	353, 413,
	355, 413,
	357, 413,
	358, 413,
	-2, 0,
	-1, 649,
	1, 421,
	353, 421,
	355, 421,
	357, 421,
	358, 421,
	-2, 0,
	-1, 650,
	1, 426,
	353, 426,
	355, 426,
	357, 426,
	358, 426,
	-2, 0,
	-1, 653,
	1, 436,
	353, 436,
	355, 436,
	357, 436,
	358, 436,
	-2, 0,
	-1, 667,
	112, 684,
	172, 684,
	197, 684,
	-2, 644,
	-1, 670,
	112, 683,
	172, 683,
	197, 683,
	-2, 642,
	-1, 727,
	354, 1200,
	-2, 1193,
	-1, 728,
	354, 1201,
	-2, 1194,
	-1, 734,
	5, 857,
	354, 857,
	-2, 1401,
	-1, 759,
	5, 816,
	-2, 1371,
	-1, 760,
	5, 851,
	354, 851,
	-2, 1373,
	-1, 761,
	5, 826,
	-2, 1374,
	-1, 762,
	5, 825,
	-2, 1375,
	-1, 763,
	5, 851,
	354, 851,
	-2, 1378,
	-1, 764,
	5, 851,
	354, 851,
	-2, 1379,
	-1, 765,
	5, 852,
	-2, 1382,
	-1, 766,
	5, 808,
	-2, 1383,
	-1, 767,
	5, 808,
	-2, 1384,
	-1, 768,
	5, 833,
	-2, 1388,
	-1, 769,
	5, 818,
	-2, 1389,
	-1, 770,
	5, 819,
	-2, 1390,
	-1, 771,
	5, 809,
	-2, 1395,
	-1, 772,
	5, 810,
	-2, 1396,
	-1, 773,
	5, 811,
	-2, 1397,
	-1, 774,
	5, 812,
	-2, 1398,
	-1, 775,
	5, 813,
	-2, 1399,
	-1, 776,
	5, 814,
	-2, 1400,
	-1, 777,
	5, 808,
	-2, 1405,
	-1, 778,
	5, 817,
	-2, 1410,
	-1, 779,
	5, 815,
	-2, 1413,
	-1, 780,
	5, 849,
	354, 849,
	-2, 1415,
	-1, 781,
	5, 853,
	-2, 1418,
	-1, 782,
	5, 855,
	-2, 1419,
	-1, 783,
	5, 848,
	354, 848,
	-2, 1424,
	-1, 865,
	213, 672,
	-2, 520,
	-1, 869,
	199, 1197,
	-2, 0,
	-1, 904,
	1, 208,
	353, 208,
	355, 208,
	357, 208,
	358, 208,
	-2, 647,
	-1, 911,
	4, 1423,
	10, 1423,
	11, 1423,
	13, 1423,
	14, 1423,
	15, 1423,
	16, 1423,
	17, 1423,
	18, 1423,
	20, 1423,
	21, 1423,
	23, 1423,
	26, 1423,
	28, 1423,
	30, 1423,
	33, 1423,
	34, 1423,
	35, 1423,
	36, 1423,
	37, 1423,
	38, 1423,
	39, 1423,
	40, 1423,
	41, 1423,
	42, 1423,
	44, 1423,
	45, 1423,
	46, 1423,
	47, 1423,
	48, 1423,
	51, 1423,
	52, 1423,
	53, 1423,
	55, 1423,
	56, 1423,
	57, 1423,
	60, 1423,
	61, 1423,
	62, 1423,
	63, 1423,
	64, 1423,
	66, 1423,
	67, 1423,
	68, 1423,
	70, 1423,
	71, 1423,
	72, 1423,
	73, 1423,
	81, 1423,
	82, 1423,
	83, 1423,
	84, 1423,
	85, 1423,
	86, 1423,
	87, 1423,
	88, 1423,
	90, 1423,
	92, 1423,
	94, 1423,
	97, 1423,
	98, 1423,
	100, 1423,
	104, 1423,
	105, 1423,
	106, 1423,
	107, 1423,
	108, 1423,
	109, 1423,
	113, 1423,
	114, 1423,
	115, 1423,
	116, 1423,
	117, 1423,
	118, 1423,
	119, 1423,
	121, 1423,
	124, 1423,
	126, 1423,
	127, 1423,
	129, 1423,
	131, 1423,
	132, 1423,
	133, 1423,
	134, 1423,
	135, 1423,
	136, 1423,
	137, 1423,
	138, 1423,
	139, 1423,
	140, 1423,
	142, 1423,
	144, 1423,
	145, 1423,
	146, 1423,
	147, 1423,
	148, 1423,
	149, 1423,
	150, 1423,
	151, 1423,
	152, 1423,
	154, 1423,
	156, 1423,
	157, 1423,
	158, 1423,
	159, 1423,
	160, 1423,
	161, 1423,
	162, 1423,
	163, 1423,
	165, 1423,
	166, 1423,
	168, 1423,
	169, 1423,
	170, 1423,
	171, 1423,
	173, 1423,
	176, 1423,
	177, 1423,
	178, 1423,
	179, 1423,
	180, 1423,
	181, 1423,
	182, 1423,
	183, 1423,
	184, 1423,
	185, 1423,
	186, 1423,
	187, 1423,
	188, 1423,
	192, 1423,
	193, 1423,
	194, 1423,
	195, 1423,
	196, 1423,
	198, 1423,
	201, 1423,
	202, 1423,
	204, 1423,
	205, 1423,
	207, 1423,
	209, 1423,
	210, 1423,
	211, 1423,
	212, 1423,
	213, 1423,
	214, 1423,
	216, 1423,
	217, 1423,
	218, 1423,
	219, 1423,
	220, 1423,
	222, 1423,
	223, 1423,
	224, 1423,
	225, 1423,
	226, 1423,
	227, 1423,
	228, 1423,
	229, 1423,
	231, 1423,
	232, 1423,
	233, 1423,
	234, 1423,
	235, 1423,
	236, 1423,
	237, 1423,
	238, 1423,
	239, 1423,
	240, 1423,
	241, 1423,
	242, 1423,
	244, 1423,
	245, 1423,
	246, 1423,
	247, 1423,
	248, 1423,
	249, 1423,
	250, 1423,
	251, 1423,
	252, 1423,
	253, 1423,
	254, 1423,
	256, 1423,
	257, 1423,
	258, 1423,
	259, 1423,
	260, 1423,
	262, 1423,
	263, 1423,
	264, 1423,
	265, 1423,
	266, 1423,
	267, 1423,
	268, 1423,
	269, 1423,
	270, 1423,
	272, 1423,
	273, 1423,
	274, 1423,
	275, 1423,
	276, 1423,
	277, 1423,
	278, 1423,
	279, 1423,
	280, 1423,
	281, 1423,
	283, 1423,
	285, 1423,
	286, 1423,
	287, 1423,
	288, 1423,
	289, 1423,
	290, 1423,
	291, 1423,
	293, 1423,
	294, 1423,
	295, 1423,
	298, 1423,
	299, 1423,
	300, 1423,
	301, 1423,
	303, 1423,
	304, 1423,
	305, 1423,
	306, 1423,
	309, 1423,
	310, 1423,
	311, 1423,
	312, 1423,
	314, 1423,
	316, 1423,
	317, 1423,
	318, 1423,
	319, 1423,
	320, 1423,
	321, 1423,
	324, 1423,
	329, 1423,
	330, 1423,
	331, 1423,
	332, 1423,
	333, 1423,
	334, 1423,
	335, 1423,
	337, 1423,
	338, 1423,
	339, 1423,
	340, 1423,
	342, 1423,
	343, 1423,
	344, 1423,
	345, 1423,
	346, 1423,
	347, 1423,
	348, 1423,
	349, 1423,
	350, 1423,
	352, 1423,
	355, 1423,
	356, 1423,
	359, 1423,
	360, 1423,
	-2, 0,
	-1, 924,
	123, 1328,
	296, 1328,
	339, 1328,
	356, 1328,
	-2, 0,
	-1, 941,
	123, 1350,
	296, 1350,
	339, 1350,
	356, 1350,
	-2, 0,
	-1, 1011,
	112, 683,
	172, 683,
	197, 683,
	-2, 645,
	-1, 1080,
	103, 649,
	112, 649,
	153, 649,
	172, 649,
	197, 649,
	203, 649,
	307, 649,
	-2, 976,
	-1, 1090,
	354, 1177,
	-2, 1165,
	-1, 1107,
	355, 1117,
	-2, 0,
	-1, 1163,
	103, 649,
	112, 649,
	153, 649,
	172, 649,
	197, 649,
	203, 649,
	307, 649,
	-2, 743,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 892,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 893,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 894,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 898,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 899,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 900,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 905,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 907,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 911,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 912,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 913,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 914,
	-1, 1444,
	208, 1059,
	-2, 1062,
	-1, 1486,
	123, 1099,
	354, 1200,
	-2, 1193,
	-1, 1487,
	123, 1100,
	-2, 1367,
	-1, 1488,
	123, 1101,
	-2, 1274,
	-1, 1489,
	123, 1102,
	-2, 1237,
	-1, 1490,
	123, 1103,
	-2, 1254,
	-1, 1491,
	123, 1104,
	-2, 1273,
	-1, 1492,
	123, 1105,
	-2, 1325,
	-1, 1568,
	1, 744,
	70, 744,
	103, 744,
	112, 744,
	124, 744,
	128, 744,
	130, 744,
	144, 744,
	153, 744,
	160, 744,
	169, 744,
	172, 744,
	184, 744,
	197, 744,
	199, 744,
	203, 744,
	243, 744,
	245, 744,
	307, 744,
	315, 744,
	326, 744,
	327, 744,
	336, 744,
	353, 744,
	355, 744,
	357, 744,
	358, 744,
	359, 744,
	-2, 743,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 906,
	-1, 1709,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 908,
	-1, 1714,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 909,
	-1, 1732,
	208, 1058,
	-2, 1061,
	-1, 1956,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 910,
	-1, 1961,
	156, 0,
	-2, 926,
	-1, 1971,
	208, 1060,
	-2, 1063,
	-1, 2013,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 953,
	-1, 2014,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 954,
	-1, 2015,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 955,
	-1, 2019,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 959,
	-1, 2020,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 960,
	-1, 2021,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 961,
	-1, 2145,
	156, 0,
	-2, 927,
	-1, 2148,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 930,
	-1, 2149,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 932,
	-1, 2265,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 931,
	-1, 2266,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 933,
	-1, 2273,
	156, 0,
	-2, 962,
	-1, 2350,
	156, 0,
	-2, 963,
	-1, 2427,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1370,
}

const sqlPrivate = 57344

const sqlLast = 41545

var sqlAct = [...]int{

	728, 2435, 2426, 2436, 2474, 2102, 1631, 2437, 2401, 2299,
	1639, 1200, 1990, 2425, 1611, 1938, 2355, 718, 2246, 71,
	1292, 474, 2112, 687, 1702, 2199, 1293, 1242, 671, 2133,
	726, 1207, 859, 2213, 704, 2135, 962, 1905, 2179, 2074,
	174, 1610, 2073, 1563, 174, 2279, 1628, 1846, 1615, 817,
	1157, 2127, 174, 725, 1910, 1640, 1798, 1614, 1825, 1581,
	1572, 174, 1564, 1140, 476, 1907, 1833, 174, 174, 1203,
	1243, 174, 439, 1468, 174, 1797, 2044, 1086, 1604, 1442,
	679, 116, 174, 1370, 1698, 1171, 1375, 945, 1169, 1743,
	1686, 1161, 1515, 1141, 698, 1430, 1452, 1427, 436, 1196,
	823, 1117, 1319, 610, 1323, 1618, 944, 1121, 1462, 891,
	826, 1550, 964, 1612, 455, 25, 884, 1148, 894, 1220,
	905, 1537, 805, 1482, 1075, 590, 1014, 1633, 174, 174,
	697, 117, 1015, 1013, 607, 1322, 174, 118, 1131, 676,
	466, 720, 116, 603, 1214, 881, 170, 165, 803, 1130,
	2214, 631, 2058, 1731, 948, 2059, 1019, 1222, 1632, 1222,
	1222, 675, 174, 174, 174, 174, 675, 2470, 2451, 174,
	174, 1191, 2212, 2447, 2446, 2443, 2423, 1654, 1654, 1191,
	1669, 2422, 2396, 2391, 847, 1669, 1662, 2260, 2387, 2379,
	2352, 1921, 1191, 2212, 1662, 2330, 1166, 2327, 2325, 2212,
	1654, 1191, 2212, 2310, 1518, 2309, 2287, 1191, 670, 2212,
	1191, 2397, 2284, 1158, 2267, 582, 1191, 116, 1662, 949,
	2234, 2232, 1954, 950, 1654, 1654, 685, 2211, 1922, 1030,
	1031, 2212, 1050, 1051, 1052, 1060, 1061, 1062, 2192, 2172,
	2150, 1539, 1191, 1654, 1654, 1053, 1768, 1769, 668, 2147,
	1605, 25, 1033, 1662, 667, 1064, 1605, 2126, 1188, 1768,
	1769, 1609, 831, 835, 2121, 2054, 1965, 1932, 1609, 2055,
	1654, 1895, 680, 2047, 1030, 1031, 1032, 807, 1669, 1669,
	1894, 1849, 1047, 841, 1191, 1654, 2260, 2047, 1822, 1636,
	1768, 1769, 1191, 1786, 1787, 1788, 1815, 1033, 1813, 1812,
	1816, 1811, 1654, 1654, 1735, 1654, 2144, 1538, 1768, 1769,
	1736, 1786, 1787, 1788, 1734, 1732, 809, 1654, 810, 1654,
	1654, 1032, 1742, 1949, 2143, 1673, 1661, 1047, 1570, 1654,
	1662, 1653, 820, 2026, 1608, 1654, 1968, 1038, 1609, 1030,
	1031, 1544, 1235, 1783, 1191, 1543, 1236, 1895, 1701, 1684,
	1223, 1135, 1223, 1223, 1774, 1446, 1300, 1057, 1065, 845,
	926, 1783, 1033, 136, 2215, 1030, 1031, 1774, 1050, 1051,
	1052, 1060, 1061, 1062, 1320, 1063, 923, 922, 921, 133,
	133, 1053, 1038, 920, 919, 918, 1032, 917, 1033, 916,
	1055, 1064, 915, 1768, 1769, 914, 1048, 913, 1774, 912,
	811, 174, 808, 174, 174, 663, 174, 662, 135, 135,
	661, 174, 1032, 1784, 629, 628, 1774, 174, 1047, 627,
	626, 1054, 625, 624, 623, 622, 1784, 621, 620, 678,
	174, 174, 174, 174, 174, 619, 1789, 618, 617, 908,
	616, 1048, 615, 614, 134, 134, 1783, 1038, 898, 613,
	598, 597, 127, 596, 1789, 133, 595, 1784, 676, 128,
	594, 427, 174, 426, 1921, 425, 1841, 424, 1228, 1049,
	1221, 1354, 423, 1038, 408, 1784, 407, 1538, 119, 119,
	399, 1479, 1477, 398, 135, 1058, 1785, 397, 175, 396,
	389, 388, 159, 1057, 1065, 158, 1465, 157, 156, 1785,
	155, 1774, 154, 153, 863, 152, 1048, 867, 151, 150,
	149, 1063, 148, 147, 1049, 146, 145, 883, 144, 143,
	134, 142, 141, 140, 139, 138, 1055, 137, 127, 851,
	1785, 1326, 1048, 887, 887, 128, 957, 1475, 2469, 2442,
	2424, 2406, 2347, 1466, 2328, 858, 2178, 888, 1785, 2177,
	1162, 906, 477, 1056, 1635, 2253, 1044, 1045, 1046, 1059,
	1784, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	1026, 2173, 2165, 2164, 1897, 1768, 1769, 174, 2174, 1049,
	1778, 1770, 1771, 1772, 1773, 1775, 1776, 2163, 39, 1467,
	1464, 856, 2159, 174, 1770, 1771, 1772, 1773, 1775, 1776,
	2158, 42, 2157, 174, 818, 1049, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 703, 2156, 1780, 1781, 1782,
	2132, 1058, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775,
	1776, 1768, 1769, 1785, 908, 1780, 1781, 1782, 2041, 2036,
	1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 2035,
	2034, 1976, 1893, 784, 1853, 1820, 1817, 1805, 1796, 393,
	960, 1030, 1031, 851, 1469, 174, 1767, 1764, 1763, 1761,
	1748, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	927, 1747, 133, 1774, 1033, 1568, 1026, 1094, 64, 1056,
	1025, 1438, 1044, 1045, 1046, 1059, 1012, 1043, 1041, 1042,
	1034, 1035, 1036, 1037, 1039, 1040, 1239, 1160, 1032, 1936,
	2252, 135, 1321, 1697, 1159, 1206, 955, 478, 1087, 1992,
	1078, 1696, 676, 2414, 2382, 1779, 1777, 1778, 1770, 1771,
	1772, 1773, 1775, 1776, 2376, 2375, 2374, 1664, 2366, 1774,
	2364, 2342, 1463, 942, 2341, 2340, 939, 134, 2296, 2275,
	2261, 824, 2240, 2218, 2170, 127, 2110, 1011, 2108, 2107,
	2105, 2082, 128, 2081, 1667, 1010, 2062, 2050, 65, 1038,
	1960, 1884, 1879, 1866, 1865, 1851, 1821, 833, 837, 1795,
	843, 119, 1757, 1756, 958, 1753, 1728, 1866, 1723, 1432,
	1030, 1031, 1122, 120, 67, 1125, 68, 1439, 1555, 1527,
	1473, 1199, 819, 174, 1138, 174, 1129, 1115, 1114, 133,
	1113, 668, 1112, 1033, 1839, 1111, 461, 667, 1110, 100,
	1109, 1108, 857, 1107, 1106, 1105, 721, 1104, 174, 174,
	1022, 1023, 1103, 1027, 1478, 1476, 1102, 1032, 135, 1101,
	1100, 1099, 1098, 1146, 1091, 908, 174, 676, 1079, 1078,
	938, 930, 476, 902, 2358, 2259, 2152, 2131, 174, 2057,
	1139, 2053, 1556, 1087, 1090, 1119, 1120, 1934, 1768, 1769,
	174, 1189, 1076, 1192, 134, 1123, 174, 1144, 174, 1205,
	174, 1160, 127, 954, 174, 1126, 1179, 1672, 1908, 128,
	1474, 1198, 2263, 1127, 2262, 2256, 2060, 1923, 1128, 1307,
	1605, 1162, 1819, 116, 1818, 1008, 1177, 1082, 119, 1707,
	1770, 1771, 1772, 1773, 1775, 1776, 951, 1096, 1939, 1632,
	1204, 1156, 2280, 1993, 1178, 174, 174, 909, 1134, 1453,
	1671, 1118, 908, 401, 174, 428, 1002, 174, 1164, 1917,
	1211, 1739, 2069, 1132, 2409, 1658, 1172, 1465, 1173, 2386,
	2466, 1946, 1582, 1136, 2226, 798, 819, 2467, 476, 1311,
	1310, 1674, 1320, 1317, 796, 794, 800, 174, 1772, 1773,
	1775, 1776, 174, 791, 2320, 1003, 883, 174, 174, 1327,
	174, 1160, 174, 994, 174, 2319, 174, 2318, 2317, 1574,
	2097, 1240, 1190, 413, 1466, 2093, 2095, 174, 1036, 1037,
	1039, 1040, 2066, 174, 174, 2065, 1752, 1751, 1225, 1750,
	1749, 1227, 786, 1574, 405, 1230, 432, 1710, 1657, 1573,
	1585, 1213, 1601, 1174, 1216, 1597, 1595, 1414, 467, 174,
	1308, 1133, 837, 476, 656, 844, 1093, 2237, 1531, 1530,
	1467, 1464, 1385, 1186, 1314, 1629, 414, 843, 1352, 1301,
	665, 472, 684, 1351, 1384, 1935, 952, 468, 2100, 1185,
	1665, 1429, 2101, 1429, 1030, 1031, 1890, 1238, 939, 2385,
	1328, 1295, 116, 1237, 431, 1768, 1769, 2301, 1194, 1183,
	1298, 1294, 2420, 1217, 469, 1469, 577, 1033, 2458, 1324,
	1342, 674, 910, 1312, 1331, 988, 1915, 1184, 676, 953,
	1029, 1376, 1383, 676, 471, 1911, 1332, 1233, 2084, 1286,
	2439, 1032, 1336, 657, 1337, 1469, 1338, 1886, 1339, 1584,
	1340, 1436, 909, 1198, 1335, 2393, 1434, 937, 1315, 1353,
	1040, 2482, 989, 1222, 174, 160, 174, 1346, 1348, 174,
	1911, 673, 1357, 1296, 1986, 1881, 1355, 1356, 2369, 2394,
	174, 668, 1983, 1536, 668, 668, 1182, 1366, 967, 476,
	1367, 1368, 174, 1374, 1180, 1450, 174, 1453, 1172, 174,
	1173, 1720, 1038, 174, 1172, 2466, 1173, 174, 1768, 1769,
	1558, 2271, 174, 1774, 1947, 676, 1718, 1116, 174, 476,
	1624, 675, 174, 1463, 2324, 1945, 1350, 2440, 1984, 1440,
	174, 1073, 1755, 1551, 1437, 1567, 1583, 174, 1776, 675,
	1603, 416, 415, 658, 470, 400, 163, 430, 174, 1469,
	174, 1575, 174, 1699, 1700, 174, 2091, 174, 1493, 174,
	174, 1048, 174, 174, 1586, 1588, 1007, 908, 1301, 406,
	2139, 174, 1784, 1175, 402, 1174, 433, 1652, 975, 1557,
	1571, 1174, 792, 2441, 403, 2438, 429, 1715, 1534, 1533,
	802, 792, 793, 801, 1552, 1553, 1542, 1716, 1548, 473,
	792, 1721, 2085, 1469, 164, 390, 1164, 1591, 1578, 993,
	837, 1001, 1596, 1889, 1443, 2465, 1774, 910, 1082, 2302,
	1411, 659, 1447, 1593, 2463, 672, 1455, 2457, 713, 1599,
	1321, 1318, 2207, 2245, 1049, 1626, 1602, 933, 1485, 1485,
	1498, 1712, 1510, 1428, 1660, 1785, 116, 925, 1522, 1523,
	1525, 1018, 116, 660, 2483, 1646, 1223, 476, 887, 1634,
	887, 1634, 666, 909, 1655, 174, 1500, 2208, 171, 1650,
	477, 1647, 394, 1648, 1638, 1784, 1547, 1649, 1685, 906,
	409, 174, 174, 174, 1659, 174, 1330, 1656, 1666, 434,
	2312, 1028, 1677, 948, 1561, 580, 171, 1147, 576, 588,
	1435, 1668, 593, 1679, 174, 1299, 2311, 2168, 1717, 968,
	612, 2294, 1123, 1877, 1126, 1719, 2477, 1017, 936, 1170,
	1120, 1119, 1409, 1412, 1680, 1982, 2456, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 1301, 1678, 1675, 1777, 1778,
	1770, 1771, 1772, 1773, 1775, 1776, 969, 161, 1785, 966,
	909, 1151, 943, 2361, 116, 1408, 806, 806, 949, 2022,
	2488, 391, 950, 2068, 394, 2222, 998, 2203, 1151, 2204,
	1862, 1154, 1689, 824, 1167, 976, 477, 1016, 1306, 1858,
	1627, 1212, 676, 1201, 2402, 1693, 162, 1149, 1154, 1017,
	394, 394, 839, 394, 1695, 1175, 1152, 171, 848, 2206,
	1691, 1175, 1018, 1197, 1549, 1425, 785, 2169, 2209, 2225,
	861, 1150, 860, 1152, 1741, 1847, 2224, 1345, 1302, 1362,
	1423, 837, 1304, 1215, 2113, 1215, 1835, 392, 910, 167,
	2247, 999, 673, 2295, 1305, 478, 1868, 948, 1713, 1711,
	1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 1016,
	1410, 477, 1867, 2023, 2475, 676, 1705, 1836, 1727, 2024,
	948, 1546, 2487, 422, 1545, 2221, 585, 880, 691, 579,
	174, 476, 1153, 869, 1823, 878, 174, 174, 1738, 1829,
	174, 1848, 2103, 417, 1000, 174, 2205, 2238, 174, 1153,
	1363, 1419, 1828, 1888, 2180, 2045, 174, 1830, 2292, 1420,
	1472, 1421, 174, 174, 174, 1426, 997, 948, 174, 2476,
	3, 174, 460, 33, 986, 910, 2223, 174, 174, 174,
	174, 174, 2274, 2293, 2167, 949, 174, 984, 174, 950,
	2478, 1843, 174, 2099, 1799, 1802, 1803, 1804, 1959, 733,
	174, 478, 1834, 459, 32, 458, 29, 1838, 982, 682,
	174, 656, 174, 1891, 174, 1762, 1859, 174, 790, 457,
	77, 174, 1824, 1722, 980, 1670, 174, 1726, 174, 684,
	1607, 1600, 949, 1594, 1729, 174, 950, 477, 1842, 1006,
	1863, 1896, 849, 1898, 850, 676, 1854, 1471, 174, 908,
	1852, 978, 1745, 1746, 456, 76, 1800, 972, 846, 876,
	908, 174, 683, 453, 21, 1005, 931, 477, 992, 1343,
	1876, 1334, 1422, 1097, 1863, 1931, 478, 2434, 1913, 1424,
	879, 2399, 584, 1919, 2196, 578, 1940, 996, 877, 612,
	657, 865, 612, 2089, 870, 985, 174, 1878, 2087, 873,
	1794, 454, 22, 1883, 959, 394, 656, 829, 983, 33,
	1973, 1906, 1807, 452, 27, 909, 2067, 1900, 612, 612,
	394, 895, 848, 1933, 684, 1916, 1827, 1899, 587, 981,
	1902, 1904, 1831, 1832, 1924, 1630, 1837, 418, 1930, 1623,
	32, 1962, 29, 795, 797, 979, 174, 1249, 464, 1232,
	612, 1941, 1944, 451, 19, 824, 77, 1925, 1926, 2335,
	1927, 1928, 1231, 1978, 1979, 1980, 1942, 1943, 1316, 1950,
	2467, 824, 977, 1229, 1569, 1952, 1226, 419, 971, 1948,
	875, 1224, 837, 449, 18, 657, 991, 837, 450, 17,
	658, 76, 1187, 843, 1181, 467, 1176, 2258, 443, 13,
	21, 1969, 478, 2257, 1972, 477, 1325, 420, 814, 421,
	445, 16, 444, 14, 1985, 1987, 1988, 2128, 472, 2337,
	1376, 1997, 1590, 1643, 468, 1147, 2120, 174, 815, 1376,
	2002, 1999, 478, 174, 843, 843, 1996, 1994, 22, 442,
	12, 1703, 174, 174, 2029, 2001, 462, 1249, 1249, 2371,
	27, 469, 2215, 1020, 448, 10, 2063, 441, 8, 447,
	6, 1574, 2033, 970, 2030, 612, 681, 1589, 659, 446,
	5, 471, 440, 4, 2080, 1598, 2056, 1574, 2349, 1151,
	910, 934, 2181, 1587, 2043, 658, 174, 2079, 174, 2049,
	19, 612, 116, 2098, 2046, 174, 2048, 1024, 908, 1154,
	660, 816, 2109, 1704, 1592, 2064, 2398, 1030, 1031, 788,
	2078, 2243, 174, 174, 2071, 1149, 586, 2122, 1637, 2106,
	18, 1625, 463, 1966, 1152, 17, 1021, 2473, 2092, 1622,
	174, 2061, 1535, 1280, 2115, 13, 1297, 2125, 1241, 1150,
	174, 2486, 464, 2104, 2286, 476, 2186, 16, 2130, 14,
	1030, 1031, 2042, 394, 1032, 1989, 1690, 843, 1692, 2119,
	837, 1682, 2114, 659, 1937, 2117, 2142, 2123, 2141, 2116,
	478, 2124, 1844, 1033, 2129, 1814, 12, 1683, 2146, 1706,
	1532, 470, 2088, 174, 2090, 1529, 787, 1768, 1769, 467,
	2027, 10, 1030, 1031, 8, 660, 6, 1032, 1682, 1681,
	1153, 2037, 1528, 730, 1461, 1084, 5, 2154, 1981, 4,
	1901, 1094, 472, 1092, 1004, 995, 990, 987, 468, 477,
	973, 935, 664, 2052, 2300, 465, 1333, 974, 2207, 1840,
	1554, 2200, 2392, 1280, 1280, 2160, 473, 1754, 174, 2198,
	2354, 174, 2270, 2202, 1470, 469, 2166, 1095, 52, 2076,
	707, 476, 174, 174, 2197, 2184, 174, 174, 174, 2070,
	1617, 1616, 479, 2208, 1309, 471, 729, 2191, 1484, 1377,
	789, 731, 2188, 174, 2094, 1246, 732, 2183, 174, 2096,
	174, 1247, 174, 174, 174, 2201, 174, 2220, 174, 2080,
	908, 593, 1124, 806, 2185, 2190, 2187, 719, 174, 174,
	2216, 1244, 2079, 903, 1641, 908, 2195, 1313, 1433, 1827,
	2236, 1451, 2241, 2080, 2219, 1737, 394, 394, 2080, 1088,
	699, 711, 710, 1448, 929, 2078, 2079, 1845, 1914, 2251,
	1361, 2079, 1694, 1358, 171, 2086, 404, 909, 2239, 1765,
	2242, 2249, 901, 2244, 1507, 824, 394, 1499, 909, 2078,
	1495, 824, 824, 2250, 2078, 824, 1009, 2264, 1210, 1145,
	1074, 1642, 956, 2203, 394, 2204, 394, 2255, 394, 2248,
	1920, 1663, 1218, 1137, 2269, 470, 1369, 1855, 813, 812,
	1303, 1676, 1067, 1066, 478, 799, 2363, 174, 2276, 174,
	947, 476, 174, 946, 1202, 2206, 1861, 2481, 2370, 2083,
	174, 1880, 2408, 132, 2209, 129, 476, 131, 130, 1887,
	80, 31, 2290, 612, 171, 1892, 30, 99, 98, 2283,
	2080, 97, 171, 96, 95, 612, 2254, 2305, 2304, 94,
	473, 2306, 1903, 2079, 2182, 2288, 174, 1198, 93, 908,
	92, 1197, 2303, 174, 91, 2322, 90, 89, 2080, 88,
	1197, 174, 174, 908, 908, 612, 2078, 2336, 87, 86,
	612, 2079, 2321, 85, 84, 171, 612, 2285, 612, 83,
	612, 174, 612, 2326, 612, 2333, 174, 82, 2334, 2345,
	2346, 2344, 2205, 174, 2078, 1344, 2343, 2314, 608, 2348,
	605, 612, 612, 2351, 79, 2365, 2338, 78, 28, 24,
	103, 23, 910, 2332, 75, 2359, 74, 26, 174, 174,
	15, 1953, 9, 910, 2360, 174, 20, 612, 57, 2357,
	58, 56, 55, 908, 2380, 2378, 54, 2368, 174, 11,
	2381, 2367, 908, 908, 50, 49, 47, 2315, 2316, 46,
	45, 44, 7, 102, 41, 40, 101, 2384, 2329, 114,
	676, 111, 2389, 2390, 1146, 174, 113, 174, 110, 2383,
	174, 112, 476, 115, 107, 108, 109, 106, 1234, 105,
	37, 2404, 36, 35, 2415, 34, 2282, 2417, 2, 2416,
	1, 0, 2405, 2410, 2421, 0, 909, 0, 174, 0,
	2080, 0, 0, 2419, 0, 0, 1249, 1279, 2431, 0,
	0, 2433, 0, 2079, 2432, 174, 0, 0, 0, 2444,
	0, 174, 2450, 2308, 0, 2418, 0, 0, 0, 2449,
	2455, 2452, 593, 0, 806, 174, 2078, 848, 2453, 2454,
	1249, 2464, 2448, 477, 2462, 0, 0, 0, 394, 0,
	0, 0, 824, 2468, 0, 1030, 1031, 0, 0, 2472,
	1566, 2471, 0, 0, 394, 1030, 1031, 394, 0, 0,
	2480, 1579, 2479, 0, 0, 394, 2485, 2484, 1033, 0,
	394, 0, 0, 0, 0, 0, 394, 0, 1033, 1249,
	1606, 0, 0, 0, 0, 0, 0, 0, 1613, 0,
	689, 0, 1032, 0, 0, 848, 0, 1279, 1279, 0,
	0, 0, 1032, 0, 0, 0, 394, 0, 1645, 0,
	612, 0, 0, 612, 0, 612, 0, 394, 394, 0,
	1651, 848, 0, 0, 0, 0, 0, 1643, 824, 1579,
	1248, 0, 0, 0, 0, 0, 0, 0, 0, 477,
	1249, 0, 0, 0, 2395, 0, 0, 1365, 0, 0,
	0, 910, 0, 1038, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1038, 1030, 1031, 0, 0, 0, 2411,
	2412, 2413, 708, 72, 0, 0, 1249, 1249, 909, 0,
	0, 0, 1280, 0, 0, 1249, 1249, 1033, 0, 0,
	0, 0, 0, 909, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1032, 1048, 0, 0, 0, 1280, 0, 1249, 0,
	0, 0, 1048, 1687, 0, 0, 0, 0, 0, 0,
	1248, 1248, 0, 0, 72, 1501, 0, 0, 0, 394,
	394, 394, 0, 394, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 1038, 0, 0, 0, 0, 0, 0, 477,
	0, 0, 0, 0, 0, 1049, 0, 0, 0, 669,
	0, 0, 677, 0, 477, 1049, 0, 2229, 0, 0,
	0, 2233, 0, 0, 478, 0, 0, 0, 825, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1280, 909, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 909, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1724, 1725, 0, 0, 910, 0,
	852, 854, 1280, 1280, 0, 0, 0, 0, 0, 0,
	0, 1280, 1280, 0, 0, 0, 0, 1249, 0, 1042,
	1034, 1035, 1036, 1037, 1039, 1040, 0, 0, 0, 0,
	1034, 1035, 1036, 1037, 1039, 1040, 0, 0, 0, 0,
	0, 0, 0, 0, 1280, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 0, 2298, 0, 0, 0, 0,
	909, 909, 0, 0, 0, 0, 0, 0, 394, 1791,
	1792, 1793, 0, 0, 394, 394, 0, 0, 394, 0,
	1282, 0, 0, 1566, 478, 0, 1566, 0, 0, 0,
	477, 2331, 0, 0, 1850, 0, 0, 0, 0, 478,
	394, 1856, 1857, 0, 0, 0, 1579, 0, 0, 1864,
	0, 0, 0, 0, 0, 1869, 1870, 1872, 1874, 1875,
	0, 0, 0, 0, 394, 0, 1882, 0, 0, 0,
	1885, 0, 910, 0, 0, 0, 0, 0, 394, 1034,
	1035, 1036, 1037, 1039, 1040, 0, 910, 910, 1210, 0,
	1210, 0, 612, 0, 0, 394, 0, 1281, 0, 1909,
	0, 0, 0, 0, 394, 0, 1918, 0, 0, 0,
	2377, 0, 0, 394, 1245, 0, 0, 0, 0, 0,
	1282, 1282, 0, 0, 0, 0, 1687, 928, 0, 0,
	0, 0, 0, 932, 0, 0, 1501, 1501, 0, 1687,
	0, 0, 0, 1280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2407, 910, 0, 0, 0,
	689, 0, 0, 0, 0, 910, 910, 1249, 0, 0,
	0, 0, 0, 0, 394, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 677, 0, 0, 0, 478, 0, 1281, 1281, 0,
	0, 0, 0, 0, 0, 0, 1643, 0, 0, 0,
	0, 1501, 1501, 1501, 1245, 1245, 0, 0, 1957, 1958,
	0, 0, 0, 1249, 1991, 0, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 1069, 1070, 1071, 1072, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1249, 0, 0, 0, 0, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 0, 2025, 0, 0,
	0, 0, 0, 0, 0, 394, 0, 0, 0, 1279,
	0, 1566, 0, 0, 0, 0, 0, 0, 0, 0,
	848, 1566, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1280, 0, 0, 0, 0, 0, 1248,
	0, 1142, 1142, 0, 1579, 0, 1210, 0, 689, 0,
	1279, 0, 0, 2111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 394, 0, 1248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 1279, 2136, 1280,
	0, 0, 0, 0, 0, 1279, 1279, 0, 2138, 0,
	1501, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 0, 1077, 0, 1080, 0, 0, 1280, 0,
	0, 2161, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
	1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 0, 1501,
	0, 689, 689, 1248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1566, 848, 0, 0, 2193, 2194, 1579, 0, 0, 1248,
	1248, 0, 0, 0, 0, 0, 0, 0, 1248, 1248,
	2075, 848, 0, 0, 0, 0, 2227, 0, 2228, 0,
	394, 2230, 2231, 0, 394, 1359, 2235, 1364, 0, 0,
	0, 0, 0, 1371, 2075, 72, 848, 1613, 0, 2075,
	1163, 1248, 0, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 0, 1413, 1279, 1415, 1416,
	1417, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	1030, 1031, 0, 0, 0, 0, 1060, 1061, 1062, 0,
	1480, 1481, 0, 0, 1497, 0, 1509, 1511, 1516, 1519,
	1520, 1521, 0, 1033, 0, 1579, 1064, 2289, 0, 1282,
	2291, 0, 0, 0, 2273, 0, 0, 0, 394, 0,
	0, 2075, 0, 0, 0, 0, 0, 1032, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 2323, 0, 0, 2075,
	0, 0, 0, 0, 394, 2297, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 0, 2136,
	2136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1248, 0, 0, 0, 72, 0, 1281, 0, 1038, 2356,
	0, 0, 1282, 0, 1566, 0, 0, 0, 0, 0,
	0, 1210, 0, 1245, 0, 0, 0, 0, 1057, 1065,
	0, 0, 669, 0, 0, 669, 669, 0, 0, 0,
	1281, 2350, 0, 0, 0, 0, 2372, 2373, 0, 0,
	0, 0, 0, 394, 0, 0, 0, 1245, 0, 0,
	0, 1055, 0, 0, 0, 0, 2388, 1048, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 1279, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	0, 677, 0, 2403, 0, 848, 1080, 0, 394, 0,
	0, 0, 0, 0, 0, 0, 1245, 0, 0, 1282,
	1282, 2075, 0, 0, 0, 0, 0, 0, 1282, 1282,
	0, 0, 0, 0, 0, 0, 2356, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 1501, 0, 0, 0,
	1049, 0, 0, 848, 0, 0, 0, 0, 0, 394,
	1281, 1282, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 825, 2461, 0, 0, 0, 1245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1163, 0,
	0, 0, 1279, 0, 0, 0, 1281, 1281, 0, 0,
	0, 72, 0, 0, 0, 1281, 1281, 72, 0, 0,
	0, 0, 0, 1245, 1245, 0, 0, 0, 0, 0,
	1248, 0, 1245, 1245, 0, 0, 0, 1708, 1709, 0,
	0, 0, 0, 1714, 1056, 0, 0, 72, 1281, 72,
	1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039,
	1040, 0, 0, 1501, 0, 1245, 0, 0, 72, 0,
	0, 0, 0, 0, 72, 1733, 38, 0, 0, 0,
	0, 0, 1740, 0, 0, 1744, 1248, 39, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	42, 0, 1758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 1081, 1248, 0, 0, 0, 0,
	0, 1516, 1516, 1516, 0, 0, 0, 0, 0, 1768,
	1769, 59, 1786, 1787, 1788, 0, 0, 0, 60, 0,
	61, 0, 0, 0, 0, 0, 0, 1142, 0, 0,
	0, 0, 689, 0, 1030, 1031, 72, 1050, 1051, 1052,
	1060, 1061, 1062, 0, 63, 0, 0, 64, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 1033, 0, 0,
	1064, 0, 1783, 0, 0, 0, 0, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1032, 0, 0, 1245, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1774, 0, 0,
	0, 1912, 0, 0, 0, 1080, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 1929, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 67, 0, 68, 0, 0, 0, 0,
	689, 689, 1057, 1065, 0, 0, 0, 0, 133, 0,
	0, 0, 1688, 689, 0, 461, 1784, 0, 100, 0,
	1063, 0, 0, 0, 0, 1951, 0, 0, 0, 0,
	1371, 0, 0, 0, 0, 1055, 1955, 135, 1080, 1956,
	1282, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1961, 0, 0, 0, 0, 0, 0, 0, 0,
	1970, 0, 0, 0, 0, 0, 1054, 0, 1974, 0,
	0, 1929, 825, 134, 0, 0, 0, 0, 825, 825,
	0, 127, 825, 0, 0, 0, 0, 0, 128, 1785,
	0, 1998, 0, 0, 0, 2000, 1282, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 119, 0, 0,
	0, 0, 0, 1053, 1049, 0, 0, 1281, 0, 0,
	1033, 0, 0, 1064, 0, 72, 0, 0, 2031, 2032,
	1058, 72, 0, 0, 1245, 0, 0, 2038, 2039, 2040,
	0, 0, 0, 0, 1032, 1282, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 72, 0, 0, 72, 0,
	0, 0, 0, 0, 2051, 0, 0, 0, 677, 0,
	0, 0, 0, 1281, 0, 0, 1780, 1781, 1782, 0,
	0, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776,
	1245, 0, 0, 0, 2072, 0, 0, 0, 1056, 0,
	0, 1044, 1045, 1046, 1059, 1038, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 0, 0, 0, 0, 0,
	0, 0, 1281, 1810, 0, 1057, 1065, 0, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 1245,
	1142, 0, 0, 1063, 1053, 0, 0, 0, 0, 0,
	0, 1033, 689, 0, 1064, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1032, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 2145, 1054,
	0, 0, 2148, 2149, 0, 0, 0, 2151, 0, 0,
	0, 0, 0, 0, 2153, 0, 2155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1038, 1049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 72, 2171, 1057, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 1063, 1768, 1769, 0, 1786, 1787,
	1788, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 1964, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1054, 1056, 0, 0, 1044, 1045, 1046, 1059, 1783, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	38, 0, 0, 0, 0, 0, 1809, 0, 0, 0,
	0, 39, 0, 0, 0, 825, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 1049, 0,
	0, 0, 2265, 2266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1774, 1058, 0, 48, 0, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	0, 0, 0, 2278, 1053, 0, 0, 0, 0, 2281,
	0, 1033, 0, 0, 1064, 59, 0, 0, 0, 0,
	0, 1789, 60, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1032, 0, 0, 0, 0,
	0, 1047, 1784, 0, 0, 0, 0, 0, 63, 0,
	0, 64, 1056, 2313, 0, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 0, 0, 0, 0, 0, 1808, 0, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1038, 2460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1785, 1057, 1065, 0, 0,
	0, 0, 0, 0, 0, 2362, 0, 0, 0, 0,
	0, 65, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 72, 1048, 120, 67, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 689,
	0, 0, 133, 0, 0, 0, 1341, 0, 0, 461,
	1054, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2459, 0, 0, 0,
	0, 135, 1780, 1781, 1782, 0, 0, 1779, 1777, 1778,
	1770, 1771, 1772, 1773, 1775, 1776, 0, 0, 0, 0,
	0, 0, 2430, 2430, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 2445, 0,
	0, 0, 0, 0, 1058, 127, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 2430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 0, 475, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	176, 177, 494, 178, 495, 496, 497, 498, 332, 499,
	500, 501, 502, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 503, 183, 339, 340, 184, 185, 504,
	505, 341, 342, 343, 506, 186, 344, 507, 480, 508,
	187, 188, 189, 1080, 190, 509, 191, 192, 193, 510,
	481, 194, 195, 196, 511, 512, 514, 513, 515, 516,
	517, 197, 198, 395, 199, 345, 200, 346, 347, 518,
	201, 519, 202, 520, 203, 521, 522, 204, 205, 523,
	206, 524, 0, 525, 348, 207, 208, 209, 349, 350,
	526, 527, 528, 210, 211, 351, 352, 353, 0, 212,
	529, 213, 530, 531, 482, 532, 214, 354, 533, 355,
	534, 215, 216, 217, 218, 219, 356, 357, 484, 535,
	223, 536, 220, 537, 483, 221, 358, 222, 359, 360,
	361, 362, 363, 538, 364, 539, 485, 224, 225, 226,
	486, 227, 228, 229, 540, 231, 230, 541, 365, 487,
	232, 488, 542, 233, 543, 544, 234, 0, 235, 236,
	237, 239, 366, 238, 489, 240, 241, 243, 242, 545,
	546, 547, 367, 244, 368, 245, 246, 548, 247, 549,
	550, 248, 551, 552, 249, 369, 490, 250, 491, 370,
	251, 252, 253, 254, 255, 553, 256, 371, 257, 372,
	258, 554, 259, 260, 261, 262, 263, 373, 264, 265,
	555, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 556, 278, 492, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 557, 290, 375, 289, 291,
	292, 558, 293, 282, 283, 294, 493, 295, 376, 377,
	296, 559, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 560, 304, 561, 305, 306, 307, 308, 309,
	310, 311, 562, 380, 381, 382, 563, 564, 312, 313,
	383, 384, 565, 314, 315, 316, 317, 566, 567, 318,
	319, 320, 321, 568, 322, 569, 385, 323, 324, 325,
	386, 387, 570, 571, 326, 572, 573, 574, 575, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 1559, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 176, 177, 494, 178, 495, 496, 497, 498,
	332, 499, 500, 501, 502, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 503, 183, 339, 340, 184,
	185, 504, 505, 341, 342, 343, 506, 186, 344, 507,
	480, 508, 187, 188, 189, 0, 190, 509, 191, 192,
	193, 510, 481, 194, 195, 196, 511, 512, 514, 513,
	515, 516, 517, 197, 198, 395, 199, 345, 200, 346,
	347, 518, 201, 519, 202, 520, 203, 521, 522, 204,
	205, 523, 206, 524, 0, 525, 348, 207, 208, 209,
	349, 350, 526, 527, 528, 210, 211, 351, 352, 353,
	0, 212, 529, 213, 530, 531, 482, 532, 214, 354,
	533, 355, 534, 215, 216, 217, 218, 219, 356, 357,
	484, 535, 223, 536, 220, 537, 483, 221, 358, 222,
	359, 360, 361, 362, 363, 538, 364, 539, 485, 224,
	225, 226, 486, 227, 228, 229, 540, 231, 230, 541,
	365, 487, 232, 488, 542, 233, 543, 544, 234, 0,
	235, 236, 237, 239, 366, 238, 489, 240, 241, 243,
	242, 545, 546, 547, 367, 244, 368, 245, 246, 548,
	247, 549, 550, 248, 551, 552, 249, 369, 490, 250,
	491, 370, 251, 252, 253, 254, 255, 553, 256, 371,
	257, 372, 258, 554, 259, 260, 261, 262, 263, 373,
	264, 265, 555, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 556, 278, 492, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 557, 290, 375,
	289, 291, 292, 558, 293, 282, 283, 294, 493, 295,
	376, 377, 296, 559, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 560, 304, 561, 305, 306, 307,
	308, 309, 310, 311, 562, 380, 381, 382, 563, 564,
	312, 313, 383, 384, 565, 314, 315, 316, 317, 566,
	567, 318, 319, 320, 321, 568, 322, 569, 385, 323,
	324, 325, 386, 387, 570, 571, 326, 572, 573, 574,
	575, 327, 328, 329, 330, 331, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2189, 176, 177, 494, 178, 495,
	496, 497, 498, 332, 499, 500, 501, 502, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 503, 183,
	339, 340, 184, 185, 504, 505, 341, 342, 343, 506,
	186, 344, 507, 480, 508, 187, 188, 189, 0, 190,
	509, 191, 192, 193, 510, 481, 194, 195, 196, 511,
	512, 514, 513, 515, 516, 517, 197, 198, 395, 199,
	345, 200, 346, 347, 518, 201, 519, 202, 520, 203,
	521, 522, 204, 205, 523, 206, 524, 0, 525, 348,
	207, 208, 209, 349, 350, 526, 527, 528, 210, 211,
	351, 352, 353, 0, 212, 529, 213, 530, 531, 482,
	532, 214, 354, 533, 355, 534, 215, 216, 217, 218,
	219, 356, 357, 484, 535, 223, 536, 220, 537, 483,
	221, 358, 222, 359, 360, 361, 362, 363, 538, 364,
	539, 485, 224, 225, 226, 486, 227, 228, 229, 540,
	231, 230, 541, 365, 487, 232, 488, 542, 233, 543,
	544, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 545, 546, 547, 367, 244, 368,
	245, 246, 548, 247, 549, 550, 248, 551, 552, 249,
	369, 490, 250, 491, 370, 251, 252, 253, 254, 255,
	553, 256, 371, 257, 372, 258, 554, 259, 260, 261,
	262, 263, 373, 264, 265, 555, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 556, 278,
	492, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	557, 290, 375, 289, 291, 292, 558, 293, 282, 283,
	294, 493, 295, 376, 377, 296, 559, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 560, 304, 561,
	305, 306, 307, 308, 309, 310, 311, 562, 380, 381,
	382, 563, 564, 312, 313, 383, 384, 565, 314, 315,
	316, 317, 566, 567, 318, 319, 320, 321, 568, 322,
	569, 385, 323, 324, 325, 386, 387, 570, 571, 326,
	572, 573, 574, 575, 327, 328, 329, 330, 331, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1193, 0, 0, 176, 177, 494, 178, 495,
	496, 497, 498, 332, 499, 500, 501, 502, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 503, 183,
	339, 340, 184, 185, 504, 505, 341, 342, 343, 506,
	186, 344, 507, 480, 508, 187, 188, 189, 0, 190,
	509, 191, 192, 193, 510, 481, 194, 195, 196, 511,
	512, 514, 513, 515, 516, 517, 197, 198, 395, 199,
	345, 200, 346, 347, 518, 201, 519, 202, 520, 203,
	521, 522, 204, 205, 523, 206, 524, 0, 525, 348,
	207, 208, 209, 349, 350, 526, 527, 528, 210, 211,
	351, 352, 353, 0, 212, 529, 213, 530, 531, 482,
	532, 214, 354, 533, 355, 534, 215, 216, 217, 218,
	219, 356, 357, 484, 535, 223, 536, 220, 537, 483,
	221, 358, 222, 359, 360, 361, 362, 363, 538, 364,
	539, 485, 224, 225, 226, 486, 227, 228, 229, 540,
	231, 230, 541, 365, 487, 232, 488, 542, 233, 543,
	544, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 545, 546, 547, 367, 244, 368,
	245, 246, 548, 247, 549, 550, 248, 551, 552, 249,
	369, 490, 250, 491, 370, 251, 252, 253, 254, 255,
	553, 256, 371, 257, 372, 258, 554, 259, 260, 261,
	262, 263, 373, 264, 265, 555, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 556, 278,
	492, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	557, 290, 375, 289, 291, 292, 558, 293, 282, 283,
	294, 493, 295, 376, 377, 296, 559, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 560, 304, 561,
	305, 306, 307, 308, 309, 310, 311, 562, 380, 381,
	382, 563, 564, 312, 313, 383, 384, 565, 314, 315,
	316, 317, 566, 567, 318, 319, 320, 321, 568, 322,
	569, 385, 323, 324, 325, 386, 387, 570, 571, 326,
	572, 573, 574, 575, 327, 328, 329, 330, 331, 1460,
	0, 727, 716, 717, 714, 715, 706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 1457,
	178, 0, 0, 0, 0, 744, 709, 0, 0, 0,
	179, 180, 181, 333, 759, 335, 760, 182, 761, 762,
	0, 183, 339, 340, 184, 185, 712, 743, 763, 764,
	343, 0, 186, 755, 0, 735, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 481, 194, 195,
	196, 0, 736, 737, 739, 0, 738, 740, 197, 198,
	395, 199, 765, 200, 766, 767, 0, 201, 0, 202,
	0, 203, 1458, 0, 758, 205, 0, 206, 0, 0,
	0, 700, 207, 208, 209, 745, 746, 723, 0, 0,
	210, 211, 768, 769, 770, 0, 212, 0, 213, 0,
	0, 482, 0, 214, 756, 0, 355, 0, 215, 216,
	217, 218, 219, 752, 754, 484, 0, 223, 0, 220,
	0, 483, 221, 771, 222, 772, 773, 774, 775, 776,
	0, 734, 0, 485, 224, 225, 226, 486, 227, 228,
	229, 0, 231, 230, 0, 757, 487, 232, 488, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 489, 240, 241, 243, 242, 695, 0, 724, 753,
	244, 777, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 490, 250, 491, 747, 251, 252, 253,
	254, 255, 0, 256, 748, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 778, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 492, 279, 280, 701, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 741, 293,
	282, 283, 294, 493, 295, 779, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 780, 300, 301, 749, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 781, 782, 0, 0, 312, 313, 750, 751, 722,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	742, 322, 0, 385, 323, 324, 325, 386, 783, 1456,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 696, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 692, 693, 1459, 727, 716, 717, 714, 715,
	706, 702, 1454, 0, 0, 0, 0, 705, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	690, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 133, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 135, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 911, 783, 0, 0, 326, 0, 0, 0, 127,
	327, 328, 329, 330, 331, 696, 128, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	678, 705, 727, 716, 717, 714, 715, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 133, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 135, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 911, 783,
	0, 0, 326, 0, 0, 0, 127, 327, 328, 329,
	330, 331, 696, 128, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 727, 716, 717, 714, 715,
	706, 0, 1083, 0, 0, 0, 0, 0, 705, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	0, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 133, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 135, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 911, 783, 0, 0, 326, 0, 0, 0, 127,
	327, 328, 329, 330, 331, 696, 128, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 727, 716,
	717, 714, 715, 706, 0, 1083, 0, 0, 0, 0,
	0, 705, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 744, 709, 0, 0, 0, 179, 180, 181,
	333, 759, 335, 760, 182, 761, 762, 1512, 183, 339,
	340, 184, 185, 712, 743, 763, 764, 343, 0, 186,
	755, 0, 735, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 736,
	737, 739, 0, 738, 740, 197, 198, 395, 199, 765,
	200, 766, 767, 0, 201, 0, 202, 0, 203, 0,
	0, 758, 205, 0, 206, 0, 0, 0, 700, 207,
	208, 209, 745, 746, 723, 0, 0, 210, 211, 768,
	769, 770, 0, 212, 0, 213, 0, 1517, 482, 0,
	214, 756, 0, 355, 0, 215, 216, 217, 218, 219,
	752, 754, 484, 0, 223, 0, 220, 0, 483, 221,
	771, 222, 772, 773, 774, 775, 776, 0, 734, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 1513, 757, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 695, 0, 724, 753, 244, 777, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 747, 251, 252, 253, 254, 255, 0,
	256, 748, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 778, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 701, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 741, 293, 282, 283, 294,
	493, 295, 779, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 780, 300, 301, 749, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 781, 782,
	0, 1514, 312, 313, 750, 751, 722, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 742, 322, 0,
	385, 323, 324, 325, 386, 783, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 696, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 692,
	693, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 0, 0, 686, 705, 727, 716, 717, 714, 715,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	690, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	688, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 727, 716,
	717, 714, 715, 706, 0, 702, 0, 0, 0, 0,
	0, 705, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 744, 709, 0, 0, 0, 179, 180, 181,
	333, 759, 335, 760, 182, 761, 762, 0, 183, 339,
	340, 184, 185, 712, 743, 763, 764, 343, 0, 186,
	755, 0, 735, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 736,
	737, 739, 0, 738, 740, 197, 198, 395, 199, 765,
	200, 766, 767, 0, 201, 0, 202, 0, 203, 0,
	0, 758, 205, 0, 206, 0, 0, 0, 700, 207,
	208, 209, 745, 746, 723, 0, 0, 210, 211, 768,
	769, 770, 0, 212, 0, 213, 0, 0, 482, 0,
	214, 756, 0, 355, 0, 215, 216, 217, 218, 219,
	752, 754, 484, 0, 223, 0, 220, 0, 483, 221,
	771, 222, 772, 773, 774, 775, 776, 0, 734, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 0, 757, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 695, 2118, 724, 753, 244, 777, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 747, 251, 252, 253, 254, 255, 0,
	256, 748, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 778, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 701, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 741, 293, 282, 283, 294,
	493, 295, 779, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 780, 300, 301, 749, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 781, 782,
	0, 0, 312, 313, 750, 751, 722, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 742, 322, 0,
	385, 323, 324, 325, 386, 783, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 696, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 692,
	693, 1143, 727, 716, 717, 714, 715, 706, 702, 0,
	0, 0, 0, 0, 705, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 1373,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 1372,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 696, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 727, 716, 717, 714, 715,
	706, 0, 702, 0, 0, 0, 0, 0, 705, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	690, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	688, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 727, 716,
	717, 714, 715, 706, 0, 702, 0, 0, 0, 0,
	0, 705, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 744, 709, 0, 0, 0, 179, 180, 181,
	333, 759, 335, 760, 182, 761, 762, 0, 183, 339,
	340, 184, 185, 712, 743, 763, 764, 343, 0, 186,
	755, 0, 735, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 736,
	737, 739, 0, 738, 740, 197, 198, 395, 199, 765,
	200, 766, 767, 0, 201, 0, 202, 0, 203, 0,
	0, 758, 205, 0, 206, 0, 0, 0, 700, 207,
	208, 209, 745, 746, 723, 0, 0, 210, 211, 768,
	769, 770, 0, 212, 0, 213, 0, 0, 482, 0,
	214, 756, 0, 355, 0, 215, 216, 217, 218, 219,
	752, 754, 484, 0, 223, 0, 220, 0, 483, 221,
	771, 222, 772, 773, 774, 775, 776, 0, 734, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 0, 757, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 695, 0, 724, 753, 244, 777, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 747, 251, 252, 253, 254, 255, 0,
	256, 748, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 778, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 701, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 741, 293, 282, 283, 294,
	493, 295, 779, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 780, 300, 301, 749, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 781, 782,
	0, 0, 312, 313, 750, 751, 722, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 742, 322, 0,
	385, 323, 324, 325, 386, 783, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 696, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 692,
	693, 0, 0, 0, 0, 0, 1087, 1449, 702, 0,
	0, 0, 0, 0, 705, 727, 716, 717, 714, 715,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	690, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 727, 716,
	717, 714, 715, 706, 0, 702, 0, 0, 0, 0,
	0, 705, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 744, 709, 0, 0, 0, 179, 180, 181,
	333, 759, 335, 760, 182, 761, 762, 0, 183, 339,
	340, 184, 185, 712, 743, 763, 764, 343, 0, 186,
	755, 0, 735, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 736,
	737, 739, 0, 738, 740, 197, 198, 395, 199, 765,
	200, 766, 767, 0, 201, 0, 202, 0, 203, 0,
	0, 758, 205, 0, 206, 0, 0, 0, 700, 207,
	208, 209, 745, 746, 723, 0, 0, 210, 211, 768,
	769, 770, 0, 212, 0, 213, 0, 0, 482, 0,
	214, 756, 0, 355, 0, 215, 216, 217, 218, 219,
	752, 754, 484, 0, 223, 0, 220, 0, 483, 221,
	771, 222, 772, 773, 774, 775, 776, 0, 734, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 0, 757, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 695, 0, 724, 753, 244, 777, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 747, 251, 252, 253, 254, 255, 0,
	256, 748, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 778, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 701, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 741, 293, 282, 283, 294,
	493, 295, 779, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 780, 300, 301, 749, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 781, 782,
	0, 0, 312, 313, 750, 751, 722, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 742, 322, 0,
	385, 323, 324, 325, 386, 783, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 696, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 692,
	693, 727, 716, 717, 714, 715, 706, 0, 702, 2028,
	0, 0, 0, 0, 705, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 744, 709, 0, 0, 0,
	179, 180, 181, 333, 759, 335, 760, 182, 761, 762,
	0, 183, 339, 340, 184, 185, 712, 743, 763, 764,
	343, 0, 186, 755, 0, 735, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 481, 194, 195,
	196, 0, 736, 737, 739, 0, 738, 740, 197, 198,
	395, 199, 765, 200, 766, 767, 0, 201, 0, 202,
	0, 203, 0, 0, 758, 205, 0, 206, 0, 0,
	0, 700, 207, 208, 209, 745, 746, 723, 0, 0,
	210, 211, 768, 769, 770, 0, 212, 0, 213, 0,
	0, 482, 0, 214, 756, 0, 355, 0, 215, 216,
	217, 218, 219, 752, 754, 484, 0, 223, 0, 220,
	0, 483, 221, 771, 222, 772, 773, 774, 775, 776,
	0, 734, 0, 485, 224, 225, 226, 486, 227, 228,
	229, 0, 231, 230, 0, 757, 487, 232, 488, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 489, 240, 241, 243, 242, 695, 0, 724, 753,
	244, 777, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 490, 250, 491, 747, 251, 252, 253,
	254, 255, 0, 256, 748, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 778, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 492, 279, 280, 701, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 741, 293,
	282, 283, 294, 493, 295, 779, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 780, 300, 301, 749, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 781, 782, 0, 0, 312, 313, 750, 751, 722,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	742, 322, 0, 385, 323, 324, 325, 386, 783, 1977,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 696, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 692, 693, 727, 716, 717, 714, 715, 706,
	0, 702, 0, 0, 0, 0, 0, 705, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 744, 709,
	0, 0, 0, 179, 180, 181, 333, 759, 335, 760,
	182, 761, 762, 0, 183, 339, 340, 184, 185, 712,
	743, 763, 764, 343, 0, 186, 755, 0, 735, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	481, 194, 195, 196, 0, 736, 737, 739, 0, 738,
	740, 197, 198, 395, 199, 765, 200, 766, 767, 0,
	201, 0, 202, 0, 203, 0, 0, 758, 205, 0,
	206, 0, 0, 0, 700, 207, 208, 209, 745, 746,
	723, 0, 0, 210, 211, 768, 769, 770, 0, 212,
	0, 213, 0, 0, 482, 0, 214, 756, 0, 355,
	0, 215, 216, 217, 218, 219, 752, 754, 484, 0,
	223, 0, 220, 0, 483, 221, 771, 222, 772, 773,
	774, 775, 776, 0, 734, 0, 485, 224, 225, 226,
	486, 227, 228, 229, 0, 231, 230, 0, 757, 487,
	232, 488, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 489, 240, 241, 243, 242, 695,
	0, 724, 753, 244, 777, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 490, 250, 491, 747,
	251, 252, 253, 254, 255, 0, 256, 748, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 778, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 492, 279, 280, 701, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 741, 293, 282, 283, 294, 493, 295, 779, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 780, 300,
	301, 749, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 781, 782, 0, 0, 312, 313,
	750, 751, 722, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 742, 322, 0, 385, 323, 324, 325,
	386, 783, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 696, 0, 0, 0, 0, 0,
	694, 0, 0, 0, 0, 692, 693, 727, 716, 717,
	714, 715, 706, 0, 702, 1967, 0, 0, 0, 0,
	705, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 744, 709, 0, 0, 0, 179, 180, 181, 333,
	759, 335, 760, 182, 761, 762, 0, 183, 339, 340,
	184, 185, 712, 743, 763, 764, 343, 0, 186, 755,
	0, 735, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 481, 194, 195, 196, 0, 736, 737,
	739, 0, 738, 740, 197, 198, 395, 199, 765, 200,
	766, 767, 0, 201, 0, 202, 0, 203, 0, 0,
	758, 205, 0, 206, 0, 0, 0, 700, 207, 208,
	209, 745, 746, 723, 0, 0, 210, 211, 768, 769,
	770, 0, 212, 0, 213, 0, 0, 482, 0, 214,
	756, 0, 355, 0, 215, 216, 217, 218, 219, 752,
	754, 484, 0, 223, 0, 220, 0, 483, 221, 771,
	222, 772, 773, 774, 775, 776, 0, 734, 0, 485,
	224, 225, 226, 486, 227, 228, 229, 0, 231, 230,
	0, 757, 487, 232, 488, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 489, 240, 241,
	243, 242, 695, 0, 724, 753, 244, 777, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 490,
	250, 491, 747, 251, 252, 253, 254, 255, 0, 256,
	748, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	778, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 492, 279,
	280, 701, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 741, 293, 282, 283, 294, 493,
	295, 779, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 780, 300, 301, 749, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 781, 782, 0,
	0, 312, 313, 750, 751, 722, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 742, 322, 0, 385,
	323, 324, 325, 386, 783, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 696, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 692, 693,
	1143, 727, 716, 717, 714, 715, 706, 702, 0, 0,
	0, 0, 0, 705, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 744, 709, 0, 0, 0,
	179, 180, 181, 333, 759, 335, 760, 182, 761, 762,
	0, 183, 339, 340, 184, 185, 712, 743, 763, 764,
	343, 0, 186, 755, 0, 735, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 481, 194, 195,
	196, 0, 736, 737, 739, 0, 738, 740, 197, 198,
	395, 199, 765, 200, 766, 767, 0, 201, 0, 202,
	0, 203, 0, 0, 758, 205, 0, 206, 0, 0,
	0, 700, 207, 208, 209, 745, 746, 723, 0, 0,
	210, 211, 768, 769, 770, 0, 212, 0, 213, 0,
	1517, 482, 0, 214, 756, 0, 355, 0, 215, 216,
	217, 218, 219, 752, 754, 484, 0, 223, 0, 220,
	0, 483, 221, 771, 222, 772, 773, 774, 775, 776,
	0, 734, 0, 485, 224, 225, 226, 486, 227, 228,
	229, 0, 231, 230, 0, 757, 487, 232, 488, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 489, 240, 241, 243, 242, 695, 0, 724, 753,
	244, 777, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 490, 250, 491, 747, 251, 252, 253,
	254, 255, 0, 256, 748, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 778, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 492, 279, 280, 701, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 741, 293,
	282, 283, 294, 493, 295, 779, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 780, 300, 301, 749, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 781, 782, 0, 0, 312, 313, 750, 751, 722,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	742, 322, 0, 385, 323, 324, 325, 386, 783, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 696, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 692, 693, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 0, 0, 1562, 705, 727, 716,
	717, 714, 715, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 744, 709, 0, 0, 0, 179, 180, 181,
	333, 759, 335, 760, 182, 761, 762, 0, 183, 339,
	340, 184, 185, 712, 743, 763, 764, 343, 0, 186,
	755, 0, 735, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 736,
	737, 739, 0, 738, 740, 197, 198, 395, 199, 765,
	200, 766, 767, 0, 201, 0, 202, 0, 203, 0,
	0, 758, 205, 0, 206, 0, 0, 0, 700, 207,
	208, 209, 745, 746, 723, 0, 0, 210, 211, 768,
	769, 770, 0, 212, 0, 213, 0, 0, 482, 0,
	214, 756, 0, 355, 0, 215, 216, 217, 218, 219,
	752, 754, 484, 0, 223, 0, 220, 0, 483, 221,
	771, 222, 772, 773, 774, 775, 776, 0, 734, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 0, 757, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 695, 0, 724, 753, 244, 777, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 747, 251, 252, 253, 254, 255, 0,
	256, 748, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 778, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 701, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 741, 293, 282, 283, 294,
	493, 295, 779, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 780, 300, 301, 749, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 781, 782,
	0, 0, 312, 313, 750, 751, 722, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 742, 322, 0,
	385, 323, 324, 325, 386, 783, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 696, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 692,
	693, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 0, 0, 1526, 705, 727, 716, 717, 714, 715,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	0, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 0, 0,
	1524, 705, 727, 716, 717, 714, 715, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 696, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 1508, 705, 727,
	716, 717, 714, 715, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 744, 709, 0, 0, 0, 179, 180,
	181, 333, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 712, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 700,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 0, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 695, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 701, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 783, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 696,
	0, 0, 0, 0, 0, 694, 0, 0, 0, 0,
	692, 693, 0, 0, 0, 0, 0, 0, 0, 702,
	0, 0, 0, 0, 1496, 705, 727, 716, 717, 714,
	715, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	744, 709, 0, 0, 0, 179, 180, 181, 333, 759,
	335, 760, 182, 761, 762, 0, 183, 339, 340, 184,
	185, 712, 743, 763, 764, 343, 0, 186, 755, 0,
	735, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 481, 194, 195, 196, 0, 736, 737, 739,
	0, 738, 740, 197, 198, 395, 199, 765, 200, 766,
	767, 0, 201, 0, 202, 0, 203, 0, 0, 758,
	205, 0, 206, 0, 0, 0, 700, 207, 208, 209,
	745, 746, 723, 0, 0, 210, 211, 768, 769, 770,
	0, 212, 0, 213, 0, 0, 482, 0, 214, 756,
	0, 355, 0, 215, 216, 217, 218, 219, 752, 754,
	484, 0, 223, 0, 220, 0, 483, 221, 771, 222,
	772, 773, 774, 775, 776, 0, 734, 0, 485, 224,
	225, 226, 486, 227, 228, 229, 0, 231, 230, 0,
	757, 487, 232, 488, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 489, 240, 241, 243,
	242, 695, 0, 724, 753, 244, 777, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 490, 250,
	491, 747, 251, 252, 253, 254, 255, 0, 256, 748,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 778,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 492, 279, 280,
	701, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 741, 293, 282, 283, 294, 493, 295,
	779, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	780, 300, 301, 749, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 781, 782, 0, 0,
	312, 313, 750, 751, 722, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 742, 322, 0, 385, 323,
	324, 325, 386, 783, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 696, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 692, 693, 0,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	0, 1494, 705, 1486, 716, 717, 714, 715, 706, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 196, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 1489, 766, 767, 0, 201,
	0, 202, 0, 203, 0, 0, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 1490, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 1491, 1488,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 1492, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 0, 312, 313, 750,
	751, 722, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 1487, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 0, 1483, 705,
	1486, 716, 717, 714, 715, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 744, 709, 0, 0, 0, 179,
	180, 181, 333, 759, 335, 760, 182, 761, 762, 0,
	183, 339, 340, 184, 185, 712, 743, 763, 764, 343,
	0, 186, 755, 0, 735, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 481, 194, 195, 196,
	0, 736, 737, 739, 0, 738, 740, 197, 198, 395,
	199, 765, 1489, 766, 767, 0, 201, 0, 202, 0,
	203, 0, 0, 758, 205, 0, 206, 0, 0, 0,
	700, 207, 208, 209, 745, 746, 723, 0, 0, 210,
	211, 768, 769, 770, 0, 212, 0, 213, 0, 0,
	482, 0, 214, 756, 0, 355, 0, 215, 216, 1490,
	218, 219, 752, 754, 484, 0, 223, 0, 220, 0,
	483, 221, 771, 222, 772, 773, 774, 775, 776, 0,
	734, 0, 485, 224, 225, 226, 486, 227, 228, 229,
	0, 231, 230, 0, 757, 487, 232, 488, 0, 233,
	0, 0, 234, 0, 235, 1491, 1488, 239, 366, 238,
	489, 240, 241, 243, 242, 695, 0, 724, 753, 244,
	777, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 490, 250, 491, 747, 251, 252, 253, 254,
	255, 0, 256, 748, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 778, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 492, 279, 280, 701, 281, 0, 285, 286, 287,
	1492, 0, 290, 375, 289, 291, 292, 741, 293, 282,
	283, 294, 493, 295, 779, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 780, 300, 301, 749, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	781, 782, 0, 0, 312, 313, 750, 751, 722, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 742,
	322, 0, 385, 323, 324, 325, 386, 783, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 1487, 331,
	696, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 692, 693, 727, 716, 717, 714, 715, 706, 0,
	702, 0, 0, 0, 0, 0, 705, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 196, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 200, 766, 767, 0, 201,
	0, 202, 0, 203, 0, 0, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 217, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 0, 312, 313, 750,
	751, 722, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 727, 716, 717, 714,
	715, 706, 0, 702, 1444, 0, 0, 0, 0, 705,
	0, 0, 176, 177, 1360, 178, 0, 0, 0, 0,
	744, 709, 0, 0, 0, 179, 180, 181, 333, 759,
	335, 760, 182, 761, 762, 0, 183, 339, 340, 184,
	185, 712, 743, 763, 764, 343, 0, 186, 755, 0,
	735, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 481, 194, 195, 196, 0, 736, 737, 739,
	0, 738, 740, 197, 198, 395, 199, 765, 200, 766,
	767, 0, 201, 0, 202, 0, 203, 0, 0, 758,
	205, 0, 206, 0, 0, 0, 700, 207, 208, 209,
	745, 746, 723, 0, 0, 210, 211, 768, 769, 770,
	0, 212, 0, 213, 0, 0, 482, 0, 214, 756,
	0, 355, 0, 215, 216, 217, 218, 219, 752, 754,
	484, 0, 223, 0, 220, 0, 483, 221, 771, 222,
	772, 773, 774, 775, 776, 0, 734, 0, 485, 224,
	225, 226, 486, 227, 228, 229, 0, 231, 230, 0,
	757, 487, 232, 488, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 489, 240, 241, 243,
	242, 695, 0, 724, 753, 244, 777, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 490, 250,
	491, 747, 251, 252, 253, 254, 255, 0, 256, 748,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 778,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 492, 279, 280,
	701, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 741, 293, 282, 283, 294, 493, 295,
	779, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	780, 300, 301, 749, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 781, 782, 0, 0,
	312, 313, 750, 751, 722, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 742, 322, 0, 385, 323,
	324, 325, 386, 783, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 696, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 692, 693, 0,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	0, 855, 705, 727, 716, 717, 714, 715, 706, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 196, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 200, 766, 767, 0, 201,
	0, 202, 0, 203, 0, 0, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 217, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 0, 312, 313, 750,
	751, 722, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 0, 853, 705,
	727, 716, 717, 714, 715, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 744, 709, 0, 0, 0, 179,
	180, 181, 333, 759, 335, 760, 182, 761, 762, 0,
	183, 339, 340, 184, 185, 712, 743, 763, 764, 343,
	0, 186, 755, 0, 735, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 481, 194, 195, 196,
	0, 736, 737, 739, 0, 738, 740, 197, 198, 395,
	199, 765, 200, 766, 767, 0, 201, 0, 202, 0,
	203, 0, 0, 758, 205, 0, 206, 0, 0, 0,
	700, 207, 208, 209, 745, 746, 723, 0, 0, 210,
	211, 768, 769, 770, 0, 212, 0, 213, 0, 0,
	482, 0, 214, 756, 0, 355, 0, 215, 216, 217,
	218, 219, 752, 754, 484, 0, 223, 0, 220, 0,
	483, 221, 771, 222, 772, 773, 774, 775, 776, 0,
	734, 0, 485, 224, 225, 226, 486, 227, 228, 229,
	0, 231, 230, 0, 757, 487, 232, 488, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	489, 240, 241, 243, 242, 695, 0, 724, 753, 244,
	777, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 490, 250, 491, 747, 251, 252, 253, 254,
	255, 0, 256, 748, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 778, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 492, 279, 280, 701, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 741, 293, 282,
	283, 294, 493, 295, 779, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 780, 300, 301, 749, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	781, 782, 0, 0, 312, 313, 750, 751, 722, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 742,
	322, 0, 385, 323, 324, 325, 386, 783, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	696, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 692, 693, 727, 716, 717, 714, 715, 706, 0,
	702, 0, 0, 0, 0, 0, 705, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 2429, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 200, 766, 767, 0, 201,
	0, 202, 0, 203, 0, 0, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 217, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 0, 312, 313, 750,
	751, 722, 314, 315, 2428, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 727, 716, 717, 714,
	715, 706, 0, 702, 0, 0, 0, 0, 0, 705,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	744, 709, 0, 0, 0, 179, 180, 181, 333, 759,
	335, 760, 182, 761, 762, 0, 183, 339, 340, 184,
	185, 712, 743, 763, 764, 343, 0, 186, 755, 0,
	735, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 481, 194, 195, 196, 0, 736, 737, 739,
	0, 738, 740, 197, 198, 395, 199, 765, 200, 766,
	767, 0, 201, 0, 202, 0, 203, 0, 0, 758,
	205, 0, 206, 0, 0, 0, 700, 207, 208, 209,
	745, 746, 723, 0, 0, 210, 211, 768, 769, 770,
	0, 212, 0, 213, 0, 0, 482, 0, 214, 756,
	0, 355, 0, 215, 216, 217, 218, 219, 752, 754,
	484, 0, 223, 0, 220, 0, 483, 221, 771, 222,
	772, 773, 774, 775, 776, 0, 734, 0, 485, 224,
	225, 226, 486, 227, 228, 229, 0, 231, 230, 0,
	757, 487, 232, 488, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 489, 240, 241, 243,
	242, 695, 0, 724, 753, 244, 777, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 490, 250,
	491, 747, 251, 252, 253, 254, 255, 0, 256, 748,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 778,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 492, 279, 280,
	701, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 741, 293, 282, 283, 294, 493, 295,
	779, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	780, 300, 301, 749, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 781, 782, 0, 0,
	312, 313, 750, 751, 722, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 742, 322, 0, 385, 323,
	324, 325, 386, 783, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 696, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 692, 693, 727,
	716, 717, 714, 715, 706, 0, 702, 0, 0, 0,
	0, 0, 705, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 744, 709, 0, 0, 0, 179, 180,
	181, 2427, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 712, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 2429, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 700,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 0, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 695, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 701, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	2428, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 783, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 696,
	0, 0, 0, 0, 0, 694, 0, 0, 0, 0,
	692, 693, 727, 716, 717, 714, 715, 706, 0, 702,
	0, 0, 0, 0, 0, 705, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 0, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 1506, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 727, 716, 717, 714, 715, 706, 1504, 0,
	0, 0, 0, 1502, 1503, 0, 0, 0, 176, 177,
	0, 178, 1505, 0, 0, 0, 744, 709, 705, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 0, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 0, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 1506, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 727, 716, 717, 714, 715, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 1505, 0, 0, 0, 744, 709, 705, 0,
	0, 179, 180, 181, 0, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 2429, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 0, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 0, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 0, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 2428, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 692, 693, 0, 0, 0, 176, 177,
	0, 178, 702, 0, 0, 0, 744, 0, 705, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 743, 341,
	342, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 745, 746, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 0, 0, 0,
	753, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 750, 751,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 0, 326, 904, 0, 907, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 2077, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 480,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 484,
	0, 223, 0, 220, 0, 483, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 365,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 133, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 493, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 135, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 911, 387, 0, 0, 326, 678, 0, 173, 127,
	327, 328, 329, 330, 331, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 119, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 828, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 133,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 135, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 911, 387, 0, 0, 326, 0,
	173, 0, 127, 327, 328, 329, 330, 331, 0, 128,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 822, 0, 1165, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 828, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 133, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	135, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 911, 387, 0, 0,
	326, 678, 0, 173, 127, 327, 328, 329, 330, 331,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 822, 0,
	1165, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 133, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 135, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 911,
	387, 0, 0, 326, 1826, 0, 173, 127, 327, 328,
	329, 330, 331, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 119, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 828, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 0, 326, 821, 0, 173,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 822, 0, 827, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 828, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 0, 326,
	0, 173, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 822, 0, 827,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 828, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	0, 326, 0, 173, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 822,
	0, 827, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 0, 326, 0, 0, 173, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 1195, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 0, 326, 0, 173, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 1644, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 0, 326, 0,
	173, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 1992, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	727, 716, 717, 714, 715, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	1168, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 759, 335, 760, 182, 761, 762, 0,
	183, 339, 340, 184, 185, 0, 0, 763, 764, 343,
	0, 186, 344, 0, 480, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 481, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 765, 200, 766, 767, 0, 201, 0, 202, 0,
	203, 0, 0, 758, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 723, 0, 0, 210,
	211, 768, 769, 770, 0, 212, 0, 213, 0, 0,
	482, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 484, 0, 223, 0, 220, 0,
	483, 221, 771, 222, 772, 773, 774, 775, 776, 0,
	734, 0, 485, 224, 225, 226, 486, 227, 228, 229,
	0, 231, 230, 0, 365, 487, 232, 488, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	489, 240, 241, 243, 242, 0, 0, 724, 367, 244,
	777, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 490, 250, 491, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 778, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 492, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 493, 295, 779, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 780, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	781, 782, 0, 0, 312, 313, 383, 384, 722, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 783, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	961, 0, 907, 965, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 480, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 484, 0, 223, 0,
	220, 0, 483, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 365, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 493, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 583, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 169, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 168, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 166, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 172, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 169, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 168, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 907, 965, 326, 0, 0, 963, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 172, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 480, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 484, 0, 223, 0,
	220, 0, 483, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 365, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 493, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 169,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	168, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 907, 965,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 172, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 480, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 482, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 484, 0, 223, 0, 220, 0, 483, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 0, 365, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	493, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 907, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 172,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 480, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	481, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 482, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 484, 0,
	223, 0, 220, 0, 483, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 485, 224, 225, 226,
	486, 227, 228, 229, 0, 231, 230, 0, 365, 487,
	232, 488, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 489, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 490, 250, 491, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 492, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 493, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 1582, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 1580, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 1621,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	1585, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 1619,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 1584,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 1620, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	1582, 186, 344, 0, 0, 1577, 187, 188, 189, 0,
	190, 1580, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 1585, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 1576, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 1584, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 1583, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 882,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 828, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	834, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 836, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 828, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 830, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 832, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 828,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 412, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 411, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	410, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 1565, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 2137, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 173, 2137,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 2134, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 828, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 1349, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 1347, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 1329, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 609, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 940, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 611, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 606, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 1209, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	1208, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 609, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 940, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 611, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 606, 381,
	382, 0, 0, 312, 941, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 609, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 600, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 611,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 924, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 606,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 900,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 899, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	897, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 896, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 893, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 892, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 890, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 889, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 886, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 885, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 173, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 176,
	177, 874, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 872, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 871, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 868, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 866, 326, 173, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 862, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 864,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 840, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	842, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 838, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 609, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 600, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 599,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 611,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 601, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 602, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 606,
	381, 382, 0, 0, 312, 604, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 591,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 592, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	589, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 581, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 435, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 1873, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 173, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	1871, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 173, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 1860, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 173, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 592, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 173, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 1219, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	0, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 804, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 173, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 0, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 0,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 0, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 1033, 0, 0, 1064, 0, 1030, 1031, 0, 1050,
	1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 1032, 0, 0, 0, 1033,
	0, 1047, 1064, 0, 1030, 1031, 0, 1050, 1051, 1052,
	1060, 1061, 1062, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 1032, 0, 0, 0, 1033, 0, 1047,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1032, 0, 0, 0, 0, 1038, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 1065, 0, 0,
	0, 0, 0, 0, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 1065, 0, 0, 0, 1055,
	0, 0, 1038, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 1065, 0, 0, 0, 1055, 0, 0,
	1054, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 1054, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 0, 0, 0, 1054, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0,
	0, 0, 1058, 1053, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 1064, 1049, 1030, 1031, 0, 1050, 1051,
	1052, 1060, 1061, 1062, 0, 0, 0, 0, 0, 0,
	1058, 1053, 0, 0, 1032, 0, 0, 0, 1033, 0,
	1047, 1064, 1056, 0, 0, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 1032, 0, 0, 0, 0, 1760, 1047, 0,
	1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043, 1041,
	1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0, 0,
	0, 2400, 0, 0, 0, 1038, 0, 0, 1056, 0,
	0, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 1057, 1065, 0, 0, 2353,
	0, 0, 0, 1038, 0, 0, 0, 1768, 1769, 0,
	1786, 1787, 1788, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 1065, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 1055, 0, 0, 1054,
	1783, 0, 1048, 1053, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1054, 0, 0,
	0, 0, 0, 0, 1032, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 0, 0, 1030, 1031, 1774, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 1058, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 1049, 1033, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 1789, 0, 1038, 0, 0, 0, 0,
	1032, 0, 0, 0, 1030, 1031, 1047, 1050, 1051, 1052,
	1060, 1061, 1062, 0, 1784, 1057, 1065, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 1033, 0, 0,
	1064, 1056, 0, 1063, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 1055, 0,
	0, 1032, 2307, 0, 1048, 0, 0, 1047, 0, 1056,
	0, 1038, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042,
	1034, 1035, 1036, 1037, 1039, 1040, 0, 0, 0, 1054,
	2277, 1057, 1065, 0, 0, 0, 0, 1785, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 0, 1055, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 0, 1057, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 1054, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 0, 0,
	0, 1048, 0, 0, 1780, 1781, 1782, 0, 0, 1779,
	1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 0, 0,
	0, 0, 0, 1049, 0, 0, 1054, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	0, 0, 2272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0,
	1058, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 1064, 0, 0, 0, 1056, 0, 0,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 1032, 0, 0, 0, 2268, 0,
	1047, 1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062,
	0, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 1033, 0, 0, 1064, 1056, 0,
	0, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 0, 0, 0, 1032, 2210,
	0, 0, 0, 0, 1047, 1038, 0, 0, 0, 0,
	0, 0, 0, 1030, 1031, 0, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 0, 0, 1057, 1065, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 1033, 0, 0, 1064,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 1038,
	1032, 0, 0, 0, 1048, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1057,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 0, 0, 0, 1048, 0,
	0, 1038, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 1057, 1065, 1054, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 1030, 1031, 0, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 0, 0, 1054, 0, 1058, 0, 1053,
	0, 0, 0, 0, 0, 0, 1033, 0, 0, 1064,
	0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	1032, 0, 2176, 0, 0, 0, 1047, 0, 0, 0,
	0, 1030, 1031, 1049, 1050, 1051, 1052, 1060, 1061, 1062,
	0, 0, 0, 0, 0, 0, 0, 1053, 0, 1058,
	0, 0, 0, 0, 1033, 1056, 0, 1064, 1044, 1045,
	1046, 1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037,
	1039, 1040, 0, 0, 0, 0, 2175, 0, 1032, 0,
	0, 1038, 0, 0, 1047, 0, 0, 0, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	0, 1057, 1065, 0, 1053, 0, 0, 0, 0, 0,
	0, 1033, 0, 0, 1064, 0, 0, 1056, 0, 1063,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 1055, 1032, 0, 0, 2140, 1038,
	1048, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1057,
	1065, 0, 0, 0, 0, 1054, 0, 0, 0, 0,
	0, 1768, 1769, 0, 1786, 1787, 1788, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1963, 0, 0,
	0, 0, 1055, 0, 0, 0, 1038, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1049, 0, 0, 1057, 1065, 0, 0,
	0, 0, 0, 1054, 1783, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 0, 0, 1774,
	1054, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 0, 0, 0, 1789, 1995, 0,
	0, 0, 0, 0, 0, 0, 1030, 1031, 1049, 1050,
	1051, 1052, 1060, 1061, 1062, 0, 0, 0, 1784, 0,
	0, 0, 1053, 0, 1058, 0, 0, 0, 0, 1033,
	0, 0, 1064, 0, 0, 1056, 0, 0, 1044, 1045,
	1046, 1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037,
	1039, 1040, 0, 1032, 0, 0, 1971, 0, 0, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1785, 1056, 0, 0, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 0, 1445, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 39, 122,
	0, 0, 0, 1048, 0, 0, 0, 0, 1780, 1781,
	1782, 42, 0, 1779, 1777, 1778, 1770, 1771, 1772, 1773,
	1775, 1776, 0, 0, 0, 124, 0, 0, 1054, 0,
	0, 43, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 53, 0,
	0, 0, 59, 0, 0, 125, 0, 0, 0, 60,
	0, 61, 0, 0, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 1058, 0, 0, 63, 0, 0, 64, 1030,
	1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
	0, 0, 1033, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 1030, 1031, 0, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 0, 0, 0, 1032, 0, 0, 1053,
	0, 0, 1047, 0, 1703, 0, 1033, 0, 0, 1064,
	1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043, 1041,
	1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 65, 1730,
	1032, 0, 0, 0, 66, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 120, 67, 0, 68, 1038, 69, 1800,
	126, 0, 1799, 0, 0, 70, 1704, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 81, 1057, 1065, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 1038, 0, 1541, 0, 1063, 0, 0, 135, 1030,
	1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0,
	1055, 1057, 1065, 0, 0, 1053, 1048, 104, 0, 1540,
	0, 0, 1033, 0, 0, 1064, 121, 0, 0, 1063,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 1054, 127, 0, 1055, 0, 1032, 0, 0, 128,
	1048, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 1054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 1038, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1049, 0, 0, 0, 1057, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 1063, 0, 0, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	1055, 0, 0, 0, 1053, 0, 1048, 0, 0, 0,
	0, 1033, 0, 1056, 1064, 0, 1044, 1045, 1046, 1059,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	0, 1054, 0, 0, 0, 1032, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 1056, 0, 0,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 1038, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 1057, 1065, 0, 0,
	1033, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1032, 0, 0, 0, 0, 1055,
	1047, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 1044, 1045, 1046, 1059,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	1054, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1038, 1030, 1031, 0, 1050,
	1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 1057, 1065, 0, 1049, 1033,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 1032, 0, 0, 0, 0, 1055, 1047,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	42, 0, 1056, 0, 1038, 1044, 1045, 1046, 1059, 1806,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 48, 0, 1057, 1065, 0, 1049, 0, 1030,
	1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0,
	0, 0, 1063, 1058, 0, 1053, 0, 0, 0, 1801,
	0, 59, 1033, 0, 0, 1064, 0, 1055, 60, 0,
	61, 0, 0, 1048, 0, 0, 0, 0, 0, 1975,
	0, 0, 0, 0, 0, 0, 1032, 0, 0, 0,
	0, 0, 1047, 0, 63, 0, 0, 64, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 1038, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	0, 0, 1058, 0, 1053, 0, 0, 1057, 1065, 0,
	0, 1033, 0, 0, 1064, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1032, 0, 0, 0, 0,
	1055, 1047, 120, 67, 0, 68, 1048, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 461, 0, 0, 100, 0,
	1056, 1054, 0, 1044, 1045, 1046, 1059, 0, 1043, 1041,
	1042, 1034, 1035, 1036, 1037, 1039, 1040, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 1038, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 1065, 0, 1049,
	0, 1030, 1031, 134, 1050, 1051, 1052, 1060, 1061, 1062,
	0, 127, 0, 0, 1063, 1058, 0, 1053, 128, 0,
	0, 1759, 0, 0, 1033, 0, 0, 1064, 0, 1055,
	0, 0, 0, 0, 0, 1048, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1032, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1766, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 1044, 1045, 1046, 1059,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 1038,
	1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0,
	0, 0, 0, 0, 1058, 0, 1053, 0, 0, 1057,
	1065, 0, 0, 1033, 0, 0, 1064, 0, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1032, 0, 0,
	0, 1033, 1055, 1047, 1064, 0, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 1768, 1769, 0,
	1786, 1787, 1788, 0, 0, 1032, 0, 0, 0, 0,
	0, 1047, 1056, 1054, 0, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1783, 0, 0, 0, 0, 0, 0, 0, 1057, 1065,
	0, 1049, 0, 0, 0, 0, 1038, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 1063, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 1065, 0, 0,
	1033, 1055, 0, 1064, 0, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 1063, 1774, 0, 437, 0, 0,
	0, 0, 0, 0, 1032, 0, 0, 0, 0, 1055,
	1047, 0, 1054, 0, 0, 1048, 1790, 0, 38, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 0, 1789, 0, 1056, 0, 0, 1044, 1045,
	1046, 1059, 42, 1043, 1041, 1042, 1034, 1035, 1036, 1037,
	1039, 1040, 0, 0, 1784, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 48, 1038, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 0, 1057, 1065, 38, 1049, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 39, 0,
	60, 0, 61, 0, 1058, 0, 0, 0, 0, 0,
	0, 42, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 1048, 0, 63, 1785, 0, 64,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 0, 0, 1044, 1045, 1046,
	1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039,
	1040, 0, 59, 0, 0, 0, 0, 0, 0, 60,
	0, 61, 1056, 0, 0, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 0, 0, 0, 63, 0, 1049, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 1058, 1780, 1781, 1782, 0, 0, 1779,
	1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 0, 0,
	0, 0, 0, 0, 120, 67, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 461, 0, 0,
	100, 0, 1268, 1258, 1287, 1250, 1278, 1277, 0, 0,
	1252, 1251, 0, 0, 0, 0, 1289, 1288, 65, 135,
	0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	0, 0, 0, 120, 67, 0, 68, 0, 0, 0,
	1283, 0, 1275, 1274, 0, 134, 0, 0, 0, 133,
	0, 0, 1273, 127, 0, 0, 461, 0, 0, 100,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 1270, 1271, 0, 0, 0, 0, 0, 135, 438,
	0, 0, 1268, 1258, 1287, 1250, 1278, 1277, 0, 0,
	1252, 1251, 0, 0, 0, 0, 1289, 1288, 0, 0,
	0, 1261, 1260, 1262, 1263, 1264, 1265, 1266, 0, 1286,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 128,
	1283, 0, 1275, 1274, 0, 0, 0, 1254, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 0, 119, 1276,
	0, 0, 0, 1259, 0, 0, 0, 0, 0, 0,
	1272, 1270, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 0, 0, 1380, 1378, 1379, 1382,
	1381, 1261, 1260, 1262, 1263, 1264, 1265, 1266, 0, 1286,
	0, 0, 630, 0, 656, 0, 0, 0, 0, 0,
	0, 0, 1255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 1267, 1256, 0, 0, 1254, 0, 0,
	0, 0, 0, 1291, 633, 0, 0, 0, 0, 1276,
	0, 0, 0, 1259, 0, 0, 1253, 0, 0, 1284,
	1285, 0, 0, 0, 0, 634, 0, 0, 0, 0,
	636, 0, 0, 0, 0, 642, 643, 0, 0, 652,
	0, 1257, 1269, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 657, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1255, 0, 0, 0, 655, 0, 0, 0,
	0, 0, 0, 1267, 1256, 0, 0, 0, 0, 0,
	0, 0, 0, 1291, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 1284,
	1285, 639, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 646,
	0, 1257, 641, 648, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 632,
	649, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 0, 0, 0, 654,
	0, 0, 0, 660, 0, 0, 0, 0, 647, 651,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 653,
}
var sqlPact = [...]int{

	39444, -1000, 5, -1000, -1000, 170, -1000, -1000, -1000, 168,
	167, 166, -1000, 165, 164, 162, -1000, 161, 159, 158,
	156, 155, 153, 152, 151, -1000, 148, -1000, -1000, -1000,
	-1000, 146, 145, 143, 141, 140, 138, 135, 1133, 22500,
	134, 133, 1273, 35298, 132, 130, 126, 123, 931, 119,
	117, 26010, 901, 1531, 115, 110, 108, 106, 104, 933,
	34980, 40755, 1930, 5865, 1084, 1537, 34659, 22179, 1534, 1736,
	34338, -1000, -1000, 34017, 103, 99, 96, 94, 93, -1000,
	-1000, 33696, 92, 86, 85, 83, 81, 80, 78, 71,
	70, 68, 67, 66, 65, 63, -1000, 62, 58, 57,
	41230, 53, 50, 48, 1048, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 125, -1000, 988, 427,
	1617, 7941, 971, 963, 962, 953, 964, 37206, 35298, 45,
	-41, 43, -1000, 1816, 602, 19585, 39444, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 25689, 25368, 33375, 33054, 739, -1000, 0, 23772, 35298,
	-1000, 173, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15286, 14929, 468, 173, -1000, -1000, -1000, -1000, -1000,
	32733, -1000, 32412, 32091, 1402, 31770, -1000, -1000, -1000, -1000,
	31449, -1000, -1000, 1667, 1543, 1535, 25047, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31131,
	30810, 30489, 30168, 29847, 499, -1000, -1000, -1000, 17971, -1000,
	-1000, -1000, -1000, 42, -1000, -1000, 40, -1000, 38, 35,
	32, 30, -1000, 28, 27, -1000, 26, 21, -1000, 20,
	19, 29526, 1118, -1000, -1000, 1, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35298, -1000, 15972, -1000,
	497, -1000, 1553, -1000, 15972, -1000, 1108, -1000, -1000, -1000,
	-1000, -1000, 35298, -1000, -1000, -1000, -1000, -1000, -1000, 2029,
	1125, 496, 29205, -1000, 1420, -1000, 583, 760, -1000, -1000,
	-1000, 8971, 180, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1712, 21858, 1156, 1818, 1665, 2028, 1246, 1659,
	1632, 1616, 1595, 1582, 2025, 872, 2024, 1676, 981, 2023,
	1574, 1279, 652, 2022, 1552, 1526, -1000, -1000, -1000, -1000,
	903, -1000, -1000, -1000, 27282, -1000, -1000, 988, -1000, -1000,
	-1000, 1275, 1841, 1841, 1841, 1863, 335, 331, -1000, 125,
	-1000, 1030, -1000, 1098, -1000, -1000, -1000, -1000, -1000, 40570,
	-1000, -1000, 15972, 15972, 15972, 15972, 15972, 993, 520, -1000,
	495, 494, 7241, -1000, -1000, 2008, -1000, -1000, -1000, 366,
	-1000, -1000, 15972, 173, -1000, -1000, -1000, -1000, 490, 2018,
	-1000, 682, -1000, -1000, -1000, 588, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1563, 488, 487, 486, -1000,
	-1000, -1000, -1000, 485, 482, 478, 473, 471, 470, 469,
	467, 466, 464, 461, 458, 456, 454, 453, 968, -1000,
	607, -1000, -1000, 607, 607, -1000, 438, 438, 441, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 438, -1000, -1000,
	-1000, 563, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 452,
	1206, -1000, -1000, 1206, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 735, 36570, -8, 35298, -1000, 450, -8, -1000, -1000,
	448, -1000, 11043, 11043, -1000, -1000, -1000, -1000, -1000, 9671,
	1765, -1000, 40153, -147, 360, 566, -1000, 18616, 21196, -1000,
	-1000, 1153, 1702, 634, -1000, 928, 1700, 534, -1000, 920,
	-1000, 807, 1698, -102, 22818, 23772, 0, -15, -1000, -1000,
	-1000, 5535, 40570, -1000, 40570, -1000, 802, 20229, 173, -1000,
	-1000, -1000, -1000, 447, 1264, 592, -1000, 361, -1000, 28884,
	592, 1262, -1000, -1000, -1000, 27282, -1000, 35298, -1000, 35298,
	-1000, 821, -1000, 36888, 111, 1687, -1000, -1000, 111, 1682,
	-1000, 109, 1679, -1000, -1000, 1085, 1668, -1000, -15, 1655,
	-1000, -1000, 15972, -13, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 602, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28563, 23136, 959, 637, 40570, 1918,
	41075, 22818, 40570, 23136, -1000, -1000, 35298, -1000, 15972, -1000,
	1916, 1373, -3, -1000, -1000, -1000, -1000, -1000, 1318, 1316,
	699, 955, 8971, 8971, 1743, -1000, 175, 5865, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28242, -1000, -1000, -1000,
	1092, 35298, -1000, -1000, 1561, -1000, 23136, 35298, -1000, 35298,
	-1000, 35298, -1000, 35298, -1000, 35298, -1000, -1000, -1000, -1000,
	-1000, 4467, -1000, 1559, -1000, -1000, 35298, -1000, 1317, -1000,
	-1000, -1000, 27924, 27603, -1000, 912, 764, -1000, -1000, 112,
	-1000, -1000, 1275, -1000, 1124, 1347, 14572, 1375, 15972, 125,
	-1000, -1000, 125, 125, 8628, -1000, -1000, -1000, 35298, -1000,
	40985, 41075, 5865, 749, 15972, 15972, 15972, 15972, 15972, 15972,
	15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972, 15972,
	15972, 15972, 15972, 15972, 15972, 15972, 1254, 15972, 731, 15972,
	15972, 15972, 15972, 1380, 1031, 435, 1099, -1000, 1992, 1992,
	1992, 40598, 40598, 443, 520, -1000, 15972, -1000, 124, 14229,
	331, 39068, -4, 6898, -1000, -1000, -1000, 9314, 604, 40570,
	173, 6197, -1000, 2007, 861, 1544, 1442, 446, 535, 480,
	479, 15972, 15972, 13886, 13529, 13172, 16658, 12815, 15972, 7584,
	15972, 15972, 15972, 15972, 12458, 12101, -1000, 445, -1000, -1000,
	-1000, -1000, 2005, -1000, -1000, 1988, -1000, 746, 745, 1983,
	-1000, -3, -1000, 36570, -1000, 35298, -8, 1912, 35298, -1000,
	118, -1000, 39719, -1000, 118, -14, -1000, 1374, 1371, 19907,
	1314, 997, 997, 997, -1000, 444, 509, 566, 4860, 11744,
	-1000, 26328, 1001, 215, 330, 18294, 1765, -1000, 35298, -31,
	954, -1000, 24726, 1828, 1812, 1767, 27282, 1881, 124, 1520,
	730, 27282, 729, 1852, 124, 1518, 726, 35298, 5865, 564,
	-1000, 35298, -1000, -1000, -1000, 1517, -21, -1000, -1000, 24408,
	1909, 1645, -1000, 977, -1000, 1901, 35298, 1106, 1261, -1000,
	-1000, 758, 1641, 593, 200, 1898, 200, 20552, -1000, 35298,
	-1000, 35298, -1000, -1000, 35298, -1000, 35298, -1000, 35298, 35298,
	-1000, 35298, 35298, -24, 40570, 40824, 24090, 722, -1000, 630,
	24408, 554, -29, -1000, 708, -1000, -1000, -1000, -1000, 410,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 441, 968, 438, 438, 438, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 563, -1000, -1000, 607, 607, 607,
	-1000, -1000, -80, -1000, 1512, 591, -30, 662, -3, -1000,
	1206, -1000, 1136, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2016, -1000, 2001, -1000,
	-1000, 1980, -10, -1000, -10, -1000, 5865, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35298, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3803, -1000, -1000, -1000, -1000, -1000, -1000,
	35298, 35298, 35298, -1000, 27282, -1000, -1000, -1000, -1000, 40570,
	-1000, 367, -1000, -1000, 40570, 975, 1349, -1000, 1349, -11,
	-1000, 39603, 1365, 35298, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 576, 651, 651, 780, 780,
	780, 780, 1950, 2445, 2455, 1054, 3460, 3460, 3460, 329,
	2564, 2564, 3460, 3460, 3460, 40598, 355, 264, 15972, 15972,
	721, 1029, 435, 264, 15972, 264, 264, 264, 264, -1000,
	1076, -1000, -1000, -1000, -1000, 1510, 434, 16658, 16658, -1000,
	-1000, -1000, 7241, 16988, -1000, -1000, -1000, -1000, 432, 15972,
	-1000, 39306, -210, -40, -1000, -1000, 15972, -39, -49, -1000,
	-1000, 842, -1000, 15972, -1000, -37, 15972, 15972, 15972, 326,
	-1000, 315, -1000, 714, -1000, 713, 711, 710, -1000, 431,
	995, 429, 428, 15972, -1000, -1000, -1000, -1000, -1000, -1000,
	40461, 37848, 314, -1000, 1502, -159, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 313, -1000, 312, -1000, 40328, -159, 311,
	40637, -1000, 16658, 16658, 16658, 7241, 425, 303, -1000, 39569,
	-159, 40219, 11387, 11387, 11387, 302, 40086, 15972, -159, 4268,
	4137, 3914, -54, -56, -1000, -57, -1000, 1978, -59, 301,
	571, 569, 300, -1000, -1000, 422, -67, 593, 11043, 19262,
	5865, -1000, 593, 9671, -1000, 19907, 19907, 1297, 1367, 19907,
	-1000, -1000, -1000, -1000, 26328, 459, 566, 26328, -1000, 1975,
	1364, -74, -1000, -1000, -1000, 35298, 421, -1000, 566, 299,
	925, 35298, 35298, 35298, -1000, -1000, 1260, 36252, 1251, 41075,
	35298, -1000, 420, 419, 1361, 1345, 35298, 35298, 35934, 35616,
	35298, 1147, 124, -1000, 418, 35298, 909, 35298, 124, -1000,
	417, 35298, 881, -1000, 1428, 1088, -1000, 790, 1500, 35298,
	297, -75, -12, 41075, -1000, -1000, -1000, -1000, -1000, 35298,
	433, 35298, 124, 35298, 2015, 124, 35298, 1637, 1621, 549,
	35298, 862, 15972, 897, -1000, 18939, 619, 35298, 862, 105,
	-1000, -1000, -1000, 558, 35298, -1000, -1000, 111, 111, -1000,
	109, 1085, -15, -1000, 15972, -1000, -1000, 35298, 22818, -88,
	-1000, -1000, 41075, -1000, 515, 702, -1000, 1967, 590, 22818,
	35298, 8971, 8971, -1000, 1350, -1000, -1000, 889, -1000, 958,
	-1000, -1000, -1000, -1000, 8971, -1000, -36, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 975, -1000, 15972, 1964, -1000, -1000,
	-1000, 8628, -1000, -1000, -1000, 35298, -138, 15972, 264, 264,
	15972, 16658, 16658, -1000, 264, -1000, -1000, -1000, -1000, -1000,
	1485, 416, 15972, 41075, 39151, 4415, -89, -1000, 10700, -23,
	-1000, 15972, -1000, 39011, -1000, -1000, 511, 1619, -1000, 15972,
	39977, 296, 10357, -1000, 39868, -42, -42, -1000, 2013, 1215,
	1019, 965, 831, 1958, -1000, 20874, 597, 1006, 38953, 40985,
	41075, -1000, 15972, -1000, -1000, 1481, 15972, -1000, 40985, 41075,
	16658, 16658, 16658, 16658, 16658, 16658, 16658, 16658, 16658, 16658,
	16658, 16658, 16658, 16658, 16658, 16658, 16658, 16658, 16658, 1334,
	16658, 1987, 1987, 1987, -26, 10014, -1000, 1546, 1481, 15972,
	15972, 41075, 295, 294, 284, -1000, 15972, -159, 15972, 15972,
	15972, -1000, -1000, -1000, 283, -1000, 1955, -1000, -1000, -1000,
	-1000, 554, -1000, 1437, -1000, -86, -1000, 1765, -1000, 1437,
	-1000, -1000, 1297, -1000, 413, 15972, 19907, -1000, 508, -1000,
	-90, -1000, 26328, -1000, 506, -207, -1000, 557, -1000, 566,
	412, 35298, 26328, -1000, -1000, -1000, 709, 706, 1622, -1000,
	1244, -1000, 625, -1000, 898, 15972, 17648, 409, 407, 1010,
	-1000, 1604, 1085, 1599, 1085, -1000, -31, 930, -1000, 15972,
	-1000, 700, -1000, -1000, 15972, -1000, 694, 590, 1480, 775,
	-1000, 786, -1000, 1412, -1000, 24408, 406, 35298, 405, -1000,
	404, -1000, -1000, 402, 35298, 1328, 549, 23454, -1000, 592,
	-1000, 8284, 40570, -1000, 862, 1772, -91, -1000, -1000, -1000,
	593, 20552, 19907, 9671, -98, -1000, -1000, -1000, -1000, 40570,
	-36, 1756, 1756, -1000, 1951, -1000, 504, 265, -1000, 26964,
	-1000, -36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35298,
	1040, 38773, -1000, 1820, 5865, 1907, 264, 298, 280, 15972,
	41075, 40707, -106, 15972, 15972, -1000, -115, -1000, 15972, 503,
	40570, -1000, -1000, -1000, 40570, 15972, 2012, 15972, 261, 247,
	245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 237,
	-1000, -1000, 37524, 15972, 232, -1000, 218, 217, 40570, 1546,
	40570, -1000, -1000, 621, 621, 858, 858, 858, 858, 1987,
	236, 249, 1065, 383, 383, 383, 1168, 565, 565, 383,
	383, 383, 1471, 1282, 400, 38257, 15972, -116, -1000, -1000,
	-1000, 40570, 40570, 216, -1000, -1000, -1000, -159, 219, 38711,
	38657, -1000, 194, 191, 1434, 1848, -1000, 19907, 1434, -1000,
	35298, 40570, -1000, -147, -1000, 1949, -1000, -1000, 1364, -1000,
	5202, 26328, 35298, -117, -1000, 35298, 35298, 35298, 1590, -1000,
	1984, -1000, 38414, -128, -1000, 307, 1805, 15972, -1000, -1000,
	399, 17648, 35298, -1000, 1346, 1397, 650, 35298, -1000, 35298,
	-1000, 35298, 35298, 35298, -134, 35298, -135, 35298, -1000, 22818,
	744, -1000, -1000, 1418, -1000, 17648, 398, 35298, 24408, 1891,
	17648, 1104, 1335, 549, 23454, -1000, 758, -52, -1000, -1000,
	356, 124, 862, -1000, -72, -1000, 556, 1731, -1000, 1725,
	502, -1000, -1000, -73, 396, -1000, 555, 553, -1000, -1000,
	-1000, -1000, 1820, 15972, 15972, 40707, -141, -1000, 264, 264,
	-1000, 38363, -1000, 40570, -1000, 39868, -1000, -1000, -1000, -1000,
	969, -1000, 38297, -1000, -1000, -1000, -1000, 16658, 1469, 395,
	41075, 38145, -1000, -1000, 15972, -1000, -1000, -1000, -1000, 595,
	15972, 15972, 1765, 595, -143, 566, -1000, -1000, -1000, 1947,
	-1000, -149, -1000, -1000, -1000, -1000, 35298, -1000, 35298, -1000,
	5865, 35298, 1457, 1190, -1000, -1000, 1342, 394, 16658, 35298,
	-1000, 1009, 17648, 1820, 173, 5865, 1820, 38117, 6197, -150,
	-152, 1185, -1000, 1169, 15972, -1000, 41075, 1085, 1085, -1000,
	692, 691, 689, -1000, 678, -1000, -81, 21526, 984, -157,
	17648, -158, 189, 124, -160, 35298, -1000, 549, 23454, -1000,
	1621, 1673, 35298, 1764, -1000, -1000, 391, 390, 387, -1000,
	26646, 26646, 22818, 22818, -1000, 264, 264, -1000, -1000, 187,
	1006, 1844, -1000, 3889, 16658, 41075, -165, -1000, 37904, -1000,
	35298, 40570, -159, -1000, -1000, 26328, 501, -1000, -1000, 1248,
	-1000, -1000, 35298, 1234, -1000, -1000, 15972, 38257, 386, 1412,
	384, -1000, -1000, -1000, -1000, -1000, -1000, 1805, -37, -1000,
	918, -1000, -1000, 40570, 1802, -1000, -1000, 35298, 35298, 382,
	381, -1000, 380, 173, 35298, 1009, -166, -1000, 1412, -1000,
	1009, 370, 23454, -1000, 1328, 759, -167, 35298, -1000, -1000,
	6541, 22818, 22818, -1000, -172, -1000, -1000, -1000, 900, 15972,
	3889, -173, -1000, -1000, -148, -1000, 1886, -1000, -1000, -1000,
	-1000, 1587, 37876, 1276, 35298, -1000, 35298, 1820, 186, 35298,
	629, 5865, -1000, -1000, 15972, 15972, 15972, 369, 1412, 1009,
	-1000, 1412, 17648, -1000, 1335, 820, -1000, 593, -1000, -174,
	-179, -1000, 185, 16315, 16315, -159, -1000, 35298, 365, 1576,
	-1000, 1056, 986, 184, -180, -1000, -1000, 361, -1000, 15972,
	-1000, -181, -182, -42, 35298, -1000, 1412, -1000, -187, -1000,
	20552, -1000, 590, 590, -1000, -1000, -1000, 17318, 1178, 840,
	4528, -1000, -1000, -1000, 35298, -1000, 1095, 1086, 865, -1000,
	-1000, -1000, -1000, -1000, 1276, 40570, -1000, -1000, 183, -188,
	-1000, 1009, -168, -1000, -1000, 1911, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1688, -1000, 640, 1338, 1338, 1056, 2012,
	1083, 1412, -1000, 15629, -1000, 1931, -1000, -1000, 1341, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2390, 2388, 1580, 1882, 2385, 2383, 2382, 2380, 2379,
	2377, 2376, 2375, 2374, 2373, 2371, 2368, 2366, 2361, 2359,
	1879, 2356, 1869, 2355, 2354, 2353, 2352, 1867, 2351, 2350,
	2349, 2346, 2345, 2344, 1864, 2339, 1849, 2336, 2332, 2331,
	2330, 2328, 1822, 1820, 2326, 72, 98, 1808, 2322, 2320,
	1798, 1793, 1763, 2317, 1723, 2316, 2314, 1711, 1673, 2311,
	114, 2310, 2309, 2308, 1664, 1629, 2307, 2304, 2300, 143,
	2298, 1615, 2287, 2279, 2274, 2273, 2269, 2268, 2259, 2257,
	2256, 2254, 2250, 2248, 2239, 2234, 2233, 2231, 2228, 2227,
	151, 2226, 2221, 1613, 1582, 2220, 2219, 35, 29, 15,
	51, 19, 137, 2582, 131, 2218, 2217, 2215, 2213, 2212,
	2209, 24, 85, 88, 2208, 119, 2207, 2206, 46, 37,
	22, 18, 2204, 87, 2203, 2200, 1298, 31, 2196, 2195,
	125, 2193, 17, 33, 615, 146, 144, 118, 109, 2192,
	2191, 2190, 41, 113, 5, 2189, 2188, 11, 89, 28,
	2186, 42, 14, 2183, 2181, 121, 2180, 58, 99, 1499,
	103, 116, 204, 2172, 63, 10, 55, 2171, 2170, 150,
	32, 2169, 49, 76, 133, 2166, 54, 156, 111, 66,
	117, 123, 2160, 2157, 2154, 92, 2152, 108, 73, 2149,
	2146, 60, 2145, 126, 132, 2143, 2142, 84, 2140, 127,
	2139, 2138, 149, 138, 106, 9, 48, 57, 6, 1482,
	1480, 124, 79, 50, 47, 2137, 2378, 1336, 1538, 34,
	94, 75, 56, 95, 38, 77, 141, 27, 2134, 2133,
	130, 2132, 2131, 2130, 2129, 2125, 96, 2121, 2118, 23,
	2117, 62, 43, 91, 83, 39, 196, 110, 100, 145,
	93, 2114, 78, 120, 2113, 70, 2111, 2107, 2013, 107,
	2102, 2091, 2086, 1996, 1919, 1609, 826, 2085, 2081, 1476,
	1012, 2080, 2079, 86, 2078, 101, 102, 104, 135, 134,
	21, 2076, 112, 36, 2074, 26, 20, 0, 653, 488,
	2072, 105, 59, 2071, 2070, 2069, 2064, 25, 1, 7,
	8, 3, 4, 53, 30, 2060, 2059, 122, 80, 69,
	2058, 148, 2057, 2054, 2052, 45, 2050, 16, 2047, 12,
	2045, 2042, 13, 2, 2040, 2039, 147, 2037, 90, 2036,
	1856, 2035, 140, 2034, 2032, 1628, 65, 97,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 113, 113,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 110, 110, 115, 115, 115,
	117, 117, 114, 114, 109, 109, 20, 20, 58, 58,
	100, 51, 51, 51, 285, 285, 286, 286, 96, 96,
	97, 97, 97, 97, 98, 98, 99, 99, 99, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 161,
	161, 160, 160, 163, 163, 42, 42, 42, 42, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 46, 46, 46, 46, 46,
	46, 46, 46, 254, 254, 253, 44, 44, 228, 228,
	47, 47, 186, 186, 48, 48, 48, 48, 48, 49,
	49, 59, 59, 326, 326, 326, 330, 330, 331, 331,
	332, 332, 332, 332, 332, 332, 332, 328, 328, 54,
	54, 54, 54, 55, 55, 55, 56, 56, 95, 95,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 65,
	65, 65, 67, 64, 64, 64, 66, 66, 66, 66,
	68, 68, 69, 69, 69, 69, 69, 70, 70, 279,
	277, 277, 278, 278, 140, 140, 140, 140, 140, 141,
	141, 141, 284, 284, 284, 284, 284, 284, 283, 283,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 83, 83, 83, 90,
	90, 90, 90, 90, 90, 90, 72, 72, 77, 77,
	77, 77, 77, 73, 73, 78, 78, 79, 79, 80,
	80, 80, 80, 80, 80, 74, 74, 74, 74, 82,
	82, 82, 82, 81, 81, 87, 87, 87, 87, 87,
	87, 84, 84, 84, 84, 85, 85, 85, 88, 88,
	88, 88, 75, 75, 76, 76, 89, 89, 86, 86,
	86, 43, 327, 327, 329, 329, 52, 52, 30, 30,
	31, 31, 142, 142, 143, 143, 207, 207, 207, 207,
	144, 144, 116, 116, 116, 206, 295, 295, 296, 296,
	296, 296, 296, 296, 297, 297, 297, 297, 297, 297,
	297, 293, 293, 294, 291, 291, 292, 292, 292, 292,
	333, 333, 205, 205, 147, 147, 300, 300, 300, 300,
	298, 298, 298, 298, 298, 301, 299, 302, 302, 302,
	302, 302, 240, 240, 240, 92, 92, 32, 32, 122,
	122, 33, 33, 29, 29, 29, 190, 190, 151, 151,
	245, 245, 245, 133, 133, 111, 111, 111, 14, 11,
	11, 11, 11, 11, 11, 19, 19, 17, 17, 191,
	191, 192, 192, 53, 53, 57, 57, 62, 62, 91,
	91, 91, 91, 91, 91, 21, 21, 21, 21, 25,
	25, 25, 25, 61, 61, 335, 335, 129, 129, 129,
	129, 130, 130, 202, 202, 203, 203, 203, 204, 204,
	204, 124, 123, 125, 125, 28, 28, 28, 118, 118,
	119, 119, 120, 120, 121, 121, 336, 336, 50, 50,
	50, 94, 94, 136, 136, 199, 199, 199, 201, 201,
	200, 200, 200, 176, 176, 176, 93, 93, 156, 156,
	165, 165, 166, 166, 251, 167, 167, 60, 60, 103,
	103, 101, 101, 101, 101, 101, 101, 102, 102, 102,
	104, 104, 104, 104, 104, 104, 104, 107, 107, 107,
	108, 108, 108, 106, 106, 308, 308, 308, 311, 311,
	307, 309, 309, 310, 310, 334, 334, 177, 177, 177,
	146, 145, 145, 149, 149, 148, 150, 150, 244, 244,
	244, 174, 174, 174, 174, 193, 193, 194, 194, 195,
	195, 196, 196, 196, 197, 197, 198, 198, 173, 173,
	224, 224, 105, 105, 105, 155, 155, 155, 157, 157,
	214, 214, 214, 215, 215, 213, 213, 213, 213, 246,
	246, 246, 246, 246, 246, 246, 246, 324, 324, 324,
	325, 325, 243, 243, 247, 247, 247, 247, 247, 247,
	241, 241, 241, 241, 242, 242, 252, 252, 180, 180,
	180, 180, 178, 178, 179, 179, 248, 248, 248, 248,
	175, 175, 249, 249, 249, 208, 208, 255, 255, 255,
	273, 273, 154, 154, 154, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 257, 257, 257, 257, 259, 259, 259, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 272, 272, 272,
	272, 272, 260, 260, 267, 267, 268, 268, 269, 270,
	261, 261, 262, 262, 263, 264, 271, 271, 271, 271,
	275, 275, 265, 265, 265, 265, 265, 266, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 188, 188, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 218, 218, 218, 218,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 303, 303, 303, 303, 303, 303, 303, 303, 305,
	305, 306, 306, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 312, 312, 313, 313, 315, 315, 316, 316, 317,
	318, 318, 318, 319, 320, 320, 314, 314, 321, 321,
	321, 322, 322, 323, 323, 323, 323, 323, 230, 230,
	230, 231, 231, 232, 238, 238, 238, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 131, 131, 131, 131, 131, 162, 162,
	227, 227, 225, 225, 225, 229, 229, 181, 181, 274,
	274, 274, 274, 274, 274, 274, 182, 182, 182, 189,
	183, 183, 184, 184, 184, 184, 184, 184, 221, 222,
	185, 185, 185, 223, 223, 233, 237, 237, 236, 235,
	235, 234, 234, 211, 211, 212, 212, 210, 209, 170,
	170, 169, 169, 168, 168, 337, 337, 239, 239, 171,
	171, 172, 164, 164, 250, 250, 250, 250, 158, 158,
	138, 138, 159, 159, 134, 134, 137, 137, 135, 135,
	135, 135, 152, 152, 153, 153, 132, 132, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 276,
	276, 276, 226, 126, 126, 126, 127, 127, 128, 128,
	281, 281, 281, 282, 282, 282, 282, 280, 280, 280,
	280, 280, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 6, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 5, 5,
	5, 2, 2, 0, 2, 0, 3, 2, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 2, 4, 3, 3,
	0, 6, 3, 11, 14, 4, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 2, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -58, -57, -59, -62, -60, -53, -54, -63, -71,
	-91, -92, -93, -94, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 134, 214, 220, 240, 242, 244,
	251, -101, -103, 238, -55, -56, -64, -65, -66, -67,
	-95, 262, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, -89,
	265, -21, -25, -61, 303, -9, -10, -13, -12, -11,
	-16, -18, -15, -17, -19, -14, -308, -104, -102, 354,
	239, 312, 35, 274, 61, 101, 246, 328, 335, -107,
	-105, -106, -108, 255, 320, 284, 358, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, 284, 323, 83, 141, -326, 2, -159, 284, 83,
	-135, -126, 347, 4, -287, -289, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	64, 66, 67, 68, 71, 72, 73, 81, 82, 84,
	86, 90, 92, 94, 97, 98, 100, 105, 106, 107,
	113, 114, 119, 121, 126, 131, 132, 133, 134, 135,
	142, 145, 147, 140, 157, 158, 159, 161, 162, 163,
	166, 165, 170, 173, 176, 178, 179, 180, 183, 181,
	185, 186, 188, 187, 193, 195, 196, 198, 201, 204,
	207, 210, 211, 212, 213, 214, 216, 218, 220, 222,
	223, 224, 225, 226, 228, 229, 231, 232, 233, 234,
	235, 238, 236, 237, 239, 240, 241, 242, 244, 246,
	247, 249, 263, 264, 275, 251, 252, 253, 254, 258,
	256, 259, 260, 262, 265, 267, 270, 273, 274, 276,
	279, 280, 277, 272, 283, 285, 286, 287, 288, 289,
	290, 291, 298, 299, 303, 304, 305, 306, 309, 310,
	311, 312, 314, 317, 318, 319, 324, 329, 330, 331,
	332, 333, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 85, 87, 88, 104, 108,
	109, 115, 116, 117, 127, 129, 136, 137, 146, 148,
	149, 150, 151, 152, 154, 168, 182, 192, 194, 205,
	209, 217, 219, 227, 248, 257, 268, 269, 278, 281,
	293, 294, 295, 300, 301, 316, 320, 321, 357, 357,
	2, 158, 224, -134, -126, 83, 357, 357, 357, 357,
	284, 2, 313, 323, -190, 83, 308, 357, 357, -126,
	220, 22, 2, 92, 145, 311, 310, 22, 216, 256,
	286, 288, 2, 357, 357, 357, 357, 357, 2, 323,
	284, 141, 83, 313, -126, 2, -46, 2, 354, -45,
	-4, -27, -36, -47, -42, -43, -20, -22, -34, -51,
	-50, -52, -54, -58, -57, -60, -64, -65, -71, -93,
	-94, 262, -330, 2, 22, -331, -332, 69, 98, 125,
	255, 145, 92, 310, -280, 4, -287, -289, -288, -290,
	58, 70, 124, 144, 138, 156, 160, 169, 171, 184,
	206, 208, 245, 266, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 65,
	69, 74, 75, 77, 76, 78, 79, 80, 89, 91,
	93, 95, 96, 99, 101, 103, 110, 111, 112, 120,
	122, 123, 125, 128, 130, 139, 141, 143, 153, 155,
	164, 167, 172, 174, 175, 189, 190, 191, 197, 199,
	200, 202, 203, 215, 221, 230, 243, 255, 261, 271,
	282, 284, 292, 296, 297, 302, 307, 308, 313, 315,
	322, 323, 325, 326, 327, 328, 284, 2, 158, 2,
	-126, 2, -326, 2, 158, 2, -330, 2, -126, 2,
	-130, 2, 251, -126, 357, 357, 357, 357, 357, 173,
	55, 248, 259, -69, 299, -68, 293, -279, -70, 2,
	-160, 183, -126, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, -90, 259, 34, 55, 22, 60, 84, 126, 141,
	142, 162, 65, 66, 223, 173, 159, 298, 163, 260,
	285, 299, 69, 314, 289, 106, 4, 83, 183, 261,
	293, 357, 357, 357, -334, 2, 284, -102, -104, -103,
	-148, -149, 307, 153, 103, 203, -101, -103, 2, -308,
	-90, 259, 2, 55, 22, -277, 2, -239, 199, -216,
	89, -218, 345, 346, 340, 189, 334, -230, -220, -233,
	104, 248, 354, -134, -219, 360, 9, -305, -103, 29,
	-231, -232, 49, -126, 7, 8, 5, 6, -132, -257,
	-226, -266, 302, 110, 191, -303, -304, 4, -287, -281,
	-258, -268, -262, -265, 154, 58, 75, 76, 79, 77,
	80, 261, 313, 50, 28, 108, 109, 209, 217, 281,
	300, 301, 136, 192, 137, 56, 127, 168, 97, 37,
	39, 41, 42, 51, 52, 85, 87, 88, 115, 116,
	117, 146, 148, 149, 150, 151, 152, 194, 227, 268,
	278, 294, 295, 321, -288, -269, -270, -263, -264, -271,
	-335, 2, 299, 299, 2, -335, 2, -335, 2, -129,
	2, 299, 296, -311, 228, -307, -126, -311, 357, 357,
	359, 357, -145, -146, 2, 22, 95, -172, 2, 354,
	-246, 2, 352, -248, -134, -103, -247, 354, 200, -3,
	2, -248, 136, -134, 2, -248, 136, -134, 2, -126,
	2, -137, 136, -134, 296, 359, -159, -152, -126, -210,
	-209, 356, -216, 2, -216, 2, 123, 354, -169, -170,
	-209, -210, 2, -160, 136, -126, 2, -160, 2, 141,
	-126, 136, 2, -126, 22, 123, 2, 155, 2, 155,
	2, -249, 2, -248, -161, 136, 2, -160, -161, 136,
	2, -138, 136, 2, -137, -126, 136, 2, -152, 136,
	2, -186, 354, -254, 2, -253, -282, 4, -287, -289,
	-288, 320, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 259, 199, 359, -160, -216, -228,
	354, 123, -216, 199, -126, 2, 263, 2, 354, -69,
	53, 299, -203, 2, -204, -123, -124, -125, 157, 222,
	226, 333, 296, 339, 123, -277, -163, 356, -90, 2,
	-285, 2, -283, 9, -282, 5, 263, 2, 223, 260,
	55, 123, 2, 2, -327, 2, 199, 123, 2, 123,
	2, 123, 2, 123, 2, 123, 2, 2, 223, 260,
	2, 120, 2, 298, 2, 2, 123, 2, 157, 222,
	275, 2, 284, 323, 2, 123, 123, 333, 2, -175,
	-248, -148, -149, -174, -193, -194, 172, 112, 197, -177,
	22, 95, -177, -177, 44, 355, 355, -90, 263, 2,
	10, 11, 57, 33, 345, 346, 347, 348, 118, 349,
	350, 343, 344, 342, 337, 338, 339, 63, 177, 250,
	13, 14, 15, 26, 202, 171, 334, 138, 266, 340,
	16, 17, 18, 156, 36, 139, -131, -139, -216, -216,
	-216, -216, -216, 208, -168, -211, 352, -103, 354, 354,
	-103, -216, -162, 354, 7, -103, -225, 352, -234, -216,
	-169, 354, 5, 354, 5, -312, 329, 120, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 219, -275, 324, -275,
	-275, -259, 354, -259, -260, 354, -259, 330, 335, 354,
	-202, -203, -202, 296, -130, 359, -311, -153, 354, -172,
	-164, -250, -216, 347, -164, -171, -239, 70, -180, 160,
	184, 124, 169, 245, 144, 7, -46, -213, 360, 354,
	347, -243, 335, -103, -247, 354, -246, -134, 354, -113,
	236, -112, 21, 23, 98, 318, 104, 272, 290, 252,
	236, 104, 236, 272, 290, 252, 236, 104, 360, -285,
	-135, 359, -280, 347, 276, 355, -158, -134, -170, 354,
	-147, 189, -122, -309, 328, -147, 354, -127, 136, 2,
	-126, -309, 189, -249, -136, -134, -136, 262, -126, 30,
	-115, 359, 48, 241, 104, -115, 104, -115, 359, 104,
	-115, 104, 104, -162, -216, 355, 359, -326, -332, 69,
	354, 30, -227, -255, -256, -258, -267, -261, -265, -266,
	40, 46, 45, 291, 182, 257, 269, 316, 38, 198,
	147, 146, 148, 149, 150, 151, 152, 268, 37, 227,
	116, 117, 115, 97, 88, 87, 194, 42, 41, -269,
	-270, -263, -264, 85, 294, 295, 154, 39, 52, 51,
	321, 278, -286, -285, -326, -279, -162, 30, -203, 2,
	359, -204, 170, -141, 176, 188, 132, 200, 331, -284,
	5, 4, -226, -240, 89, 173, -266, 8, 346, -276,
	7, 345, -278, -277, -278, 73, 356, -280, -160, 22,
	264, 2, -279, -329, 120, -326, -279, -279, -279, -279,
	-279, 259, -46, 120, -126, 170, -279, 2, -279, 2,
	284, 141, 284, -115, 359, -174, -194, -193, -195, -216,
	22, -198, 114, 185, -216, -218, -102, -102, -102, -150,
	-244, -216, 221, 141, -279, -273, -255, -272, 232, 233,
	231, 235, 234, -255, -280, 293, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, 171, 138,
	266, 36, 139, -216, 296, -216, -216, -216, -216, 181,
	189, 191, 302, 110, 309, 95, 195, -337, 282, 32,
	-223, -103, 354, -238, 27, 271, 22, -230, 248, 354,
	-211, -216, -212, -162, 355, 355, 359, -162, -229, 353,
	-225, -237, -236, 325, 355, -162, 322, 22, 95, 347,
	2, 7, -187, 332, 180, 86, 133, 179, -188, 254,
	-313, 113, 128, 354, 355, 2, 355, 2, 355, 2,
	-216, -216, -181, 2, -274, -162, 4, 332, 180, 86,
	133, 179, 254, -181, 2, -182, 2, -216, -162, -183,
	-217, -218, 345, 346, 340, 354, 248, -184, 2, -216,
	-162, -216, 43, 167, 297, -185, -216, 123, -162, -216,
	-216, -216, -162, -162, 2, -162, 2, 354, 7, 7,
	293, 293, 7, -130, -307, 30, -152, -155, 359, 123,
	30, 4, -155, 359, 355, 160, 160, -246, -180, 160,
	-178, 206, -178, -178, -324, 354, 353, -243, -280, 352,
	361, -162, 2, -242, -241, 30, -126, 204, 355, -134,
	359, 296, -191, 65, 59, -206, 136, 59, -291, -126,
	65, -292, 54, 308, 221, 122, -191, 65, -191, 65,
	65, -248, 33, -60, 123, 296, -248, 296, 33, -60,
	123, 296, -137, -280, -252, 336, -126, 123, 355, 359,
	-142, -152, -143, -126, -207, -206, -293, -294, -291, 141,
	308, 111, 30, 104, 213, 30, 199, 189, -118, 287,
	104, -208, 326, -199, -60, 354, 89, 30, -199, -165,
	-166, -251, -167, -134, 354, -126, -160, -161, -161, -137,
	-138, -126, -152, 355, 359, -46, -253, 296, 315, -143,
	-45, 355, 359, -154, 29, 352, -187, 354, -252, 359,
	123, 339, 296, 355, 299, -204, -140, 226, 270, 237,
	258, 8, 7, 7, 359, -280, -328, -126, 259, -46,
	-134, -137, -134, -248, -196, -276, 354, 346, -197, 248,
	249, 359, -111, 31, 93, 161, -134, 333, -216, -216,
	296, -337, 282, -223, -216, 181, 191, 302, 110, 309,
	95, 195, 123, 354, -217, -217, -162, -220, 354, -162,
	353, 363, 355, -216, 353, 353, 359, -235, -236, 99,
	-216, -149, 359, -148, -216, -162, -162, 355, 355, 296,
	296, 296, 296, 354, -318, 207, 354, 354, -216, 30,
	359, 355, 123, 355, 355, -189, 215, 355, 10, 11,
	345, 346, 347, 348, 118, 349, 350, 343, 344, 342,
	337, 338, 339, 63, 177, 250, 13, 14, 15, 156,
	139, -217, -217, -217, -162, 354, 355, -221, -222, 123,
	120, 30, -185, -185, -185, 355, 123, -162, 359, 359,
	359, 355, 355, 355, 7, 355, 359, 355, 333, 333,
	355, 354, 355, -208, -250, -157, 2, -246, -280, -208,
	-239, -246, -246, -179, 315, 199, 160, -246, -241, 355,
	-325, 7, -243, -242, 7, -215, -214, 121, 187, 355,
	-126, 354, -243, 355, -112, -134, -126, -126, 189, -206,
	136, -117, 189, -255, -126, 354, 354, 161, 161, -126,
	-126, 136, -126, 136, -126, -126, -113, 236, -60, 354,
	-134, 236, -126, -60, 354, -126, 236, -96, 135, 195,
	276, 123, -134, 355, 355, 359, -127, 141, -127, -60,
	-160, 5, -60, -134, 104, -119, 100, -336, 339, -126,
	-176, 243, -216, -176, -201, 199, -158, 320, -126, -176,
	-156, 359, 123, 339, -158, -115, -115, -115, -115, -216,
	-328, -285, 355, -255, 352, 353, 7, 7, -99, 328,
	-285, -328, -277, -277, -123, 306, 62, 226, -277, 359,
	-197, -216, -244, -134, 360, -216, -216, -217, -217, 123,
	354, -216, -227, 26, 26, 355, -162, 355, 359, -212,
	-216, 355, -225, 101, -216, 292, 355, 322, -149, -149,
	-149, 5, 180, 133, 179, -188, 179, -188, -188, 7,
	-319, -126, 354, 326, -148, 355, -273, -255, -216, -221,
	-216, -273, -255, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, 95, 189, 195, -217, 359, -162, 355, -222,
	-221, -216, -216, -255, 355, 355, 355, -162, -216, -216,
	-216, 355, 7, -45, -173, 128, -252, 359, -173, -179,
	354, -216, -246, 353, 355, 359, -242, 353, 359, 362,
	339, -243, 354, -152, -241, 296, 296, 104, 189, 317,
	-295, -292, -216, -151, -245, -126, -306, 354, -303, -304,
	-132, 354, 354, -110, 98, 262, -192, 104, -115, 104,
	-115, 296, -191, 65, -162, 296, -162, 296, -99, 123,
	283, 276, -144, 140, -207, 354, -127, 354, 354, -147,
	354, -126, -120, 166, -336, -283, -309, -164, 190, -176,
	64, 355, -208, -166, -157, -239, 355, -100, 71, -100,
	7, 353, 355, -98, 201, -97, -126, 5, -126, 200,
	355, -111, -280, 26, 26, -216, -227, 355, -216, -216,
	355, -216, 353, -216, 5, -216, 355, 355, 355, 355,
	-320, -126, -216, 355, 355, 355, -222, 123, 95, 195,
	354, -216, 355, 355, 359, 355, 355, 355, 355, -224,
	130, 44, -246, -224, -152, -213, 7, -214, -280, 352,
	-242, -152, 355, -126, -126, -206, 104, -296, 65, -297,
	57, 111, 69, 189, 191, 308, 221, 54, 89, 230,
	355, 355, 359, -133, -169, 57, -133, -216, 354, -151,
	-152, 189, 89, 189, 89, 82, 304, -126, -126, -134,
	-126, -126, 355, -134, 355, -126, -286, 293, 139, -151,
	354, -152, -142, 30, -151, 199, -121, 165, -336, -283,
	-118, -200, 354, 199, -60, -176, 339, 82, 82, 353,
	359, 354, 339, 339, -111, -216, -216, 355, 355, -149,
	-314, 212, 355, -217, 123, 354, -227, 355, -216, -315,
	327, -216, -162, -315, 355, -243, 7, 355, -206, -126,
	-280, -126, 111, 136, 191, 161, 354, -217, -134, -205,
	-333, 68, 280, -245, -111, -280, -111, 355, -162, 355,
	355, 191, 191, -216, -255, -115, -115, 296, 296, 296,
	296, -219, -132, -126, 210, 355, -151, 355, 355, -60,
	355, -134, -336, -283, -119, 96, -152, 65, -172, -103,
	354, 354, 354, -97, -98, -285, -285, 355, -149, 44,
	-217, -227, 355, 355, -316, -317, -126, -242, 353, -297,
	-127, 189, -216, -128, 354, -144, 354, -133, -149, 230,
	-114, 57, -126, -126, 354, 354, 354, -134, -205, 355,
	-144, -205, 354, -283, -120, 310, 190, 355, -126, -286,
	-286, 355, -321, 225, 249, -162, 355, 359, 30, 104,
	355, -300, 178, -126, -152, -111, 355, -134, -109, 315,
	-280, -162, -162, -162, 354, -144, -205, -144, -151, -121,
	262, -208, 355, 355, 355, -322, -323, 36, 305, 73,
	-216, -322, -317, -319, 111, -298, -301, -299, 199, 124,
	211, 267, 355, 355, -147, -216, 355, 355, -149, -152,
	-144, 355, -165, -99, -99, -323, 218, 119, 248, 218,
	119, -126, -299, 199, -301, 199, 310, 92, -300, 355,
	355, -205, -208, 26, -302, 186, 241, 48, 262, -302,
	-298, -116, 48, 241, -144, -323, 20, 191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 637, -2, 0, 279, 281, 290, 292, 294, 296,
	297, 0, 340, 342, 344, 346, 348, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 368, 369, 371, 373,
	0, 559, 561, 563, -2, 63, 64, 65, 66, 67,
	73, 74, 75, 76, 69, 71, 673, -2, 684, 0,
	0, 0, -2, 0, -2, -2, -2, 0, 0, 650,
	652, 654, 656, -2, 0, 0, -2, 6, 11, 13,
	15, 18, 20, 22, 25, 27, 29, 31, 33, 35,
	37, 39, 42, 48, 50, 52, 55, 57, 59, 61,
	62, 0, 0, 0, 0, 0, 117, 263, 0, 1235,
	1162, 1168, 1169, 1193, 1194, 1195, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 143, 145,
	146, 0, 0, 0, 1164, 1235, 152, 154, 156, 158,
	0, 164, 0, 0, 0, 0, 526, 161, 163, 254,
	1295, 256, 258, 0, 0, 0, 0, 167, 168, 169,
	170, 171, 172, 174, 176, 178, 180, 182, 183, 0,
	0, 0, 0, 0, 253, 251, 205, 206, 0, 235,
	236, 237, 238, 239, 241, 242, 209, 211, 212, 214,
	216, 218, 220, 221, 223, 225, 226, 228, 230, 231,
	233, 0, 0, 260, 266, 267, 268, 270, 271, 272,
	273, 274, 275, 276, 441, 1207, 1208, 1209, 1210, 1211,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 0, 123, 0, 447,
	249, 247, 0, 119, 0, 556, 0, 262, 557, 558,
	553, 554, 1322, 582, 280, 282, 291, 293, 295, -2,
	-2, 1411, -2, 304, -2, 312, 1417, 0, 315, 316,
	319, -2, 201, 341, 343, 345, 347, 349, 351, 353,
	355, 357, 359, 361, 363, 365, 367, 370, 372, 374,
	375, 376, 0, 0, 0, 380, 0, -2, -2, 0,
	0, 0, 0, 0, -2, 0, -2, 0, 0, -2,
	-2, 0, 0, -2, 0, 0, 379, 381, 382, 383,
	0, 560, 562, 564, 0, 516, 675, -2, 648, 649,
	-2, 0, 679, 679, 679, 0, 0, 649, 647, 0,
	283, 0, 285, 0, 380, 288, 289, 320, 321, 1147,
	1148, 874, 0, 0, 0, 0, 0, 0, 966, 968,
	1385, 1411, 0, 970, 971, 0, 973, 975, 976, 0,
	979, 980, 1132, 1164, 1178, 1179, 1180, 1181, 0, 0,
	1184, 0, 1186, 1187, 1188, 1032, 990, -2, -2, 1176,
	802, 803, 804, 805, -2, 1425, 994, 997, 1000, 1003,
	1004, 1005, 1006, 0, 1369, 1386, 1387, 1407, 1408, 1416,
	1420, 1421, 1393, 1404, 1394, 1381, 1391, 1402, 1241, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1202, 836, 837, 842, 843, 845,
	584, 566, 575, 584, 568, 569, 570, 571, 572, 573,
	574, 577, 0, 665, 1301, 668, 1175, 666, 651, 653,
	0, 655, 0, 0, 659, 681, 680, 712, 713, 0,
	663, 664, 674, 728, 766, 743, 734, 0, 0, 2,
	68, 0, 1393, 766, 70, 0, 1393, 766, 72, 0,
	77, 0, 1393, 1167, 0, 0, 264, 265, 1172, 1170,
	1171, 0, 147, 148, 149, 150, 0, 0, 1165, 1141,
	1139, 1140, 159, 495, 1393, -2, 518, 495, 522, -2,
	672, 1393, 597, 255, 257, 0, 166, 0, 610, 0,
	612, 0, 627, 772, 109, 1393, 186, 199, 109, 1393,
	189, 109, 1393, 192, 1160, 109, 1393, 195, 196, 1393,
	198, 250, 0, 0, -2, 243, 245, 1203, 1204, 1205,
	1206, -2, 240, 210, 213, 215, 217, 219, 222, 224,
	227, 229, 232, 234, -2, 0, 0, 0, 446, 0,
	0, 0, 555, 0, 581, 298, 0, 301, 0, 303,
	1380, -2, 306, 307, 585, 588, 589, 590, 0, 0,
	0, 0, 0, 0, 0, 317, 202, 0, 377, 378,
	386, 387, 124, 125, 338, 339, 0, 390, 411, 423,
	0, 0, 394, 396, 445, 398, 0, 0, 400, 0,
	402, 0, 404, 0, 406, 0, 408, 410, 412, 424,
	414, 674, 416, 0, 418, 422, 0, 427, 0, 429,
	430, 431, 0, 0, 437, 0, 0, 384, 385, 109,
	770, -2, 0, 643, 693, 694, 0, 0, 0, 0,
	677, 678, 0, 0, 0, 639, 640, 284, 0, 287,
	0, 0, 0, 0, 1067, 1068, 1069, 1070, 1071, 1072,
	1075, 1076, 1073, 1074, 1077, 1078, 1079, 0, 0, 0,
	1080, 1081, 1082, 0, 0, 1084, 0, 1086, 0, 0,
	0, 0, 0, 0, 1146, 0, 0, 1083, 879, 880,
	881, 903, 904, 0, 967, 1143, 1136, 969, 0, 0,
	-2, 1088, 0, 0, 972, 977, 978, 0, 0, 1131,
	-2, 0, 1183, 0, 871, 1034, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 839, 850, 847,
	846, 823, 0, 822, 820, 0, 824, 0, 0, 0,
	565, 583, 567, 0, 579, 0, 667, 0, 0, 714,
	717, 1152, 1156, 1157, 717, 0, 1149, 0, 0, 0,
	0, 763, 763, 763, 761, 737, 0, 743, 0, 0,
	767, 755, 0, -2, 734, 0, 0, 768, 0, 78,
	550, 88, 0, 550, 550, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 757,
	1163, 0, 1137, 1138, 139, 0, 0, 1158, 1142, 453,
	0, 0, 517, 0, 671, 0, 0, 0, 1393, 525,
	1196, 599, 0, 776, 0, 613, 0, 0, 773, 0,
	184, 0, 107, 108, 0, 187, 0, 190, 0, 0,
	193, 0, 0, 0, 1088, 674, 0, 0, 269, 0,
	0, 674, 0, 1090, 784, 785, 786, 787, 788, 871,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 833, 0, 808, 808, 808, 825, 826, 834,
	835, 840, 841, 852, 853, 855, 857, 851, 851, 851,
	848, 849, 757, 126, 0, 0, 0, 0, 308, 309,
	0, 587, 0, 591, 329, 330, 331, 593, 594, 313,
	332, 333, 334, 335, 336, 337, 0, 512, 0, 514,
	1189, 0, 310, 322, 311, 314, 0, 203, 388, 389,
	391, 392, 393, 397, 0, 442, 399, 401, 403, 405,
	407, 415, 419, 674, 425, 428, 432, 433, 434, 435,
	0, 0, 0, 515, 0, 646, 691, 692, 695, 699,
	700, 703, 706, 707, 697, 874, 660, 661, 662, 685,
	686, 537, 0, 0, 286, 875, 780, 781, 827, 828,
	829, 830, 831, 876, 877, 0, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, -2, -2, -2, 895,
	896, 897, -2, -2, -2, 901, 902, -2, 1085, 1087,
	0, 1146, 0, -2, 0, -2, -2, -2, -2, 915,
	0, 917, 920, 922, 924, 0, 0, 0, 0, 1145,
	934, 1123, 0, 0, 1064, 1065, 1066, 919, 0, 0,
	1144, 1135, 0, 0, -2, 974, 0, 0, 0, 1094,
	1095, 1130, 1126, 0, 981, 684, 0, 0, 0, 0,
	988, 0, 1192, 858, 859, 860, 861, 862, 863, 872,
	1042, 0, 0, 0, 995, 996, 998, 999, 1001, 1002,
	0, 0, 0, 1010, 0, 1098, -2, -2, -2, -2,
	-2, -2, -2, 0, 1012, 0, 1014, 1088, 1108, 0,
	0, 937, 0, 0, 0, 0, 1411, 0, 1017, 1088,
	1116, 0, 0, 0, 0, 0, 1088, 0, 1122, 0,
	0, 0, 0, 0, 1028, 0, 1030, 0, 0, 0,
	0, 0, 0, 578, 669, 0, 0, 776, 0, 0,
	0, 1155, 776, 0, 1151, 0, 0, 0, 0, 0,
	758, 762, 759, 760, 0, 0, 743, 755, 725, 0,
	0, 0, 732, 733, 754, 0, 753, 742, -2, 0,
	0, 0, 0, 0, 549, 90, 1393, 0, 111, 0,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 1166, 129, 0, 1173, 0, 0, 0,
	0, 0, 452, 1172, 454, 456, 457, 458, 459, 1197,
	0, 1197, 0, 0, 0, 0, 0, 0, 601, 607,
	0, 625, 0, 625, 615, 0, 0, 0, 625, 629,
	630, 632, 633, 0, 0, 774, 200, 109, 109, 1161,
	109, 109, 197, 252, 0, 207, 244, 0, 0, 0,
	246, 248, 0, 777, 779, 0, 789, 0, 138, 0,
	0, 0, 0, 302, 0, 586, 592, 0, 326, 0,
	328, 513, 1191, 1190, 0, 204, 444, 277, 417, 420,
	438, 439, 440, 771, 0, 701, 0, 0, 698, 704,
	705, 0, 688, 535, 536, 0, 0, 0, -2, -2,
	0, 0, 0, 935, -2, 916, 918, 921, 923, 925,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	1133, 1136, -2, 1089, 1092, 1093, 0, 0, 1127, 0,
	0, 0, 0, 683, 684, 684, 684, 987, 0, 0,
	0, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 1009, 0, 1011, 1013, 0, 0, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 941, 942, 0, 0, 1016, 1114, 1115, 0,
	0, 0, 0, 0, 0, 1022, 0, 1121, 0, 0,
	0, 1026, 1027, 1029, 0, 806, 0, 832, 854, 856,
	844, 674, 1174, 709, 1153, 757, 716, 718, 1154, 709,
	1150, 745, 0, 747, 0, 0, 0, 749, 0, 738,
	0, 740, 755, 730, 0, 0, 723, 0, 722, 743,
	751, 0, 0, 769, 89, 539, 0, 0, 0, 92,
	1393, 100, 0, 467, 0, 0, 0, 0, 0, 552,
	101, 1393, 109, 1393, 109, 102, 79, 550, 80, 0,
	545, 0, 538, 81, 0, 547, 0, 138, 0, 0,
	140, 0, 1159, 461, 494, 0, 0, 1197, 0, 450,
	495, 519, 521, 0, 0, 603, 607, 0, 606, 672,
	165, 0, 775, 608, 625, 0, 0, 617, 614, 611,
	776, 0, 0, 0, 0, 185, 188, 191, 194, 1089,
	259, 0, 0, 1091, 0, 782, 0, 0, 118, 0,
	127, 261, 299, 300, 305, 324, 325, 327, 323, 0,
	0, 0, 687, 537, 0, 878, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1124, 0, 1059, 0, 0,
	1135, -2, 1096, 1125, 1129, 0, 982, 0, 0, 0,
	0, 1185, 864, 865, 866, 867, 868, 869, 870, 0,
	1040, 1041, 1045, 0, 0, 993, 0, 0, 1097, 1107,
	1109, 938, 939, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, -2, -2, -2, 956, 957, 958, -2,
	-2, -2, 0, 0, 0, 1110, 0, 0, 1062, 1112,
	1113, 1118, 1119, 0, 1019, 1020, 1021, 1120, 0, 0,
	0, 838, 0, 0, 711, 0, 715, 0, 711, 746,
	0, 765, 748, 728, 739, 0, 736, 726, 0, 727,
	0, 755, 0, 0, 735, 0, 0, 0, 0, 110,
	465, 484, 0, 0, 528, 534, 534, 0, 991, 992,
	0, 0, 0, 94, 0, 0, 0, 0, 98, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 141, 448, 0, 455, 0, 0, 0, 453, 0,
	0, 0, 605, 607, 0, 598, 599, 623, 624, 609,
	622, 0, 625, 631, 628, 634, 0, 0, 120, 0,
	0, 783, 790, 136, 1285, 134, 131, 133, 278, 696,
	702, 689, 537, 0, 0, -2, 0, 928, -2, -2,
	1058, 1089, 1134, 1128, 1182, 684, 983, 985, 986, 873,
	1047, 1044, 0, 1031, 1007, 1008, 1106, 0, 0, 0,
	0, 1089, 1061, 1018, 0, 1024, 1025, 807, 670, 1036,
	0, 0, 719, 1036, 0, 743, 741, 724, 720, 0,
	731, 0, 752, 541, 543, 91, 0, 466, 0, 469,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	486, 493, 0, 537, 1177, 0, 537, 0, 0, 0,
	0, 0, 106, 0, 0, 551, 0, 109, 109, 540,
	0, 0, 0, 546, 0, 548, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 607, 0, 600,
	601, 0, 0, 0, 616, 626, 0, 0, 0, 778,
	0, 0, 0, 0, 690, -2, -2, 929, 1060, 0,
	684, 0, 1033, -2, 0, 0, 0, 1063, 0, 657,
	0, 710, 708, 658, 764, 755, 0, 750, 93, 0,
	470, 471, 1197, 0, 474, 477, 0, 479, 1199, 461,
	0, 490, 491, 529, 530, 533, 531, 534, 684, 488,
	0, 95, 96, 105, 113, 97, 103, 0, 0, 0,
	0, 756, 0, 0, 0, 493, 0, 483, 461, 451,
	493, 0, 0, 602, 603, 0, 0, 0, 635, 636,
	0, 0, 0, 135, 0, 130, 132, 984, 1050, 0,
	-2, 0, 964, 1023, 1035, 1037, 0, 729, 721, 468,
	472, 0, 0, 499, 0, 487, 0, 537, 0, 0,
	115, 0, 542, 544, 0, 0, 0, 0, 461, 493,
	449, 461, 0, 604, 605, 0, 619, 776, 621, 0,
	0, 137, 0, 0, 0, 1046, 965, 0, 0, 0,
	478, 504, 0, 0, 0, 532, 982, 495, 99, 0,
	112, 0, 0, 684, 0, 481, 461, 523, 0, 596,
	0, 620, 138, 138, 1043, 1048, 1051, -2, 1353, 1232,
	0, 1049, 1038, 1039, 0, 480, 500, 501, 0, 496,
	497, 498, 1198, 492, 499, 114, 85, 87, 0, 0,
	482, 493, 776, 121, 122, 0, 1053, 1054, 1055, 1056,
	1057, 473, 502, 0, 503, 0, 0, 0, 504, 0,
	464, 461, 618, 0, 505, 0, 508, 509, 0, 506,
	489, 460, 462, 463, 524, 1052, 507, 510, 511,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1030
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1125
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1198
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1362
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1617
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{ /* SKIP DOC */
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "GRANT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			return helpWith(sqllex, "RESET")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return helpWith(sqllex, "RESET")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1878
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{ /* SKIP DOC */
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			return unimplemented(sqllex, "set local")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex, "set from current")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = Low
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = Normal
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = High
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.str = "client_encoding"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2379
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2383
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2387
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2530
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = DropDefault
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2540
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match full")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "match partial")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			return unimplemented(sqllex, "match simple")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2748
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			return unimplemented(sqllex, "no action")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "action set null")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			return unimplemented(sqllex, "action set default")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2834
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2874
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = true
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = false
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2905
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2909
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = Ascending
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = Descending
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2949
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2951
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = true
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = false
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2985
		{
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.str = ""
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.str = ""
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = ReadOnly
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = ReadWrite
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.str = ""
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			return helpWith(sqllex, "INSERT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3337
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 626:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3377
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3506
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "SELECT")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			return helpWith(sqllex, "VALUES")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3543
		{
			return helpWith(sqllex, "TABLE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			return helpWith(sqllex, "SELECT")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			return helpWith(sqllex, "TABLE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3653
		{
			return unimplemented(sqllex, "cte")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3657
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3661
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3665
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = true
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = false
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = true
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3689
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			return helpWith(sqllex, "VALUES")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &From{}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3910
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3928
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3955
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3992
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = nil
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.str = astFullJoin
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.str = astLeftJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.str = astRightJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.str = astInnerJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4176
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4262
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4276
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4284
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4319
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4391
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = nil
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4456
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4552
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4584
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4624
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = year
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = month
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = day
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = hour
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = minute
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = month
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = hour
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = minute
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = minute
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = nil
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = second
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4719
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4754
		{
			return unimplemented(sqllex, "at tz")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4988
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5161
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5214
		{
			return unimplemented(sqllex, "variadic")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5215
		{
			return unimplemented(sqllex, "variadic")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5239
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5255
		{
			return unimplemented(sqllex, "func_application")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5256
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5260
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5288
		{
			return unimplemented(sqllex, "current role")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5289
		{
			return unimplemented(sqllex, "current user")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5290
		{
			return unimplemented(sqllex, "session user")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			return unimplemented(sqllex, "user")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5324
		{
			return unimplemented(sqllex, "treat")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5370
		{
			return unimplemented(sqllex, "within group")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5371
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.str = ""
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5468
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5469
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5470
		{
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5473
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5474
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5480
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5481
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5482
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5483
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5484
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = Any
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = Some
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = All
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = Plus
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = Minus
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = Mult
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = Div
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = Mod
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = Bitand
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = Bitor
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Pow
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = Bitxor
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = LT
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = GT
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = EQ
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = LE
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = GE
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = NE
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = Like
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = NotLike
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = ILike
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = NotILike
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5849
		{
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6011
		{
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6047
		{
			return unimplemented(sqllex, "func const")
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6056
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = DNull
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6083
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.str = ""
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
