// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5777

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 35,
	354, 35,
	-2, 486,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 60,
	1, 459,
	197, 459,
	241, 459,
	350, 459,
	352, 459,
	354, 459,
	-2, 469,
	-1, 95,
	1, 462,
	197, 462,
	241, 462,
	350, 462,
	352, 462,
	354, 462,
	-2, 468,
	-1, 106,
	1, 35,
	354, 35,
	-2, 486,
	-1, 492,
	122, 1067,
	293, 1067,
	336, 1067,
	353, 1067,
	-2, 0,
	-1, 503,
	1, 191,
	354, 191,
	-2, 1072,
	-1, 526,
	111, 496,
	170, 496,
	195, 496,
	-2, 465,
	-1, 529,
	111, 495,
	170, 495,
	195, 495,
	-2, 463,
	-1, 658,
	351, 999,
	-2, 992,
	-1, 659,
	351, 1000,
	-2, 993,
	-1, 665,
	5, 666,
	351, 666,
	-2, 1197,
	-1, 690,
	5, 625,
	-2, 1167,
	-1, 691,
	5, 660,
	351, 660,
	-2, 1169,
	-1, 692,
	5, 635,
	-2, 1170,
	-1, 693,
	5, 634,
	-2, 1171,
	-1, 694,
	5, 660,
	351, 660,
	-2, 1174,
	-1, 695,
	5, 660,
	351, 660,
	-2, 1175,
	-1, 696,
	5, 661,
	-2, 1178,
	-1, 697,
	5, 617,
	-2, 1179,
	-1, 698,
	5, 617,
	-2, 1180,
	-1, 699,
	5, 642,
	-2, 1184,
	-1, 700,
	5, 627,
	-2, 1185,
	-1, 701,
	5, 628,
	-2, 1186,
	-1, 702,
	5, 618,
	-2, 1191,
	-1, 703,
	5, 619,
	-2, 1192,
	-1, 704,
	5, 620,
	-2, 1193,
	-1, 705,
	5, 621,
	-2, 1194,
	-1, 706,
	5, 622,
	-2, 1195,
	-1, 707,
	5, 623,
	-2, 1196,
	-1, 708,
	5, 617,
	-2, 1201,
	-1, 709,
	5, 626,
	-2, 1206,
	-1, 710,
	5, 624,
	-2, 1209,
	-1, 711,
	5, 658,
	351, 658,
	-2, 1211,
	-1, 712,
	5, 662,
	-2, 1214,
	-1, 713,
	5, 664,
	-2, 1215,
	-1, 714,
	5, 657,
	351, 657,
	-2, 1220,
	-1, 800,
	111, 495,
	170, 495,
	195, 495,
	-2, 466,
	-1, 942,
	102, 469,
	111, 469,
	151, 469,
	170, 469,
	195, 469,
	201, 469,
	304, 469,
	-2, 785,
	-1, 951,
	351, 976,
	-2, 964,
	-1, 1233,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 701,
	-1, 1234,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 702,
	-1, 1235,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 703,
	-1, 1239,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 707,
	-1, 1240,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 708,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 709,
	-1, 1244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 714,
	-1, 1250,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 716,
	-1, 1252,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 720,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 721,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 722,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 723,
	-1, 1281,
	206, 858,
	-2, 861,
	-1, 1318,
	122, 898,
	351, 999,
	-2, 992,
	-1, 1319,
	122, 899,
	-2, 1163,
	-1, 1320,
	122, 900,
	-2, 1071,
	-1, 1321,
	122, 901,
	-2, 1035,
	-1, 1322,
	122, 902,
	-2, 1052,
	-1, 1323,
	122, 903,
	-2, 1070,
	-1, 1324,
	122, 904,
	-2, 1122,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 715,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 717,
	-1, 1514,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 718,
	-1, 1532,
	206, 857,
	-2, 860,
	-1, 1699,
	102, 469,
	111, 469,
	151, 469,
	170, 469,
	195, 469,
	201, 469,
	304, 469,
	-2, 552,
	-1, 1741,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 719,
	-1, 1746,
	154, 0,
	-2, 735,
	-1, 1756,
	206, 859,
	-2, 862,
	-1, 1798,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 762,
	-1, 1799,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 763,
	-1, 1800,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 764,
	-1, 1804,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 768,
	-1, 1805,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 769,
	-1, 1806,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 770,
	-1, 1890,
	1, 553,
	70, 553,
	102, 553,
	111, 553,
	123, 553,
	127, 553,
	129, 553,
	142, 553,
	151, 553,
	158, 553,
	167, 553,
	170, 553,
	182, 553,
	195, 553,
	197, 553,
	201, 553,
	241, 553,
	243, 553,
	304, 553,
	312, 553,
	323, 553,
	324, 553,
	333, 553,
	350, 553,
	352, 553,
	354, 553,
	355, 553,
	-2, 552,
	-1, 1940,
	154, 0,
	-2, 736,
	-1, 1943,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 739,
	-1, 1944,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 741,
	-1, 2061,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 740,
	-1, 2062,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 742,
	-1, 2069,
	154, 0,
	-2, 771,
	-1, 2136,
	154, 0,
	-2, 772,
	-1, 2217,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1166,
}

const sqlPrivate = 57344

const sqlLast = 31938

var sqlAct = [...]int{

	659, 2033, 2216, 2200, 2165, 2245, 2201, 1371, 1843, 2202,
	1109, 2215, 530, 1886, 1775, 1989, 2059, 1363, 1411, 2093,
	1021, 1440, 1853, 2014, 649, 1711, 1898, 2001, 1912, 59,
	1115, 368, 1885, 657, 1694, 1667, 635, 119, 119, 656,
	119, 1330, 725, 545, 1598, 600, 1415, 1697, 1712, 1995,
	1004, 370, 119, 119, 119, 1669, 1410, 891, 1429, 119,
	363, 24, 1864, 1456, 1414, 1111, 866, 119, 853, 863,
	1457, 1873, 1685, 1597, 1372, 1279, 1504, 1543, 1212, 1175,
	352, 1184, 1680, 1462, 1135, 1436, 350, 1099, 771, 1459,
	1624, 119, 1445, 1022, 947, 993, 1289, 1304, 1207, 554,
	629, 119, 119, 1344, 1267, 119, 1264, 502, 119, 119,
	119, 119, 892, 868, 119, 119, 548, 854, 737, 770,
	978, 549, 1298, 746, 735, 1365, 1315, 535, 537, 94,
	938, 1164, 652, 615, 738, 628, 500, 1418, 803, 802,
	804, 589, 111, 95, 1097, 96, 787, 498, 489, 478,
	540, 651, 731, 997, 1913, 115, 587, 982, 557, 808,
	786, 496, 2104, 1531, 1006, 2105, 2243, 24, 1006, 888,
	1006, 1368, 1692, 1364, 529, 1695, 2225, 534, 94, 1911,
	330, 2212, 2211, 534, 1396, 1396, 538, 2208, 367, 2198,
	888, 1636, 888, 2195, 597, 102, 888, 603, 893, 894,
	610, 2184, 1208, 2162, 1390, 1635, 888, 2146, 2142, 2138,
	1911, 888, 1390, 2130, 2100, 1676, 2129, 2101, 367, 893,
	894, 896, 2087, 104, 1683, 1911, 2084, 606, 2082, 888,
	2063, 1911, 1535, 1390, 93, 94, 1301, 1536, 527, 513,
	526, 2044, 896, 2043, 888, 895, 1911, 893, 894, 882,
	913, 914, 915, 923, 924, 925, 1534, 2017, 591, 105,
	1396, 1396, 48, 916, 93, 1967, 895, 100, 1396, 52,
	896, 49, 1945, 927, 101, 1396, 1942, 1932, 1931, 1390,
	1396, 1396, 1910, 1302, 1838, 1911, 1833, 1362, 1750, 1362,
	1396, 1396, 48, 97, 895, 50, 2152, 1347, 1211, 52,
	910, 49, 1568, 1569, 1656, 901, 1615, 888, 1613, 1616,
	1612, 1396, 1611, 1396, 1532, 1396, 1453, 1396, 1399, 888,
	1395, 1396, 1208, 1396, 1389, 50, 901, 1390, 1303, 1300,
	1361, 1396, 1172, 1362, 1166, 1171, 102, 1542, 1015, 1683,
	119, 1016, 717, 1165, 1211, 1677, 119, 119, 119, 119,
	119, 1811, 554, 1753, 901, 1007, 1173, 1657, 888, 1007,
	1439, 1007, 1407, 911, 104, 1081, 1283, 849, 743, 613,
	758, 596, 106, 920, 928, 1914, 619, 2009, 1698, 893,
	894, 535, 913, 914, 915, 923, 924, 925, 1103, 102,
	785, 926, 551, 2235, 2214, 2207, 2170, 716, 815, 2133,
	105, 2085, 896, 1305, 1975, 927, 918, 1972, 100, 1574,
	1968, 1960, 911, 1959, 1958, 101, 1954, 104, 102, 1568,
	1569, 722, 1953, 1952, 1635, 1951, 895, 1890, 99, 732,
	1863, 1842, 910, 1826, 1367, 955, 912, 917, 1821, 1820,
	1819, 893, 894, 1761, 859, 1655, 104, 1659, 102, 1620,
	1617, 1696, 1447, 105, 1605, 740, 740, 1596, 99, 1567,
	1564, 1563, 1561, 1548, 896, 1547, 1466, 1584, 1840, 1312,
	1311, 1010, 1114, 747, 119, 1005, 104, 1107, 1310, 815,
	1299, 1275, 105, 741, 814, 912, 901, 97, 895, 724,
	100, 119, 1777, 948, 910, 97, 119, 101, 2187, 2149,
	2128, 921, 1394, 2127, 554, 920, 928, 2126, 2118, 2116,
	2108, 2096, 105, 119, 2080, 2071, 97, 2030, 2019, 119,
	100, 119, 119, 119, 1983, 119, 1574, 101, 904, 905,
	897, 898, 899, 900, 902, 903, 1965, 1937, 918, 801,
	1585, 1917, 1878, 1851, 911, 1849, 97, 1848, 901, 1846,
	1745, 897, 898, 899, 900, 902, 903, 1720, 1974, 1719,
	554, 1595, 1557, 2132, 1556, 1553, 367, 1165, 919, 1528,
	1523, 907, 908, 909, 922, 1269, 906, 904, 905, 897,
	898, 899, 900, 902, 903, 1495, 1276, 1493, 2226, 119,
	1480, 781, 1969, 1479, 1452, 983, 893, 894, 986, 1354,
	119, 1309, 1108, 822, 800, 601, 911, 990, 792, 976,
	975, 974, 93, 554, 119, 973, 972, 912, 971, 896,
	370, 554, 970, 969, 968, 967, 966, 965, 793, 964,
	796, 963, 962, 921, 1570, 1571, 1572, 1573, 1575, 1576,
	48, 961, 858, 895, 769, 960, 959, 52, 952, 49,
	723, 889, 941, 97, 852, 765, 822, 766, 754, 1480,
	752, 790, 857, 535, 822, 2103, 2006, 1980, 788, 1979,
	1947, 619, 821, 50, 1879, 948, 1568, 1569, 1645, 912,
	1644, 527, 939, 526, 859, 2106, 1568, 1569, 780, 778,
	1670, 1978, 811, 812, 1637, 893, 894, 1208, 1698, 957,
	919, 876, 988, 907, 908, 909, 922, 989, 906, 904,
	905, 897, 898, 899, 900, 902, 903, 819, 896, 1619,
	1618, 874, 2007, 1507, 119, 886, 1112, 552, 1435, 119,
	119, 119, 779, 119, 848, 777, 1434, 1087, 875, 1505,
	1996, 1364, 895, 1778, 1290, 850, 345, 109, 1568, 1569,
	119, 119, 1539, 1572, 1573, 1575, 1576, 979, 119, 1631,
	1707, 869, 119, 870, 2173, 119, 844, 995, 1925, 887,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 554,
	554, 954, 2233, 2232, 2141, 1400, 370, 1652, 664, 1009,
	119, 533, 1012, 1574, 512, 859, 102, 511, 119, 951,
	1151, 1583, 901, 346, 108, 845, 99, 1113, 506, 507,
	839, 1839, 869, 1177, 870, 980, 981, 1104, 732, 1731,
	2054, 479, 2053, 2052, 104, 119, 2051, 1735, 336, 119,
	1734, 119, 119, 119, 119, 119, 119, 871, 524, 1017,
	532, 119, 1106, 484, 1704, 119, 119, 1703, 1552, 480,
	119, 1551, 1177, 119, 1550, 1574, 984, 1549, 1176, 778,
	105, 869, 119, 870, 1118, 1510, 987, 1088, 100, 1019,
	119, 1163, 1397, 1251, 119, 101, 481, 1205, 1204, 1936,
	337, 996, 119, 370, 999, 1028, 119, 1301, 871, 119,
	534, 1201, 1185, 789, 97, 483, 370, 612, 1358, 1357,
	1073, 1077, 779, 2140, 1075, 1222, 1430, 1159, 1074, 750,
	1096, 1160, 1076, 1584, 1203, 1080, 1178, 519, 719, 1738,
	2035, 1828, 340, 718, 1100, 1152, 1266, 1221, 1093, 1092,
	841, 944, 1139, 903, 1302, 1621, 1196, 871, 1105, 1199,
	879, 1120, 991, 1122, 1121, 347, 107, 1722, 1141, 764,
	1189, 1191, 527, 1266, 1131, 527, 527, 1132, 1133, 1188,
	877, 2185, 1000, 1194, 1305, 1142, 2239, 94, 1146, 1147,
	1148, 1149, 1150, 1145, 349, 1206, 1290, 878, 2204, 1303,
	1300, 1156, 1157, 1625, 348, 110, 1585, 1213, 1220, 1169,
	1210, 1161, 1771, 531, 995, 842, 1768, 1273, 2232, 825,
	1202, 119, 1271, 119, 119, 482, 119, 1181, 1500, 119,
	1497, 119, 119, 1576, 119, 119, 836, 554, 1570, 1571,
	1572, 1573, 1575, 1576, 884, 1491, 1028, 1028, 1651, 899,
	900, 902, 903, 1384, 880, 1684, 826, 520, 883, 824,
	2254, 1769, 2248, 1287, 339, 338, 2121, 1729, 843, 1158,
	879, 749, 1071, 837, 1305, 872, 1629, 1187, 1366, 485,
	1366, 525, 1006, 1078, 2205, 2181, 521, 1305, 1277, 1653,
	877, 977, 1274, 2238, 867, 582, 522, 1579, 1577, 1578,
	1570, 1571, 1572, 1573, 1575, 1576, 1174, 878, 1688, 2182,
	661, 331, 1325, 820, 476, 1059, 1425, 1437, 1438, 2067,
	1625, 1388, 1385, 2081, 370, 936, 872, 1691, 119, 119,
	1723, 1555, 1874, 1889, 341, 119, 1305, 534, 1381, 740,
	2206, 740, 1520, 1686, 1379, 1370, 514, 1739, 1858, 2036,
	2203, 1299, 1689, 1380, 1248, 1408, 1906, 1518, 747, 119,
	1386, 479, 2231, 1186, 94, 119, 1382, 1687, 1383, 94,
	1058, 1393, 807, 583, 342, 872, 2229, 332, 1988, 119,
	119, 119, 2003, 484, 1427, 830, 761, 119, 370, 480,
	1907, 2237, 1503, 1512, 757, 119, 119, 119, 2246, 2046,
	774, 119, 1454, 343, 119, 344, 2045, 1465, 981, 980,
	119, 119, 119, 119, 119, 1262, 481, 1409, 1403, 1464,
	1265, 1401, 119, 1688, 515, 119, 119, 1515, 1690, 1405,
	1260, 984, 554, 987, 1963, 483, 806, 1516, 1807, 2028,
	2259, 1521, 1691, 1921, 2113, 1091, 1090, 1473, 551, 546,
	1406, 2255, 1684, 2247, 1246, 1249, 1059, 1059, 1872, 1280,
	1448, 1467, 1404, 1433, 1272, 775, 1284, 1689, 1706, 776,
	1292, 1924, 584, 1007, 2249, 822, 1492, 1476, 1923, 1494,
	1472, 1490, 1317, 1317, 1328, 1428, 1339, 1245, 1119, 1902,
	1110, 1903, 1351, 1352, 1353, 805, 1477, 2002, 1450, 1127,
	1256, 2015, 94, 1455, 1767, 1688, 2166, 1468, 1257, 806,
	1258, 1058, 1058, 1155, 1263, 1086, 1082, 1854, 2004, 535,
	807, 1905, 1990, 517, 1691, 1541, 1524, 1525, 2029, 1094,
	1908, 1808, 1482, 1964, 1481, 1028, 1443, 1809, 1869, 487,
	1686, 2258, 1920, 1690, 1506, 482, 1868, 1517, 486, 1689,
	585, 774, 730, 729, 1519, 532, 797, 1844, 1084, 1981,
	2026, 1502, 1865, 1681, 1687, 1308, 2016, 2070, 805, 1128,
	1085, 1962, 1600, 1599, 1513, 1511, 1744, 1922, 1737, 1622,
	1562, 586, 1247, 119, 2027, 535, 1522, 1398, 119, 1360,
	119, 1527, 1200, 1065, 1591, 1592, 1593, 119, 1197, 485,
	847, 516, 846, 840, 835, 1538, 834, 1904, 119, 833,
	832, 831, 1095, 828, 728, 620, 1153, 535, 119, 119,
	1259, 644, 1144, 958, 838, 1690, 1307, 1261, 554, 727,
	726, 2199, 365, 34, 112, 360, 29, 2163, 1895, 1727,
	119, 1725, 119, 3, 119, 359, 28, 1705, 119, 358,
	27, 1639, 119, 1640, 1641, 1666, 1568, 1569, 116, 116,
	1431, 334, 356, 26, 119, 1602, 1603, 1604, 1423, 1387,
	1658, 1014, 1660, 470, 471, 472, 1627, 1013, 364, 18,
	491, 1633, 1011, 1630, 119, 361, 15, 1008, 504, 357,
	13, 1003, 1638, 885, 881, 362, 12, 1642, 354, 11,
	873, 366, 9, 1661, 1643, 1758, 1668, 1664, 2075, 1650,
	1648, 1649, 491, 535, 809, 1654, 353, 8, 355, 4,
	1441, 594, 590, 590, 2233, 1718, 334, 1477, 505, 334,
	334, 609, 334, 1102, 1717, 116, 616, 2077, 1672, 34,
	1716, 1193, 29, 1028, 1674, 1059, 617, 618, 614, 1177,
	602, 1662, 28, 1679, 1701, 1192, 27, 1726, 1832, 1728,
	2123, 1027, 475, 1574, 1747, 1693, 1028, 1700, 1702, 26,
	1678, 893, 894, 1742, 1743, 1682, 119, 1763, 1764, 1765,
	1709, 1442, 1177, 552, 547, 18, 810, 1526, 1190, 622,
	1914, 1730, 15, 595, 1529, 827, 13, 2135, 1736, 1866,
	1058, 94, 12, 813, 1198, 11, 1195, 94, 9, 2153,
	1986, 1426, 1545, 1546, 1422, 1369, 508, 509, 895, 1162,
	488, 1584, 1079, 8, 1020, 4, 1392, 1754, 2252, 2257,
	1568, 1569, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1757, 1810, 1594, 2197, 1779, 119, 119, 1781, 1784,
	893, 894, 1814, 2156, 1607, 817, 816, 1786, 1770, 1772,
	1773, 2012, 1834, 1213, 1782, 1841, 1028, 1827, 119, 1774,
	119, 817, 1213, 1787, 1646, 893, 894, 119, 1614, 1359,
	554, 1061, 1815, 1850, 1585, 1356, 1060, 370, 119, 1355,
	1297, 945, 1027, 1027, 119, 818, 1949, 119, 896, 2179,
	1847, 2060, 1028, 1028, 1829, 1818, 370, 1860, 119, 1766,
	1836, 1028, 1028, 1663, 119, 119, 119, 1837, 1861, 1490,
	1835, 955, 895, 1856, 953, 763, 518, 2034, 477, 1831,
	1143, 119, 1845, 829, 1855, 2008, 119, 1881, 119, 1877,
	119, 119, 119, 1059, 1028, 119, 119, 1857, 554, 1919,
	2180, 334, 1880, 1915, 1718, 1918, 634, 733, 334, 504,
	504, 616, 1894, 1717, 1867, 1955, 1059, 1870, 1554, 1716,
	1871, 1875, 1876, 2092, 2066, 1891, 1941, 1578, 1570, 1571,
	1572, 1573, 1575, 1576, 1306, 956, 46, 1714, 119, 638,
	1896, 822, 1708, 1417, 1416, 373, 333, 1089, 1058, 660,
	539, 1732, 1316, 1733, 1214, 1935, 720, 662, 1025, 663,
	1026, 985, 650, 1023, 745, 1373, 1270, 1288, 1537, 949,
	630, 1058, 1061, 1061, 642, 641, 1285, 1060, 1060, 751,
	2013, 1628, 1973, 1126, 1432, 1123, 1751, 1724, 523, 1961,
	1565, 753, 1337, 1329, 1326, 791, 862, 937, 1374, 784,
	1634, 1391, 851, 1024, 1134, 593, 592, 1412, 782, 119,
	119, 598, 1083, 1402, 605, 608, 554, 598, 930, 929,
	510, 2115, 773, 772, 1424, 1475, 1059, 1984, 2253, 119,
	119, 1718, 1982, 119, 2122, 755, 1718, 1987, 1028, 1721,
	1717, 119, 2172, 1994, 103, 1717, 1716, 2131, 119, 2058,
	1501, 1716, 762, 1812, 1976, 65, 119, 504, 119, 1992,
	370, 119, 1059, 1059, 1822, 33, 1985, 30, 84, 119,
	1991, 1059, 1059, 2011, 491, 370, 1993, 83, 82, 81,
	334, 1058, 504, 795, 504, 1977, 798, 2010, 80, 79,
	78, 2024, 77, 76, 2038, 75, 1718, 2040, 2020, 1999,
	2000, 2021, 2022, 2005, 1059, 1717, 2039, 74, 73, 2031,
	72, 1716, 71, 70, 69, 68, 995, 1058, 1058, 67,
	2037, 2056, 501, 2065, 64, 63, 1058, 1058, 62, 61,
	25, 1027, 23, 2055, 22, 119, 21, 2049, 2050, 32,
	20, 31, 19, 17, 1024, 1024, 2072, 16, 14, 119,
	590, 10, 554, 2076, 1884, 45, 44, 119, 43, 1058,
	42, 334, 41, 40, 2069, 119, 7, 6, 1718, 2083,
	5, 119, 2, 1, 0, 116, 0, 1717, 0, 2048,
	119, 119, 367, 1716, 2078, 0, 0, 119, 2095, 2091,
	0, 0, 0, 0, 2110, 2090, 0, 0, 2109, 0,
	0, 2099, 2117, 2102, 0, 0, 2089, 2086, 0, 0,
	2111, 0, 119, 119, 0, 2120, 0, 2112, 1028, 0,
	1072, 0, 0, 0, 0, 2107, 0, 0, 93, 0,
	2119, 0, 0, 0, 0, 2098, 0, 0, 119, 2134,
	0, 0, 119, 0, 2145, 0, 598, 0, 1059, 2148,
	554, 0, 2137, 608, 2147, 0, 48, 119, 1028, 0,
	0, 1061, 0, 52, 0, 49, 1060, 370, 119, 119,
	535, 120, 2136, 0, 2151, 2154, 0, 119, 0, 119,
	0, 0, 119, 0, 370, 334, 0, 2161, 2157, 50,
	334, 334, 334, 2150, 1001, 0, 0, 2168, 2158, 0,
	2160, 2169, 0, 1058, 0, 0, 2178, 2155, 2189, 0,
	0, 334, 334, 119, 2188, 2174, 119, 2190, 0, 116,
	2186, 715, 371, 116, 1998, 0, 504, 2192, 2194, 2196,
	0, 0, 2193, 0, 1718, 2191, 0, 0, 0, 1027,
	0, 0, 2209, 1717, 0, 0, 119, 0, 119, 1716,
	2213, 491, 0, 2222, 2221, 0, 893, 894, 2224, 1117,
	119, 0, 1027, 0, 1028, 0, 2223, 0, 0, 2230,
	555, 2228, 372, 0, 2234, 2042, 0, 0, 0, 896,
	2236, 0, 0, 0, 0, 0, 504, 2244, 0, 0,
	504, 0, 116, 504, 504, 504, 504, 504, 2251, 2250,
	2242, 0, 1154, 895, 0, 0, 504, 504, 0, 0,
	0, 590, 102, 2256, 616, 2260, 0, 0, 0, 0,
	556, 367, 99, 334, 0, 598, 1906, 0, 1059, 1899,
	0, 1182, 0, 1024, 0, 334, 0, 1897, 0, 0,
	104, 1901, 0, 334, 0, 0, 0, 334, 0, 0,
	1209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1907, 0, 0, 901, 0, 0, 0, 93, 1059, 1061,
	0, 0, 1027, 0, 1060, 0, 105, 0, 0, 0,
	0, 0, 1900, 1058, 100, 0, 0, 0, 0, 0,
	0, 101, 1061, 0, 0, 48, 0, 1060, 0, 0,
	0, 0, 52, 0, 49, 0, 860, 0, 1027, 1027,
	97, 0, 0, 0, 0, 0, 0, 1027, 1027, 0,
	0, 911, 0, 1058, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 1130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1027, 0, 621, 721, 0, 0, 0, 0, 0, 1902,
	0, 1903, 334, 0, 1377, 1378, 0, 334, 0, 0,
	334, 0, 504, 504, 1059, 504, 616, 0, 0, 0,
	0, 0, 0, 0, 2175, 2176, 2177, 0, 0, 0,
	0, 1905, 0, 2183, 912, 0, 0, 0, 0, 0,
	1908, 0, 1061, 0, 0, 0, 0, 1060, 0, 0,
	0, 893, 894, 0, 0, 0, 0, 0, 0, 0,
	1568, 1569, 0, 555, 0, 0, 0, 0, 0, 1058,
	994, 0, 1568, 1569, 896, 598, 998, 998, 1061, 1061,
	0, 1024, 0, 1060, 1060, 0, 0, 1061, 1061, 0,
	0, 102, 1060, 1060, 0, 0, 605, 608, 895, 0,
	0, 99, 0, 0, 1024, 0, 0, 0, 0, 334,
	1413, 0, 0, 556, 0, 0, 616, 1904, 0, 104,
	1061, 0, 0, 0, 0, 1060, 0, 905, 897, 898,
	899, 900, 902, 903, 1027, 0, 0, 1331, 0, 0,
	334, 0, 0, 0, 0, 0, 1446, 759, 760, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 901, 0,
	334, 334, 334, 100, 0, 0, 0, 1574, 334, 0,
	101, 0, 0, 0, 0, 0, 334, 1470, 1471, 1574,
	0, 0, 1182, 0, 0, 1478, 0, 0, 0, 351,
	0, 1483, 1484, 1486, 1488, 1489, 0, 0, 0, 0,
	0, 893, 894, 1496, 0, 0, 1498, 334, 1170, 0,
	0, 0, 0, 0, 1024, 555, 911, 0, 0, 0,
	598, 0, 0, 0, 896, 1584, 0, 0, 608, 0,
	0, 0, 598, 0, 0, 0, 0, 1584, 0, 0,
	0, 0, 0, 0, 0, 0, 639, 60, 895, 0,
	1024, 1024, 0, 855, 855, 0, 0, 0, 0, 1024,
	1024, 0, 864, 0, 1061, 556, 0, 0, 0, 1060,
	0, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 932, 933, 934, 935, 912,
	0, 0, 1024, 0, 943, 0, 60, 0, 1585, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 901, 0,
	1585, 0, 0, 0, 1027, 0, 0, 0, 0, 0,
	0, 556, 0, 0, 555, 0, 0, 0, 0, 0,
	0, 371, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 0, 536, 0, 0, 1375, 0, 0,
	0, 0, 608, 60, 1027, 608, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 911, 0, 0, 334,
	0, 1632, 0, 0, 556, 0, 0, 0, 334, 0,
	0, 372, 556, 897, 898, 899, 900, 902, 903, 334,
	1577, 1578, 1570, 1571, 1572, 1573, 1575, 1576, 0, 1446,
	1446, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575, 1576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 1117, 0, 504, 0, 0, 0, 334,
	0, 0, 0, 1671, 1331, 1331, 1024, 0, 0, 912,
	0, 0, 0, 0, 1061, 334, 0, 0, 0, 1060,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 0,
	1027, 0, 0, 0, 0, 334, 1124, 0, 1129, 0,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 0, 1713, 0, 1061, 1444, 0, 0, 0, 1060,
	555, 555, 0, 0, 0, 0, 0, 371, 0, 0,
	0, 0, 1331, 1331, 1331, 1449, 608, 1451, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 0,
	556, 556, 0, 0, 0, 0, 0, 372, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 1776, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
	0, 1250, 0, 1252, 1253, 1254, 1255, 0, 0, 0,
	1061, 0, 0, 0, 371, 1060, 0, 0, 536, 0,
	1278, 0, 0, 0, 0, 0, 0, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 1024, 0, 0, 0,
	0, 0, 0, 1313, 1314, 0, 0, 1327, 0, 1338,
	1340, 1345, 1348, 1349, 1350, 0, 0, 334, 334, 0,
	0, 0, 0, 0, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1024, 372, 0, 1182,
	0, 1117, 0, 0, 0, 0, 0, 0, 1852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1862,
	0, 1331, 1331, 0, 0, 334, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1888,
	0, 0, 0, 0, 0, 1892, 1893, 1182, 0, 1623,
	0, 0, 0, 0, 994, 0, 0, 0, 0, 0,
	0, 1713, 616, 994, 0, 0, 0, 1926, 555, 1927,
	0, 334, 1929, 1930, 598, 0, 1933, 334, 0, 0,
	1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
	1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 0,
	1331, 0, 1024, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1665, 0, 0, 0, 556, 1956,
	0, 0, 0, 0, 528, 0, 0, 0, 0, 0,
	1675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1568, 1569, 371, 1586, 1587, 1588, 0,
	0, 0, 0, 0, 0, 0, 855, 0, 0, 1939,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1713, 0,
	616, 1413, 0, 1713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 1583, 0, 0, 0,
	334, 334, 0, 0, 334, 0, 0, 0, 940, 371,
	942, 0, 1888, 0, 0, 0, 0, 946, 0, 2018,
	0, 0, 0, 0, 0, 0, 0, 1182, 0, 2023,
	0, 0, 2025, 0, 0, 0, 1508, 1509, 0, 0,
	334, 0, 1514, 1713, 0, 0, 0, 0, 0, 0,
	1574, 0, 0, 555, 0, 0, 0, 0, 0, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 2057, 0,
	0, 0, 0, 0, 1533, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 1544, 0, 0, 1589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 0, 556, 0, 0, 616, 0, 1584, 0,
	0, 0, 1375, 1460, 0, 1713, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 943, 0, 2094, 0,
	0, 0, 1345, 1345, 1345, 0, 334, 0, 0, 0,
	0, 0, 1888, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 1888, 0, 0, 1626, 0, 0, 1117, 0,
	1460, 0, 0, 1460, 1568, 1569, 0, 1586, 1587, 1588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1938, 1585, 0, 2124, 2125, 528, 0, 1647, 528, 528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1928, 1331, 0, 2143,
	0, 0, 1934, 2144, 0, 60, 0, 1583, 0, 0,
	0, 0, 0, 0, 0, 1673, 0, 0, 616, 0,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 1888,
	616, 0, 0, 0, 0, 0, 0, 0, 2167, 555,
	616, 0, 60, 334, 0, 60, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 1580, 1581, 1582,
	1710, 1574, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575,
	1576, 1713, 0, 0, 2094, 0, 0, 1888, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 0, 1740, 556,
	0, 1741, 0, 0, 916, 1268, 0, 0, 1589, 0,
	0, 896, 0, 1746, 927, 0, 0, 334, 0, 616,
	0, 0, 1755, 0, 0, 0, 0, 0, 0, 1584,
	1759, 2227, 0, 1647, 0, 895, 0, 0, 0, 0,
	0, 910, 0, 0, 0, 1460, 1460, 0, 0, 1460,
	0, 0, 0, 1783, 0, 0, 0, 1785, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 60, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 2032, 0, 0, 0, 0,
	1816, 1817, 60, 0, 0, 901, 0, 60, 0, 1823,
	1824, 1825, 1585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 928, 855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 918, 0, 0,
	0, 0, 0, 911, 916, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 927, 2088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 917, 0,
	0, 1460, 0, 0, 0, 895, 0, 0, 1580, 1581,
	1582, 910, 0, 1579, 1577, 1578, 1570, 1571, 1572, 1573,
	1575, 1576, 0, 0, 0, 0, 1916, 0, 0, 0,
	0, 555, 0, 0, 0, 0, 0, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 912, 0, 0, 0,
	60, 0, 0, 0, 0, 1940, 0, 371, 0, 1943,
	1944, 0, 921, 1461, 1946, 901, 0, 0, 0, 0,
	0, 1948, 0, 1950, 0, 0, 0, 0, 0, 0,
	0, 556, 0, 0, 920, 928, 0, 0, 372, 1957,
	0, 0, 60, 0, 0, 60, 0, 0, 0, 555,
	0, 0, 926, 0, 0, 0, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 2171, 0,
	0, 0, 1966, 911, 0, 0, 0, 0, 0, 919,
	0, 0, 907, 908, 909, 922, 0, 906, 904, 905,
	897, 898, 899, 900, 902, 903, 1268, 0, 917, 556,
	0, 0, 0, 1610, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1997, 0, 0, 0,
	0, 0, 1375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 555, 0, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 942, 0, 2047, 0, 0, 916, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 927, 0, 2061,
	2062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 0, 0, 536, 0, 0, 556, 895, 0,
	0, 0, 0, 0, 910, 0, 371, 0, 0, 919,
	2074, 0, 907, 908, 909, 922, 0, 906, 904, 905,
	897, 898, 899, 900, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 1609, 0, 1568, 1569, 0, 1586, 1587,
	1588, 372, 0, 0, 2097, 0, 0, 0, 0, 60,
	0, 1749, 0, 60, 0, 0, 372, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2114, 0, 0, 0, 0, 0, 920, 928, 60,
	0, 0, 0, 555, 0, 60, 0, 0, 1583, 0,
	1699, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	918, 0, 0, 0, 0, 0, 911, 916, 0, 0,
	0, 864, 0, 0, 896, 0, 0, 927, 0, 0,
	0, 0, 0, 556, 0, 0, 0, 0, 0, 0,
	0, 917, 1574, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 85, 0, 0, 0, 1589,
	0, 555, 0, 0, 0, 0, 0, 38, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 371, 0,
	1584, 87, 0, 0, 0, 921, 0, 39, 901, 93,
	0, 0, 0, 0, 2210, 371, 0, 0, 0, 0,
	0, 0, 2220, 2220, 0, 0, 0, 920, 928, 53,
	0, 556, 0, 47, 0, 0, 0, 48, 0, 0,
	88, 0, 0, 0, 52, 926, 49, 0, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2220, 0,
	918, 0, 0, 1461, 54, 372, 911, 0, 0, 0,
	50, 0, 919, 1585, 0, 907, 908, 909, 922, 0,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 0,
	0, 917, 0, 2220, 0, 0, 1608, 0, 0, 0,
	0, 0, 0, 1568, 1569, 0, 1586, 1587, 1588, 0,
	1461, 0, 0, 1461, 0, 0, 0, 0, 0, 1748,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 921, 1583, 0, 51, 1580,
	1581, 1582, 0, 0, 1579, 1577, 1578, 1570, 1571, 1572,
	1573, 1575, 1576, 0, 0, 0, 90, 91, 37, 0,
	56, 0, 57, 0, 89, 0, 0, 0, 0, 58,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	1574, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 919, 0, 0, 907, 908, 909, 922, 0,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 0,
	92, 0, 0, 0, 0, 0, 1560, 1589, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	60, 0, 0, 0, 0, 100, 0, 0, 1584, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 1461, 1461, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2079, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1580, 1581, 1582,
	0, 1461, 1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575,
	1576, 0, 0, 0, 0, 0, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 122, 388, 123, 389, 390,
	391, 392, 274, 393, 394, 395, 396, 124, 125, 126,
	275, 276, 277, 278, 127, 279, 280, 397, 128, 281,
	282, 129, 130, 398, 399, 283, 284, 285, 400, 131,
	286, 401, 374, 402, 132, 133, 134, 942, 135, 403,
	136, 137, 138, 404, 375, 139, 140, 405, 406, 408,
	407, 409, 410, 411, 141, 142, 335, 143, 287, 144,
	288, 289, 412, 145, 413, 146, 414, 147, 415, 416,
	148, 149, 417, 150, 418, 0, 419, 290, 151, 152,
	153, 291, 292, 420, 421, 422, 154, 155, 293, 294,
	295, 0, 156, 423, 157, 424, 425, 376, 426, 158,
	296, 427, 297, 428, 159, 160, 161, 162, 298, 299,
	378, 429, 166, 430, 163, 431, 377, 164, 300, 165,
	301, 302, 303, 304, 305, 432, 306, 433, 379, 167,
	168, 169, 380, 170, 171, 172, 434, 174, 173, 435,
	307, 381, 175, 382, 436, 176, 437, 438, 177, 0,
	178, 179, 180, 182, 308, 181, 383, 183, 184, 186,
	185, 439, 440, 441, 309, 187, 310, 188, 189, 442,
	190, 443, 444, 191, 445, 446, 192, 311, 384, 193,
	385, 312, 194, 195, 196, 197, 198, 447, 199, 313,
	200, 314, 201, 448, 202, 203, 204, 205, 206, 315,
	207, 208, 449, 209, 210, 211, 212, 213, 215, 216,
	214, 217, 218, 219, 220, 450, 221, 386, 222, 223,
	316, 224, 0, 228, 229, 230, 231, 451, 233, 317,
	232, 234, 235, 452, 236, 225, 226, 237, 387, 238,
	318, 319, 239, 453, 245, 240, 241, 227, 242, 244,
	320, 243, 321, 454, 246, 455, 247, 248, 249, 250,
	251, 252, 253, 456, 322, 323, 324, 457, 458, 254,
	255, 325, 326, 459, 256, 257, 258, 259, 460, 461,
	260, 261, 262, 263, 462, 264, 463, 327, 265, 266,
	267, 328, 329, 464, 465, 268, 466, 467, 468, 469,
	269, 270, 271, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 369, 0, 0, 0,
	0, 0, 0, 1882, 0, 0, 0, 0, 0, 0,
	0, 1883, 121, 122, 388, 123, 389, 390, 391, 392,
	274, 393, 394, 395, 396, 124, 125, 126, 275, 276,
	277, 278, 127, 279, 280, 397, 128, 281, 282, 129,
	130, 398, 399, 283, 284, 285, 400, 131, 286, 401,
	374, 402, 132, 133, 134, 0, 135, 403, 136, 137,
	138, 404, 375, 139, 140, 405, 406, 408, 407, 409,
	410, 411, 141, 142, 335, 143, 287, 144, 288, 289,
	412, 145, 413, 146, 414, 147, 415, 416, 148, 149,
	417, 150, 418, 0, 419, 290, 151, 152, 153, 291,
	292, 420, 421, 422, 154, 155, 293, 294, 295, 0,
	156, 423, 157, 424, 425, 376, 426, 158, 296, 427,
	297, 428, 159, 160, 161, 162, 298, 299, 378, 429,
	166, 430, 163, 431, 377, 164, 300, 165, 301, 302,
	303, 304, 305, 432, 306, 433, 379, 167, 168, 169,
	380, 170, 171, 172, 434, 174, 173, 435, 307, 381,
	175, 382, 436, 176, 437, 438, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 439,
	440, 441, 309, 187, 310, 188, 189, 442, 190, 443,
	444, 191, 445, 446, 192, 311, 384, 193, 385, 312,
	194, 195, 196, 197, 198, 447, 199, 313, 200, 314,
	201, 448, 202, 203, 204, 205, 206, 315, 207, 208,
	449, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 450, 221, 386, 222, 223, 316, 224,
	0, 228, 229, 230, 231, 451, 233, 317, 232, 234,
	235, 452, 236, 225, 226, 237, 387, 238, 318, 319,
	239, 453, 245, 240, 241, 227, 242, 244, 320, 243,
	321, 454, 246, 455, 247, 248, 249, 250, 251, 252,
	253, 456, 322, 323, 324, 457, 458, 254, 255, 325,
	326, 459, 256, 257, 258, 259, 460, 461, 260, 261,
	262, 263, 462, 264, 463, 327, 265, 266, 267, 328,
	329, 464, 465, 268, 466, 467, 468, 469, 269, 270,
	271, 272, 273, 0, 0, 0, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2159, 121, 122, 388, 123, 389, 390, 391, 392,
	274, 393, 394, 395, 396, 124, 125, 126, 275, 276,
	277, 278, 127, 279, 280, 397, 128, 281, 282, 129,
	130, 398, 399, 283, 284, 285, 400, 131, 286, 401,
	374, 402, 132, 133, 134, 0, 135, 403, 136, 137,
	138, 404, 375, 139, 140, 405, 406, 408, 407, 409,
	410, 411, 141, 142, 335, 143, 287, 144, 288, 289,
	412, 145, 413, 146, 414, 147, 415, 416, 148, 149,
	417, 150, 418, 0, 419, 290, 151, 152, 153, 291,
	292, 420, 421, 422, 154, 155, 293, 294, 295, 0,
	156, 423, 157, 424, 425, 376, 426, 158, 296, 427,
	297, 428, 159, 160, 161, 162, 298, 299, 378, 429,
	166, 430, 163, 431, 377, 164, 300, 165, 301, 302,
	303, 304, 305, 432, 306, 433, 379, 167, 168, 169,
	380, 170, 171, 172, 434, 174, 173, 435, 307, 381,
	175, 382, 436, 176, 437, 438, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 439,
	440, 441, 309, 187, 310, 188, 189, 442, 190, 443,
	444, 191, 445, 446, 192, 311, 384, 193, 385, 312,
	194, 195, 196, 197, 198, 447, 199, 313, 200, 314,
	201, 448, 202, 203, 204, 205, 206, 315, 207, 208,
	449, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 450, 221, 386, 222, 223, 316, 224,
	0, 228, 229, 230, 231, 451, 233, 317, 232, 234,
	235, 452, 236, 225, 226, 237, 387, 238, 318, 319,
	239, 453, 245, 240, 241, 227, 242, 244, 320, 243,
	321, 454, 246, 455, 247, 248, 249, 250, 251, 252,
	253, 456, 322, 323, 324, 457, 458, 254, 255, 325,
	326, 459, 256, 257, 258, 259, 460, 461, 260, 261,
	262, 263, 462, 264, 463, 327, 265, 266, 267, 328,
	329, 464, 465, 268, 466, 467, 468, 469, 269, 270,
	271, 272, 273, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 121,
	122, 388, 123, 389, 390, 391, 392, 274, 393, 394,
	395, 396, 124, 125, 126, 275, 276, 277, 278, 127,
	279, 280, 397, 128, 281, 282, 129, 130, 398, 399,
	283, 284, 285, 400, 131, 286, 401, 374, 402, 132,
	133, 134, 0, 135, 403, 136, 137, 138, 404, 375,
	139, 140, 405, 406, 408, 407, 409, 410, 411, 141,
	142, 335, 143, 287, 144, 288, 289, 412, 145, 413,
	146, 414, 147, 415, 416, 148, 149, 417, 150, 418,
	0, 419, 290, 151, 152, 153, 291, 292, 420, 421,
	422, 154, 155, 293, 294, 295, 0, 156, 423, 157,
	424, 425, 376, 426, 158, 296, 427, 297, 428, 159,
	160, 161, 162, 298, 299, 378, 429, 166, 430, 163,
	431, 377, 164, 300, 165, 301, 302, 303, 304, 305,
	432, 306, 433, 379, 167, 168, 169, 380, 170, 171,
	172, 434, 174, 173, 435, 307, 381, 175, 382, 436,
	176, 437, 438, 177, 0, 178, 179, 180, 182, 308,
	181, 383, 183, 184, 186, 185, 439, 440, 441, 309,
	187, 310, 188, 189, 442, 190, 443, 444, 191, 445,
	446, 192, 311, 384, 193, 385, 312, 194, 195, 196,
	197, 198, 447, 199, 313, 200, 314, 201, 448, 202,
	203, 204, 205, 206, 315, 207, 208, 449, 209, 210,
	211, 212, 213, 215, 216, 214, 217, 218, 219, 220,
	450, 221, 386, 222, 223, 316, 224, 0, 228, 229,
	230, 231, 451, 233, 317, 232, 234, 235, 452, 236,
	225, 226, 237, 387, 238, 318, 319, 239, 453, 245,
	240, 241, 227, 242, 244, 320, 243, 321, 454, 246,
	455, 247, 248, 249, 250, 251, 252, 253, 456, 322,
	323, 324, 457, 458, 254, 255, 325, 326, 459, 256,
	257, 258, 259, 460, 461, 260, 261, 262, 263, 462,
	264, 463, 327, 265, 266, 267, 328, 329, 464, 465,
	268, 466, 467, 468, 469, 269, 270, 271, 272, 273,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 122, 0, 123,
	0, 0, 0, 0, 675, 640, 0, 0, 0, 124,
	125, 126, 275, 690, 277, 691, 127, 692, 693, 0,
	128, 281, 282, 129, 130, 643, 674, 694, 695, 285,
	0, 131, 686, 0, 666, 0, 132, 133, 134, 0,
	135, 0, 136, 137, 138, 0, 375, 139, 140, 0,
	667, 668, 670, 0, 669, 671, 141, 142, 335, 143,
	696, 144, 697, 698, 865, 145, 0, 146, 0, 147,
	0, 0, 689, 149, 0, 150, 0, 0, 0, 631,
	151, 152, 153, 676, 677, 654, 0, 0, 154, 155,
	699, 700, 701, 0, 156, 0, 157, 0, 0, 376,
	0, 158, 687, 0, 297, 0, 159, 160, 161, 162,
	683, 685, 378, 0, 166, 0, 163, 0, 377, 164,
	702, 165, 703, 704, 705, 706, 707, 0, 665, 0,
	379, 167, 168, 169, 380, 170, 171, 172, 0, 174,
	173, 0, 688, 381, 175, 382, 0, 176, 0, 0,
	177, 0, 178, 179, 180, 182, 308, 181, 383, 183,
	184, 186, 185, 626, 0, 655, 684, 187, 708, 188,
	189, 0, 190, 0, 0, 191, 0, 0, 192, 311,
	384, 193, 385, 678, 194, 195, 196, 197, 198, 0,
	199, 679, 200, 314, 201, 0, 202, 203, 204, 205,
	206, 709, 207, 208, 0, 209, 210, 211, 212, 213,
	215, 216, 214, 217, 218, 219, 220, 0, 221, 386,
	222, 223, 632, 224, 0, 228, 229, 230, 231, 102,
	233, 317, 232, 234, 235, 672, 236, 225, 226, 237,
	387, 238, 710, 319, 239, 0, 245, 240, 241, 227,
	242, 244, 711, 243, 680, 0, 246, 104, 247, 248,
	249, 250, 251, 252, 253, 0, 322, 712, 713, 0,
	0, 254, 255, 681, 682, 653, 256, 257, 258, 259,
	0, 0, 260, 261, 262, 263, 673, 264, 0, 327,
	265, 266, 267, 748, 714, 0, 0, 268, 0, 0,
	0, 100, 269, 270, 271, 272, 273, 627, 101, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	658, 647, 648, 645, 646, 637, 0, 633, 0, 0,
	0, 0, 636, 0, 0, 0, 121, 122, 1294, 123,
	0, 0, 0, 0, 675, 640, 0, 0, 0, 124,
	125, 126, 275, 690, 277, 691, 127, 692, 693, 0,
	128, 281, 282, 129, 130, 643, 674, 694, 695, 285,
	0, 131, 686, 0, 666, 0, 132, 133, 134, 0,
	135, 0, 136, 137, 138, 0, 375, 139, 140, 0,
	667, 668, 670, 0, 669, 671, 141, 142, 335, 143,
	696, 144, 697, 698, 0, 145, 0, 146, 0, 147,
	1295, 0, 689, 149, 0, 150, 0, 0, 0, 631,
	151, 152, 153, 676, 677, 654, 0, 0, 154, 155,
	699, 700, 701, 0, 156, 0, 157, 0, 0, 376,
	0, 158, 687, 0, 297, 0, 159, 160, 161, 162,
	683, 685, 378, 0, 166, 0, 163, 0, 377, 164,
	702, 165, 703, 704, 705, 706, 707, 0, 665, 0,
	379, 167, 168, 169, 380, 170, 171, 172, 0, 174,
	173, 0, 688, 381, 175, 382, 0, 176, 0, 0,
	177, 0, 178, 179, 180, 182, 308, 181, 383, 183,
	184, 186, 185, 626, 0, 655, 684, 187, 708, 188,
	189, 0, 190, 0, 0, 191, 0, 0, 192, 311,
	384, 193, 385, 678, 194, 195, 196, 197, 198, 0,
	199, 679, 200, 314, 201, 0, 202, 203, 204, 205,
	206, 709, 207, 208, 0, 209, 210, 211, 212, 213,
	215, 216, 214, 217, 218, 219, 220, 0, 221, 386,
	222, 223, 632, 224, 0, 228, 229, 230, 231, 0,
	233, 317, 232, 234, 235, 672, 236, 225, 226, 237,
	387, 238, 710, 319, 239, 0, 245, 240, 241, 227,
	242, 244, 711, 243, 680, 0, 246, 0, 247, 248,
	249, 250, 251, 252, 253, 0, 322, 712, 713, 0,
	0, 254, 255, 681, 682, 653, 256, 257, 258, 259,
	0, 0, 260, 261, 262, 263, 673, 264, 0, 327,
	265, 266, 267, 328, 714, 1293, 0, 268, 0, 0,
	0, 0, 269, 270, 271, 272, 273, 627, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	1296, 658, 647, 648, 645, 646, 637, 633, 1291, 0,
	0, 0, 636, 0, 0, 0, 0, 121, 122, 0,
	123, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	124, 125, 126, 275, 690, 277, 691, 127, 692, 693,
	0, 128, 281, 282, 129, 130, 643, 674, 694, 695,
	285, 0, 131, 686, 0, 666, 0, 132, 133, 134,
	0, 135, 0, 136, 137, 138, 0, 375, 139, 140,
	0, 667, 668, 670, 0, 669, 671, 141, 142, 335,
	143, 696, 144, 697, 698, 0, 145, 0, 146, 0,
	147, 0, 0, 689, 149, 0, 150, 0, 0, 0,
	631, 151, 152, 153, 676, 677, 654, 0, 0, 154,
	155, 699, 700, 701, 0, 156, 0, 157, 0, 0,
	376, 0, 158, 687, 0, 297, 0, 159, 160, 161,
	162, 683, 685, 378, 0, 166, 0, 163, 0, 377,
	164, 702, 165, 703, 704, 705, 706, 707, 0, 665,
	0, 379, 167, 168, 169, 380, 170, 171, 172, 0,
	174, 173, 0, 688, 381, 175, 382, 0, 176, 0,
	0, 177, 0, 178, 179, 180, 182, 308, 181, 383,
	183, 184, 186, 185, 626, 0, 655, 684, 187, 708,
	188, 189, 0, 190, 0, 0, 191, 0, 0, 192,
	311, 384, 193, 385, 678, 194, 195, 196, 197, 198,
	0, 199, 679, 200, 314, 201, 0, 202, 203, 204,
	205, 206, 709, 207, 208, 0, 209, 210, 211, 212,
	213, 215, 216, 214, 217, 218, 219, 220, 0, 221,
	386, 222, 223, 632, 224, 0, 228, 229, 230, 231,
	102, 233, 317, 232, 234, 235, 672, 236, 225, 226,
	237, 387, 238, 710, 319, 239, 0, 245, 240, 241,
	227, 242, 244, 711, 243, 680, 0, 246, 104, 247,
	248, 249, 250, 251, 252, 253, 0, 322, 712, 713,
	0, 0, 254, 255, 681, 682, 653, 256, 257, 258,
	259, 0, 0, 260, 261, 262, 263, 673, 264, 0,
	327, 265, 266, 267, 748, 714, 0, 0, 268, 0,
	0, 0, 100, 269, 270, 271, 272, 273, 627, 101,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 658, 647, 648, 645, 646, 637, 0, 633, 0,
	0, 0, 0, 636, 0, 0, 0, 121, 122, 0,
	123, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	124, 125, 126, 275, 690, 277, 691, 127, 692, 693,
	1341, 128, 281, 282, 129, 130, 643, 674, 694, 695,
	285, 0, 131, 686, 0, 666, 0, 132, 133, 134,
	0, 135, 0, 136, 137, 138, 0, 375, 139, 140,
	0, 667, 668, 670, 0, 669, 671, 141, 142, 335,
	143, 696, 144, 697, 698, 0, 145, 0, 146, 0,
	147, 0, 0, 689, 149, 0, 150, 0, 0, 0,
	631, 151, 152, 153, 676, 677, 654, 0, 0, 154,
	155, 699, 700, 701, 0, 156, 0, 157, 0, 1346,
	376, 0, 158, 687, 0, 297, 0, 159, 160, 161,
	162, 683, 685, 378, 0, 166, 0, 163, 0, 377,
	164, 702, 165, 703, 704, 705, 706, 707, 0, 665,
	0, 379, 167, 168, 169, 380, 170, 171, 172, 0,
	174, 173, 1342, 688, 381, 175, 382, 0, 176, 0,
	0, 177, 0, 178, 179, 180, 182, 308, 181, 383,
	183, 184, 186, 185, 626, 0, 655, 684, 187, 708,
	188, 189, 0, 190, 0, 0, 191, 0, 0, 192,
	311, 384, 193, 385, 678, 194, 195, 196, 197, 198,
	0, 199, 679, 200, 314, 201, 0, 202, 203, 204,
	205, 206, 709, 207, 208, 0, 209, 210, 211, 212,
	213, 215, 216, 214, 217, 218, 219, 220, 0, 221,
	386, 222, 223, 632, 224, 0, 228, 229, 230, 231,
	0, 233, 317, 232, 234, 235, 672, 236, 225, 226,
	237, 387, 238, 710, 319, 239, 0, 245, 240, 241,
	227, 242, 244, 711, 243, 680, 0, 246, 0, 247,
	248, 249, 250, 251, 252, 253, 0, 322, 712, 713,
	0, 1343, 254, 255, 681, 682, 653, 256, 257, 258,
	259, 0, 0, 260, 261, 262, 263, 673, 264, 0,
	327, 265, 266, 267, 328, 714, 0, 0, 268, 0,
	0, 0, 0, 269, 270, 271, 272, 273, 627, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 658, 647, 648, 645, 646, 637, 0, 633, 0,
	0, 0, 0, 636, 0, 0, 0, 121, 122, 0,
	123, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	124, 125, 126, 275, 690, 277, 691, 127, 692, 693,
	0, 128, 281, 282, 129, 130, 643, 674, 694, 695,
	285, 0, 131, 686, 0, 666, 0, 132, 133, 134,
	0, 135, 0, 136, 137, 138, 0, 375, 139, 140,
	0, 667, 668, 670, 0, 669, 671, 141, 142, 335,
	143, 696, 144, 697, 698, 0, 145, 0, 146, 0,
	147, 0, 0, 689, 149, 0, 150, 0, 0, 0,
	631, 151, 152, 153, 676, 677, 654, 0, 0, 154,
	155, 699, 700, 701, 0, 156, 0, 157, 0, 0,
	376, 0, 158, 687, 0, 297, 0, 159, 160, 161,
	162, 683, 685, 378, 0, 166, 0, 163, 0, 377,
	164, 702, 165, 703, 704, 705, 706, 707, 0, 665,
	0, 379, 167, 168, 169, 380, 170, 171, 172, 0,
	174, 173, 0, 688, 381, 175, 382, 0, 176, 0,
	0, 177, 0, 178, 179, 180, 182, 308, 181, 383,
	183, 184, 186, 185, 626, 1830, 655, 684, 187, 708,
	188, 189, 0, 190, 0, 0, 191, 0, 0, 192,
	311, 384, 193, 385, 678, 194, 195, 196, 197, 198,
	0, 199, 679, 200, 314, 201, 0, 202, 203, 204,
	205, 206, 709, 207, 208, 0, 209, 210, 211, 212,
	213, 215, 216, 214, 217, 218, 219, 220, 0, 221,
	386, 222, 223, 632, 224, 0, 228, 229, 230, 231,
	0, 233, 317, 232, 234, 235, 672, 236, 225, 226,
	237, 387, 238, 710, 319, 239, 0, 245, 240, 241,
	227, 242, 244, 711, 243, 680, 0, 246, 0, 247,
	248, 249, 250, 251, 252, 253, 0, 322, 712, 713,
	0, 0, 254, 255, 681, 682, 653, 256, 257, 258,
	259, 0, 0, 260, 261, 262, 263, 673, 264, 0,
	327, 265, 266, 267, 328, 714, 0, 0, 268, 0,
	0, 0, 0, 269, 270, 271, 272, 273, 627, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 856, 658, 647, 648, 645, 646, 637, 633, 0,
	0, 0, 0, 636, 0, 0, 0, 0, 121, 122,
	0, 123, 0, 0, 0, 0, 675, 640, 0, 0,
	0, 124, 125, 126, 275, 690, 277, 691, 127, 692,
	693, 0, 128, 281, 282, 129, 130, 643, 674, 694,
	695, 285, 0, 131, 686, 0, 666, 0, 132, 133,
	134, 0, 135, 0, 136, 137, 138, 0, 375, 139,
	140, 0, 667, 668, 670, 0, 669, 671, 141, 142,
	335, 143, 696, 144, 697, 698, 0, 145, 0, 146,
	0, 147, 0, 0, 689, 149, 0, 150, 0, 0,
	0, 631, 151, 152, 153, 676, 677, 654, 0, 0,
	154, 155, 699, 700, 701, 0, 156, 0, 157, 0,
	0, 376, 0, 158, 687, 0, 297, 0, 159, 160,
	161, 162, 683, 685, 378, 0, 166, 1138, 163, 0,
	377, 164, 702, 165, 703, 704, 705, 706, 707, 0,
	665, 0, 379, 167, 168, 169, 380, 170, 171, 172,
	0, 174, 173, 0, 688, 381, 175, 382, 0, 176,
	0, 0, 177, 0, 178, 179, 180, 182, 308, 181,
	383, 183, 184, 186, 185, 626, 0, 655, 684, 187,
	708, 188, 189, 0, 190, 0, 0, 191, 0, 0,
	192, 311, 384, 193, 385, 678, 194, 195, 196, 197,
	198, 0, 199, 679, 200, 314, 201, 1137, 202, 203,
	204, 205, 206, 709, 207, 208, 0, 209, 210, 211,
	212, 213, 215, 216, 214, 217, 218, 219, 220, 0,
	221, 386, 222, 223, 632, 224, 0, 228, 229, 230,
	231, 0, 233, 317, 232, 234, 235, 672, 236, 225,
	226, 237, 387, 238, 710, 319, 239, 0, 245, 240,
	241, 227, 242, 244, 711, 243, 680, 0, 246, 0,
	247, 248, 249, 250, 251, 252, 253, 0, 322, 712,
	713, 0, 0, 254, 255, 681, 682, 653, 256, 257,
	258, 259, 0, 0, 260, 261, 262, 263, 673, 264,
	0, 327, 265, 266, 267, 328, 714, 0, 0, 268,
	0, 0, 0, 0, 269, 270, 271, 272, 273, 627,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 658, 647, 648, 645, 646, 637, 0, 633,
	0, 0, 0, 0, 636, 0, 0, 0, 121, 122,
	0, 123, 0, 0, 0, 0, 675, 640, 0, 0,
	0, 124, 125, 126, 275, 690, 277, 691, 127, 692,
	693, 0, 128, 281, 282, 129, 130, 643, 674, 694,
	695, 285, 0, 131, 686, 0, 666, 0, 132, 133,
	134, 0, 135, 0, 136, 137, 138, 0, 375, 139,
	140, 0, 667, 668, 670, 0, 669, 671, 141, 142,
	335, 143, 696, 144, 697, 698, 0, 145, 0, 146,
	0, 147, 0, 0, 689, 149, 0, 150, 0, 0,
	0, 631, 151, 152, 153, 676, 677, 654, 0, 0,
	154, 155, 699, 700, 701, 0, 156, 0, 157, 0,
	0, 376, 0, 158, 687, 0, 297, 0, 159, 160,
	161, 162, 683, 685, 378, 0, 166, 0, 163, 0,
	377, 164, 702, 165, 703, 704, 705, 706, 707, 0,
	665, 0, 379, 167, 168, 169, 380, 170, 171, 172,
	0, 174, 173, 0, 688, 381, 175, 382, 0, 176,
	0, 0, 177, 0, 178, 179, 180, 182, 308, 181,
	383, 183, 184, 186, 185, 626, 0, 655, 684, 187,
	708, 188, 189, 0, 190, 0, 0, 191, 0, 0,
	192, 311, 384, 193, 385, 678, 194, 195, 196, 197,
	198, 0, 199, 679, 200, 314, 201, 0, 202, 203,
	204, 205, 206, 709, 207, 208, 0, 209, 210, 211,
	212, 213, 215, 216, 214, 217, 218, 219, 220, 0,
	221, 386, 222, 223, 632, 224, 0, 228, 229, 230,
	231, 0, 233, 317, 232, 234, 235, 672, 236, 225,
	226, 237, 387, 238, 710, 319, 239, 0, 245, 240,
	241, 227, 242, 244, 711, 243, 680, 0, 246, 0,
	247, 248, 249, 250, 251, 252, 253, 0, 322, 712,
	713, 0, 0, 254, 255, 681, 682, 653, 256, 257,
	258, 259, 0, 0, 260, 261, 262, 263, 673, 264,
	0, 327, 265, 266, 267, 328, 714, 0, 0, 268,
	0, 0, 0, 0, 269, 270, 271, 272, 273, 627,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 948, 1286, 633,
	0, 0, 0, 0, 636, 658, 647, 648, 645, 646,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 122, 0, 123, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 124, 125, 126, 275, 690, 277,
	691, 127, 692, 693, 0, 128, 281, 282, 129, 130,
	643, 674, 694, 695, 285, 0, 131, 686, 0, 666,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 375, 139, 140, 0, 667, 668, 670, 0, 669,
	671, 141, 142, 335, 143, 696, 144, 697, 698, 865,
	145, 0, 146, 0, 147, 0, 0, 689, 149, 0,
	150, 0, 0, 0, 631, 151, 152, 153, 676, 677,
	654, 0, 0, 154, 155, 699, 700, 701, 0, 156,
	0, 157, 0, 0, 376, 0, 158, 687, 0, 297,
	0, 159, 160, 161, 162, 683, 685, 378, 0, 166,
	0, 163, 0, 377, 164, 702, 165, 703, 704, 705,
	706, 707, 0, 665, 0, 379, 167, 168, 169, 380,
	170, 171, 172, 0, 174, 173, 0, 688, 381, 175,
	382, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 383, 183, 184, 186, 185, 626, 0,
	655, 684, 187, 708, 188, 189, 0, 190, 0, 0,
	191, 0, 0, 192, 311, 384, 193, 385, 678, 194,
	195, 196, 197, 198, 0, 199, 679, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 709, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 386, 222, 223, 632, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	672, 236, 225, 226, 237, 387, 238, 710, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 711, 243, 680,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 712, 713, 0, 0, 254, 255, 681, 682,
	653, 256, 257, 258, 259, 0, 0, 260, 261, 262,
	263, 673, 264, 0, 327, 265, 266, 267, 328, 714,
	0, 0, 268, 0, 0, 0, 0, 269, 270, 271,
	272, 273, 627, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 658, 647, 648, 645, 646,
	637, 0, 633, 0, 0, 0, 0, 636, 0, 0,
	0, 121, 122, 0, 123, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 124, 125, 126, 275, 690, 277,
	691, 127, 692, 693, 0, 128, 281, 282, 129, 130,
	643, 674, 694, 695, 285, 0, 131, 686, 0, 666,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 375, 139, 140, 0, 667, 668, 670, 0, 669,
	671, 141, 142, 335, 143, 696, 144, 697, 698, 0,
	145, 0, 146, 0, 147, 0, 0, 689, 149, 0,
	150, 0, 0, 0, 631, 151, 152, 153, 676, 677,
	654, 0, 0, 154, 155, 699, 700, 701, 0, 156,
	0, 157, 0, 0, 376, 0, 158, 687, 0, 297,
	0, 159, 160, 161, 162, 683, 685, 378, 0, 166,
	0, 163, 0, 377, 164, 702, 165, 703, 704, 705,
	706, 707, 0, 665, 0, 379, 167, 168, 169, 380,
	170, 171, 172, 0, 174, 173, 0, 688, 381, 175,
	382, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 383, 183, 184, 186, 185, 626, 0,
	655, 684, 187, 708, 188, 189, 0, 190, 0, 0,
	191, 0, 0, 192, 311, 384, 193, 385, 678, 194,
	195, 196, 197, 198, 0, 199, 679, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 709, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 386, 222, 223, 632, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	672, 236, 225, 226, 237, 387, 238, 710, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 711, 243, 680,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 712, 713, 0, 0, 254, 255, 681, 682,
	653, 256, 257, 258, 259, 0, 0, 260, 261, 262,
	263, 673, 264, 0, 327, 265, 266, 267, 328, 714,
	0, 0, 268, 0, 0, 0, 0, 269, 270, 271,
	272, 273, 627, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 658, 647, 648, 645, 646,
	637, 0, 633, 1813, 0, 0, 0, 636, 0, 0,
	0, 121, 122, 0, 123, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 124, 125, 126, 275, 690, 277,
	691, 127, 692, 693, 0, 128, 281, 282, 129, 130,
	643, 674, 694, 695, 285, 0, 131, 686, 0, 666,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 375, 139, 140, 0, 667, 668, 670, 0, 669,
	671, 141, 142, 335, 143, 696, 144, 697, 698, 0,
	145, 0, 146, 0, 147, 0, 0, 689, 149, 0,
	150, 0, 0, 0, 631, 151, 152, 153, 676, 677,
	654, 0, 0, 154, 155, 699, 700, 701, 0, 156,
	0, 157, 0, 0, 376, 0, 158, 687, 0, 297,
	0, 159, 160, 161, 162, 683, 685, 378, 0, 166,
	0, 163, 0, 377, 164, 702, 165, 703, 704, 705,
	706, 707, 0, 665, 0, 379, 167, 168, 169, 380,
	170, 171, 172, 0, 174, 173, 0, 688, 381, 175,
	382, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 383, 183, 184, 186, 185, 626, 0,
	655, 684, 187, 708, 188, 189, 0, 190, 0, 0,
	191, 0, 0, 192, 311, 384, 193, 385, 678, 194,
	195, 196, 197, 198, 0, 199, 679, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 709, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 386, 222, 223, 632, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	672, 236, 225, 226, 237, 387, 238, 710, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 711, 243, 680,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 712, 713, 0, 0, 254, 255, 681, 682,
	653, 256, 257, 258, 259, 0, 0, 260, 261, 262,
	263, 673, 264, 0, 327, 265, 266, 267, 328, 714,
	1762, 0, 268, 0, 0, 0, 0, 269, 270, 271,
	272, 273, 627, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 658, 647, 648, 645, 646,
	637, 0, 633, 0, 0, 0, 0, 636, 0, 0,
	0, 121, 122, 0, 123, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 124, 125, 126, 275, 690, 277,
	691, 127, 692, 693, 0, 128, 281, 282, 129, 130,
	643, 674, 694, 695, 285, 0, 131, 686, 0, 666,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 375, 139, 140, 0, 667, 668, 670, 0, 669,
	671, 141, 142, 335, 143, 696, 144, 697, 698, 0,
	145, 0, 146, 0, 147, 0, 0, 689, 149, 0,
	150, 0, 0, 0, 631, 151, 152, 153, 676, 677,
	654, 0, 0, 154, 155, 699, 700, 701, 0, 156,
	0, 157, 0, 0, 376, 0, 158, 687, 0, 297,
	0, 159, 160, 161, 162, 683, 685, 378, 0, 166,
	0, 163, 0, 377, 164, 702, 165, 703, 704, 705,
	706, 707, 0, 665, 0, 379, 167, 168, 169, 380,
	170, 171, 172, 0, 174, 173, 0, 688, 381, 175,
	382, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 383, 183, 184, 186, 185, 626, 0,
	655, 684, 187, 708, 188, 189, 0, 190, 0, 0,
	191, 0, 0, 192, 311, 384, 193, 385, 678, 194,
	195, 196, 197, 198, 0, 199, 679, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 709, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 386, 222, 223, 632, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	672, 236, 225, 226, 237, 387, 238, 710, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 711, 243, 680,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 712, 713, 0, 0, 254, 255, 681, 682,
	653, 256, 257, 258, 259, 0, 0, 260, 261, 262,
	263, 673, 264, 0, 327, 265, 266, 267, 328, 714,
	0, 0, 268, 0, 0, 0, 0, 269, 270, 271,
	272, 273, 627, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 658, 647, 648, 645, 646,
	637, 0, 633, 1752, 0, 0, 0, 636, 0, 0,
	0, 121, 122, 0, 123, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 124, 125, 126, 275, 690, 277,
	691, 127, 692, 693, 0, 128, 281, 282, 129, 130,
	643, 674, 694, 695, 285, 0, 131, 686, 0, 666,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 375, 139, 140, 0, 667, 668, 670, 0, 669,
	671, 141, 142, 335, 143, 696, 144, 697, 698, 0,
	145, 0, 146, 0, 147, 0, 0, 689, 149, 0,
	150, 0, 0, 0, 631, 151, 152, 153, 676, 677,
	654, 0, 0, 154, 155, 699, 700, 701, 0, 156,
	0, 157, 0, 1346, 376, 0, 158, 687, 0, 297,
	0, 159, 160, 161, 162, 683, 685, 378, 0, 166,
	0, 163, 0, 377, 164, 702, 165, 703, 704, 705,
	706, 707, 0, 665, 0, 379, 167, 168, 169, 380,
	170, 171, 172, 0, 174, 173, 0, 688, 381, 175,
	382, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 383, 183, 184, 186, 185, 626, 0,
	655, 684, 187, 708, 188, 189, 0, 190, 0, 0,
	191, 0, 0, 192, 311, 384, 193, 385, 678, 194,
	195, 196, 197, 198, 0, 199, 679, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 709, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 386, 222, 223, 632, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	672, 236, 225, 226, 237, 387, 238, 710, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 711, 243, 680,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 712, 713, 0, 0, 254, 255, 681, 682,
	653, 256, 257, 258, 259, 0, 0, 260, 261, 262,
	263, 673, 264, 0, 327, 265, 266, 267, 328, 714,
	0, 0, 268, 0, 0, 0, 0, 269, 270, 271,
	272, 273, 627, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 658, 647, 648, 645, 646,
	637, 0, 633, 0, 0, 0, 0, 636, 0, 0,
	0, 121, 122, 0, 123, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 124, 125, 126, 275, 690, 277,
	691, 127, 692, 693, 0, 128, 281, 282, 129, 130,
	643, 674, 694, 695, 285, 0, 131, 686, 0, 666,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 375, 139, 140, 0, 667, 668, 670, 0, 669,
	671, 141, 142, 335, 143, 696, 144, 697, 698, 0,
	145, 0, 146, 0, 147, 0, 0, 689, 149, 0,
	150, 0, 0, 0, 631, 151, 152, 153, 676, 677,
	654, 0, 0, 154, 155, 699, 700, 701, 0, 156,
	0, 157, 0, 0, 376, 0, 158, 687, 0, 297,
	0, 159, 160, 161, 162, 683, 685, 378, 0, 166,
	0, 163, 0, 377, 164, 702, 165, 703, 704, 705,
	706, 707, 0, 665, 0, 379, 167, 168, 169, 380,
	170, 171, 172, 0, 174, 173, 0, 688, 381, 175,
	382, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 383, 183, 184, 186, 185, 626, 0,
	655, 684, 187, 708, 188, 189, 0, 190, 0, 0,
	191, 0, 0, 192, 311, 384, 193, 385, 678, 194,
	195, 196, 197, 198, 0, 199, 679, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 709, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 386, 222, 223, 632, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	672, 236, 225, 226, 237, 387, 238, 710, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 711, 243, 680,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 712, 713, 0, 0, 254, 255, 681, 682,
	653, 256, 257, 258, 259, 0, 0, 260, 261, 262,
	263, 673, 264, 0, 327, 265, 266, 267, 328, 714,
	0, 0, 268, 0, 0, 0, 0, 269, 270, 271,
	272, 273, 627, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 856, 658, 647, 648, 645,
	646, 637, 633, 0, 0, 0, 0, 636, 0, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 275, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 643, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 140, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 144, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 631, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 161, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 626,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 632, 224,
	0, 228, 229, 230, 231, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 258, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 272, 273, 627, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 658, 647, 648, 645,
	646, 637, 0, 633, 1281, 0, 0, 0, 636, 0,
	0, 0, 121, 122, 1125, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 275, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 643, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 140, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 144, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 631, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 161, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 626,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 632, 224,
	0, 228, 229, 230, 231, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 258, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 272, 273, 627, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 658, 647, 648, 645,
	646, 637, 0, 633, 0, 0, 0, 0, 636, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 275, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 643, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 2219, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 144, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 631, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 161, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 626,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 632, 224,
	0, 228, 229, 230, 231, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 2218, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 272, 273, 627, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 658, 647, 648, 645,
	646, 637, 0, 633, 0, 0, 0, 0, 636, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 2217, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 643, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 2219, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 144, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 631, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 161, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 626,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 632, 224,
	0, 228, 229, 230, 231, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 2218, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 272, 273, 627, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 658, 647, 648, 645,
	646, 637, 0, 633, 0, 0, 0, 0, 636, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 275, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 643, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 140, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 144, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 631, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 161, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 626,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 632, 224,
	0, 228, 229, 230, 231, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 258, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 272, 273, 627, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 1318, 647, 648, 645,
	646, 637, 0, 633, 0, 0, 0, 0, 636, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 275, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 643, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 140, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 1321, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 631, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 1322, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 1323,
	1320, 182, 308, 181, 383, 183, 184, 186, 185, 626,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 632, 224,
	0, 228, 229, 230, 1324, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 258, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 1319, 273, 627, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 658, 647, 648, 645,
	646, 637, 0, 633, 0, 0, 0, 0, 636, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 275, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 643, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 140, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 144, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 631, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 161, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 0,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 1336, 224,
	0, 228, 229, 230, 231, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 258, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 272, 273, 0, 0, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 1332, 1333, 658, 647, 648, 645,
	646, 637, 0, 1335, 0, 0, 0, 0, 636, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 124, 125, 126, 275, 690,
	277, 691, 127, 692, 693, 0, 128, 281, 282, 129,
	130, 0, 674, 694, 695, 285, 0, 131, 686, 0,
	666, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 375, 139, 140, 0, 667, 668, 670, 0,
	669, 671, 141, 142, 335, 143, 696, 144, 697, 698,
	0, 145, 0, 146, 0, 147, 0, 0, 689, 149,
	0, 150, 0, 0, 0, 290, 151, 152, 153, 676,
	677, 654, 0, 0, 154, 155, 699, 700, 701, 0,
	156, 0, 157, 0, 0, 376, 0, 158, 687, 0,
	297, 0, 159, 160, 161, 162, 683, 685, 378, 0,
	166, 0, 163, 0, 377, 164, 702, 165, 703, 704,
	705, 706, 707, 0, 665, 0, 379, 167, 168, 169,
	380, 170, 171, 172, 0, 174, 173, 0, 688, 381,
	175, 382, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 383, 183, 184, 186, 185, 0,
	0, 655, 684, 187, 708, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 384, 193, 385, 678,
	194, 195, 196, 197, 198, 0, 199, 679, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 709, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 386, 222, 223, 1336, 224,
	0, 228, 229, 230, 231, 0, 233, 317, 232, 234,
	235, 672, 236, 225, 226, 237, 387, 238, 710, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 711, 243,
	680, 0, 246, 0, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 712, 713, 0, 0, 254, 255, 681,
	682, 653, 256, 257, 258, 259, 0, 0, 260, 261,
	262, 263, 673, 264, 0, 327, 265, 266, 267, 328,
	714, 0, 0, 268, 0, 0, 0, 0, 269, 270,
	271, 272, 273, 0, 0, 658, 647, 648, 645, 646,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 122, 1335, 123, 0, 0, 0, 636, 675,
	640, 0, 0, 0, 124, 125, 126, 0, 690, 277,
	691, 127, 692, 693, 0, 128, 281, 282, 129, 130,
	643, 674, 694, 695, 285, 0, 131, 686, 0, 666,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 375, 139, 2219, 0, 667, 668, 670, 0, 669,
	671, 141, 142, 335, 143, 696, 144, 697, 698, 0,
	145, 0, 146, 0, 147, 0, 0, 689, 149, 0,
	150, 0, 0, 0, 631, 151, 152, 153, 676, 677,
	654, 0, 0, 154, 155, 699, 700, 701, 0, 156,
	0, 157, 0, 0, 376, 0, 158, 687, 0, 297,
	0, 159, 160, 161, 162, 683, 685, 0, 0, 166,
	0, 163, 0, 377, 164, 702, 165, 703, 704, 705,
	706, 707, 0, 665, 0, 0, 167, 168, 169, 380,
	170, 171, 172, 0, 174, 173, 0, 688, 381, 175,
	0, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 383, 183, 184, 186, 185, 626, 0,
	655, 684, 187, 708, 188, 189, 0, 190, 0, 0,
	191, 0, 0, 192, 311, 384, 193, 385, 678, 194,
	195, 196, 197, 198, 0, 199, 679, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 709, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 386, 222, 223, 632, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	672, 236, 225, 226, 237, 0, 238, 710, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 711, 243, 680,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 712, 713, 0, 0, 254, 255, 681, 682,
	653, 256, 257, 2218, 259, 0, 0, 260, 261, 262,
	263, 673, 264, 0, 327, 265, 266, 267, 328, 714,
	0, 0, 268, 0, 0, 0, 0, 269, 270, 271,
	272, 273, 658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 121, 122,
	0, 123, 633, 0, 0, 0, 675, 636, 0, 0,
	0, 124, 125, 126, 275, 276, 277, 278, 127, 279,
	280, 0, 128, 281, 282, 129, 130, 0, 674, 283,
	284, 285, 0, 131, 686, 0, 666, 0, 132, 133,
	134, 0, 135, 0, 136, 137, 138, 0, 375, 139,
	140, 0, 667, 668, 670, 0, 669, 671, 141, 142,
	335, 143, 287, 144, 288, 289, 0, 145, 0, 146,
	0, 147, 0, 0, 148, 149, 0, 150, 0, 0,
	0, 290, 151, 152, 153, 676, 677, 0, 0, 0,
	154, 155, 293, 294, 295, 0, 156, 0, 157, 0,
	0, 376, 0, 158, 687, 0, 297, 0, 159, 160,
	161, 162, 683, 685, 378, 0, 166, 0, 163, 0,
	377, 164, 300, 165, 301, 302, 303, 304, 305, 0,
	306, 0, 379, 167, 168, 169, 380, 170, 171, 172,
	0, 174, 173, 0, 688, 381, 175, 382, 0, 176,
	0, 0, 177, 0, 178, 179, 180, 182, 308, 181,
	383, 183, 184, 186, 185, 0, 0, 0, 684, 187,
	310, 188, 189, 0, 190, 0, 0, 191, 0, 0,
	192, 311, 384, 193, 385, 678, 194, 195, 196, 197,
	198, 0, 199, 679, 200, 314, 201, 0, 202, 203,
	204, 205, 206, 315, 207, 208, 0, 209, 210, 211,
	212, 213, 215, 216, 214, 217, 218, 219, 220, 0,
	221, 386, 222, 223, 316, 224, 0, 228, 229, 230,
	231, 0, 233, 317, 232, 234, 235, 672, 236, 225,
	226, 237, 387, 238, 318, 319, 239, 0, 245, 240,
	241, 227, 242, 244, 320, 243, 680, 0, 246, 0,
	247, 248, 249, 250, 251, 252, 253, 0, 322, 323,
	324, 0, 0, 254, 255, 681, 682, 0, 256, 257,
	258, 259, 0, 0, 260, 261, 262, 263, 673, 264,
	0, 327, 265, 266, 267, 328, 329, 0, 0, 268,
	0, 553, 0, 0, 269, 270, 271, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 122, 0,
	123, 0, 0, 0, 0, 274, 0, 0, 0, 1715,
	124, 125, 126, 275, 276, 277, 278, 127, 279, 280,
	0, 128, 281, 282, 129, 130, 0, 0, 283, 284,
	285, 0, 131, 286, 0, 374, 0, 132, 133, 134,
	0, 135, 0, 136, 137, 138, 0, 375, 139, 140,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 335,
	143, 287, 144, 288, 289, 0, 145, 0, 146, 0,
	147, 0, 0, 148, 149, 0, 150, 0, 0, 0,
	290, 151, 152, 153, 291, 292, 0, 0, 0, 154,
	155, 293, 294, 295, 0, 156, 0, 157, 0, 0,
	376, 0, 158, 296, 0, 297, 0, 159, 160, 161,
	162, 298, 299, 378, 0, 166, 0, 163, 0, 377,
	164, 300, 165, 301, 302, 303, 304, 305, 0, 306,
	0, 379, 167, 168, 169, 380, 170, 171, 172, 0,
	174, 173, 0, 307, 381, 175, 382, 0, 176, 0,
	0, 177, 0, 178, 179, 180, 182, 308, 181, 383,
	183, 184, 186, 185, 0, 0, 0, 309, 187, 310,
	188, 189, 0, 190, 0, 0, 191, 0, 0, 192,
	311, 384, 193, 385, 312, 194, 195, 196, 197, 198,
	0, 199, 313, 200, 314, 201, 0, 202, 203, 204,
	205, 206, 315, 207, 208, 0, 209, 210, 211, 212,
	213, 215, 216, 214, 217, 218, 219, 220, 0, 221,
	386, 222, 223, 316, 224, 0, 228, 229, 230, 231,
	102, 233, 317, 232, 234, 235, 0, 236, 225, 226,
	237, 387, 238, 318, 319, 239, 0, 245, 240, 241,
	227, 242, 244, 320, 243, 321, 0, 246, 104, 247,
	248, 249, 250, 251, 252, 253, 0, 322, 323, 324,
	0, 0, 254, 255, 325, 326, 0, 256, 257, 258,
	259, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	327, 265, 266, 267, 748, 329, 0, 0, 268, 0,
	0, 0, 100, 269, 270, 271, 272, 273, 0, 101,
	553, 550, 0, 551, 546, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 122, 97, 123,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 124,
	125, 126, 275, 276, 277, 278, 127, 279, 280, 0,
	128, 281, 282, 129, 130, 0, 0, 283, 284, 285,
	0, 131, 286, 0, 374, 0, 132, 133, 134, 0,
	135, 0, 136, 137, 138, 0, 375, 139, 140, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 335, 143,
	287, 144, 288, 289, 1101, 145, 0, 146, 0, 147,
	0, 0, 148, 149, 0, 150, 0, 0, 0, 290,
	151, 152, 153, 291, 292, 543, 0, 0, 154, 155,
	293, 294, 295, 0, 156, 0, 157, 0, 0, 376,
	0, 158, 296, 0, 297, 0, 159, 160, 161, 162,
	298, 299, 378, 0, 166, 0, 163, 0, 377, 164,
	300, 165, 301, 302, 303, 304, 305, 0, 306, 0,
	379, 167, 168, 169, 380, 170, 171, 172, 0, 174,
	173, 0, 307, 381, 175, 382, 0, 176, 0, 0,
	177, 0, 178, 179, 180, 182, 308, 181, 383, 183,
	184, 186, 185, 0, 0, 0, 309, 187, 310, 188,
	189, 0, 190, 544, 0, 191, 0, 0, 192, 311,
	384, 193, 385, 312, 194, 195, 196, 197, 198, 0,
	199, 313, 200, 314, 201, 0, 202, 203, 204, 205,
	206, 315, 207, 208, 0, 209, 210, 211, 212, 213,
	215, 216, 214, 217, 218, 219, 220, 0, 221, 386,
	222, 223, 316, 224, 0, 228, 229, 230, 231, 0,
	233, 317, 232, 234, 235, 0, 236, 225, 226, 237,
	387, 238, 318, 319, 239, 0, 245, 240, 241, 227,
	242, 244, 320, 243, 321, 0, 246, 0, 247, 248,
	249, 250, 251, 252, 253, 0, 322, 323, 324, 0,
	0, 254, 255, 325, 326, 542, 256, 257, 258, 259,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 327,
	265, 266, 267, 328, 329, 0, 0, 268, 0, 0,
	0, 0, 269, 270, 271, 272, 273, 553, 550, 0,
	551, 546, 541, 0, 0, 0, 0, 0, 552, 547,
	0, 0, 0, 121, 122, 0, 123, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 124, 125, 126, 275,
	276, 277, 278, 127, 279, 280, 0, 128, 281, 282,
	129, 130, 0, 0, 283, 284, 285, 0, 131, 286,
	0, 374, 0, 132, 133, 134, 0, 135, 0, 136,
	137, 138, 0, 375, 139, 140, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 335, 143, 287, 144, 288,
	289, 1098, 145, 0, 146, 0, 147, 0, 0, 148,
	149, 0, 150, 0, 0, 0, 290, 151, 152, 153,
	291, 292, 543, 0, 0, 154, 155, 293, 294, 295,
	0, 156, 0, 157, 0, 0, 376, 0, 158, 296,
	0, 297, 0, 159, 160, 161, 162, 298, 299, 378,
	0, 166, 0, 163, 0, 377, 164, 300, 165, 301,
	302, 303, 304, 305, 0, 306, 0, 379, 167, 168,
	169, 380, 170, 171, 172, 0, 174, 173, 0, 307,
	381, 175, 382, 0, 176, 0, 0, 177, 0, 178,
	179, 180, 182, 308, 181, 383, 183, 184, 186, 185,
	0, 0, 0, 309, 187, 310, 188, 189, 0, 190,
	544, 0, 191, 0, 0, 192, 311, 384, 193, 385,
	312, 194, 195, 196, 197, 198, 0, 199, 313, 200,
	314, 201, 0, 202, 203, 204, 205, 206, 315, 207,
	208, 0, 209, 210, 211, 212, 213, 215, 216, 214,
	217, 218, 219, 220, 0, 221, 386, 222, 223, 316,
	224, 0, 228, 229, 230, 231, 0, 233, 317, 232,
	234, 235, 0, 236, 225, 226, 237, 387, 238, 318,
	319, 239, 0, 245, 240, 241, 227, 242, 244, 320,
	243, 321, 0, 246, 0, 247, 248, 249, 250, 251,
	252, 253, 0, 322, 323, 324, 0, 0, 254, 255,
	325, 326, 542, 256, 257, 258, 259, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 327, 265, 266, 267,
	328, 329, 0, 0, 268, 0, 0, 0, 0, 269,
	270, 271, 272, 273, 553, 550, 0, 551, 546, 541,
	0, 0, 0, 0, 0, 552, 547, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 374, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	375, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 783, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 543,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 376, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 378, 0, 166, 0,
	163, 0, 377, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 379, 167, 168, 169, 380, 170,
	171, 172, 0, 174, 173, 0, 307, 381, 175, 382,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 383, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 544, 0, 191,
	0, 0, 192, 311, 384, 193, 385, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 386, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 387, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 542,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 0,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 553, 550, 0, 551, 546, 541, 0, 0, 0,
	0, 0, 552, 547, 0, 0, 0, 121, 122, 0,
	123, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	124, 125, 126, 275, 276, 277, 278, 127, 279, 280,
	0, 128, 281, 282, 129, 130, 0, 0, 283, 284,
	285, 0, 131, 286, 0, 374, 0, 132, 133, 134,
	0, 135, 0, 136, 137, 138, 0, 375, 139, 140,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 335,
	143, 287, 144, 288, 289, 0, 145, 0, 146, 0,
	147, 0, 0, 148, 149, 0, 150, 0, 0, 0,
	290, 151, 152, 153, 291, 292, 543, 0, 0, 154,
	155, 293, 294, 295, 0, 156, 0, 157, 0, 0,
	376, 0, 158, 296, 0, 297, 0, 159, 160, 161,
	162, 298, 299, 378, 0, 166, 0, 163, 0, 377,
	164, 300, 165, 301, 302, 303, 304, 305, 0, 306,
	0, 379, 167, 168, 169, 380, 170, 171, 172, 0,
	174, 173, 0, 307, 381, 175, 382, 0, 176, 0,
	0, 177, 0, 178, 179, 180, 182, 308, 181, 383,
	183, 184, 186, 185, 0, 0, 0, 309, 187, 310,
	188, 189, 0, 190, 544, 0, 191, 0, 0, 192,
	311, 384, 193, 385, 312, 194, 195, 196, 197, 198,
	0, 199, 313, 200, 314, 201, 0, 202, 203, 204,
	205, 206, 315, 207, 208, 0, 209, 210, 211, 212,
	213, 215, 216, 214, 217, 218, 219, 220, 0, 221,
	386, 222, 223, 316, 224, 0, 228, 229, 230, 231,
	0, 233, 317, 232, 234, 235, 0, 236, 225, 226,
	237, 387, 238, 318, 319, 239, 0, 245, 240, 241,
	227, 242, 244, 320, 243, 321, 0, 246, 0, 247,
	248, 249, 250, 251, 252, 253, 0, 322, 323, 324,
	0, 0, 254, 255, 325, 326, 542, 256, 257, 258,
	259, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	327, 265, 266, 267, 328, 329, 0, 118, 268, 0,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 0,
	0, 0, 0, 121, 122, 0, 123, 0, 0, 552,
	547, 274, 0, 0, 0, 0, 124, 125, 126, 275,
	276, 277, 278, 127, 279, 280, 0, 128, 281, 282,
	129, 130, 0, 0, 283, 284, 285, 0, 131, 286,
	0, 0, 0, 132, 133, 134, 0, 135, 0, 136,
	137, 138, 0, 0, 139, 140, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 335, 143, 287, 144, 288,
	289, 0, 145, 0, 146, 0, 147, 0, 0, 148,
	149, 0, 150, 0, 0, 0, 290, 151, 152, 153,
	291, 292, 0, 0, 0, 154, 155, 293, 294, 295,
	0, 156, 0, 157, 0, 0, 0, 0, 158, 296,
	0, 297, 0, 159, 160, 161, 162, 298, 299, 0,
	0, 166, 0, 163, 0, 0, 164, 300, 165, 301,
	302, 303, 304, 305, 0, 306, 0, 0, 167, 168,
	169, 0, 170, 171, 172, 0, 174, 173, 0, 307,
	0, 175, 0, 0, 176, 0, 0, 177, 0, 178,
	179, 180, 182, 308, 181, 0, 183, 184, 186, 185,
	0, 0, 0, 309, 187, 310, 188, 189, 0, 190,
	0, 599, 191, 0, 0, 192, 311, 0, 193, 0,
	312, 194, 195, 196, 197, 198, 0, 199, 313, 200,
	314, 201, 0, 202, 203, 204, 205, 206, 315, 207,
	208, 0, 209, 210, 211, 212, 213, 215, 216, 214,
	217, 218, 219, 220, 0, 221, 0, 222, 223, 316,
	224, 0, 228, 229, 230, 231, 102, 233, 317, 232,
	234, 235, 0, 236, 225, 226, 237, 0, 238, 318,
	319, 239, 0, 245, 240, 241, 227, 242, 244, 320,
	243, 321, 0, 246, 104, 247, 248, 249, 250, 251,
	252, 253, 0, 322, 323, 324, 0, 0, 254, 255,
	325, 326, 0, 256, 257, 258, 259, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 327, 265, 266, 267,
	748, 329, 0, 0, 268, 0, 118, 0, 100, 269,
	270, 271, 272, 273, 0, 101, 0, 0, 0, 0,
	0, 0, 121, 122, 0, 123, 0, 0, 0, 0,
	274, 0, 1458, 0, 1463, 124, 125, 126, 275, 276,
	277, 278, 127, 279, 280, 0, 128, 281, 282, 129,
	130, 0, 0, 283, 284, 285, 0, 131, 286, 0,
	0, 0, 132, 133, 134, 0, 135, 0, 136, 137,
	138, 0, 0, 139, 140, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 335, 143, 287, 144, 288, 289,
	0, 145, 0, 146, 0, 147, 0, 0, 148, 149,
	0, 150, 0, 0, 0, 290, 151, 152, 153, 291,
	292, 0, 0, 0, 154, 155, 293, 294, 295, 0,
	156, 0, 157, 0, 0, 0, 0, 158, 296, 0,
	297, 0, 159, 160, 161, 162, 298, 299, 0, 0,
	166, 0, 163, 0, 0, 164, 300, 165, 301, 302,
	303, 304, 305, 0, 306, 0, 0, 167, 168, 169,
	0, 170, 171, 172, 0, 174, 173, 0, 307, 0,
	175, 0, 0, 176, 0, 0, 177, 0, 178, 179,
	180, 182, 308, 181, 0, 183, 184, 186, 185, 0,
	0, 0, 309, 187, 310, 188, 189, 0, 190, 0,
	0, 191, 0, 0, 192, 311, 0, 193, 0, 312,
	194, 195, 196, 197, 198, 0, 199, 313, 200, 314,
	201, 0, 202, 203, 204, 205, 206, 315, 207, 208,
	0, 209, 210, 211, 212, 213, 215, 216, 214, 217,
	218, 219, 220, 0, 221, 0, 222, 223, 316, 224,
	0, 228, 229, 230, 231, 102, 233, 317, 232, 234,
	235, 0, 236, 225, 226, 237, 0, 238, 318, 319,
	239, 0, 245, 240, 241, 227, 242, 244, 320, 243,
	321, 0, 246, 104, 247, 248, 249, 250, 251, 252,
	253, 0, 322, 323, 324, 0, 0, 254, 255, 325,
	326, 0, 256, 257, 258, 259, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 327, 265, 266, 267, 748,
	329, 0, 0, 268, 0, 118, 0, 100, 269, 270,
	271, 272, 273, 0, 101, 0, 0, 0, 0, 0,
	0, 121, 122, 0, 123, 0, 0, 0, 0, 274,
	0, 0, 0, 97, 124, 125, 126, 275, 276, 277,
	278, 127, 279, 280, 0, 128, 281, 282, 129, 130,
	0, 0, 283, 284, 285, 0, 131, 286, 0, 0,
	0, 132, 133, 134, 0, 135, 0, 136, 137, 138,
	0, 0, 139, 140, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 335, 143, 287, 144, 288, 289, 0,
	145, 0, 146, 0, 147, 0, 0, 148, 149, 0,
	150, 0, 0, 0, 290, 151, 152, 153, 291, 292,
	0, 0, 0, 154, 155, 293, 294, 295, 0, 156,
	0, 157, 0, 0, 0, 0, 158, 296, 0, 297,
	0, 159, 160, 161, 162, 298, 299, 0, 0, 166,
	0, 163, 0, 0, 164, 300, 165, 301, 302, 303,
	304, 305, 0, 306, 0, 0, 167, 168, 169, 0,
	170, 171, 172, 0, 174, 173, 0, 307, 0, 175,
	0, 0, 176, 0, 0, 177, 0, 178, 179, 180,
	182, 308, 181, 0, 183, 184, 186, 185, 0, 0,
	0, 309, 187, 310, 188, 189, 0, 190, 0, 599,
	191, 0, 0, 192, 311, 0, 193, 0, 312, 194,
	195, 196, 197, 198, 0, 199, 313, 200, 314, 201,
	0, 202, 203, 204, 205, 206, 315, 207, 208, 0,
	209, 210, 211, 212, 213, 215, 216, 214, 217, 218,
	219, 220, 0, 221, 0, 222, 223, 316, 224, 0,
	228, 229, 230, 231, 0, 233, 317, 232, 234, 235,
	0, 236, 225, 226, 237, 0, 238, 318, 319, 239,
	0, 245, 240, 241, 227, 242, 244, 320, 243, 321,
	0, 246, 0, 247, 248, 249, 250, 251, 252, 253,
	0, 322, 323, 324, 0, 0, 254, 255, 325, 326,
	0, 256, 257, 258, 259, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 327, 265, 266, 267, 328, 329,
	0, 0, 268, 0, 118, 0, 0, 269, 270, 271,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	1458, 0, 1463, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 0,
	0, 268, 0, 0, 118, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 992, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 0,
	0, 268, 0, 118, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	122, 0, 123, 0, 0, 0, 0, 274, 0, 0,
	0, 1376, 124, 125, 126, 275, 276, 277, 278, 127,
	279, 280, 0, 128, 281, 282, 129, 130, 0, 0,
	283, 284, 285, 0, 131, 286, 0, 0, 0, 132,
	133, 134, 0, 135, 0, 136, 137, 138, 0, 0,
	139, 140, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 335, 143, 287, 144, 288, 289, 0, 145, 0,
	146, 0, 147, 0, 0, 148, 149, 0, 150, 0,
	0, 0, 290, 151, 152, 153, 291, 292, 0, 0,
	0, 154, 155, 293, 294, 295, 0, 156, 0, 157,
	0, 0, 0, 0, 158, 296, 0, 297, 0, 159,
	160, 161, 162, 298, 299, 0, 0, 166, 0, 163,
	0, 0, 164, 300, 165, 301, 302, 303, 304, 305,
	0, 306, 0, 0, 167, 168, 169, 0, 170, 171,
	172, 0, 174, 173, 0, 307, 0, 175, 0, 0,
	176, 0, 0, 177, 0, 178, 179, 180, 182, 308,
	181, 0, 183, 184, 186, 185, 0, 0, 0, 309,
	187, 310, 188, 189, 0, 190, 0, 0, 191, 0,
	0, 192, 311, 0, 193, 0, 312, 194, 195, 196,
	197, 198, 0, 199, 313, 200, 314, 201, 0, 202,
	203, 204, 205, 206, 315, 207, 208, 0, 209, 210,
	211, 212, 213, 215, 216, 214, 217, 218, 219, 220,
	0, 221, 0, 222, 223, 316, 224, 0, 228, 229,
	230, 231, 0, 233, 317, 232, 234, 235, 0, 236,
	225, 226, 237, 0, 238, 318, 319, 239, 0, 245,
	240, 241, 227, 242, 244, 320, 243, 321, 0, 246,
	0, 247, 248, 249, 250, 251, 252, 253, 0, 322,
	323, 324, 0, 0, 254, 255, 325, 326, 0, 256,
	257, 258, 259, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 327, 265, 266, 267, 328, 329, 0, 0,
	268, 0, 118, 0, 0, 269, 270, 271, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 122,
	0, 123, 0, 0, 0, 0, 274, 0, 0, 0,
	1777, 124, 125, 126, 275, 276, 277, 278, 127, 279,
	280, 0, 128, 281, 282, 129, 130, 0, 0, 283,
	284, 285, 0, 131, 286, 0, 0, 0, 132, 133,
	134, 0, 135, 0, 136, 137, 138, 0, 0, 139,
	140, 0, 0, 0, 0, 0, 0, 0, 141, 142,
	335, 143, 287, 144, 288, 289, 0, 145, 0, 146,
	0, 147, 0, 0, 148, 149, 0, 150, 0, 0,
	0, 290, 151, 152, 153, 291, 292, 0, 0, 0,
	154, 155, 293, 294, 295, 0, 156, 0, 157, 0,
	0, 0, 0, 158, 296, 0, 297, 0, 159, 160,
	161, 162, 298, 299, 0, 0, 166, 0, 163, 0,
	0, 164, 300, 165, 301, 302, 303, 304, 305, 0,
	306, 0, 0, 167, 168, 169, 0, 170, 171, 172,
	0, 174, 173, 0, 307, 0, 175, 0, 0, 176,
	0, 0, 177, 0, 178, 179, 180, 182, 308, 181,
	0, 183, 184, 186, 185, 0, 0, 0, 309, 187,
	310, 188, 189, 0, 190, 0, 0, 191, 0, 0,
	192, 311, 0, 193, 0, 312, 194, 195, 196, 197,
	198, 0, 199, 313, 200, 314, 201, 0, 202, 203,
	204, 205, 206, 315, 207, 208, 0, 209, 210, 211,
	212, 213, 215, 216, 214, 217, 218, 219, 220, 0,
	221, 0, 222, 223, 316, 224, 0, 228, 229, 230,
	231, 0, 233, 317, 232, 234, 235, 0, 236, 225,
	226, 237, 0, 238, 318, 319, 239, 0, 245, 240,
	241, 227, 242, 244, 320, 243, 321, 0, 246, 0,
	247, 248, 249, 250, 251, 252, 253, 0, 322, 323,
	324, 0, 0, 254, 255, 325, 326, 0, 256, 257,
	258, 259, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 327, 265, 266, 267, 328, 329, 0, 0, 268,
	0, 0, 0, 0, 269, 270, 271, 272, 273, 658,
	647, 648, 645, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 122, 0, 123, 861,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 690, 277, 691, 127, 692, 693, 0, 128,
	281, 282, 129, 130, 0, 0, 694, 695, 285, 0,
	131, 286, 0, 374, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 375, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 696,
	144, 697, 698, 0, 145, 0, 146, 0, 147, 0,
	0, 689, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 654, 0, 0, 154, 155, 699,
	700, 701, 0, 156, 0, 157, 0, 0, 376, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 378, 0, 166, 0, 163, 0, 377, 164, 702,
	165, 703, 704, 705, 706, 707, 0, 665, 0, 379,
	167, 168, 169, 380, 170, 171, 172, 0, 174, 173,
	0, 307, 381, 175, 382, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 383, 183, 184,
	186, 185, 0, 0, 655, 309, 187, 708, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 384,
	193, 385, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	709, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 386, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 387,
	238, 710, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 711, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 712, 713, 0, 0,
	254, 255, 325, 326, 653, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 714, 553, 550, 268, 0, 0, 823,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 374, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	375, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 376, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 378, 0, 166, 0,
	163, 0, 377, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 379, 167, 168, 169, 380, 170,
	171, 172, 0, 174, 173, 0, 307, 381, 175, 382,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 383, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 384, 193, 385, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 386, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 387, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 114, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 113, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 553, 550, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 117,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 374, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	375, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 376, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 378, 0, 166, 0,
	163, 0, 377, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 379, 167, 168, 169, 380, 170,
	171, 172, 0, 174, 173, 0, 307, 381, 175, 382,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 383, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 384, 193, 385, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 386, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 387, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 553, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 117,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 374, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	375, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 376, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 378, 0, 166, 0,
	163, 0, 377, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 379, 167, 168, 169, 380, 170,
	171, 172, 0, 174, 173, 0, 307, 381, 175, 382,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 383, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 384, 193, 385, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 386, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 387, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 1185,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	1183, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 1421, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 1188, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 1419, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 1187, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	1420, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 1185, 131, 286, 0, 0, 1180,
	132, 133, 134, 0, 135, 1183, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 1188, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 1179, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 1187,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 1186, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 1887, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 599, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 1140, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 1018, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 599, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 756, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 611, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 599, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 604,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 599, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 474, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 473, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 1487, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 1485,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 1474, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 1116,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 490,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 1002, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 0, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 799, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 794,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 767, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 503, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	499, 323, 324, 0, 0, 254, 768, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 744,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 742, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 739,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 736, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 734,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 131, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 607, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 176, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 181, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 316, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 234, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	322, 323, 324, 0, 0, 254, 255, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 196, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 205, 206,
	315, 588, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 224, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 118, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 0, 0, 0,
	121, 122, 0, 123, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 124, 125, 126, 275, 276, 277, 278,
	127, 279, 280, 0, 128, 281, 282, 129, 130, 0,
	0, 283, 284, 285, 0, 493, 286, 0, 0, 0,
	132, 133, 134, 0, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 335, 143, 287, 144, 288, 289, 0, 145,
	0, 146, 0, 147, 0, 0, 148, 149, 0, 150,
	0, 0, 0, 290, 151, 152, 153, 291, 292, 0,
	0, 0, 154, 155, 293, 294, 295, 0, 156, 0,
	157, 0, 0, 0, 0, 158, 296, 0, 297, 0,
	159, 160, 161, 162, 298, 299, 0, 0, 166, 0,
	163, 0, 0, 164, 300, 165, 301, 302, 303, 304,
	305, 0, 306, 0, 0, 167, 168, 169, 0, 170,
	171, 172, 0, 174, 173, 0, 307, 0, 175, 0,
	0, 492, 0, 0, 177, 0, 178, 179, 180, 182,
	308, 503, 0, 183, 184, 186, 185, 0, 0, 0,
	309, 187, 310, 188, 189, 0, 190, 0, 0, 191,
	0, 0, 192, 311, 0, 193, 0, 312, 194, 195,
	196, 197, 198, 0, 199, 313, 200, 314, 201, 0,
	202, 203, 204, 205, 206, 315, 207, 208, 0, 209,
	210, 211, 212, 213, 215, 216, 214, 217, 218, 219,
	220, 0, 221, 0, 222, 223, 494, 224, 0, 228,
	229, 230, 231, 0, 233, 317, 232, 495, 235, 0,
	236, 225, 226, 237, 0, 238, 318, 319, 239, 0,
	245, 240, 241, 227, 242, 244, 320, 243, 321, 0,
	246, 0, 247, 248, 249, 250, 251, 252, 253, 0,
	499, 323, 324, 0, 0, 254, 497, 325, 326, 0,
	256, 257, 258, 259, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 327, 265, 266, 267, 328, 329, 118,
	0, 268, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 0, 0, 0, 0, 121, 122, 0, 123, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 124, 125,
	126, 275, 276, 277, 278, 127, 279, 280, 0, 128,
	281, 282, 129, 130, 0, 0, 283, 284, 285, 0,
	131, 286, 0, 0, 0, 132, 133, 134, 0, 135,
	0, 136, 137, 138, 0, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 335, 143, 287,
	144, 288, 289, 0, 145, 0, 146, 0, 147, 0,
	0, 148, 149, 0, 150, 0, 0, 0, 290, 151,
	152, 153, 291, 292, 0, 0, 0, 154, 155, 293,
	294, 295, 0, 156, 0, 157, 0, 0, 0, 0,
	158, 296, 0, 297, 0, 159, 160, 161, 162, 298,
	299, 0, 0, 166, 0, 163, 0, 0, 164, 300,
	165, 301, 302, 303, 304, 305, 0, 306, 0, 0,
	167, 168, 169, 0, 170, 171, 172, 0, 174, 173,
	0, 307, 0, 175, 0, 0, 176, 0, 0, 177,
	0, 178, 179, 180, 182, 308, 181, 0, 183, 184,
	186, 185, 0, 0, 0, 309, 187, 310, 188, 189,
	0, 190, 0, 0, 191, 0, 0, 192, 311, 0,
	193, 0, 312, 194, 195, 0, 197, 198, 0, 199,
	313, 200, 314, 201, 0, 202, 203, 204, 0, 206,
	315, 207, 208, 0, 209, 210, 211, 212, 213, 215,
	216, 214, 217, 218, 219, 220, 0, 221, 0, 222,
	223, 316, 0, 0, 228, 229, 230, 231, 0, 233,
	317, 232, 234, 235, 0, 236, 225, 226, 237, 0,
	238, 318, 319, 239, 0, 245, 240, 241, 227, 242,
	244, 320, 243, 321, 0, 246, 0, 247, 248, 249,
	250, 251, 252, 253, 0, 322, 323, 324, 0, 0,
	254, 255, 325, 326, 0, 256, 257, 258, 259, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 327, 265,
	266, 267, 328, 329, 0, 0, 268, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 893, 894, 0, 913,
	914, 915, 923, 924, 925, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 927, 0, 893, 894, 0, 913, 914, 915,
	923, 924, 925, 0, 0, 0, 0, 0, 0, 0,
	916, 0, 0, 895, 0, 0, 0, 896, 0, 910,
	927, 0, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 895, 0, 0, 0, 896, 0, 910, 927, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 895,
	0, 0, 0, 901, 896, 910, 0, 927, 0, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 920, 928, 0, 916, 0, 0, 895, 0,
	0, 901, 896, 0, 910, 927, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	920, 928, 0, 0, 0, 918, 895, 0, 0, 901,
	0, 911, 910, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 928,
	0, 0, 0, 918, 0, 0, 917, 0, 901, 911,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	0, 918, 0, 0, 917, 0, 901, 911, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 920, 928, 0, 0, 0,
	918, 0, 917, 0, 0, 0, 911, 0, 0, 0,
	921, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 918, 0,
	0, 917, 0, 0, 911, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 917,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 912,
	907, 908, 909, 922, 0, 906, 904, 905, 897, 898,
	899, 900, 902, 903, 0, 921, 0, 0, 2164, 0,
	0, 0, 0, 0, 0, 919, 0, 912, 907, 908,
	909, 922, 0, 906, 904, 905, 897, 898, 899, 900,
	902, 903, 0, 921, 0, 0, 2139, 0, 0, 0,
	0, 0, 0, 919, 0, 0, 907, 908, 909, 922,
	0, 906, 904, 905, 897, 898, 899, 900, 902, 903,
	0, 0, 0, 0, 2073, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 0, 907, 908, 909, 922, 0,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 0,
	0, 0, 0, 2068, 0, 0, 0, 0, 0, 0,
	919, 0, 0, 907, 908, 909, 922, 0, 906, 904,
	905, 897, 898, 899, 900, 902, 903, 0, 0, 893,
	894, 2064, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 927, 0, 893, 894, 0,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 895, 0, 0, 0,
	896, 0, 910, 927, 0, 893, 894, 0, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 895, 0, 0, 0, 896, 0,
	910, 927, 0, 0, 893, 894, 0, 913, 914, 915,
	923, 924, 925, 0, 0, 0, 0, 0, 0, 0,
	916, 0, 895, 0, 0, 0, 901, 896, 910, 0,
	927, 0, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 920, 928, 0, 916, 0,
	0, 895, 0, 0, 901, 896, 0, 910, 927, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 920, 928, 0, 0, 0, 918, 895,
	0, 0, 901, 0, 911, 910, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 0, 0, 918, 0, 0, 917,
	0, 901, 911, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	920, 928, 0, 0, 918, 0, 0, 917, 0, 901,
	911, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 912, 920, 928,
	0, 0, 0, 918, 0, 917, 0, 0, 0, 911,
	0, 0, 0, 921, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 918, 0, 0, 917, 0, 0, 911, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 912, 907, 908, 909, 922, 0, 906, 904,
	905, 897, 898, 899, 900, 902, 903, 0, 921, 0,
	0, 2041, 0, 0, 0, 0, 0, 0, 919, 0,
	912, 907, 908, 909, 922, 0, 906, 904, 905, 897,
	898, 899, 900, 902, 903, 0, 921, 0, 0, 1971,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 907,
	908, 909, 922, 0, 906, 904, 905, 897, 898, 899,
	900, 902, 903, 0, 0, 0, 0, 1970, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 907, 908,
	909, 922, 0, 906, 904, 905, 897, 898, 899, 900,
	902, 903, 0, 0, 0, 0, 1909, 0, 0, 0,
	0, 0, 0, 919, 0, 0, 907, 908, 909, 922,
	0, 906, 904, 905, 897, 898, 899, 900, 902, 903,
	0, 0, 893, 894, 1859, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 927, 0,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 895,
	0, 0, 0, 896, 0, 910, 927, 0, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 895, 0, 0,
	0, 896, 0, 910, 927, 0, 0, 893, 894, 0,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 895, 0, 0, 0, 901,
	896, 910, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 928,
	0, 0, 0, 0, 895, 0, 0, 901, 0, 0,
	910, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 928, 0, 0,
	0, 918, 0, 0, 0, 901, 0, 911, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 928, 0, 0, 0, 918,
	0, 0, 917, 0, 901, 911, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 920, 928, 0, 0, 918, 0, 0,
	917, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 918, 0, 917, 0,
	0, 0, 911, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 917, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 919, 0, 912, 907, 908, 909, 922,
	0, 906, 904, 905, 897, 898, 899, 900, 902, 903,
	0, 921, 0, 0, 1780, 0, 0, 0, 0, 0,
	0, 919, 0, 0, 907, 908, 909, 922, 0, 906,
	904, 905, 897, 898, 899, 900, 902, 903, 0, 0,
	0, 0, 1756, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 907, 908, 909, 922, 0, 906, 904, 905,
	897, 898, 899, 900, 902, 903, 0, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 907, 908, 909, 922, 0, 906, 904, 905, 897,
	898, 899, 900, 902, 903, 893, 894, 1530, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 927, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 895, 0, 0, 0, 896, 0, 910, 927,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	895, 0, 1441, 0, 896, 0, 910, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 901, 2241, 910, 0, 0, 0, 1568, 1569,
	0, 1586, 1587, 1588, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 1600, 1442, 0, 1599, 0, 0, 0, 926,
	0, 1568, 1569, 0, 1586, 1587, 1588, 0, 0, 920,
	928, 0, 0, 0, 918, 0, 0, 0, 901, 0,
	911, 1583, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	0, 0, 918, 0, 0, 917, 0, 0, 911, 0,
	0, 0, 0, 0, 1583, 926, 0, 0, 0, 0,
	0, 2240, 0, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 917, 0, 1574, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 1590, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 1574, 921,
	0, 0, 1589, 0, 0, 0, 0, 0, 1168, 0,
	0, 912, 0, 0, 893, 894, 0, 913, 914, 915,
	923, 924, 925, 1584, 0, 0, 0, 921, 0, 0,
	916, 0, 0, 0, 1167, 1589, 0, 896, 0, 912,
	927, 0, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 921, 1584, 0, 916, 0,
	0, 895, 0, 0, 0, 896, 919, 910, 927, 907,
	908, 909, 922, 0, 906, 904, 905, 897, 898, 899,
	900, 902, 903, 0, 0, 0, 0, 0, 0, 895,
	0, 0, 0, 0, 919, 910, 1585, 907, 908, 909,
	922, 0, 906, 904, 905, 897, 898, 899, 900, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 919, 0, 0, 907, 908, 909, 922, 1585,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 0,
	920, 928, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 928,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 911,
	0, 0, 1580, 1581, 1582, 0, 926, 1579, 1577, 1578,
	1570, 1571, 1572, 1573, 1575, 1576, 0, 0, 0, 0,
	0, 918, 0, 0, 917, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 0, 1580, 1581, 1582, 0, 0,
	1579, 1577, 1578, 1570, 1571, 1572, 1573, 1575, 1576, 0,
	0, 0, 917, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 893, 894, 0, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 921, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 896, 0,
	912, 927, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 921, 0, 0, 916,
	0, 0, 895, 0, 0, 0, 896, 0, 910, 927,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	895, 1601, 0, 0, 896, 919, 910, 927, 907, 908,
	909, 922, 0, 906, 904, 905, 897, 898, 899, 900,
	902, 903, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 901, 919, 910, 0, 907, 908, 909, 922,
	0, 906, 904, 905, 897, 898, 899, 900, 902, 903,
	0, 920, 928, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 1606, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 920,
	928, 0, 0, 0, 918, 0, 0, 0, 901, 0,
	911, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	0, 0, 918, 0, 0, 917, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 917, 0, 0, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 0, 0, 893, 894, 0, 913, 914, 915,
	923, 924, 925, 0, 1760, 0, 0, 921, 0, 0,
	916, 0, 0, 0, 0, 0, 0, 896, 0, 912,
	927, 0, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 921, 0, 0, 916, 0,
	0, 895, 1559, 0, 0, 896, 919, 910, 927, 907,
	908, 909, 922, 0, 906, 904, 905, 897, 898, 899,
	900, 902, 903, 0, 0, 0, 0, 0, 0, 895,
	0, 0, 0, 0, 919, 910, 0, 907, 908, 909,
	922, 0, 906, 904, 905, 897, 898, 899, 900, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 919, 0, 0, 907, 908, 909, 922, 0,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 0,
	920, 928, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 928,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 917, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 893, 894, 0, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 921, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 896, 0,
	912, 927, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 921, 0, 0, 916,
	0, 0, 895, 0, 0, 0, 896, 0, 910, 927,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 896, 919, 910, 927, 907, 908,
	909, 922, 0, 906, 904, 905, 897, 898, 899, 900,
	902, 903, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 901, 919, 910, 0, 907, 908, 909, 922,
	0, 906, 904, 905, 897, 898, 899, 900, 902, 903,
	0, 920, 928, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 893, 894, 0, 926,
	0, 0, 923, 924, 925, 0, 0, 0, 0, 920,
	928, 0, 0, 0, 918, 0, 0, 0, 901, 896,
	911, 0, 927, 0, 0, 0, 0, 926, 1568, 1569,
	0, 1586, 1587, 1588, 0, 0, 0, 920, 928, 0,
	0, 0, 918, 895, 0, 917, 0, 0, 911, 910,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 1583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 920, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1574, 0, 921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 907,
	908, 909, 922, 0, 906, 904, 905, 897, 898, 899,
	900, 902, 903, 1584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	922, 0, 906, 904, 905, 897, 898, 899, 900, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 912, 907, 908, 909, 922, 0,
	906, 904, 905, 897, 898, 899, 900, 902, 903, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	1037, 1066, 1029, 1057, 1056, 0, 1585, 1031, 1030, 0,
	0, 0, 0, 1068, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 1054, 1053,
	0, 0, 0, 0, 0, 0, 0, 919, 1052, 0,
	0, 0, 0, 922, 0, 906, 904, 905, 897, 898,
	899, 900, 902, 903, 0, 0, 1051, 1049, 1050, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1580, 1581, 1582, 0, 0, 1579, 1577, 1578,
	1570, 1571, 1572, 1573, 1575, 1576, 1040, 1039, 1041, 1042,
	1043, 1044, 1045, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1037, 1066, 1029, 1057, 1056,
	0, 0, 1031, 1030, 0, 0, 0, 0, 1068, 1067,
	0, 0, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1062, 0, 1054, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 1048, 0, 0,
	582, 1217, 1215, 1216, 1219, 1218, 0, 0, 0, 0,
	0, 1051, 1049, 1050, 0, 0, 0, 0, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 1034, 0, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 1046, 1035,
	0, 1040, 1039, 1041, 1042, 1043, 1044, 1045, 1070, 1065,
	0, 560, 0, 0, 0, 0, 562, 0, 0, 0,
	1032, 568, 569, 1063, 1064, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1033, 583, 563,
	0, 0, 0, 0, 0, 1036, 0, 0, 0, 1055,
	1069, 0, 0, 1038, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1034, 572, 0, 0, 567, 574, 0, 0,
	0, 0, 0, 1046, 1035, 0, 0, 571, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 1032, 0, 0, 1063, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1036, 0, 0, 0, 0, 1069, 0, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 575, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 0,
	0, 0, 580, 0, 0, 0, 586, 0, 0, 0,
	0, 573, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579,
}
var sqlPact = [...]int{

	4160, -1000, 18, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 665, 18275, 18275, 935, 22685,
	-1000, -1000, -1000, -1000, -1000, -1000, 737, 900, 664, 2238,
	5659, 22685, 22685, 22370, 1072, 1172, 1163, 1072, 24260, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28040, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 512, 513, 512, 512, 501,
	24260, 1122, 636, 756, 136, -1000, 689, -58, 15087, 31626,
	27725, 22685, 1479, 16, 20480, 254, 4160, 22055, 27410, 22685,
	21740, 604, 14, 18905, 22685, -1000, 23, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1273, 11782, 11782, 299, 23, -1000, 1272, 1180, 1179, 20480,
	-1000, -1000, -1000, -1000, -1000, 27095, 26780, 26465, 26150, 25835,
	-1000, 13777, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 770, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	309, 307, -1000, 21425, -1000, 977, -1000, 15, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11782, 11782, 969, -1000,
	22685, -1000, 1713, 688, 304, 25520, -1000, 1025, -1000, 405,
	566, -1000, -1000, 14760, 37, 1025, -1000, 1025, -1000, -1000,
	-1000, 600, 24260, -1000, -1000, -1000, -1000, -1000, 20480, -1000,
	25205, 22685, 22685, 1197, 24890, -1000, 689, -1000, -1000, -1000,
	1105, 1472, 1472, 1472, 1539, 132, 127, 136, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1638, -1000, -1000,
	-1000, -1000, 1678, -1000, -1000, -1000, -1000, -1000, 1071, 17960,
	778, 1520, 1271, -1000, 968, 1269, 1268, 1267, 1264, 1262,
	-1000, 795, -1000, 1285, 515, -1000, 1261, 775, 485, -1000,
	1260, 1258, -1000, -1000, -1000, -1000, 404, 12, 22685, -1000,
	303, 12, 10081, 10081, -1000, -1000, 254, -1000, 340, 17318,
	-1000, 8381, -1000, 840, 1377, 451, 800, 1371, -107, 804,
	790, 1370, 17960, 18905, 14, 3, -1000, -1000, -1000, 5332,
	17960, 31025, -1000, 11782, 11782, 11782, 11782, 11782, 899, 333,
	-1000, 302, 301, 6667, -1000, -1000, 1674, -1000, -1000, -1000,
	144, -1000, -1000, 11782, 23, -1000, -1000, -1000, -1000, 297,
	1709, -1000, 430, -1000, -1000, -1000, 373, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1284, 295, 294, 290,
	-1000, -1000, -1000, -1000, 281, 280, 278, 276, 275, 274,
	273, 272, 271, 267, 265, 264, 260, 259, 258, 854,
	-1000, 436, -1000, -1000, 436, 436, -1000, 244, 244, 247,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 244, -1000,
	-1000, -1000, 375, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	256, 31025, 668, 16360, 23, -1000, -1000, -1000, 20480, 22685,
	22685, 702, 24575, -1000, 1368, 120, 1364, -1000, 116, 1359,
	-1000, 116, 1354, 3, 1348, -14, -1000, -1000, 254, 21110,
	22685, 1574, 31527, -1000, 11782, -1000, -1000, 18275, 752, 31025,
	31025, 18275, -1000, -1000, 22685, 11782, -1000, 1572, 1025, 10,
	-1000, -1000, -1000, -1000, 1128, 1164, 539, 1221, 14433, 14106,
	1441, -1000, -1000, -1000, 35, 5659, -1000, 10, -1000, 24260,
	-1000, 122, -1000, 251, 1083, 401, 121, 23945, 401, 1081,
	-1000, 1105, -1000, 957, 1178, 10762, 1166, 11782, 136, -1000,
	-1000, 136, 136, 7688, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 20795, -1000, -1000, 686, 22685, 1283,
	18275, 22685, 22685, 22685, 22685, 22685, -1000, -1000, 543, 1277,
	22685, 1125, -1000, -1000, 22685, 22685, 768, 630, -1000, 22685,
	12, 1569, 22685, 212, -1000, 30274, -1000, 212, -1000, -1000,
	-1000, 22685, -20, -1000, 31025, -1000, 1, 793, -1000, 19850,
	1503, 1470, 1456, 20480, 1553, -58, 1256, 1551, -58, 1250,
	598, 22685, 5659, 585, 584, 20480, 364, -1000, 22685, -1000,
	-1000, -11, -1000, 31402, 31527, 5659, 615, 11782, 11782, 11782,
	11782, 11782, 11782, 11782, 11782, 11782, 11782, 11782, 11782, 11782,
	11782, 11782, 11782, 11782, 11782, 11782, 11782, 11782, 11782, 1098,
	11782, 580, 11782, 11782, 11782, 11782, 1101, 921, 224, 975,
	-1000, 1630, 1630, 1630, 31081, 31081, 235, 333, -1000, 11782,
	-1000, 10422, 127, 29638, 11, -1000, -1000, -1000, 8028, 422,
	31025, 23, 6326, -1000, 1673, 802, 1294, 1218, 250, 126,
	118, 117, 11782, 11782, 12122, 12122, 11782, 12462, 11782, 11782,
	7007, 11782, 11782, 11782, 11782, 11782, 11782, -1000, 248, -1000,
	-1000, -1000, -1000, 1672, -1000, -1000, 1668, -1000, 609, 608,
	1662, -1000, 1247, -22, -1000, -1000, 418, 83, 1565, 83,
	16680, -1000, 22685, 22685, -1000, 22685, -1000, -1000, 22685, -1000,
	22685, 22685, -1000, 22685, 22685, 1999, 19220, 740, 1346, 690,
	-58, -28, -1000, 1577, -1000, -1000, -1000, -1000, 151, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 247, 854, 244, 244, 244, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 375, -1000, -1000, 436, 436, 436, -1000,
	-1000, -32, 31025, 579, -1000, 1245, -1000, 396, -34, 489,
	10, 1025, 974, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1706, 7, -1000, -1000,
	7, -1000, -1000, 5659, -1000, -1000, -1000, 20480, 19535, 1564,
	1345, 885, -1000, 1561, 22685, 967, 1078, -1000, 622, 1337,
	-1000, -1000, -1000, -1000, 31025, -1000, 385, -1000, -1000, 31025,
	851, 1184, -1000, 1184, 5, -1000, 30061, 1157, 22685, -1000,
	-1000, -1000, -1000, -1000, 22685, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 195, -1000, -1000, -1000, -1000, 22685, 22685,
	22685, -1000, 243, -36, 418, 10081, 16041, 5659, -1000, 418,
	114, 8381, -1000, 740, 22685, 22685, 22685, -1000, -1000, 1073,
	23630, 1070, 31527, 22685, -1000, 242, 239, 1155, 1153, 22685,
	22685, 23315, 23000, 22685, 791, -58, -1000, 236, -58, -1000,
	234, 22685, 776, -1000, 22685, 22685, 774, 1208, 979, -1000,
	414, 17960, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 393, 685, 685, 586, 586, 586, 586, 1655,
	2186, 2441, 188, 31166, 31166, 31166, 2591, 209, 209, 31166,
	31166, 31166, 31081, 31053, 431, 11782, 11782, 572, 894, 224,
	431, 11782, 431, 431, 431, 431, -1000, 1028, -1000, -1000,
	-1000, -1000, 1244, 219, 12462, 12462, -1000, -1000, -1000, 6667,
	12802, -1000, -1000, -1000, -1000, 218, 11782, -1000, 29667, -196,
	-38, -1000, -1000, 11782, -94, -118, -1000, -1000, 654, -1000,
	11782, -1000, -18, 11782, 11782, 11782, 113, 111, -1000, 564,
	-1000, 561, 558, 555, -1000, 214, 906, 213, 211, 11782,
	-1000, -1000, -1000, 30812, 4111, 110, 1238, -65, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 109, 108, 30784, -65, 107,
	30118, -1000, 12462, 12462, 12462, 6667, 210, 105, 30033, -65,
	30571, 9741, 9741, 9741, 102, 30543, 11782, -65, 3961, 3698,
	3548, -40, -42, -44, 1661, -46, 98, 390, 389, 97,
	661, 1237, 22685, 742, 11782, 859, -1000, 15722, 442, 22685,
	742, 69, -1000, -1000, -1000, 358, 22685, -1000, -1000, -1000,
	120, -1000, 116, 116, 3, -1000, -1000, 20480, -1000, -1000,
	31527, 331, 329, -1000, 1657, -1000, 11782, 22685, 22685, -1000,
	1176, -1000, -1000, 725, -1000, 845, -1000, 15087, -1000, -1000,
	93, -48, 2, 31527, -1000, -1000, -1000, -1000, -1000, 22685,
	308, 22685, -58, 22685, -1000, 1698, -58, 22685, 1332, 1387,
	354, 22685, 851, -1000, 11782, 1654, -1000, -1000, -1000, 7688,
	-1000, -1000, -1000, 22685, -141, -10, -1000, -1000, -1000, -1000,
	-1000, 364, -58, -1000, 1216, -1000, -131, 1162, 165, -181,
	100, 366, -1000, 15403, -1000, 1216, -1000, -1000, -1000, -1000,
	554, 551, 1324, -1000, 1061, -1000, 446, -1000, 838, 11782,
	13458, 208, 206, 850, -1000, 1318, 1014, 1316, 1014, -1000,
	1, 754, -1000, 11782, -1000, 11782, -1000, 537, -1000, -1000,
	534, 414, 1236, 639, -1000, 928, -1000, 11782, 431, 431,
	11782, 12462, 12462, -1000, 431, -1000, -1000, -1000, -1000, -1000,
	1234, 199, 11782, 31527, 4313, 4045, -64, -1000, 9401, -2,
	-1000, 11782, -1000, 29610, -1000, -1000, 326, 1385, -1000, 11782,
	30515, 91, 9061, -1000, 30302, -24, -24, -1000, 1694, 1106,
	864, 815, 712, 1652, -1000, 16999, 420, 916, 29582, 31402,
	31527, -1000, 11782, -1000, -1000, 1231, 11782, -1000, 31402, 31527,
	12462, 12462, 12462, 12462, 12462, 12462, 12462, 12462, 12462, 12462,
	12462, 12462, 12462, 12462, 12462, 12462, 12462, 12462, 12462, 1124,
	12462, 1600, 1600, 1600, -4, 8721, -1000, 1233, 1231, 11782,
	11782, 31527, 88, 87, 86, -1000, 11782, -65, 11782, 11782,
	11782, -1000, -1000, -1000, 81, -1000, 1650, -1000, -1000, -1000,
	-1000, -1000, 647, -1000, -1000, 7347, 31025, -1000, 742, 1474,
	-66, -1000, -1000, -1000, 418, 16680, 16041, 8381, -68, -1000,
	-1000, -1000, 740, -1000, 461, 1648, 79, 31025, -10, -10,
	-1000, -1000, -1000, -1000, -1000, 1199, -1000, 19535, 198, 22685,
	196, -1000, 194, -1000, -1000, 192, 22685, 1133, 354, 18590,
	-1000, 401, 930, 29242, -1000, 1469, 5659, 22685, -1000, 78,
	1213, 1535, -1000, 16041, 1168, 1160, 16041, 1080, 908, 908,
	908, -1000, 191, 324, 366, 4664, 11782, 20165, 911, 46,
	75, 1162, 1213, 22685, 22685, 22685, 1315, -1000, 2212, -1000,
	29214, -70, -1000, 318, 1513, 11782, -1000, -1000, 190, 13458,
	22685, -1000, 1135, 1170, 467, 22685, -1000, 22685, -1000, 22685,
	22685, 22685, -74, -75, 22685, 22685, -1000, 17960, 589, 186,
	1541, 431, 3424, 3203, 11782, 31527, 369, -76, 11782, 11782,
	-1000, -80, -1000, 11782, 320, 31025, -1000, -1000, -1000, 31025,
	11782, 1681, 11782, 73, 71, 70, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 64, -1000, -1000, 28355, 11782, 62,
	-1000, 61, 59, 31025, 1233, 31025, -1000, -1000, 409, 409,
	666, 666, 666, 666, 1600, 1426, 292, 2450, 738, 738,
	738, 2462, 676, 676, 738, 738, 738, 1229, 1120, 185,
	30151, 11782, -87, -1000, -1000, -1000, 31025, 31025, 58, -1000,
	-1000, -1000, -65, 237, 29185, 29157, -1000, 55, -1000, -12,
	-1000, -1000, 207, -58, 742, -1000, -16, -1000, 355, -1000,
	319, 317, -1000, -1000, 1202, -1000, 13458, 173, 22685, 19535,
	1560, 13458, 961, 1139, 354, 18590, -1000, 622, -1000, -1000,
	-1000, 1469, -1000, -1000, 416, 11782, 11782, 1162, 16041, 16041,
	965, 1140, 16041, -1000, -1000, -1000, -1000, 316, 370, 366,
	20165, -1000, 1644, 1161, -95, -1000, -1000, 22685, 167, -1000,
	366, 416, -1000, -1000, -1000, 22685, -1000, 22685, -1000, 5659,
	22685, 1230, 1030, -1000, -1000, 1149, 166, 12462, 22685, -1000,
	852, 13458, 1469, 23, 5659, 1469, 29129, 6326, -109, -111,
	997, -1000, 990, 11782, -1000, 31527, 1014, 1014, -1000, 533,
	530, 529, 527, -1000, -1000, -57, 17645, 1686, 11782, 11782,
	369, -122, -1000, 431, 431, -1000, 28789, -1000, 31025, -1000,
	30302, -1000, -1000, -1000, -1000, 889, -1000, 28761, -1000, -1000,
	-1000, -1000, 12462, 1225, 164, 31527, 28732, -1000, -1000, 11782,
	-1000, -1000, -1000, 1393, 22685, 1452, -1000, -1000, 163, -1000,
	-1000, 895, -124, 13458, -126, 49, -58, -130, 22685, -1000,
	354, 18590, -1000, 1387, -1000, -1000, 22685, 31025, -65, -1000,
	965, -1000, 160, 11782, 16041, -1000, -181, -1000, -138, -1000,
	20165, -1000, 315, -193, -1000, 349, -1000, 366, 159, 22685,
	20165, -1000, -1000, 1082, -1000, -1000, 22685, 1037, -1000, -1000,
	11782, 30151, 158, 1199, 157, -1000, -1000, -1000, -1000, -1000,
	-1000, 1513, -18, -1000, 818, -1000, -1000, 31025, 1483, -1000,
	-1000, 22685, 22685, 156, 152, -1000, 149, 23, -139, -1000,
	227, 431, 431, -1000, -1000, 47, 916, 1533, -1000, 31198,
	12462, 31527, -143, -1000, 28704, 596, -144, 22685, -1000, -1000,
	5986, 22685, 852, -145, -1000, 1199, -1000, 852, 148, 18590,
	-1000, 1133, -59, -1000, 1559, -1000, 22685, 31025, -1000, 366,
	-1000, 1636, -1000, -1000, 1161, -1000, 5002, 20165, 22685, -149,
	-1000, -1000, -1000, 1314, 28676, 1110, 22685, -1000, 22685, 1469,
	44, 22685, 452, 5659, -1000, -1000, 11782, 11782, 11782, 1686,
	-1000, -1000, 1684, -1000, 842, 11782, 31198, -151, -1000, -1000,
	701, -1000, 418, -1000, 147, 1199, 852, -1000, 1199, 13458,
	-1000, 1139, 22685, 141, -159, 20165, -1000, -1000, -1000, 1627,
	-1000, -163, -1000, 1301, -1000, 933, 855, 43, -165, -1000,
	-1000, 121, -1000, 11782, -1000, -170, -171, -24, -1000, -1000,
	42, 11442, 11442, -65, -1000, 16680, -1000, 22685, -1000, 1199,
	-1000, -176, -1000, -1000, -1000, -1000, -1000, 238, -1000, 22685,
	-1000, 959, 945, 691, -1000, -1000, -1000, -1000, -1000, 1110,
	31025, -1000, -1000, 41, -1000, -1000, -1000, 13131, 955, 720,
	30005, -1000, -150, -186, -1000, 852, -1000, -1000, -1000, 1413,
	-1000, 476, 994, 994, 933, 1681, 1582, -1000, -1000, -1000,
	-1000, -1000, -1000, 992, 1199, -1000, 1589, -1000, -1000, 1132,
	-1000, -1000, 11102, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 2013, 2012, 1423, 1498, 2010, 2007, 2006, 1496, 2003,
	2002, 2000, 1998, 1996, 1995, 1481, 1991, 1478, 1475, 1469,
	1988, 80, 86, 1465, 1987, 1983, 1458, 1982, 1981, 1980,
	1979, 1976, 1974, 60, 1972, 1970, 1969, 1968, 1965, 1964,
	147, 161, 1962, 1442, 1959, 1955, 1954, 1953, 1952, 1950,
	1948, 1947, 1935, 1933, 1932, 1930, 1929, 1928, 1919, 1918,
	1917, 1908, 158, 1429, 1425, 1415, 1907, 1905, 1412, 1895,
	1890, 16, 1889, 76, 1887, 29, 145, 2646, 143, 1884,
	1882, 1879, 21, 113, 66, 1874, 50, 1868, 1865, 58,
	35, 22, 15, 1864, 88, 1863, 1862, 1401, 30, 1861,
	1860, 148, 1859, 24, 28, 1746, 155, 153, 118, 124,
	1858, 1853, 1852, 1848, 56, 1847, 8, 1846, 1845, 10,
	77, 12, 1844, 25, 18, 1842, 1841, 131, 1840, 63,
	95, 1414, 107, 134, 297, 1839, 68, 7, 74, 1838,
	1837, 154, 42, 1836, 45, 82, 139, 1835, 90, 159,
	71, 27, 72, 126, 1834, 1833, 1832, 103, 1831, 122,
	97, 1830, 1828, 79, 1827, 138, 140, 1825, 1824, 85,
	1823, 125, 1822, 1821, 160, 146, 119, 1, 46, 64,
	17, 1410, 1409, 130, 75, 34, 23, 1820, 2060, 41,
	1569, 36, 100, 73, 44, 104, 62, 94, 151, 20,
	1819, 1816, 135, 1815, 1814, 1810, 1809, 1808, 96, 1807,
	1806, 69, 150, 13, 32, 47, 84, 48, 70, 83,
	89, 152, 117, 1805, 98, 123, 1804, 93, 1803, 1802,
	1090, 157, 1801, 1800, 1799, 923, 918, 788, 132, 1798,
	1797, 397, 342, 1796, 1794, 78, 1792, 120, 116, 1790,
	144, 136, 31, 1789, 121, 43, 87, 1787, 112, 57,
	0, 2161, 2111, 1785, 137, 81, 1784, 1783, 1782, 1780,
	26, 3, 9, 4, 6, 5, 39, 33, 1779, 1777,
	141, 128, 65, 1776, 156, 1775, 1774, 1764, 49, 1763,
	19, 1758, 14, 1755, 1740, 11, 2, 1729, 1725, 142,
	1723, 92, 1720, 1542, 1718, 149, 1717, 1716, 1508, 55,
	106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 84, 84,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 81, 81, 86, 86, 86,
	88, 88, 85, 85, 80, 80, 5, 5, 258, 258,
	259, 259, 70, 70, 74, 74, 71, 72, 72, 73,
	73, 7, 7, 7, 6, 6, 8, 8, 8, 8,
	8, 8, 15, 16, 16, 16, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 133, 133,
	132, 132, 135, 135, 18, 18, 21, 21, 21, 21,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 226, 226, 225, 20, 200, 200, 23, 158, 158,
	24, 24, 24, 24, 25, 32, 299, 299, 299, 303,
	303, 304, 304, 305, 305, 305, 305, 305, 305, 305,
	301, 301, 30, 30, 30, 30, 69, 35, 35, 35,
	35, 35, 35, 37, 39, 36, 36, 36, 38, 38,
	40, 40, 40, 40, 41, 41, 41, 41, 42, 42,
	113, 113, 251, 250, 250, 256, 256, 256, 111, 111,
	111, 111, 111, 112, 112, 112, 249, 249, 249, 249,
	257, 257, 257, 257, 257, 257, 255, 255, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 55, 55, 62, 62,
	62, 62, 62, 62, 44, 49, 49, 49, 45, 50,
	51, 52, 52, 52, 46, 46, 54, 54, 54, 53,
	59, 59, 59, 59, 56, 56, 56, 57, 57, 60,
	60, 60, 47, 48, 61, 58, 58, 58, 19, 300,
	300, 302, 302, 27, 63, 63, 64, 64, 65, 65,
	65, 65, 11, 11, 12, 12, 114, 114, 115, 115,
	179, 179, 179, 179, 116, 116, 87, 87, 87, 178,
	268, 268, 269, 269, 269, 269, 269, 269, 270, 270,
	270, 270, 270, 270, 270, 266, 266, 267, 264, 264,
	265, 265, 265, 265, 306, 306, 177, 177, 119, 119,
	273, 273, 273, 273, 271, 271, 271, 271, 271, 274,
	272, 275, 275, 275, 275, 275, 212, 212, 212, 67,
	13, 93, 93, 14, 10, 10, 162, 162, 123, 123,
	217, 217, 217, 104, 104, 82, 82, 82, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 163,
	163, 164, 164, 28, 31, 34, 66, 66, 66, 66,
	66, 308, 308, 100, 100, 100, 100, 101, 101, 174,
	174, 175, 175, 176, 176, 176, 95, 94, 96, 96,
	9, 9, 89, 89, 90, 90, 91, 91, 92, 92,
	309, 309, 26, 26, 26, 107, 107, 171, 171, 171,
	173, 173, 172, 172, 172, 148, 148, 148, 68, 128,
	128, 137, 137, 138, 138, 223, 139, 139, 33, 33,
	77, 77, 75, 75, 75, 75, 75, 75, 76, 76,
	78, 78, 78, 78, 78, 78, 78, 281, 281, 281,
	284, 284, 280, 282, 282, 283, 283, 307, 307, 149,
	149, 149, 118, 117, 117, 121, 121, 120, 122, 122,
	216, 216, 216, 146, 146, 146, 146, 165, 165, 166,
	166, 167, 167, 168, 168, 168, 169, 169, 170, 170,
	145, 145, 196, 196, 79, 79, 127, 127, 129, 129,
	186, 186, 186, 187, 187, 185, 185, 185, 185, 218,
	218, 218, 218, 218, 218, 218, 297, 297, 297, 298,
	298, 215, 215, 219, 219, 219, 219, 219, 219, 213,
	213, 213, 213, 214, 214, 224, 224, 152, 152, 152,
	152, 150, 150, 151, 151, 220, 220, 220, 220, 147,
	147, 221, 221, 221, 180, 180, 227, 227, 227, 245,
	245, 126, 126, 126, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 229, 229, 229, 229, 231, 231, 231, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 244, 244, 244, 244,
	244, 232, 232, 239, 239, 240, 240, 241, 242, 233,
	233, 234, 234, 235, 236, 243, 243, 243, 243, 247,
	247, 237, 237, 237, 237, 237, 238, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 160, 160, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 190, 190, 190, 190, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	276, 276, 276, 276, 276, 276, 276, 278, 278, 279,
	279, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	285, 285, 286, 286, 288, 288, 289, 289, 290, 291,
	291, 291, 292, 293, 293, 287, 287, 294, 294, 294,
	295, 295, 296, 296, 296, 296, 296, 202, 202, 202,
	203, 203, 204, 210, 210, 210, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 102, 102, 102, 102, 102, 134, 134, 199,
	199, 197, 197, 197, 201, 201, 153, 153, 246, 246,
	246, 246, 246, 246, 246, 154, 154, 154, 161, 155,
	155, 156, 156, 156, 156, 156, 156, 193, 194, 157,
	157, 157, 195, 195, 205, 209, 209, 208, 207, 207,
	206, 206, 183, 183, 184, 184, 182, 181, 142, 142,
	141, 141, 140, 140, 310, 310, 211, 211, 143, 143,
	144, 136, 136, 222, 222, 222, 222, 130, 130, 109,
	109, 131, 131, 105, 105, 108, 108, 106, 106, 106,
	106, 124, 124, 125, 125, 103, 103, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 248, 248,
	248, 198, 97, 97, 97, 98, 98, 99, 99, 253,
	253, 253, 254, 254, 254, 254, 252, 252, 252, 252,
	252, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 3, 3, 1, 1, 1, 1,
	1, 1, 6, 2, 2, 2, 2, 2, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 3, 4, 5, 3, 2, 6, 3, 4,
	3, 3, 3, 3, 1, 3, 3, 1, 2, 2,
	1, 0, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 1, 1,
	1, 1, 1, 2, 3, 4, 4, 4, 4, 2,
	4, 4, 4, 4, 4, 4, 2, 3, 3, 2,
	4, 5, 4, 5, 2, 3, 3, 4, 2, 4,
	3, 3, 4, 4, 2, 5, 5, 6, 2, 2,
	0, 2, 0, 3, 6, 6, 5, 5, 4, 12,
	4, 12, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 3, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 7,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -23, -24, -25, -26, -27,
	-29, -31, -32, -34, -33, -35, -43, -63, -64, -65,
	-66, -28, -30, -67, -68, 23, 34, 238, 47, 67,
	-9, -10, -11, -12, -13, -14, -283, 93, 97, 106,
	130, 218, 104, 89, 124, 212, 240, 242, 249, -75,
	-77, -36, -37, -38, -39, -69, 260, -44, -45, -46,
	-47, -48, -49, -50, -51, -52, -53, -54, -55, -56,
	-57, -58, -59, -60, -61, 35, 272, 61, 100, 244,
	236, 237, 300, 69, -281, -78, -76, 351, 309, 263,
	325, 332, 253, -79, 281, 317, 354, 281, 139, 82,
	320, -299, -131, 281, 82, -106, -97, 344, 4, -260,
	-262, 20, 21, 23, 33, 34, 35, 40, 44, 47,
	48, 55, 60, 61, 62, 64, 66, 67, 68, 71,
	72, 80, 81, 83, 85, 89, 91, 93, 96, 97,
	99, 104, 105, 106, 112, 113, 118, 120, 125, 130,
	131, 132, 133, 140, 143, 145, 138, 155, 156, 157,
	159, 160, 161, 164, 163, 168, 171, 174, 176, 177,
	178, 181, 179, 183, 184, 186, 185, 191, 193, 194,
	196, 199, 202, 205, 208, 209, 210, 211, 212, 214,
	216, 218, 220, 221, 222, 223, 224, 226, 227, 229,
	230, 231, 232, 233, 236, 234, 235, 237, 238, 239,
	240, 242, 244, 245, 247, 261, 262, 273, 249, 250,
	251, 252, 256, 254, 257, 258, 260, 263, 265, 268,
	271, 272, 274, 277, 275, 270, 280, 282, 283, 284,
	285, 286, 287, 288, 295, 296, 300, 301, 302, 303,
	306, 307, 308, 309, 311, 314, 315, 316, 321, 326,
	327, 328, 329, 330, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 84, 86, 87,
	103, 107, 108, 114, 115, 116, 126, 128, 134, 135,
	144, 146, 147, 148, 149, 150, 152, 166, 180, 190,
	192, 203, 207, 215, 217, 225, 246, 255, 266, 267,
	276, 278, 290, 291, 292, 297, 298, 313, 317, 318,
	-299, 156, 222, -105, -97, 82, 91, 143, 308, 307,
	22, 214, 254, 283, 285, 82, 139, 281, 320, 310,
	-22, 351, -21, -8, -17, -4, -43, -19, -63, -64,
	-65, -23, -18, -33, -26, -68, -15, 23, -252, 4,
	-260, -262, -261, -263, 58, 70, 123, 142, 136, 154,
	158, 167, 169, 182, 204, 206, 243, 264, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 73, 74, 76, 75, 77,
	78, 79, 88, 90, 92, 94, 95, 98, 100, 102,
	109, 110, 111, 119, 121, 122, 124, 127, 129, 137,
	139, 141, 151, 153, 162, 165, 170, 172, 173, 187,
	188, 189, 195, 197, 198, 200, 201, 213, 219, 228,
	241, 253, 259, 269, 279, 281, 289, 293, 294, 299,
	304, 305, 310, 312, 319, 320, 322, 323, 324, 325,
	-97, -97, -97, 218, 22, -303, 22, -304, -305, 69,
	97, 124, 253, 143, 91, 307, 156, 156, -303, -101,
	249, -97, 171, 55, 246, 257, -41, 296, -40, 290,
	-251, -42, -132, 181, -97, -308, 296, 296, -308, -308,
	-100, 296, 293, -101, 4, 82, 259, 181, -307, 281,
	281, 310, 320, -162, 82, 305, -76, -78, -77, -120,
	-121, 304, 151, 102, 201, -75, -77, -281, -256, -249,
	-212, 9, 299, 109, 197, -255, 8, 343, -248, -254,
	5, 7, 342, 4, -260, -262, -261, -62, 257, 34,
	55, 22, 60, 83, 125, 139, 140, 160, 65, 66,
	221, 171, 157, 295, 161, 258, 282, 296, 69, 311,
	286, 105, 4, 82, 181, 259, 290, -284, 226, -280,
	-97, -284, -117, -118, 22, 94, 355, -220, -105, 198,
	-144, 351, -3, -220, 134, -105, -108, 134, -105, -97,
	-220, 134, 293, 355, -131, -124, -97, -182, -181, 353,
	122, -188, -190, 342, 343, 337, 187, 331, -202, -192,
	-205, 103, 246, 351, -105, -191, 356, 9, -278, -77,
	29, -203, -204, 49, -97, 7, 8, 5, 6, -103,
	-229, -198, -238, 299, 109, 189, -276, -277, 4, -260,
	-253, -230, -240, -234, -237, 152, 58, 74, 75, 78,
	76, 79, 259, 310, 50, 28, 107, 108, 207, 215,
	278, 297, 298, 134, 190, 135, 56, 126, 166, 96,
	37, 39, 41, 42, 51, 52, 84, 86, 87, 114,
	115, 116, 144, 146, 147, 148, 149, 150, 192, 225,
	266, 276, 291, 292, 318, -261, -241, -242, -235, -236,
	-243, -188, 122, 351, -141, -142, -181, -182, 122, 153,
	153, -221, -220, -97, 134, -109, 134, -108, -133, 134,
	-132, -133, 134, -124, 134, -226, -225, -254, 317, 281,
	139, -200, 351, -158, 351, -97, 22, 197, 355, -188,
	-188, 197, -97, 2, 261, 351, -41, 53, 296, -175,
	-176, -94, -95, -96, 155, 220, 224, 330, 293, 336,
	122, -256, -113, 88, -135, 353, -174, -175, -174, 293,
	-101, -147, -220, -132, 134, -97, -132, 139, -97, 134,
	-120, -121, -146, -165, -166, 170, 111, 195, -149, 22,
	94, -149, -149, 44, 352, 352, 8, 7, 7, -62,
	22, -258, -255, 9, 261, 221, 258, 55, 122, -300,
	197, 122, 122, 122, 122, 122, 221, 258, 119, 295,
	122, 155, 220, 273, 281, 320, 122, 122, 330, 355,
	-284, -125, 351, -136, -222, -188, 344, -136, -144, 344,
	-105, 351, -143, -211, -188, 88, -84, 234, -83, 21,
	23, 97, 315, 103, 270, 287, 250, 270, 287, 250,
	234, 103, 356, 234, 234, 103, -258, -106, 355, -252,
	344, -259, -258, 10, 11, 57, 33, 342, 343, 344,
	345, 117, 346, 347, 340, 341, 339, 334, 335, 336,
	63, 175, 248, 13, 14, 15, 26, 200, 169, 331,
	136, 264, 337, 16, 17, 18, 154, 36, 137, -102,
	-110, -188, -188, -188, -188, -188, 206, -140, -183, 349,
	-77, 351, -77, -188, -134, 7, -77, -197, 349, -206,
	-188, -141, 351, 5, 351, 5, -285, 326, 119, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 217, -247, 321,
	-247, -247, -231, 351, -231, -232, 351, -231, 327, 332,
	351, 274, 352, -130, -105, -142, -221, -107, -105, -107,
	260, -97, 30, 103, -86, 355, 48, 239, 103, -86,
	355, 103, -86, 103, 103, 352, 355, -220, 134, -108,
	30, -199, -227, -228, -230, -239, -233, -237, -238, 40,
	46, 45, 288, 180, 255, 267, 313, 38, 196, 145,
	144, 146, 147, 148, 149, 150, 266, 37, 225, 115,
	116, 114, 96, 87, 86, 192, 42, 41, -241, -242,
	-235, -236, 84, 291, 292, 152, 39, 52, 51, 318,
	276, -134, -188, -299, -305, -299, -40, -251, -134, 30,
	-175, 355, 168, -112, 174, 186, 131, 198, 328, -257,
	5, 4, -198, -212, 88, 171, -238, -250, 88, -256,
	-250, 88, 72, 353, -252, -101, -86, 355, 351, -119,
	187, -282, 325, -119, 351, -98, 134, -97, -282, 187,
	-146, -166, -165, -167, -188, 22, -170, 113, 183, -188,
	-190, -76, -76, -76, -122, -216, -188, 219, 139, -132,
	22, 262, -251, -302, 119, -299, -251, -251, -251, -251,
	-251, 257, -22, 119, -97, 168, -251, -251, 281, 139,
	281, -280, 30, -124, -127, 355, 122, 30, 4, -127,
	-105, 355, 352, 355, 293, -163, 65, 59, -178, 134,
	59, -264, -97, 65, -265, 54, 305, 219, 121, -163,
	65, -163, 65, 65, -220, 33, -33, 122, 33, -33,
	122, 293, -108, -252, 293, 293, -220, -224, 333, -97,
	-224, 355, -245, -227, -244, 230, 231, 229, 233, 232,
	-227, -252, 290, -188, -188, -188, -188, -188, -188, -188,
	-188, -188, -188, -188, -188, -188, -188, -188, -188, -188,
	-188, -188, -188, -188, -188, 169, 136, 264, 36, 137,
	-188, 293, -188, -188, -188, -188, 179, 187, 189, 299,
	109, 306, 94, 193, -310, 279, 32, -195, -77, 351,
	-210, 27, 269, 22, -202, 246, 351, -183, -188, -184,
	-134, 352, 352, 355, -134, -201, 350, -197, -209, -208,
	322, 352, -134, 319, 22, 94, 344, 7, -159, 329,
	178, 85, 132, 177, -160, 252, -286, 112, 127, 351,
	352, 352, 352, -188, -188, -153, -246, -134, 4, 329,
	178, 85, 132, 177, 252, -153, -154, -188, -134, -155,
	-189, -190, 342, 343, 337, 351, 246, -156, -188, -134,
	-188, 43, 165, 294, -157, -188, 122, -134, -188, -188,
	-188, -134, -134, -134, 351, 7, 7, 290, 290, 7,
	122, 352, 355, -180, 323, -171, -33, 351, 88, 30,
	-171, -137, -138, -223, -139, -105, 351, -97, -97, -108,
	-109, -132, -133, -133, -124, -22, -225, 103, -21, 352,
	355, -126, 29, -159, 351, 352, 355, 293, 122, 352,
	296, -176, -111, 224, 268, 235, 256, 355, -252, -220,
	-114, -124, -115, -97, -179, -178, -266, -267, -264, 139,
	305, 110, 30, 103, -93, 211, 30, 197, 187, -89,
	284, 103, -168, -248, 351, 343, -169, 246, 247, 355,
	-82, 31, 92, 159, -105, -301, -97, 257, -22, -105,
	-108, -105, 351, 352, -180, -222, -129, -218, 349, -220,
	-105, -77, -219, 351, -252, -180, 352, -211, -83, -105,
	-97, -97, 187, -178, 134, -88, 187, -227, -97, 351,
	351, 159, 159, -97, -97, 134, -97, 134, -97, -97,
	-84, 234, -33, 351, -33, 351, -97, 234, -97, -105,
	234, -70, 133, 193, -73, 325, -258, 330, -188, -188,
	293, -310, 279, -195, -188, 179, 189, 299, 109, 306,
	94, 193, 122, 351, -189, -189, -134, -192, 351, -134,
	350, 359, 352, -188, 350, 350, 355, -207, -208, 98,
	-188, -121, 355, -120, -188, -134, -134, 352, 352, 293,
	293, 293, 293, 351, -291, 205, 351, 351, -188, 30,
	355, 352, 122, 352, 352, -161, 213, 352, 10, 11,
	342, 343, 344, 345, 117, 346, 347, 340, 341, 339,
	334, 335, 336, 63, 175, 248, 13, 14, 15, 154,
	137, -189, -189, -189, -134, 351, 352, -193, -194, 122,
	119, 30, -157, -157, -157, 352, 122, -134, 355, 355,
	355, 352, 352, 352, 7, 352, 355, 352, 330, 330,
	352, 274, 122, -105, -148, 241, -188, -148, -173, 197,
	-130, 317, -97, -148, -128, 355, 122, 336, -130, -86,
	-86, -86, -220, -227, 349, 349, 7, -188, -301, -301,
	-94, 303, 62, 224, -256, 352, 352, 355, -98, 139,
	-98, -33, -132, 5, -33, -105, 103, -90, 99, -309,
	336, -97, -169, -188, -216, -105, 356, 355, -224, -21,
	-145, 127, -224, 355, 70, -152, 158, 182, 123, 167,
	243, 142, 7, -22, -185, 356, 351, -215, 332, -77,
	-219, -218, -145, 293, 293, 103, 187, 314, -268, -265,
	-188, -123, -217, -97, -279, 351, -276, -277, -103, 351,
	351, -81, 97, 260, -164, 103, -86, 103, -86, 293,
	-163, 65, -134, -134, 293, 293, -73, 122, 280, 199,
	-188, -188, -189, -189, 122, 351, -188, -199, 26, 26,
	352, -134, 352, 355, -184, -188, 352, -197, 100, -188,
	289, 352, 319, -121, -121, -121, 5, 178, 132, 177,
	-160, 177, -160, -160, 7, -292, -97, 351, 323, -120,
	352, -245, -227, -188, -193, -188, -245, -227, -189, -189,
	-189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
	-189, -189, -189, -189, -189, -189, -189, 94, 187, 193,
	-189, 355, -134, 352, -194, -193, -188, -188, -227, 352,
	352, 352, -134, -188, -188, -188, 352, 7, 274, -136,
	188, -148, 64, 352, -180, -138, -129, -211, 352, 350,
	7, 7, 352, -116, 138, -179, 351, -98, 351, 351,
	-119, 351, -97, -91, 164, -309, -255, -282, 198, 352,
	-82, -252, -97, 352, -196, 129, 44, -218, 158, 158,
	-218, -152, 158, -150, 204, -150, -150, -297, 351, 350,
	-215, -252, 349, 357, -134, -214, -213, 30, -97, 202,
	352, -196, -97, -97, -178, 103, -269, 65, -270, 57,
	110, 69, 187, 189, 305, 219, 54, 88, 228, 352,
	352, 355, -104, -141, 57, -104, -188, 351, -123, -124,
	187, 88, 187, 88, 81, 301, -97, -97, -105, -97,
	-97, 352, 352, -97, -105, -259, 290, 351, 26, 26,
	-188, -199, 352, -188, -188, 352, -188, 350, -188, 5,
	-188, 352, 352, 352, 352, -293, -97, -188, 352, 352,
	352, -194, 122, 94, 193, 351, -188, 352, 352, 355,
	352, 352, 352, -172, 351, 197, -33, -148, 336, 350,
	350, 137, -123, 351, -124, -114, 30, -123, 197, -92,
	163, -309, -255, -89, -82, -288, 324, -188, -134, -218,
	-218, -151, 312, 197, 158, -218, 350, 352, -298, 7,
	-215, -214, 7, -187, -186, 120, 185, 352, -97, 351,
	-215, -288, -178, -97, -252, -97, 110, 134, 189, 159,
	351, -189, -105, -177, -306, 68, 277, -217, -82, -252,
	-82, 352, -134, 352, 352, 189, 189, -188, -227, -86,
	-86, 293, 293, 293, 293, -191, -103, -97, -72, -71,
	5, -188, -188, 352, 352, -121, -287, 210, 352, -189,
	122, 351, -199, 352, -188, 95, -124, 65, -144, -77,
	351, 208, 352, -123, 352, 352, -33, 352, -105, -309,
	-255, -90, -289, -290, -97, -151, 351, -188, -218, -185,
	352, 355, -214, 350, 355, 358, 336, -215, 351, -124,
	-213, -270, -98, 187, -188, -99, 351, -116, 351, -104,
	-121, 228, -85, 57, -97, -97, 351, 351, 351, 355,
	352, -74, 336, 352, -121, 44, -189, -199, 352, 352,
	307, 188, 352, -97, -97, -177, 352, -116, -177, 351,
	-255, -91, 355, 30, -124, -215, 7, -186, -252, 349,
	-214, -124, 352, 103, 352, -273, 176, -97, -124, -82,
	352, -105, -80, 312, -252, -134, -134, -134, -71, 5,
	-294, 223, 247, -134, 352, 260, -180, 351, -116, -177,
	-116, -123, -92, -290, -292, 352, -213, 7, 352, 110,
	-271, -274, -272, 197, 123, 209, 265, 352, 352, -119,
	-188, 352, 352, -121, 352, -295, -296, 36, 302, 72,
	-188, -295, -137, -124, -116, 352, 350, -97, -272, 197,
	-274, 197, 307, 91, -273, 352, -296, 216, 118, 246,
	216, 118, -180, 352, -177, -275, 184, 239, 48, 260,
	-275, -271, 26, -87, 48, 239, -116, 20, 189, 88,
	-296,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 0, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 458,
	-2, 167, 168, 169, 170, 171, 0, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 402, 0, 402, 402, 406,
	0, 0, 488, 367, 485, -2, 496, 0, 0, 0,
	0, 0, 494, 472, 0, 0, -2, 0, 0, 0,
	0, 0, 146, 0, 1033, 961, 967, 968, 992, 993,
	994, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	0, 0, 0, 0, 963, 1033, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 0, 0, 0, 0, 0,
	114, 0, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 116, 117, 118, 119, 0, 278, 1006,
	1007, 1008, 1009, 1010, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	136, 139, 140, 1092, 142, 0, 149, 150, 151, 153,
	154, 155, 156, 157, 158, 159, 0, 0, 0, 395,
	1119, 408, -2, 1021, 1207, 1125, 176, 1146, 184, 1213,
	0, 187, 192, -2, 110, 410, 401, 410, 398, 399,
	400, 403, 0, 393, 162, 163, 164, 165, 0, 487,
	0, 0, 0, 0, 0, 366, -2, 468, 469, -2,
	0, 491, 491, 491, 0, 0, 469, 0, 166, 195,
	196, 197, 206, 207, 208, 209, 356, 0, 358, 216,
	217, 988, 0, 1002, 1003, 1004, 1005, 236, 0, 0,
	0, 239, 0, 249, 280, 0, 0, 0, 0, 0,
	256, 0, 259, 0, 0, 264, 268, 0, 0, 274,
	0, 0, 238, 240, 241, 242, 0, 477, 1098, 480,
	974, 478, 0, 0, 493, 492, 0, 473, 575, 0,
	524, 0, 2, 0, 1189, 575, 0, 1189, 966, 0,
	0, 1189, 0, 0, 147, 148, 971, 969, 970, 0,
	0, 84, 683, 0, 0, 0, 0, 0, 0, 775,
	777, 1181, 1207, 0, 779, 780, 0, 782, 784, 785,
	0, 788, 789, 931, 963, 977, 978, 979, 980, 0,
	0, 983, 0, 985, 986, 987, 831, 798, -2, -2,
	975, 611, 612, 613, 614, -2, 1221, 802, 804, 806,
	808, 809, 810, 811, 0, 1165, 1182, 1183, 1203, 1204,
	1212, 1216, 1217, 1189, 1200, 1190, 1177, 1187, 1198, 1039,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1001, 645, 646, 651, 652,
	654, 85, 0, 0, 964, 940, 938, 939, 0, 0,
	0, 0, 581, 98, 1189, 59, 1189, 959, 59, 1189,
	108, 59, 1189, 106, 1189, 0, 131, 133, 1219, 0,
	0, 0, 0, 137, 0, 141, 143, 0, 0, 283,
	394, 0, 407, 172, 0, 0, 175, 1176, 1146, 178,
	411, 413, 414, 415, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 190, 111, 0, 396, 409, 397, 0,
	405, 59, 579, 339, 1189, 484, 339, 996, 484, 1189,
	-2, 0, 464, 505, 506, 0, 0, 0, 0, 489,
	490, 0, 0, 0, 460, 461, 357, 990, 989, 237,
	239, 244, 68, 69, 0, 257, 265, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 258, 266, 486, 0,
	0, 0, 270, 271, 0, 0, 0, 0, 243, 0,
	479, 0, 0, 527, 951, 955, 956, 527, 525, 576,
	577, 0, 0, 948, 946, 947, 36, 390, 38, 0,
	390, 390, 0, 0, 0, 0, 288, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 566, 962, 0, 936,
	937, 566, 70, 0, 0, 0, 0, 866, 867, 868,
	869, 870, 871, 874, 875, 872, 873, 876, 877, 878,
	0, 0, 0, 879, 880, 881, 0, 0, 883, 0,
	885, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	882, 688, 689, 690, 712, 713, 0, 776, 942, 935,
	778, 0, -2, 887, 0, 781, 786, 787, 0, 0,
	930, -2, 0, 982, 0, 680, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 910, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 648, 659,
	656, 655, 632, 0, 631, 629, 0, 633, 0, 0,
	0, 81, 0, 0, 957, 941, 585, 0, 435, 0,
	0, 582, 0, 0, 100, 0, 57, 58, 0, 102,
	0, 0, 104, 0, 0, 486, 0, 0, 1189, 0,
	486, 0, 889, 593, 594, 595, 596, 597, 680, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 642, 0, 617, 617, 617, 634, 635, 643, 644,
	649, 650, 661, 662, 664, 666, 660, 660, 660, 657,
	658, 0, 887, 0, 152, 0, 173, 0, 0, 0,
	179, 0, 0, 416, 203, 204, 205, 418, 419, 185,
	210, 211, 212, 213, 214, 215, 0, 180, 182, 193,
	181, 183, 186, 0, 112, 404, 359, 0, 297, 0,
	0, 362, 483, 0, 0, 0, 1189, 995, 423, 0,
	467, 503, 504, 507, 511, 512, 515, 518, 519, 509,
	683, 474, 475, 476, 497, 498, 377, 0, 0, 245,
	246, 247, 248, 250, 0, 279, 251, 252, 253, 254,
	255, 260, 262, 486, 267, 269, 272, 273, 0, 0,
	0, 481, 0, 0, 585, 0, 0, 0, 954, 585,
	0, 0, 950, 0, 0, 0, 0, 389, 40, 1189,
	0, 61, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 287,
	0, 0, 0, 965, 0, 0, 0, 73, 0, 972,
	80, 0, 684, 589, 590, 636, 637, 638, 639, 640,
	685, 686, 0, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, -2, -2, -2, 704, 705, 706, -2,
	-2, -2, 710, 711, -2, 884, 886, 0, 945, 0,
	-2, 0, -2, -2, -2, -2, 724, 0, 726, 729,
	731, 733, 0, 0, 0, 0, 944, 743, 922, 0,
	0, 863, 864, 865, 728, 0, 0, 943, 934, 0,
	0, -2, 783, 0, 0, 0, 893, 894, 929, 925,
	0, 790, 496, 0, 0, 0, 0, 0, 991, 667,
	668, 669, 670, 671, 672, 681, 841, 0, 0, 0,
	803, 805, 807, 0, 0, 0, 0, 897, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 887, 907, 0,
	0, 746, 0, 0, 0, 0, 1207, 0, 887, 915,
	0, 0, 0, 0, 0, 887, 0, 921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 447, 0, 447, 437, 0, 0, 0,
	447, 450, 451, 453, 454, 0, 0, 583, 99, 960,
	59, 109, 59, 59, 107, 115, 132, 0, 134, 135,
	0, 586, 588, 598, 0, 138, 0, 0, 0, 174,
	0, 412, 417, 0, 200, 0, 202, 0, 113, 580,
	0, 0, 296, 971, 298, 300, 301, 302, 303, 996,
	0, 996, 0, 0, 360, 0, 0, 0, 0, 425,
	431, 0, 0, 513, 0, 0, 510, 516, 517, 0,
	500, 375, 376, 0, 0, 281, 160, 261, 263, 275,
	276, 566, 486, 973, 521, 952, 566, 528, 486, 538,
	575, 552, 543, 0, 953, 521, 578, 949, 39, 379,
	0, 0, 0, 42, 1189, 50, 0, 311, 0, 0,
	0, 0, 0, 392, 51, 1189, 59, 1189, 59, 52,
	37, 390, 284, 0, 285, 0, 383, 0, 378, 381,
	0, 80, 0, 0, 67, 0, 71, 0, -2, -2,
	0, 0, 0, 744, -2, 725, 727, 730, 732, 734,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	932, 935, -2, 888, 891, 892, 0, 0, 926, 0,
	0, 0, 0, 495, 496, 496, 496, 796, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	0, 814, 0, 815, 816, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 750, 751, 0, 0, 818, 913, 914, 0,
	0, 0, 0, 0, 0, 823, 0, 920, 0, 0,
	0, 827, 828, 829, 0, 615, 0, 641, 663, 665,
	653, 82, 0, 958, 92, 0, 584, 432, 447, 0,
	0, 439, 436, 434, 585, 0, 0, 0, 0, 101,
	103, 105, 0, 890, 0, 0, 0, 888, 144, 145,
	177, 198, 199, 201, 194, 305, 338, 0, 0, 996,
	0, 294, 339, 361, 363, 0, 0, 427, 431, 0,
	430, 484, 0, 0, 499, 377, 0, 0, 277, 0,
	523, 0, 526, 0, 0, 0, 0, 0, 572, 572,
	572, 570, 546, 0, 552, 0, 0, 564, 0, -2,
	543, 0, 523, 0, 0, 0, 0, 60, 309, 328,
	0, 0, 368, 374, 374, 0, 799, 800, 0, 0,
	0, 44, 0, 0, 0, 0, 48, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	687, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	923, 0, 858, 0, 0, 934, -2, 895, 924, 928,
	0, 791, 0, 0, 0, 0, 984, 673, 674, 675,
	676, 677, 678, 679, 0, 839, 840, 844, 0, 0,
	801, 0, 0, 896, 906, 908, 747, 748, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, -2, -2,
	-2, 765, 766, 767, -2, -2, -2, 0, 0, 0,
	909, 0, 0, 861, 911, 912, 917, 918, 0, 820,
	821, 822, 919, 0, 0, 0, 647, 0, 83, 445,
	446, 433, 444, 0, 447, 452, 449, 455, 0, 591,
	0, 0, 599, 292, 0, 299, 0, 0, 0, 297,
	0, 0, 0, 429, 431, 0, 422, 423, 508, 514,
	501, 377, 161, 482, 835, 0, 0, 529, 0, 0,
	0, 0, 0, 567, 571, 568, 569, 0, 0, 552,
	564, 535, 0, 0, 0, 542, 563, 0, 562, 551,
	-2, 835, 385, 387, 41, 0, 310, 0, 313, 0,
	0, 0, 0, 319, 320, 0, 0, 0, 0, 330,
	337, 0, 377, 976, 0, 377, 0, 0, 0, 0,
	0, 56, 0, 0, 391, 0, 59, 59, 380, 0,
	0, 0, 0, 384, 382, 72, 0, 0, 0, 0,
	-2, 0, 737, -2, -2, 857, 888, 933, 927, 981,
	496, 792, 794, 795, 682, 846, 843, 0, 830, 812,
	813, 905, 0, 0, 0, 0, 888, 860, 819, 0,
	825, 826, 616, 0, 0, 0, 438, 448, 0, 592,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 420,
	431, 0, 424, 425, 502, 470, 0, 522, 520, 554,
	0, 556, 0, 0, 0, 558, 538, 547, 0, 549,
	564, 540, 0, 0, 533, 0, 532, 552, 560, 0,
	0, 471, 43, 0, 314, 315, 996, 0, 318, 321,
	0, 323, 998, 305, 0, 334, 335, 369, 370, 373,
	371, 374, 496, 332, 0, 45, 46, 55, 63, 47,
	53, 0, 0, 0, 0, 565, 0, 0, 0, 77,
	75, -2, -2, 738, 859, 0, 496, 0, 832, -2,
	0, 0, 0, 862, 0, 0, 0, 0, 456, 457,
	0, 0, 337, 0, 327, 305, 295, 337, 0, 0,
	426, 427, 834, 836, 0, 555, 0, 574, 557, 552,
	548, 0, 545, 536, 0, 537, 0, 564, 0, 0,
	544, 312, 316, 0, 0, 343, 0, 331, 0, 377,
	0, 0, 65, 0, 386, 388, 0, 0, 0, 0,
	79, 76, 0, 793, 849, 0, -2, 0, 773, 824,
	0, 441, 585, 443, 0, 305, 337, 293, 305, 0,
	428, 429, 0, 0, 0, 0, 550, 534, 530, 0,
	541, 0, 561, 0, 322, 348, 0, 0, 0, 372,
	791, 339, 49, 0, 62, 0, 0, 496, 78, 74,
	0, 0, 0, 845, 774, 0, 442, 0, 325, 305,
	364, 0, 421, 837, 838, 573, 539, 0, 559, 0,
	324, 344, 345, 0, 340, 341, 342, 997, 336, 343,
	64, 289, 291, 0, 842, 847, 850, -2, 1149, 1030,
	0, 848, 585, 0, 326, 337, 531, 317, 346, 0,
	347, 0, 0, 0, 348, 0, 0, 852, 853, 854,
	855, 856, 440, 308, 305, 349, 0, 352, 353, 0,
	350, 333, 0, 304, 306, 307, 365, 351, 354, 355,
	851,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:824
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:830
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:959
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:969
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = nil
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = DropCascade
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = DropRestrict
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = DropDefault
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1032
		{
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return unimplemented(sqllex, "alter using")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1036
		{
		}
	case 66:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.str = ""
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1109
		{
		}
	case 81:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1160
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1275
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1481
		{ /* SKIP DOC */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{ /* SKIP DOC */
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			return unimplemented(sqllex, "set local")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			return unimplemented(sqllex, "set from current")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1570
		{
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = Low
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = Normal
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = High
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.str = "client_encoding"
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1846
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1878
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1882
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1886
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1936
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1940
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1946
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1950
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1954
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1958
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = DropDefault
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return unimplemented(sqllex, "match full")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return unimplemented(sqllex, "match partial")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return unimplemented(sqllex, "match simple")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2251
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			return unimplemented(sqllex, "no action")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2273
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			return unimplemented(sqllex, "action set null")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			return unimplemented(sqllex, "action set default")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = true
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = false
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2388
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = Ascending
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = Descending
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2442
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2443
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = true
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = false
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.str = ""
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.str = ""
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = ReadOnly
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = ReadWrite
		}
	case 420:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.str = ""
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.str = ""
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.str = ""
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.str = ""
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2661
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2662
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 448:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2988
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2989
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2997
		{
			return unimplemented(sqllex, "cte")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3001
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3005
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3009
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = true
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = false
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = false
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = true
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3033
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &From{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3247
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3292
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3309
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = nil
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.str = astFullJoin
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.str = astLeftJoin
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.str = astRightJoin
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.str = astInnerJoin
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3485
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3584
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3599
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3680
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = nil
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3841
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3873
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = year
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = month
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = day
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = hour
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = minute
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = month
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = hour
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = minute
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = minute
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = nil
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = second
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4008
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4043
		{
			return unimplemented(sqllex, "at tz")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4277
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4503
		{
			return unimplemented(sqllex, "variadic")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4504
		{
			return unimplemented(sqllex, "variadic")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4527
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			return unimplemented(sqllex, "func_application")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4548
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			return unimplemented(sqllex, "current role")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			return unimplemented(sqllex, "current user")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			return unimplemented(sqllex, "session user")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			return unimplemented(sqllex, "user")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4605
		{
			return unimplemented(sqllex, "treat")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4649
		{
			return unimplemented(sqllex, "within group")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4650
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = Window(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.str = ""
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4747
		{
			return unimplemented(sqllex, "frame range")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4748
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4749
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4753
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4759
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4760
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4761
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4762
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4763
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Any
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = Some
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = All
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = Plus
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = Minus
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = Mult
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = Div
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = FloorDiv
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = Mod
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = Bitand
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = Bitor
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = Pow
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = Bitxor
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = LT
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = GT
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = EQ
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = LE
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = GE
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = NE
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = Like
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = NotLike
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = ILike
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = NotILike
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5127
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5128
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5246
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5290
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5326
		{
			return unimplemented(sqllex, "func const")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5335
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = DNull
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.str = ""
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
