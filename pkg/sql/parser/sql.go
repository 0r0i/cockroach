// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:311
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const OID = 57522
const ON = 57523
const ONLY = 57524
const OR = 57525
const ORDER = 57526
const ORDINALITY = 57527
const OUT = 57528
const OUTER = 57529
const OVER = 57530
const OVERLAPS = 57531
const OVERLAY = 57532
const PARENT = 57533
const PARTIAL = 57534
const PARTITION = 57535
const PASSWORD = 57536
const PLACING = 57537
const POSITION = 57538
const PRECEDING = 57539
const PRECISION = 57540
const PREPARE = 57541
const PRIMARY = 57542
const PRIORITY = 57543
const RANGE = 57544
const READ = 57545
const REAL = 57546
const RECURSIVE = 57547
const REF = 57548
const REFERENCES = 57549
const REGCLASS = 57550
const REGPROC = 57551
const REGPROCEDURE = 57552
const REGNAMESPACE = 57553
const REGTYPE = 57554
const RENAME = 57555
const REPEATABLE = 57556
const RELEASE = 57557
const RESTRICT = 57558
const RETURNING = 57559
const REVOKE = 57560
const RIGHT = 57561
const ROLLBACK = 57562
const ROLLUP = 57563
const ROW = 57564
const ROWS = 57565
const RSHIFT = 57566
const STATUS = 57567
const SAVEPOINT = 57568
const SEARCH = 57569
const SECOND = 57570
const SELECT = 57571
const SERIAL = 57572
const SERIALIZABLE = 57573
const SESSION = 57574
const SESSION_USER = 57575
const SET = 57576
const SHOW = 57577
const SIMILAR = 57578
const SIMPLE = 57579
const SMALLINT = 57580
const SMALLSERIAL = 57581
const SNAPSHOT = 57582
const SOME = 57583
const SPLIT = 57584
const SQL = 57585
const START = 57586
const STDIN = 57587
const STRICT = 57588
const STRING = 57589
const STORING = 57590
const SUBSTRING = 57591
const SYMMETRIC = 57592
const SYSTEM = 57593
const TABLE = 57594
const TABLES = 57595
const TEMPLATE = 57596
const TEXT = 57597
const THEN = 57598
const TIME = 57599
const TIMESTAMP = 57600
const TIMESTAMPTZ = 57601
const TO = 57602
const TRAILING = 57603
const TRANSACTION = 57604
const TREAT = 57605
const TRIM = 57606
const TRUE = 57607
const TRUNCATE = 57608
const TYPE = 57609
const UNBOUNDED = 57610
const UNCOMMITTED = 57611
const UNION = 57612
const UNIQUE = 57613
const UNKNOWN = 57614
const UPDATE = 57615
const UPSERT = 57616
const USER = 57617
const USERS = 57618
const USING = 57619
const VALID = 57620
const VALIDATE = 57621
const VALUE = 57622
const VALUES = 57623
const VARCHAR = 57624
const VARIADIC = 57625
const VIEW = 57626
const VARYING = 57627
const WHEN = 57628
const WHERE = 57629
const WINDOW = 57630
const WITH = 57631
const WITHIN = 57632
const WITHOUT = 57633
const YEAR = 57634
const ZONE = 57635
const NOT_LA = 57636
const WITH_LA = 57637
const AS_LA = 57638
const POSTFIXOP = 57639
const UMINUS = 57640

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5097

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	317, 27,
	-2, 396,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 369,
	181, 369,
	217, 369,
	315, 369,
	317, 369,
	-2, 379,
	-1, 59,
	1, 372,
	181, 372,
	217, 372,
	315, 372,
	317, 372,
	-2, 378,
	-1, 68,
	1, 27,
	317, 27,
	-2, 396,
	-1, 404,
	1, 177,
	317, 177,
	-2, 921,
	-1, 440,
	155, 406,
	179, 406,
	-2, 375,
	-1, 443,
	155, 405,
	179, 405,
	-2, 373,
	-1, 567,
	155, 405,
	179, 405,
	-2, 376,
	-1, 625,
	314, 857,
	-2, 850,
	-1, 626,
	314, 858,
	-2, 851,
	-1, 632,
	5, 552,
	314, 552,
	-2, 1022,
	-1, 656,
	5, 512,
	-2, 996,
	-1, 657,
	5, 546,
	314, 546,
	-2, 998,
	-1, 658,
	5, 520,
	-2, 999,
	-1, 659,
	5, 519,
	-2, 1000,
	-1, 660,
	5, 546,
	314, 546,
	-2, 1003,
	-1, 661,
	5, 546,
	314, 546,
	-2, 1004,
	-1, 662,
	5, 547,
	-2, 1007,
	-1, 663,
	5, 506,
	-2, 1008,
	-1, 664,
	5, 506,
	-2, 1009,
	-1, 665,
	5, 528,
	-2, 1013,
	-1, 666,
	5, 507,
	-2, 1018,
	-1, 667,
	5, 508,
	-2, 1019,
	-1, 668,
	5, 509,
	-2, 1020,
	-1, 669,
	5, 510,
	-2, 1021,
	-1, 670,
	5, 506,
	-2, 1025,
	-1, 671,
	5, 513,
	-2, 1030,
	-1, 672,
	5, 511,
	-2, 1033,
	-1, 673,
	5, 544,
	314, 544,
	-2, 1035,
	-1, 674,
	5, 548,
	-2, 1038,
	-1, 675,
	5, 550,
	-2, 1039,
	-1, 676,
	5, 543,
	314, 543,
	-2, 1043,
	-1, 930,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	184, 379,
	270, 379,
	-2, 668,
	-1, 939,
	314, 835,
	-2, 823,
	-1, 1149,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 587,
	-1, 1150,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 588,
	-1, 1151,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 589,
	-1, 1155,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 593,
	-1, 1156,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 594,
	-1, 1157,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 595,
	-1, 1160,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 600,
	-1, 1166,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 602,
	-1, 1169,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 607,
	-1, 1170,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 608,
	-1, 1171,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 609,
	-1, 1193,
	189, 739,
	-2, 742,
	-1, 1222,
	114, 755,
	314, 857,
	-2, 850,
	-1, 1223,
	114, 756,
	-2, 992,
	-1, 1224,
	114, 757,
	-2, 919,
	-1, 1225,
	114, 758,
	-2, 890,
	-1, 1226,
	114, 759,
	-2, 905,
	-1, 1227,
	114, 760,
	-2, 918,
	-1, 1228,
	114, 761,
	-2, 960,
	-1, 1378,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	184, 379,
	270, 379,
	-2, 445,
	-1, 1382,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 601,
	-1, 1383,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 603,
	-1, 1388,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 604,
	-1, 1404,
	189, 738,
	-2, 741,
	-1, 1578,
	1, 446,
	67, 446,
	97, 446,
	115, 446,
	119, 446,
	121, 446,
	133, 446,
	139, 446,
	144, 446,
	152, 446,
	155, 446,
	166, 446,
	179, 446,
	181, 446,
	184, 446,
	217, 446,
	219, 446,
	270, 446,
	277, 446,
	287, 446,
	288, 446,
	296, 446,
	315, 446,
	317, 446,
	318, 446,
	-2, 445,
	-1, 1580,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 605,
	-1, 1585,
	142, 0,
	-2, 619,
	-1, 1595,
	189, 740,
	-2, 743,
	-1, 1629,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 645,
	-1, 1630,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 646,
	-1, 1631,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 647,
	-1, 1635,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 651,
	-1, 1636,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 652,
	-1, 1637,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 653,
	-1, 1749,
	142, 0,
	-2, 620,
	-1, 1752,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 623,
	-1, 1753,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 625,
	-1, 1846,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 624,
	-1, 1847,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 626,
	-1, 1854,
	142, 0,
	-2, 654,
	-1, 1905,
	142, 0,
	-2, 655,
	-1, 1961,
	35, 0,
	127, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 995,
}

const sqlNprod = 1138
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25592

var sqlAct = [...]int{

	626, 1940, 1960, 1539, 1984, 1941, 1911, 1959, 1023, 1015,
	1942, 1832, 1793, 1087, 1112, 1606, 1721, 1573, 849, 1740,
	603, 1666, 1816, 1707, 1708, 444, 855, 1549, 1733, 76,
	77, 480, 617, 275, 1301, 1574, 624, 1726, 1352, 277,
	76, 76, 76, 45, 677, 76, 1354, 1376, 76, 1105,
	1091, 1465, 1555, 465, 1127, 1086, 76, 623, 739, 1415,
	1191, 851, 1464, 76, 76, 1055, 1090, 76, 692, 278,
	76, 76, 76, 76, 1024, 586, 935, 723, 1366, 984,
	1120, 689, 993, 279, 19, 1121, 1565, 1179, 1360, 1201,
	679, 1248, 1182, 1125, 1039, 872, 803, 1081, 1048, 553,
	451, 58, 26, 787, 694, 449, 15, 926, 7, 710,
	554, 1219, 596, 405, 587, 482, 784, 481, 814, 965,
	443, 500, 263, 969, 491, 1094, 22, 21, 878, 454,
	1122, 1017, 494, 10, 9, 8, 6, 4, 58, 1817,
	268, 261, 570, 783, 267, 571, 269, 493, 569, 392,
	805, 801, 383, 716, 487, 452, 574, 395, 552, 1839,
	1403, 59, 1840, 1016, 272, 270, 60, 448, 448, 58,
	725, 271, 273, 265, 264, 266, 725, 1975, 725, 1020,
	1116, 1956, 1948, 1938, 1815, 1116, 1045, 1933, 1374, 1932,
	1116, 1052, 1116, 1907, 1312, 1901, 1045, 462, 1116, 1885,
	468, 274, 1815, 475, 1875, 431, 1848, 1116, 1058, 1045,
	1826, 274, 402, 1815, 479, 1313, 880, 1407, 471, 456,
	441, 1823, 1408, 64, 1116, 440, 1814, 1798, 1797, 1815,
	1116, 1116, 1775, 1754, 1053, 1058, 1058, 1751, 1743, 1693,
	1045, 1058, 1058, 1891, 57, 1692, 66, 1678, 1058, 1589,
	1116, 879, 1058, 1525, 57, 704, 1014, 76, 76, 76,
	76, 76, 1519, 503, 1482, 1014, 1480, 1483, 1479, 1058,
	36, 1058, 1054, 1051, 1478, 67, 1406, 1058, 37, 1404,
	36, 1058, 1058, 62, 1363, 1642, 1592, 1364, 37, 63,
	1339, 1341, 1117, 504, 1116, 1116, 1067, 881, 882, 1058,
	38, 1058, 1414, 982, 1342, 1116, 449, 505, 61, 1363,
	38, 1060, 1057, 881, 882, 1058, 1044, 1195, 1013, 1045,
	884, 1014, 981, 1111, 64, 980, 619, 733, 1075, 582,
	734, 844, 843, 795, 794, 516, 884, 461, 1056, 68,
	726, 883, 483, 740, 1818, 1377, 726, 66, 726, 64,
	828, 536, 1995, 1958, 1435, 1436, 1954, 883, 1947, 1902,
	1824, 1780, 1776, 1768, 1767, 581, 1766, 1762, 1761, 1435,
	1436, 1760, 66, 496, 496, 1705, 67, 881, 882, 76,
	1699, 501, 1657, 1652, 62, 1651, 1650, 488, 1600, 1578,
	63, 1554, 1529, 497, 76, 1487, 889, 76, 76, 1484,
	884, 67, 1050, 1472, 1463, 1434, 1431, 64, 1430, 1019,
	942, 1428, 889, 49, 1420, 1419, 1344, 64, 685, 1312,
	879, 883, 1340, 49, 1049, 1375, 881, 882, 1265, 1216,
	66, 76, 1215, 76, 61, 76, 76, 76, 581, 76,
	66, 1187, 729, 936, 580, 61, 936, 854, 724, 884,
	847, 1931, 1608, 1441, 76, 477, 1921, 1888, 1867, 67,
	1865, 1856, 1843, 1836, 1821, 76, 568, 62, 1441, 67,
	883, 1812, 1790, 63, 1773, 1745, 889, 62, 1715, 76,
	1584, 881, 882, 63, 277, 76, 76, 76, 1547, 76,
	1545, 1544, 61, 1542, 1499, 1498, 1527, 1462, 1424, 524,
	567, 1423, 262, 1400, 1451, 1396, 1184, 1328, 76, 76,
	525, 712, 1292, 1698, 278, 684, 76, 713, 76, 1291,
	1279, 1278, 1258, 1214, 1115, 883, 970, 899, 279, 503,
	503, 973, 977, 1188, 683, 963, 962, 277, 76, 961,
	76, 76, 76, 76, 76, 76, 76, 960, 560, 602,
	563, 76, 76, 959, 519, 521, 958, 76, 957, 504,
	504, 956, 955, 559, 954, 76, 953, 278, 1452, 952,
	829, 951, 728, 505, 505, 731, 950, 949, 73, 948,
	557, 279, 853, 76, 555, 947, 76, 940, 929, 61,
	848, 900, 885, 886, 887, 888, 890, 466, 910, 876,
	1279, 769, 585, 577, 578, 522, 483, 512, 510, 583,
	887, 888, 890, 441, 910, 488, 463, 1756, 440, 470,
	473, 1704, 463, 1703, 881, 882, 1322, 858, 1321, 927,
	1435, 1436, 700, 685, 1841, 1355, 846, 530, 735, 715,
	718, 1702, 1314, 1377, 1486, 449, 1443, 1444, 1445, 1437,
	1438, 1439, 1440, 1442, 975, 478, 737, 1485, 976, 1381,
	852, 791, 546, 531, 1437, 1438, 1439, 1440, 1442, 790,
	678, 893, 885, 886, 887, 888, 890, 945, 910, 1727,
	1016, 818, 825, 833, 1609, 1411, 1202, 966, 76, 550,
	1308, 1493, 1917, 1972, 1971, 1686, 76, 685, 1874, 1335,
	76, 695, 1066, 696, 76, 76, 845, 424, 76, 257,
	425, 430, 874, 429, 862, 1806, 861, 860, 1805, 943,
	76, 551, 76, 76, 253, 76, 71, 910, 76, 1441,
	76, 76, 1514, 76, 1513, 503, 441, 1490, 1489, 441,
	441, 868, 1251, 986, 869, 870, 987, 1384, 631, 1510,
	830, 1327, 939, 834, 835, 836, 837, 838, 1326, 1325,
	695, 258, 696, 841, 842, 504, 1324, 1167, 1059, 1010,
	1009, 254, 697, 1006, 556, 681, 998, 1000, 70, 505,
	967, 968, 910, 528, 1834, 1262, 76, 76, 971, 1261,
	1138, 1106, 508, 433, 974, 695, 1730, 696, 1181, 1873,
	1062, 1018, 1526, 1018, 1515, 986, 463, 1181, 473, 1298,
	708, 985, 978, 701, 1919, 1795, 719, 1056, 263, 1534,
	1981, 990, 529, 1040, 1302, 702, 1531, 1501, 1517, 277,
	1003, 697, 1310, 76, 58, 1992, 268, 746, 1011, 58,
	267, 1042, 269, 1033, 496, 1041, 496, 1043, 76, 76,
	1022, 1007, 1032, 501, 701, 76, 1037, 1297, 824, 278,
	272, 270, 1080, 1034, 1532, 1035, 697, 271, 273, 265,
	264, 266, 1031, 279, 1052, 1036, 1306, 438, 1202, 1971,
	1935, 76, 994, 259, 76, 1056, 725, 971, 1118, 974,
	1109, 1110, 1294, 1290, 612, 1069, 590, 968, 967, 706,
	69, 1936, 1061, 705, 1063, 1068, 1064, 1868, 1393, 1334,
	256, 255, 1302, 1336, 507, 260, 526, 1053, 277, 527,
	964, 447, 1391, 74, 1234, 910, 1101, 1439, 1440, 1442,
	1056, 1852, 72, 1813, 375, 376, 377, 823, 822, 394,
	816, 811, 406, 997, 1084, 881, 882, 1508, 278, 924,
	394, 1185, 693, 1422, 1083, 1054, 1051, 455, 455, 698,
	1980, 74, 279, 446, 74, 74, 474, 74, 884, 1502,
	1566, 712, 769, 769, 527, 1577, 573, 1944, 1085, 448,
	1771, 1943, 463, 1970, 76, 76, 76, 547, 1264, 883,
	76, 1968, 1389, 76, 1119, 1071, 1394, 1137, 1796, 76,
	76, 76, 76, 76, 1987, 1993, 1073, 76, 448, 983,
	76, 76, 1720, 1199, 686, 76, 1386, 826, 698, 1103,
	76, 1056, 76, 1074, 539, 1180, 517, 381, 711, 76,
	996, 572, 1072, 1189, 463, 717, 717, 1186, 515, 76,
	1272, 1209, 1559, 1999, 889, 548, 1638, 1979, 1800, 1164,
	1799, 434, 1304, 698, 1945, 573, 726, 470, 473, 1788,
	76, 76, 1266, 449, 1229, 1862, 76, 1492, 1772, 549,
	439, 384, 1289, 775, 435, 1682, 503, 1275, 1271, 1685,
	1104, 859, 769, 436, 1390, 1050, 1684, 1267, 850, 827,
	1741, 1392, 389, 384, 445, 899, 76, 385, 76, 1946,
	76, 995, 1530, 1912, 76, 572, 504, 840, 76, 800,
	1316, 1177, 1317, 1318, 389, 796, 1550, 76, 1722, 385,
	505, 386, 1343, 1736, 1345, 1175, 1985, 76, 1639, 1307,
	1789, 1561, 1998, 1281, 1640, 1280, 769, 1560, 1315, 388,
	526, 1162, 1165, 386, 486, 798, 564, 1742, 485, 446,
	680, 74, 489, 74, 406, 406, 799, 1330, 1540, 900,
	1706, 388, 1681, 1332, 1331, 1786, 1333, 1369, 1161, 1319,
	449, 1556, 1337, 1683, 1986, 1361, 1435, 1436, 1338, 1213,
	769, 768, 1855, 1346, 1770, 1372, 1787, 1349, 1466, 1583,
	1429, 1395, 1988, 1173, 1299, 1172, 1564, 628, 1065, 1178,
	1040, 1674, 1012, 545, 1370, 544, 543, 1357, 746, 746,
	1358, 542, 1380, 1347, 541, 540, 58, 537, 1042, 484,
	1379, 1467, 1041, 946, 1043, 1128, 1136, 832, 449, 1212,
	1413, 1939, 1909, 1675, 387, 1663, 1506, 979, 817, 812,
	885, 886, 887, 888, 890, 1504, 910, 1597, 1491, 463,
	1163, 1351, 1385, 473, 1107, 781, 387, 463, 1387, 745,
	1099, 1038, 732, 730, 1972, 793, 727, 722, 707, 1027,
	703, 1371, 699, 513, 473, 1441, 1353, 473, 390, 1807,
	76, 820, 533, 449, 575, 1113, 771, 1174, 518, 3,
	1410, 406, 406, 1497, 1176, 459, 986, 986, 1809, 1002,
	390, 423, 1001, 999, 1518, 1818, 1870, 1904, 1557, 579,
	1892, 1005, 1004, 76, 76, 1718, 1102, 1098, 746, 1021,
	1670, 1521, 1671, 380, 875, 394, 1451, 74, 792, 406,
	562, 406, 738, 565, 1047, 1276, 1996, 1469, 1470, 1471,
	76, 1997, 1114, 76, 932, 76, 1435, 1436, 455, 1673,
	1658, 576, 76, 1488, 426, 427, 1676, 1537, 467, 74,
	1495, 534, 460, 1505, 76, 1507, 1546, 391, 76, 1528,
	1509, 1543, 746, 74, 1481, 277, 1323, 76, 1516, 74,
	74, 74, 1263, 720, 881, 882, 1520, 1522, 1289, 1320,
	1452, 1533, 1535, 1536, 1523, 1260, 1524, 463, 1077, 1076,
	1551, 1259, 74, 74, 1210, 278, 1078, 933, 1570, 1541,
	788, 1758, 788, 1889, 1829, 1724, 746, 1605, 1553, 279,
	1672, 1569, 1348, 76, 1079, 941, 1552, 432, 1794, 382,
	1123, 831, 406, 1276, 788, 406, 406, 406, 406, 406,
	839, 538, 1602, 1603, 1604, 406, 406, 1563, 1934, 1558,
	1763, 394, 1421, 1562, 1831, 1586, 1851, 1567, 1568, 857,
	1211, 944, 35, 1710, 1593, 606, 1664, 1494, 1093, 1092,
	867, 1437, 1438, 1439, 1440, 1442, 280, 455, 821, 810,
	877, 1612, 627, 804, 1610, 1596, 813, 769, 1220, 1129,
	76, 76, 76, 682, 629, 1615, 743, 630, 744, 76,
	76, 972, 618, 741, 499, 76, 1362, 76, 1025, 76,
	76, 76, 1679, 1680, 76, 76, 1645, 769, 769, 1200,
	1409, 937, 598, 610, 609, 1197, 769, 769, 1646, 509,
	597, 1739, 1373, 1268, 48, 523, 400, 401, 1305, 1697,
	1108, 1659, 1662, 863, 1503, 76, 76, 437, 1432, 511,
	1241, 1233, 768, 768, 1230, 558, 1701, 688, 1716, 769,
	1296, 76, 76, 925, 1300, 76, 1026, 535, 1311, 711,
	76, 1719, 1046, 584, 871, 1714, 76, 458, 711, 1713,
	1714, 457, 74, 1088, 1713, 782, 1365, 1738, 463, 532,
	991, 797, 1070, 1696, 74, 428, 1864, 1723, 74, 1008,
	1712, 1717, 74, 1725, 1700, 1712, 1100, 1274, 1991, 76,
	1869, 1500, 1916, 65, 74, 25, 1029, 1030, 23, 74,
	20, 18, 74, 17, 406, 406, 1746, 406, 16, 24,
	745, 745, 14, 13, 1369, 12, 11, 34, 33, 32,
	31, 30, 29, 1750, 5, 2, 1731, 1732, 1, 0,
	1737, 0, 1372, 1350, 0, 0, 0, 771, 771, 1365,
	0, 770, 768, 1367, 76, 0, 76, 1769, 76, 76,
	0, 1370, 1192, 0, 0, 769, 1123, 76, 0, 1196,
	788, 877, 0, 1204, 0, 1368, 0, 0, 0, 0,
	0, 0, 0, 0, 1221, 1221, 1232, 1781, 1243, 76,
	1735, 0, 0, 0, 1255, 1256, 1257, 1369, 742, 0,
	0, 0, 1808, 0, 1782, 0, 768, 0, 0, 0,
	0, 76, 0, 746, 0, 1372, 0, 1082, 76, 0,
	0, 0, 0, 1819, 0, 0, 1367, 76, 1371, 1822,
	745, 0, 74, 1089, 1370, 0, 76, 76, 1714, 877,
	0, 0, 1713, 746, 746, 0, 1810, 0, 1368, 1844,
	768, 1835, 746, 746, 1830, 1803, 1804, 771, 0, 1828,
	1128, 1613, 0, 1712, 0, 74, 0, 769, 406, 1617,
	1618, 1784, 1845, 0, 0, 1850, 0, 76, 0, 1435,
	1436, 1842, 0, 0, 745, 746, 1734, 1866, 0, 0,
	0, 0, 0, 1825, 0, 1860, 76, 76, 0, 0,
	76, 1371, 1649, 1861, 76, 0, 0, 0, 0, 76,
	0, 771, 1838, 0, 0, 0, 0, 1878, 1886, 0,
	0, 1880, 1857, 0, 1882, 0, 0, 76, 745, 1887,
	1879, 0, 277, 76, 76, 0, 0, 0, 1714, 712,
	1896, 1235, 1713, 0, 0, 1893, 449, 1900, 1890, 1897,
	1899, 0, 1027, 1123, 769, 771, 76, 1894, 76, 76,
	0, 76, 278, 1712, 0, 1898, 0, 1903, 74, 1269,
	1270, 1914, 1922, 0, 991, 1920, 279, 1277, 1441, 0,
	0, 1926, 76, 1282, 1283, 1285, 1287, 1288, 1925, 0,
	0, 1293, 0, 1929, 1295, 74, 1923, 1928, 1930, 74,
	1924, 746, 1927, 1123, 74, 1906, 1309, 1123, 0, 0,
	76, 1714, 76, 74, 0, 1713, 0, 1399, 1951, 1955,
	0, 1401, 1881, 74, 1949, 1952, 0, 0, 1953, 1451,
	76, 0, 0, 0, 1965, 0, 1712, 769, 1969, 1417,
	1418, 0, 1967, 0, 1082, 788, 1973, 0, 0, 0,
	1082, 1974, 0, 0, 1978, 0, 0, 0, 0, 1976,
	0, 0, 0, 0, 0, 1990, 0, 1989, 0, 0,
	1994, 0, 1461, 1977, 1918, 0, 0, 0, 0, 0,
	857, 0, 857, 1474, 406, 0, 881, 882, 74, 2000,
	0, 0, 1356, 1452, 0, 0, 0, 0, 0, 0,
	0, 1359, 0, 746, 0, 0, 0, 0, 0, 884,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	1802, 0, 770, 770, 1511, 1512, 0, 0, 0, 0,
	883, 0, 0, 588, 588, 0, 0, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 0, 1689, 0,
	0, 0, 0, 0, 1695, 0, 0, 768, 0, 0,
	0, 0, 0, 0, 0, 0, 1235, 1235, 0, 742,
	742, 0, 0, 1445, 1437, 1438, 1439, 1440, 1442, 0,
	0, 0, 0, 0, 0, 889, 0, 768, 768, 1674,
	746, 1667, 0, 0, 1397, 1398, 768, 768, 0, 1665,
	1123, 1123, 0, 1669, 1123, 0, 0, 0, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1675, 0, 1235, 1235, 1235, 0, 0, 0, 768,
	0, 0, 770, 1590, 0, 745, 899, 0, 0, 0,
	0, 1668, 0, 0, 0, 0, 0, 0, 864, 866,
	0, 1458, 1459, 1460, 0, 873, 0, 0, 0, 0,
	0, 0, 771, 0, 877, 745, 745, 919, 920, 921,
	922, 923, 0, 746, 745, 745, 0, 931, 0, 742,
	0, 0, 0, 0, 0, 0, 770, 938, 0, 0,
	0, 0, 771, 771, 0, 1643, 0, 74, 74, 0,
	900, 771, 771, 0, 0, 0, 1653, 745, 1670, 0,
	1671, 0, 0, 0, 0, 0, 1792, 0, 0, 0,
	0, 0, 0, 0, 1538, 0, 0, 991, 0, 857,
	770, 0, 0, 742, 771, 0, 1548, 1673, 0, 0,
	0, 0, 0, 0, 1676, 768, 0, 0, 74, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	1827, 1576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1235, 1235, 0, 0, 1123, 742, 891, 892,
	893, 885, 886, 887, 888, 890, 0, 910, 0, 0,
	1729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1581, 1582, 0, 0, 0, 0, 0, 1607, 1672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 745, 1235, 1235, 1235, 1235, 1235, 1235,
	1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
	1235, 1235, 1235, 0, 1235, 0, 0, 768, 0, 0,
	771, 0, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 0, 1641, 0, 1660, 1661, 991, 0, 0, 0,
	0, 0, 0, 877, 877, 0, 0, 0, 0, 1687,
	0, 1688, 0, 74, 1690, 1691, 0, 0, 1694, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 1915, 0,
	0, 0, 0, 0, 881, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 1709, 0, 877,
	1089, 0, 1709, 0, 768, 0, 0, 884, 0, 0,
	0, 0, 0, 0, 0, 74, 74, 0, 0, 74,
	0, 0, 771, 0, 1576, 588, 0, 0, 883, 1027,
	1744, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 0, 1166, 0, 1168, 1169, 1170, 1171,
	0, 0, 0, 1764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1190, 607, 46, 0, 0, 0, 0,
	0, 0, 745, 889, 0, 0, 0, 768, 0, 0,
	0, 0, 0, 0, 0, 1217, 1218, 0, 0, 1231,
	0, 1242, 1244, 1249, 1252, 1253, 1254, 770, 0, 771,
	0, 0, 46, 0, 0, 0, 0, 0, 991, 0,
	1783, 0, 406, 1785, 1884, 0, 690, 0, 0, 0,
	0, 74, 1235, 442, 899, 0, 450, 770, 770, 0,
	0, 0, 0, 46, 0, 0, 770, 770, 0, 0,
	0, 0, 0, 877, 742, 0, 0, 0, 0, 0,
	1791, 0, 1303, 0, 0, 745, 0, 0, 0, 0,
	1709, 0, 0, 0, 0, 74, 0, 0, 0, 770,
	0, 0, 1833, 0, 742, 742, 0, 0, 0, 0,
	0, 74, 771, 742, 742, 0, 0, 0, 900, 0,
	877, 1576, 0, 0, 1329, 0, 0, 1937, 0, 0,
	0, 0, 0, 0, 0, 881, 882, 0, 901, 902,
	903, 911, 912, 913, 0, 0, 742, 1235, 0, 0,
	0, 904, 0, 0, 1957, 0, 0, 0, 884, 0,
	915, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1854, 0, 873, 0, 883,
	1871, 1872, 0, 0, 1876, 898, 0, 0, 1877, 0,
	1709, 0, 0, 406, 0, 894, 891, 892, 893, 885,
	886, 887, 888, 890, 0, 910, 0, 0, 0, 1895,
	0, 877, 0, 0, 0, 770, 0, 1576, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 1382, 1383, 0,
	0, 0, 1235, 1388, 889, 0, 0, 0, 0, 0,
	1913, 0, 877, 74, 0, 406, 0, 0, 0, 0,
	0, 0, 908, 916, 0, 0, 0, 450, 0, 0,
	1905, 1405, 742, 1709, 0, 0, 1833, 914, 1412, 0,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 906,
	1425, 0, 0, 0, 0, 899, 27, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 877, 50, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 905, 0,
	0, 1249, 1249, 1249, 1966, 0, 0, 770, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 28, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 41, 900,
	0, 0, 0, 0, 0, 36, 0, 0, 53, 0,
	0, 909, 40, 37, 742, 0, 0, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 588, 0, 0, 42,
	690, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 882, 0, 901, 902,
	903, 911, 912, 913, 770, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 884, 907,
	915, 0, 895, 896, 897, 0, 894, 891, 892, 893,
	885, 886, 887, 888, 890, 0, 910, 0, 0, 883,
	0, 0, 0, 1777, 0, 898, 442, 1579, 0, 0,
	1580, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1585, 39, 0, 0, 0, 0, 0, 0, 1594,
	0, 0, 0, 0, 0, 0, 0, 1598, 55, 0,
	1329, 43, 0, 54, 0, 0, 0, 770, 0, 44,
	0, 0, 64, 0, 889, 1614, 0, 47, 49, 1616,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 908, 916, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 56,
	0, 0, 1647, 1648, 742, 0, 0, 0, 0, 906,
	0, 1654, 1655, 1656, 67, 899, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 442,
	0, 0, 442, 442, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 930, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 881, 882, 900,
	901, 902, 903, 911, 912, 913, 0, 0, 0, 0,
	0, 909, 1728, 904, 0, 0, 0, 0, 0, 0,
	884, 0, 915, 0, 0, 1435, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1749,
	0, 883, 0, 1752, 1753, 0, 0, 898, 1755, 0,
	0, 0, 0, 0, 0, 1757, 0, 1759, 0, 0,
	0, 0, 0, 0, 0, 1765, 881, 882, 0, 907,
	0, 0, 895, 896, 897, 1450, 894, 891, 892, 893,
	885, 886, 887, 888, 890, 0, 910, 0, 0, 884,
	1435, 1436, 0, 1477, 0, 0, 889, 0, 1774, 0,
	0, 46, 0, 46, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 908, 916, 898, 0, 46, 0,
	0, 0, 0, 46, 1441, 0, 0, 881, 882, 914,
	901, 902, 903, 911, 912, 913, 0, 0, 0, 0,
	1801, 906, 0, 904, 0, 0, 0, 899, 0, 0,
	884, 0, 915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 889, 0, 1820, 0, 0,
	905, 883, 0, 0, 0, 1451, 0, 898, 0, 0,
	1435, 1436, 0, 1453, 1454, 1455, 0, 0, 0, 1441,
	0, 1837, 0, 0, 0, 0, 1748, 0, 0, 0,
	0, 0, 0, 1846, 1847, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 0, 909, 0, 0, 889, 0, 881, 882,
	1450, 0, 0, 1859, 911, 912, 913, 0, 0, 1452,
	1451, 0, 0, 0, 908, 916, 1863, 0, 0, 0,
	0, 884, 0, 915, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 1124, 0, 0, 690, 0,
	0, 906, 883, 0, 0, 0, 0, 899, 898, 1441,
	900, 907, 0, 0, 895, 896, 897, 0, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	905, 1183, 0, 0, 1452, 1476, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 1446, 1443, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 0, 0, 889, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 908, 916, 0, 0, 0,
	0, 0, 0, 909, 0, 0, 0, 894, 891, 892,
	893, 885, 886, 887, 888, 890, 0, 910, 0, 0,
	0, 0, 906, 1950, 0, 0, 0, 0, 899, 0,
	0, 1446, 1443, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	0, 1964, 1964, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 450, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 895, 896, 897, 1964, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	0, 407, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 0, 408,
	0, 0, 1964, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1448, 1449,
	0, 1446, 1443, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	0, 0, 0, 46, 410, 0, 0, 46, 0, 415,
	416, 0, 0, 421, 0, 0, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 409, 411, 0, 0, 0,
	0, 1378, 907, 0, 0, 0, 0, 0, 0, 894,
	891, 892, 893, 885, 886, 887, 888, 890, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	1183, 0, 0, 0, 0, 0, 0, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 625, 615,
	616, 613, 614, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 641, 608, 930, 0, 0, 81, 82, 0,
	656, 206, 657, 83, 658, 659, 0, 84, 210, 211,
	85, 611, 640, 660, 661, 214, 0, 652, 0, 633,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 282, 93, 1963, 0, 634, 636, 0, 635, 637,
	95, 96, 97, 98, 662, 99, 663, 664, 0, 100,
	418, 101, 0, 0, 419, 655, 103, 0, 104, 420,
	0, 0, 599, 105, 106, 642, 643, 621, 1124, 0,
	107, 108, 665, 422, 109, 0, 110, 0, 0, 283,
	0, 111, 653, 0, 224, 0, 112, 113, 114, 649,
	651, 0, 0, 117, 0, 115, 0, 284, 116, 666,
	667, 668, 669, 0, 632, 0, 0, 118, 287, 119,
	120, 0, 122, 121, 0, 654, 288, 123, 1124, 0,
	124, 0, 1124, 125, 0, 126, 127, 128, 129, 130,
	290, 131, 132, 135, 133, 594, 134, 622, 650, 136,
	670, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 291, 141, 292, 644, 142, 143, 144, 145, 0,
	645, 146, 238, 147, 0, 148, 149, 150, 671, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 293, 163, 164, 600, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 638, 172, 173,
	0, 174, 672, 243, 175, 0, 181, 176, 177, 178,
	180, 673, 179, 646, 0, 182, 0, 183, 184, 185,
	0, 246, 674, 675, 0, 0, 186, 647, 648, 620,
	187, 188, 1962, 190, 0, 0, 191, 192, 193, 639,
	194, 0, 195, 196, 197, 251, 676, 0, 0, 198,
	0, 0, 0, 0, 199, 200, 201, 202, 759, 753,
	776, 747, 767, 766, 0, 0, 749, 748, 0, 591,
	592, 778, 777, 0, 46, 593, 0, 0, 601, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 764, 763, 0, 0, 0, 0,
	0, 0, 0, 762, 0, 1124, 1124, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 754, 755, 756,
	757, 0, 775, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 1130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	1133, 1131, 1132, 1135, 1134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 751, 0, 0, 0, 0, 1811, 0, 0,
	758, 752, 0, 0, 0, 0, 0, 0, 0, 780,
	0, 0, 0, 46, 0, 0, 0, 750, 0, 0,
	773, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 779, 0, 0, 0, 0, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 295,
	80, 296, 297, 298, 299, 203, 300, 301, 302, 303,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 304,
	84, 210, 211, 85, 305, 306, 212, 213, 214, 307,
	215, 308, 281, 309, 86, 87, 88, 930, 89, 310,
	90, 91, 92, 311, 282, 93, 94, 312, 313, 314,
	315, 316, 317, 95, 96, 97, 98, 216, 99, 217,
	218, 318, 100, 319, 101, 320, 321, 322, 102, 103,
	323, 104, 324, 0, 325, 219, 105, 106, 220, 221,
	326, 327, 328, 107, 108, 222, 0, 109, 329, 110,
	330, 331, 283, 332, 111, 223, 333, 224, 334, 112,
	113, 114, 225, 226, 285, 335, 117, 336, 115, 337,
	284, 116, 227, 228, 229, 230, 338, 231, 339, 286,
	118, 287, 119, 120, 340, 122, 121, 341, 232, 288,
	123, 289, 342, 124, 343, 344, 125, 0, 126, 127,
	128, 129, 130, 290, 131, 132, 135, 133, 345, 134,
	346, 233, 136, 234, 137, 138, 347, 139, 348, 349,
	350, 351, 140, 235, 291, 141, 292, 236, 142, 143,
	144, 145, 352, 237, 146, 238, 147, 353, 148, 149,
	150, 239, 151, 152, 354, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 355, 162, 293, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 356, 241, 170, 171,
	357, 172, 173, 294, 174, 242, 243, 175, 358, 181,
	176, 177, 178, 180, 244, 179, 245, 359, 182, 360,
	183, 184, 185, 361, 246, 247, 248, 362, 363, 186,
	249, 250, 364, 187, 188, 189, 190, 365, 366, 191,
	192, 193, 367, 194, 368, 195, 196, 197, 251, 252,
	369, 370, 198, 371, 372, 373, 374, 199, 200, 201,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1571, 78, 79,
	295, 80, 296, 297, 298, 299, 203, 300, 301, 302,
	303, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	304, 84, 210, 211, 85, 305, 306, 212, 213, 214,
	307, 215, 308, 281, 309, 86, 87, 88, 0, 89,
	310, 90, 91, 92, 311, 282, 93, 94, 312, 313,
	314, 315, 316, 317, 95, 96, 97, 98, 216, 99,
	217, 218, 318, 100, 319, 101, 320, 321, 322, 102,
	103, 323, 104, 324, 0, 325, 219, 105, 106, 220,
	221, 326, 327, 328, 107, 108, 222, 0, 109, 329,
	110, 330, 331, 283, 332, 111, 223, 333, 224, 334,
	112, 113, 114, 225, 226, 285, 335, 117, 336, 115,
	337, 284, 116, 227, 228, 229, 230, 338, 231, 339,
	286, 118, 287, 119, 120, 340, 122, 121, 341, 232,
	288, 123, 289, 342, 124, 343, 344, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 345,
	134, 346, 233, 136, 234, 137, 138, 347, 139, 348,
	349, 350, 351, 140, 235, 291, 141, 292, 236, 142,
	143, 144, 145, 352, 237, 146, 238, 147, 353, 148,
	149, 150, 239, 151, 152, 354, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 355, 162, 293, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 356, 241, 170,
	171, 357, 172, 173, 294, 174, 242, 243, 175, 358,
	181, 176, 177, 178, 180, 244, 179, 245, 359, 182,
	360, 183, 184, 185, 361, 246, 247, 248, 362, 363,
	186, 249, 250, 364, 187, 188, 189, 190, 365, 366,
	191, 192, 193, 367, 194, 368, 195, 196, 197, 251,
	252, 369, 370, 198, 371, 372, 373, 374, 199, 200,
	201, 202, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 78, 79,
	295, 80, 296, 297, 298, 299, 203, 300, 301, 302,
	303, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	304, 84, 210, 211, 85, 305, 306, 212, 213, 214,
	307, 215, 308, 281, 309, 86, 87, 88, 0, 89,
	310, 90, 91, 92, 311, 282, 93, 94, 312, 313,
	314, 315, 316, 317, 95, 96, 97, 98, 216, 99,
	217, 218, 318, 100, 319, 101, 320, 321, 322, 102,
	103, 323, 104, 324, 0, 325, 219, 105, 106, 220,
	221, 326, 327, 328, 107, 108, 222, 0, 109, 329,
	110, 330, 331, 283, 332, 111, 223, 333, 224, 334,
	112, 113, 114, 225, 226, 285, 335, 117, 336, 115,
	337, 284, 116, 227, 228, 229, 230, 338, 231, 339,
	286, 118, 287, 119, 120, 340, 122, 121, 341, 232,
	288, 123, 289, 342, 124, 343, 344, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 345,
	134, 346, 233, 136, 234, 137, 138, 347, 139, 348,
	349, 350, 351, 140, 235, 291, 141, 292, 236, 142,
	143, 144, 145, 352, 237, 146, 238, 147, 353, 148,
	149, 150, 239, 151, 152, 354, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 355, 162, 293, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 356, 241, 170,
	171, 357, 172, 173, 294, 174, 242, 243, 175, 358,
	181, 176, 177, 178, 180, 244, 179, 245, 359, 182,
	360, 183, 184, 185, 361, 246, 247, 248, 362, 363,
	186, 249, 250, 364, 187, 188, 189, 190, 365, 366,
	191, 192, 193, 367, 194, 368, 195, 196, 197, 251,
	252, 369, 370, 198, 371, 372, 373, 374, 199, 200,
	201, 202, 625, 615, 616, 613, 614, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	1206, 80, 0, 0, 0, 0, 641, 608, 0, 0,
	0, 81, 82, 204, 656, 206, 657, 83, 658, 659,
	0, 84, 210, 211, 85, 611, 640, 660, 661, 214,
	0, 652, 0, 633, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 282, 93, 94, 0, 634,
	636, 0, 635, 637, 95, 96, 97, 98, 662, 99,
	663, 664, 0, 100, 0, 101, 0, 1207, 0, 655,
	103, 0, 104, 0, 0, 0, 599, 105, 106, 642,
	643, 621, 0, 0, 107, 108, 665, 0, 109, 0,
	110, 0, 0, 283, 0, 111, 653, 0, 224, 0,
	112, 113, 114, 649, 651, 285, 0, 117, 0, 115,
	0, 284, 116, 666, 667, 668, 669, 0, 632, 0,
	286, 118, 287, 119, 120, 0, 122, 121, 0, 654,
	288, 123, 289, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 594,
	134, 622, 650, 136, 670, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 291, 141, 292, 644, 142,
	143, 144, 145, 0, 645, 146, 238, 147, 0, 148,
	149, 150, 671, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 293, 163, 164,
	600, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 638, 172, 173, 294, 174, 672, 243, 175, 0,
	181, 176, 177, 178, 180, 673, 179, 646, 0, 182,
	0, 183, 184, 185, 0, 246, 674, 675, 0, 0,
	186, 647, 648, 620, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 639, 194, 0, 195, 196, 197, 251,
	676, 1205, 0, 198, 0, 0, 0, 0, 199, 200,
	201, 202, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 592, 1208, 0, 0, 0, 593,
	0, 0, 601, 1203, 0, 0, 0, 604, 625, 615,
	616, 613, 614, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 641, 608, 0, 0, 0, 81, 82, 204,
	656, 206, 657, 83, 658, 659, 0, 84, 210, 211,
	85, 611, 640, 660, 661, 214, 0, 652, 0, 633,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 282, 93, 94, 0, 634, 636, 0, 635, 637,
	95, 96, 97, 98, 662, 99, 663, 664, 691, 100,
	0, 101, 0, 0, 0, 655, 103, 0, 104, 0,
	0, 0, 599, 105, 106, 642, 643, 621, 0, 0,
	107, 108, 665, 0, 109, 0, 110, 0, 0, 283,
	0, 111, 653, 0, 224, 0, 112, 113, 114, 649,
	651, 285, 0, 117, 0, 115, 0, 284, 116, 666,
	667, 668, 669, 0, 632, 0, 286, 118, 287, 119,
	120, 0, 122, 121, 0, 654, 288, 123, 289, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	290, 131, 132, 135, 133, 594, 134, 622, 650, 136,
	670, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 291, 141, 292, 644, 142, 143, 144, 145, 0,
	645, 146, 238, 147, 0, 148, 149, 150, 671, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 293, 163, 164, 600, 165, 0, 166,
	167, 168, 169, 64, 241, 170, 171, 638, 172, 173,
	294, 174, 672, 243, 175, 0, 181, 176, 177, 178,
	180, 673, 179, 646, 0, 182, 66, 183, 184, 185,
	0, 246, 674, 675, 0, 0, 186, 647, 648, 620,
	187, 188, 189, 190, 0, 0, 191, 192, 193, 639,
	194, 0, 195, 196, 197, 506, 676, 0, 0, 198,
	0, 0, 0, 62, 199, 200, 201, 202, 595, 63,
	625, 615, 616, 613, 614, 605, 0, 0, 0, 591,
	592, 0, 0, 0, 0, 593, 78, 79, 601, 80,
	0, 0, 0, 604, 641, 608, 0, 0, 0, 81,
	82, 204, 656, 206, 657, 83, 658, 659, 0, 84,
	210, 211, 85, 611, 640, 660, 661, 214, 0, 652,
	0, 633, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 282, 93, 94, 0, 634, 636, 0,
	635, 637, 95, 96, 97, 98, 662, 99, 663, 664,
	0, 100, 0, 101, 0, 0, 0, 655, 103, 0,
	104, 0, 0, 0, 599, 105, 106, 642, 643, 621,
	0, 0, 107, 108, 665, 0, 109, 0, 110, 0,
	0, 283, 0, 111, 653, 0, 224, 0, 112, 113,
	114, 649, 651, 285, 0, 117, 0, 115, 0, 284,
	116, 666, 667, 668, 669, 0, 632, 0, 286, 118,
	287, 119, 120, 0, 122, 121, 0, 654, 288, 123,
	289, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 290, 131, 132, 135, 133, 594, 134, 622,
	650, 136, 670, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 291, 141, 292, 644, 142, 143, 144,
	145, 0, 645, 146, 238, 147, 0, 148, 149, 150,
	671, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 293, 163, 164, 600, 165,
	0, 166, 167, 168, 169, 64, 241, 170, 171, 638,
	172, 173, 294, 174, 672, 243, 175, 0, 181, 176,
	177, 178, 180, 673, 179, 646, 0, 182, 66, 183,
	184, 185, 0, 246, 674, 675, 0, 0, 186, 647,
	648, 620, 187, 188, 189, 190, 0, 0, 191, 192,
	193, 639, 194, 0, 195, 196, 197, 506, 676, 0,
	0, 198, 0, 0, 0, 62, 199, 200, 201, 202,
	595, 63, 625, 615, 616, 613, 614, 605, 0, 0,
	0, 591, 592, 0, 0, 0, 0, 593, 78, 79,
	601, 80, 0, 0, 0, 604, 641, 608, 0, 0,
	0, 81, 82, 204, 656, 206, 657, 83, 658, 659,
	1245, 84, 210, 211, 85, 611, 640, 660, 661, 214,
	0, 652, 0, 633, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 282, 93, 94, 0, 634,
	636, 0, 635, 637, 95, 96, 97, 98, 662, 99,
	663, 664, 0, 100, 0, 101, 0, 0, 0, 655,
	103, 0, 104, 0, 0, 0, 599, 105, 106, 642,
	643, 621, 0, 0, 107, 108, 665, 0, 109, 0,
	110, 0, 1250, 283, 0, 111, 653, 0, 224, 0,
	112, 113, 114, 649, 651, 285, 0, 117, 0, 115,
	0, 284, 116, 666, 667, 668, 669, 0, 632, 0,
	286, 118, 287, 119, 120, 0, 122, 121, 1246, 654,
	288, 123, 289, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 594,
	134, 622, 650, 136, 670, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 291, 141, 292, 644, 142,
	143, 144, 145, 0, 645, 146, 238, 147, 0, 148,
	149, 150, 671, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 293, 163, 164,
	600, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 638, 172, 173, 294, 174, 672, 243, 175, 0,
	181, 176, 177, 178, 180, 673, 179, 646, 0, 182,
	0, 183, 184, 185, 0, 246, 674, 675, 0, 1247,
	186, 647, 648, 620, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 639, 194, 0, 195, 196, 197, 251,
	676, 0, 0, 198, 0, 0, 0, 0, 199, 200,
	201, 202, 595, 0, 625, 615, 616, 613, 614, 605,
	0, 0, 0, 591, 592, 0, 0, 0, 0, 593,
	78, 79, 601, 80, 0, 0, 0, 604, 641, 608,
	0, 0, 0, 81, 82, 204, 656, 206, 657, 83,
	658, 659, 0, 84, 210, 211, 85, 611, 640, 660,
	661, 214, 0, 652, 0, 633, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 94,
	0, 634, 636, 0, 635, 637, 95, 96, 97, 98,
	662, 99, 663, 664, 0, 100, 0, 101, 0, 0,
	0, 655, 103, 0, 104, 0, 0, 0, 599, 105,
	106, 642, 643, 621, 0, 0, 107, 108, 665, 0,
	109, 0, 110, 0, 0, 283, 0, 111, 653, 0,
	224, 0, 112, 113, 114, 649, 651, 285, 0, 117,
	0, 115, 0, 284, 116, 666, 667, 668, 669, 0,
	632, 0, 286, 118, 287, 119, 120, 0, 122, 121,
	0, 654, 288, 123, 289, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 594, 134, 622, 650, 136, 670, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 291, 141, 292,
	644, 142, 143, 144, 145, 0, 645, 146, 238, 147,
	0, 148, 149, 150, 671, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 600, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 638, 172, 173, 294, 174, 672, 243,
	175, 0, 181, 176, 177, 178, 180, 673, 179, 646,
	0, 182, 0, 183, 184, 185, 0, 246, 674, 675,
	0, 0, 186, 647, 648, 620, 187, 188, 189, 190,
	0, 0, 191, 192, 193, 639, 194, 0, 195, 196,
	197, 251, 676, 0, 0, 198, 0, 0, 0, 0,
	199, 200, 201, 202, 595, 0, 0, 0, 0, 625,
	615, 616, 613, 614, 605, 591, 592, 0, 0, 0,
	0, 593, 936, 1198, 601, 78, 79, 0, 80, 604,
	0, 0, 0, 641, 608, 0, 0, 0, 81, 82,
	204, 656, 206, 657, 83, 658, 659, 0, 84, 210,
	211, 85, 611, 640, 660, 661, 214, 0, 652, 0,
	633, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 282, 93, 94, 0, 634, 636, 0, 635,
	637, 95, 96, 97, 98, 662, 99, 663, 664, 0,
	100, 0, 101, 0, 0, 0, 655, 103, 0, 104,
	0, 0, 0, 599, 105, 106, 642, 643, 621, 0,
	0, 107, 108, 665, 0, 109, 0, 110, 0, 0,
	283, 0, 111, 653, 0, 224, 0, 112, 113, 114,
	649, 651, 285, 0, 117, 0, 115, 0, 284, 116,
	666, 667, 668, 669, 0, 632, 0, 286, 118, 287,
	119, 120, 0, 122, 121, 0, 654, 288, 123, 289,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 594, 134, 622, 650,
	136, 670, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 291, 141, 292, 644, 142, 143, 144, 145,
	0, 645, 146, 238, 147, 0, 148, 149, 150, 671,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 293, 163, 164, 600, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 638, 172,
	173, 294, 174, 672, 243, 175, 0, 181, 176, 177,
	178, 180, 673, 179, 646, 0, 182, 0, 183, 184,
	185, 0, 246, 674, 675, 0, 0, 186, 647, 648,
	620, 187, 188, 189, 190, 0, 0, 191, 192, 193,
	639, 194, 0, 195, 196, 197, 251, 676, 0, 0,
	198, 0, 0, 0, 0, 199, 200, 201, 202, 595,
	0, 625, 615, 616, 613, 614, 605, 0, 0, 0,
	591, 592, 589, 0, 0, 0, 593, 78, 79, 601,
	80, 0, 0, 0, 604, 641, 608, 0, 0, 0,
	81, 82, 204, 656, 206, 657, 83, 658, 659, 0,
	84, 210, 211, 85, 611, 640, 660, 661, 214, 0,
	652, 0, 633, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 282, 93, 94, 0, 634, 636,
	0, 635, 637, 95, 96, 97, 98, 662, 99, 663,
	664, 0, 100, 0, 101, 0, 0, 0, 655, 103,
	0, 104, 0, 0, 0, 599, 105, 106, 642, 643,
	621, 0, 0, 107, 108, 665, 0, 109, 0, 110,
	0, 0, 283, 0, 111, 653, 0, 224, 0, 112,
	113, 114, 649, 651, 285, 0, 117, 0, 115, 0,
	284, 116, 666, 667, 668, 669, 0, 632, 0, 286,
	118, 287, 119, 120, 0, 122, 121, 0, 654, 288,
	123, 289, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 290, 131, 132, 135, 133, 594, 134,
	622, 650, 136, 670, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 291, 141, 292, 644, 142, 143,
	144, 145, 0, 645, 146, 238, 147, 0, 148, 149,
	150, 671, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 293, 163, 164, 600,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	638, 172, 173, 294, 174, 672, 243, 175, 0, 181,
	176, 177, 178, 180, 673, 179, 646, 0, 182, 0,
	183, 184, 185, 0, 246, 674, 675, 0, 0, 186,
	647, 648, 620, 187, 188, 189, 190, 0, 0, 191,
	192, 193, 639, 194, 0, 195, 196, 197, 251, 676,
	0, 0, 198, 0, 0, 0, 0, 199, 200, 201,
	202, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 592, 0, 0, 0, 0, 593, 0,
	0, 601, 1644, 0, 0, 0, 604, 625, 615, 616,
	613, 614, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 641, 608, 0, 0, 0, 81, 82, 204, 656,
	206, 657, 83, 658, 659, 0, 84, 210, 211, 85,
	611, 640, 660, 661, 214, 0, 652, 0, 633, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	282, 93, 94, 0, 634, 636, 0, 635, 637, 95,
	96, 97, 98, 662, 99, 663, 664, 0, 100, 0,
	101, 0, 0, 0, 655, 103, 0, 104, 0, 0,
	0, 599, 105, 106, 642, 643, 621, 0, 0, 107,
	108, 665, 0, 109, 0, 110, 0, 0, 283, 0,
	111, 653, 0, 224, 0, 112, 113, 114, 649, 651,
	285, 0, 117, 0, 115, 0, 284, 116, 666, 667,
	668, 669, 0, 632, 0, 286, 118, 287, 119, 120,
	0, 122, 121, 0, 654, 288, 123, 289, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 290,
	131, 132, 135, 133, 594, 134, 622, 650, 136, 670,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	291, 141, 292, 644, 142, 143, 144, 145, 0, 645,
	146, 238, 147, 0, 148, 149, 150, 671, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 293, 163, 164, 600, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 638, 172, 173, 294,
	174, 672, 243, 175, 0, 181, 176, 177, 178, 180,
	673, 179, 646, 0, 182, 0, 183, 184, 185, 0,
	246, 674, 675, 0, 0, 186, 647, 648, 620, 187,
	188, 189, 190, 0, 0, 191, 192, 193, 639, 194,
	0, 195, 196, 197, 251, 676, 1601, 0, 198, 0,
	0, 0, 0, 199, 200, 201, 202, 595, 0, 625,
	615, 616, 613, 614, 605, 0, 0, 0, 591, 592,
	0, 0, 0, 0, 593, 78, 79, 601, 80, 0,
	0, 0, 604, 641, 608, 0, 0, 0, 81, 82,
	204, 656, 206, 657, 83, 658, 659, 0, 84, 210,
	211, 85, 611, 640, 660, 661, 214, 0, 652, 0,
	633, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 282, 93, 94, 0, 634, 636, 0, 635,
	637, 95, 96, 97, 98, 662, 99, 663, 664, 0,
	100, 0, 101, 0, 0, 0, 655, 103, 0, 104,
	0, 0, 0, 599, 105, 106, 642, 643, 621, 0,
	0, 107, 108, 665, 0, 109, 0, 110, 0, 0,
	283, 0, 111, 653, 0, 224, 0, 112, 113, 114,
	649, 651, 285, 0, 117, 0, 115, 0, 284, 116,
	666, 667, 668, 669, 0, 632, 0, 286, 118, 287,
	119, 120, 0, 122, 121, 0, 654, 288, 123, 289,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 594, 134, 622, 650,
	136, 670, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 291, 141, 292, 644, 142, 143, 144, 145,
	0, 645, 146, 238, 147, 0, 148, 149, 150, 671,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 293, 163, 164, 600, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 638, 172,
	173, 294, 174, 672, 243, 175, 0, 181, 176, 177,
	178, 180, 673, 179, 646, 0, 182, 0, 183, 184,
	185, 0, 246, 674, 675, 0, 0, 186, 647, 648,
	620, 187, 188, 189, 190, 0, 0, 191, 192, 193,
	639, 194, 0, 195, 196, 197, 251, 676, 0, 0,
	198, 0, 0, 0, 0, 199, 200, 201, 202, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 592, 0, 0, 0, 0, 593, 0, 0, 601,
	1591, 0, 0, 0, 604, 625, 615, 616, 613, 614,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 641,
	608, 0, 0, 0, 81, 82, 204, 656, 206, 657,
	83, 658, 659, 0, 84, 210, 211, 85, 611, 640,
	660, 661, 214, 0, 652, 0, 633, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 282, 93,
	94, 0, 634, 636, 0, 635, 637, 95, 96, 97,
	98, 662, 99, 663, 664, 691, 100, 0, 101, 0,
	0, 0, 655, 103, 0, 104, 0, 0, 0, 599,
	105, 106, 642, 643, 621, 0, 0, 107, 108, 665,
	0, 109, 0, 110, 0, 0, 283, 0, 111, 653,
	0, 224, 0, 112, 113, 114, 649, 651, 285, 0,
	117, 0, 115, 0, 284, 116, 666, 667, 668, 669,
	0, 632, 0, 286, 118, 287, 119, 120, 0, 122,
	121, 0, 654, 288, 123, 289, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 290, 131, 132,
	135, 133, 594, 134, 622, 650, 136, 670, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 291, 141,
	292, 644, 142, 143, 144, 145, 0, 645, 146, 238,
	147, 0, 148, 149, 150, 671, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	293, 163, 164, 600, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 638, 172, 173, 294, 174, 672,
	243, 175, 0, 181, 176, 177, 178, 180, 673, 179,
	646, 0, 182, 0, 183, 184, 185, 0, 246, 674,
	675, 0, 0, 186, 647, 648, 620, 187, 188, 189,
	190, 0, 0, 191, 192, 193, 639, 194, 0, 195,
	196, 197, 251, 676, 0, 0, 198, 0, 0, 0,
	0, 199, 200, 201, 202, 595, 0, 625, 615, 616,
	613, 614, 605, 0, 0, 0, 591, 592, 0, 0,
	0, 0, 593, 78, 79, 601, 80, 0, 0, 0,
	604, 641, 608, 0, 0, 0, 81, 82, 204, 656,
	206, 657, 83, 658, 659, 0, 84, 210, 211, 85,
	611, 640, 660, 661, 214, 0, 652, 0, 633, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	282, 93, 94, 0, 634, 636, 0, 635, 637, 95,
	96, 97, 98, 662, 99, 663, 664, 0, 100, 0,
	101, 0, 0, 0, 655, 103, 0, 104, 0, 0,
	0, 599, 105, 106, 642, 643, 621, 0, 0, 107,
	108, 665, 0, 109, 0, 110, 0, 1250, 283, 0,
	111, 653, 0, 224, 0, 112, 113, 114, 649, 651,
	285, 0, 117, 0, 115, 0, 284, 116, 666, 667,
	668, 669, 0, 632, 0, 286, 118, 287, 119, 120,
	0, 122, 121, 0, 654, 288, 123, 289, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 290,
	131, 132, 135, 133, 594, 134, 622, 650, 136, 670,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	291, 141, 292, 644, 142, 143, 144, 145, 0, 645,
	146, 238, 147, 0, 148, 149, 150, 671, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 293, 163, 164, 600, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 638, 172, 173, 294,
	174, 672, 243, 175, 0, 181, 176, 177, 178, 180,
	673, 179, 646, 0, 182, 0, 183, 184, 185, 0,
	246, 674, 675, 0, 0, 186, 647, 648, 620, 187,
	188, 189, 190, 0, 0, 191, 192, 193, 639, 194,
	0, 195, 196, 197, 251, 676, 0, 0, 198, 0,
	0, 0, 0, 199, 200, 201, 202, 595, 0, 625,
	615, 616, 613, 614, 605, 0, 0, 0, 591, 592,
	0, 0, 0, 0, 593, 78, 79, 601, 80, 0,
	0, 0, 604, 641, 608, 0, 0, 0, 81, 82,
	204, 656, 206, 657, 83, 658, 659, 0, 84, 210,
	211, 85, 611, 640, 660, 661, 214, 0, 652, 0,
	633, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 282, 93, 94, 0, 634, 636, 0, 635,
	637, 95, 96, 97, 98, 662, 99, 663, 664, 0,
	100, 0, 101, 0, 0, 0, 655, 103, 0, 104,
	0, 0, 0, 599, 105, 106, 642, 643, 621, 0,
	0, 107, 108, 665, 0, 109, 0, 110, 0, 0,
	283, 0, 111, 653, 0, 224, 0, 112, 113, 114,
	649, 651, 285, 0, 117, 0, 115, 0, 284, 116,
	666, 667, 668, 669, 0, 632, 0, 286, 118, 287,
	119, 120, 0, 122, 121, 0, 654, 288, 123, 289,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 594, 134, 622, 650,
	136, 670, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 291, 141, 292, 644, 142, 143, 144, 145,
	0, 645, 146, 238, 147, 0, 148, 149, 150, 671,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 293, 163, 164, 600, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 638, 172,
	173, 294, 174, 672, 243, 175, 0, 181, 176, 177,
	178, 180, 673, 179, 646, 0, 182, 0, 183, 184,
	185, 0, 246, 674, 675, 0, 0, 186, 647, 648,
	620, 187, 188, 189, 190, 0, 0, 191, 192, 193,
	639, 194, 0, 195, 196, 197, 251, 676, 0, 0,
	198, 0, 0, 0, 0, 199, 200, 201, 202, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 592, 0, 0, 0, 0, 593, 0, 0, 601,
	1193, 0, 0, 0, 604, 625, 615, 616, 613, 614,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 865, 80, 0, 0, 0, 0, 641,
	608, 0, 0, 0, 81, 82, 204, 656, 206, 657,
	83, 658, 659, 0, 84, 210, 211, 85, 611, 640,
	660, 661, 214, 0, 652, 0, 633, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 282, 93,
	94, 0, 634, 636, 0, 635, 637, 95, 96, 97,
	98, 662, 99, 663, 664, 0, 100, 0, 101, 0,
	0, 0, 655, 103, 0, 104, 0, 0, 0, 599,
	105, 106, 642, 643, 621, 0, 0, 107, 108, 665,
	0, 109, 0, 110, 0, 0, 283, 0, 111, 653,
	0, 224, 0, 112, 113, 114, 649, 651, 285, 0,
	117, 0, 115, 0, 284, 116, 666, 667, 668, 669,
	0, 632, 0, 286, 118, 287, 119, 120, 0, 122,
	121, 0, 654, 288, 123, 289, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 290, 131, 132,
	135, 133, 594, 134, 622, 650, 136, 670, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 291, 141,
	292, 644, 142, 143, 144, 145, 0, 645, 146, 238,
	147, 0, 148, 149, 150, 671, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	293, 163, 164, 600, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 638, 172, 173, 294, 174, 672,
	243, 175, 0, 181, 176, 177, 178, 180, 673, 179,
	646, 0, 182, 0, 183, 184, 185, 0, 246, 674,
	675, 0, 0, 186, 647, 648, 620, 187, 188, 189,
	190, 0, 0, 191, 192, 193, 639, 194, 0, 195,
	196, 197, 251, 676, 0, 0, 198, 0, 0, 0,
	0, 199, 200, 201, 202, 595, 0, 625, 615, 616,
	613, 614, 605, 0, 0, 0, 591, 592, 0, 0,
	0, 0, 593, 78, 79, 601, 80, 0, 0, 0,
	604, 641, 608, 0, 0, 0, 81, 82, 204, 656,
	206, 657, 83, 658, 659, 0, 84, 210, 211, 85,
	611, 640, 660, 661, 214, 0, 652, 0, 633, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	282, 93, 1963, 0, 634, 636, 0, 635, 637, 95,
	96, 97, 98, 662, 99, 663, 664, 0, 100, 0,
	101, 0, 0, 0, 655, 103, 0, 104, 0, 0,
	0, 599, 105, 106, 642, 643, 621, 0, 0, 107,
	108, 665, 0, 109, 0, 110, 0, 0, 283, 0,
	111, 653, 0, 224, 0, 112, 113, 114, 649, 651,
	285, 0, 117, 0, 115, 0, 284, 116, 666, 667,
	668, 669, 0, 632, 0, 286, 118, 287, 119, 120,
	0, 122, 121, 0, 654, 288, 123, 289, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 290,
	131, 132, 135, 133, 594, 134, 622, 650, 136, 670,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	291, 141, 292, 644, 142, 143, 144, 145, 0, 645,
	146, 238, 147, 0, 148, 149, 150, 671, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 293, 163, 164, 600, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 638, 172, 173, 294,
	174, 672, 243, 175, 0, 181, 176, 177, 178, 180,
	673, 179, 646, 0, 182, 0, 183, 184, 185, 0,
	246, 674, 675, 0, 0, 186, 647, 648, 620, 187,
	188, 1962, 190, 0, 0, 191, 192, 193, 639, 194,
	0, 195, 196, 197, 251, 676, 0, 0, 198, 0,
	0, 0, 0, 199, 200, 201, 202, 595, 0, 625,
	615, 616, 613, 614, 605, 0, 0, 0, 591, 592,
	0, 0, 0, 0, 593, 78, 79, 601, 80, 0,
	0, 0, 604, 641, 608, 0, 0, 0, 81, 82,
	1961, 656, 206, 657, 83, 658, 659, 0, 84, 210,
	211, 85, 611, 640, 660, 661, 214, 0, 652, 0,
	633, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 282, 93, 1963, 0, 634, 636, 0, 635,
	637, 95, 96, 97, 98, 662, 99, 663, 664, 0,
	100, 0, 101, 0, 0, 0, 655, 103, 0, 104,
	0, 0, 0, 599, 105, 106, 642, 643, 621, 0,
	0, 107, 108, 665, 0, 109, 0, 110, 0, 0,
	283, 0, 111, 653, 0, 224, 0, 112, 113, 114,
	649, 651, 285, 0, 117, 0, 115, 0, 284, 116,
	666, 667, 668, 669, 0, 632, 0, 286, 118, 287,
	119, 120, 0, 122, 121, 0, 654, 288, 123, 289,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 594, 134, 622, 650,
	136, 670, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 291, 141, 292, 644, 142, 143, 144, 145,
	0, 645, 146, 238, 147, 0, 148, 149, 150, 671,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 293, 163, 164, 600, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 638, 172,
	173, 294, 174, 672, 243, 175, 0, 181, 176, 177,
	178, 180, 673, 179, 646, 0, 182, 0, 183, 184,
	185, 0, 246, 674, 675, 0, 0, 186, 647, 648,
	620, 187, 188, 1962, 190, 0, 0, 191, 192, 193,
	639, 194, 0, 195, 196, 197, 251, 676, 0, 0,
	198, 0, 0, 0, 0, 199, 200, 201, 202, 595,
	0, 625, 615, 616, 613, 614, 605, 0, 0, 0,
	591, 592, 0, 0, 0, 0, 593, 78, 79, 601,
	80, 0, 0, 0, 604, 641, 608, 0, 0, 0,
	81, 82, 204, 656, 206, 657, 83, 658, 659, 0,
	84, 210, 211, 85, 611, 640, 660, 661, 214, 0,
	652, 0, 633, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 282, 93, 94, 0, 634, 636,
	0, 635, 637, 95, 96, 97, 98, 662, 99, 663,
	664, 0, 100, 0, 101, 0, 0, 0, 655, 103,
	0, 104, 0, 0, 0, 599, 105, 106, 642, 643,
	621, 0, 0, 107, 108, 665, 0, 109, 0, 110,
	0, 0, 283, 0, 111, 653, 0, 224, 0, 112,
	113, 114, 649, 651, 285, 0, 117, 0, 115, 0,
	284, 116, 666, 667, 668, 669, 0, 632, 0, 286,
	118, 287, 119, 120, 0, 122, 121, 0, 654, 288,
	123, 289, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 290, 131, 132, 135, 133, 594, 134,
	622, 650, 136, 670, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 291, 141, 292, 644, 142, 143,
	144, 145, 0, 645, 146, 238, 147, 0, 148, 149,
	150, 671, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 293, 163, 164, 600,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	638, 172, 173, 294, 174, 672, 243, 175, 0, 181,
	176, 177, 178, 180, 673, 179, 646, 0, 182, 0,
	183, 184, 185, 0, 246, 674, 675, 0, 0, 186,
	647, 648, 620, 187, 188, 189, 190, 0, 0, 191,
	192, 193, 639, 194, 0, 195, 196, 197, 251, 676,
	0, 0, 198, 0, 0, 0, 0, 199, 200, 201,
	202, 595, 0, 1222, 615, 616, 613, 614, 605, 0,
	0, 0, 591, 592, 0, 0, 0, 0, 593, 78,
	79, 601, 80, 0, 0, 0, 604, 641, 608, 0,
	0, 0, 81, 82, 204, 656, 206, 657, 83, 658,
	659, 0, 84, 210, 211, 85, 611, 640, 660, 661,
	214, 0, 652, 0, 633, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 282, 93, 94, 0,
	634, 636, 0, 635, 637, 95, 96, 97, 98, 662,
	1225, 663, 664, 0, 100, 0, 101, 0, 0, 0,
	655, 103, 0, 104, 0, 0, 0, 599, 105, 106,
	642, 643, 621, 0, 0, 107, 108, 665, 0, 109,
	0, 110, 0, 0, 283, 0, 111, 653, 0, 224,
	0, 112, 113, 1226, 649, 651, 285, 0, 117, 0,
	115, 0, 284, 116, 666, 667, 668, 669, 0, 632,
	0, 286, 118, 287, 119, 120, 0, 122, 121, 0,
	654, 288, 123, 289, 0, 124, 0, 0, 125, 0,
	126, 1227, 1224, 129, 130, 290, 131, 132, 135, 133,
	594, 134, 622, 650, 136, 670, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 291, 141, 292, 644,
	142, 143, 144, 145, 0, 645, 146, 238, 147, 0,
	148, 149, 150, 671, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 293, 163,
	164, 600, 165, 0, 166, 167, 168, 1228, 0, 241,
	170, 171, 638, 172, 173, 294, 174, 672, 243, 175,
	0, 181, 176, 177, 178, 180, 673, 179, 646, 0,
	182, 0, 183, 184, 185, 0, 246, 674, 675, 0,
	0, 186, 647, 648, 620, 187, 188, 189, 190, 0,
	0, 191, 192, 193, 639, 194, 0, 195, 196, 197,
	251, 676, 0, 0, 198, 0, 0, 0, 0, 199,
	200, 1223, 202, 595, 0, 625, 615, 616, 613, 614,
	605, 0, 0, 0, 591, 592, 0, 0, 0, 0,
	593, 78, 79, 601, 80, 0, 0, 0, 604, 641,
	608, 0, 0, 0, 81, 82, 204, 656, 206, 657,
	83, 658, 659, 0, 84, 210, 211, 85, 611, 640,
	660, 661, 214, 0, 652, 0, 633, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 282, 93,
	94, 0, 634, 636, 0, 635, 637, 95, 96, 97,
	98, 662, 99, 663, 664, 0, 100, 0, 101, 0,
	0, 0, 655, 103, 0, 104, 0, 0, 0, 599,
	105, 106, 642, 643, 621, 0, 0, 107, 108, 665,
	0, 109, 0, 110, 0, 0, 283, 0, 111, 653,
	0, 224, 0, 112, 113, 114, 649, 651, 285, 0,
	117, 0, 115, 0, 284, 116, 666, 667, 668, 669,
	0, 632, 0, 286, 118, 287, 119, 120, 0, 122,
	121, 0, 654, 288, 123, 289, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 290, 131, 132,
	135, 133, 0, 134, 622, 650, 136, 670, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 291, 141,
	292, 644, 142, 143, 144, 145, 0, 645, 146, 238,
	147, 0, 148, 149, 150, 671, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	293, 163, 164, 1240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 638, 172, 173, 294, 174, 672,
	243, 175, 0, 181, 176, 177, 178, 180, 673, 179,
	646, 0, 182, 0, 183, 184, 185, 0, 246, 674,
	675, 0, 0, 186, 647, 648, 620, 187, 188, 189,
	190, 0, 0, 191, 192, 193, 639, 194, 0, 195,
	196, 197, 251, 676, 0, 0, 198, 0, 0, 0,
	0, 199, 200, 201, 202, 0, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 1236, 1237, 0, 0,
	0, 0, 1238, 78, 79, 1239, 80, 0, 0, 0,
	604, 641, 0, 0, 0, 0, 81, 82, 204, 205,
	206, 207, 83, 208, 209, 0, 84, 210, 211, 85,
	0, 640, 212, 213, 214, 0, 652, 0, 633, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	282, 93, 94, 0, 634, 636, 0, 635, 637, 95,
	96, 97, 98, 216, 99, 217, 218, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 642, 643, 0, 0, 0, 107,
	108, 222, 0, 109, 0, 110, 0, 0, 283, 0,
	111, 653, 0, 224, 0, 112, 113, 114, 649, 651,
	285, 0, 117, 0, 115, 0, 284, 116, 227, 228,
	229, 230, 0, 231, 0, 286, 118, 287, 119, 120,
	0, 122, 121, 0, 654, 288, 123, 289, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 290,
	131, 132, 135, 133, 0, 134, 0, 650, 136, 234,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	291, 141, 292, 644, 142, 143, 144, 145, 0, 645,
	146, 238, 147, 0, 148, 149, 150, 239, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 293, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 638, 172, 173, 294,
	174, 242, 243, 175, 0, 181, 176, 177, 178, 180,
	244, 179, 646, 0, 182, 0, 183, 184, 185, 0,
	246, 247, 248, 0, 0, 186, 647, 648, 0, 187,
	188, 189, 190, 502, 0, 191, 192, 193, 639, 194,
	0, 195, 196, 197, 251, 252, 0, 0, 198, 78,
	79, 0, 80, 199, 200, 201, 202, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 1711, 212, 213,
	214, 0, 215, 0, 281, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 282, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 283, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 285, 0, 117, 0,
	115, 0, 284, 116, 227, 228, 229, 230, 0, 231,
	0, 286, 118, 287, 119, 120, 0, 122, 121, 0,
	232, 288, 123, 289, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 290, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 291, 141, 292, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 293, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 64, 241,
	170, 171, 0, 172, 173, 294, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 66, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	506, 252, 0, 0, 198, 0, 0, 0, 62, 199,
	200, 201, 202, 0, 63, 502, 815, 0, 816, 811,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 61, 80, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 0, 215, 0, 281, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 282, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 819, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 808, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 0, 0, 283, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 225, 226, 285, 0,
	117, 0, 115, 0, 284, 116, 227, 228, 229, 230,
	0, 231, 0, 286, 118, 287, 119, 120, 0, 122,
	121, 0, 232, 288, 123, 289, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 290, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 809, 0, 0, 0, 140, 235, 291, 141,
	292, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	293, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 0, 172, 173, 294, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 807, 187, 188, 189,
	190, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 502, 815, 198, 816, 811, 806,
	0, 199, 200, 201, 202, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 817, 812, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 214, 0, 215, 0, 281, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 802, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 808, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 283, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 285, 0, 117,
	0, 115, 0, 284, 116, 227, 228, 229, 230, 0,
	231, 0, 286, 118, 287, 119, 120, 0, 122, 121,
	0, 232, 288, 123, 289, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 809, 0, 0, 0, 140, 235, 291, 141, 292,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 294, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 807, 187, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 502, 815, 198, 816, 811, 806, 0,
	199, 200, 201, 202, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 817, 812, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 281, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 282, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 808, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 283, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 285, 0, 117, 0,
	115, 0, 284, 116, 227, 228, 229, 230, 0, 231,
	0, 286, 118, 287, 119, 120, 0, 122, 121, 0,
	232, 288, 123, 289, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 290, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	809, 0, 0, 0, 140, 235, 291, 141, 292, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 293, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 294, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 807, 187, 188, 189, 190, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 75, 0, 198, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 817, 812, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 225, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	464, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 64, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	66, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 506,
	252, 0, 0, 198, 75, 0, 0, 62, 199, 200,
	201, 202, 0, 63, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 203, 0,
	0, 0, 1126, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 214, 0, 215, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 0, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 0, 0, 117,
	0, 115, 0, 0, 116, 227, 228, 229, 230, 0,
	231, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 232, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 0, 141, 0,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 0,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 64,
	241, 170, 171, 0, 172, 173, 0, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 66, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 0, 187, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 506, 252, 0, 0, 198, 75, 0, 0, 62,
	199, 200, 201, 202, 0, 63, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	203, 0, 0, 0, 61, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	0, 212, 213, 214, 0, 215, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 220, 221, 0, 0, 0, 107, 108,
	222, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	223, 0, 224, 0, 112, 113, 114, 225, 226, 0,
	0, 117, 0, 115, 0, 0, 116, 227, 228, 229,
	230, 0, 231, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 232, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 233, 136, 234, 137,
	138, 0, 139, 0, 464, 0, 0, 140, 235, 0,
	141, 0, 236, 142, 143, 144, 145, 0, 237, 146,
	238, 147, 0, 148, 149, 150, 239, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 0, 172, 173, 0, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 245, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 249, 250, 0, 187, 188,
	189, 190, 75, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 1126, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 225, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 0, 75, 0, 0, 199, 200,
	201, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 203,
	0, 0, 0, 709, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 0, 215, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 225, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 0, 187, 188, 189,
	190, 75, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 0, 0, 198, 78, 79, 0,
	80, 199, 200, 201, 202, 203, 0, 0, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 1028, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 225, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	144, 145, 0, 237, 146, 238, 147, 0, 148, 149,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 0,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 75, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 251, 252,
	0, 0, 198, 78, 79, 0, 80, 199, 200, 201,
	202, 203, 0, 0, 0, 0, 81, 82, 204, 205,
	206, 207, 83, 208, 209, 0, 84, 210, 211, 85,
	0, 1608, 212, 213, 214, 0, 215, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 216, 99, 217, 218, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 220, 221, 0, 0, 0, 107,
	108, 222, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 223, 0, 224, 0, 112, 113, 114, 225, 226,
	0, 0, 117, 0, 115, 0, 0, 116, 227, 228,
	229, 230, 0, 231, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 232, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 233, 136, 234,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	0, 141, 0, 236, 142, 143, 144, 145, 0, 237,
	146, 238, 147, 0, 148, 149, 150, 239, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 0, 172, 173, 0,
	174, 242, 243, 175, 0, 181, 176, 177, 178, 180,
	244, 179, 245, 0, 182, 0, 183, 184, 185, 0,
	246, 247, 248, 0, 0, 186, 249, 250, 0, 187,
	188, 189, 190, 0, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 251, 252, 0, 0, 198, 0,
	0, 0, 0, 199, 200, 201, 202, 625, 615, 616,
	613, 614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 687, 0, 0,
	0, 203, 0, 0, 0, 0, 81, 82, 204, 656,
	206, 657, 83, 658, 659, 0, 84, 210, 211, 85,
	0, 0, 660, 661, 214, 0, 215, 0, 281, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	282, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 662, 99, 663, 664, 0, 100, 0,
	101, 0, 0, 0, 655, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 220, 221, 621, 0, 0, 107,
	108, 665, 0, 109, 0, 110, 0, 0, 283, 0,
	111, 223, 0, 224, 0, 112, 113, 114, 225, 226,
	285, 0, 117, 0, 115, 0, 284, 116, 666, 667,
	668, 669, 0, 632, 0, 286, 118, 287, 119, 120,
	0, 122, 121, 0, 232, 288, 123, 289, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 290,
	131, 132, 135, 133, 0, 134, 622, 233, 136, 670,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	291, 141, 292, 236, 142, 143, 144, 145, 0, 237,
	146, 238, 147, 0, 148, 149, 150, 671, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 293, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 0, 172, 173, 294,
	174, 672, 243, 175, 0, 181, 176, 177, 178, 180,
	673, 179, 245, 0, 182, 0, 183, 184, 185, 0,
	246, 674, 675, 0, 0, 186, 249, 250, 620, 187,
	188, 189, 190, 75, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 251, 676, 0, 0, 198, 78,
	79, 0, 80, 199, 200, 201, 202, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 786, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 785, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 75, 198, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 789, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 502, 198, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 789, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 281, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 282, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 283, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 285, 0, 117, 0,
	115, 0, 284, 116, 227, 228, 229, 230, 0, 231,
	0, 286, 118, 287, 119, 120, 0, 122, 121, 0,
	232, 288, 123, 289, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 290, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 291, 141, 292, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 293, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 294, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 75,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 0, 198, 78, 79, 0, 80, 199,
	200, 201, 202, 203, 0, 0, 0, 0, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 0, 84, 210,
	211, 85, 0, 0, 212, 213, 214, 994, 215, 0,
	0, 0, 86, 87, 88, 0, 89, 992, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 216, 99, 217, 218, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 219, 105, 106, 220, 221, 0, 1097,
	0, 107, 108, 222, 0, 109, 0, 110, 997, 0,
	0, 0, 111, 223, 0, 224, 0, 112, 113, 114,
	225, 226, 0, 0, 117, 1095, 115, 0, 0, 116,
	227, 228, 229, 230, 0, 231, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 232, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 233,
	136, 234, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 0, 141, 0, 236, 142, 143, 144, 145,
	0, 237, 146, 238, 147, 996, 148, 149, 150, 239,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 0, 172,
	173, 0, 174, 242, 243, 175, 0, 181, 176, 177,
	178, 180, 244, 179, 245, 0, 182, 0, 183, 184,
	185, 0, 246, 247, 248, 0, 0, 186, 249, 250,
	0, 187, 188, 189, 190, 75, 1096, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 251, 252, 0, 0,
	198, 78, 79, 0, 80, 199, 200, 201, 202, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 994, 215, 0, 0, 989, 86, 87,
	88, 0, 89, 992, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 997, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 988, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 996, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 0, 187, 188, 189,
	190, 75, 995, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 0, 0, 198, 78, 79, 0,
	80, 199, 200, 201, 202, 203, 0, 1575, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 0, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 225, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	144, 145, 0, 237, 146, 238, 147, 0, 148, 149,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 0,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 75, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 251, 252,
	0, 0, 198, 78, 79, 0, 80, 199, 200, 201,
	202, 203, 0, 0, 0, 0, 81, 82, 204, 205,
	206, 207, 83, 208, 209, 0, 84, 210, 211, 85,
	0, 0, 212, 213, 214, 0, 215, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 216, 99, 217, 218, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 220, 221, 0, 0, 0, 107,
	108, 222, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 223, 0, 224, 0, 112, 113, 114, 225, 226,
	0, 0, 117, 0, 115, 0, 0, 116, 227, 228,
	229, 230, 0, 231, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 232, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 233, 136, 234,
	137, 138, 0, 139, 0, 464, 0, 0, 140, 235,
	0, 141, 0, 236, 142, 143, 144, 145, 0, 237,
	146, 238, 147, 0, 148, 149, 150, 239, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 0, 172, 173, 0,
	174, 242, 243, 175, 0, 181, 176, 177, 178, 180,
	244, 179, 245, 0, 182, 0, 183, 184, 185, 0,
	246, 247, 248, 0, 0, 186, 249, 250, 0, 187,
	188, 189, 190, 75, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 251, 252, 0, 0, 198, 78,
	79, 0, 80, 199, 200, 201, 202, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 736, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 464, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 75,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 0, 198, 78, 79, 514, 80, 199,
	200, 201, 202, 203, 0, 0, 0, 0, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 0, 84, 210,
	211, 85, 0, 0, 212, 213, 214, 0, 215, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 216, 99, 217, 218, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 219, 105, 106, 220, 221, 0, 0,
	0, 107, 108, 222, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 223, 0, 224, 0, 112, 113, 114,
	225, 226, 0, 0, 117, 0, 115, 0, 0, 116,
	227, 228, 229, 230, 0, 231, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 232, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 233,
	136, 234, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 0, 141, 0, 236, 142, 143, 144, 145,
	0, 237, 146, 238, 147, 0, 148, 149, 150, 239,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 0, 172,
	173, 0, 174, 242, 243, 175, 0, 181, 176, 177,
	178, 180, 244, 179, 245, 0, 182, 0, 183, 184,
	185, 0, 246, 247, 248, 0, 0, 186, 249, 250,
	0, 187, 188, 189, 190, 75, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 251, 252, 0, 0,
	198, 78, 79, 0, 80, 199, 200, 201, 202, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 0, 215, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 476, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 464, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 0, 187, 188, 189,
	190, 75, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 0, 0, 198, 78, 79, 0,
	80, 199, 200, 201, 202, 203, 0, 0, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 0, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 469, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 464,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	144, 145, 0, 237, 146, 238, 147, 0, 148, 149,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 0,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 75, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 251, 252,
	0, 0, 198, 78, 79, 379, 80, 199, 200, 201,
	202, 203, 0, 0, 0, 0, 81, 82, 204, 205,
	206, 207, 83, 208, 209, 0, 84, 210, 211, 85,
	0, 0, 212, 213, 214, 0, 215, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 216, 99, 217, 218, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 220, 221, 0, 0, 0, 107,
	108, 222, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 223, 0, 224, 0, 112, 113, 114, 225, 226,
	0, 0, 117, 0, 115, 0, 0, 116, 227, 228,
	229, 230, 0, 231, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 232, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 233, 136, 234,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	0, 141, 0, 236, 142, 143, 144, 145, 0, 237,
	146, 238, 378, 0, 148, 149, 150, 239, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 0, 172, 173, 0,
	174, 242, 243, 175, 0, 181, 176, 177, 178, 180,
	244, 179, 245, 0, 182, 0, 183, 184, 185, 0,
	246, 247, 248, 0, 0, 186, 249, 250, 0, 187,
	188, 189, 190, 75, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 251, 252, 0, 0, 198, 78,
	79, 0, 80, 199, 200, 201, 202, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 75,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 0, 198, 78, 79, 0, 80, 199,
	200, 201, 202, 203, 0, 0, 0, 0, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 0, 84, 210,
	211, 85, 0, 0, 212, 213, 214, 0, 215, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 216, 99, 217, 218, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 219, 105, 106, 220, 221, 0, 0,
	0, 107, 108, 222, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 223, 0, 224, 0, 112, 113, 114,
	1286, 226, 0, 0, 117, 0, 115, 0, 0, 116,
	227, 228, 229, 230, 0, 231, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 232, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 233,
	136, 234, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 0, 141, 0, 236, 142, 143, 144, 145,
	0, 237, 146, 238, 147, 0, 148, 149, 150, 239,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 0, 172,
	173, 0, 174, 242, 243, 175, 0, 181, 176, 177,
	178, 180, 244, 179, 245, 0, 182, 0, 183, 184,
	185, 0, 246, 247, 248, 0, 0, 186, 249, 250,
	0, 187, 188, 189, 190, 75, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 251, 252, 0, 0,
	198, 78, 79, 0, 80, 199, 200, 201, 202, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 0, 215, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 1284, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 0, 187, 188, 189,
	190, 75, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 0, 0, 198, 78, 79, 0,
	80, 199, 200, 201, 202, 203, 0, 0, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 0, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 1273, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	144, 145, 0, 237, 146, 238, 147, 0, 148, 149,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 0,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 75, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 251, 252,
	0, 0, 198, 78, 79, 0, 80, 199, 200, 201,
	202, 203, 0, 0, 0, 0, 81, 82, 204, 205,
	206, 207, 83, 208, 209, 0, 84, 210, 211, 85,
	0, 0, 212, 213, 214, 0, 215, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 216, 99, 217, 218, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 220, 221, 0, 0, 0, 107,
	108, 222, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 223, 0, 224, 0, 112, 113, 114, 856, 226,
	0, 0, 117, 0, 115, 0, 0, 116, 227, 228,
	229, 230, 0, 231, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 232, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 233, 136, 234,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	0, 141, 0, 236, 142, 143, 144, 145, 0, 237,
	146, 238, 147, 0, 148, 149, 150, 239, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 0, 172, 173, 0,
	174, 242, 243, 175, 0, 181, 176, 177, 178, 180,
	244, 179, 245, 0, 182, 0, 183, 184, 185, 0,
	246, 247, 248, 0, 0, 186, 249, 250, 0, 187,
	188, 189, 190, 75, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 251, 252, 0, 0, 198, 78,
	79, 0, 80, 199, 200, 201, 202, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 393, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 75,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 0, 198, 78, 79, 0, 80, 199,
	200, 201, 202, 203, 0, 721, 0, 0, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 0, 84, 210,
	211, 85, 0, 0, 212, 213, 214, 0, 215, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 216, 99, 217, 218, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 219, 105, 106, 220, 221, 0, 0,
	0, 107, 108, 222, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 223, 0, 224, 0, 112, 113, 114,
	225, 226, 0, 0, 117, 0, 115, 0, 0, 116,
	227, 228, 229, 230, 0, 231, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 232, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 233,
	136, 234, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 0, 141, 0, 236, 142, 143, 144, 145,
	0, 237, 146, 238, 147, 0, 148, 149, 150, 239,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 0, 0,
	173, 0, 174, 242, 243, 175, 0, 181, 176, 177,
	178, 180, 244, 179, 245, 0, 182, 0, 183, 184,
	185, 0, 246, 247, 248, 0, 0, 186, 249, 250,
	0, 187, 188, 189, 190, 75, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 251, 252, 0, 0,
	198, 78, 79, 0, 80, 199, 200, 201, 202, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 0, 215, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 566, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 0, 187, 188, 189,
	190, 75, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 0, 0, 198, 78, 79, 0,
	80, 199, 200, 201, 202, 203, 0, 0, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 0, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 561, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	144, 145, 0, 237, 146, 238, 147, 0, 148, 149,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 0,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 75, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 251, 252,
	0, 0, 198, 78, 79, 0, 80, 199, 200, 201,
	202, 203, 0, 0, 0, 0, 81, 82, 204, 205,
	206, 207, 83, 208, 209, 0, 84, 210, 211, 85,
	0, 0, 212, 213, 520, 0, 215, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 216, 99, 217, 218, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 220, 221, 0, 0, 0, 107,
	108, 222, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 223, 0, 224, 0, 112, 113, 114, 225, 226,
	0, 0, 117, 0, 115, 0, 0, 116, 227, 228,
	229, 230, 0, 231, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 232, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 404, 0,
	131, 132, 135, 133, 0, 134, 0, 233, 136, 234,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	0, 141, 0, 236, 142, 143, 144, 145, 0, 237,
	146, 238, 147, 0, 148, 149, 150, 239, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 0, 172, 173, 0,
	174, 242, 243, 175, 0, 181, 176, 177, 178, 180,
	244, 179, 245, 0, 182, 0, 183, 184, 185, 0,
	403, 247, 248, 0, 0, 399, 249, 250, 0, 187,
	188, 189, 190, 75, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 251, 252, 0, 0, 198, 78,
	79, 0, 80, 199, 200, 201, 202, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 404, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 403, 247, 248, 0,
	0, 399, 249, 250, 0, 187, 188, 189, 190, 75,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 0, 198, 78, 79, 0, 80, 199,
	200, 201, 202, 203, 0, 0, 0, 0, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 0, 84, 210,
	211, 85, 0, 0, 212, 213, 214, 0, 215, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 216, 99, 217, 218, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 219, 105, 106, 220, 221, 0, 0,
	0, 107, 108, 222, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 223, 0, 224, 0, 112, 113, 114,
	498, 226, 0, 0, 117, 0, 115, 0, 0, 116,
	227, 228, 229, 230, 0, 231, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 232, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 233,
	136, 234, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 0, 141, 0, 236, 142, 143, 144, 145,
	0, 237, 146, 238, 147, 0, 148, 149, 150, 239,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 0, 172,
	173, 0, 174, 242, 243, 175, 0, 181, 176, 177,
	178, 180, 244, 179, 245, 0, 182, 0, 183, 184,
	185, 0, 246, 247, 248, 0, 0, 186, 249, 250,
	0, 187, 188, 189, 190, 75, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 251, 252, 0, 0,
	198, 78, 79, 0, 80, 199, 200, 201, 202, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 0, 215, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 495, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 171, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 0, 187, 188, 189,
	190, 75, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 0, 0, 198, 78, 79, 0,
	80, 199, 200, 201, 202, 203, 0, 0, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 0, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 492, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	144, 145, 0, 237, 146, 238, 147, 0, 148, 149,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 0,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 75, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 251, 252,
	0, 0, 198, 78, 79, 0, 80, 199, 200, 201,
	202, 203, 0, 0, 0, 0, 81, 82, 204, 205,
	206, 207, 83, 208, 209, 0, 84, 210, 211, 85,
	0, 0, 212, 213, 214, 0, 215, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 216, 99, 217, 218, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 219, 105, 106, 220, 221, 0, 0, 0, 107,
	108, 222, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 223, 0, 224, 0, 112, 113, 114, 490, 226,
	0, 0, 117, 0, 115, 0, 0, 116, 227, 228,
	229, 230, 0, 231, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 232, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 233, 136, 234,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	0, 141, 0, 236, 142, 143, 144, 145, 0, 237,
	146, 238, 147, 0, 148, 149, 150, 239, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 240, 165, 0, 166, 167,
	168, 169, 0, 241, 170, 171, 0, 172, 173, 0,
	174, 242, 243, 175, 0, 181, 176, 177, 178, 180,
	244, 179, 245, 0, 182, 0, 183, 184, 185, 0,
	246, 247, 248, 0, 0, 186, 249, 250, 0, 187,
	188, 189, 190, 75, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 251, 252, 0, 0, 198, 78,
	79, 0, 80, 199, 200, 201, 202, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 472, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 0, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 75,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 0, 198, 78, 79, 0, 80, 199,
	200, 201, 202, 203, 0, 0, 0, 0, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 0, 84, 210,
	211, 85, 0, 0, 212, 213, 214, 0, 215, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 216, 99, 217, 218, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 219, 105, 106, 220, 221, 0, 0,
	0, 107, 108, 222, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 223, 0, 224, 0, 112, 113, 114,
	225, 226, 0, 0, 117, 0, 115, 0, 0, 116,
	227, 228, 229, 230, 0, 231, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 232, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 233,
	136, 234, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 0, 141, 0, 236, 142, 143, 144, 145,
	0, 237, 146, 238, 147, 0, 148, 149, 150, 239,
	453, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 0, 172,
	173, 0, 174, 242, 243, 175, 0, 181, 176, 177,
	178, 180, 244, 179, 245, 0, 182, 0, 183, 184,
	185, 0, 246, 247, 248, 0, 0, 186, 249, 250,
	0, 187, 188, 189, 190, 75, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 251, 252, 0, 0,
	198, 78, 79, 0, 80, 199, 200, 201, 202, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 0, 0,
	212, 213, 214, 0, 215, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 225, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 0, 0, 396, 0, 0,
	125, 0, 126, 127, 128, 129, 404, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 398, 165, 0, 166, 167, 168, 169,
	0, 241, 170, 397, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 0, 183, 184, 185, 0, 403, 247,
	248, 0, 0, 399, 249, 250, 0, 187, 188, 189,
	190, 75, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 251, 252, 0, 0, 198, 78, 79, 0,
	80, 199, 200, 201, 202, 203, 0, 0, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 0, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 225, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	0, 145, 0, 237, 146, 238, 147, 0, 148, 0,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	0, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 0,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 251, 252,
	0, 0, 198, 0, 0, 0, 0, 199, 200, 201,
	202, 881, 882, 0, 901, 902, 903, 911, 912, 913,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 884, 0, 915, 0, 0, 0,
	0, 881, 882, 0, 901, 902, 903, 911, 912, 913,
	0, 0, 0, 0, 0, 883, 0, 904, 0, 0,
	0, 898, 0, 0, 884, 0, 915, 0, 0, 0,
	0, 881, 882, 0, 901, 902, 903, 911, 912, 913,
	0, 0, 0, 0, 0, 883, 0, 904, 0, 0,
	0, 898, 0, 0, 884, 0, 915, 0, 0, 0,
	0, 881, 882, 0, 901, 902, 903, 911, 912, 913,
	889, 0, 0, 0, 0, 883, 0, 904, 0, 0,
	0, 898, 0, 0, 884, 0, 915, 0, 908, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 0, 914, 0, 883, 0, 0, 0, 0,
	0, 898, 0, 0, 0, 906, 0, 0, 908, 916,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 906, 0, 0, 908, 916,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 906, 0, 0, 908, 916,
	0, 899, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 0, 905, 906, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 907, 0, 909, 895, 896,
	897, 0, 894, 891, 892, 893, 885, 886, 887, 888,
	890, 0, 910, 0, 0, 900, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 907, 0, 909, 895, 896,
	897, 0, 894, 891, 892, 893, 885, 886, 887, 888,
	890, 0, 910, 0, 0, 0, 1910, 0, 0, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 895, 896,
	897, 0, 894, 891, 892, 893, 885, 886, 887, 888,
	890, 0, 910, 0, 0, 0, 1908, 0, 0, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 895, 896,
	897, 0, 894, 891, 892, 893, 885, 886, 887, 888,
	890, 0, 910, 0, 881, 882, 1883, 901, 902, 903,
	911, 912, 913, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 884, 0, 915,
	0, 0, 0, 0, 881, 882, 0, 901, 902, 903,
	911, 912, 913, 0, 0, 0, 0, 0, 883, 0,
	904, 0, 0, 0, 898, 0, 0, 884, 0, 915,
	0, 0, 0, 0, 881, 882, 0, 901, 902, 903,
	911, 912, 913, 0, 0, 0, 0, 0, 883, 0,
	904, 0, 0, 0, 898, 0, 0, 884, 0, 915,
	0, 0, 0, 0, 881, 882, 0, 901, 902, 903,
	911, 912, 913, 889, 0, 0, 0, 0, 883, 0,
	904, 0, 0, 0, 898, 0, 0, 884, 0, 915,
	0, 908, 916, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 914, 0, 883, 0,
	0, 0, 0, 0, 898, 0, 0, 0, 906, 0,
	0, 908, 916, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 914, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 905, 906, 0,
	0, 908, 916, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 914, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 905, 906, 0,
	0, 908, 916, 0, 899, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 914, 0, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 905, 906, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	909, 895, 896, 897, 0, 894, 891, 892, 893, 885,
	886, 887, 888, 890, 0, 910, 0, 0, 900, 1858,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	909, 895, 896, 897, 0, 894, 891, 892, 893, 885,
	886, 887, 888, 890, 0, 910, 0, 0, 0, 1853,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	0, 895, 896, 897, 0, 894, 891, 892, 893, 885,
	886, 887, 888, 890, 0, 910, 0, 0, 0, 1849,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	0, 895, 896, 897, 0, 894, 891, 892, 893, 885,
	886, 887, 888, 890, 0, 910, 0, 881, 882, 1779,
	901, 902, 903, 911, 912, 913, 0, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	884, 0, 915, 0, 0, 0, 0, 881, 882, 0,
	901, 902, 903, 911, 912, 913, 0, 0, 0, 0,
	0, 883, 0, 904, 0, 0, 0, 898, 0, 0,
	884, 0, 915, 0, 0, 0, 0, 881, 882, 0,
	901, 902, 903, 911, 912, 913, 0, 0, 0, 0,
	0, 883, 0, 904, 0, 0, 0, 898, 0, 0,
	884, 0, 915, 0, 0, 0, 0, 881, 882, 0,
	901, 902, 903, 911, 912, 913, 889, 0, 0, 0,
	0, 883, 0, 904, 0, 0, 0, 898, 0, 0,
	884, 0, 915, 0, 908, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 0, 0, 914,
	0, 883, 0, 0, 0, 0, 0, 898, 0, 0,
	0, 906, 0, 0, 908, 916, 0, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 0, 0, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 906, 0, 0, 908, 916, 0, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 0, 0, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 906, 0, 0, 908, 916, 0, 899, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 909, 0, 0, 0, 0, 0, 0,
	905, 906, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 909, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 909, 895, 896, 897, 0, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	0, 900, 1778, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 909, 895, 896, 897, 0, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	0, 0, 1677, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 895, 896, 897, 0, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	0, 0, 1611, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 895, 896, 897, 0, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	881, 882, 1595, 901, 902, 903, 911, 912, 913, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 884, 0, 915, 0, 0, 0, 0,
	881, 882, 0, 901, 902, 903, 911, 912, 913, 0,
	0, 0, 0, 0, 883, 0, 904, 0, 0, 0,
	898, 0, 0, 884, 0, 915, 0, 0, 0, 0,
	881, 882, 0, 901, 902, 903, 911, 912, 913, 0,
	0, 0, 0, 0, 883, 0, 904, 0, 0, 0,
	898, 0, 0, 884, 0, 915, 0, 0, 0, 0,
	881, 882, 0, 901, 902, 903, 911, 912, 913, 889,
	0, 0, 0, 0, 883, 0, 904, 0, 0, 0,
	898, 0, 0, 884, 0, 915, 0, 908, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 889,
	0, 0, 914, 0, 883, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 906, 0, 0, 908, 916, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 889,
	1983, 0, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 906, 0, 0, 908, 916, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 889,
	0, 1467, 914, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 906, 0, 0, 908, 916, 0,
	899, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 0, 914, 0, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 905, 906, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 900, 0, 0, 1982, 0, 0,
	0, 0, 0, 0, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 909, 895, 896, 897,
	0, 894, 891, 892, 893, 885, 886, 887, 888, 890,
	0, 910, 0, 0, 900, 1194, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 909, 895, 896, 897,
	0, 894, 891, 892, 893, 885, 886, 887, 888, 890,
	0, 910, 0, 1402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 895, 896, 897,
	0, 894, 891, 892, 893, 885, 886, 887, 888, 890,
	0, 910, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 895, 896, 897,
	0, 894, 891, 892, 893, 885, 886, 887, 888, 890,
	0, 910, 881, 882, 0, 901, 902, 903, 911, 912,
	913, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 1113, 0, 884, 0, 915, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 881, 882, 0,
	901, 902, 903, 911, 912, 913, 883, 0, 0, 0,
	0, 0, 898, 904, 0, 0, 0, 917, 0, 0,
	884, 0, 915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 883, 0, 0, 0, 0, 0, 898, 0, 0,
	0, 881, 882, 0, 901, 902, 903, 911, 912, 913,
	0, 889, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 884, 0, 915, 0, 0, 908,
	916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 914, 883, 889, 0, 0, 0,
	0, 898, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 899, 0, 908, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 906, 0, 0, 0, 0, 0, 899, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 908, 916,
	905, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 909, 0,
	0, 0, 0, 0, 0, 906, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 909, 905, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 895,
	896, 897, 0, 894, 891, 892, 893, 885, 886, 887,
	888, 890, 0, 910, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 907, 0, 0, 895, 896, 897, 0, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 881, 882, 0,
	901, 902, 903, 911, 912, 913, 0, 0, 0, 0,
	0, 0, 0, 904, 1435, 1436, 0, 1453, 1454, 1455,
	884, 0, 915, 0, 0, 907, 0, 0, 895, 896,
	897, 0, 894, 891, 892, 893, 885, 886, 887, 888,
	890, 883, 910, 0, 0, 881, 882, 898, 901, 902,
	903, 911, 912, 913, 0, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 1450, 0, 0, 0, 884, 0,
	915, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 898, 889, 0, 0, 0,
	0, 0, 881, 882, 0, 901, 902, 903, 911, 912,
	913, 0, 0, 1441, 908, 916, 0, 0, 904, 0,
	0, 0, 1468, 0, 0, 884, 0, 915, 0, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 906, 0, 0, 889, 0, 883, 899, 0, 1473,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 908, 916, 1451, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 906,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 905, 908,
	916, 0, 0, 909, 0, 0, 0, 0, 1452, 0,
	0, 0, 881, 882, 914, 901, 902, 903, 911, 912,
	913, 0, 0, 1599, 0, 0, 906, 0, 904, 0,
	0, 0, 899, 0, 0, 884, 0, 915, 0, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 0, 905, 883, 0, 0, 0,
	0, 907, 898, 0, 895, 896, 897, 0, 894, 891,
	892, 893, 885, 886, 887, 888, 890, 0, 910, 0,
	0, 1447, 1448, 1449, 0, 1446, 1443, 1444, 1445, 1437,
	1438, 1439, 1440, 1442, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 909, 907,
	0, 889, 895, 896, 897, 0, 894, 891, 892, 893,
	885, 886, 887, 888, 890, 0, 910, 0, 0, 908,
	916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 881, 882, 914, 901, 902, 903, 911, 912,
	913, 0, 0, 0, 0, 0, 906, 0, 904, 0,
	0, 0, 899, 0, 0, 884, 907, 915, 0, 895,
	896, 897, 0, 894, 891, 892, 893, 885, 886, 887,
	888, 890, 0, 910, 0, 905, 883, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 1433, 881, 882,
	0, 901, 902, 903, 911, 912, 913, 0, 0, 0,
	0, 0, 0, 0, 904, 0, 0, 0, 1426, 0,
	0, 884, 0, 915, 0, 0, 900, 0, 881, 882,
	0, 901, 902, 903, 911, 912, 913, 0, 909, 0,
	0, 889, 883, 0, 904, 0, 0, 0, 898, 0,
	0, 884, 0, 915, 0, 0, 0, 0, 0, 908,
	916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 914, 0, 0, 0, 898, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 907, 889, 0, 895,
	896, 897, 0, 894, 891, 892, 893, 885, 886, 887,
	888, 890, 0, 910, 0, 908, 916, 0, 0, 0,
	1435, 1436, 0, 1453, 1454, 1455, 0, 889, 0, 0,
	914, 0, 0, 0, 0, 0, 1747, 0, 0, 0,
	0, 0, 906, 0, 0, 908, 916, 0, 899, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	914, 0, 0, 0, 0, 0, 0, 0, 909, 0,
	1450, 905, 906, 0, 0, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 909, 0, 907, 0, 0, 895,
	896, 897, 0, 894, 891, 892, 893, 885, 886, 887,
	888, 890, 900, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 909, 0, 881, 882, 0, 901,
	902, 903, 911, 912, 913, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 915, 907, 0, 0, 895, 896, 897, 0, 894,
	891, 892, 893, 885, 886, 887, 888, 890, 0, 910,
	883, 0, 0, 0, 1435, 1436, 898, 1453, 1454, 1455,
	0, 0, 907, 0, 0, 895, 896, 897, 0, 894,
	891, 892, 893, 885, 886, 887, 888, 890, 0, 910,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 881, 882, 0, 901, 902, 903, 911, 912,
	913, 0, 0, 0, 1450, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 915, 0, 0,
	0, 0, 0, 908, 916, 1435, 1436, 0, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 883, 0, 914, 0,
	0, 1588, 898, 0, 0, 0, 0, 0, 0, 0,
	906, 0, 0, 1441, 0, 0, 899, 1447, 1448, 1449,
	0, 1446, 1443, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	0, 0, 1457, 0, 0, 1450, 0, 0, 1435, 1436,
	0, 1453, 1454, 1455, 0, 0, 1456, 0, 0, 0,
	0, 889, 0, 0, 1587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 908,
	916, 0, 1435, 1436, 0, 1453, 1454, 1455, 0, 0,
	900, 0, 0, 0, 1441, 0, 0, 0, 1450, 0,
	0, 0, 909, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 1451, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 895, 896, 897, 0, 894, 891, 892,
	893, 885, 886, 887, 888, 890, 900, 910, 0, 0,
	1456, 1441, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 1447, 1448, 1449, 1456, 1446, 1443, 1444, 1445, 1437,
	1438, 1439, 1440, 1442, 0, 759, 753, 776, 747, 767,
	766, 0, 1451, 749, 748, 0, 0, 0, 778, 777,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 895,
	896, 897, 0, 894, 891, 892, 893, 885, 886, 887,
	888, 890, 1452, 910, 0, 0, 0, 0, 0, 772,
	0, 764, 763, 0, 0, 0, 0, 0, 0, 0,
	762, 0, 1447, 1448, 1449, 0, 1446, 1443, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 0, 1452, 761, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 755, 756, 757, 0, 775,
	0, 0, 0, 0, 0, 1447, 1448, 1449, 0, 1446,
	1443, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 765, 0, 0, 0, 1447,
	1448, 1449, 0, 1446, 1443, 1444, 1445, 1437, 1438, 1439,
	1440, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 758, 752, 0,
	0, 0, 0, 0, 0, 0, 780, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 773, 774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 779,
}
var sqlPact = [...]int{

	2783, -1000, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 648, 17319, -1000,
	-1000, -1000, -1000, -1000, -1000, 637, 631, 188, 4858, 17319,
	17319, 17053, 1005, 1005, 18649, -1000, -1000, 21841, -1000, 3557,
	445, 448, 445, 445, 451, 18649, 541, 799, 120, -1000,
	824, -6, 21575, 17319, 1273, 19, 15723, 283, 2783, 16787,
	21309, 17319, 16521, 341, 26, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1105, 1007, 1003, 15723, 21043, 20777, 20511,
	20245, -1000, 10769, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 662, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 294, 293, -1000, 16255, -1000,
	857, -1000, 17, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 845, -1000, 17319, -1000, -1000, 19979, 19713, 291, 773,
	-1000, -1000, 523, 370, 1277, -1000, 35, -1000, -1000, -1000,
	1103, -1000, 843, 1101, 1100, 1097, 1092, 1091, 1089, 369,
	844, 437, -1000, 773, -1000, 773, -1000, -1000, -1000, 514,
	18649, -1000, 15723, -1000, 19447, 17319, 17319, 1016, 19181, -1000,
	824, -1000, -1000, -1000, 876, 1262, 1262, 1262, 1266, 129,
	123, 120, 11, 17319, -1000, 288, 11, 6635, 6635, -1000,
	-1000, 283, -1000, 326, 13543, -1000, 7851, -1000, 739, 1174,
	390, 612, 1172, -64, 690, 686, 1170, 565, 12728, 26,
	-1000, -1000, -1000, 4568, 15723, 17319, 17319, 582, 18915, -1000,
	1169, 130, 1168, -1000, 124, 1165, -1000, 124, 1164, 12,
	-1000, -1000, -1000, -1000, -1000, -1000, 283, 15989, 17319, 1302,
	25309, -1000, 9627, -1000, -1000, 14099, 1027, 14099, -1000, -1000,
	1298, -1000, 9627, -1000, 16, 15, 962, 986, 11340, 11061,
	1212, 933, -1000, -1000, -1000, 34, 4858, 17319, 1116, 14099,
	17319, 17319, 17319, 17319, 17319, 17319, -1000, 954, -1000, -1000,
	17319, 17319, -1000, 14, 13, -1000, 18649, -1000, 132, -1000,
	276, 917, 371, 133, 18383, 371, 910, -1000, 876, -1000,
	797, 950, 8751, 9627, 120, -1000, -1000, 120, 120, 9627,
	-1000, -1000, 17319, 11, 1294, 17319, 102, -1000, 23997, -1000,
	-1000, 9627, 9627, 9627, 9627, 9627, 760, 317, -1000, 275,
	274, 5756, -1000, -1000, 1400, -1000, -1000, -1000, 131, -1000,
	-1000, 9627, 26, -1000, -1000, -1000, -1000, 273, 1420, 405,
	-1000, -1000, -1000, 387, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1112, 271, 265, -1000, -1000, -1000, -1000,
	263, 262, 257, 255, 252, 250, 248, 247, 244, 242,
	239, 233, 225, 222, 221, 722, -1000, 402, -1000, -1000,
	402, 402, -1000, 212, 212, 217, -1000, -1000, -1000, -1000,
	212, -1000, -1000, -1000, 363, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 218, 102, -1000, -1000, -1000, 17319, 7, -1000,
	24758, -1000, -15, 749, -1000, 15191, 1241, 1240, 1237, 15723,
	1279, 1278, 513, 17319, 17319, 510, 509, 15723, -1000, 1088,
	3, -1000, -1000, -1000, -1000, 393, 95, 1289, 95, 13011,
	-1000, 17319, 17319, -1000, 17319, -1000, -1000, 17319, -1000, 17319,
	17319, -1000, 17319, 178, 14659, 774, 1163, 571, -6, 1,
	-1000, 1305, -1000, -1000, -1000, -1000, 110, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 217, 722, 212, 212, 212, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 363, -1000, -1000, 402, 402, 402, -1000,
	-1000, -3, 24758, 508, -7, 14379, 17319, -1000, 26, -1000,
	-1000, 1084, 440, -19, 718, 997, 792, -1000, -1000, -1000,
	-1000, 10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1391, -1000, -1000, -1000, -1000, 1399, 10, -1000,
	-1000, -1000, -1000, -1000, 1419, -1000, -1000, -1000, 4858, -1000,
	-1000, -1000, 17319, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 718, 997, -1000, -1000, 15723, 14925, 1287,
	1162, 732, -1000, 1286, 17319, 838, 909, -1000, 537, 1156,
	-1000, -1000, -1000, -1000, 24758, -1000, 24758, 668, 1010, -1000,
	1010, 5, -1000, 23962, -1000, 210, -23, -1000, 393, 6635,
	12462, 3982, 25309, 17319, 533, 9627, 9627, 9627, 9627, 9627,
	9627, 9627, 9627, 9627, 9627, 9627, 9627, 9627, 9627, 9627,
	9627, 9627, 9627, 9627, 9627, 9627, 9627, 1014, 9627, 507,
	9627, 9627, 9627, 9627, 1022, 775, 192, 4858, -1000, 614,
	614, 614, 24986, 24986, 219, 317, -1000, 9627, -1000, 8435,
	123, 23570, -1, -1000, -1000, -1000, 6340, 400, 24758, 26,
	5148, -1000, 793, 1397, 1123, 1060, 209, 117, 114, 9627,
	9627, 9919, 9919, 9627, 10211, 9627, 9627, 6048, 9627, 9627,
	9627, 9627, 9627, 9627, -1000, 208, -1000, -1000, -1000, -1000,
	1394, -1000, -1000, 1388, -1000, 532, 528, 1375, 393, 113,
	7851, -1000, 774, 17319, 17319, 17319, -1000, -1000, 907, 18117,
	906, 25309, 17319, -1000, 207, 206, 990, 988, 17319, 17319,
	17851, 17585, 17319, 680, 205, 198, 17319, 679, -1000, 17319,
	17319, 644, 564, 1080, 17319, 607, 9627, 695, -1000, 12180,
	409, 17319, 615, 101, -1000, -1000, -1000, 343, 17319, -1000,
	-1000, -1000, 130, -1000, 124, 124, -1000, -1000, 15723, -1000,
	-1000, -1000, -1000, -1000, -1000, 25309, 316, 314, -1000, 1369,
	506, -1000, 499, 498, 491, -1000, 193, -1000, 9627, 17319,
	14379, -7, -13, -1000, -1000, 17319, 997, -1000, -1000, -1000,
	-1000, 640, -1000, 710, -1000, 11619, -1000, -1000, -1000, 793,
	-1000, -28, -1000, -1000, -1000, -1000, 107, -24, -14, 25309,
	-1000, -1000, -1000, -1000, -1000, 17319, 286, 17319, -6, 17319,
	-1000, 1417, -6, 17319, 1153, 1182, 336, 17319, -1000, -1000,
	-1000, 9627, -1000, -1000, -1000, -6, 17319, -1000, 1056, -1000,
	-9, 1592, -131, 111, 348, -1000, 11898, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 366, 303,
	303, 416, 416, 416, 416, 367, 367, 935, 1986, 3348,
	3348, 3348, 2414, 287, 287, 3348, 3348, 3348, 24986, 24672,
	3186, 9627, 9627, 487, 766, 192, 3186, 9627, 1374, 3186,
	3186, 3186, -1000, 819, -1000, -1000, -1000, 1077, 191, 10211,
	10211, -1000, -1000, -1000, 5756, -1000, -1000, 189, 9627, -1000,
	23600, -162, -36, -1000, -1000, 9627, -37, -96, -1000, -1000,
	592, -1000, 9627, -1000, -16, 9627, 9627, 9627, 100, -1000,
	99, 765, 187, 184, 9627, -1000, -1000, 24728, 22391, 96,
	1076, -110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 93,
	91, 24542, -110, 90, 25034, -1000, 10211, 10211, 10211, 5756,
	183, 89, 23660, -110, 24412, 8143, 8143, 8143, 88, 24355,
	9627, -110, 3247, 3117, 2905, -41, -47, -49, 1367, -51,
	84, 364, 351, 80, 1056, -1000, -1000, -1000, -1000, 478,
	477, 1150, -1000, 896, -1000, 413, -1000, 830, 9627, 17319,
	181, 180, 735, -1000, 1147, 840, 1138, 840, -1000, -15,
	687, 9627, 9627, -1000, 474, -1000, -1000, 472, -1000, 559,
	-1000, -1000, 6635, 24758, -1000, 611, 1243, -53, -1000, -1000,
	6635, 393, 13011, 12462, 7851, -62, -1000, -1000, -1000, 774,
	-1000, 489, 1362, 77, 939, 702, 657, 589, 1350, 24758,
	-28, -1000, -28, -1000, -1000, -1000, -1000, -1000, -1000, 17319,
	1029, -1000, 14925, 179, 17319, 177, -1000, 176, -1000, -1000,
	174, 17319, 967, 336, 1422, -1000, 371, -1000, 76, -1000,
	1050, 1265, -1000, 12462, 865, 993, 987, 12462, 1052, 783,
	783, 783, -1000, 348, 4267, 9627, 15457, 790, 50, 74,
	1592, 9627, 3186, 3186, 9627, 10211, 10211, -1000, 3186, -1000,
	-1000, -1000, -1000, 1075, 166, 9627, 25309, 25158, 25105, -66,
	7535, -32, -1000, 9627, -1000, 23267, -1000, -1000, 134, 1152,
	-1000, 9627, 24307, 73, 7243, -1000, 24051, -17, -17, -1000,
	1412, -1000, 13277, 397, 795, 23237, 3982, 25309, -1000, 9627,
	-1000, -1000, 1074, 9627, -1000, 25309, 25309, 10211, 10211, 10211,
	10211, 10211, 10211, 10211, 10211, 10211, 10211, 10211, 10211, 10211,
	10211, 10211, 10211, 10211, 10211, 10211, 957, 10211, 1336, 1336,
	1336, -33, 6927, -1000, 1110, 1074, 9627, 9627, 25309, 71,
	70, 68, -1000, 9627, -110, 9627, 9627, 9627, -1000, -1000,
	-1000, 67, -1000, 1343, -1000, -1000, -1000, -1000, 1050, 17319,
	17319, 17319, 1137, -1000, 2047, -1000, 23207, -68, 17319, 17319,
	-1000, 991, 1002, 428, 17319, -1000, 17319, -1000, 17319, 17319,
	17319, -70, -76, 17319, 17319, -1000, -67, 6635, 199, -6,
	-67, 607, -1000, -34, -1000, 342, -1000, 310, 308, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 60, -1000, -1000,
	1032, -1000, 10503, 164, 17319, 14925, 1285, 10503, 831, 970,
	336, 1410, -1000, 537, -1000, 391, 9627, 9627, 1592, 545,
	12462, 12462, 1519, 979, 12462, -1000, -1000, -1000, -1000, 15457,
	-1000, 978, -77, -1000, -1000, 17319, 161, -1000, 348, 471,
	3186, 24850, 3300, 9627, 25309, 25072, -78, 9627, 9627, -1000,
	-82, -1000, 9627, 304, 24758, -1000, -1000, -1000, 24758, 9627,
	1406, 9627, 56, 53, 52, -1000, -1000, -1000, 22107, 9627,
	51, -1000, 49, 48, 24758, 1110, 24758, -1000, -1000, 620,
	620, 1336, 1336, 1336, 1336, 1779, 1779, 1166, 344, 3145,
	3145, 3145, 3210, 359, 359, 3145, 3145, 3145, 1070, 891,
	160, 25192, 9627, -83, -1000, -1000, -1000, 24758, 24758, 47,
	-1000, -1000, -1000, -110, 2645, 23177, 22874, -1000, 46, 391,
	-1000, -1000, -1000, 17319, -1000, 17319, -1000, 17319, 17319, 1061,
	886, -1000, -1000, 985, 158, 10211, 17319, -1000, 750, -87,
	-88, 877, -1000, 875, 9627, -1000, 25309, 840, 840, -1000,
	458, 455, -1000, -1000, -1000, -1000, -67, 1189, 17319, 1236,
	-1000, -1000, 157, -1000, -1000, -1000, 742, -89, -1000, 290,
	1251, 9627, -1000, -1000, 150, 10503, -94, 45, -6, -105,
	17319, -1000, 336, 1409, -1000, 1182, -1000, 17319, 24758, -110,
	527, -1000, 1519, -1000, 149, 9627, 12462, -1000, -1000, -159,
	-1000, 335, -1000, 348, 148, 17319, 15457, 9627, 9627, 25072,
	-109, -1000, 3186, 3186, -1000, 22844, -1000, 24758, -1000, 24051,
	-1000, -1000, -1000, 738, -1000, 22814, -1000, -1000, -1000, -1000,
	10211, 1068, 147, 25309, 22784, -1000, -1000, 9627, -1000, -1000,
	-1000, -1000, -1000, 1149, -1000, -1000, 17319, 894, -1000, -1000,
	9627, 25192, 146, 1029, 144, -1000, -1000, -1000, 700, -1000,
	-1000, 24758, 1252, -1000, -1000, 17319, 17319, 526, -111, 17319,
	-1000, -1000, 5464, 17319, 750, 10503, 1254, 26, 17319, 1254,
	22481, 5148, -116, -1000, 1029, -1000, 750, 143, 1408, -1000,
	967, -75, -1000, 1280, 13833, -1000, 17319, 24758, -1000, 978,
	-1000, 4858, 15457, 17319, -120, -1000, 3186, 3186, -1000, -1000,
	44, 795, 1264, -1000, 24324, 10211, 25309, -122, -1000, 22451,
	-1000, -1000, 1134, 22421, 942, 17319, -1000, 17319, 17319, 415,
	17319, -1000, -1000, 580, -1000, 393, -1000, 142, 1029, -1000,
	-1000, -1000, -1000, 1251, -16, 750, -1000, 1029, 10503, -1000,
	970, 17319, 138, -1000, 137, 26, -126, -1000, -1000, -1000,
	-128, -1000, -1000, 678, 9627, 24324, -132, -1000, -1000, 1127,
	-1000, 800, 862, 43, -133, 133, -1000, 9627, -1000, 13011,
	-1000, 17319, -1000, 1254, 41, 1029, -1000, -134, -1000, -1000,
	-1000, 9627, -1000, -1000, 38, 9335, 9335, -110, -1000, 17319,
	-1000, 810, 802, 606, -1000, -1000, -1000, -1000, -1000, 942,
	24758, -124, -138, -1000, -1000, -1000, 750, -17, -1000, -1000,
	-1000, 3724, 850, 598, 23630, -1000, -1000, -1000, 1177, -1000,
	421, 958, 958, 800, -1000, 789, 1029, 37, 1310, -1000,
	-1000, -1000, -1000, -1000, -1000, 1321, -1000, -1000, 959, -1000,
	-1000, -1000, -1000, -1000, -1000, 1406, 9043, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1648, 1645, 1289, 137, 1644, 136, 1642, 1641, 1640,
	1639, 1638, 1637, 108, 135, 134, 141, 133, 1636, 94,
	1635, 1633, 1632, 106, 1629, 1628, 1623, 84, 1621, 1620,
	127, 126, 1618, 1615, 102, 43, 166, 2514, 161, 1613,
	1612, 1611, 14, 104, 68, 1610, 77, 1608, 1607, 49,
	38, 27, 16, 1606, 99, 110, 894, 26, 1596, 1595,
	149, 32, 22, 549, 103, 153, 147, 124, 1592, 1591,
	1589, 55, 1583, 3, 1581, 1577, 18, 59, 25, 1574,
	23, 13, 1573, 1572, 128, 1568, 80, 109, 116, 113,
	132, 742, 1567, 75, 8, 74, 1566, 1563, 1563, 139,
	31, 1557, 53, 88, 148, 1555, 34, 156, 86, 28,
	78, 111, 1554, 1551, 1550, 91, 1549, 98, 65, 1548,
	1547, 79, 1544, 142, 145, 1543, 1540, 131, 1539, 1538,
	1537, 157, 1536, 1535, 158, 1534, 12, 50, 66, 9,
	117, 115, 107, 60, 1532, 19, 1531, 1585, 924, 896,
	20, 1530, 62, 51, 92, 52, 76, 58, 1529, 1525,
	112, 1524, 1523, 1522, 1521, 1520, 89, 1519, 81, 150,
	35, 17, 47, 95, 24, 85, 93, 130, 154, 114,
	1508, 1506, 121, 1504, 343, 1503, 1502, 1197, 123, 1501,
	1498, 1497, 1150, 775, 748, 326, 1496, 1494, 670, 90,
	1493, 1489, 54, 1488, 119, 1486, 1483, 151, 212, 33,
	1482, 118, 1479, 96, 1478, 0, 44, 30, 1476, 125,
	82, 1469, 1468, 1467, 1466, 21, 1, 10, 6, 5,
	4, 57, 36, 1465, 1463, 129, 100, 61, 1462, 155,
	1461, 1460, 1456, 37, 1454, 11, 1452, 15, 1450, 1448,
	7, 2, 143, 1441, 97, 1431, 1323, 1429, 152, 1428,
	1427, 1301, 46, 87,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 183, 183, 182, 18, 158,
	158, 19, 19, 19, 19, 20, 116, 116, 21, 21,
	21, 21, 22, 26, 252, 252, 252, 256, 256, 257,
	257, 258, 258, 258, 258, 258, 258, 258, 254, 254,
	29, 29, 29, 29, 29, 135, 131, 131, 133, 133,
	133, 133, 55, 130, 130, 130, 130, 132, 132, 132,
	132, 208, 207, 207, 213, 213, 213, 68, 68, 68,
	68, 68, 69, 69, 69, 206, 206, 206, 206, 214,
	214, 214, 214, 214, 214, 70, 70, 70, 212, 212,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	17, 253, 253, 255, 255, 31, 31, 9, 9, 10,
	10, 71, 71, 72, 72, 138, 138, 138, 138, 73,
	73, 47, 47, 47, 137, 223, 223, 224, 224, 224,
	224, 224, 224, 225, 225, 225, 225, 225, 225, 225,
	221, 221, 222, 219, 219, 220, 220, 220, 220, 259,
	259, 136, 136, 76, 76, 228, 228, 228, 228, 226,
	226, 226, 226, 226, 229, 227, 230, 230, 230, 230,
	230, 169, 169, 169, 33, 11, 53, 53, 12, 8,
	8, 120, 120, 80, 80, 174, 174, 174, 62, 62,
	42, 42, 42, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 121, 121, 122, 122, 24, 28,
	32, 32, 32, 32, 32, 261, 261, 59, 59, 59,
	59, 60, 60, 134, 134, 134, 134, 134, 54, 7,
	7, 49, 49, 50, 50, 51, 51, 52, 52, 262,
	262, 23, 23, 23, 23, 23, 65, 65, 127, 127,
	127, 129, 129, 128, 128, 128, 106, 106, 34, 85,
	85, 94, 94, 95, 95, 180, 96, 96, 27, 27,
	37, 37, 35, 35, 35, 35, 35, 35, 36, 36,
	38, 38, 38, 38, 38, 38, 38, 236, 236, 236,
	239, 239, 235, 237, 237, 238, 238, 260, 260, 107,
	107, 107, 75, 74, 74, 78, 78, 77, 79, 79,
	173, 104, 104, 104, 104, 123, 124, 124, 125, 125,
	126, 126, 103, 103, 155, 155, 39, 39, 84, 84,
	86, 86, 145, 145, 146, 146, 144, 144, 144, 175,
	175, 175, 175, 175, 172, 172, 176, 176, 176, 176,
	176, 176, 170, 170, 170, 170, 171, 171, 181, 181,
	110, 110, 110, 110, 108, 108, 109, 109, 177, 177,
	177, 177, 105, 105, 178, 178, 178, 139, 139, 184,
	184, 184, 202, 202, 83, 83, 83, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	186, 186, 186, 186, 188, 188, 188, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 201, 201, 201, 201, 201, 201, 189, 189, 196,
	196, 197, 197, 198, 199, 190, 190, 191, 191, 192,
	193, 200, 200, 200, 200, 204, 204, 194, 194, 194,
	194, 194, 195, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 118, 118, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 149, 149,
	149, 149, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 231, 231, 231, 231, 231, 231, 231,
	233, 233, 234, 234, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 240, 240, 241, 241, 243, 243, 244, 244, 245,
	246, 246, 246, 247, 248, 248, 242, 242, 249, 249,
	249, 250, 250, 251, 251, 251, 251, 251, 160, 160,
	160, 161, 161, 162, 91, 91, 157, 157, 156, 156,
	156, 159, 159, 111, 111, 203, 203, 203, 203, 203,
	203, 203, 112, 112, 112, 119, 113, 113, 114, 114,
	114, 114, 114, 114, 152, 153, 115, 115, 115, 154,
	154, 163, 167, 167, 166, 165, 165, 164, 164, 142,
	142, 143, 143, 141, 140, 100, 100, 99, 99, 97,
	97, 98, 98, 263, 263, 168, 168, 101, 101, 102,
	93, 93, 179, 179, 179, 179, 87, 87, 67, 67,
	88, 88, 63, 63, 66, 66, 64, 64, 64, 64,
	81, 81, 82, 82, 61, 61, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 205, 205, 205,
	56, 56, 56, 57, 57, 58, 58, 210, 210, 210,
	211, 211, 211, 211, 209, 209, 209, 209, 209, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	2, 2, 0, 2, 0, 8, 8, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	6, 3, 1, 5, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 0, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -238, 92, 100, 122, 199,
	99, 85, 116, 218, 226, -35, -37, 234, -135, 235,
	34, 244, 58, 95, 220, 215, 266, 66, -236, -38,
	-36, 314, 289, 295, 229, -39, 252, 281, 317, 252,
	130, 78, 284, -63, -56, 4, -215, -217, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 180,
	185, 188, 191, 192, 193, 194, 197, 199, 201, 202,
	203, 205, 206, 208, 209, 210, 211, 212, 215, 213,
	214, 216, 218, 220, 221, 223, 225, 226, 227, 228,
	231, 232, 234, 235, 237, 240, 243, 244, 245, 248,
	246, 242, 251, 253, 254, 255, 262, 266, 267, 268,
	269, 272, 273, 274, 276, 278, 279, 280, 285, 290,
	291, 292, 293, 28, 35, 36, 37, 38, 40, 41,
	44, 45, 49, 50, 51, 53, 80, 82, 83, 98,
	101, 102, 108, 118, 120, 125, 126, 135, 136, 137,
	138, 140, 151, 174, 176, 186, 190, 196, 198, 204,
	222, 230, 238, 239, 247, 249, 257, 258, 259, 263,
	264, 281, 282, 87, 134, 274, 273, 78, 130, 252,
	284, -16, 314, -27, -6, -14, -4, -23, -34, -13,
	-30, -17, -31, -15, 23, -209, 4, -215, -217, -216,
	-218, 55, 67, 115, 133, 127, 142, 144, 152, 154,
	166, 187, 189, 219, 236, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 42, 47, 48, 52, 54, 56,
	62, 66, 70, 71, 72, 73, 74, 75, 84, 86,
	88, 89, 90, 93, 95, 97, 103, 104, 105, 111,
	113, 114, 116, 119, 121, 128, 130, 132, 139, 141,
	147, 150, 155, 157, 158, 171, 173, 179, 181, 182,
	183, 184, 195, 200, 207, 217, 229, 233, 241, 250,
	252, 256, 260, 261, 265, 270, 271, 275, 277, 283,
	284, 286, 287, 288, 289, -56, -56, -56, 199, 22,
	-256, 22, -257, -258, 66, 92, 116, 229, 134, 87,
	273, -256, -60, 226, -56, -131, 156, 232, 222, 262,
	-132, -130, -208, 257, 165, -89, -56, 4, 22, 78,
	57, 79, 117, 130, 131, 62, 63, 146, 253, 257,
	262, 66, 276, -261, 262, 262, -261, -261, -59, 262,
	260, -60, -260, 252, 252, 275, 284, -120, 78, 271,
	-36, -38, -37, -77, -78, 270, 139, 97, 184, -35,
	-37, -236, -239, 205, -235, -56, -239, -74, -75, 22,
	89, 318, -177, -63, 182, -102, 314, -3, -177, 125,
	-63, -66, 125, -63, -56, -177, 125, 114, 314, -99,
	-100, -140, -141, 316, 114, 141, 141, -178, -177, -56,
	125, -67, 125, -66, -90, 125, -89, -90, 125, -183,
	-182, -211, 4, -215, -217, -216, 281, 252, 130, -158,
	314, -116, 314, -56, 22, 181, 318, 181, -56, -131,
	51, -131, 314, -133, -54, -55, 143, 201, 260, 299,
	114, 293, -70, 5, 84, -92, 316, 114, -253, 181,
	114, 114, 114, 114, 114, 114, 293, 143, 201, 225,
	252, 284, -134, -54, -55, -134, 260, -60, -105, -177,
	-89, 125, -56, -89, 130, -56, 125, -77, -78, -104,
	-123, -124, 155, 179, -107, 22, 89, -107, -107, 43,
	315, 315, 318, -239, -82, 314, -93, -179, -147, 307,
	-149, 305, 306, 311, 171, 294, -160, -151, -163, 98,
	222, 314, -63, -150, 319, 9, -233, -37, 29, -161,
	-162, 47, -56, 7, 8, 5, 6, -61, -186, -195,
	265, 103, 173, -231, -232, 4, -215, -210, -187, -197,
	-191, -194, 140, 55, 71, 74, 72, 75, 233, 275,
	48, 28, 101, 102, 190, 196, 249, 263, 264, 125,
	174, 126, 53, 118, 151, 91, 36, 38, 40, 41,
	49, 50, 80, 82, 83, 108, 135, 136, 137, 138,
	176, 204, 238, 247, 258, 259, 282, -216, -198, -199,
	-192, -193, -200, -93, -102, 307, -63, 314, -101, -168,
	-147, 84, -44, 213, -43, 21, 23, 92, 279, 98,
	242, 242, 213, 98, 319, 213, 213, 98, 245, 315,
	-87, -63, -100, -209, 307, -178, -65, -63, -65, 234,
	-56, 30, 98, -46, 318, 46, 216, 98, -46, 318,
	98, -46, 98, 315, 318, -177, 125, -66, 30, -157,
	-184, -185, -187, -196, -190, -194, -195, 39, 45, 44,
	255, 230, 239, 37, 135, 136, 137, 138, 238, 36,
	204, 108, 91, 83, 82, 176, 41, 40, -198, -199,
	-192, -193, 80, 258, 259, 140, 38, 50, 49, 282,
	247, -91, -147, -252, -88, 252, 78, -64, -56, 307,
	-258, -252, 30, -91, 318, 318, 153, -69, 159, 170,
	123, -207, 84, -213, -206, -169, 9, 265, 103, 181,
	-212, 8, 306, -205, -211, 5, 7, 305, -207, 84,
	69, -214, 5, 4, -195, -169, 84, 156, 316, -209,
	-208, -255, 111, -252, -208, -208, -208, -208, -208, -56,
	153, -208, -208, 318, 318, -60, -46, 318, 314, -76,
	171, -237, 289, -76, 314, -57, 125, -56, -237, 171,
	-104, -124, -123, -125, -147, 22, -147, -149, -36, -36,
	-36, -79, -173, -147, -235, 30, -81, -56, -84, 318,
	114, 10, 11, 54, 33, 305, 306, 307, 308, 109,
	309, 302, 303, 304, 301, 297, 298, 299, 60, 160,
	224, 13, 14, 15, 26, 183, 154, 294, 127, 236,
	311, 16, 17, 18, 142, 35, 128, 30, 4, -147,
	-147, -147, -147, -147, 189, -97, -142, 312, -37, 314,
	-37, -147, -91, 7, -37, -156, 312, -164, -147, -99,
	314, 5, 5, 314, -240, 290, 111, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 198, -204, 285, -204, -204, -188,
	314, -188, -189, 314, -188, 291, 295, 314, -84, -63,
	318, 315, 318, 260, -121, 62, 56, -137, 125, 56,
	-219, -56, 62, -220, 52, 271, 200, 113, -121, 62,
	-121, 62, 62, -177, 33, 33, 260, -66, -56, 260,
	260, -177, 114, 315, 318, -139, 287, -127, -27, 314,
	84, 30, -127, -94, -95, -180, -96, -63, 314, -56,
	-56, -66, -67, -89, -90, -90, -16, -182, 98, -19,
	-27, -23, -34, -13, 315, 318, -83, 29, -117, 314,
	292, 163, 81, 124, 162, -118, 228, 315, 318, 260,
	318, -88, -81, -141, -140, 114, 262, 315, -55, -54,
	-68, 203, 240, 214, 231, 318, 8, 7, 7, 5,
	-209, -254, -56, -55, -54, -177, -71, -81, -72, -56,
	-138, -137, -221, -222, -219, 130, 271, 104, 30, 98,
	-53, 194, 30, 181, 171, -49, 254, 98, -126, 222,
	223, 318, -42, 31, 88, 314, 318, 315, -139, -179,
	-86, -175, -177, -63, -37, -176, 314, -202, -184, -201,
	180, 209, 210, 208, 212, 211, -184, -89, 257, -147,
	-147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
	-147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
	-147, 154, 127, 236, 35, 128, -147, 260, -147, -147,
	-147, -147, 173, 171, 265, 103, 272, 89, 177, -263,
	250, 32, -154, -37, 314, -209, -160, 222, 314, -142,
	-147, -143, -91, 315, 315, 318, -91, -159, 313, -156,
	-167, -166, 286, 315, -91, 283, 22, 89, 307, -117,
	7, -241, 106, 119, 314, 315, 315, -147, -147, -111,
	-203, -91, 4, 292, 163, 81, 124, 162, 228, -111,
	-112, -147, -91, -113, -148, -149, 305, 306, 311, 314,
	222, -114, -147, -91, -147, 42, 150, 261, -115, -147,
	114, -91, -147, -147, -147, -91, -91, -91, 314, 7,
	7, 257, 257, 7, -139, 315, -168, -43, -63, -56,
	-56, 171, -137, 125, -48, 171, -184, -56, 314, 314,
	145, 145, -56, -56, 125, -56, 125, -56, -56, -44,
	213, 314, 314, -56, 213, -56, -63, 213, 245, 114,
	-63, -106, 217, -147, -106, -129, 181, -87, 281, -56,
	217, -85, 318, 114, 299, -87, -46, -46, -46, -177,
	-184, 312, 312, 7, 260, 260, 260, 260, 314, -147,
	-254, -64, -254, -54, 269, 59, 203, -213, -117, 318,
	315, 315, 318, -57, 130, -57, -27, -89, 5, -27,
	-63, 98, -50, 94, -262, 299, -56, -173, -19, -56,
	-103, 119, -181, 318, 296, 67, -110, 144, 166, 115,
	152, 219, 133, -144, 319, 314, -172, 295, -37, -176,
	-175, 293, -147, -147, 260, -263, 250, -154, -147, 173,
	265, 103, 272, 89, 177, 114, 314, -148, -148, -91,
	314, -91, 313, 322, 315, -147, 313, 313, 318, -165,
	-166, 93, -147, -78, 318, -77, -147, -91, -91, 315,
	315, -246, 188, 314, 314, -147, 30, 318, 315, 114,
	315, 315, -119, 195, 315, 10, 11, 305, 306, 307,
	308, 109, 309, 302, 303, 304, 301, 297, 298, 299,
	60, 160, 224, 13, 14, 15, 142, 128, -148, -148,
	-148, -91, 314, 315, -152, -153, 114, 111, 30, -115,
	-115, -115, 315, 114, -91, 318, 318, 318, 315, 315,
	315, 7, 315, 318, 315, 293, 293, 315, -103, 260,
	260, 98, 171, 278, -223, -220, -147, -81, 314, 314,
	-41, 92, 234, -122, 98, -46, 98, -46, 260, -121,
	62, -91, -91, 260, 260, 245, -93, 217, 61, 315,
	-93, -139, -95, -86, -168, 315, 313, 7, 7, 315,
	163, 124, 162, -118, 162, -118, -118, 7, -56, -73,
	129, -138, 314, -57, 314, 314, -76, 314, -56, -51,
	149, -262, 4, -237, 315, -155, 121, 43, -175, 177,
	144, 144, -175, -110, 144, -108, 187, -108, -108, -172,
	-209, 320, -91, -171, -170, 30, -56, 185, 315, -147,
	-147, -148, -148, 114, 314, -147, -157, 26, 26, 315,
	-91, 315, 318, -143, -147, 315, -156, 95, -147, 256,
	315, 283, -78, -78, -78, 5, -247, -56, 314, 287,
	-77, 315, -202, -184, -147, -152, -147, -184, -184, -148,
	-148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
	-148, -148, -148, -148, -148, -148, -148, -148, 89, 171,
	177, -148, 318, -91, 315, -153, -152, -147, -147, -184,
	315, 315, 315, -91, -147, -147, -147, 315, 7, -155,
	-56, -56, -137, 98, -224, 62, -225, 54, 104, 66,
	171, 173, 271, 200, 52, 84, 207, 315, 315, -81,
	-81, 171, 84, 171, 84, 77, 267, -56, -56, -63,
	-56, -56, 315, 315, -56, -63, -93, -128, 314, 181,
	-27, -106, 299, 313, 313, 315, 128, -80, -174, -56,
	-234, 314, -231, -232, -61, 314, -81, -71, 30, -80,
	181, -52, 148, -262, 5, -49, -243, 288, -147, -91,
	251, -175, -175, -109, 277, 181, 144, -175, -171, -146,
	-145, 112, 169, 315, -56, 314, -172, 26, 26, -147,
	-157, 315, -147, -147, 315, -147, 313, -147, 5, -147,
	315, 315, 315, -248, -56, -147, 315, 315, 315, -153,
	114, 89, 177, 314, -147, 315, 315, 318, 315, 315,
	315, -243, -137, -56, -89, -56, 104, 125, 173, 145,
	314, -148, -63, -136, -259, 65, 248, 315, 315, 173,
	173, -147, -184, -46, -46, 260, 260, 90, -81, 62,
	-102, -37, 314, 191, 315, 318, -62, -99, 54, -62,
	-147, 314, -80, 315, 315, -27, 315, -63, -262, 5,
	-50, -244, -245, -56, 257, -109, 314, -147, -175, 318,
	321, 299, -172, 314, -81, -170, -147, -147, 315, 315,
	-78, -242, 193, 315, -148, 114, 314, -157, 315, -147,
	-225, -57, 171, -147, -58, 314, -73, 314, 207, -45,
	54, -56, -56, 273, 172, 315, -56, -56, -136, -174,
	-42, -89, -42, 315, -91, 315, -73, -136, 314, 5,
	-51, 318, 30, -150, -61, -56, -81, -145, -209, -171,
	-81, 315, 315, -78, 43, -148, -157, 315, 315, 98,
	315, -228, 161, -56, -81, -63, -40, 277, -89, 234,
	-139, 314, -73, -62, -78, -136, -73, -80, -52, -245,
	-247, 314, 315, 315, -249, 202, 223, -91, 315, 104,
	-226, -229, -227, 181, 115, 192, 237, 315, 315, -76,
	-147, -94, -81, -42, 315, -73, 315, -91, 315, -250,
	-251, 35, 268, 69, -147, -250, -56, -227, 181, -229,
	181, 273, 87, -228, -139, 315, -136, -78, -251, 197,
	110, 222, 197, 110, -230, 168, 216, 46, 234, -230,
	-226, -47, 46, 216, -73, 315, 26, 20, 173, 84,
	-251,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 368, -2, 0, 134, 0,
	316, 0, 316, 316, 320, 0, 398, 282, 395, -2,
	406, 0, 0, 0, 404, 382, 0, 0, -2, 0,
	0, 0, 0, 0, 822, 850, 851, 852, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 0, 200, 864, 865, 866, 867,
	868, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 100, 107, 108, 938, 110,
	0, 117, 118, 119, 121, 122, 123, 124, 125, 126,
	127, 0, 309, 958, 322, 130, 915, 962, 1031, 977,
	137, 147, 0, 1037, -2, 151, 78, 180, 181, 182,
	0, 184, 202, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 199, 327, 315, 327, 312, 313, 314, 317,
	0, 308, 0, 397, 0, 0, 0, 0, 0, 281,
	-2, 378, 379, -2, 0, 401, 401, 401, 0, 0,
	379, 0, 387, 942, 390, 833, 388, 0, 0, 403,
	402, 0, 383, 468, 0, 426, 0, 2, 0, 1016,
	468, 0, 1016, 825, 0, 0, 1016, 0, 0, 823,
	797, 795, 796, 0, 0, 0, 0, 0, 474, 68,
	1016, 51, 1016, 818, 51, 1016, 76, 51, 1016, 0,
	95, 97, 860, 861, 862, 863, 1042, 0, 0, 0,
	0, 105, 0, 109, 111, 0, 0, 0, 321, 131,
	1005, 133, 0, 136, 138, 139, 0, 0, 0, 0,
	0, 0, 150, 175, 176, 79, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 195, 196,
	0, 0, 310, 323, 324, 311, 0, 319, 51, 472,
	254, 1016, 394, 254, 854, 394, 1016, -2, 0, 374,
	413, 414, 0, 0, 0, 399, 400, 0, 0, 0,
	370, 371, 0, 389, 0, 0, 429, 810, 814, 815,
	569, 0, 0, 0, 0, 0, 0, 658, 660, 1010,
	1031, 0, 662, 663, 0, 665, 667, 668, 0, 671,
	672, 788, 822, 836, 837, 838, 839, 0, 0, 0,
	844, 845, 846, 712, 681, -2, -2, 834, 500, 501,
	502, 503, -2, 1044, 685, 687, 689, 690, 691, 692,
	0, 994, 1011, 1012, 1027, 1028, 1036, 1040, 1041, 1016,
	1024, 1017, 1006, 1014, 1023, 893, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 859, 531, 532,
	537, 538, 540, 429, 427, 469, 470, 0, 0, 807,
	805, 806, 28, 305, 30, 0, 305, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 816, 798, 793, 794, 478, 0, 346, 0, 0,
	475, 0, 0, 70, 0, 49, 50, 0, 72, 0,
	0, 74, 0, 396, 0, 0, 1016, 0, 396, 0,
	746, 486, 487, 488, 489, 490, 566, 493, 494, 495,
	496, 497, 498, 499, 507, 508, 509, 510, 511, 512,
	513, 528, 0, 506, 506, 506, 519, 520, 529, 530,
	535, 536, 547, 548, 550, 552, 546, 546, 546, 543,
	544, 0, 744, 0, 114, 0, 888, 820, 826, 827,
	120, 0, 0, 0, 0, 0, 0, 142, 162, 163,
	164, 143, 145, 152, 154, 155, 156, 165, 166, 167,
	168, 271, 0, 273, 178, 179, 847, 0, 144, 146,
	148, 149, 169, 170, 0, 172, 173, 174, 0, 80,
	183, 185, 0, 201, 186, 187, 188, 189, 190, 191,
	194, 197, 198, 0, 0, 318, 274, 0, 212, 0,
	0, 277, 393, 0, 0, 0, 1016, 853, 332, 0,
	377, 411, 412, 415, 418, 419, 416, 569, 384, 385,
	386, 407, 408, 292, 391, 0, 0, 830, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 0, 0, 813, 574,
	575, 576, 598, 599, 0, 659, 799, 792, 661, 0,
	-2, 744, 0, 664, 669, 670, 0, 0, 787, -2,
	0, 841, 566, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 767, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 534, 545, 542, 541, 517,
	0, 516, 514, 0, 518, 0, 0, 0, 478, 0,
	0, 809, 0, 0, 0, 0, 304, 32, 1016, 0,
	53, 0, 0, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 0, 0, 357, 0, 357, 348, 0,
	0, 0, 344, 360, 361, 363, 364, 0, 0, 476,
	69, 819, 51, 77, 51, 51, 83, 96, 0, 98,
	101, 102, 103, 104, 99, 0, 479, 481, 491, 0,
	553, 554, 555, 556, 557, 558, 567, 106, 0, 0,
	0, 115, 116, 828, 829, 0, 0, 135, 140, 141,
	328, 0, 159, 0, 161, 0, 272, 849, 848, 566,
	81, 203, 128, 325, 326, 473, 0, 0, 211, 830,
	213, 215, 216, 217, 218, 854, 0, 854, 0, 0,
	275, 0, 0, 0, 0, 334, 340, 0, 417, 420,
	421, 0, 410, 290, 291, 396, 0, 832, 423, 811,
	459, 430, 438, 468, 445, 442, 0, 570, 482, 483,
	521, 522, 523, 524, 525, 526, 571, 572, 0, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, -2,
	-2, -2, 590, 591, 592, -2, -2, -2, 596, 597,
	-2, 0, 0, 0, 804, 0, -2, 0, 606, -2,
	-2, -2, 610, 0, 613, 615, 617, 0, 0, 0,
	0, 803, 627, 779, 0, 812, 612, 0, 0, 800,
	791, 0, 0, -2, 666, 0, 0, 0, 750, 751,
	786, 782, 0, 673, 406, 0, 0, 0, 0, 842,
	0, 722, 0, 0, 0, 686, 688, 0, 0, 0,
	0, 754, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 744, 764, 0, 0, 629, 0, 0, 0, 0,
	1031, 0, 744, 772, 0, 0, 0, 0, 0, 744,
	0, 778, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 471, 808, 31, 294, 0,
	0, 0, 34, 1016, 42, 0, 226, 0, 0, 0,
	0, 0, 307, 43, 1016, 51, 1016, 51, 44, 29,
	305, 0, 0, 298, 0, 293, 296, 0, 59, 0,
	817, 67, 0, 477, 341, 342, 0, 0, 350, 347,
	0, 478, 0, 0, 0, 0, 71, 73, 75, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 745,
	112, 821, 113, 132, 157, 158, 160, 153, 171, 0,
	220, 253, 0, 0, 854, 0, 209, 254, 276, 278,
	0, 0, 336, 340, 0, 339, 394, 409, 0, 831,
	425, 0, 428, 0, 0, 0, 0, 0, 0, 465,
	465, 465, 463, 445, 0, 0, 457, 0, -2, 442,
	0, 0, -2, -2, 0, 0, 0, 628, -2, 611,
	614, 616, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 789, 792, -2, 745, 748, 749, 0, 0,
	783, 0, 0, 0, 0, 405, 406, 406, 406, 679,
	0, 680, 0, 0, 0, 0, 0, 0, 695, 0,
	696, 697, 0, 0, 698, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 632, 633,
	634, 0, 0, 699, 770, 771, 0, 0, 0, 0,
	0, 0, 704, 0, 777, 0, 0, 0, 708, 709,
	710, 0, 504, 0, 527, 549, 551, 539, 425, 0,
	0, 0, 0, 52, 224, 243, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 40, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 60, 356, 0, 355, 0,
	345, 357, 362, 359, 365, 0, 484, 0, 0, 492,
	559, 560, 561, 562, 563, 564, 565, 0, 129, 207,
	0, 214, 0, 0, 0, 212, 0, 0, 0, 338,
	340, 0, 331, 332, 392, 716, 0, 0, 431, 0,
	0, 0, 0, 0, 0, 460, 464, 461, 462, 457,
	436, 0, 0, 441, 456, 0, 455, 444, -2, 573,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 780,
	0, 739, 0, 0, 791, -2, 752, 781, 785, 0,
	674, 0, 0, 0, 0, 843, 720, 721, 725, 0,
	0, 684, 0, 0, 753, 763, 765, 630, 631, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, -2,
	-2, -2, 648, 649, 650, -2, -2, -2, 0, 0,
	0, 766, 0, 0, 742, 768, 769, 774, 775, 0,
	701, 702, 703, 776, 0, 0, 0, 533, 0, 716,
	300, 302, 33, 0, 225, 0, 228, 0, 0, 0,
	0, 234, 235, 0, 0, 0, 0, 245, 252, 0,
	0, 0, 48, 0, 0, 306, 0, 51, 51, 295,
	0, 0, 205, 206, 299, 297, 343, 0, 0, 0,
	349, 358, 0, 485, 480, 568, 0, 0, 283, 289,
	289, 0, 682, 683, 0, 0, 0, 0, 0, 0,
	0, 329, 340, 0, 333, 334, 380, 0, 424, 422,
	0, 447, 0, 449, 0, 0, 0, 451, 439, 0,
	434, 0, 433, 445, 453, 0, 0, 0, 0, -2,
	0, 621, -2, -2, 738, 745, 790, 784, 840, 406,
	675, 677, 678, 727, 724, 0, 711, 693, 694, 762,
	0, 0, 0, 0, 745, 741, 700, 0, 706, 707,
	505, 381, 35, 0, 229, 230, 854, 0, 233, 236,
	0, 238, 856, 220, 0, 249, 250, 247, 0, 37,
	38, 47, 55, 39, 45, 0, 0, 0, 0, 0,
	366, 367, 0, 0, 252, 0, 292, 835, 0, 292,
	0, 0, 0, 242, 220, 210, 252, 0, 0, 335,
	336, 715, 717, 0, 0, 448, 0, 467, 450, 0,
	437, 0, 457, 0, 0, 443, -2, -2, 622, 740,
	0, 406, 0, 713, -2, 0, 0, 0, 743, 0,
	227, 231, 0, 0, 258, 0, 246, 0, 0, 57,
	0, 301, 303, 0, 352, 478, 354, 0, 220, 284,
	285, 288, 286, 289, 406, 252, 208, 220, 0, 337,
	338, 0, 0, 458, 0, 0, 0, 435, 432, 440,
	0, 454, 676, 730, 0, -2, 0, 656, 705, 0,
	237, 263, 0, 0, 0, 254, 41, 0, 54, 0,
	353, 0, 240, 292, 0, 220, 279, 0, 330, 718,
	719, 0, 466, 452, 0, 0, 0, 726, 657, 0,
	239, 259, 260, 0, 255, 256, 257, 855, 251, 258,
	56, 478, 0, 287, 674, 241, 252, 406, 723, 728,
	731, -2, 980, 885, 0, 729, 232, 261, 0, 262,
	0, 0, 0, 263, 351, 223, 220, 0, 0, 733,
	734, 735, 736, 737, 264, 0, 267, 268, 0, 265,
	248, 219, 221, 222, 280, 0, 0, 266, 269, 270,
	732,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 303, 3, 309, 304, 3,
	314, 315, 307, 305, 318, 306, 316, 308, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 322, 317,
	297, 299, 298, 3, 319, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 312, 3, 313, 302, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 320, 301, 321, 311,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 300,
	57640, 310, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:739
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:745
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:837
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:860
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:933
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:937
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1067
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1445
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = DropDefault
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			return unimplemented(sqllex)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1862
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1873
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1876
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1879
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1883
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1886
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1997
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = Ascending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = Descending
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2051
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2052
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.str = ""
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.str = ""
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2232
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2251
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2258
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			return unimplemented(sqllex)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2566
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2569
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2570
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2578
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = true
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = false
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = true
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2602
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2660
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &From{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = true
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = false
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.str = astFullJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.str = astLeftJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.str = astRightJoin
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.str = astInnerJoin
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2969
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3068
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3083
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplemented(sqllex)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3148
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = nil
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = oidPseudoTypeOid
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3296
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3328
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3368
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3399
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			return unimplemented(sqllex)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3403
		{
			return unimplemented(sqllex)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3407
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			return unimplemented(sqllex)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			return unimplemented(sqllex)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3411
		{
			return unimplemented(sqllex)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3412
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3415
		{
			return unimplemented(sqllex)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3416
		{
			return unimplemented(sqllex)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3451
		{
			return unimplemented(sqllex)
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			return unimplemented(sqllex)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3888
		{
			return unimplemented(sqllex)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3889
		{
			return unimplemented(sqllex)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3912
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3927
		{
			return unimplemented(sqllex)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			return unimplemented(sqllex)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3932
		{
			return unimplemented(sqllex)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3949
		{
			return unimplemented(sqllex)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3951
		{
			return unimplemented(sqllex)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			return unimplemented(sqllex)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3981
		{
			return unimplemented(sqllex)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4025
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4026
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4029
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4030
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = Window(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.str = ""
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4117
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			return unimplemented(sqllex)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4119
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			return unimplemented(sqllex)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4123
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4131
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4499
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4659
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4695
		{
			return unimplemented(sqllex)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = DNull
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.str = ""
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
