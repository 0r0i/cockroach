// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6504

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	358, 54,
	-2, 661,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 514,
	-2, 0,
	-1, 61,
	92, 661,
	145, 661,
	310, 661,
	311, 661,
	-2, 0,
	-1, 72,
	103, 636,
	112, 636,
	153, 636,
	172, 636,
	197, 636,
	203, 636,
	307, 636,
	-2, 625,
	-1, 103,
	4, 663,
	20, 663,
	21, 663,
	23, 663,
	28, 663,
	33, 663,
	34, 663,
	35, 663,
	36, 663,
	37, 663,
	38, 663,
	39, 663,
	40, 663,
	41, 663,
	42, 663,
	44, 663,
	45, 663,
	46, 663,
	47, 663,
	48, 663,
	51, 663,
	52, 663,
	53, 663,
	55, 663,
	56, 663,
	60, 663,
	61, 663,
	62, 663,
	64, 663,
	66, 663,
	67, 663,
	68, 663,
	71, 663,
	72, 663,
	73, 663,
	81, 663,
	82, 663,
	83, 663,
	84, 663,
	85, 663,
	86, 663,
	87, 663,
	88, 663,
	90, 663,
	92, 663,
	94, 663,
	97, 663,
	98, 663,
	100, 663,
	104, 663,
	105, 663,
	106, 663,
	107, 663,
	108, 663,
	109, 663,
	113, 663,
	114, 663,
	115, 663,
	116, 663,
	117, 663,
	119, 663,
	121, 663,
	126, 663,
	127, 663,
	129, 663,
	131, 663,
	132, 663,
	133, 663,
	134, 663,
	135, 663,
	136, 663,
	137, 663,
	140, 663,
	142, 663,
	145, 663,
	146, 663,
	147, 663,
	148, 663,
	149, 663,
	150, 663,
	151, 663,
	152, 663,
	154, 663,
	157, 663,
	158, 663,
	159, 663,
	161, 663,
	162, 663,
	163, 663,
	165, 663,
	166, 663,
	168, 663,
	170, 663,
	173, 663,
	176, 663,
	178, 663,
	179, 663,
	180, 663,
	181, 663,
	182, 663,
	183, 663,
	185, 663,
	186, 663,
	187, 663,
	188, 663,
	192, 663,
	193, 663,
	194, 663,
	195, 663,
	196, 663,
	198, 663,
	200, 663,
	201, 663,
	204, 663,
	205, 663,
	207, 663,
	209, 663,
	210, 663,
	211, 663,
	212, 663,
	213, 663,
	214, 663,
	216, 663,
	217, 663,
	218, 663,
	219, 663,
	220, 663,
	222, 663,
	223, 663,
	224, 663,
	225, 663,
	226, 663,
	227, 663,
	228, 663,
	229, 663,
	231, 663,
	232, 663,
	233, 663,
	234, 663,
	235, 663,
	236, 663,
	237, 663,
	238, 663,
	239, 663,
	240, 663,
	241, 663,
	242, 663,
	244, 663,
	246, 663,
	247, 663,
	248, 663,
	249, 663,
	251, 663,
	252, 663,
	253, 663,
	254, 663,
	256, 663,
	257, 663,
	258, 663,
	259, 663,
	260, 663,
	262, 663,
	263, 663,
	264, 663,
	265, 663,
	267, 663,
	268, 663,
	269, 663,
	270, 663,
	272, 663,
	273, 663,
	274, 663,
	275, 663,
	276, 663,
	277, 663,
	278, 663,
	279, 663,
	280, 663,
	281, 663,
	283, 663,
	285, 663,
	286, 663,
	287, 663,
	288, 663,
	289, 663,
	290, 663,
	291, 663,
	293, 663,
	294, 663,
	295, 663,
	298, 663,
	299, 663,
	300, 663,
	301, 663,
	303, 663,
	304, 663,
	305, 663,
	306, 663,
	309, 663,
	310, 663,
	311, 663,
	312, 663,
	314, 663,
	316, 663,
	317, 663,
	318, 663,
	319, 663,
	320, 663,
	321, 663,
	324, 663,
	329, 663,
	330, 663,
	331, 663,
	332, 663,
	333, 663,
	-2, 0,
	-1, 116,
	103, 635,
	112, 635,
	153, 635,
	172, 635,
	197, 635,
	203, 635,
	307, 635,
	-2, 628,
	-1, 120,
	1, 563,
	157, 563,
	222, 563,
	226, 563,
	357, 563,
	358, 563,
	-2, 0,
	-1, 122,
	1, 563,
	357, 563,
	358, 563,
	-2, 0,
	-1, 123,
	1, 563,
	357, 563,
	358, 563,
	-2, 0,
	-1, 124,
	1, 567,
	357, 567,
	358, 567,
	-2, 0,
	-1, 131,
	4, 669,
	5, 669,
	6, 669,
	7, 669,
	8, 669,
	9, 669,
	20, 669,
	21, 669,
	23, 669,
	28, 669,
	29, 669,
	33, 669,
	34, 669,
	35, 669,
	36, 669,
	37, 669,
	38, 669,
	39, 669,
	40, 669,
	41, 669,
	42, 669,
	44, 669,
	45, 669,
	46, 669,
	47, 669,
	48, 669,
	49, 669,
	50, 669,
	51, 669,
	52, 669,
	53, 669,
	55, 669,
	56, 669,
	58, 669,
	60, 669,
	61, 669,
	62, 669,
	64, 669,
	66, 669,
	67, 669,
	68, 669,
	70, 669,
	71, 669,
	72, 669,
	73, 669,
	75, 669,
	76, 669,
	77, 669,
	79, 669,
	80, 669,
	81, 669,
	82, 669,
	83, 669,
	84, 669,
	85, 669,
	86, 669,
	87, 669,
	88, 669,
	90, 669,
	92, 669,
	94, 669,
	97, 669,
	98, 669,
	100, 669,
	104, 669,
	105, 669,
	106, 669,
	107, 669,
	108, 669,
	109, 669,
	110, 669,
	113, 669,
	114, 669,
	115, 669,
	116, 669,
	117, 669,
	119, 669,
	121, 669,
	124, 669,
	126, 669,
	127, 669,
	129, 669,
	131, 669,
	132, 669,
	133, 669,
	134, 669,
	135, 669,
	136, 669,
	137, 669,
	138, 669,
	140, 669,
	142, 669,
	144, 669,
	145, 669,
	146, 669,
	147, 669,
	148, 669,
	149, 669,
	150, 669,
	151, 669,
	152, 669,
	154, 669,
	156, 669,
	157, 669,
	158, 669,
	159, 669,
	160, 669,
	161, 669,
	162, 669,
	163, 669,
	165, 669,
	166, 669,
	168, 669,
	169, 669,
	170, 669,
	171, 669,
	173, 669,
	176, 669,
	178, 669,
	179, 669,
	180, 669,
	181, 669,
	182, 669,
	183, 669,
	184, 669,
	185, 669,
	186, 669,
	187, 669,
	188, 669,
	189, 669,
	191, 669,
	192, 669,
	193, 669,
	194, 669,
	195, 669,
	196, 669,
	198, 669,
	201, 669,
	204, 669,
	205, 669,
	206, 669,
	207, 669,
	208, 669,
	209, 669,
	210, 669,
	211, 669,
	212, 669,
	213, 669,
	214, 669,
	216, 669,
	217, 669,
	218, 669,
	219, 669,
	220, 669,
	222, 669,
	223, 669,
	224, 669,
	225, 669,
	226, 669,
	227, 669,
	228, 669,
	229, 669,
	231, 669,
	232, 669,
	233, 669,
	234, 669,
	235, 669,
	236, 669,
	237, 669,
	238, 669,
	239, 669,
	240, 669,
	241, 669,
	242, 669,
	244, 669,
	245, 669,
	246, 669,
	247, 669,
	248, 669,
	249, 669,
	251, 669,
	252, 669,
	253, 669,
	254, 669,
	256, 669,
	257, 669,
	258, 669,
	259, 669,
	260, 669,
	261, 669,
	262, 669,
	263, 669,
	264, 669,
	265, 669,
	266, 669,
	267, 669,
	268, 669,
	269, 669,
	270, 669,
	272, 669,
	273, 669,
	274, 669,
	275, 669,
	276, 669,
	277, 669,
	278, 669,
	279, 669,
	280, 669,
	281, 669,
	283, 669,
	285, 669,
	286, 669,
	287, 669,
	288, 669,
	289, 669,
	290, 669,
	291, 669,
	293, 669,
	294, 669,
	295, 669,
	298, 669,
	299, 669,
	300, 669,
	301, 669,
	302, 669,
	303, 669,
	304, 669,
	305, 669,
	306, 669,
	309, 669,
	310, 669,
	311, 669,
	312, 669,
	313, 669,
	314, 669,
	316, 669,
	317, 669,
	318, 669,
	319, 669,
	320, 669,
	321, 669,
	324, 669,
	329, 669,
	330, 669,
	331, 669,
	332, 669,
	333, 669,
	334, 669,
	340, 669,
	345, 669,
	346, 669,
	347, 669,
	354, 669,
	360, 669,
	-2, 0,
	-1, 134,
	1, 54,
	358, 54,
	-2, 661,
	-1, 595,
	123, 1257,
	296, 1257,
	339, 1257,
	356, 1257,
	-2, 0,
	-1, 596,
	123, 1209,
	296, 1209,
	339, 1209,
	356, 1209,
	-2, 0,
	-1, 598,
	123, 1315,
	296, 1315,
	339, 1315,
	356, 1315,
	-2, 0,
	-1, 600,
	123, 1337,
	296, 1337,
	339, 1337,
	356, 1337,
	-2, 0,
	-1, 607,
	1, 300,
	357, 300,
	358, 300,
	-2, 1262,
	-1, 633,
	1, 382,
	353, 382,
	355, 382,
	357, 382,
	358, 382,
	-2, 0,
	-1, 634,
	1, 430,
	120, 430,
	353, 430,
	355, 430,
	357, 430,
	358, 430,
	-2, 0,
	-1, 640,
	1, 396,
	353, 396,
	355, 396,
	357, 396,
	358, 396,
	-2, 0,
	-1, 642,
	1, 400,
	353, 400,
	355, 400,
	357, 400,
	358, 400,
	-2, 0,
	-1, 645,
	1, 408,
	353, 408,
	355, 408,
	357, 408,
	358, 408,
	-2, 0,
	-1, 646,
	1, 413,
	353, 413,
	355, 413,
	357, 413,
	358, 413,
	-2, 0,
	-1, 649,
	1, 423,
	353, 423,
	355, 423,
	357, 423,
	358, 423,
	-2, 0,
	-1, 658,
	112, 671,
	172, 671,
	197, 671,
	-2, 631,
	-1, 661,
	112, 670,
	172, 670,
	197, 670,
	-2, 629,
	-1, 791,
	354, 1187,
	-2, 1180,
	-1, 792,
	354, 1188,
	-2, 1181,
	-1, 798,
	5, 844,
	354, 844,
	-2, 1388,
	-1, 823,
	5, 803,
	-2, 1358,
	-1, 824,
	5, 838,
	354, 838,
	-2, 1360,
	-1, 825,
	5, 813,
	-2, 1361,
	-1, 826,
	5, 812,
	-2, 1362,
	-1, 827,
	5, 838,
	354, 838,
	-2, 1365,
	-1, 828,
	5, 838,
	354, 838,
	-2, 1366,
	-1, 829,
	5, 839,
	-2, 1369,
	-1, 830,
	5, 795,
	-2, 1370,
	-1, 831,
	5, 795,
	-2, 1371,
	-1, 832,
	5, 820,
	-2, 1375,
	-1, 833,
	5, 805,
	-2, 1376,
	-1, 834,
	5, 806,
	-2, 1377,
	-1, 835,
	5, 796,
	-2, 1382,
	-1, 836,
	5, 797,
	-2, 1383,
	-1, 837,
	5, 798,
	-2, 1384,
	-1, 838,
	5, 799,
	-2, 1385,
	-1, 839,
	5, 800,
	-2, 1386,
	-1, 840,
	5, 801,
	-2, 1387,
	-1, 841,
	5, 795,
	-2, 1392,
	-1, 842,
	5, 804,
	-2, 1397,
	-1, 843,
	5, 802,
	-2, 1400,
	-1, 844,
	5, 836,
	354, 836,
	-2, 1402,
	-1, 845,
	5, 840,
	-2, 1405,
	-1, 846,
	5, 842,
	-2, 1406,
	-1, 847,
	5, 835,
	354, 835,
	-2, 1411,
	-1, 865,
	213, 659,
	-2, 507,
	-1, 869,
	199, 1184,
	-2, 0,
	-1, 904,
	1, 209,
	353, 209,
	355, 209,
	357, 209,
	358, 209,
	-2, 634,
	-1, 907,
	4, 1410,
	10, 1410,
	11, 1410,
	13, 1410,
	14, 1410,
	15, 1410,
	16, 1410,
	17, 1410,
	18, 1410,
	20, 1410,
	21, 1410,
	23, 1410,
	26, 1410,
	28, 1410,
	30, 1410,
	33, 1410,
	34, 1410,
	35, 1410,
	36, 1410,
	37, 1410,
	38, 1410,
	39, 1410,
	40, 1410,
	41, 1410,
	42, 1410,
	44, 1410,
	45, 1410,
	46, 1410,
	47, 1410,
	48, 1410,
	51, 1410,
	52, 1410,
	53, 1410,
	55, 1410,
	56, 1410,
	57, 1410,
	60, 1410,
	61, 1410,
	62, 1410,
	63, 1410,
	64, 1410,
	66, 1410,
	67, 1410,
	68, 1410,
	70, 1410,
	71, 1410,
	72, 1410,
	73, 1410,
	81, 1410,
	82, 1410,
	83, 1410,
	84, 1410,
	85, 1410,
	86, 1410,
	87, 1410,
	88, 1410,
	90, 1410,
	92, 1410,
	94, 1410,
	97, 1410,
	98, 1410,
	100, 1410,
	104, 1410,
	105, 1410,
	106, 1410,
	107, 1410,
	108, 1410,
	109, 1410,
	113, 1410,
	114, 1410,
	115, 1410,
	116, 1410,
	117, 1410,
	118, 1410,
	119, 1410,
	121, 1410,
	124, 1410,
	126, 1410,
	127, 1410,
	129, 1410,
	131, 1410,
	132, 1410,
	133, 1410,
	134, 1410,
	135, 1410,
	136, 1410,
	137, 1410,
	138, 1410,
	139, 1410,
	140, 1410,
	142, 1410,
	144, 1410,
	145, 1410,
	146, 1410,
	147, 1410,
	148, 1410,
	149, 1410,
	150, 1410,
	151, 1410,
	152, 1410,
	154, 1410,
	156, 1410,
	157, 1410,
	158, 1410,
	159, 1410,
	160, 1410,
	161, 1410,
	162, 1410,
	163, 1410,
	165, 1410,
	166, 1410,
	168, 1410,
	169, 1410,
	170, 1410,
	171, 1410,
	173, 1410,
	176, 1410,
	177, 1410,
	178, 1410,
	179, 1410,
	180, 1410,
	181, 1410,
	182, 1410,
	183, 1410,
	184, 1410,
	185, 1410,
	186, 1410,
	187, 1410,
	188, 1410,
	192, 1410,
	193, 1410,
	194, 1410,
	195, 1410,
	196, 1410,
	198, 1410,
	201, 1410,
	202, 1410,
	204, 1410,
	205, 1410,
	207, 1410,
	209, 1410,
	210, 1410,
	211, 1410,
	212, 1410,
	213, 1410,
	214, 1410,
	216, 1410,
	217, 1410,
	218, 1410,
	219, 1410,
	220, 1410,
	222, 1410,
	223, 1410,
	224, 1410,
	225, 1410,
	226, 1410,
	227, 1410,
	228, 1410,
	229, 1410,
	231, 1410,
	232, 1410,
	233, 1410,
	234, 1410,
	235, 1410,
	236, 1410,
	237, 1410,
	238, 1410,
	239, 1410,
	240, 1410,
	241, 1410,
	242, 1410,
	244, 1410,
	245, 1410,
	246, 1410,
	247, 1410,
	248, 1410,
	249, 1410,
	250, 1410,
	251, 1410,
	252, 1410,
	253, 1410,
	254, 1410,
	256, 1410,
	257, 1410,
	258, 1410,
	259, 1410,
	260, 1410,
	262, 1410,
	263, 1410,
	264, 1410,
	265, 1410,
	266, 1410,
	267, 1410,
	268, 1410,
	269, 1410,
	270, 1410,
	272, 1410,
	273, 1410,
	274, 1410,
	275, 1410,
	276, 1410,
	277, 1410,
	278, 1410,
	279, 1410,
	280, 1410,
	281, 1410,
	283, 1410,
	285, 1410,
	286, 1410,
	287, 1410,
	288, 1410,
	289, 1410,
	290, 1410,
	291, 1410,
	293, 1410,
	294, 1410,
	295, 1410,
	298, 1410,
	299, 1410,
	300, 1410,
	301, 1410,
	303, 1410,
	304, 1410,
	305, 1410,
	306, 1410,
	309, 1410,
	310, 1410,
	311, 1410,
	312, 1410,
	314, 1410,
	316, 1410,
	317, 1410,
	318, 1410,
	319, 1410,
	320, 1410,
	321, 1410,
	324, 1410,
	329, 1410,
	330, 1410,
	331, 1410,
	332, 1410,
	333, 1410,
	334, 1410,
	335, 1410,
	337, 1410,
	338, 1410,
	339, 1410,
	340, 1410,
	342, 1410,
	343, 1410,
	344, 1410,
	345, 1410,
	346, 1410,
	347, 1410,
	348, 1410,
	349, 1410,
	350, 1410,
	352, 1410,
	355, 1410,
	356, 1410,
	359, 1410,
	360, 1410,
	-2, 0,
	-1, 932,
	123, 1337,
	296, 1337,
	339, 1337,
	356, 1337,
	-2, 0,
	-1, 1000,
	112, 670,
	172, 670,
	197, 670,
	-2, 632,
	-1, 1054,
	103, 636,
	112, 636,
	153, 636,
	172, 636,
	197, 636,
	203, 636,
	307, 636,
	-2, 730,
	-1, 1135,
	103, 636,
	112, 636,
	153, 636,
	172, 636,
	197, 636,
	203, 636,
	307, 636,
	-2, 963,
	-1, 1145,
	354, 1164,
	-2, 1152,
	-1, 1162,
	355, 1104,
	-2, 0,
	-1, 1397,
	1, 731,
	70, 731,
	103, 731,
	112, 731,
	124, 731,
	128, 731,
	130, 731,
	144, 731,
	153, 731,
	160, 731,
	169, 731,
	172, 731,
	184, 731,
	197, 731,
	199, 731,
	203, 731,
	243, 731,
	245, 731,
	307, 731,
	315, 731,
	326, 731,
	327, 731,
	336, 731,
	353, 731,
	355, 731,
	357, 731,
	358, 731,
	359, 731,
	-2, 730,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 879,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 880,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 881,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 885,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 886,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 887,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 892,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 894,
	-1, 1476,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 898,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 899,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 900,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 901,
	-1, 1505,
	208, 1046,
	-2, 1049,
	-1, 1547,
	123, 1086,
	354, 1187,
	-2, 1180,
	-1, 1548,
	123, 1087,
	-2, 1354,
	-1, 1549,
	123, 1088,
	-2, 1261,
	-1, 1550,
	123, 1089,
	-2, 1224,
	-1, 1551,
	123, 1090,
	-2, 1241,
	-1, 1552,
	123, 1091,
	-2, 1260,
	-1, 1553,
	123, 1092,
	-2, 1312,
	-1, 1759,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 893,
	-1, 1760,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 895,
	-1, 1765,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 896,
	-1, 1783,
	208, 1045,
	-2, 1048,
	-1, 1993,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 897,
	-1, 1998,
	156, 0,
	-2, 913,
	-1, 2008,
	208, 1047,
	-2, 1050,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 940,
	-1, 2051,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 941,
	-1, 2052,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 942,
	-1, 2056,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 946,
	-1, 2057,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 947,
	-1, 2058,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 948,
	-1, 2184,
	156, 0,
	-2, 914,
	-1, 2187,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 917,
	-1, 2188,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 919,
	-1, 2289,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 918,
	-1, 2290,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 920,
	-1, 2297,
	156, 0,
	-2, 949,
	-1, 2352,
	156, 0,
	-2, 950,
	-1, 2423,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1357,
}

const sqlPrivate = 57344

const sqlLast = 41626

var sqlAct = [...]int{

	792, 2422, 2081, 2406, 2375, 2452, 1618, 2407, 2264, 2408,
	1626, 2421, 2327, 662, 1191, 2027, 1919, 2225, 2157, 2091,
	71, 1198, 1684, 1232, 2112, 2143, 2114, 1887, 782, 790,
	1964, 1965, 1283, 768, 1889, 1052, 955, 1282, 859, 2244,
	173, 1392, 1615, 1597, 173, 718, 1598, 1892, 1602, 789,
	1048, 2106, 173, 1849, 1029, 1714, 2123, 1035, 1627, 1693,
	1601, 173, 1848, 1529, 465, 1436, 1794, 173, 173, 1194,
	1503, 173, 767, 1401, 173, 1410, 1935, 445, 25, 1393,
	1701, 173, 1433, 1141, 1358, 438, 936, 1211, 1680, 1310,
	1668, 1513, 670, 115, 1187, 762, 1576, 1491, 1062, 1488,
	1060, 1057, 682, 683, 1030, 1523, 435, 724, 905, 1172,
	1543, 1599, 891, 606, 894, 1176, 392, 1620, 1130, 1605,
	688, 761, 727, 1366, 1039, 1379, 173, 173, 884, 579,
	706, 1003, 1020, 1004, 173, 674, 455, 116, 601, 667,
	164, 1205, 1002, 881, 784, 1308, 2158, 935, 169, 463,
	704, 117, 1019, 1008, 115, 583, 679, 599, 1782, 1213,
	1213, 173, 173, 173, 173, 666, 1213, 1949, 173, 173,
	1950, 666, 1085, 1086, 939, 1105, 1106, 1107, 1115, 1116,
	1117, 1619, 2449, 2430, 661, 2418, 1082, 2156, 1108, 1641,
	2417, 1049, 2414, 2402, 1641, 1088, 1082, 1656, 1119, 1819,
	1820, 2401, 1933, 2392, 1233, 1656, 725, 1649, 571, 671,
	1904, 1368, 25, 2370, 1903, 748, 2366, 2239, 1623, 1087,
	1082, 1641, 785, 1786, 850, 1102, 2358, 115, 2354, 1787,
	2156, 2371, 1649, 734, 738, 721, 744, 2309, 2306, 940,
	2304, 2156, 1082, 941, 2156, 2291, 2275, 2274, 1079, 1649,
	1082, 2156, 1834, 659, 2252, 627, 2249, 1656, 1082, 2211,
	1082, 603, 2189, 1641, 2239, 1938, 1641, 658, 732, 736,
	2186, 2178, 2176, 1785, 1649, 1641, 1641, 708, 742, 1641,
	1093, 2155, 2136, 38, 2105, 2156, 1082, 2100, 1596, 1085,
	1086, 1596, 1105, 1106, 1107, 1115, 1116, 1117, 2002, 1945,
	1112, 1120, 1641, 1946, 1367, 1108, 1913, 1825, 1434, 131,
	1877, 1928, 1088, 1876, 669, 1119, 1866, 1082, 1118, 99,
	1867, 1641, 1864, 1434, 1863, 2063, 1641, 1793, 1641, 48,
	1862, 1938, 1579, 1110, 1641, 2005, 1087, 1783, 133, 1103,
	1717, 1641, 1102, 1690, 1641, 1658, 1656, 1082, 1399, 1641,
	1648, 1640, 1214, 1214, 1649, 1641, 1595, 1373, 59, 1214,
	1596, 1372, 1046, 1082, 1109, 60, 1835, 61, 1225, 710,
	1877, 711, 1226, 1683, 132, 131, 1291, 1666, 38, 1507,
	1024, 746, 125, 914, 131, 134, 131, 2159, 685, 126,
	912, 63, 911, 910, 909, 908, 712, 1093, 709, 654,
	173, 653, 173, 173, 133, 173, 652, 625, 118, 624,
	173, 752, 1104, 133, 623, 133, 173, 1112, 1120, 622,
	621, 620, 1085, 1086, 48, 619, 618, 617, 1113, 173,
	173, 173, 173, 173, 616, 1118, 615, 614, 688, 1836,
	132, 613, 612, 611, 1709, 1088, 1903, 1367, 125, 132,
	1110, 132, 610, 59, 609, 126, 1103, 125, 667, 594,
	60, 593, 61, 592, 126, 426, 425, 424, 1540, 1087,
	1219, 1212, 423, 422, 118, 1526, 407, 1342, 406, 898,
	398, 1109, 397, 1622, 396, 118, 63, 395, 738, 1819,
	1820, 388, 387, 158, 157, 156, 1111, 155, 154, 1099,
	1100, 1101, 1114, 744, 1098, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 863, 153, 131, 867, 152, 151, 1670,
	150, 2213, 1527, 883, 149, 99, 148, 147, 146, 1104,
	1093, 1830, 1828, 1829, 1821, 1822, 1823, 1824, 1826, 1827,
	858, 906, 887, 887, 133, 1113, 1538, 145, 144, 143,
	142, 141, 140, 1085, 1086, 139, 138, 137, 888, 1115,
	1116, 1117, 136, 135, 1536, 1053, 173, 131, 1528, 1525,
	1314, 950, 2442, 2420, 2413, 2380, 1088, 2349, 2307, 1119,
	132, 2232, 173, 2216, 2212, 1015, 2204, 2203, 125, 2202,
	2198, 2197, 2196, 2195, 2122, 126, 133, 1825, 2111, 173,
	1087, 2078, 2073, 38, 2072, 2071, 1102, 2013, 688, 1875,
	131, 1871, 1868, 1111, 118, 719, 1099, 1100, 1101, 1114,
	99, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	688, 1879, 132, 1856, 1229, 1847, 1818, 1815, 1861, 133,
	125, 1814, 1812, 1530, 679, 1799, 1798, 126, 1721, 48,
	1015, 1397, 1499, 1142, 1014, 1133, 173, 1149, 1197, 2029,
	2393, 1093, 953, 1051, 1819, 1820, 118, 1837, 1838, 1839,
	1050, 2361, 1001, 2348, 2347, 132, 856, 2346, 59, 915,
	2183, 1112, 1120, 125, 2330, 60, 752, 61, 2338, 2336,
	126, 2321, 2320, 2319, 2299, 1085, 1086, 946, 2261, 2240,
	2219, 2209, 2162, 2089, 173, 2087, 173, 1819, 1820, 118,
	2086, 63, 2084, 1997, 1110, 1973, 1972, 1834, 1088, 1953,
	1103, 1524, 1941, 1917, 1846, 1000, 686, 1679, 738, 173,
	173, 1808, 1807, 933, 1804, 1678, 2231, 1779, 1774, 1493,
	923, 1752, 1087, 1654, 1747, 1734, 688, 173, 1733, 667,
	1719, 1085, 1086, 465, 1689, 1177, 930, 1028, 1500, 1091,
	1092, 1094, 1095, 999, 1180, 1588, 945, 1534, 1384, 1033,
	1190, 1184, 1825, 1170, 1088, 1169, 436, 1168, 1080, 1167,
	1166, 1165, 1164, 1163, 951, 1162, 1161, 667, 1160, 1159,
	1158, 2238, 1707, 1104, 1157, 1156, 1155, 38, 1087, 1154,
	1153, 725, 1058, 1093, 1146, 1134, 1133, 720, 659, 1113,
	1840, 1027, 929, 918, 902, 1825, 115, 2191, 1011, 1012,
	2110, 1539, 658, 1948, 1821, 1822, 1823, 1824, 1826, 1827,
	1047, 1835, 1142, 1023, 1944, 131, 1385, 1915, 1651, 1329,
	1131, 1819, 1820, 48, 1734, 99, 1051, 1021, 1890, 2242,
	2241, 1055, 2235, 943, 849, 1951, 1025, 1905, 173, 1434,
	1182, 1053, 1103, 925, 133, 1183, 1870, 1869, 1758, 942,
	173, 1151, 59, 1920, 1298, 1195, 173, 1111, 173, 60,
	173, 61, 1196, 1114, 173, 1098, 1096, 1097, 1089, 1090,
	1091, 1092, 1094, 1095, 2245, 1081, 944, 1189, 1619, 1537,
	132, 2030, 1083, 1514, 1836, 63, 1173, 857, 125, 1790,
	993, 1899, 1960, 2383, 173, 126, 1070, 1535, 1645, 1230,
	688, 2439, 173, 2365, 1145, 2170, 1659, 1925, 173, 2285,
	1188, 2284, 2283, 2282, 118, 1104, 1068, 1174, 1175, 943,
	1202, 1988, 699, 159, 688, 688, 427, 1178, 738, 994,
	1206, 465, 1206, 985, 1069, 2440, 1986, 1181, 173, 1403,
	2181, 697, 695, 173, 1957, 1984, 692, 720, 173, 173,
	1592, 173, 665, 173, 1956, 173, 1216, 173, 1803, 1218,
	679, 679, 944, 883, 1802, 412, 1801, 1800, 173, 1761,
	1644, 1831, 1832, 1833, 173, 173, 1830, 1828, 1829, 1821,
	1822, 1823, 1824, 1826, 1827, 1299, 1148, 1475, 1430, 1426,
	1424, 1051, 1591, 797, 1403, 1063, 1022, 1064, 745, 1204,
	1402, 1207, 664, 173, 162, 173, 1616, 431, 173, 131,
	1089, 1090, 1091, 1092, 1094, 1095, 1446, 1340, 413, 99,
	656, 173, 1339, 2364, 1823, 1824, 1826, 1827, 1991, 1490,
	465, 1228, 2080, 173, 1227, 566, 701, 173, 133, 2266,
	173, 1872, 1284, 1490, 173, 1289, 1285, 1185, 173, 1916,
	2399, 1316, 666, 173, 1365, 115, 1975, 667, 1304, 173,
	465, 1292, 163, 173, 1386, 430, 1341, 1303, 465, 1330,
	1311, 1095, 1065, 1319, 132, 928, 1208, 1530, 2389, 1137,
	1315, 2446, 125, 1302, 1301, 1497, 685, 680, 1323, 126,
	1495, 979, 1404, 725, 2455, 2023, 1681, 1682, 1897, 1893,
	1754, 2461, 2390, 2410, 2341, 1749, 1073, 1071, 437, 725,
	1926, 1171, 1398, 1611, 777, 1514, 1345, 1344, 1415, 1417,
	738, 1239, 1376, 1270, 1343, 738, 659, 1422, 980, 659,
	659, 744, 1362, 1428, 667, 1363, 1063, 1371, 1064, 667,
	1354, 1652, 1893, 1355, 1356, 1307, 1377, 1213, 1292, 1381,
	1382, 1924, 421, 2439, 170, 1420, 663, 2445, 393, 1055,
	1425, 1827, 2295, 1407, 1189, 1338, 408, 2303, 1305, 1286,
	1530, 173, 416, 1431, 924, 433, 1982, 1128, 173, 1387,
	1806, 569, 170, 415, 414, 577, 400, 1411, 582, 173,
	2411, 173, 992, 173, 1380, 608, 173, 939, 173, 1396,
	173, 173, 173, 173, 1320, 160, 1511, 688, 429, 1432,
	1324, 173, 1325, 1065, 1326, 1223, 1327, 1445, 1328, 693,
	1976, 1819, 1820, 2020, 1837, 1838, 1839, 666, 1501, 984,
	1498, 1400, 2453, 1276, 1526, 1334, 1336, 432, 693, 694,
	707, 707, 1287, 693, 161, 2118, 2412, 428, 393, 1639,
	1554, 2267, 1306, 2409, 2438, 1414, 2444, 2436, 2224, 1613,
	921, 1630, 940, 1621, 1077, 1621, 941, 404, 913, 2021,
	1437, 1444, 744, 744, 1834, 393, 393, 740, 393, 1763,
	1076, 1527, 170, 749, 1486, 1007, 755, 2454, 1239, 1239,
	1270, 1270, 1066, 1489, 2462, 465, 1757, 1647, 115, 1484,
	1074, 2466, 657, 173, 115, 1625, 1633, 2277, 2456, 887,
	906, 887, 1642, 1637, 1636, 1643, 2207, 565, 1075, 173,
	173, 173, 1646, 173, 1634, 1653, 1635, 1528, 1525, 1825,
	703, 966, 2276, 702, 1496, 1318, 927, 2259, 2333, 2019,
	1214, 2169, 173, 1959, 1530, 1655, 2059, 989, 2168, 173,
	465, 1745, 1730, 1691, 1413, 173, 173, 389, 1697, 173,
	1178, 1726, 1181, 1390, 173, 1614, 417, 173, 1175, 1174,
	1480, 1203, 1192, 2376, 958, 173, 852, 1063, 1481, 1064,
	1482, 173, 173, 173, 1487, 1006, 2166, 173, 1835, 1006,
	173, 1672, 744, 1674, 1333, 738, 173, 173, 173, 173,
	173, 1710, 1530, 2465, 115, 173, 418, 173, 1711, 861,
	1698, 173, 990, 1720, 1688, 860, 2208, 1292, 1671, 1660,
	1290, 725, 1771, 1293, 686, 681, 2092, 725, 725, 2226,
	1675, 725, 1677, 1066, 1673, 1727, 419, 1769, 420, 2151,
	2060, 1412, 576, 1706, 1667, 1005, 2061, 1504, 2167, 1005,
	1695, 1137, 1692, 1723, 1065, 1508, 1699, 1700, 1224, 1516,
	1705, 1836, 453, 1350, 2260, 991, 934, 1297, 399, 1472,
	1007, 1546, 1546, 1559, 2152, 1571, 1736, 1748, 1722, 1746,
	1524, 1583, 1584, 1586, 586, 1751, 2165, 166, 1704, 1085,
	1086, 1483, 405, 1662, 667, 1042, 1375, 401, 1485, 1696,
	1715, 1744, 587, 1735, 1664, 1687, 456, 402, 1766, 456,
	1792, 1295, 1088, 390, 608, 1045, 865, 608, 1767, 870,
	1374, 574, 1772, 1296, 873, 1665, 568, 939, 967, 461,
	393, 1378, 461, 664, 1351, 457, 1087, 1663, 457, 869,
	1043, 880, 1102, 608, 608, 393, 895, 749, 1831, 1832,
	1833, 1764, 1762, 1830, 1828, 1829, 1821, 1822, 1823, 1824,
	1826, 1827, 458, 588, 878, 458, 1716, 667, 2082, 2217,
	1778, 1470, 1473, 1756, 2147, 939, 2148, 173, 2124, 391,
	750, 851, 460, 1936, 1789, 460, 751, 173, 1533, 173,
	3, 173, 1061, 1731, 173, 959, 2298, 1093, 173, 2257,
	450, 33, 983, 173, 1469, 173, 2150, 2206, 1878, 988,
	1880, 1239, 173, 1270, 1850, 2153, 1044, 1996, 977, 1990,
	1873, 939, 1813, 667, 2258, 173, 688, 1773, 975, 1768,
	449, 32, 960, 1657, 1594, 957, 1770, 688, 173, 1429,
	940, 446, 29, 691, 941, 1423, 997, 688, 1895, 1874,
	1853, 1854, 1855, 1901, 973, 747, 1103, 996, 1912, 448,
	17, 442, 13, 589, 919, 1851, 1885, 1881, 173, 1921,
	1884, 971, 444, 16, 1066, 1188, 969, 573, 1331, 963,
	608, 876, 567, 679, 1188, 173, 940, 952, 1322, 586,
	941, 173, 459, 2149, 879, 459, 922, 1898, 1152, 1471,
	173, 173, 1907, 1908, 1882, 1909, 1906, 587, 1532, 2405,
	2373, 1085, 1086, 608, 2140, 1911, 1980, 877, 443, 14,
	982, 1978, 441, 12, 1958, 730, 1923, 1886, 1922, 1104,
	987, 794, 1947, 1952, 1088, 33, 1927, 447, 10, 976,
	1932, 590, 1617, 1971, 1970, 1929, 1954, 462, 1931, 974,
	462, 1610, 1989, 1269, 1939, 1934, 1937, 725, 1087, 440,
	8, 1940, 115, 1222, 1969, 32, 696, 698, 588, 1221,
	393, 1220, 1217, 591, 1215, 972, 29, 1561, 1999, 1078,
	1955, 439, 4, 2010, 1072, 1731, 1943, 173, 1962, 2015,
	2016, 2017, 970, 1067, 17, 1888, 13, 968, 2314, 1983,
	962, 1009, 875, 1239, 1685, 1270, 1777, 16, 1979, 2440,
	1981, 2237, 2236, 1780, 1313, 2107, 451, 715, 582, 1093,
	707, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	1403, 1796, 1797, 2006, 1914, 174, 1418, 716, 848, 2316,
	1419, 2099, 1403, 393, 393, 2022, 2024, 2025, 1416, 753,
	854, 2009, 1239, 14, 1270, 2031, 2033, 12, 173, 2036,
	173, 170, 2343, 2159, 961, 2038, 1686, 173, 589, 2351,
	688, 2125, 10, 1013, 1010, 1427, 1421, 2088, 1103, 1845,
	2372, 2085, 2066, 2222, 173, 173, 575, 1624, 1612, 2101,
	1609, 1858, 2067, 1364, 8, 1288, 1231, 2459, 2464, 466,
	2251, 173, 467, 2093, 1819, 1820, 2094, 1085, 1086, 173,
	717, 2130, 1238, 2109, 465, 2079, 4, 2026, 2083, 173,
	1269, 1269, 173, 995, 2098, 1017, 1085, 1086, 2096, 1017,
	1016, 1918, 465, 173, 173, 2120, 1865, 173, 173, 173,
	1712, 2095, 2102, 2104, 2103, 2108, 590, 1593, 1590, 1088,
	1589, 1104, 1085, 1086, 173, 689, 1630, 725, 690, 173,
	1522, 173, 1139, 173, 173, 173, 2160, 173, 2128, 173,
	1018, 688, 393, 1087, 2134, 2129, 2127, 1239, 591, 1270,
	2135, 1971, 1970, 2163, 1201, 2131, 1695, 2139, 2193, 2018,
	393, 725, 393, 1883, 393, 1437, 2034, 1149, 1209, 1087,
	2164, 2185, 1969, 1147, 1437, 2039, 986, 981, 2180, 978,
	173, 964, 926, 1239, 1239, 1270, 1270, 655, 2265, 454,
	2126, 1321, 1239, 1239, 1270, 1270, 916, 965, 170, 1708,
	1383, 2388, 920, 2199, 1805, 2173, 170, 2070, 2326, 2177,
	2294, 1531, 608, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 1150, 52, 1967, 1239, 771, 1270, 2141, 1961,
	1985, 1604, 1603, 2121, 468, 1987, 1300, 173, 173, 793,
	2205, 673, 608, 1545, 688, 1438, 853, 608, 795, 1238,
	1238, 2132, 170, 608, 1236, 608, 796, 608, 1237, 608,
	1038, 608, 2003, 1971, 1970, 2218, 1179, 783, 1971, 1970,
	2223, 1234, 1332, 903, 1628, 1494, 1512, 2227, 608, 608,
	2228, 2221, 1788, 2220, 1969, 1143, 763, 775, 2229, 1969,
	774, 173, 1509, 173, 2243, 465, 173, 917, 1713, 2234,
	585, 1896, 586, 2230, 173, 1349, 1676, 582, 1346, 707,
	465, 1977, 749, 403, 1042, 2250, 1816, 2248, 901, 1568,
	587, 1560, 1556, 998, 1034, 393, 1129, 1629, 2233, 2064,
	2269, 949, 1902, 2271, 1045, 1971, 1970, 1395, 2268, 2253,
	2074, 393, 1031, 1031, 393, 1650, 1026, 1189, 1408, 1036,
	1040, 1357, 393, 714, 713, 947, 1969, 393, 2293, 1043,
	2287, 1294, 1661, 393, 1122, 2286, 1121, 1435, 700, 2335,
	1239, 938, 1270, 937, 1041, 173, 2263, 1193, 688, 1729,
	2460, 588, 173, 2300, 2342, 1123, 1124, 1125, 1126, 1127,
	173, 173, 688, 688, 1974, 1136, 173, 2382, 1971, 1970,
	2305, 173, 130, 127, 129, 1144, 128, 2313, 173, 2280,
	2281, 2311, 1755, 1269, 2312, 2323, 2322, 2337, 79, 1969,
	31, 30, 98, 97, 2324, 2325, 96, 95, 2315, 2332,
	2331, 2317, 94, 173, 173, 1044, 93, 2340, 92, 91,
	90, 2339, 2329, 689, 2255, 89, 690, 2310, 88, 87,
	2308, 86, 85, 84, 173, 83, 82, 452, 2350, 2270,
	2359, 81, 688, 2357, 1353, 1272, 604, 173, 2360, 78,
	77, 688, 688, 2353, 76, 1600, 75, 453, 28, 24,
	102, 589, 749, 2363, 23, 21, 22, 173, 27, 173,
	667, 26, 173, 393, 465, 1632, 19, 608, 2362, 18,
	608, 15, 608, 9, 393, 393, 1638, 749, 2368, 2369,
	2394, 20, 2379, 2396, 57, 1408, 58, 2395, 56, 55,
	54, 11, 173, 2400, 456, 2279, 2356, 50, 49, 47,
	46, 2398, 1085, 1086, 2403, 2378, 45, 44, 2404, 7,
	1971, 1970, 2397, 1239, 173, 1270, 2415, 461, 2429, 101,
	173, 2419, 2427, 457, 41, 1088, 173, 584, 40, 590,
	2431, 1969, 6, 100, 2381, 5, 2437, 2435, 2432, 2433,
	2441, 113, 1238, 110, 112, 2443, 109, 111, 114, 1087,
	458, 106, 1239, 107, 1270, 108, 105, 104, 2451, 2450,
	2428, 591, 37, 36, 35, 2458, 2457, 34, 2, 1,
	460, 0, 0, 2463, 0, 1269, 0, 1669, 2247, 0,
	0, 2467, 0, 689, 0, 0, 690, 0, 1562, 0,
	0, 0, 1630, 393, 393, 393, 0, 393, 0, 0,
	0, 0, 1272, 1272, 1347, 689, 1352, 0, 690, 0,
	1093, 0, 1359, 2384, 0, 2273, 393, 0, 0, 0,
	0, 0, 0, 393, 1269, 0, 0, 0, 0, 393,
	393, 0, 0, 393, 0, 0, 0, 0, 1395, 0,
	1271, 1395, 1239, 0, 1270, 0, 0, 0, 0, 1718,
	0, 0, 0, 0, 0, 393, 1724, 1725, 772, 72,
	0, 1408, 0, 0, 1732, 0, 0, 1819, 1820, 1103,
	1737, 1738, 1740, 1742, 1743, 0, 0, 0, 0, 393,
	459, 1750, 0, 0, 0, 1753, 0, 0, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	0, 1474, 0, 1476, 1477, 1478, 1479, 0, 0, 0,
	72, 689, 0, 0, 690, 0, 0, 0, 466, 0,
	1502, 467, 0, 0, 1238, 462, 38, 1136, 0, 0,
	0, 0, 1104, 0, 1085, 1086, 0, 0, 0, 1269,
	0, 0, 0, 0, 0, 1541, 1542, 0, 0, 1558,
	0, 1570, 1572, 1577, 1580, 1581, 1582, 1088, 0, 0,
	0, 0, 1819, 1820, 660, 1825, 1038, 668, 0, 0,
	0, 0, 48, 1238, 0, 1269, 1269, 0, 0, 0,
	1235, 1087, 726, 72, 1269, 1269, 0, 0, 0, 2385,
	2386, 2387, 0, 0, 2391, 0, 0, 1271, 1271, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 60, 0,
	61, 0, 0, 0, 0, 0, 0, 1269, 0, 0,
	1042, 0, 0, 0, 1835, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 0, 63, 0, 0, 0, 0, 0,
	1045, 393, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 1201, 0, 1201, 0, 608, 1040, 0, 393, 0,
	0, 0, 1891, 0, 0, 1043, 0, 393, 0, 1900,
	1825, 0, 0, 0, 0, 0, 393, 0, 0, 2151,
	1041, 0, 2144, 0, 0, 689, 0, 0, 690, 1669,
	2142, 0, 0, 0, 2146, 1703, 0, 1836, 1238, 0,
	0, 0, 1669, 0, 0, 1562, 1562, 0, 0, 689,
	689, 0, 690, 690, 2152, 1272, 466, 0, 0, 467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1835,
	0, 0, 393, 0, 1238, 1238, 2145, 0, 0, 0,
	0, 1044, 0, 1238, 1238, 0, 0, 1235, 1235, 393,
	0, 0, 0, 0, 0, 1395, 1031, 0, 131, 0,
	0, 1036, 1269, 0, 749, 1395, 0, 0, 99, 1819,
	1820, 0, 1837, 1838, 1839, 0, 1238, 0, 0, 1966,
	1562, 1562, 1562, 0, 0, 2182, 0, 133, 0, 1830,
	1828, 1829, 1821, 1822, 1823, 1824, 1826, 1827, 0, 0,
	0, 0, 1836, 0, 0, 0, 0, 0, 0, 0,
	0, 1702, 0, 0, 2147, 466, 2148, 0, 467, 0,
	0, 0, 1834, 132, 0, 0, 0, 0, 0, 1085,
	1086, 125, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 466, 2150, 0, 467, 0,
	0, 2028, 1088, 466, 0, 2153, 467, 118, 1759, 1760,
	0, 0, 0, 0, 1765, 0, 0, 0, 0, 1089,
	1090, 1091, 1092, 1094, 1095, 0, 1087, 1825, 0, 0,
	0, 0, 0, 0, 0, 0, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1784, 1821, 1822, 1823,
	1824, 1826, 1827, 1791, 0, 0, 1795, 1272, 0, 0,
	0, 0, 0, 0, 0, 1840, 0, 0, 1819, 1820,
	1271, 1238, 1408, 1809, 1201, 0, 0, 0, 0, 0,
	0, 2090, 0, 2149, 0, 1269, 1835, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 393,
	0, 0, 0, 0, 0, 1136, 1272, 0, 0, 0,
	0, 0, 1577, 1577, 1577, 2115, 0, 0, 0, 0,
	0, 0, 0, 2117, 1269, 0, 0, 0, 0, 1562,
	1562, 1819, 1820, 393, 0, 0, 749, 0, 0, 0,
	0, 0, 689, 0, 0, 690, 1103, 1395, 749, 0,
	0, 2137, 2138, 1408, 0, 0, 0, 0, 1894, 1836,
	0, 0, 0, 0, 0, 0, 0, 1966, 749, 0,
	0, 0, 0, 2171, 0, 2172, 1825, 393, 2174, 2175,
	1910, 393, 0, 2179, 0, 0, 0, 0, 1562, 1562,
	1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
	1562, 1562, 1562, 1562, 1562, 1562, 1562, 0, 1562, 0,
	0, 0, 0, 0, 1269, 0, 0, 1930, 0, 1104,
	1235, 0, 1359, 0, 2200, 0, 0, 0, 0, 0,
	466, 1272, 0, 467, 0, 1835, 0, 0, 0, 1825,
	0, 0, 1942, 0, 1238, 0, 1831, 1832, 1833, 0,
	0, 1830, 1828, 1829, 1821, 1822, 1823, 1824, 1826, 1827,
	0, 0, 1271, 0, 0, 0, 0, 1272, 1272, 660,
	0, 0, 1963, 0, 0, 0, 1272, 1272, 0, 1966,
	0, 749, 1600, 1238, 1966, 466, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 1992, 1835, 0,
	1993, 0, 0, 0, 0, 0, 0, 0, 1836, 1272,
	0, 1271, 1998, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	0, 2007, 72, 0, 0, 0, 0, 1054, 0, 2011,
	0, 0, 1910, 0, 0, 1408, 0, 2254, 0, 0,
	2256, 0, 0, 0, 0, 0, 1775, 1776, 393, 0,
	0, 1966, 2035, 0, 0, 0, 2037, 0, 0, 0,
	0, 0, 0, 1132, 0, 1135, 0, 0, 0, 0,
	0, 1836, 1140, 1238, 0, 0, 2288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2068,
	2069, 0, 0, 0, 0, 0, 0, 0, 2075, 2076,
	2077, 1828, 1829, 1821, 1822, 1823, 1824, 1826, 1827, 0,
	0, 0, 1235, 0, 1966, 0, 0, 0, 0, 393,
	0, 1842, 1843, 1844, 0, 0, 749, 0, 0, 0,
	0, 0, 1031, 0, 2115, 2115, 1271, 0, 0, 0,
	2328, 0, 0, 0, 1036, 1395, 0, 0, 0, 0,
	0, 0, 1201, 0, 1272, 0, 0, 0, 0, 0,
	0, 1235, 0, 0, 0, 1829, 1821, 1822, 1823, 1824,
	1826, 1827, 1271, 1271, 0, 0, 0, 2344, 2345, 0,
	0, 1271, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 2161, 0, 0,
	0, 2367, 0, 0, 1271, 0, 0, 0, 0, 1562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2377, 0, 749, 0, 2184, 393, 0, 0, 2187,
	2188, 0, 0, 0, 2190, 0, 0, 0, 0, 0,
	0, 2192, 0, 2194, 0, 0, 1966, 0, 0, 0,
	0, 689, 0, 0, 690, 0, 2328, 0, 0, 2201,
	0, 0, 689, 1562, 0, 690, 0, 0, 0, 0,
	0, 72, 689, 0, 0, 690, 1235, 0, 749, 0,
	0, 0, 0, 0, 393, 0, 0, 0, 0, 0,
	2434, 0, 2210, 0, 0, 0, 0, 660, 0, 0,
	660, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	1994, 1995, 1235, 1235, 0, 0, 0, 1272, 0, 0,
	0, 1235, 1235, 0, 0, 0, 0, 0, 0, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 0, 0, 0, 1271,
	0, 0, 0, 2246, 1235, 1562, 1272, 0, 72, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 0, 2062,
	0, 0, 0, 0, 0, 0, 0, 2278, 1085, 1086,
	0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 1492,
	0, 2289, 2290, 0, 1108, 0, 0, 0, 0, 0,
	0, 1088, 668, 0, 1119, 0, 0, 1135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2302, 0, 0, 1087, 1272, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	2334, 0, 0, 0, 72, 689, 72, 0, 690, 1235,
	0, 0, 0, 1087, 0, 0, 1093, 0, 0, 1102,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	72, 0, 1271, 0, 0, 0, 1112, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	0, 0, 467, 0, 1118, 0, 0, 0, 1036, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 1110,
	467, 1271, 0, 0, 1093, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 1120, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 689, 0, 0, 690,
	0, 0, 1118, 0, 0, 1819, 1820, 0, 1837, 1838,
	1839, 0, 2416, 0, 0, 0, 0, 1110, 2426, 2426,
	72, 2001, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 1819, 1820, 0, 1837, 1838, 1839, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 2000, 1109, 0,
	0, 1271, 2426, 0, 1113, 0, 0, 726, 1834, 0,
	0, 0, 0, 726, 726, 0, 0, 726, 0, 0,
	1819, 1820, 1235, 1837, 1838, 1839, 0, 0, 0, 0,
	0, 0, 0, 0, 1834, 0, 0, 0, 2426, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 689,
	2262, 0, 690, 0, 0, 0, 0, 0, 0, 0,
	72, 1235, 1113, 1825, 0, 0, 72, 0, 0, 0,
	0, 0, 1111, 1834, 0, 1099, 1100, 1101, 1114, 0,
	1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 1825,
	0, 0, 0, 0, 0, 0, 0, 1860, 0, 0,
	466, 1840, 0, 467, 2297, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 466, 0, 0, 467, 0,
	0, 0, 1835, 0, 0, 0, 0, 1840, 1825, 0,
	1111, 0, 1135, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 1835, 1841,
	0, 1235, 0, 0, 0, 1859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 0, 0, 690, 1835, 0, 0,
	0, 0, 0, 0, 0, 1836, 2352, 689, 689, 0,
	690, 690, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	1836, 668, 0, 0, 0, 0, 0, 689, 0, 0,
	690, 0, 0, 0, 0, 0, 689, 689, 0, 690,
	690, 0, 1831, 1832, 1833, 0, 0, 1830, 1828, 1829,
	1821, 1822, 1823, 1824, 1826, 1827, 0, 0, 0, 466,
	0, 0, 467, 0, 0, 0, 0, 0, 1831, 1832,
	1833, 0, 0, 1830, 1828, 1829, 1821, 1822, 1823, 1824,
	1826, 1827, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 1831, 1832, 1833,
	0, 0, 1830, 1828, 1829, 1821, 1822, 1823, 1824, 1826,
	1827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 791, 780, 781, 778, 779, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 1518, 177, 0, 0, 0, 0, 808, 773,
	0, 0, 0, 178, 179, 180, 332, 823, 334, 824,
	181, 825, 826, 0, 182, 338, 339, 183, 184, 776,
	807, 827, 828, 342, 0, 185, 819, 0, 799, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	470, 193, 194, 195, 0, 800, 801, 803, 0, 802,
	804, 196, 197, 394, 198, 829, 199, 830, 831, 0,
	200, 0, 201, 0, 202, 1519, 0, 822, 204, 0,
	205, 0, 0, 0, 764, 206, 207, 208, 809, 810,
	787, 0, 0, 209, 210, 832, 833, 834, 0, 211,
	0, 212, 0, 0, 471, 0, 213, 820, 0, 354,
	0, 214, 215, 216, 217, 218, 816, 818, 473, 0,
	222, 0, 219, 726, 472, 220, 835, 221, 836, 837,
	838, 839, 840, 0, 798, 0, 474, 223, 224, 225,
	475, 226, 227, 228, 0, 230, 229, 0, 821, 476,
	231, 477, 0, 232, 0, 0, 233, 726, 234, 235,
	236, 238, 365, 237, 478, 239, 240, 242, 241, 759,
	0, 788, 817, 243, 841, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 479, 249, 480, 811,
	250, 251, 252, 253, 254, 0, 255, 812, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 842, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 481, 278, 279, 765, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 805, 292, 281, 282, 293, 482, 294, 843, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 844, 299,
	300, 813, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 845, 846, 0, 0, 311, 312,
	814, 815, 786, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 806, 321, 0, 384, 322, 323, 324,
	385, 847, 1517, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 760, 0, 0, 0, 0, 72,
	758, 0, 0, 0, 0, 756, 757, 1520, 0, 0,
	0, 0, 0, 0, 766, 1515, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	464, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2318, 0, 175, 176, 483, 177,
	484, 485, 486, 487, 331, 488, 489, 490, 491, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 492,
	182, 338, 339, 183, 184, 493, 494, 340, 341, 342,
	495, 185, 343, 496, 469, 497, 186, 187, 188, 0,
	189, 498, 190, 191, 192, 499, 470, 193, 194, 195,
	500, 501, 503, 502, 504, 505, 506, 196, 197, 394,
	198, 344, 199, 345, 346, 507, 200, 508, 201, 509,
	202, 510, 511, 203, 204, 512, 205, 513, 1135, 514,
	347, 206, 207, 208, 348, 349, 515, 516, 517, 209,
	210, 350, 351, 352, 0, 211, 518, 212, 519, 520,
	471, 521, 213, 353, 522, 354, 523, 214, 215, 216,
	217, 218, 355, 356, 473, 524, 222, 525, 219, 526,
	472, 220, 357, 221, 358, 359, 360, 361, 362, 527,
	363, 528, 474, 223, 224, 225, 475, 226, 227, 228,
	529, 230, 229, 530, 364, 476, 231, 477, 531, 232,
	532, 533, 233, 0, 234, 235, 236, 238, 365, 237,
	478, 239, 240, 242, 241, 534, 535, 536, 366, 243,
	367, 244, 245, 537, 246, 538, 539, 247, 540, 541,
	248, 368, 479, 249, 480, 369, 250, 251, 252, 253,
	254, 542, 255, 370, 256, 371, 257, 543, 258, 259,
	260, 261, 262, 372, 263, 264, 544, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 545,
	277, 481, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 546, 289, 374, 288, 290, 291, 547, 292, 281,
	282, 293, 482, 294, 375, 376, 295, 548, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 549, 303,
	550, 304, 305, 306, 307, 308, 309, 310, 551, 379,
	380, 381, 552, 553, 311, 312, 382, 383, 554, 313,
	314, 315, 316, 555, 556, 317, 318, 319, 320, 557,
	321, 558, 384, 322, 323, 324, 385, 386, 559, 560,
	325, 561, 562, 563, 564, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 0, 1388, 0,
	0, 0, 0, 0, 0, 0, 0, 1389, 175, 176,
	483, 177, 484, 485, 486, 487, 331, 488, 489, 490,
	491, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 492, 182, 338, 339, 183, 184, 493, 494, 340,
	341, 342, 495, 185, 343, 496, 469, 497, 186, 187,
	188, 0, 189, 498, 190, 191, 192, 499, 470, 193,
	194, 195, 500, 501, 503, 502, 504, 505, 506, 196,
	197, 394, 198, 344, 199, 345, 346, 507, 200, 508,
	201, 509, 202, 510, 511, 203, 204, 512, 205, 513,
	0, 514, 347, 206, 207, 208, 348, 349, 515, 516,
	517, 209, 210, 350, 351, 352, 0, 211, 518, 212,
	519, 520, 471, 521, 213, 353, 522, 354, 523, 214,
	215, 216, 217, 218, 355, 356, 473, 524, 222, 525,
	219, 526, 472, 220, 357, 221, 358, 359, 360, 361,
	362, 527, 363, 528, 474, 223, 224, 225, 475, 226,
	227, 228, 529, 230, 229, 530, 364, 476, 231, 477,
	531, 232, 532, 533, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 534, 535, 536,
	366, 243, 367, 244, 245, 537, 246, 538, 539, 247,
	540, 541, 248, 368, 479, 249, 480, 369, 250, 251,
	252, 253, 254, 542, 255, 370, 256, 371, 257, 543,
	258, 259, 260, 261, 262, 372, 263, 264, 544, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 545, 277, 481, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 546, 289, 374, 288, 290, 291, 547,
	292, 281, 282, 293, 482, 294, 375, 376, 295, 548,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	549, 303, 550, 304, 305, 306, 307, 308, 309, 310,
	551, 379, 380, 381, 552, 553, 311, 312, 382, 383,
	554, 313, 314, 315, 316, 555, 556, 317, 318, 319,
	320, 557, 321, 558, 384, 322, 323, 324, 385, 386,
	559, 560, 325, 561, 562, 563, 564, 326, 327, 328,
	329, 330, 0, 0, 0, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2133, 175, 176, 483, 177, 484, 485, 486, 487, 331,
	488, 489, 490, 491, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 492, 182, 338, 339, 183, 184,
	493, 494, 340, 341, 342, 495, 185, 343, 496, 469,
	497, 186, 187, 188, 0, 189, 498, 190, 191, 192,
	499, 470, 193, 194, 195, 500, 501, 503, 502, 504,
	505, 506, 196, 197, 394, 198, 344, 199, 345, 346,
	507, 200, 508, 201, 509, 202, 510, 511, 203, 204,
	512, 205, 513, 0, 514, 347, 206, 207, 208, 348,
	349, 515, 516, 517, 209, 210, 350, 351, 352, 0,
	211, 518, 212, 519, 520, 471, 521, 213, 353, 522,
	354, 523, 214, 215, 216, 217, 218, 355, 356, 473,
	524, 222, 525, 219, 526, 472, 220, 357, 221, 358,
	359, 360, 361, 362, 527, 363, 528, 474, 223, 224,
	225, 475, 226, 227, 228, 529, 230, 229, 530, 364,
	476, 231, 477, 531, 232, 532, 533, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	534, 535, 536, 366, 243, 367, 244, 245, 537, 246,
	538, 539, 247, 540, 541, 248, 368, 479, 249, 480,
	369, 250, 251, 252, 253, 254, 542, 255, 370, 256,
	371, 257, 543, 258, 259, 260, 261, 262, 372, 263,
	264, 544, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 545, 277, 481, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 546, 289, 374, 288,
	290, 291, 547, 292, 281, 282, 293, 482, 294, 375,
	376, 295, 548, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 549, 303, 550, 304, 305, 306, 307,
	308, 309, 310, 551, 379, 380, 381, 552, 553, 311,
	312, 382, 383, 554, 313, 314, 315, 316, 555, 556,
	317, 318, 319, 320, 557, 321, 558, 384, 322, 323,
	324, 385, 386, 559, 560, 325, 561, 562, 563, 564,
	326, 327, 328, 329, 330, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 175, 176, 483, 177, 484, 485, 486, 487, 331,
	488, 489, 490, 491, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 492, 182, 338, 339, 183, 184,
	493, 494, 340, 341, 342, 495, 185, 343, 496, 469,
	497, 186, 187, 188, 0, 189, 498, 190, 191, 192,
	499, 470, 193, 194, 195, 500, 501, 503, 502, 504,
	505, 506, 196, 197, 394, 198, 344, 199, 345, 346,
	507, 200, 508, 201, 509, 202, 510, 511, 203, 204,
	512, 205, 513, 0, 514, 347, 206, 207, 208, 348,
	349, 515, 516, 517, 209, 210, 350, 351, 352, 0,
	211, 518, 212, 519, 520, 471, 521, 213, 353, 522,
	354, 523, 214, 215, 216, 217, 218, 355, 356, 473,
	524, 222, 525, 219, 526, 472, 220, 357, 221, 358,
	359, 360, 361, 362, 527, 363, 528, 474, 223, 224,
	225, 475, 226, 227, 228, 529, 230, 229, 530, 364,
	476, 231, 477, 531, 232, 532, 533, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	534, 535, 536, 366, 243, 367, 244, 245, 537, 246,
	538, 539, 247, 540, 541, 248, 368, 479, 249, 480,
	369, 250, 251, 252, 253, 254, 542, 255, 370, 256,
	371, 257, 543, 258, 259, 260, 261, 262, 372, 263,
	264, 544, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 545, 277, 481, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 546, 289, 374, 288,
	290, 291, 547, 292, 281, 282, 293, 482, 294, 375,
	376, 295, 548, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 549, 303, 550, 304, 305, 306, 307,
	308, 309, 310, 551, 379, 380, 381, 552, 553, 311,
	312, 382, 383, 554, 313, 314, 315, 316, 555, 556,
	317, 318, 319, 320, 557, 321, 558, 384, 322, 323,
	324, 385, 386, 559, 560, 325, 561, 562, 563, 564,
	326, 327, 328, 329, 330, 791, 780, 781, 778, 779,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	1037, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 131, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 133, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 907, 847, 0, 0, 325, 0, 0, 0, 125,
	326, 327, 328, 329, 330, 760, 126, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 0, 0,
	0, 0, 0, 0, 0, 1138, 0, 0, 0, 0,
	669, 769, 791, 780, 781, 778, 779, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 131, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 133, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 907, 847,
	0, 0, 325, 0, 0, 0, 125, 326, 327, 328,
	329, 330, 760, 126, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 791, 780, 781, 778, 779,
	770, 0, 1138, 0, 0, 0, 0, 0, 769, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 131, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 133, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 907, 847, 0, 0, 325, 0, 0, 0, 125,
	326, 327, 328, 329, 330, 760, 126, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 791, 780,
	781, 778, 779, 770, 0, 1138, 0, 0, 0, 0,
	0, 769, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 808, 773, 0, 0, 0, 178, 179, 180,
	332, 823, 334, 824, 181, 825, 826, 1573, 182, 338,
	339, 183, 184, 776, 807, 827, 828, 342, 0, 185,
	819, 0, 799, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 800,
	801, 803, 0, 802, 804, 196, 197, 394, 198, 829,
	199, 830, 831, 0, 200, 0, 201, 0, 202, 0,
	0, 822, 204, 0, 205, 0, 0, 0, 764, 206,
	207, 208, 809, 810, 787, 0, 0, 209, 210, 832,
	833, 834, 0, 211, 0, 212, 0, 1578, 471, 0,
	213, 820, 0, 354, 0, 214, 215, 216, 217, 218,
	816, 818, 473, 0, 222, 0, 219, 0, 472, 220,
	835, 221, 836, 837, 838, 839, 840, 0, 798, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 1574, 821, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 759, 0, 788, 817, 243, 841, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 811, 250, 251, 252, 253, 254, 0,
	255, 812, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 842, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 765, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 805, 292, 281, 282, 293,
	482, 294, 843, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 844, 299, 300, 813, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 845, 846,
	0, 1575, 311, 312, 814, 815, 786, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 806, 321, 0,
	384, 322, 323, 324, 385, 847, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 760, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 756,
	757, 791, 780, 781, 778, 779, 770, 0, 766, 0,
	0, 0, 0, 0, 769, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 808, 773, 0, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 776, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 764, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 759, 2097, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 765, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 760, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 756, 757, 1032, 791, 780, 781, 778, 779,
	770, 766, 0, 0, 0, 0, 0, 769, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 1361, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 1360, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 791, 780,
	781, 778, 779, 770, 0, 766, 0, 0, 0, 0,
	0, 769, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 808, 773, 0, 0, 0, 178, 179, 180,
	332, 823, 334, 824, 181, 825, 826, 0, 182, 338,
	339, 183, 184, 776, 807, 827, 828, 342, 0, 185,
	819, 0, 799, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 800,
	801, 803, 0, 802, 804, 196, 197, 394, 198, 829,
	199, 830, 831, 0, 200, 0, 201, 0, 202, 0,
	0, 822, 204, 0, 205, 0, 0, 0, 764, 206,
	207, 208, 809, 810, 787, 0, 0, 209, 210, 832,
	833, 834, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 820, 0, 354, 0, 214, 215, 216, 217, 218,
	816, 818, 473, 0, 222, 0, 219, 0, 472, 220,
	835, 221, 836, 837, 838, 839, 840, 0, 798, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 821, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 759, 0, 788, 817, 243, 841, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 811, 250, 251, 252, 253, 254, 0,
	255, 812, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 842, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 765, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 805, 292, 281, 282, 293,
	482, 294, 843, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 844, 299, 300, 813, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 845, 846,
	0, 0, 311, 312, 814, 815, 786, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 806, 321, 0,
	384, 322, 323, 324, 385, 847, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 760, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 756,
	757, 0, 0, 0, 0, 0, 1142, 1510, 766, 0,
	0, 0, 0, 0, 769, 791, 780, 781, 778, 779,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	1037, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 791, 780,
	781, 778, 779, 770, 0, 766, 0, 0, 0, 0,
	0, 769, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 808, 773, 0, 0, 0, 178, 179, 180,
	332, 823, 334, 824, 181, 825, 826, 0, 182, 338,
	339, 183, 184, 776, 807, 827, 828, 342, 0, 185,
	819, 0, 799, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 800,
	801, 803, 0, 802, 804, 196, 197, 394, 198, 829,
	199, 830, 831, 0, 200, 0, 201, 0, 202, 0,
	0, 822, 204, 0, 205, 0, 0, 0, 764, 206,
	207, 208, 809, 810, 787, 0, 0, 209, 210, 832,
	833, 834, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 820, 0, 354, 0, 214, 215, 216, 217, 218,
	816, 818, 473, 0, 222, 0, 219, 0, 472, 220,
	835, 221, 836, 837, 838, 839, 840, 0, 798, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 821, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 759, 0, 788, 817, 243, 841, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 811, 250, 251, 252, 253, 254, 0,
	255, 812, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 842, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 765, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 805, 292, 281, 282, 293,
	482, 294, 843, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 844, 299, 300, 813, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 845, 846,
	0, 0, 311, 312, 814, 815, 786, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 806, 321, 0,
	384, 322, 323, 324, 385, 847, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 760, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 756,
	757, 791, 780, 781, 778, 779, 770, 0, 766, 2065,
	0, 0, 0, 0, 769, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 808, 773, 0, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 776, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 764, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 759, 0, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 765, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 2014,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 760, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 756, 757, 791, 780, 781, 778, 779, 770,
	0, 766, 0, 0, 0, 0, 0, 769, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 808, 773,
	0, 0, 0, 178, 179, 180, 332, 823, 334, 824,
	181, 825, 826, 0, 182, 338, 339, 183, 184, 776,
	807, 827, 828, 342, 0, 185, 819, 0, 799, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	470, 193, 194, 195, 0, 800, 801, 803, 0, 802,
	804, 196, 197, 394, 198, 829, 199, 830, 831, 0,
	200, 0, 201, 0, 202, 0, 0, 822, 204, 0,
	205, 0, 0, 0, 764, 206, 207, 208, 809, 810,
	787, 0, 0, 209, 210, 832, 833, 834, 0, 211,
	0, 212, 0, 0, 471, 0, 213, 820, 0, 354,
	0, 214, 215, 216, 217, 218, 816, 818, 473, 0,
	222, 0, 219, 0, 472, 220, 835, 221, 836, 837,
	838, 839, 840, 0, 798, 0, 474, 223, 224, 225,
	475, 226, 227, 228, 0, 230, 229, 0, 821, 476,
	231, 477, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 478, 239, 240, 242, 241, 759,
	0, 788, 817, 243, 841, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 479, 249, 480, 811,
	250, 251, 252, 253, 254, 0, 255, 812, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 842, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 481, 278, 279, 765, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 805, 292, 281, 282, 293, 482, 294, 843, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 844, 299,
	300, 813, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 845, 846, 0, 0, 311, 312,
	814, 815, 786, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 806, 321, 0, 384, 322, 323, 324,
	385, 847, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 760, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 756, 757, 791, 780, 781,
	778, 779, 770, 0, 766, 2004, 0, 0, 0, 0,
	769, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 808, 773, 0, 0, 0, 178, 179, 180, 332,
	823, 334, 824, 181, 825, 826, 0, 182, 338, 339,
	183, 184, 776, 807, 827, 828, 342, 0, 185, 819,
	0, 799, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 470, 193, 194, 195, 0, 800, 801,
	803, 0, 802, 804, 196, 197, 394, 198, 829, 199,
	830, 831, 0, 200, 0, 201, 0, 202, 0, 0,
	822, 204, 0, 205, 0, 0, 0, 764, 206, 207,
	208, 809, 810, 787, 0, 0, 209, 210, 832, 833,
	834, 0, 211, 0, 212, 0, 1578, 471, 0, 213,
	820, 0, 354, 0, 214, 215, 216, 217, 218, 816,
	818, 473, 0, 222, 0, 219, 0, 472, 220, 835,
	221, 836, 837, 838, 839, 840, 0, 798, 0, 474,
	223, 224, 225, 475, 226, 227, 228, 0, 230, 229,
	0, 821, 476, 231, 477, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 478, 239, 240,
	242, 241, 759, 0, 788, 817, 243, 841, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 479,
	249, 480, 811, 250, 251, 252, 253, 254, 0, 255,
	812, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	842, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 481, 278,
	279, 765, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 805, 292, 281, 282, 293, 482,
	294, 843, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 844, 299, 300, 813, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 845, 846, 0,
	0, 311, 312, 814, 815, 786, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 806, 321, 0, 384,
	322, 323, 324, 385, 847, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 760, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 756, 757,
	791, 780, 781, 778, 779, 770, 0, 766, 0, 0,
	0, 0, 0, 769, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 808, 773, 0, 0, 0, 178,
	179, 180, 332, 823, 334, 824, 181, 825, 826, 0,
	182, 338, 339, 183, 184, 776, 807, 827, 828, 342,
	0, 185, 819, 0, 799, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 470, 193, 194, 195,
	0, 800, 801, 803, 0, 802, 804, 196, 197, 394,
	198, 829, 199, 830, 831, 0, 200, 0, 201, 0,
	202, 0, 0, 822, 204, 0, 205, 0, 0, 0,
	764, 206, 207, 208, 809, 810, 787, 0, 0, 209,
	210, 832, 833, 834, 0, 211, 0, 212, 0, 0,
	471, 0, 213, 820, 0, 354, 0, 214, 215, 216,
	217, 218, 816, 818, 473, 0, 222, 0, 219, 0,
	472, 220, 835, 221, 836, 837, 838, 839, 840, 0,
	798, 0, 474, 223, 224, 225, 475, 226, 227, 228,
	0, 230, 229, 0, 821, 476, 231, 477, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	478, 239, 240, 242, 241, 759, 0, 788, 817, 243,
	841, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 479, 249, 480, 811, 250, 251, 252, 253,
	254, 0, 255, 812, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 842, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 481, 278, 279, 765, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 805, 292, 281,
	282, 293, 482, 294, 843, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 844, 299, 300, 813, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	845, 846, 0, 0, 311, 312, 814, 815, 786, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 806,
	321, 0, 384, 322, 323, 324, 385, 847, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	760, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 756, 757, 1032, 0, 0, 0, 0, 0, 0,
	766, 0, 0, 0, 0, 1587, 769, 791, 780, 781,
	778, 779, 770, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 808, 773, 0, 0, 0, 178, 179, 180, 332,
	823, 334, 824, 181, 825, 826, 0, 182, 338, 339,
	183, 184, 776, 807, 827, 828, 342, 0, 185, 819,
	0, 799, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 470, 193, 194, 195, 0, 800, 801,
	803, 0, 802, 804, 196, 197, 394, 198, 829, 199,
	830, 831, 0, 200, 0, 201, 0, 202, 0, 0,
	822, 204, 0, 205, 0, 0, 0, 764, 206, 207,
	208, 809, 810, 787, 0, 0, 209, 210, 832, 833,
	834, 0, 211, 0, 212, 0, 0, 471, 0, 213,
	820, 0, 354, 0, 214, 215, 216, 217, 218, 816,
	818, 473, 0, 222, 0, 219, 0, 472, 220, 835,
	221, 836, 837, 838, 839, 840, 0, 798, 0, 474,
	223, 224, 225, 475, 226, 227, 228, 0, 230, 229,
	0, 821, 476, 231, 477, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 478, 239, 240,
	242, 241, 759, 0, 788, 817, 243, 841, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 479,
	249, 480, 811, 250, 251, 252, 253, 254, 0, 255,
	812, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	842, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 481, 278,
	279, 765, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 805, 292, 281, 282, 293, 482,
	294, 843, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 844, 299, 300, 813, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 845, 846, 0,
	0, 311, 312, 814, 815, 786, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 806, 321, 0, 384,
	322, 323, 324, 385, 847, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 760, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 756, 757,
	0, 0, 0, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 1585, 769, 791, 780, 781, 778, 779, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 808, 773,
	0, 0, 0, 178, 179, 180, 332, 823, 334, 824,
	181, 825, 826, 0, 182, 338, 339, 183, 184, 776,
	807, 827, 828, 342, 0, 185, 819, 0, 799, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	470, 193, 194, 195, 0, 800, 801, 803, 0, 802,
	804, 196, 197, 394, 198, 829, 199, 830, 831, 0,
	200, 0, 201, 0, 202, 0, 0, 822, 204, 0,
	205, 0, 0, 0, 764, 206, 207, 208, 809, 810,
	787, 0, 0, 209, 210, 832, 833, 834, 0, 211,
	0, 212, 0, 0, 471, 0, 213, 820, 0, 354,
	0, 214, 215, 216, 217, 218, 816, 818, 473, 0,
	222, 0, 219, 0, 472, 220, 835, 221, 836, 837,
	838, 839, 840, 0, 798, 0, 474, 223, 224, 225,
	475, 226, 227, 228, 0, 230, 229, 0, 821, 476,
	231, 477, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 478, 239, 240, 242, 241, 759,
	0, 788, 817, 243, 841, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 479, 249, 480, 811,
	250, 251, 252, 253, 254, 0, 255, 812, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 842, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 481, 278, 279, 765, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 805, 292, 281, 282, 293, 482, 294, 843, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 844, 299,
	300, 813, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 845, 846, 0, 0, 311, 312,
	814, 815, 786, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 806, 321, 0, 384, 322, 323, 324,
	385, 847, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 760, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 756, 757, 0, 0, 0,
	0, 0, 0, 0, 766, 0, 0, 0, 0, 1569,
	769, 791, 780, 781, 778, 779, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 808, 773, 0, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 776, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 764, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 759, 0, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 765, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 760, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 756, 757, 0, 0, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 1557, 769, 791, 780,
	781, 778, 779, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 808, 773, 0, 0, 0, 178, 179, 180,
	332, 823, 334, 824, 181, 825, 826, 0, 182, 338,
	339, 183, 184, 776, 807, 827, 828, 342, 0, 185,
	819, 0, 799, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 800,
	801, 803, 0, 802, 804, 196, 197, 394, 198, 829,
	199, 830, 831, 0, 200, 0, 201, 0, 202, 0,
	0, 822, 204, 0, 205, 0, 0, 0, 764, 206,
	207, 208, 809, 810, 787, 0, 0, 209, 210, 832,
	833, 834, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 820, 0, 354, 0, 214, 215, 216, 217, 218,
	816, 818, 473, 0, 222, 0, 219, 0, 472, 220,
	835, 221, 836, 837, 838, 839, 840, 0, 798, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 821, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 759, 0, 788, 817, 243, 841, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 811, 250, 251, 252, 253, 254, 0,
	255, 812, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 842, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 765, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 805, 292, 281, 282, 293,
	482, 294, 843, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 844, 299, 300, 813, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 845, 846,
	0, 0, 311, 312, 814, 815, 786, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 806, 321, 0,
	384, 322, 323, 324, 385, 847, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 760, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 756,
	757, 0, 0, 0, 0, 0, 0, 0, 766, 0,
	0, 0, 0, 1555, 769, 1547, 780, 781, 778, 779,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 1550, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 1551, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	1552, 1549, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 1553, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 1548, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	1544, 769, 1547, 780, 781, 778, 779, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 1550, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 1551, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 1552, 1549, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 1553, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	1548, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 791, 780, 781, 778, 779,
	770, 0, 766, 0, 0, 0, 0, 0, 769, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 0, 0,
	0, 0, 0, 0, 0, 766, 1505, 0, 0, 0,
	1391, 769, 791, 780, 781, 778, 779, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 791, 780, 781, 778, 779,
	770, 0, 766, 0, 0, 0, 0, 0, 769, 0,
	0, 175, 176, 1348, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 332, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	855, 769, 791, 780, 781, 778, 779, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 195, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 0, 0, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 754, 769, 791,
	780, 781, 778, 779, 770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 808, 773, 0, 0, 0, 178, 179,
	180, 332, 823, 334, 824, 181, 825, 826, 0, 182,
	338, 339, 183, 184, 776, 807, 827, 828, 342, 0,
	185, 819, 0, 799, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	800, 801, 803, 0, 802, 804, 196, 197, 394, 198,
	829, 199, 830, 831, 0, 200, 0, 201, 0, 202,
	0, 0, 822, 204, 0, 205, 0, 0, 0, 764,
	206, 207, 208, 809, 810, 787, 0, 0, 209, 210,
	832, 833, 834, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 820, 0, 354, 0, 214, 215, 216, 217,
	218, 816, 818, 473, 0, 222, 0, 219, 0, 472,
	220, 835, 221, 836, 837, 838, 839, 840, 0, 798,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 821, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 759, 0, 788, 817, 243, 841,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 811, 250, 251, 252, 253, 254,
	0, 255, 812, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 842, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 765, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 805, 292, 281, 282,
	293, 482, 294, 843, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 844, 299, 300, 813, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 845,
	846, 0, 0, 311, 312, 814, 815, 786, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 806, 321,
	0, 384, 322, 323, 324, 385, 847, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 760,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	756, 757, 791, 780, 781, 778, 779, 770, 0, 766,
	0, 0, 0, 0, 0, 769, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 808, 773, 0, 0,
	0, 178, 179, 180, 332, 823, 334, 824, 181, 825,
	826, 0, 182, 338, 339, 183, 184, 776, 807, 827,
	828, 342, 0, 185, 819, 0, 799, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 470, 193,
	194, 2425, 0, 800, 801, 803, 0, 802, 804, 196,
	197, 394, 198, 829, 199, 830, 831, 0, 200, 0,
	201, 0, 202, 0, 0, 822, 204, 0, 205, 0,
	0, 0, 764, 206, 207, 208, 809, 810, 787, 0,
	0, 209, 210, 832, 833, 834, 0, 211, 0, 212,
	0, 0, 471, 0, 213, 820, 0, 354, 0, 214,
	215, 216, 217, 218, 816, 818, 473, 0, 222, 0,
	219, 0, 472, 220, 835, 221, 836, 837, 838, 839,
	840, 0, 798, 0, 474, 223, 224, 225, 475, 226,
	227, 228, 0, 230, 229, 0, 821, 476, 231, 477,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 478, 239, 240, 242, 241, 759, 0, 788,
	817, 243, 841, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 479, 249, 480, 811, 250, 251,
	252, 253, 254, 0, 255, 812, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 842, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 481, 278, 279, 765, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 805,
	292, 281, 282, 293, 482, 294, 843, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 844, 299, 300, 813,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 845, 846, 0, 0, 311, 312, 814, 815,
	786, 313, 314, 2424, 316, 0, 0, 317, 318, 319,
	320, 806, 321, 0, 384, 322, 323, 324, 385, 847,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 760, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 756, 757, 791, 780, 781, 778, 779,
	770, 0, 766, 0, 0, 0, 0, 0, 769, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 808,
	773, 0, 0, 0, 178, 179, 180, 2423, 823, 334,
	824, 181, 825, 826, 0, 182, 338, 339, 183, 184,
	776, 807, 827, 828, 342, 0, 185, 819, 0, 799,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 2425, 0, 800, 801, 803, 0,
	802, 804, 196, 197, 394, 198, 829, 199, 830, 831,
	0, 200, 0, 201, 0, 202, 0, 0, 822, 204,
	0, 205, 0, 0, 0, 764, 206, 207, 208, 809,
	810, 787, 0, 0, 209, 210, 832, 833, 834, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 820, 0,
	354, 0, 214, 215, 216, 217, 218, 816, 818, 473,
	0, 222, 0, 219, 0, 472, 220, 835, 221, 836,
	837, 838, 839, 840, 0, 798, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 821,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	759, 0, 788, 817, 243, 841, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	811, 250, 251, 252, 253, 254, 0, 255, 812, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 842, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 765,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 805, 292, 281, 282, 293, 482, 294, 843,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 844,
	299, 300, 813, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 845, 846, 0, 0, 311,
	312, 814, 815, 786, 313, 314, 2424, 316, 0, 0,
	317, 318, 319, 320, 806, 321, 0, 384, 322, 323,
	324, 385, 847, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 760, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 756, 757, 791, 780,
	781, 778, 779, 770, 0, 766, 0, 0, 0, 0,
	0, 769, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 808, 773, 0, 0, 0, 178, 179, 180,
	332, 823, 334, 824, 181, 825, 826, 0, 182, 338,
	339, 183, 184, 776, 807, 827, 828, 342, 0, 185,
	819, 0, 799, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 800,
	801, 803, 0, 802, 804, 196, 197, 394, 198, 829,
	199, 830, 831, 0, 200, 0, 201, 0, 202, 0,
	0, 822, 204, 0, 205, 0, 0, 0, 764, 206,
	207, 208, 809, 810, 787, 0, 0, 209, 210, 832,
	833, 834, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 820, 0, 354, 0, 214, 215, 216, 217, 218,
	816, 818, 473, 0, 222, 0, 219, 0, 472, 220,
	835, 221, 836, 837, 838, 839, 840, 0, 798, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 821, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 759, 0, 788, 817, 243, 841, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 811, 250, 251, 252, 253, 254, 0,
	255, 812, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 842, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 765, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 805, 292, 281, 282, 293,
	482, 294, 843, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 844, 299, 300, 813, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 845, 846,
	0, 0, 311, 312, 814, 815, 786, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 806, 321, 0,
	384, 322, 323, 324, 385, 847, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 760, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 756,
	757, 791, 780, 781, 778, 779, 770, 0, 766, 0,
	0, 0, 0, 0, 769, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 808, 773, 0, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 776, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 764, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 0, 0, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 1567, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 791, 780, 781, 778, 779, 770, 1565, 0, 0,
	0, 0, 1563, 1564, 0, 0, 0, 175, 176, 0,
	177, 1566, 0, 0, 0, 808, 773, 769, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 0, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 0, 0, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 1567, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 791, 780, 781, 778, 779, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 1566, 0, 0, 0, 808, 773, 769, 0, 0,
	178, 179, 180, 0, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 776, 807, 827, 828,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	2425, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 764, 206, 207, 208, 809, 810, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 0, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 0, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 759, 0, 788, 817,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 765, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 0, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 814, 815, 786,
	313, 314, 2424, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 791, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 756, 757, 0, 0, 0, 175, 176, 0,
	177, 766, 0, 0, 0, 808, 0, 769, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 807, 340, 341,
	342, 0, 185, 819, 0, 799, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 800, 801, 803, 0, 802, 804, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 809, 810, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 820, 0, 354, 0, 214, 215,
	216, 217, 218, 816, 818, 473, 0, 222, 0, 219,
	0, 472, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 821, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 0, 0, 0, 817,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 811, 250, 251, 252,
	253, 254, 0, 255, 812, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 805, 292,
	281, 282, 293, 482, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 813, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 814, 815, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	806, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 904, 0, 687, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 1968, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 469, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	470, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 471, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 473, 0,
	222, 0, 219, 0, 472, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 474, 223, 224, 225,
	475, 226, 227, 228, 0, 230, 229, 0, 364, 476,
	231, 477, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 478, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 479, 249, 480, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 481, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 131, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 482, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 133, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	907, 386, 0, 0, 325, 0, 0, 0, 125, 326,
	327, 328, 329, 330, 0, 126, 687, 684, 0, 685,
	680, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 118, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	469, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 1312, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 677, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	473, 0, 222, 0, 219, 0, 472, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	364, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 478, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 678, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 482, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 676, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 687, 684, 0, 685,
	680, 675, 0, 0, 0, 0, 0, 686, 681, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	469, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 1309, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 677, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	473, 0, 222, 0, 219, 0, 472, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	364, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 478, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 678, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 482, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 676, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 687, 684, 0, 685,
	680, 675, 0, 0, 0, 0, 0, 686, 681, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	469, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 470, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 948, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 677, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 471, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 355, 356,
	473, 0, 222, 0, 219, 0, 472, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 474, 223,
	224, 225, 475, 226, 227, 228, 0, 230, 229, 0,
	364, 476, 231, 477, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 478, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 678, 0, 247, 0, 0, 248, 368, 479, 249,
	480, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 481, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 482, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 676, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 672, 0, 687, 684,
	0, 685, 680, 675, 0, 0, 0, 686, 681, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 469, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 677, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 473, 0, 222, 0, 219, 0, 472, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 364, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 678, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	482, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 676, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 687, 684,
	0, 685, 680, 675, 0, 0, 0, 0, 0, 686,
	681, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 469, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 470, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 677, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 471, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 473, 0, 222, 0, 219, 0, 472, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	474, 223, 224, 225, 475, 226, 227, 228, 0, 230,
	229, 0, 364, 476, 231, 477, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 478, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 678, 0, 247, 0, 0, 248, 368,
	479, 249, 480, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 481,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	482, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 676, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 669, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 686,
	681, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 729, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	131, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 133,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 907, 386, 0, 0, 325,
	0, 172, 0, 125, 326, 327, 328, 329, 330, 0,
	126, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 723, 0, 1056,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 729, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 131, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 133, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 907, 386, 0,
	0, 325, 669, 0, 172, 125, 326, 327, 328, 329,
	330, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 723,
	0, 1056, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 131, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 133, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	907, 386, 0, 0, 325, 1694, 0, 172, 125, 326,
	327, 328, 329, 330, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 118, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 729, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 722, 0,
	172, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 723, 0, 728, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 729, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 0,
	325, 0, 172, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 723, 0,
	728, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 729, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 0, 325, 0, 172, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	723, 0, 728, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 0, 325, 0, 0, 172, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 1186, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 0, 172,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 1631, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 0, 325,
	0, 172, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 2029,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 791, 780, 781, 778, 779, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 1059, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 823, 334, 824, 181, 825, 826,
	0, 182, 338, 339, 183, 184, 0, 0, 827, 828,
	342, 0, 185, 343, 0, 469, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 470, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 829, 199, 830, 831, 0, 200, 0, 201,
	0, 202, 0, 0, 822, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 787, 0, 0,
	209, 210, 832, 833, 834, 0, 211, 0, 212, 0,
	0, 471, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 473, 0, 222, 0, 219,
	0, 472, 220, 835, 221, 836, 837, 838, 839, 840,
	0, 798, 0, 474, 223, 224, 225, 475, 226, 227,
	228, 0, 230, 229, 0, 364, 476, 231, 477, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 478, 239, 240, 242, 241, 0, 0, 788, 366,
	243, 841, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 479, 249, 480, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 842, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 481, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 482, 294, 843, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 844, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 845, 846, 0, 0, 311, 312, 382, 383, 786,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 847, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 954, 0, 687, 684, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 469, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 470,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 471, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 473, 0, 222,
	0, 219, 0, 472, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 474, 223, 224, 225, 475,
	226, 227, 228, 0, 230, 229, 0, 364, 476, 231,
	477, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 478, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 479, 249, 480, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 481, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 482, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 572, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 168, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 167, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 165, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 171, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 168, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 167, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 687, 684, 325, 0, 0, 956, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 171, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 469, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 470,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 471, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 473, 0, 222,
	0, 219, 0, 472, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 474, 223, 224, 225, 475,
	226, 227, 228, 0, 230, 229, 0, 364, 476, 231,
	477, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 478, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 479, 249, 480, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 481, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 482, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 167, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 687,
	684, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 171, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 469, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 470, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 471,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 473, 0, 222, 0, 219, 0, 472,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 474, 223, 224, 225, 475, 226, 227, 228, 0,
	230, 229, 0, 364, 476, 231, 477, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 478,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 479, 249, 480, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	481, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 482, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 687, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	171, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 469,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 470, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 471, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 473,
	0, 222, 0, 219, 0, 472, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 474, 223, 224,
	225, 475, 226, 227, 228, 0, 230, 229, 0, 364,
	476, 231, 477, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 478, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 479, 249, 480,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 481, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 482, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 1411, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 1409, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	1608, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 1414, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	1606, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	1413, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 1607, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 1411, 185, 343, 0, 0, 1406, 186, 187, 188,
	0, 189, 1409, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 1414,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 1405, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 1413, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 1412, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	882, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 729, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 735, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 737, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 729,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 731, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 733, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	729, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 411, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 410, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 409, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 1394,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 2116, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	2116, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 2113, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 729, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 1337, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 1335, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 1317, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 1200, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	1199, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 605, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 931, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 607, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 602, 380,
	381, 0, 0, 311, 932, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 900, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 899, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 897,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 896, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	893, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 892, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 890, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 889, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 886, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 885, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 172, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 175, 176,
	874, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 872, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 871, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 868, 325, 172, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 178, 179, 180, 332, 333, 334, 335,
	181, 336, 337, 0, 182, 338, 339, 183, 184, 0,
	0, 340, 341, 342, 0, 185, 343, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 344, 199, 345, 346, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 347, 206, 207, 208, 348, 349,
	0, 0, 0, 209, 210, 350, 351, 352, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 353, 0, 354,
	0, 214, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 866, 325, 172, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 862, 325, 172, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 178, 179, 180, 332, 333,
	334, 335, 181, 336, 337, 0, 182, 338, 339, 183,
	184, 0, 0, 340, 341, 342, 0, 185, 343, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 344, 199, 345,
	346, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 347, 206, 207, 208,
	348, 349, 0, 0, 0, 209, 210, 350, 351, 352,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 353,
	0, 354, 0, 214, 215, 216, 217, 218, 864, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 741, 325, 172, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 743,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 739, 325, 172, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 178, 179, 180,
	332, 333, 334, 335, 181, 336, 337, 0, 182, 338,
	339, 183, 184, 0, 0, 340, 341, 342, 0, 185,
	343, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 344,
	199, 345, 346, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 347, 206,
	207, 208, 348, 349, 0, 0, 0, 209, 210, 350,
	351, 352, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 353, 0, 354, 0, 214, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 605, 325, 172,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	596, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 595, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 607, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 597, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 598, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 602, 380,
	381, 0, 0, 311, 600, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 580, 325,
	172, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 178,
	179, 180, 332, 333, 334, 335, 181, 336, 337, 0,
	182, 338, 339, 183, 184, 0, 0, 340, 341, 342,
	0, 185, 343, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 344, 199, 345, 346, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	347, 206, 207, 208, 348, 349, 0, 0, 0, 209,
	210, 350, 351, 352, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 353, 0, 354, 0, 214, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 581, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 578,
	325, 172, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	570, 325, 172, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 178, 179, 180, 332, 333, 334, 335, 181, 336,
	337, 0, 182, 338, 339, 183, 184, 0, 0, 340,
	341, 342, 0, 185, 343, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 344, 199, 345, 346, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 347, 206, 207, 208, 348, 349, 0, 0,
	0, 209, 210, 350, 351, 352, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 353, 0, 354, 0, 214,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 434, 325, 172, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 1741, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 1739,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 172, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 178, 179, 180, 332, 333, 334,
	335, 181, 336, 337, 0, 182, 338, 339, 183, 184,
	0, 0, 340, 341, 342, 0, 185, 343, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 344, 199, 345, 346,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 347, 206, 207, 208, 348,
	349, 0, 0, 0, 209, 210, 350, 351, 352, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 353, 0,
	354, 0, 214, 215, 216, 217, 218, 1728, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 172, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 178, 179, 180, 332, 333, 334, 335, 181,
	336, 337, 0, 182, 338, 339, 183, 184, 0, 0,
	340, 341, 342, 0, 185, 343, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 344, 199, 345, 346, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 347, 206, 207, 208, 348, 349, 0,
	0, 0, 209, 210, 350, 351, 352, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 353, 0, 354, 0,
	214, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	581, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 172, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 331, 0, 1210, 0, 0,
	178, 179, 180, 332, 333, 334, 335, 181, 336, 337,
	0, 182, 338, 339, 183, 184, 0, 0, 340, 341,
	342, 0, 185, 343, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 344, 199, 345, 346, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 347, 206, 207, 208, 348, 349, 0, 0, 0,
	209, 210, 350, 351, 352, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 353, 0, 354, 0, 214, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 0,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 172,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 178, 179,
	180, 332, 333, 334, 335, 181, 336, 337, 0, 182,
	338, 339, 183, 184, 0, 0, 340, 341, 342, 0,
	185, 343, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	344, 199, 345, 346, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 347,
	206, 207, 208, 348, 349, 0, 0, 0, 209, 210,
	350, 351, 352, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 353, 0, 354, 0, 214, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 705, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 172, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 178, 179, 180, 332,
	333, 334, 335, 181, 336, 337, 0, 182, 338, 339,
	183, 184, 0, 0, 340, 341, 342, 0, 185, 343,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 344, 199,
	345, 346, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 347, 206, 207,
	208, 348, 349, 0, 0, 0, 209, 210, 350, 351,
	352, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	353, 0, 354, 0, 214, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 0, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 0, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 0, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 1085, 1086, 0,
	1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 1119, 0, 1085, 1086, 0, 1105, 1106,
	1107, 1115, 1116, 1117, 0, 0, 0, 0, 0, 0,
	0, 1108, 0, 0, 1087, 0, 0, 0, 1088, 0,
	1102, 1119, 0, 1085, 1086, 0, 1105, 1106, 1107, 1115,
	1116, 1117, 0, 0, 0, 0, 0, 0, 0, 1108,
	0, 0, 1087, 0, 0, 0, 1088, 0, 1102, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 1093, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 1120, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1120, 0, 0, 0, 1110, 0,
	0, 1093, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 1120, 0, 0, 0, 1110, 0, 0, 1109,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 1109, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0, 0,
	0, 1113, 1108, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 1119, 1104, 1085, 1086, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 0, 0, 0, 0, 0, 1113,
	1108, 0, 0, 1087, 0, 0, 0, 1088, 0, 1102,
	1119, 1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098,
	1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0,
	0, 1087, 0, 0, 0, 0, 1811, 1102, 0, 1111,
	0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097,
	1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 0, 0,
	2374, 0, 0, 0, 1093, 0, 0, 1111, 0, 0,
	1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090,
	1091, 1092, 1094, 1095, 1112, 1120, 0, 0, 2355, 0,
	0, 0, 1093, 0, 0, 0, 1819, 1820, 0, 1837,
	1838, 1839, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 1120, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 1110, 0, 0, 1109, 1834,
	0, 1103, 1108, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 1085, 1086, 1825, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 1113, 0, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 1104, 1088, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 1840, 0, 1093, 0, 0, 0, 0, 1087,
	0, 0, 0, 1085, 1086, 1102, 1105, 1106, 1107, 1115,
	1116, 1117, 0, 1835, 1112, 1120, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 1119,
	1111, 0, 1118, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 1110, 0, 0,
	1087, 2301, 0, 1103, 0, 0, 1102, 0, 1111, 0,
	1093, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089,
	1090, 1091, 1092, 1094, 1095, 0, 0, 0, 1109, 2296,
	1112, 1120, 0, 0, 0, 0, 1836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 1110, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 1112, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 1109, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	1103, 0, 0, 1831, 1832, 1833, 0, 0, 1830, 1828,
	1829, 1821, 1822, 1823, 1824, 1826, 1827, 0, 0, 0,
	0, 0, 1104, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 0,
	0, 2292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0, 1113,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 1119, 0, 0, 0, 1111, 0, 0, 1099,
	1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 1087, 0, 0, 0, 2272, 0, 1102,
	1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1119, 1111, 0, 0,
	1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090,
	1091, 1092, 1094, 1095, 0, 0, 0, 1087, 2215, 0,
	0, 0, 0, 1102, 1093, 0, 0, 0, 0, 0,
	0, 0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 0, 0, 1112, 1120, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 1119, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 1093, 1087,
	0, 0, 0, 1103, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 0, 0, 1103, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	1112, 1120, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 0, 0, 1109, 0, 1113, 0, 1108, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 1119, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 1087,
	0, 2214, 0, 0, 0, 1102, 0, 0, 0, 0,
	1085, 1086, 1104, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 0, 0, 0, 1108, 0, 1113, 0,
	0, 0, 0, 1088, 1111, 0, 1119, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 0, 0, 0, 0, 2154, 0, 1087, 0, 0,
	1093, 0, 0, 1102, 0, 0, 0, 1085, 1086, 0,
	1105, 1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0,
	1112, 1120, 0, 1108, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 1119, 0, 0, 1111, 0, 1118, 1099,
	1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 1110, 1087, 0, 0, 2119, 1093, 1103,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 1120,
	0, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1110, 0, 0, 0, 1093, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 1112, 1120, 0, 0, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 1118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 1099,
	1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 0, 0, 0, 0, 2032, 0, 0,
	0, 0, 0, 0, 0, 1085, 1086, 1104, 1105, 1106,
	1107, 1115, 1116, 1117, 0, 0, 0, 0, 0, 0,
	0, 1108, 0, 1113, 0, 0, 0, 0, 1088, 0,
	0, 1119, 0, 0, 1111, 0, 0, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 0, 1087, 0, 0, 2008, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098,
	1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0,
	0, 0, 1506, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 39, 120, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 1109, 0, 0,
	43, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 53, 0, 0,
	0, 59, 0, 0, 123, 0, 0, 0, 60, 0,
	61, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 1113, 0, 0, 63, 0, 0, 64, 0, 0,
	0, 0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 1111,
	0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097,
	1089, 1090, 1091, 1092, 1094, 1095, 0, 65, 1781, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 67, 0, 68, 0, 69, 0, 124,
	1093, 2448, 0, 0, 70, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 99, 0,
	1112, 1120, 0, 0, 0, 1085, 1086, 121, 1105, 1106,
	1107, 1115, 1116, 1117, 0, 0, 0, 133, 1118, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 1119, 0, 1110, 0, 0, 103, 0, 0, 1103,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 1087, 132, 0, 0, 0, 0, 1102, 0,
	0, 125, 0, 0, 1109, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2447, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 1093, 0, 1851, 0, 0, 1850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 1112, 1120, 0, 1085, 1086, 0, 1105,
	1106, 1107, 1115, 1116, 1117, 0, 0, 0, 0, 0,
	0, 1118, 1108, 0, 0, 0, 0, 1685, 0, 1088,
	0, 0, 1119, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 1111, 1109, 0, 1099,
	1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 0, 0, 0, 0, 0, 0, 1686,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 1104, 1370, 0, 0, 0,
	0, 0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116,
	1117, 1113, 0, 0, 1112, 1120, 0, 0, 1108, 0,
	0, 0, 1369, 0, 0, 1088, 0, 0, 1119, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 1087,
	0, 0, 0, 1103, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 1111,
	0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097,
	1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	1112, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 1118, 0,
	0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	0, 0, 0, 1110, 0, 0, 0, 1108, 0, 1103,
	0, 0, 0, 0, 1088, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	1111, 0, 0, 1099, 1100, 1101, 1114, 0, 1098, 1096,
	1097, 1089, 1090, 1091, 1092, 1094, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 1093,
	1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0,
	0, 0, 0, 0, 0, 0, 1108, 0, 0, 1112,
	1120, 0, 0, 1088, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 1110, 1102, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 1099,
	1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 1109, 666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 1085,
	1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 0,
	0, 0, 0, 0, 0, 1108, 0, 0, 1112, 1120,
	0, 1104, 1088, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	0, 1110, 1102, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 1093, 1099, 1100,
	1101, 1114, 1857, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 0, 0, 0, 0, 0, 1112, 1120, 0,
	1104, 0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116,
	1117, 0, 0, 0, 0, 1118, 1113, 0, 1108, 0,
	0, 0, 1852, 0, 0, 1088, 0, 0, 1119, 0,
	1110, 0, 0, 0, 0, 0, 1103, 0, 0, 0,
	0, 0, 2012, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	1093, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	0, 0, 0, 0, 0, 1113, 0, 1108, 0, 0,
	1112, 1120, 0, 0, 1088, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 1110, 1102, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 1109, 0, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	1120, 0, 1104, 0, 1085, 1086, 0, 1105, 1106, 1107,
	1115, 1116, 1117, 0, 0, 0, 0, 1118, 1113, 0,
	1108, 0, 0, 0, 1810, 0, 0, 1088, 0, 0,
	1119, 0, 1110, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 1099,
	1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091,
	1092, 1094, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 1093, 1085, 1086, 0, 1105, 1106, 1107, 1115,
	1116, 1117, 0, 0, 0, 0, 0, 1113, 0, 1108,
	0, 0, 1112, 1120, 0, 0, 1088, 0, 0, 1119,
	0, 1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117,
	1118, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	1087, 0, 0, 0, 1088, 1110, 1102, 1119, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 1102, 1111, 1109, 0, 1099, 1100,
	1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 1120, 0, 1104, 0, 0, 0, 0, 1093,
	1085, 1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 1118,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	1120, 0, 0, 1088, 1110, 0, 1119, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 1110, 1102, 0, 1109, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089,
	1090, 1091, 1092, 1094, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 1093, 1085,
	1086, 0, 1105, 1106, 1107, 1115, 1116, 1117, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 1120,
	0, 1104, 1088, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	0, 1110, 1102, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	1099, 1100, 1101, 1114, 0, 1098, 1096, 1097, 1089, 1090,
	1091, 1092, 1094, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 1093, 1099, 1100,
	1101, 1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092,
	1094, 1095, 0, 0, 0, 0, 0, 1112, 1120, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 1258, 1248, 1277, 1240, 1268, 1267, 0,
	1110, 1242, 1241, 0, 0, 0, 1103, 1279, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 1265, 1264, 0, 0, 0, 0, 0,
	0, 0, 0, 1263, 1111, 0, 0, 1099, 1100, 1101,
	1114, 0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094,
	1095, 1262, 1260, 1261, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 1251, 1250, 1252, 1253, 1254, 1255, 1256, 0,
	1276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 0, 1249, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 1099, 1100, 1101, 1114,
	0, 1098, 1096, 1097, 1089, 1090, 1091, 1092, 1094, 1095,
	0, 0, 0, 1259, 0, 0, 0, 1441, 1439, 1440,
	1443, 1442, 0, 0, 0, 1258, 1248, 1277, 1240, 1268,
	1267, 0, 0, 1242, 1241, 0, 0, 0, 0, 1279,
	1278, 0, 0, 1245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1257, 1246, 0, 0, 0, 0,
	0, 0, 0, 626, 1281, 586, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 1265, 1264, 1243, 0, 0,
	1274, 1275, 0, 631, 0, 1263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 0, 0,
	0, 0, 1247, 1262, 1260, 1261, 0, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 630, 0, 0, 0,
	0, 632, 0, 0, 0, 0, 638, 639, 0, 0,
	648, 0, 0, 0, 1251, 1250, 1252, 1253, 1254, 1255,
	1256, 0, 1276, 0, 588, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	1244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 0, 0, 0, 1249, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 0, 0,
	642, 0, 0, 637, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 1245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1257, 1246, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1243,
	0, 0, 1274, 1275, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1247, 0, 0, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 645, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 646, 0, 0, 0,
	650, 0, 0, 0, 591, 0, 0, 0, 0, 643,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 649,
}
var sqlPact = [...]int{

	39303, -1000, 27, -1000, -1000, 206, -1000, -1000, -1000, 205,
	200, 199, -1000, 198, 195, 194, -1000, 193, 192, 191,
	190, 171, 170, 169, 167, -1000, 163, 161, -1000, -1000,
	-1000, 160, 157, 141, 140, 138, 137, 136, 941, 23001,
	135, 134, 1375, 35157, 130, 127, 125, 123, 1204, 121,
	119, 26511, 893, 1170, 116, 115, 110, 109, 108, 944,
	34839, 774, 2305, 5761, 1053, 1544, 34518, 22680, 1539, 1460,
	34197, -1000, -1000, 33876, 2148, 106, 104, 102, -1000, -1000,
	33555, 97, 95, 86, 85, 84, 80, 79, 77, 70,
	69, 68, 64, 63, 62, -1000, 57, 52, 50, 41311,
	49, 44, 42, 1038, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 131, -1000, 869, 312, 18144,
	964, 960, 959, 940, 1054, 37065, 35157, 41, 12, 39,
	-1000, 1835, 613, 20086, 39303, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26190, 25869, 33234, 32913, 722, -1000, 22, 24273, 35157, -1000,
	55, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14135, 13778, 553, 55, -1000, -1000, -1000, -1000, -1000, 32592,
	-1000, 32271, 31950, 1418, 31629, -1000, -1000, -1000, -1000, 31308,
	-1000, -1000, 1699, 1582, 1559, 25548, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 30990, 30669,
	30348, 30027, 29706, 460, -1000, -1000, -1000, 16820, -1000, -1000,
	-1000, -1000, 38, -1000, -1000, -1000, -1000, 37, 36, 35,
	33, 1089, -1000, -1000, 24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35157, -1000, 15164, -1000, 459,
	-1000, 1561, -1000, 15164, -1000, 1081, -1000, -1000, -1000, -1000,
	-1000, 35157, -1000, -1000, 1500, -1000, -1000, -1000, -1000, -1000,
	-1000, 861, -1000, -1000, -1000, 2030, 1093, 458, 29385, -1000,
	1484, -1000, 536, 643, -1000, -1000, -1000, 17812, 215, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1705, 22359,
	1392, 1829, 1697, 2029, 1349, 1694, 1689, 1672, 1646, 1636,
	2027, 888, 2025, 1620, 951, 2024, 1627, 1210, 626, 1941,
	1554, 1543, -1000, -1000, -1000, 27783, -1000, -1000, 869, -1000,
	-1000, -1000, 1293, 1799, 1799, 1799, 1849, 299, 295, -1000,
	131, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1942, -1000, -1000, -1000, -1000, 1983, -1000, -1000, -1000,
	-1000, 1060, -1000, -1000, 1060, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 720, 36429, 21, 35157, -1000, 457, 21, -1000,
	-1000, 453, -1000, 10236, 10236, -1000, -1000, -1000, -1000, -1000,
	8521, 2040, -1000, 355, -169, 316, 526, -1000, 19117, 21697,
	-1000, -1000, 1376, 1709, 664, -1000, 891, 1700, 499, -1000,
	890, -1000, 1048, 1695, -112, 23319, 24273, 22, 4, -1000,
	-1000, -1000, 5431, 40663, -1000, -1000, 15164, 15164, 15164, 15164,
	15164, 989, 488, -1000, 452, 451, 6791, -1000, -1000, 1975,
	-1000, -1000, -1000, 301, -1000, -1000, 15164, 55, -1000, -1000,
	-1000, -1000, 450, 2018, -1000, 652, -1000, -1000, -1000, 542,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1598,
	446, 445, 442, -1000, -1000, -1000, -1000, 441, 440, 436,
	435, 434, 432, 431, 429, 428, 427, 426, 425, 423,
	421, 419, 912, -1000, 582, -1000, -1000, 582, 582, -1000,
	401, 401, 410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 401, -1000, -1000, -1000, 530, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 417, 40663, -1000, 791, 20730, 55, -1000,
	-1000, -1000, -1000, 416, 1203, 547, -1000, 304, -1000, 29064,
	547, 1202, -1000, -1000, -1000, 27783, -1000, 35157, -1000, 35157,
	-1000, 834, -1000, 36747, 112, 1690, -1000, -1000, 112, 1688,
	-1000, 111, 1687, -1000, -1000, -1000, 1685, -1000, 4, 1679,
	-1000, -1000, 15164, 13, -1000, -1000, -1000, 613, -1000, -1000,
	-1000, -1000, -1000, 23637, 1457, 565, 40663, 1886, 41238, 23319,
	40663, 23637, -1000, -1000, -1000, -1000, -1000, 35157, -1000, 15164,
	-1000, 1885, 1438, 17, -1000, -1000, -1000, -1000, -1000, 1273,
	1355, 674, 1099, 17482, 17152, 1761, -1000, -1000, -1000, 214,
	5761, -1000, -1000, -1000, -1000, -1000, -1000, 28743, -1000, -1000,
	-1000, 1091, 35157, -1000, -1000, 1588, -1000, 23637, 35157, -1000,
	35157, -1000, 35157, -1000, 35157, -1000, 35157, -1000, -1000, -1000,
	-1000, -1000, 580, -1000, 1578, -1000, -1000, 35157, -1000, 1244,
	-1000, -1000, -1000, 28425, 28104, -1000, 901, 753, 118, -1000,
	-1000, 1293, -1000, 1108, 1297, 13421, 1369, 15164, 131, -1000,
	-1000, 131, 131, 7821, -1000, -1000, -1000, -1000, -1000, -1000,
	17, -1000, 36429, -1000, 35157, 21, 1883, 35157, -1000, 88,
	-1000, 39812, -1000, 88, 2, -1000, 40663, -1000, 1380, 1356,
	20408, 1391, 1008, 1008, 1008, -1000, 414, 483, 526, 4756,
	13078, -1000, 26829, 1015, 230, 296, 18795, 2040, -1000, 35157,
	-11, 955, -1000, 25227, 1803, 1791, 1795, 27783, 1863, 120,
	1542, 714, 27783, 713, 1862, 120, 1536, 712, 35157, 5761,
	523, -1000, 35157, -1000, -1000, 41036, 41238, 5761, 743, 15164,
	15164, 15164, 15164, 15164, 15164, 15164, 15164, 15164, 15164, 15164,
	15164, 15164, 15164, 15164, 15164, 15164, 15164, 15164, 15164, 15164,
	15164, 1453, 15164, 711, 15164, 15164, 15164, 15164, 1209, 1031,
	385, 1083, -1000, 1917, 1917, 1917, 40800, 40800, 404, 488,
	-1000, 15164, -1000, 120, 12721, 295, 38927, 20, 6448, -1000,
	-1000, -1000, 8164, 578, 40663, 55, 4300, -1000, 1973, 1168,
	1615, 1480, 413, 562, 544, 466, 15164, 15164, 12378, 12021,
	11664, 15507, 11307, 15164, 7134, 15164, 15164, 15164, 15164, 10950,
	10593, -1000, 411, -1000, -1000, -1000, -1000, 1963, -1000, -1000,
	1961, -1000, 719, 677, 1960, -1000, 1531, 1, -1000, -1000,
	24909, 1880, 1667, -1000, 920, -1000, 1878, 35157, 1080, 1196,
	-1000, -1000, 739, 1658, 572, 129, 1877, 129, 21053, -1000,
	35157, -1000, 35157, -1000, -1000, 35157, -1000, 35157, -1000, 35157,
	35157, 35157, 35157, -4, 40663, 2593, 24591, 694, -1000, 603,
	24909, 54, -5, -1000, 809, -1000, -1000, -1000, -1000, 389,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 410, 912, 401, 401, 401, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 530, -1000, -1000, 582, 582, 582,
	-1000, -1000, -13, -1000, 1530, -1000, 557, -10, 627, 17,
	-1000, 1060, -1000, 1287, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2012, 18, -1000,
	-1000, 18, -1000, -1000, 5761, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35157, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 260, -1000, -1000, -1000, -1000, -1000, -1000, 35157, 35157,
	35157, -1000, 27783, -1000, -1000, -1000, -1000, 40663, -1000, 381,
	-1000, -1000, 40663, 868, 1400, -1000, 1400, 14, -1000, 39696,
	1364, 35157, -1000, -1000, 400, -12, 572, 10236, 19763, 5761,
	-1000, 572, 8521, -1000, 20408, 20408, 2586, 1348, 20408, -1000,
	-1000, -1000, -1000, 26829, 437, 526, 26829, -1000, 1953, 1399,
	-15, -1000, -1000, -1000, 35157, 396, -1000, 526, 293, 994,
	35157, 35157, 35157, -1000, -1000, 1192, 36111, 1183, 41238, 35157,
	-1000, 394, 391, 1362, 1335, 35157, 35157, 35793, 35475, 35157,
	1135, 120, -1000, 390, 35157, 889, 35157, 120, -1000, 387,
	35157, 884, -1000, 1458, 1121, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 535, 412, 412, 741,
	741, 741, 741, 1936, 2909, 685, 2372, 543, 543, 543,
	1721, 2614, 2614, 543, 543, 543, 40800, 40691, 1499, 15164,
	15164, 693, 1017, 385, 1499, 15164, 1499, 1499, 1499, 1499,
	-1000, 1347, -1000, -1000, -1000, -1000, 1524, 384, 15507, 15507,
	-1000, -1000, -1000, 6791, 15837, -1000, -1000, -1000, -1000, 383,
	15164, -1000, 39165, -205, -18, -1000, -1000, 15164, -80, -130,
	-1000, -1000, 810, -1000, 15164, -1000, -32, 15164, 15164, 15164,
	291, -1000, 290, -1000, 691, -1000, 690, 688, 682, -1000,
	380, 993, 378, 377, 15164, -1000, -1000, -1000, -1000, -1000,
	-1000, 40554, 37707, 287, -1000, 1519, -138, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 286, -1000, 282, -1000, 40421, -138,
	281, 3910, -1000, 15507, 15507, 15507, 6791, 370, 280, -1000,
	39565, -138, 40312, 9893, 9893, 9893, 278, 40179, 15164, -138,
	3696, 3638, 279, -25, -31, -1000, -33, -1000, 1949, -39,
	257, 534, 533, 256, 785, 1517, 35157, 254, -42, 11,
	41238, -1000, -1000, -1000, -1000, -1000, 35157, 490, 35157, 120,
	35157, 2008, 120, 35157, 1643, 1715, 509, 35157, 876, 15164,
	919, -1000, 19440, 591, 35157, 876, 87, -1000, -1000, -1000,
	518, 35157, -1000, -1000, 112, 112, -1000, 111, -1000, 4,
	-1000, 15164, -1000, -1000, 35157, 23319, -49, -1000, -1000, 41238,
	-1000, 485, 716, -1000, 1944, 545, 23319, 35157, -1000, 1390,
	-1000, -1000, 865, -1000, 904, -1000, 18474, -1000, -48, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 868, -1000, 15164, 1938,
	-1000, -1000, -1000, 7821, -1000, -1000, -1000, 35157, -158, 54,
	-1000, 1475, -1000, -28, -1000, 2040, -1000, 1475, -1000, -1000,
	2586, -1000, 368, 15164, 20408, -1000, 481, -1000, -56, -1000,
	26829, -1000, 470, -192, -1000, 516, -1000, 526, 365, 35157,
	26829, -1000, -1000, -1000, 678, 668, 1640, -1000, 1174, -1000,
	595, -1000, 1153, 15164, 16497, 362, 361, 978, -1000, 1637,
	1119, 1632, 1119, -1000, -11, 900, -1000, 15164, -1000, 660,
	-1000, -1000, 15164, -1000, 645, 545, 1516, 765, 15164, 1499,
	1499, 15164, 15507, 15507, -1000, 1499, -1000, -1000, -1000, -1000,
	-1000, 1514, 359, 15164, 41238, 3871, 3845, -57, -1000, 9550,
	-24, -1000, 15164, -1000, 38870, -1000, -1000, 480, 1702, -1000,
	15164, 40070, 252, 9207, -1000, 39961, -38, -38, -1000, 2004,
	1179, 1110, 936, 843, 1930, -1000, 21375, 575, 1044, 38812,
	41036, 41238, -1000, 15164, -1000, -1000, 1511, 15164, -1000, 41036,
	41238, 15507, 15507, 15507, 15507, 15507, 15507, 15507, 15507, 15507,
	15507, 15507, 15507, 15507, 15507, 15507, 15507, 15507, 15507, 15507,
	1271, 15507, 1914, 1914, 1914, -34, 8864, -1000, 1565, 1511,
	15164, 15164, 41238, 250, 249, 247, -1000, 15164, -138, 15164,
	15164, 15164, -1000, -1000, -1000, 246, -1000, 1928, -1000, -1000,
	-1000, -1000, -1000, 776, -1000, 1448, -1000, 24909, 358, 35157,
	356, -1000, 351, -1000, -1000, 349, 35157, 1280, 509, 23955,
	-1000, 547, -1000, 7477, 40663, -1000, 876, 1797, -68, -1000,
	-1000, -1000, 572, 21053, 20408, 8521, -71, -1000, -1000, -1000,
	40663, -48, 1764, 1764, -1000, 1926, -1000, 467, 243, -1000,
	27465, -1000, -48, -1000, -1000, -1000, -1000, -1000, 35157, 1065,
	38632, -1000, 1793, 5761, 239, 1468, 1847, -1000, 20408, 1468,
	-1000, 35157, 40663, -1000, -169, -1000, 1924, -1000, -1000, 1399,
	-1000, 5098, 26829, 35157, -73, -1000, 35157, 35157, 35157, 1630,
	-1000, 2715, -1000, 38570, -74, -1000, 330, 1826, 15164, -1000,
	-1000, 348, 16497, 35157, -1000, 1317, 1279, 621, 35157, -1000,
	35157, -1000, 35157, 35157, 35157, -83, 35157, -84, 35157, -1000,
	23319, 667, 1962, 1499, 2849, 654, 15164, 41238, 40909, -85,
	15164, 15164, -1000, -93, -1000, 15164, 464, 40663, -1000, -1000,
	-1000, 40663, 15164, 2003, 15164, 238, 237, 236, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 235, -1000, -1000, 37383,
	15164, 234, -1000, 232, 231, 40663, 1565, 40663, -1000, -1000,
	697, 697, 831, 831, 831, 831, 1914, 3061, 2642, 2998,
	189, 189, 189, 2537, 479, 479, 189, 189, 189, 1504,
	1241, 347, 38116, 15164, -96, -1000, -1000, -1000, 40663, 40663,
	229, -1000, -1000, -1000, -138, 162, 38516, 38273, -1000, 228,
	-1000, -1000, 1450, -1000, 16497, 346, 35157, 24909, 1873, 16497,
	1079, 1284, 509, 23955, -1000, 739, -55, -1000, -1000, 382,
	120, 876, -1000, -94, -1000, 513, 1750, -1000, 1749, 438,
	-1000, -1000, -95, 345, -1000, 511, 510, -1000, -1000, -1000,
	-1000, 1793, -1000, 567, 15164, 15164, 2040, 567, -99, 526,
	-1000, -1000, -1000, 1913, -1000, -101, -1000, -1000, -1000, -1000,
	35157, -1000, 35157, -1000, 5761, 35157, 1508, 1166, -1000, -1000,
	1323, 344, 15507, 35157, -1000, 991, 16497, 1793, 55, 5761,
	1793, 38222, 4300, -108, -109, 1161, -1000, 1136, 15164, -1000,
	41238, 1119, 1119, -1000, 637, 636, 635, -1000, 633, -1000,
	-102, 22027, 15164, 15164, 40909, -110, -1000, 1499, 1499, -1000,
	38156, -1000, 40663, -1000, 39961, -1000, -1000, -1000, -1000, 970,
	-1000, 38004, -1000, -1000, -1000, -1000, 15507, 1493, 340, 41238,
	37976, -1000, -1000, 15164, -1000, -1000, -1000, 977, -115, 16497,
	-117, 223, 120, -118, 35157, -1000, 509, 23955, -1000, 1715,
	1722, 35157, 1794, -1000, -1000, 339, 338, 337, -1000, 27147,
	27147, 23319, 23319, -1000, -1000, 35157, 40663, -138, -1000, -1000,
	26829, 331, -1000, -1000, 1405, -1000, -1000, 35157, 1169, -1000,
	-1000, 15164, 38116, 335, 1448, 334, -1000, -1000, -1000, -1000,
	-1000, -1000, 1826, -32, -1000, 894, -1000, -1000, 40663, 1825,
	-1000, -1000, 35157, 35157, 323, 320, -1000, 319, 55, 1499,
	1499, -1000, -1000, 222, 1044, 1845, -1000, 1231, 15507, 41238,
	-127, -1000, 37763, 35157, 991, -129, -1000, 1448, -1000, 991,
	317, 23955, -1000, 1280, 733, -139, 35157, -1000, -1000, 6091,
	23319, 23319, -1000, -142, -1000, -1000, -128, -1000, 1870, -1000,
	-1000, -1000, -1000, 1626, 37735, 1215, 35157, -1000, 35157, 1793,
	220, 35157, 598, 5761, -1000, -1000, 15164, 15164, 15164, -1000,
	873, 15164, 1231, -152, -1000, -1000, 306, 1448, 991, -1000,
	1448, 16497, -1000, 1284, 808, -1000, 572, -1000, -154, -162,
	-1000, 35157, 305, 1618, -1000, 1074, 999, 219, -163, -1000,
	-1000, 304, -1000, 15164, -1000, -165, -170, -38, 218, 14821,
	14821, -138, -1000, 35157, -1000, 1448, -1000, -172, -1000, 21053,
	-1000, 545, 545, -1000, -1000, 35157, -1000, 1078, 1075, 863,
	-1000, -1000, -1000, -1000, -1000, 1215, 40663, -1000, -1000, 217,
	-1000, -1000, -1000, 16167, 1058, 853, 39432, -1000, -173, -1000,
	991, -145, -1000, -1000, -1000, -1000, 1737, -1000, 611, 1066,
	1066, 1074, 2003, 1891, -1000, -1000, -1000, -1000, -1000, 1073,
	1448, -1000, -1000, 1898, -1000, -1000, 1232, -1000, -1000, 14478,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2449, 2448, 1610, 1801, 2447, 2444, 2443, 2442, 2437,
	2436, 2435, 2433, 2431, 2428, 2427, 2426, 2424, 2423, 2421,
	2415, 2413, 2412, 2408, 2404, 2399, 2389, 1779, 2387, 2386,
	2380, 2379, 2378, 2377, 1757, 2371, 1742, 2370, 2369, 2368,
	2366, 2364, 1738, 1692, 2361, 85, 106, 1681, 2353, 2351,
	1679, 2349, 2346, 2341, 2338, 2336, 2335, 2334, 77, 2330,
	2329, 2328, 2326, 2324, 2320, 2319, 138, 157, 2316, 1661,
	2311, 2306, 2305, 2303, 2302, 2301, 2299, 2298, 2295, 2290,
	2289, 2288, 2286, 2282, 2277, 2276, 2273, 2272, 155, 2271,
	2270, 1650, 1620, 2268, 2262, 26, 24, 16, 51, 20,
	151, 2538, 137, 2256, 2254, 2253, 2252, 2247, 2244, 22,
	98, 100, 2234, 87, 2230, 2229, 42, 27, 19, 17,
	2227, 86, 2223, 2221, 1134, 21, 2219, 2218, 129, 2216,
	28, 18, 72, 148, 141, 114, 112, 2214, 2212, 2211,
	2205, 43, 111, 2, 2204, 2203, 14, 66, 13, 2201,
	30, 46, 2196, 2195, 123, 2182, 59, 94, 1507, 113,
	128, 332, 2181, 54, 10, 58, 2177, 2176, 146, 38,
	2174, 45, 76, 142, 2173, 47, 153, 125, 80, 124,
	110, 2172, 2171, 2169, 96, 2168, 105, 63, 2166, 2163,
	73, 2161, 131, 133, 2158, 2156, 88, 2155, 117, 2153,
	2151, 152, 132, 147, 8, 48, 60, 6, 1435, 1429,
	118, 70, 50, 55, 2148, 1478, 1797, 1306, 33, 95,
	62, 53, 97, 56, 83, 144, 23, 2147, 2142, 121,
	2140, 2137, 2136, 2135, 2132, 91, 2126, 2125, 57, 135,
	79, 41, 35, 84, 31, 101, 122, 107, 143, 104,
	2124, 82, 108, 2123, 204, 2121, 2117, 1751, 115, 2116,
	2108, 2106, 1601, 1396, 1013, 222, 2104, 2098, 854, 224,
	2096, 2095, 65, 2093, 109, 102, 2091, 145, 261, 149,
	2089, 103, 36, 89, 2086, 32, 37, 0, 1858, 1855,
	2084, 119, 75, 2082, 2081, 2079, 2078, 25, 3, 9,
	4, 7, 5, 49, 29, 2076, 2074, 130, 92, 69,
	2073, 150, 2072, 2061, 2060, 39, 2058, 12, 2054, 15,
	2053, 2051, 11, 1, 2050, 2049, 140, 2047, 90, 2041,
	1836, 2039, 136, 2038, 2037, 1663, 34, 99,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 111,
	111, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 108, 108, 113, 113,
	113, 115, 115, 112, 112, 107, 107, 20, 20, 56,
	56, 98, 51, 51, 51, 285, 285, 286, 286, 94,
	94, 95, 95, 95, 95, 96, 96, 97, 97, 97,
	26, 26, 26, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 34, 34, 35, 35,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 41, 41, 41, 39, 39,
	39, 38, 38, 38, 37, 37, 37, 40, 40, 40,
	160, 160, 159, 159, 162, 162, 42, 42, 42, 42,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	46, 46, 46, 46, 46, 46, 46, 46, 253, 253,
	252, 44, 44, 227, 227, 47, 47, 185, 185, 48,
	48, 48, 48, 48, 49, 49, 57, 57, 326, 326,
	326, 330, 330, 331, 331, 332, 332, 332, 332, 332,
	332, 332, 328, 328, 54, 54, 54, 93, 93, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 63, 63,
	65, 62, 62, 62, 64, 64, 64, 64, 66, 66,
	66, 66, 67, 67, 67, 67, 67, 68, 68, 140,
	140, 278, 277, 277, 283, 283, 283, 138, 138, 138,
	138, 138, 139, 139, 139, 276, 276, 276, 276, 284,
	284, 284, 284, 284, 284, 282, 282, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 81, 81, 81, 88, 88, 88, 88,
	88, 88, 88, 70, 70, 75, 75, 75, 75, 75,
	71, 71, 76, 76, 77, 77, 78, 78, 78, 78,
	78, 78, 72, 72, 72, 72, 80, 80, 80, 80,
	79, 79, 85, 85, 85, 85, 85, 85, 82, 82,
	82, 82, 83, 83, 83, 86, 86, 86, 86, 73,
	73, 74, 74, 87, 87, 84, 84, 84, 43, 327,
	327, 329, 329, 52, 52, 30, 30, 31, 31, 141,
	141, 142, 142, 206, 206, 206, 206, 143, 143, 114,
	114, 114, 205, 295, 295, 296, 296, 296, 296, 296,
	296, 297, 297, 297, 297, 297, 297, 297, 293, 293,
	294, 291, 291, 292, 292, 292, 292, 333, 333, 204,
	204, 146, 146, 300, 300, 300, 300, 298, 298, 298,
	298, 298, 301, 299, 302, 302, 302, 302, 302, 239,
	239, 239, 90, 90, 32, 32, 120, 120, 33, 33,
	29, 29, 29, 189, 189, 150, 150, 244, 244, 244,
	131, 131, 109, 109, 109, 14, 11, 11, 11, 11,
	11, 11, 19, 19, 17, 17, 190, 190, 191, 191,
	53, 53, 55, 55, 60, 60, 89, 89, 89, 89,
	89, 89, 21, 21, 21, 21, 25, 25, 25, 25,
	59, 59, 335, 335, 127, 127, 127, 127, 128, 128,
	201, 201, 202, 202, 202, 203, 203, 203, 122, 121,
	123, 123, 28, 28, 28, 116, 116, 117, 117, 118,
	118, 119, 119, 336, 336, 50, 50, 50, 92, 92,
	134, 134, 198, 198, 198, 200, 200, 199, 199, 199,
	175, 175, 175, 91, 91, 155, 155, 164, 164, 165,
	165, 250, 166, 166, 58, 58, 101, 101, 99, 99,
	99, 99, 99, 99, 100, 100, 100, 102, 102, 102,
	102, 102, 102, 102, 105, 105, 105, 106, 106, 106,
	104, 104, 308, 308, 308, 311, 311, 307, 309, 309,
	310, 310, 334, 334, 176, 176, 176, 145, 144, 144,
	148, 148, 147, 149, 149, 243, 243, 243, 173, 173,
	173, 173, 192, 192, 193, 193, 194, 194, 195, 195,
	195, 196, 196, 197, 197, 172, 172, 223, 223, 103,
	103, 103, 154, 154, 154, 156, 156, 213, 213, 213,
	214, 214, 212, 212, 212, 212, 245, 245, 245, 245,
	245, 245, 245, 245, 324, 324, 324, 325, 325, 242,
	242, 246, 246, 246, 246, 246, 246, 240, 240, 240,
	240, 241, 241, 251, 251, 179, 179, 179, 179, 177,
	177, 178, 178, 247, 247, 247, 247, 174, 174, 248,
	248, 248, 207, 207, 254, 254, 254, 272, 272, 153,
	153, 153, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 256,
	256, 256, 256, 258, 258, 258, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 271, 271, 271, 271, 271, 259,
	259, 266, 266, 267, 267, 268, 269, 260, 260, 261,
	261, 262, 263, 270, 270, 270, 270, 274, 274, 264,
	264, 264, 264, 264, 265, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 187,
	187, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 217, 217, 217, 217, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 303, 303,
	303, 303, 303, 303, 303, 303, 305, 305, 306, 306,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 312, 312,
	313, 313, 315, 315, 316, 316, 317, 318, 318, 318,
	319, 320, 320, 314, 314, 321, 321, 321, 322, 322,
	323, 323, 323, 323, 323, 229, 229, 229, 230, 230,
	231, 237, 237, 237, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	129, 129, 129, 129, 129, 161, 161, 226, 226, 224,
	224, 224, 228, 228, 180, 180, 273, 273, 273, 273,
	273, 273, 273, 181, 181, 181, 188, 182, 182, 183,
	183, 183, 183, 183, 183, 220, 221, 184, 184, 184,
	222, 222, 232, 236, 236, 235, 234, 234, 233, 233,
	210, 210, 211, 211, 209, 208, 169, 169, 168, 168,
	167, 167, 337, 337, 238, 238, 170, 170, 171, 163,
	163, 249, 249, 249, 249, 157, 157, 136, 136, 158,
	158, 132, 132, 135, 135, 133, 133, 133, 133, 151,
	151, 152, 152, 130, 130, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 275, 275, 275, 225,
	124, 124, 124, 125, 125, 126, 126, 280, 280, 280,
	281, 281, 281, 281, 279, 279, 279, 279, 279, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 2, 6, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 5, 2, 3, 0, 3, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 2, 6, 2, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 4, 3,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 3,
	3, 3, 1, 3, 3, 1, 1, 2, 2, 1,
	0, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 5, 5, 5, 2, 2,
	0, 2, 0, 3, 2, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 3, 3, 0, 6, 3,
	11, 14, 4, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 2, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 6, 6, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 134, 214, 220, 240, 242, 244,
	251, -99, -101, 238, 239, -62, -63, -64, -65, -93,
	262, -70, -71, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, 265,
	-21, -25, -59, 303, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -102, -100, 354, 312,
	35, 274, 61, 101, 246, 328, 335, -105, -103, -104,
	-106, 255, 320, 284, 358, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 2,
	284, 323, 83, 141, -326, 2, -158, 284, 83, -133,
	-124, 347, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 131, 132, 133, 134, 135, 142,
	145, 147, 140, 157, 158, 159, 161, 162, 163, 166,
	165, 170, 173, 176, 178, 179, 180, 183, 181, 185,
	186, 188, 187, 193, 195, 196, 198, 201, 204, 207,
	210, 211, 212, 213, 214, 216, 218, 220, 222, 223,
	224, 225, 226, 228, 229, 231, 232, 233, 234, 235,
	238, 236, 237, 239, 240, 241, 242, 244, 246, 247,
	249, 263, 264, 275, 251, 252, 253, 254, 258, 256,
	259, 260, 262, 265, 267, 270, 273, 274, 276, 279,
	280, 277, 272, 283, 285, 286, 287, 288, 289, 290,
	291, 298, 299, 303, 304, 305, 306, 309, 310, 311,
	312, 314, 317, 318, 319, 324, 329, 330, 331, 332,
	333, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 85, 87, 88, 104, 108, 109,
	115, 116, 117, 127, 129, 136, 137, 146, 148, 149,
	150, 151, 152, 154, 168, 182, 192, 194, 205, 209,
	217, 219, 227, 248, 257, 268, 269, 278, 281, 293,
	294, 295, 300, 301, 316, 320, 321, 357, 357, 2,
	158, 224, -132, -124, 83, 357, 357, 357, 357, 284,
	2, 313, 323, -189, 83, 308, 357, 357, -124, 220,
	22, 2, 92, 145, 311, 310, 22, 216, 256, 286,
	288, 2, 357, 357, 357, 357, 357, 2, 323, 284,
	141, 83, 313, -124, 2, -46, 2, 354, -45, -4,
	-27, -36, -47, -42, -43, -58, -69, -34, -50, -91,
	-92, -330, 2, 22, -331, -332, 69, 98, 125, 255,
	145, 92, 310, -279, 4, -287, -289, -288, -290, 58,
	70, 124, 144, 138, 156, 160, 169, 171, 184, 206,
	208, 245, 266, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 49, 50, 54, 57, 59, 65, 69,
	74, 75, 77, 76, 78, 79, 80, 89, 91, 93,
	95, 96, 99, 101, 103, 110, 111, 112, 120, 122,
	123, 125, 128, 130, 139, 141, 143, 153, 155, 164,
	167, 172, 174, 175, 189, 190, 191, 197, 199, 200,
	202, 203, 215, 221, 230, 243, 255, 261, 271, 282,
	284, 292, 296, 297, 302, 307, 308, 313, 315, 322,
	323, 325, 326, 327, 328, 284, 2, 158, 2, -124,
	2, -326, 2, 158, 2, -330, 2, -124, 2, -128,
	2, 251, -124, -88, 259, 2, 4, 22, 83, 183,
	261, 293, 357, 357, 357, 173, 55, 248, 259, -67,
	299, -66, 293, -278, -68, 2, -159, 183, -124, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 2, -88, 259, 34,
	55, 22, 60, 84, 126, 141, 142, 162, 65, 66,
	223, 173, 159, 298, 163, 260, 285, 299, 69, 314,
	289, 106, 357, 357, 357, -334, 2, 284, -100, -102,
	-101, -147, -148, 307, 153, 103, 203, -99, -101, 2,
	-308, -283, 2, -276, -239, 9, 302, 110, 199, -282,
	8, 346, -275, -281, 5, 7, 345, 4, -287, -289,
	-288, -335, 2, 299, 299, 2, -335, 2, -335, 2,
	-127, 2, 299, 296, -311, 228, -307, -124, -311, 357,
	357, 359, 357, -144, -145, 2, 22, 95, -171, 2,
	354, -245, 2, 352, -247, -132, -101, -246, 354, 200,
	-3, 2, -247, 136, -132, 2, -247, 136, -132, 2,
	-124, 2, -135, 136, -132, 296, 359, -158, -151, -124,
	-209, -208, 356, -215, 2, -217, 345, 346, 340, 189,
	334, -229, -219, -232, 104, 248, 354, -132, -218, 360,
	9, -305, -101, 29, -230, -231, 49, -124, 7, 8,
	5, 6, -130, -256, -225, -265, 302, 110, 191, -303,
	-304, 4, -287, -280, -257, -267, -261, -264, 154, 58,
	75, 76, 79, 77, 80, 261, 313, 50, 28, 108,
	109, 209, 217, 281, 300, 301, 136, 192, 137, 56,
	127, 168, 97, 37, 39, 41, 42, 51, 52, 85,
	87, 88, 115, 116, 117, 146, 148, 149, 150, 151,
	152, 194, 227, 268, 278, 294, 295, 321, -288, -268,
	-269, -262, -263, -270, -215, 2, 123, 354, -168, -169,
	-208, -209, 2, -159, 136, -124, 2, -159, 2, 141,
	-124, 136, 2, -124, 22, 123, 2, 155, 2, 155,
	2, -248, 2, -247, -160, 136, 2, -159, -160, 136,
	2, -136, 136, 2, -135, -124, 136, 2, -151, 136,
	2, -185, 354, -253, 2, -252, -281, 320, 357, 357,
	357, 357, 357, 199, 359, -159, -215, -227, 354, 123,
	-215, 199, -124, -88, 333, 2, 2, 263, 2, 354,
	-67, 53, 299, -202, 2, -203, -121, -122, -123, 157,
	222, 226, 333, 296, 339, 123, -283, -140, 89, -162,
	356, -88, 2, -285, 2, -282, 9, 263, 2, 223,
	260, 55, 123, 2, 2, -327, 2, 199, 123, 2,
	123, 2, 123, 2, 123, 2, 123, 2, 2, 223,
	260, 2, 120, 2, 298, 2, 2, 123, 2, 157,
	222, 275, 2, 284, 323, 2, 123, 123, -174, -247,
	-147, -148, -173, -192, -193, 172, 112, 197, -176, 22,
	95, -176, -176, 44, 355, 355, 8, 7, 7, -201,
	-202, -201, 296, -128, 359, -311, -152, 354, -171, -163,
	-249, -215, 347, -163, -170, -238, -215, 89, 70, -179,
	160, 184, 124, 169, 245, 144, 7, -46, -212, 360,
	354, 347, -242, 335, -101, -246, 354, -245, -132, 354,
	-111, 236, -110, 21, 23, 98, 318, 104, 272, 290,
	252, 236, 104, 236, 272, 290, 252, 236, 104, 360,
	-285, -133, 359, -279, 347, 10, 11, 57, 33, 345,
	346, 347, 348, 118, 349, 350, 343, 344, 342, 337,
	338, 339, 63, 177, 250, 13, 14, 15, 26, 202,
	171, 334, 138, 266, 340, 16, 17, 18, 156, 36,
	139, -129, -137, -215, -215, -215, -215, -215, 208, -167,
	-210, 352, -101, 354, 354, -101, -215, -161, 354, 7,
	-101, -224, 352, -233, -215, -168, 354, 5, 354, 5,
	-312, 329, 120, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 219, -274, 324, -274, -274, -258, 354, -258, -259,
	354, -258, 330, 335, 354, 276, 355, -157, -132, -169,
	354, -146, 189, -120, -309, 328, -146, 354, -125, 136,
	2, -124, -309, 189, -248, -134, -132, -134, 262, -124,
	30, -113, 359, 48, 241, 104, -113, 104, -113, 359,
	104, 104, 104, -161, -215, 355, 359, -326, -332, 69,
	354, 30, -226, -254, -255, -257, -266, -260, -264, -265,
	40, 46, 45, 291, 182, 257, 269, 316, 38, 198,
	147, 146, 148, 149, 150, 151, 152, 268, 37, 227,
	116, 117, 115, 97, 88, 87, 194, 42, 41, -268,
	-269, -262, -263, 85, 294, 295, 154, 39, 52, 51,
	321, 278, -286, -285, -326, -66, -278, -161, 30, -202,
	2, 359, -203, 170, -139, 176, 188, 132, 200, 331,
	-284, 5, 4, -225, -239, 89, 173, -265, -277, 89,
	-283, -277, 89, 73, 356, -279, -159, 22, 264, 2,
	-278, -329, 120, -326, -278, -278, -278, -278, -278, 259,
	-46, 120, -124, 170, -278, 2, -278, 2, 284, 141,
	284, -113, 359, -173, -193, -192, -194, -215, 22, -197,
	114, 185, -215, -217, -100, -100, -100, -149, -243, -215,
	221, 141, -128, -307, 30, -151, -154, 359, 123, 30,
	4, -154, 359, 355, 160, 160, -245, -179, 160, -177,
	206, -177, -177, -324, 354, 353, -242, -279, 352, 361,
	-161, 2, -241, -240, 30, -124, 204, 355, -132, 359,
	296, -190, 65, 59, -205, 136, 59, -291, -124, 65,
	-292, 54, 308, 221, 122, -190, 65, -190, 65, 65,
	-247, 33, -58, 123, 296, -247, 296, 33, -58, 123,
	296, -135, -279, -251, 336, -124, -272, -254, -271, 232,
	233, 231, 235, 234, -254, -279, 293, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, 171,
	138, 266, 36, 139, -215, 296, -215, -215, -215, -215,
	181, 189, 191, 302, 110, 309, 95, 195, -337, 282,
	32, -222, -101, 354, -237, 27, 271, 22, -229, 248,
	354, -210, -215, -211, -161, 355, 355, 359, -161, -228,
	353, -224, -236, -235, 325, 355, -161, 322, 22, 95,
	347, 2, 7, -186, 332, 180, 86, 133, 179, -187,
	254, -313, 113, 128, 354, 355, 2, 355, 2, 355,
	2, -215, -215, -180, 2, -273, -161, 4, 332, 180,
	86, 133, 179, 254, -180, 2, -181, 2, -215, -161,
	-182, -216, -217, 345, 346, 340, 354, 248, -183, 2,
	-215, -161, -215, 43, 167, 297, -184, -215, 123, -161,
	-215, -215, -215, -161, -161, 2, -161, 2, 354, 7,
	7, 293, 293, 7, 123, 355, 359, -141, -151, -142,
	-124, -206, -205, -293, -294, -291, 141, 308, 111, 30,
	104, 213, 30, 199, 189, -116, 287, 104, -207, 326,
	-198, -58, 354, 89, 30, -198, -164, -165, -250, -166,
	-132, 354, -124, -159, -160, -160, -135, -136, -124, -151,
	355, 359, -46, -252, 296, 315, -142, -45, 355, 359,
	-153, 29, 352, -186, 354, -251, 359, 123, 355, 299,
	-203, -138, 226, 270, 237, 258, 359, -279, -328, -124,
	259, -46, -132, -135, -132, -247, -195, -275, 354, 346,
	-196, 248, 249, 359, -109, 31, 93, 161, -132, 354,
	355, -207, -249, -156, 2, -245, -279, -207, -238, -245,
	-245, -178, 315, 199, 160, -245, -240, 355, -325, 7,
	-242, -241, 7, -214, -213, 121, 187, 355, -124, 354,
	-242, 355, -110, -132, -124, -124, 189, -205, 136, -115,
	189, -254, -124, 354, 354, 161, 161, -124, -124, 136,
	-124, 136, -124, -124, -111, 236, -58, 354, -132, 236,
	-124, -58, 354, -124, 236, -94, 135, 195, 333, -215,
	-215, 296, -337, 282, -222, -215, 181, 191, 302, 110,
	309, 95, 195, 123, 354, -216, -216, -161, -219, 354,
	-161, 353, 363, 355, -215, 353, 353, 359, -234, -235,
	99, -215, -148, 359, -147, -215, -161, -161, 355, 355,
	296, 296, 296, 296, 354, -318, 207, 354, 354, -215,
	30, 359, 355, 123, 355, 355, -188, 215, 355, 10,
	11, 345, 346, 347, 348, 118, 349, 350, 343, 344,
	342, 337, 338, 339, 63, 177, 250, 13, 14, 15,
	156, 139, -216, -216, -216, -161, 354, 355, -220, -221,
	123, 120, 30, -184, -184, -184, 355, 123, -161, 359,
	359, 359, 355, 355, 355, 7, 355, 359, 355, 333,
	333, 355, 276, 123, -132, 355, 355, 359, -125, 141,
	-125, -58, -159, 5, -58, -132, 104, -117, 100, -336,
	339, -124, -175, 243, -215, -175, -200, 199, -157, 320,
	-124, -175, -155, 359, 123, 339, -157, -113, -113, -113,
	-215, -328, -285, 355, -254, 352, 353, 7, 7, -97,
	328, -285, -328, -121, 306, 62, 226, -283, 359, -196,
	-215, -243, -132, 360, -45, -172, 128, -251, 359, -172,
	-178, 354, -215, -245, 353, 355, 359, -241, 353, 359,
	362, 339, -242, 354, -151, -240, 296, 296, 104, 189,
	317, -295, -292, -215, -150, -244, -124, -306, 354, -303,
	-304, -130, 354, 354, -108, 98, 262, -191, 104, -113,
	104, -113, 296, -190, 65, -161, 296, -161, 296, -97,
	123, 283, -215, -215, -216, -216, 123, 354, -215, -226,
	26, 26, 355, -161, 355, 359, -211, -215, 355, -224,
	101, -215, 292, 355, 322, -148, -148, -148, 5, 180,
	133, 179, -187, 179, -187, -187, 7, -319, -124, 354,
	326, -147, 355, -272, -254, -215, -220, -215, -272, -254,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, 95,
	189, 195, -216, 359, -161, 355, -221, -220, -215, -215,
	-254, 355, 355, 355, -161, -215, -215, -215, 355, 7,
	276, -143, 140, -206, 354, -125, 354, 354, -146, 354,
	-124, -118, 166, -336, -282, -309, -163, 190, -175, 64,
	355, -207, -165, -156, -238, 355, -98, 71, -98, 7,
	353, 355, -96, 201, -95, -124, 5, -124, 200, 355,
	-109, -279, 355, -223, 130, 44, -245, -223, -151, -212,
	7, -213, -279, 352, -241, -151, 355, -124, -124, -205,
	104, -296, 65, -297, 57, 111, 69, 189, 191, 308,
	221, 54, 89, 230, 355, 355, 359, -131, -168, 57,
	-131, -215, 354, -150, -151, 189, 89, 189, 89, 82,
	304, -124, -124, -132, -124, -124, 355, -132, 355, -124,
	-286, 293, 26, 26, -215, -226, 355, -215, -215, 355,
	-215, 353, -215, 5, -215, 355, 355, 355, 355, -320,
	-124, -215, 355, 355, 355, -221, 123, 95, 195, 354,
	-215, 355, 355, 359, 355, 355, 355, 139, -150, 354,
	-151, -141, 30, -150, 199, -119, 165, -336, -282, -116,
	-199, 354, 199, -58, -175, 339, 82, 82, 353, 359,
	354, 339, 339, -109, -315, 327, -215, -161, -315, 355,
	-242, 7, 355, -205, -124, -279, -124, 111, 136, 191,
	161, 354, -216, -132, -204, -333, 68, 280, -244, -109,
	-279, -109, 355, -161, 355, 355, 191, 191, -215, -254,
	-113, -113, 296, 296, 296, 296, -218, -130, -124, -215,
	-215, 355, 355, -148, -314, 212, 355, -216, 123, 354,
	-226, 355, -215, 210, 355, -150, 355, 355, -58, 355,
	-132, -336, -282, -117, 96, -151, 65, -171, -101, 354,
	354, 354, -95, -96, -285, -285, -316, -317, -124, -241,
	353, -297, -125, 189, -215, -126, 354, -143, 354, -131,
	-148, 230, -112, 57, -124, -124, 354, 354, 354, 355,
	-148, 44, -216, -226, 355, 355, -132, -204, 355, -143,
	-204, 354, -282, -118, 310, 190, 355, -124, -286, -286,
	355, 359, 30, 104, 355, -300, 178, -124, -151, -109,
	355, -132, -107, 315, -279, -161, -161, -161, -321, 225,
	249, -161, 355, 354, -143, -204, -143, -150, -119, 262,
	-207, 355, 355, -317, -319, 111, -298, -301, -299, 199,
	124, 211, 267, 355, 355, -146, -215, 355, 355, -148,
	355, -322, -323, 36, 305, 73, -215, -322, -151, -143,
	355, -164, -97, -97, -124, -299, 199, -301, 199, 310,
	92, -300, 355, -323, 218, 119, 248, 218, 119, 355,
	-204, -207, -302, 186, 241, 48, 262, -302, -298, 26,
	-114, 48, 241, -143, 20, 191, 89, -323,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 45, 46,
	47, 48, 50, 52, 55, 57, 59, 61, 0, 0,
	143, 145, 0, 0, 152, 154, 156, 158, -2, 161,
	163, 0, 0, 0, 174, 176, 178, 180, 182, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 624, -2, 0, 0, 269, 271, 273, 275, 276,
	0, 327, 329, 331, 333, 335, 337, 339, 341, 343,
	345, 347, 349, 351, 353, 355, 356, 358, 360, 0,
	546, 548, 550, -2, 64, 65, 66, 67, 68, 74,
	75, 76, 77, 70, 72, 660, -2, 671, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 637, 639, 641,
	643, -2, 0, 0, -2, 6, 11, 13, 15, 18,
	20, 22, 25, 27, 29, 31, 33, 35, 37, 39,
	42, 44, 49, 51, 53, 56, 58, 60, 62, 63,
	0, 0, 0, 0, 0, 118, 248, 0, 1222, 1149,
	1155, 1156, 1180, 1181, 1182, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 144, 146, 147,
	0, 0, 0, 1151, 1222, 153, 155, 157, 159, 0,
	165, 0, 0, 0, 0, 513, 162, 164, 239, 1282,
	241, 243, 0, 0, 0, 0, 168, 169, 170, 171,
	172, 173, 175, 177, 179, 181, 183, 184, 0, 0,
	0, 0, 0, 238, 236, 206, 207, 0, 220, 221,
	222, 223, 224, 226, 227, 210, 211, 212, 214, 216,
	218, 0, 245, 251, 252, 253, 255, 256, 257, 258,
	259, 260, 261, 428, 1194, 1195, 1196, 1197, 1198, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 0, 124, 0, 434, 234,
	232, 0, 120, 0, 543, 0, 247, 544, 545, 540,
	541, 1309, 569, 264, 0, 266, 366, 367, 368, 369,
	370, 0, 270, 272, 274, -2, -2, 1398, -2, 282,
	-2, 292, 1404, 0, 295, 296, 301, -2, 202, 328,
	330, 332, 334, 336, 338, 340, 342, 344, 346, 348,
	350, 352, 354, 357, 359, 361, 362, 363, 0, 0,
	0, 367, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 547, 549, 551, 0, 503, 662, -2, 635,
	636, -2, 0, 666, 666, 666, 0, 0, 636, 634,
	0, 267, 268, 304, 305, 306, 315, 316, 317, 318,
	499, 0, 501, 325, 326, 1176, 0, 1190, 1191, 1192,
	1193, 571, 553, 562, 571, 555, 556, 557, 558, 559,
	560, 561, 564, 0, 652, 1288, 655, 1162, 653, 638,
	640, 0, 642, 0, 0, 646, 668, 667, 699, 700,
	0, 650, 651, 661, 715, 753, 730, 721, 0, 0,
	2, 69, 0, 1380, 753, 71, 0, 1380, 753, 73,
	0, 78, 0, 1380, 1154, 0, 0, 249, 250, 1159,
	1157, 1158, 0, 148, 149, 861, 0, 0, 0, 0,
	0, 0, 953, 955, 1372, 1398, 0, 957, 958, 0,
	960, 962, 963, 0, 966, 967, 1119, 1151, 1165, 1166,
	1167, 1168, 0, 0, 1171, 0, 1173, 1174, 1175, 1019,
	977, -2, -2, 1163, 789, 790, 791, 792, -2, 1412,
	981, 984, 987, 990, 991, 992, 993, 0, 1356, 1373,
	1374, 1394, 1395, 1403, 1407, 1408, 1380, 1391, 1381, 1368,
	1378, 1389, 1228, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1189, 823,
	824, 829, 830, 832, 150, 151, 0, 0, 1152, 1128,
	1126, 1127, 160, 482, 1380, -2, 505, 482, 509, -2,
	659, 1380, 584, 240, 242, 0, 167, 0, 597, 0,
	599, 0, 614, 759, 110, 1380, 187, 200, 110, 1380,
	190, 110, 1380, 193, 1147, 194, 1380, 196, 197, 1380,
	199, 235, 0, 0, -2, 228, 230, -2, 225, 213,
	215, 217, 219, 0, 0, 0, 433, 0, 0, 0,
	542, 0, 568, 265, 371, 372, 277, 0, 279, 0,
	281, 1367, -2, 284, 285, 572, 575, 576, 577, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 203,
	0, 364, 365, 373, 374, 125, 126, 0, 377, 398,
	410, 0, 0, 381, 383, 432, 385, 0, 0, 387,
	0, 389, 0, 391, 0, 393, 0, 395, 397, 399,
	411, 401, 661, 403, 0, 405, 409, 0, 414, 0,
	416, 417, 418, 0, 0, 424, 0, 0, 110, 757,
	-2, 0, 630, 680, 681, 0, 0, 0, 0, 664,
	665, 0, 0, 0, 626, 627, 500, 1178, 1177, 552,
	570, 554, 0, 566, 0, 654, 0, 0, 701, 704,
	1139, 1143, 1144, 704, 0, 1136, 1134, 1135, 0, 0,
	0, 0, 750, 750, 750, 748, 724, 0, 730, 0,
	0, 754, 742, 0, -2, 721, 0, 0, 755, 0,
	79, 537, 89, 0, 537, 537, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	744, 1150, 0, 1124, 1125, 0, 0, 0, 0, 1054,
	1055, 1056, 1057, 1058, 1059, 1062, 1063, 1060, 1061, 1064,
	1065, 1066, 0, 0, 0, 1067, 1068, 1069, 0, 0,
	1071, 0, 1073, 0, 0, 0, 0, 0, 0, 1133,
	0, 0, 1070, 866, 867, 868, 890, 891, 0, 954,
	1130, 1123, 956, 0, 0, -2, 1075, 0, 0, 959,
	964, 965, 0, 0, 1118, -2, 0, 1170, 0, 858,
	1021, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 808, 826, 837, 834, 833, 810, 0, 809, 807,
	0, 811, 0, 0, 0, 140, 0, 0, 1145, 1129,
	440, 0, 0, 504, 0, 658, 0, 0, 0, 1380,
	512, 1183, 586, 0, 763, 0, 600, 0, 0, 760,
	0, 185, 0, 108, 109, 0, 188, 0, 191, 0,
	0, 0, 0, 0, 1075, 661, 0, 0, 254, 0,
	0, 661, 0, 1077, 771, 772, 773, 774, 775, 858,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 820, 0, 795, 795, 795, 812, 813, 821,
	822, 827, 828, 839, 840, 842, 844, 838, 838, 838,
	835, 836, 744, 127, 0, 278, 0, 0, 0, 286,
	287, 0, 574, 0, 578, 312, 313, 314, 580, 581,
	293, 319, 320, 321, 322, 323, 324, 0, 288, 290,
	302, 289, 291, 294, 0, 204, 375, 376, 378, 379,
	380, 384, 0, 429, 386, 388, 390, 392, 394, 402,
	406, 661, 412, 415, 419, 420, 421, 422, 0, 0,
	0, 502, 0, 633, 678, 679, 682, 686, 687, 690,
	693, 694, 684, 861, 647, 648, 649, 672, 673, 524,
	0, 0, 565, 656, 0, 0, 763, 0, 0, 0,
	1142, 763, 0, 1138, 0, 0, 0, 0, 0, 745,
	749, 746, 747, 0, 0, 730, 742, 712, 0, 0,
	0, 719, 720, 741, 0, 740, 729, -2, 0, 0,
	0, 0, 0, 536, 91, 1380, 0, 112, 0, 0,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 1153, 130, 0, 1160, 862, 767, 768, 814,
	815, 816, 817, 818, 863, 864, 0, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, -2, -2, -2,
	882, 883, 884, -2, -2, -2, 888, 889, -2, 1072,
	1074, 0, 1133, 0, -2, 0, -2, -2, -2, -2,
	902, 0, 904, 907, 909, 911, 0, 0, 0, 0,
	1132, 921, 1110, 0, 0, 1051, 1052, 1053, 906, 0,
	0, 1131, 1122, 0, 0, -2, 961, 0, 0, 0,
	1081, 1082, 1117, 1113, 0, 968, 671, 0, 0, 0,
	0, 975, 0, 1179, 845, 846, 847, 848, 849, 850,
	859, 1029, 0, 0, 0, 982, 983, 985, 986, 988,
	989, 0, 0, 0, 997, 0, 1085, -2, -2, -2,
	-2, -2, -2, -2, 0, 999, 0, 1001, 1075, 1095,
	0, 0, 924, 0, 0, 0, 0, 1398, 0, 1004,
	1075, 1103, 0, 0, 0, 0, 0, 1075, 0, 1109,
	0, 0, 0, 0, 0, 1015, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 439,
	1159, 441, 443, 444, 445, 446, 1184, 0, 1184, 0,
	0, 0, 0, 0, 0, 588, 594, 0, 612, 0,
	612, 602, 0, 0, 0, 612, 616, 617, 619, 620,
	0, 0, 761, 201, 110, 110, 1148, 110, 195, 198,
	237, 0, 208, 229, 0, 0, 0, 231, 233, 0,
	764, 766, 0, 776, 0, 139, 0, 0, 280, 0,
	573, 579, 0, 309, 0, 311, 0, 205, 431, 262,
	404, 407, 425, 426, 427, 758, 0, 688, 0, 0,
	685, 691, 692, 0, 675, 522, 523, 0, 0, 661,
	1161, 696, 1140, 744, 703, 705, 1141, 696, 1137, 732,
	0, 734, 0, 0, 0, 736, 0, 725, 0, 727,
	742, 717, 0, 0, 710, 0, 709, 730, 738, 0,
	0, 756, 90, 526, 0, 0, 0, 93, 1380, 101,
	0, 454, 0, 0, 0, 0, 0, 539, 102, 1380,
	110, 1380, 110, 103, 80, 537, 81, 0, 532, 0,
	525, 82, 0, 534, 0, 139, 0, 0, 0, -2,
	-2, 0, 0, 0, 922, -2, 903, 905, 908, 910,
	912, 0, 0, 0, 0, 0, 0, 0, 923, 0,
	0, 1120, 1123, -2, 1076, 1079, 1080, 0, 0, 1114,
	0, 0, 0, 0, 670, 671, 671, 671, 974, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 996, 0, 998, 1000, 0, 0, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 928, 929, 0, 0, 1003, 1101, 1102,
	0, 0, 0, 0, 0, 0, 1009, 0, 1108, 0,
	0, 0, 1013, 1014, 1016, 0, 793, 0, 819, 841,
	843, 831, 141, 0, 1146, 448, 481, 0, 0, 1184,
	0, 437, 482, 506, 508, 0, 0, 590, 594, 0,
	593, 659, 166, 0, 762, 595, 612, 0, 0, 604,
	601, 598, 763, 0, 0, 0, 0, 186, 189, 192,
	1076, 244, 0, 0, 1078, 0, 769, 0, 0, 119,
	0, 128, 246, 283, 307, 308, 310, 303, 0, 0,
	0, 674, 524, 0, 0, 698, 0, 702, 0, 698,
	733, 0, 752, 735, 715, 726, 0, 723, 713, 0,
	714, 0, 742, 0, 0, 722, 0, 0, 0, 0,
	111, 452, 471, 0, 0, 515, 521, 521, 0, 978,
	979, 0, 0, 0, 95, 0, 0, 0, 0, 99,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 865, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1111, 0, 1046, 0, 0, 1122, -2, 1083,
	1112, 1116, 0, 969, 0, 0, 0, 0, 1172, 851,
	852, 853, 854, 855, 856, 857, 0, 1027, 1028, 1032,
	0, 0, 980, 0, 0, 1084, 1094, 1096, 925, 926,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	-2, -2, -2, 943, 944, 945, -2, -2, -2, 0,
	0, 0, 1097, 0, 0, 1049, 1099, 1100, 1105, 1106,
	0, 1006, 1007, 1008, 1107, 0, 0, 0, 825, 0,
	142, 435, 0, 442, 0, 0, 0, 440, 0, 0,
	0, 592, 594, 0, 585, 586, 610, 611, 596, 609,
	0, 612, 618, 615, 621, 0, 0, 121, 0, 0,
	770, 777, 137, 1272, 135, 132, 134, 263, 683, 689,
	676, 524, 657, 1023, 0, 0, 706, 1023, 0, 730,
	728, 711, 707, 0, 718, 0, 739, 528, 530, 92,
	0, 453, 0, 456, 0, 0, 0, 0, 462, 463,
	0, 0, 0, 0, 473, 480, 0, 524, 1164, 0,
	524, 0, 0, 0, 0, 0, 107, 0, 0, 538,
	0, 110, 110, 527, 0, 0, 0, 533, 0, 535,
	129, 0, 0, 0, -2, 0, 915, -2, -2, 1045,
	1076, 1121, 1115, 1169, 671, 970, 972, 973, 860, 1034,
	1031, 0, 1018, 994, 995, 1093, 0, 0, 0, 0,
	1076, 1048, 1005, 0, 1011, 1012, 794, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 594, 0, 587, 588,
	0, 0, 0, 603, 613, 0, 0, 0, 765, 0,
	0, 0, 0, 677, 644, 0, 697, 695, 645, 751,
	742, 0, 737, 94, 0, 457, 458, 1184, 0, 461,
	464, 0, 466, 1186, 448, 0, 477, 478, 516, 517,
	520, 518, 521, 671, 475, 0, 96, 97, 106, 114,
	98, 104, 0, 0, 0, 0, 743, 0, 0, -2,
	-2, 916, 1047, 0, 671, 0, 1020, -2, 0, 0,
	0, 1050, 0, 0, 480, 0, 470, 448, 438, 480,
	0, 0, 589, 590, 0, 0, 0, 622, 623, 0,
	0, 0, 136, 0, 131, 133, 1022, 1024, 0, 716,
	708, 455, 459, 0, 0, 486, 0, 474, 0, 524,
	0, 0, 116, 0, 529, 531, 0, 0, 0, 971,
	1037, 0, -2, 0, 951, 1010, 0, 448, 480, 436,
	448, 0, 591, 592, 0, 606, 763, 608, 0, 0,
	138, 0, 0, 0, 465, 491, 0, 0, 0, 519,
	969, 482, 100, 0, 113, 0, 0, 671, 0, 0,
	0, 1033, 952, 0, 468, 448, 510, 0, 583, 0,
	607, 139, 139, 1025, 1026, 0, 467, 487, 488, 0,
	483, 484, 485, 1185, 479, 486, 115, 86, 88, 0,
	1030, 1035, 1038, -2, 1340, 1219, 0, 1036, 0, 469,
	480, 763, 122, 123, 460, 489, 0, 490, 0, 0,
	0, 491, 0, 0, 1040, 1041, 1042, 1043, 1044, 451,
	448, 605, 492, 0, 495, 496, 0, 493, 476, 0,
	447, 449, 450, 511, 494, 497, 498, 1039,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "RESET")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1038
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1044
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1048
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1054
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1058
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1127
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1199
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1200
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1204
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1288
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1292
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1364
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CREATE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			return helpWith(sqllex, "INSERT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{ /* SKIP DOC */
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "GRANT")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			return helpWith(sqllex, "RESET")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{ /* SKIP DOC */
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{ /* SKIP DOC */
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex, "set local")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1925
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			return unimplemented(sqllex, "set from current")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1955
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1973
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = Low
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = Normal
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = High
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.str = "client_encoding"
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2167
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2382
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2386
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2390
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2402
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = DropDefault
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			return unimplemented(sqllex, "match full")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			return unimplemented(sqllex, "match partial")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex, "match simple")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2751
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "no action")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			return unimplemented(sqllex, "action set null")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			return unimplemented(sqllex, "action set default")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2877
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = true
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = false
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2908
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2911
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2912
		{
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Ascending
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = Descending
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2952
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2954
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = true
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = false
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3087
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = ""
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.str = ""
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = ReadOnly
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = ReadWrite
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.str = ""
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.str = ""
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.str = ""
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.str = ""
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3257
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			return helpWith(sqllex, "INSERT")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3340
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 613:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3375
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3380
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3509
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3544
		{
			return helpWith(sqllex, "SELECT")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			return helpWith(sqllex, "VALUES")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			return helpWith(sqllex, "TABLE")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			return helpWith(sqllex, "SELECT")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			return helpWith(sqllex, "TABLE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3656
		{
			return unimplemented(sqllex, "cte")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3660
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3664
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = true
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = false
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = false
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = true
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3692
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			return helpWith(sqllex, "VALUES")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &From{}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3913
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3995
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = nil
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.str = astFullJoin
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.str = astLeftJoin
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.str = astRightJoin
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.str = astInnerJoin
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4179
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4279
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4287
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4394
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = nil
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4459
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4555
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4587
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4627
		{
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = year
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = month
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = day
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = hour
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = minute
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = month
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = hour
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = minute
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = minute
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = nil
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = second
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4722
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4757
		{
			return unimplemented(sqllex, "at tz")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4991
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5164
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5217
		{
			return unimplemented(sqllex, "variadic")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5218
		{
			return unimplemented(sqllex, "variadic")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5242
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			return unimplemented(sqllex, "func_application")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5259
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5263
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			return unimplemented(sqllex, "current role")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5292
		{
			return unimplemented(sqllex, "current user")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5293
		{
			return unimplemented(sqllex, "session user")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5294
		{
			return unimplemented(sqllex, "user")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5327
		{
			return unimplemented(sqllex, "treat")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5364
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5373
		{
			return unimplemented(sqllex, "within group")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5374
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.str = ""
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5471
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5472
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5473
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5477
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5483
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5484
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5485
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5486
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5487
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = Any
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = Some
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = All
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = Plus
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = Minus
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = Mult
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = Div
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Mod
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = Bitand
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = Bitor
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = Pow
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = Bitxor
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = LT
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = GT
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = EQ
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = LE
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = GE
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = NE
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = Like
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = NotLike
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = ILike
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = NotILike
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5851
		{
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5852
		{
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5970
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6014
		{
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6050
		{
			return unimplemented(sqllex, "func const")
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6059
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = DNull
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.str = ""
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
