// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5712

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 35,
	354, 35,
	-2, 466,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 60,
	1, 439,
	197, 439,
	241, 439,
	350, 439,
	352, 439,
	354, 439,
	-2, 449,
	-1, 78,
	1, 442,
	197, 442,
	241, 442,
	350, 442,
	352, 442,
	354, 442,
	-2, 448,
	-1, 88,
	1, 35,
	354, 35,
	-2, 466,
	-1, 474,
	122, 1047,
	293, 1047,
	336, 1047,
	353, 1047,
	-2, 0,
	-1, 485,
	1, 191,
	354, 191,
	-2, 1052,
	-1, 536,
	111, 476,
	170, 476,
	195, 476,
	-2, 445,
	-1, 539,
	111, 475,
	170, 475,
	195, 475,
	-2, 443,
	-1, 638,
	351, 979,
	-2, 972,
	-1, 639,
	351, 980,
	-2, 973,
	-1, 645,
	5, 646,
	351, 646,
	-2, 1177,
	-1, 670,
	5, 605,
	-2, 1147,
	-1, 671,
	5, 640,
	351, 640,
	-2, 1149,
	-1, 672,
	5, 615,
	-2, 1150,
	-1, 673,
	5, 614,
	-2, 1151,
	-1, 674,
	5, 640,
	351, 640,
	-2, 1154,
	-1, 675,
	5, 640,
	351, 640,
	-2, 1155,
	-1, 676,
	5, 641,
	-2, 1158,
	-1, 677,
	5, 597,
	-2, 1159,
	-1, 678,
	5, 597,
	-2, 1160,
	-1, 679,
	5, 622,
	-2, 1164,
	-1, 680,
	5, 607,
	-2, 1165,
	-1, 681,
	5, 608,
	-2, 1166,
	-1, 682,
	5, 598,
	-2, 1171,
	-1, 683,
	5, 599,
	-2, 1172,
	-1, 684,
	5, 600,
	-2, 1173,
	-1, 685,
	5, 601,
	-2, 1174,
	-1, 686,
	5, 602,
	-2, 1175,
	-1, 687,
	5, 603,
	-2, 1176,
	-1, 688,
	5, 597,
	-2, 1181,
	-1, 689,
	5, 606,
	-2, 1186,
	-1, 690,
	5, 604,
	-2, 1189,
	-1, 691,
	5, 638,
	351, 638,
	-2, 1191,
	-1, 692,
	5, 642,
	-2, 1194,
	-1, 693,
	5, 644,
	-2, 1195,
	-1, 694,
	5, 637,
	351, 637,
	-2, 1200,
	-1, 808,
	111, 475,
	170, 475,
	195, 475,
	-2, 446,
	-1, 920,
	102, 449,
	111, 449,
	151, 449,
	170, 449,
	195, 449,
	201, 449,
	304, 449,
	-2, 765,
	-1, 929,
	351, 956,
	-2, 944,
	-1, 1211,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 681,
	-1, 1212,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 682,
	-1, 1213,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 683,
	-1, 1217,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 687,
	-1, 1218,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 688,
	-1, 1219,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 689,
	-1, 1222,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 694,
	-1, 1228,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 696,
	-1, 1230,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 700,
	-1, 1231,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 701,
	-1, 1232,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 702,
	-1, 1233,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 703,
	-1, 1259,
	206, 838,
	-2, 841,
	-1, 1296,
	122, 878,
	351, 979,
	-2, 972,
	-1, 1297,
	122, 879,
	-2, 1143,
	-1, 1298,
	122, 880,
	-2, 1051,
	-1, 1299,
	122, 881,
	-2, 1015,
	-1, 1300,
	122, 882,
	-2, 1032,
	-1, 1301,
	122, 883,
	-2, 1050,
	-1, 1302,
	122, 884,
	-2, 1102,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 695,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 697,
	-1, 1492,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 698,
	-1, 1510,
	206, 837,
	-2, 840,
	-1, 1677,
	102, 449,
	111, 449,
	151, 449,
	170, 449,
	195, 449,
	201, 449,
	304, 449,
	-2, 532,
	-1, 1719,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 699,
	-1, 1724,
	154, 0,
	-2, 715,
	-1, 1734,
	206, 839,
	-2, 842,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 742,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 743,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 744,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 748,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 749,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 750,
	-1, 1868,
	1, 533,
	70, 533,
	102, 533,
	111, 533,
	123, 533,
	127, 533,
	129, 533,
	142, 533,
	151, 533,
	158, 533,
	167, 533,
	170, 533,
	182, 533,
	195, 533,
	197, 533,
	201, 533,
	241, 533,
	243, 533,
	304, 533,
	312, 533,
	323, 533,
	324, 533,
	333, 533,
	350, 533,
	352, 533,
	354, 533,
	355, 533,
	-2, 532,
	-1, 1918,
	154, 0,
	-2, 716,
	-1, 1921,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 719,
	-1, 1922,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 721,
	-1, 2039,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 720,
	-1, 2040,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 722,
	-1, 2047,
	154, 0,
	-2, 751,
	-1, 2114,
	154, 0,
	-2, 752,
	-1, 2195,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1146,
}

const sqlPrivate = 57344

const sqlLast = 31940

var sqlAct = [...]int{

	639, 2194, 1822, 2178, 1341, 2223, 1396, 2143, 2011, 2179,
	1349, 2180, 2193, 540, 629, 1109, 2071, 1864, 1992, 1967,
	1753, 1863, 1425, 59, 2037, 1876, 1890, 1672, 350, 1832,
	1979, 1689, 615, 1115, 637, 1647, 705, 101, 101, 602,
	101, 999, 1690, 1395, 580, 1675, 1576, 555, 1973, 1649,
	869, 352, 101, 101, 101, 1414, 1399, 1602, 1663, 101,
	1435, 1400, 1842, 1111, 636, 1851, 982, 101, 844, 1575,
	1257, 831, 841, 1350, 101, 1434, 1521, 345, 24, 1482,
	1282, 1190, 564, 101, 101, 1440, 1153, 101, 1000, 1162,
	101, 101, 101, 101, 334, 1135, 101, 101, 1077, 751,
	1658, 925, 1322, 595, 545, 1437, 1421, 1267, 547, 77,
	609, 1245, 332, 614, 870, 1242, 846, 971, 1185, 832,
	1387, 558, 750, 1276, 960, 559, 715, 718, 726, 956,
	1293, 916, 484, 1343, 717, 608, 1142, 811, 1403, 569,
	812, 810, 78, 471, 1075, 93, 482, 550, 631, 795,
	480, 460, 975, 315, 79, 97, 539, 1891, 77, 711,
	567, 794, 816, 478, 2082, 1670, 24, 2083, 2221, 1509,
	1342, 866, 1374, 2203, 984, 35, 1889, 1614, 984, 1279,
	548, 349, 984, 312, 1673, 544, 36, 68, 1346, 1656,
	2190, 2189, 577, 1374, 1374, 583, 544, 77, 590, 38,
	578, 1186, 1613, 585, 588, 2186, 578, 1144, 866, 2176,
	871, 872, 866, 70, 84, 2173, 860, 523, 866, 39,
	537, 76, 2130, 1661, 1513, 586, 1280, 76, 2162, 1514,
	1189, 1368, 536, 874, 2140, 2124, 2120, 866, 1889, 866,
	2116, 53, 86, 1368, 571, 47, 1661, 2108, 2078, 48,
	2107, 2079, 71, 1186, 1512, 48, 52, 873, 49, 1374,
	2065, 1143, 52, 1889, 49, 1633, 2062, 2060, 349, 866,
	1889, 1281, 1278, 1789, 2041, 1189, 54, 1368, 87, 1731,
	349, 2022, 50, 1151, 866, 1637, 82, 2021, 50, 1995,
	1889, 1945, 1374, 83, 1374, 1923, 1920, 349, 1374, 1368,
	1910, 1909, 1888, 1374, 1374, 1889, 1816, 1811, 1728, 1340,
	1340, 1374, 80, 866, 76, 1636, 1593, 879, 866, 1594,
	1424, 1385, 101, 1546, 1547, 1059, 76, 1261, 101, 101,
	101, 101, 101, 1591, 564, 827, 1374, 593, 723, 1374,
	1546, 1547, 48, 76, 1590, 1589, 1283, 1374, 1374, 52,
	1520, 49, 1510, 84, 48, 1374, 1431, 545, 738, 866,
	576, 52, 88, 49, 55, 985, 1892, 599, 1081, 985,
	51, 48, 765, 985, 1377, 50, 1561, 1374, 52, 1373,
	49, 86, 1374, 1367, 871, 872, 1368, 50, 73, 74,
	37, 561, 56, 1676, 57, 1339, 72, 1150, 1340, 993,
	1149, 58, 994, 1987, 50, 84, 84, 874, 2213, 2192,
	1613, 84, 66, 823, 2185, 67, 2148, 87, 1546, 1547,
	2111, 67, 2063, 1277, 69, 82, 1950, 712, 1946, 1953,
	1552, 873, 83, 86, 86, 578, 1938, 1639, 1937, 86,
	1143, 1936, 588, 1932, 1931, 1372, 1114, 1552, 1930, 1929,
	1868, 1345, 75, 1841, 1820, 1804, 101, 1799, 721, 727,
	1798, 81, 720, 720, 1797, 1546, 1547, 1739, 1635, 87,
	87, 1598, 837, 101, 704, 87, 1595, 82, 101, 1674,
	1253, 988, 1755, 82, 83, 983, 564, 1583, 1562, 1107,
	83, 879, 1574, 564, 1545, 1542, 1541, 1539, 84, 1526,
	1525, 1444, 1389, 80, 80, 1562, 1290, 1289, 67, 80,
	84, 1288, 823, 933, 1095, 926, 822, 80, 2165, 2127,
	67, 2106, 2105, 101, 2104, 1552, 86, 84, 702, 101,
	2096, 101, 101, 101, 2094, 101, 2086, 67, 86, 2074,
	768, 2058, 875, 876, 877, 878, 880, 881, 2049, 889,
	809, 760, 2008, 1997, 1961, 86, 1943, 1915, 1895, 1856,
	1830, 1563, 87, 1325, 1828, 1827, 1825, 1818, 1723, 101,
	82, 1698, 1552, 1697, 87, 1573, 1535, 83, 1563, 1534,
	101, 1531, 82, 1952, 761, 1254, 1506, 1501, 1247, 83,
	1473, 87, 1471, 564, 101, 1458, 80, 1457, 1430, 82,
	352, 564, 961, 964, 1332, 1287, 83, 767, 80, 1108,
	581, 968, 954, 808, 953, 952, 951, 950, 949, 948,
	947, 836, 890, 946, 945, 80, 944, 943, 867, 749,
	942, 941, 940, 939, 800, 938, 937, 545, 930, 919,
	768, 746, 578, 80, 830, 835, 745, 734, 768, 1458,
	732, 2204, 1557, 1555, 1556, 1548, 1549, 1550, 1551, 1553,
	1554, 2081, 599, 801, 1984, 804, 798, 1958, 1957, 1557,
	1555, 1556, 1548, 1549, 1550, 1551, 1553, 1554, 1925, 796,
	1546, 1547, 1857, 1564, 1565, 1566, 1546, 1547, 926, 1623,
	537, 1069, 1068, 838, 561, 556, 1622, 917, 837, 2110,
	871, 872, 536, 758, 101, 819, 820, 864, 2084, 101,
	101, 101, 1650, 101, 882, 883, 875, 876, 877, 878,
	880, 881, 758, 874, 1956, 1615, 562, 1420, 1186, 828,
	101, 101, 966, 1561, 1676, 1419, 854, 967, 101, 1597,
	1112, 973, 101, 1596, 1485, 101, 759, 873, 1985, 865,
	1548, 1549, 1550, 1551, 1553, 1554, 852, 703, 786, 564,
	564, 871, 872, 757, 935, 759, 352, 1065, 1483, 1974,
	1342, 101, 1756, 853, 101, 1072, 101, 101, 101, 101,
	101, 101, 929, 1517, 874, 987, 101, 1552, 990, 1279,
	1268, 101, 101, 957, 1082, 790, 1609, 1685, 101, 1550,
	1551, 1553, 1554, 962, 958, 959, 101, 879, 873, 2151,
	318, 1163, 2210, 965, 712, 2211, 1903, 972, 1378, 91,
	1113, 534, 578, 976, 976, 2119, 522, 1630, 101, 521,
	837, 101, 516, 349, 791, 995, 1280, 1141, 517, 1043,
	101, 784, 327, 585, 588, 1562, 2032, 1155, 101, 2031,
	2030, 1155, 101, 1709, 847, 1130, 848, 1154, 1073, 932,
	101, 352, 319, 977, 101, 997, 1106, 101, 974, 2029,
	1118, 847, 1713, 848, 352, 1712, 90, 1682, 1166, 76,
	1681, 1281, 1278, 1051, 543, 1530, 1529, 1053, 1528, 1181,
	1052, 1055, 77, 1546, 1547, 1054, 1096, 1066, 1058, 328,
	1527, 1488, 1199, 1084, 1078, 1071, 1070, 48, 1375, 1156,
	1817, 1229, 1183, 1182, 52, 847, 49, 848, 1563, 1179,
	1086, 1089, 797, 1090, 1091, 1092, 1093, 1094, 632, 592,
	849, 1174, 1914, 542, 1177, 1167, 1169, 1100, 1101, 1336,
	50, 1105, 1335, 1200, 2118, 1415, 1103, 849, 730, 1104,
	1122, 1120, 1121, 1148, 529, 1716, 1283, 1172, 1244, 537,
	1191, 1198, 537, 537, 1244, 578, 973, 1139, 1806, 1184,
	2013, 1131, 1147, 588, 1132, 1133, 1165, 578, 787, 101,
	1599, 101, 101, 544, 101, 1309, 1159, 101, 1188, 101,
	101, 849, 101, 101, 1180, 564, 969, 461, 1251, 1362,
	1552, 2182, 857, 1249, 1558, 1559, 1560, 1268, 771, 1557,
	1555, 1556, 1548, 1549, 1550, 1551, 1553, 1554, 89, 466,
	530, 1083, 855, 1554, 858, 462, 321, 320, 1265, 562,
	557, 2210, 1700, 1277, 877, 878, 880, 881, 744, 856,
	857, 329, 781, 788, 535, 772, 2163, 1255, 770, 531,
	1252, 978, 463, 1344, 1283, 1344, 1603, 92, 1562, 532,
	855, 322, 1164, 84, 1422, 1423, 2226, 1469, 1629, 2232,
	331, 465, 2217, 67, 1303, 1749, 984, 856, 1478, 782,
	330, 1707, 352, 1746, 845, 1152, 541, 2183, 1102, 101,
	729, 86, 1353, 1366, 1607, 1475, 789, 588, 881, 862,
	588, 1240, 77, 101, 101, 101, 1363, 77, 101, 101,
	1386, 1348, 2159, 1358, 861, 101, 1238, 1360, 1357, 1361,
	727, 1359, 720, 1364, 720, 1631, 313, 87, 1747, 1884,
	1371, 1563, 1877, 2099, 524, 82, 2160, 955, 1603, 101,
	1875, 1410, 83, 2184, 1879, 101, 352, 1432, 850, 2045,
	1283, 2059, 1443, 101, 101, 101, 962, 1533, 965, 101,
	914, 333, 101, 1885, 1852, 850, 1867, 2216, 101, 101,
	101, 101, 101, 544, 1442, 959, 958, 922, 754, 2014,
	101, 464, 1379, 101, 101, 1878, 1234, 1717, 1837, 1662,
	564, 2181, 314, 2209, 1235, 1701, 1236, 2207, 1966, 1884,
	1241, 1412, 2224, 1283, 815, 1490, 77, 1226, 775, 850,
	1390, 1243, 525, 1394, 741, 814, 1391, 588, 1393, 737,
	1451, 578, 1445, 1555, 1556, 1548, 1549, 1550, 1551, 1553,
	1554, 1546, 1547, 1885, 1785, 467, 1941, 768, 1392, 1481,
	2024, 1468, 1666, 755, 1381, 1250, 2023, 756, 1418, 1455,
	2006, 1470, 1429, 323, 1472, 1383, 2237, 2225, 1438, 1662,
	2233, 1669, 1880, 1433, 1881, 2215, 1447, 985, 1446, 1899,
	1666, 545, 1902, 2091, 813, 1064, 1384, 1664, 2227, 1901,
	1684, 1454, 1309, 1309, 1519, 1450, 1667, 1413, 1382, 1669,
	1119, 1127, 1110, 324, 1883, 1993, 1745, 1477, 1049, 815,
	2144, 1665, 1099, 1886, 1484, 1850, 1237, 1224, 1227, 1056,
	1833, 527, 1666, 1239, 1667, 1968, 1981, 1060, 1062, 2007,
	814, 1460, 325, 1459, 326, 1428, 805, 1786, 1982, 469,
	1063, 1669, 1880, 1787, 1881, 1942, 468, 545, 1552, 1491,
	1223, 101, 1489, 1847, 1846, 754, 101, 1664, 101, 710,
	1309, 1309, 1309, 709, 542, 101, 1667, 2236, 1823, 1505,
	1994, 1128, 1668, 1308, 1883, 1959, 101, 2004, 1898, 545,
	1480, 1665, 1843, 1886, 1516, 1659, 101, 101, 1900, 813,
	1882, 1286, 2048, 1940, 1577, 1722, 564, 1715, 1600, 526,
	1668, 2005, 1540, 1500, 1376, 1338, 1562, 1178, 1175, 793,
	792, 1605, 785, 780, 779, 101, 1611, 101, 624, 101,
	778, 458, 777, 101, 1546, 1547, 776, 101, 773, 708,
	600, 1578, 1580, 1581, 1582, 1617, 1097, 1618, 1619, 101,
	1088, 1980, 1668, 936, 697, 1225, 783, 1285, 1638, 2177,
	1640, 2141, 101, 1873, 1705, 98, 98, 1703, 316, 1683,
	1882, 1646, 1416, 1408, 1601, 1498, 1365, 1621, 461, 972,
	452, 453, 454, 1608, 1736, 545, 992, 473, 972, 1563,
	1496, 1620, 1616, 1696, 991, 486, 989, 986, 1628, 578,
	466, 981, 473, 1258, 1632, 1641, 462, 1455, 696, 1644,
	1262, 570, 570, 1695, 1270, 316, 1626, 1627, 316, 316,
	589, 316, 1679, 863, 98, 596, 1295, 1295, 1306, 859,
	1317, 851, 1634, 463, 1648, 2053, 1329, 1330, 1331, 2211,
	1654, 1552, 707, 1694, 1652, 1657, 1645, 1678, 94, 1309,
	1309, 1704, 465, 1706, 101, 817, 1741, 1742, 1743, 77,
	1493, 1642, 1655, 1725, 1680, 77, 1687, 1080, 574, 1671,
	1494, 1155, 706, 1660, 1499, 1438, 1708, 1170, 2055, 1714,
	347, 34, 1556, 1548, 1549, 1550, 1551, 1553, 1554, 1426,
	342, 29, 515, 1171, 341, 28, 1810, 340, 27, 1562,
	1732, 338, 26, 346, 18, 644, 2101, 457, 1309, 1309,
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 818, 1309, 1748,
	1750, 1751, 1757, 1762, 101, 101, 1735, 1812, 102, 1759,
	575, 597, 1792, 1155, 594, 1892, 1191, 1760, 1764, 1168,
	1427, 343, 15, 699, 101, 1191, 1765, 3, 101, 766,
	101, 2113, 464, 518, 519, 470, 1793, 101, 698, 34,
	564, 598, 1563, 339, 13, 641, 1844, 352, 1829, 29,
	1495, 1006, 101, 28, 1809, 101, 27, 1497, 1796, 353,
	26, 821, 18, 1826, 352, 1807, 101, 1176, 1839, 344,
	12, 1173, 101, 101, 101, 1840, 1074, 1813, 1815, 1468,
	1814, 336, 11, 2131, 1824, 1964, 467, 1835, 1834, 101,
	565, 1411, 1859, 1407, 101, 1897, 101, 1347, 101, 101,
	101, 1140, 1696, 101, 101, 1836, 564, 1057, 1858, 1893,
	15, 998, 1845, 1370, 1849, 1848, 582, 1353, 1438, 1896,
	316, 2230, 1695, 1853, 1854, 2235, 713, 316, 486, 486,
	596, 2175, 13, 1869, 695, 1872, 1548, 1549, 1550, 1551,
	1553, 1554, 2134, 348, 9, 1990, 101, 335, 8, 1819,
	337, 4, 1694, 768, 1805, 1919, 1913, 1752, 12, 871,
	872, 825, 871, 872, 1624, 1438, 1546, 1547, 1438, 1592,
	11, 871, 872, 825, 824, 1337, 1334, 1333, 1275, 923,
	826, 1927, 874, 2157, 2038, 354, 1744, 1643, 933, 931,
	1006, 1006, 743, 528, 2012, 459, 1087, 774, 1986, 1939,
	1855, 1504, 2158, 1933, 1532, 2070, 873, 2044, 1507, 873,
	1284, 1906, 934, 46, 1692, 618, 566, 1912, 101, 101,
	1874, 1686, 1402, 1401, 1962, 564, 1523, 1524, 355, 1067,
	1696, 1050, 9, 640, 549, 1696, 8, 101, 101, 4,
	1294, 101, 1192, 700, 642, 1003, 643, 1960, 1004, 101,
	1695, 963, 1965, 1972, 735, 1695, 101, 630, 1001, 725,
	1955, 1351, 1963, 1248, 101, 1266, 101, 1572, 352, 101,
	1989, 742, 1970, 1969, 1515, 927, 486, 101, 1585, 1954,
	1694, 610, 1971, 352, 622, 1694, 621, 1263, 731, 1991,
	1606, 1951, 1126, 1988, 1696, 1417, 2002, 1977, 1978, 1123,
	1702, 1983, 533, 2016, 1998, 1543, 2018, 733, 1999, 1315,
	1307, 2017, 1304, 799, 1695, 1309, 840, 915, 973, 2034,
	1352, 473, 2015, 764, 1612, 2000, 1369, 316, 829, 486,
	803, 486, 2043, 806, 1134, 573, 572, 2033, 1397, 762,
	1061, 1380, 565, 101, 1694, 908, 907, 520, 2093, 2054,
	1438, 1438, 753, 752, 1438, 1409, 1453, 101, 2231, 2100,
	564, 2027, 2028, 1699, 2150, 101, 1696, 570, 85, 2109,
	1309, 2036, 1479, 101, 65, 2050, 33, 30, 316, 101,
	483, 64, 2026, 2061, 63, 62, 1695, 61, 101, 101,
	2010, 2056, 98, 25, 2087, 101, 23, 2069, 22, 2073,
	2080, 21, 2077, 32, 2095, 20, 2088, 2068, 2067, 31,
	19, 17, 16, 14, 10, 45, 1694, 2089, 44, 43,
	101, 101, 42, 41, 2098, 1710, 40, 1711, 2090, 7,
	6, 2085, 2064, 2076, 5, 2, 2097, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 2112, 0,
	101, 0, 0, 0, 0, 0, 2125, 0, 564, 2123,
	1729, 0, 0, 0, 2126, 101, 0, 0, 566, 0,
	2066, 2132, 545, 0, 0, 352, 101, 101, 1309, 1006,
	0, 2115, 0, 2139, 0, 101, 1438, 101, 0, 2129,
	101, 2135, 352, 2146, 565, 0, 0, 2138, 0, 0,
	0, 565, 316, 2136, 0, 2128, 0, 316, 316, 316,
	2147, 979, 0, 2133, 0, 2164, 2166, 0, 0, 2168,
	2152, 101, 2156, 2167, 101, 0, 0, 1790, 316, 316,
	0, 0, 1696, 0, 0, 0, 98, 2171, 1800, 2170,
	98, 2174, 2172, 486, 0, 601, 701, 0, 0, 2169,
	0, 0, 1695, 0, 101, 2187, 101, 1037, 0, 2191,
	2202, 0, 2201, 2199, 2200, 0, 0, 0, 101, 486,
	0, 0, 486, 0, 98, 486, 486, 486, 486, 486,
	2208, 2206, 1694, 0, 1098, 2212, 0, 2214, 0, 486,
	486, 0, 0, 0, 0, 2220, 473, 0, 0, 0,
	0, 565, 2222, 2149, 1117, 0, 2229, 2228, 353, 565,
	0, 1036, 0, 0, 0, 2234, 0, 0, 0, 0,
	566, 0, 2238, 0, 0, 0, 570, 566, 1862, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 1160, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 316, 0, 0, 1187, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1006, 0, 1546,
	1547, 0, 1564, 1565, 1566, 0, 1037, 1037, 0, 0,
	739, 740, 0, 0, 0, 1917, 0, 0, 1005, 0,
	0, 0, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 566, 0, 0,
	0, 0, 0, 0, 354, 566, 0, 0, 0, 871,
	872, 0, 1561, 619, 60, 0, 0, 0, 0, 0,
	1036, 1036, 0, 0, 0, 0, 1039, 0, 0, 0,
	871, 872, 874, 0, 0, 0, 0, 565, 565, 0,
	0, 1038, 0, 0, 353, 0, 0, 316, 1002, 1355,
	1356, 0, 316, 874, 0, 316, 873, 486, 486, 0,
	486, 596, 888, 60, 0, 0, 1552, 0, 1976, 0,
	0, 0, 0, 0, 833, 833, 0, 873, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	1006, 538, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 0, 60, 1567, 0, 909, 910, 911, 912, 913,
	0, 0, 0, 0, 0, 921, 879, 1005, 1005, 2020,
	0, 0, 0, 0, 1562, 928, 1006, 1006, 0, 0,
	0, 0, 0, 0, 0, 1006, 1006, 879, 0, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 1388, 0, 0,
	0, 0, 0, 566, 566, 1039, 1039, 0, 1006, 0,
	354, 316, 316, 316, 889, 0, 316, 1398, 0, 0,
	1038, 1038, 0, 596, 0, 0, 0, 1002, 1002, 0,
	0, 0, 0, 0, 0, 889, 0, 1563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 871,
	872, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 316, 1448, 1449, 0, 0, 0, 1160, 0, 0,
	1456, 0, 874, 0, 0, 0, 1461, 1462, 1464, 1466,
	1467, 0, 0, 0, 0, 0, 0, 890, 1474, 0,
	0, 1476, 316, 0, 0, 1037, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 1502, 1503, 890, 0,
	0, 0, 0, 565, 0, 0, 0, 0, 354, 0,
	0, 0, 0, 1558, 1559, 1560, 0, 0, 1557, 1555,
	1556, 1548, 1549, 1550, 1551, 1553, 1554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1036,
	0, 0, 1006, 0, 0, 1124, 879, 1129, 0, 0,
	0, 0, 0, 1136, 0, 0, 0, 0, 2153, 2154,
	2155, 0, 0, 0, 1569, 1570, 1571, 2161, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 883, 875, 876, 877, 878, 880, 881, 0, 0,
	0, 0, 0, 0, 889, 0, 0, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 566,
	1228, 0, 1230, 1231, 1232, 1233, 1005, 0, 0, 316,
	0, 0, 0, 0, 316, 0, 1610, 0, 0, 1256,
	0, 0, 0, 316, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 1291, 1292, 1388, 1388, 1305, 890, 1316, 1318,
	1323, 1326, 1327, 1328, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 1037, 0, 0, 0, 0, 565, 1038,
	0, 0, 0, 1117, 0, 1117, 1002, 486, 0, 0,
	0, 316, 0, 0, 0, 1651, 354, 0, 0, 0,
	0, 0, 1006, 1037, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 1720, 1721, 0, 0, 1036, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1691, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 1036, 871, 872,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 0, 1788, 0, 566, 873, 1037, 0, 0, 0,
	0, 0, 1754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1005, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 0, 920, 0, 0,
	0, 0, 1037, 1037, 924, 0, 0, 0, 1006, 0,
	0, 1037, 1037, 0, 1005, 833, 0, 0, 0, 0,
	1036, 842, 0, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 1039, 0, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1037, 0, 0, 1038, 0, 0,
	0, 0, 316, 316, 1002, 0, 1036, 1036, 0, 0,
	0, 0, 1039, 0, 0, 1036, 1036, 0, 0, 0,
	0, 0, 1821, 0, 0, 0, 1160, 1038, 1117, 0,
	0, 0, 0, 889, 1002, 1831, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 1487, 0, 1036, 0,
	316, 1492, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1866, 0, 0, 1005, 0, 0,
	1870, 1871, 1160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 1691, 596, 0, 0,
	1518, 0, 1904, 1522, 1905, 0, 316, 1907, 1908, 0,
	0, 1911, 316, 1005, 1005, 0, 890, 0, 0, 1536,
	566, 0, 1005, 1005, 0, 1039, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1038, 0, 0, 0, 0, 921, 0, 1002, 1037, 0,
	0, 1323, 1323, 1323, 1934, 1005, 0, 0, 0, 0,
	538, 1039, 1039, 538, 538, 0, 0, 0, 0, 0,
	1039, 1039, 0, 0, 1604, 0, 1038, 1038, 0, 0,
	0, 0, 0, 1002, 1002, 1038, 1038, 0, 0, 0,
	0, 0, 1002, 1002, 0, 0, 0, 60, 0, 0,
	60, 0, 1036, 1039, 0, 0, 1625, 0, 0, 0,
	875, 876, 877, 878, 880, 881, 0, 0, 1038, 0,
	0, 0, 0, 0, 1691, 1002, 596, 1398, 0, 1691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2009,
	0, 0, 0, 0, 0, 316, 316, 0, 0, 316,
	1246, 1653, 0, 0, 0, 0, 1136, 1866, 565, 0,
	0, 0, 0, 0, 1996, 353, 0, 0, 0, 0,
	0, 0, 1160, 0, 2001, 0, 0, 2003, 0, 0,
	0, 0, 353, 0, 0, 316, 0, 0, 1691, 1688,
	0, 0, 0, 0, 2047, 0, 0, 0, 0, 1005,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2035, 0, 0, 0, 1718, 0, 60,
	1719, 60, 0, 0, 565, 0, 0, 0, 1037, 0,
	0, 0, 1724, 0, 0, 0, 0, 60, 0, 0,
	0, 1733, 60, 0, 0, 0, 0, 1039, 0, 1737,
	0, 596, 1625, 0, 0, 0, 0, 0, 0, 0,
	1691, 0, 1038, 0, 0, 316, 0, 0, 1037, 1002,
	0, 0, 1761, 2072, 0, 0, 1763, 0, 0, 0,
	0, 316, 1036, 0, 566, 0, 0, 1866, 0, 0,
	0, 354, 0, 0, 0, 0, 596, 1866, 0, 0,
	0, 0, 2114, 1117, 0, 0, 0, 0, 354, 1794,
	1795, 0, 0, 0, 0, 0, 0, 0, 1801, 1802,
	1803, 0, 1036, 0, 0, 0, 0, 0, 2102, 2103,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	0, 60, 0, 565, 0, 0, 0, 842, 0, 0,
	566, 0, 0, 0, 2121, 0, 0, 0, 2122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 1037, 0, 0, 0, 0, 1005,
	0, 0, 0, 0, 1866, 596, 353, 0, 1439, 0,
	0, 0, 0, 2145, 0, 596, 0, 0, 316, 0,
	0, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 1005,
	60, 0, 0, 0, 0, 1894, 1691, 1039, 1036, 2072,
	0, 0, 1866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 0, 0, 0, 0, 0, 0, 1002,
	0, 0, 0, 0, 1918, 0, 0, 0, 1921, 1922,
	0, 0, 316, 1924, 596, 0, 0, 1039, 0, 566,
	1926, 1246, 1928, 0, 0, 0, 2205, 0, 565, 0,
	0, 0, 1038, 0, 0, 0, 0, 0, 1935, 1002,
	0, 920, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 354, 0, 0, 0, 874, 0, 0, 905,
	0, 1944, 0, 0, 0, 1005, 0, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1039, 0, 1975, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1038, 546,
	0, 0, 0, 353, 0, 1002, 0, 0, 0, 0,
	879, 0, 0, 0, 566, 0, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2025, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2039, 2040,
	0, 60, 896, 0, 0, 60, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 2052,
	60, 0, 0, 895, 0, 1677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 566, 0, 0, 0, 0, 0, 0, 871,
	872, 0, 0, 2075, 0, 901, 902, 903, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 874, 0, 0, 905, 354, 0, 871, 872,
	2092, 891, 892, 893, 901, 902, 903, 899, 0, 0,
	0, 0, 0, 0, 894, 0, 873, 0, 0, 0,
	0, 874, 888, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1546, 1547,
	0, 1564, 1565, 1566, 0, 873, 0, 0, 0, 0,
	842, 888, 0, 0, 1916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 879, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 1561, 0, 0, 0, 898, 906, 0, 1947, 0,
	0, 0, 0, 871, 872, 879, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 1439, 894,
	0, 0, 0, 0, 898, 906, 874, 0, 896, 905,
	0, 0, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 904, 2188, 0, 1552, 0, 0, 0, 0,
	873, 2198, 2198, 0, 0, 0, 888, 896, 0, 0,
	0, 0, 0, 889, 0, 1439, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1567, 0, 0, 0, 0, 2198, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1562, 0, 0, 0, 890, 0, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2198, 899, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 1563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 895, 0, 0, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 0, 0, 0,
	0, 890, 0, 1588, 0, 0, 0, 0, 0, 0,
	1439, 1439, 0, 0, 1439, 0, 0, 899, 0, 0,
	0, 0, 1558, 1559, 1560, 0, 0, 1557, 1555, 1556,
	1548, 1549, 1550, 1551, 1553, 1554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 1587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2057, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	104, 370, 105, 371, 372, 373, 374, 256, 375, 376,
	377, 378, 106, 107, 108, 257, 258, 259, 260, 109,
	261, 262, 379, 110, 263, 264, 111, 112, 380, 381,
	265, 266, 267, 382, 113, 268, 383, 356, 384, 114,
	115, 116, 920, 117, 385, 118, 119, 120, 386, 357,
	121, 122, 387, 388, 390, 389, 391, 392, 393, 123,
	124, 317, 125, 269, 126, 270, 271, 394, 127, 395,
	128, 396, 129, 397, 398, 130, 131, 399, 132, 400,
	0, 401, 272, 133, 134, 135, 273, 274, 402, 403,
	404, 136, 137, 275, 276, 277, 0, 138, 405, 139,
	406, 407, 358, 408, 140, 278, 409, 279, 410, 141,
	142, 143, 144, 280, 281, 360, 411, 148, 412, 145,
	413, 359, 146, 282, 147, 283, 284, 285, 286, 287,
	414, 288, 415, 361, 149, 150, 151, 362, 152, 153,
	154, 416, 156, 155, 417, 289, 363, 157, 364, 418,
	158, 419, 420, 159, 0, 160, 161, 162, 164, 290,
	163, 365, 165, 166, 168, 167, 421, 422, 423, 291,
	169, 292, 170, 171, 424, 172, 425, 426, 173, 427,
	428, 174, 293, 366, 175, 367, 294, 176, 177, 178,
	179, 180, 429, 181, 295, 182, 296, 183, 430, 184,
	185, 186, 187, 188, 297, 189, 190, 431, 191, 192,
	193, 194, 195, 197, 198, 196, 199, 200, 201, 202,
	432, 203, 368, 204, 205, 298, 206, 0, 210, 211,
	212, 213, 433, 215, 299, 214, 216, 217, 434, 218,
	207, 208, 219, 369, 220, 300, 301, 221, 435, 227,
	222, 223, 209, 224, 226, 302, 225, 303, 436, 228,
	437, 229, 230, 231, 232, 233, 234, 235, 438, 304,
	305, 306, 439, 440, 236, 237, 307, 308, 441, 238,
	239, 240, 241, 442, 443, 242, 243, 244, 245, 444,
	246, 445, 309, 247, 248, 249, 310, 311, 446, 447,
	250, 448, 449, 450, 451, 251, 252, 253, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 1860, 0,
	0, 0, 0, 0, 0, 0, 1861, 103, 104, 370,
	105, 371, 372, 373, 374, 256, 375, 376, 377, 378,
	106, 107, 108, 257, 258, 259, 260, 109, 261, 262,
	379, 110, 263, 264, 111, 112, 380, 381, 265, 266,
	267, 382, 113, 268, 383, 356, 384, 114, 115, 116,
	0, 117, 385, 118, 119, 120, 386, 357, 121, 122,
	387, 388, 390, 389, 391, 392, 393, 123, 124, 317,
	125, 269, 126, 270, 271, 394, 127, 395, 128, 396,
	129, 397, 398, 130, 131, 399, 132, 400, 0, 401,
	272, 133, 134, 135, 273, 274, 402, 403, 404, 136,
	137, 275, 276, 277, 0, 138, 405, 139, 406, 407,
	358, 408, 140, 278, 409, 279, 410, 141, 142, 143,
	144, 280, 281, 360, 411, 148, 412, 145, 413, 359,
	146, 282, 147, 283, 284, 285, 286, 287, 414, 288,
	415, 361, 149, 150, 151, 362, 152, 153, 154, 416,
	156, 155, 417, 289, 363, 157, 364, 418, 158, 419,
	420, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 421, 422, 423, 291, 169, 292,
	170, 171, 424, 172, 425, 426, 173, 427, 428, 174,
	293, 366, 175, 367, 294, 176, 177, 178, 179, 180,
	429, 181, 295, 182, 296, 183, 430, 184, 185, 186,
	187, 188, 297, 189, 190, 431, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 432, 203,
	368, 204, 205, 298, 206, 0, 210, 211, 212, 213,
	433, 215, 299, 214, 216, 217, 434, 218, 207, 208,
	219, 369, 220, 300, 301, 221, 435, 227, 222, 223,
	209, 224, 226, 302, 225, 303, 436, 228, 437, 229,
	230, 231, 232, 233, 234, 235, 438, 304, 305, 306,
	439, 440, 236, 237, 307, 308, 441, 238, 239, 240,
	241, 442, 443, 242, 243, 244, 245, 444, 246, 445,
	309, 247, 248, 249, 310, 311, 446, 447, 250, 448,
	449, 450, 451, 251, 252, 253, 254, 255, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2137, 103, 104, 370,
	105, 371, 372, 373, 374, 256, 375, 376, 377, 378,
	106, 107, 108, 257, 258, 259, 260, 109, 261, 262,
	379, 110, 263, 264, 111, 112, 380, 381, 265, 266,
	267, 382, 113, 268, 383, 356, 384, 114, 115, 116,
	0, 117, 385, 118, 119, 120, 386, 357, 121, 122,
	387, 388, 390, 389, 391, 392, 393, 123, 124, 317,
	125, 269, 126, 270, 271, 394, 127, 395, 128, 396,
	129, 397, 398, 130, 131, 399, 132, 400, 0, 401,
	272, 133, 134, 135, 273, 274, 402, 403, 404, 136,
	137, 275, 276, 277, 0, 138, 405, 139, 406, 407,
	358, 408, 140, 278, 409, 279, 410, 141, 142, 143,
	144, 280, 281, 360, 411, 148, 412, 145, 413, 359,
	146, 282, 147, 283, 284, 285, 286, 287, 414, 288,
	415, 361, 149, 150, 151, 362, 152, 153, 154, 416,
	156, 155, 417, 289, 363, 157, 364, 418, 158, 419,
	420, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 421, 422, 423, 291, 169, 292,
	170, 171, 424, 172, 425, 426, 173, 427, 428, 174,
	293, 366, 175, 367, 294, 176, 177, 178, 179, 180,
	429, 181, 295, 182, 296, 183, 430, 184, 185, 186,
	187, 188, 297, 189, 190, 431, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 432, 203,
	368, 204, 205, 298, 206, 0, 210, 211, 212, 213,
	433, 215, 299, 214, 216, 217, 434, 218, 207, 208,
	219, 369, 220, 300, 301, 221, 435, 227, 222, 223,
	209, 224, 226, 302, 225, 303, 436, 228, 437, 229,
	230, 231, 232, 233, 234, 235, 438, 304, 305, 306,
	439, 440, 236, 237, 307, 308, 441, 238, 239, 240,
	241, 442, 443, 242, 243, 244, 245, 444, 246, 445,
	309, 247, 248, 249, 310, 311, 446, 447, 250, 448,
	449, 450, 451, 251, 252, 253, 254, 255, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 103, 104, 370, 105, 371, 372,
	373, 374, 256, 375, 376, 377, 378, 106, 107, 108,
	257, 258, 259, 260, 109, 261, 262, 379, 110, 263,
	264, 111, 112, 380, 381, 265, 266, 267, 382, 113,
	268, 383, 356, 384, 114, 115, 116, 0, 117, 385,
	118, 119, 120, 386, 357, 121, 122, 387, 388, 390,
	389, 391, 392, 393, 123, 124, 317, 125, 269, 126,
	270, 271, 394, 127, 395, 128, 396, 129, 397, 398,
	130, 131, 399, 132, 400, 0, 401, 272, 133, 134,
	135, 273, 274, 402, 403, 404, 136, 137, 275, 276,
	277, 0, 138, 405, 139, 406, 407, 358, 408, 140,
	278, 409, 279, 410, 141, 142, 143, 144, 280, 281,
	360, 411, 148, 412, 145, 413, 359, 146, 282, 147,
	283, 284, 285, 286, 287, 414, 288, 415, 361, 149,
	150, 151, 362, 152, 153, 154, 416, 156, 155, 417,
	289, 363, 157, 364, 418, 158, 419, 420, 159, 0,
	160, 161, 162, 164, 290, 163, 365, 165, 166, 168,
	167, 421, 422, 423, 291, 169, 292, 170, 171, 424,
	172, 425, 426, 173, 427, 428, 174, 293, 366, 175,
	367, 294, 176, 177, 178, 179, 180, 429, 181, 295,
	182, 296, 183, 430, 184, 185, 186, 187, 188, 297,
	189, 190, 431, 191, 192, 193, 194, 195, 197, 198,
	196, 199, 200, 201, 202, 432, 203, 368, 204, 205,
	298, 206, 0, 210, 211, 212, 213, 433, 215, 299,
	214, 216, 217, 434, 218, 207, 208, 219, 369, 220,
	300, 301, 221, 435, 227, 222, 223, 209, 224, 226,
	302, 225, 303, 436, 228, 437, 229, 230, 231, 232,
	233, 234, 235, 438, 304, 305, 306, 439, 440, 236,
	237, 307, 308, 441, 238, 239, 240, 241, 442, 443,
	242, 243, 244, 245, 444, 246, 445, 309, 247, 248,
	249, 310, 311, 446, 447, 250, 448, 449, 450, 451,
	251, 252, 253, 254, 255, 638, 627, 628, 625, 626,
	617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 0, 105, 0, 0, 0, 0, 655,
	620, 0, 0, 0, 106, 107, 108, 257, 670, 259,
	671, 109, 672, 673, 0, 110, 263, 264, 111, 112,
	623, 654, 674, 675, 267, 0, 113, 666, 0, 646,
	0, 114, 115, 116, 0, 117, 0, 118, 119, 120,
	0, 357, 121, 122, 0, 647, 648, 650, 0, 649,
	651, 123, 124, 317, 125, 676, 126, 677, 678, 843,
	127, 0, 128, 0, 129, 0, 0, 669, 131, 0,
	132, 0, 0, 0, 611, 133, 134, 135, 656, 657,
	634, 0, 0, 136, 137, 679, 680, 681, 0, 138,
	0, 139, 0, 0, 358, 0, 140, 667, 0, 279,
	0, 141, 142, 143, 144, 663, 665, 360, 0, 148,
	0, 145, 0, 359, 146, 682, 147, 683, 684, 685,
	686, 687, 0, 645, 0, 361, 149, 150, 151, 362,
	152, 153, 154, 0, 156, 155, 0, 668, 363, 157,
	364, 0, 158, 0, 0, 159, 0, 160, 161, 162,
	164, 290, 163, 365, 165, 166, 168, 167, 606, 0,
	635, 664, 169, 688, 170, 171, 0, 172, 0, 0,
	173, 0, 0, 174, 293, 366, 175, 367, 658, 176,
	177, 178, 179, 180, 0, 181, 659, 182, 296, 183,
	0, 184, 185, 186, 187, 188, 689, 189, 190, 0,
	191, 192, 193, 194, 195, 197, 198, 196, 199, 200,
	201, 202, 0, 203, 368, 204, 205, 612, 206, 0,
	210, 211, 212, 213, 84, 215, 299, 214, 216, 217,
	652, 218, 207, 208, 219, 369, 220, 690, 301, 221,
	0, 227, 222, 223, 209, 224, 226, 691, 225, 660,
	0, 228, 86, 229, 230, 231, 232, 233, 234, 235,
	0, 304, 692, 693, 0, 0, 236, 237, 661, 662,
	633, 238, 239, 240, 241, 0, 0, 242, 243, 244,
	245, 653, 246, 0, 309, 247, 248, 249, 728, 694,
	0, 0, 250, 0, 0, 0, 82, 251, 252, 253,
	254, 255, 607, 83, 0, 0, 0, 0, 605, 0,
	0, 0, 0, 603, 604, 638, 627, 628, 625, 626,
	617, 0, 613, 0, 0, 0, 0, 616, 0, 0,
	0, 103, 104, 1272, 105, 0, 0, 0, 0, 655,
	620, 0, 0, 0, 106, 107, 108, 257, 670, 259,
	671, 109, 672, 673, 0, 110, 263, 264, 111, 112,
	623, 654, 674, 675, 267, 0, 113, 666, 0, 646,
	0, 114, 115, 116, 0, 117, 0, 118, 119, 120,
	0, 357, 121, 122, 0, 647, 648, 650, 0, 649,
	651, 123, 124, 317, 125, 676, 126, 677, 678, 0,
	127, 0, 128, 0, 129, 1273, 0, 669, 131, 0,
	132, 0, 0, 0, 611, 133, 134, 135, 656, 657,
	634, 0, 0, 136, 137, 679, 680, 681, 0, 138,
	0, 139, 0, 0, 358, 0, 140, 667, 0, 279,
	0, 141, 142, 143, 144, 663, 665, 360, 0, 148,
	0, 145, 0, 359, 146, 682, 147, 683, 684, 685,
	686, 687, 0, 645, 0, 361, 149, 150, 151, 362,
	152, 153, 154, 0, 156, 155, 0, 668, 363, 157,
	364, 0, 158, 0, 0, 159, 0, 160, 161, 162,
	164, 290, 163, 365, 165, 166, 168, 167, 606, 0,
	635, 664, 169, 688, 170, 171, 0, 172, 0, 0,
	173, 0, 0, 174, 293, 366, 175, 367, 658, 176,
	177, 178, 179, 180, 0, 181, 659, 182, 296, 183,
	0, 184, 185, 186, 187, 188, 689, 189, 190, 0,
	191, 192, 193, 194, 195, 197, 198, 196, 199, 200,
	201, 202, 0, 203, 368, 204, 205, 612, 206, 0,
	210, 211, 212, 213, 0, 215, 299, 214, 216, 217,
	652, 218, 207, 208, 219, 369, 220, 690, 301, 221,
	0, 227, 222, 223, 209, 224, 226, 691, 225, 660,
	0, 228, 0, 229, 230, 231, 232, 233, 234, 235,
	0, 304, 692, 693, 0, 0, 236, 237, 661, 662,
	633, 238, 239, 240, 241, 0, 0, 242, 243, 244,
	245, 653, 246, 0, 309, 247, 248, 249, 310, 694,
	1271, 0, 250, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 607, 0, 0, 0, 0, 0, 605, 0,
	0, 0, 0, 603, 604, 1274, 638, 627, 628, 625,
	626, 617, 613, 1269, 0, 0, 0, 616, 0, 0,
	0, 0, 103, 104, 0, 105, 0, 0, 0, 0,
	655, 620, 0, 0, 0, 106, 107, 108, 257, 670,
	259, 671, 109, 672, 673, 0, 110, 263, 264, 111,
	112, 623, 654, 674, 675, 267, 0, 113, 666, 0,
	646, 0, 114, 115, 116, 0, 117, 0, 118, 119,
	120, 0, 357, 121, 122, 0, 647, 648, 650, 0,
	649, 651, 123, 124, 317, 125, 676, 126, 677, 678,
	0, 127, 0, 128, 0, 129, 0, 0, 669, 131,
	0, 132, 0, 0, 0, 611, 133, 134, 135, 656,
	657, 634, 0, 0, 136, 137, 679, 680, 681, 0,
	138, 0, 139, 0, 0, 358, 0, 140, 667, 0,
	279, 0, 141, 142, 143, 144, 663, 665, 360, 0,
	148, 0, 145, 0, 359, 146, 682, 147, 683, 684,
	685, 686, 687, 0, 645, 0, 361, 149, 150, 151,
	362, 152, 153, 154, 0, 156, 155, 0, 668, 363,
	157, 364, 0, 158, 0, 0, 159, 0, 160, 161,
	162, 164, 290, 163, 365, 165, 166, 168, 167, 606,
	0, 635, 664, 169, 688, 170, 171, 0, 172, 0,
	0, 173, 0, 0, 174, 293, 366, 175, 367, 658,
	176, 177, 178, 179, 180, 0, 181, 659, 182, 296,
	183, 0, 184, 185, 186, 187, 188, 689, 189, 190,
	0, 191, 192, 193, 194, 195, 197, 198, 196, 199,
	200, 201, 202, 0, 203, 368, 204, 205, 612, 206,
	0, 210, 211, 212, 213, 84, 215, 299, 214, 216,
	217, 652, 218, 207, 208, 219, 369, 220, 690, 301,
	221, 0, 227, 222, 223, 209, 224, 226, 691, 225,
	660, 0, 228, 86, 229, 230, 231, 232, 233, 234,
	235, 0, 304, 692, 693, 0, 0, 236, 237, 661,
	662, 633, 238, 239, 240, 241, 0, 0, 242, 243,
	244, 245, 653, 246, 0, 309, 247, 248, 249, 728,
	694, 0, 0, 250, 0, 0, 0, 82, 251, 252,
	253, 254, 255, 607, 83, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 603, 604, 638, 627, 628, 625,
	626, 617, 0, 613, 0, 0, 0, 0, 616, 0,
	0, 0, 103, 104, 0, 105, 0, 0, 0, 0,
	655, 620, 0, 0, 0, 106, 107, 108, 257, 670,
	259, 671, 109, 672, 673, 1319, 110, 263, 264, 111,
	112, 623, 654, 674, 675, 267, 0, 113, 666, 0,
	646, 0, 114, 115, 116, 0, 117, 0, 118, 119,
	120, 0, 357, 121, 122, 0, 647, 648, 650, 0,
	649, 651, 123, 124, 317, 125, 676, 126, 677, 678,
	0, 127, 0, 128, 0, 129, 0, 0, 669, 131,
	0, 132, 0, 0, 0, 611, 133, 134, 135, 656,
	657, 634, 0, 0, 136, 137, 679, 680, 681, 0,
	138, 0, 139, 0, 1324, 358, 0, 140, 667, 0,
	279, 0, 141, 142, 143, 144, 663, 665, 360, 0,
	148, 0, 145, 0, 359, 146, 682, 147, 683, 684,
	685, 686, 687, 0, 645, 0, 361, 149, 150, 151,
	362, 152, 153, 154, 0, 156, 155, 1320, 668, 363,
	157, 364, 0, 158, 0, 0, 159, 0, 160, 161,
	162, 164, 290, 163, 365, 165, 166, 168, 167, 606,
	0, 635, 664, 169, 688, 170, 171, 0, 172, 0,
	0, 173, 0, 0, 174, 293, 366, 175, 367, 658,
	176, 177, 178, 179, 180, 0, 181, 659, 182, 296,
	183, 0, 184, 185, 186, 187, 188, 689, 189, 190,
	0, 191, 192, 193, 194, 195, 197, 198, 196, 199,
	200, 201, 202, 0, 203, 368, 204, 205, 612, 206,
	0, 210, 211, 212, 213, 0, 215, 299, 214, 216,
	217, 652, 218, 207, 208, 219, 369, 220, 690, 301,
	221, 0, 227, 222, 223, 209, 224, 226, 691, 225,
	660, 0, 228, 0, 229, 230, 231, 232, 233, 234,
	235, 0, 304, 692, 693, 0, 1321, 236, 237, 661,
	662, 633, 238, 239, 240, 241, 0, 0, 242, 243,
	244, 245, 653, 246, 0, 309, 247, 248, 249, 310,
	694, 0, 0, 250, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 607, 0, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 603, 604, 638, 627, 628, 625,
	626, 617, 0, 613, 0, 0, 0, 0, 616, 0,
	0, 0, 103, 104, 0, 105, 0, 0, 0, 0,
	655, 620, 0, 0, 0, 106, 107, 108, 257, 670,
	259, 671, 109, 672, 673, 0, 110, 263, 264, 111,
	112, 623, 654, 674, 675, 267, 0, 113, 666, 0,
	646, 0, 114, 115, 116, 0, 117, 0, 118, 119,
	120, 0, 357, 121, 122, 0, 647, 648, 650, 0,
	649, 651, 123, 124, 317, 125, 676, 126, 677, 678,
	0, 127, 0, 128, 0, 129, 0, 0, 669, 131,
	0, 132, 0, 0, 0, 611, 133, 134, 135, 656,
	657, 634, 0, 0, 136, 137, 679, 680, 681, 0,
	138, 0, 139, 0, 0, 358, 0, 140, 667, 0,
	279, 0, 141, 142, 143, 144, 663, 665, 360, 0,
	148, 0, 145, 0, 359, 146, 682, 147, 683, 684,
	685, 686, 687, 0, 645, 0, 361, 149, 150, 151,
	362, 152, 153, 154, 0, 156, 155, 0, 668, 363,
	157, 364, 0, 158, 0, 0, 159, 0, 160, 161,
	162, 164, 290, 163, 365, 165, 166, 168, 167, 606,
	1808, 635, 664, 169, 688, 170, 171, 0, 172, 0,
	0, 173, 0, 0, 174, 293, 366, 175, 367, 658,
	176, 177, 178, 179, 180, 0, 181, 659, 182, 296,
	183, 0, 184, 185, 186, 187, 188, 689, 189, 190,
	0, 191, 192, 193, 194, 195, 197, 198, 196, 199,
	200, 201, 202, 0, 203, 368, 204, 205, 612, 206,
	0, 210, 211, 212, 213, 0, 215, 299, 214, 216,
	217, 652, 218, 207, 208, 219, 369, 220, 690, 301,
	221, 0, 227, 222, 223, 209, 224, 226, 691, 225,
	660, 0, 228, 0, 229, 230, 231, 232, 233, 234,
	235, 0, 304, 692, 693, 0, 0, 236, 237, 661,
	662, 633, 238, 239, 240, 241, 0, 0, 242, 243,
	244, 245, 653, 246, 0, 309, 247, 248, 249, 310,
	694, 0, 0, 250, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 607, 0, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 603, 604, 834, 638, 627, 628,
	625, 626, 617, 613, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	0, 655, 620, 0, 0, 0, 106, 107, 108, 257,
	670, 259, 671, 109, 672, 673, 0, 110, 263, 264,
	111, 112, 623, 654, 674, 675, 267, 0, 113, 666,
	0, 646, 0, 114, 115, 116, 0, 117, 0, 118,
	119, 120, 0, 357, 121, 122, 0, 647, 648, 650,
	0, 649, 651, 123, 124, 317, 125, 676, 126, 677,
	678, 0, 127, 0, 128, 0, 129, 0, 0, 669,
	131, 0, 132, 0, 0, 0, 611, 133, 134, 135,
	656, 657, 634, 0, 0, 136, 137, 679, 680, 681,
	0, 138, 0, 139, 0, 0, 358, 0, 140, 667,
	0, 279, 0, 141, 142, 143, 144, 663, 665, 360,
	0, 148, 1138, 145, 0, 359, 146, 682, 147, 683,
	684, 685, 686, 687, 0, 645, 0, 361, 149, 150,
	151, 362, 152, 153, 154, 0, 156, 155, 0, 668,
	363, 157, 364, 0, 158, 0, 0, 159, 0, 160,
	161, 162, 164, 290, 163, 365, 165, 166, 168, 167,
	606, 0, 635, 664, 169, 688, 170, 171, 0, 172,
	0, 0, 173, 0, 0, 174, 293, 366, 175, 367,
	658, 176, 177, 178, 179, 180, 0, 181, 659, 182,
	296, 183, 1137, 184, 185, 186, 187, 188, 689, 189,
	190, 0, 191, 192, 193, 194, 195, 197, 198, 196,
	199, 200, 201, 202, 0, 203, 368, 204, 205, 612,
	206, 0, 210, 211, 212, 213, 0, 215, 299, 214,
	216, 217, 652, 218, 207, 208, 219, 369, 220, 690,
	301, 221, 0, 227, 222, 223, 209, 224, 226, 691,
	225, 660, 0, 228, 0, 229, 230, 231, 232, 233,
	234, 235, 0, 304, 692, 693, 0, 0, 236, 237,
	661, 662, 633, 238, 239, 240, 241, 0, 0, 242,
	243, 244, 245, 653, 246, 0, 309, 247, 248, 249,
	310, 694, 0, 0, 250, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 607, 0, 0, 0, 0, 0,
	605, 0, 0, 0, 0, 603, 604, 638, 627, 628,
	625, 626, 617, 0, 613, 0, 0, 0, 0, 616,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	0, 655, 620, 0, 0, 0, 106, 107, 108, 257,
	670, 259, 671, 109, 672, 673, 0, 110, 263, 264,
	111, 112, 623, 654, 674, 675, 267, 0, 113, 666,
	0, 646, 0, 114, 115, 116, 0, 117, 0, 118,
	119, 120, 0, 357, 121, 122, 0, 647, 648, 650,
	0, 649, 651, 123, 124, 317, 125, 676, 126, 677,
	678, 0, 127, 0, 128, 0, 129, 0, 0, 669,
	131, 0, 132, 0, 0, 0, 611, 133, 134, 135,
	656, 657, 634, 0, 0, 136, 137, 679, 680, 681,
	0, 138, 0, 139, 0, 0, 358, 0, 140, 667,
	0, 279, 0, 141, 142, 143, 144, 663, 665, 360,
	0, 148, 0, 145, 0, 359, 146, 682, 147, 683,
	684, 685, 686, 687, 0, 645, 0, 361, 149, 150,
	151, 362, 152, 153, 154, 0, 156, 155, 0, 668,
	363, 157, 364, 0, 158, 0, 0, 159, 0, 160,
	161, 162, 164, 290, 163, 365, 165, 166, 168, 167,
	606, 0, 635, 664, 169, 688, 170, 171, 0, 172,
	0, 0, 173, 0, 0, 174, 293, 366, 175, 367,
	658, 176, 177, 178, 179, 180, 0, 181, 659, 182,
	296, 183, 0, 184, 185, 186, 187, 188, 689, 189,
	190, 0, 191, 192, 193, 194, 195, 197, 198, 196,
	199, 200, 201, 202, 0, 203, 368, 204, 205, 612,
	206, 0, 210, 211, 212, 213, 0, 215, 299, 214,
	216, 217, 652, 218, 207, 208, 219, 369, 220, 690,
	301, 221, 0, 227, 222, 223, 209, 224, 226, 691,
	225, 660, 0, 228, 0, 229, 230, 231, 232, 233,
	234, 235, 0, 304, 692, 693, 0, 0, 236, 237,
	661, 662, 633, 238, 239, 240, 241, 0, 0, 242,
	243, 244, 245, 653, 246, 0, 309, 247, 248, 249,
	310, 694, 0, 0, 250, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 607, 0, 0, 0, 0, 0,
	605, 0, 0, 0, 0, 603, 604, 0, 0, 0,
	0, 0, 926, 1264, 613, 0, 0, 0, 0, 616,
	638, 627, 628, 625, 626, 617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 0, 105,
	0, 0, 0, 0, 655, 620, 0, 0, 0, 106,
	107, 108, 257, 670, 259, 671, 109, 672, 673, 0,
	110, 263, 264, 111, 112, 623, 654, 674, 675, 267,
	0, 113, 666, 0, 646, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 357, 121, 122, 0,
	647, 648, 650, 0, 649, 651, 123, 124, 317, 125,
	676, 126, 677, 678, 843, 127, 0, 128, 0, 129,
	0, 0, 669, 131, 0, 132, 0, 0, 0, 611,
	133, 134, 135, 656, 657, 634, 0, 0, 136, 137,
	679, 680, 681, 0, 138, 0, 139, 0, 0, 358,
	0, 140, 667, 0, 279, 0, 141, 142, 143, 144,
	663, 665, 360, 0, 148, 0, 145, 0, 359, 146,
	682, 147, 683, 684, 685, 686, 687, 0, 645, 0,
	361, 149, 150, 151, 362, 152, 153, 154, 0, 156,
	155, 0, 668, 363, 157, 364, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 365, 165,
	166, 168, 167, 606, 0, 635, 664, 169, 688, 170,
	171, 0, 172, 0, 0, 173, 0, 0, 174, 293,
	366, 175, 367, 658, 176, 177, 178, 179, 180, 0,
	181, 659, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 689, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 368,
	204, 205, 612, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 652, 218, 207, 208, 219,
	369, 220, 690, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 691, 225, 660, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 692, 693, 0,
	0, 236, 237, 661, 662, 633, 238, 239, 240, 241,
	0, 0, 242, 243, 244, 245, 653, 246, 0, 309,
	247, 248, 249, 310, 694, 0, 0, 250, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 607, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 603, 604,
	638, 627, 628, 625, 626, 617, 0, 613, 0, 0,
	0, 0, 616, 0, 0, 0, 103, 104, 0, 105,
	0, 0, 0, 0, 655, 620, 0, 0, 0, 106,
	107, 108, 257, 670, 259, 671, 109, 672, 673, 0,
	110, 263, 264, 111, 112, 623, 654, 674, 675, 267,
	0, 113, 666, 0, 646, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 357, 121, 122, 0,
	647, 648, 650, 0, 649, 651, 123, 124, 317, 125,
	676, 126, 677, 678, 0, 127, 0, 128, 0, 129,
	0, 0, 669, 131, 0, 132, 0, 0, 0, 611,
	133, 134, 135, 656, 657, 634, 0, 0, 136, 137,
	679, 680, 681, 0, 138, 0, 139, 0, 0, 358,
	0, 140, 667, 0, 279, 0, 141, 142, 143, 144,
	663, 665, 360, 0, 148, 0, 145, 0, 359, 146,
	682, 147, 683, 684, 685, 686, 687, 0, 645, 0,
	361, 149, 150, 151, 362, 152, 153, 154, 0, 156,
	155, 0, 668, 363, 157, 364, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 365, 165,
	166, 168, 167, 606, 0, 635, 664, 169, 688, 170,
	171, 0, 172, 0, 0, 173, 0, 0, 174, 293,
	366, 175, 367, 658, 176, 177, 178, 179, 180, 0,
	181, 659, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 689, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 368,
	204, 205, 612, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 652, 218, 207, 208, 219,
	369, 220, 690, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 691, 225, 660, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 692, 693, 0,
	0, 236, 237, 661, 662, 633, 238, 239, 240, 241,
	0, 0, 242, 243, 244, 245, 653, 246, 0, 309,
	247, 248, 249, 310, 694, 0, 0, 250, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 607, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 603, 604,
	638, 627, 628, 625, 626, 617, 0, 613, 1791, 0,
	0, 0, 616, 0, 0, 0, 103, 104, 0, 105,
	0, 0, 0, 0, 655, 620, 0, 0, 0, 106,
	107, 108, 257, 670, 259, 671, 109, 672, 673, 0,
	110, 263, 264, 111, 112, 623, 654, 674, 675, 267,
	0, 113, 666, 0, 646, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 357, 121, 122, 0,
	647, 648, 650, 0, 649, 651, 123, 124, 317, 125,
	676, 126, 677, 678, 0, 127, 0, 128, 0, 129,
	0, 0, 669, 131, 0, 132, 0, 0, 0, 611,
	133, 134, 135, 656, 657, 634, 0, 0, 136, 137,
	679, 680, 681, 0, 138, 0, 139, 0, 0, 358,
	0, 140, 667, 0, 279, 0, 141, 142, 143, 144,
	663, 665, 360, 0, 148, 0, 145, 0, 359, 146,
	682, 147, 683, 684, 685, 686, 687, 0, 645, 0,
	361, 149, 150, 151, 362, 152, 153, 154, 0, 156,
	155, 0, 668, 363, 157, 364, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 365, 165,
	166, 168, 167, 606, 0, 635, 664, 169, 688, 170,
	171, 0, 172, 0, 0, 173, 0, 0, 174, 293,
	366, 175, 367, 658, 176, 177, 178, 179, 180, 0,
	181, 659, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 689, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 368,
	204, 205, 612, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 652, 218, 207, 208, 219,
	369, 220, 690, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 691, 225, 660, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 692, 693, 0,
	0, 236, 237, 661, 662, 633, 238, 239, 240, 241,
	0, 0, 242, 243, 244, 245, 653, 246, 0, 309,
	247, 248, 249, 310, 694, 1740, 0, 250, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 607, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 603, 604,
	638, 627, 628, 625, 626, 617, 0, 613, 0, 0,
	0, 0, 616, 0, 0, 0, 103, 104, 0, 105,
	0, 0, 0, 0, 655, 620, 0, 0, 0, 106,
	107, 108, 257, 670, 259, 671, 109, 672, 673, 0,
	110, 263, 264, 111, 112, 623, 654, 674, 675, 267,
	0, 113, 666, 0, 646, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 357, 121, 122, 0,
	647, 648, 650, 0, 649, 651, 123, 124, 317, 125,
	676, 126, 677, 678, 0, 127, 0, 128, 0, 129,
	0, 0, 669, 131, 0, 132, 0, 0, 0, 611,
	133, 134, 135, 656, 657, 634, 0, 0, 136, 137,
	679, 680, 681, 0, 138, 0, 139, 0, 0, 358,
	0, 140, 667, 0, 279, 0, 141, 142, 143, 144,
	663, 665, 360, 0, 148, 0, 145, 0, 359, 146,
	682, 147, 683, 684, 685, 686, 687, 0, 645, 0,
	361, 149, 150, 151, 362, 152, 153, 154, 0, 156,
	155, 0, 668, 363, 157, 364, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 365, 165,
	166, 168, 167, 606, 0, 635, 664, 169, 688, 170,
	171, 0, 172, 0, 0, 173, 0, 0, 174, 293,
	366, 175, 367, 658, 176, 177, 178, 179, 180, 0,
	181, 659, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 689, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 368,
	204, 205, 612, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 652, 218, 207, 208, 219,
	369, 220, 690, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 691, 225, 660, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 692, 693, 0,
	0, 236, 237, 661, 662, 633, 238, 239, 240, 241,
	0, 0, 242, 243, 244, 245, 653, 246, 0, 309,
	247, 248, 249, 310, 694, 0, 0, 250, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 607, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 603, 604,
	638, 627, 628, 625, 626, 617, 0, 613, 1730, 0,
	0, 0, 616, 0, 0, 0, 103, 104, 0, 105,
	0, 0, 0, 0, 655, 620, 0, 0, 0, 106,
	107, 108, 257, 670, 259, 671, 109, 672, 673, 0,
	110, 263, 264, 111, 112, 623, 654, 674, 675, 267,
	0, 113, 666, 0, 646, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 357, 121, 122, 0,
	647, 648, 650, 0, 649, 651, 123, 124, 317, 125,
	676, 126, 677, 678, 0, 127, 0, 128, 0, 129,
	0, 0, 669, 131, 0, 132, 0, 0, 0, 611,
	133, 134, 135, 656, 657, 634, 0, 0, 136, 137,
	679, 680, 681, 0, 138, 0, 139, 0, 1324, 358,
	0, 140, 667, 0, 279, 0, 141, 142, 143, 144,
	663, 665, 360, 0, 148, 0, 145, 0, 359, 146,
	682, 147, 683, 684, 685, 686, 687, 0, 645, 0,
	361, 149, 150, 151, 362, 152, 153, 154, 0, 156,
	155, 0, 668, 363, 157, 364, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 365, 165,
	166, 168, 167, 606, 0, 635, 664, 169, 688, 170,
	171, 0, 172, 0, 0, 173, 0, 0, 174, 293,
	366, 175, 367, 658, 176, 177, 178, 179, 180, 0,
	181, 659, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 689, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 368,
	204, 205, 612, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 652, 218, 207, 208, 219,
	369, 220, 690, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 691, 225, 660, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 692, 693, 0,
	0, 236, 237, 661, 662, 633, 238, 239, 240, 241,
	0, 0, 242, 243, 244, 245, 653, 246, 0, 309,
	247, 248, 249, 310, 694, 0, 0, 250, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 607, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 603, 604,
	638, 627, 628, 625, 626, 617, 0, 613, 0, 0,
	0, 0, 616, 0, 0, 0, 103, 104, 0, 105,
	0, 0, 0, 0, 655, 620, 0, 0, 0, 106,
	107, 108, 257, 670, 259, 671, 109, 672, 673, 0,
	110, 263, 264, 111, 112, 623, 654, 674, 675, 267,
	0, 113, 666, 0, 646, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 357, 121, 122, 0,
	647, 648, 650, 0, 649, 651, 123, 124, 317, 125,
	676, 126, 677, 678, 0, 127, 0, 128, 0, 129,
	0, 0, 669, 131, 0, 132, 0, 0, 0, 611,
	133, 134, 135, 656, 657, 634, 0, 0, 136, 137,
	679, 680, 681, 0, 138, 0, 139, 0, 0, 358,
	0, 140, 667, 0, 279, 0, 141, 142, 143, 144,
	663, 665, 360, 0, 148, 0, 145, 0, 359, 146,
	682, 147, 683, 684, 685, 686, 687, 0, 645, 0,
	361, 149, 150, 151, 362, 152, 153, 154, 0, 156,
	155, 0, 668, 363, 157, 364, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 365, 165,
	166, 168, 167, 606, 0, 635, 664, 169, 688, 170,
	171, 0, 172, 0, 0, 173, 0, 0, 174, 293,
	366, 175, 367, 658, 176, 177, 178, 179, 180, 0,
	181, 659, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 689, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 368,
	204, 205, 612, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 652, 218, 207, 208, 219,
	369, 220, 690, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 691, 225, 660, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 692, 693, 0,
	0, 236, 237, 661, 662, 633, 238, 239, 240, 241,
	0, 0, 242, 243, 244, 245, 653, 246, 0, 309,
	247, 248, 249, 310, 694, 0, 0, 250, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 607, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 603, 604,
	834, 638, 627, 628, 625, 626, 617, 613, 0, 0,
	0, 0, 616, 0, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 257, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 623, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 122,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 126, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	611, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 143,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 606, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 612, 206, 0, 210, 211, 212, 213,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 240,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 607, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 603,
	604, 638, 627, 628, 625, 626, 617, 0, 613, 1259,
	0, 0, 0, 616, 0, 0, 0, 103, 104, 1125,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 257, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 623, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 122,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 126, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	611, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 143,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 606, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 612, 206, 0, 210, 211, 212, 213,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 240,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 607, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 603,
	604, 638, 627, 628, 625, 626, 617, 0, 613, 0,
	0, 0, 0, 616, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 257, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 623, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 2197,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 126, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	611, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 143,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 606, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 612, 206, 0, 210, 211, 212, 213,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 2196,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 607, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 603,
	604, 638, 627, 628, 625, 626, 617, 0, 613, 0,
	0, 0, 0, 616, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 2195, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 623, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 2197,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 126, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	611, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 143,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 606, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 612, 206, 0, 210, 211, 212, 213,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 2196,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 607, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 603,
	604, 638, 627, 628, 625, 626, 617, 0, 613, 0,
	0, 0, 0, 616, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 257, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 623, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 122,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 126, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	611, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 143,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 606, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 612, 206, 0, 210, 211, 212, 213,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 240,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 607, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 603,
	604, 1296, 627, 628, 625, 626, 617, 0, 613, 0,
	0, 0, 0, 616, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 257, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 623, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 122,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 1299, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	611, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 1300,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 1301, 1298, 164, 290, 163, 365,
	165, 166, 168, 167, 606, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 612, 206, 0, 210, 211, 212, 1302,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 240,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 1297, 255, 607, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 603,
	604, 638, 627, 628, 625, 626, 617, 0, 613, 0,
	0, 0, 0, 616, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 257, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 623, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 122,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 126, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	611, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 143,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 0, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 1314, 206, 0, 210, 211, 212, 213,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 240,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 1310,
	1311, 638, 627, 628, 625, 626, 617, 0, 1313, 0,
	0, 0, 0, 616, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 655, 620, 0, 0, 0,
	106, 107, 108, 257, 670, 259, 671, 109, 672, 673,
	0, 110, 263, 264, 111, 112, 0, 654, 674, 675,
	267, 0, 113, 666, 0, 646, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 357, 121, 122,
	0, 647, 648, 650, 0, 649, 651, 123, 124, 317,
	125, 676, 126, 677, 678, 0, 127, 0, 128, 0,
	129, 0, 0, 669, 131, 0, 132, 0, 0, 0,
	272, 133, 134, 135, 656, 657, 634, 0, 0, 136,
	137, 679, 680, 681, 0, 138, 0, 139, 0, 0,
	358, 0, 140, 667, 0, 279, 0, 141, 142, 143,
	144, 663, 665, 360, 0, 148, 0, 145, 0, 359,
	146, 682, 147, 683, 684, 685, 686, 687, 0, 645,
	0, 361, 149, 150, 151, 362, 152, 153, 154, 0,
	156, 155, 0, 668, 363, 157, 364, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 365,
	165, 166, 168, 167, 0, 0, 635, 664, 169, 688,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 366, 175, 367, 658, 176, 177, 178, 179, 180,
	0, 181, 659, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 689, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	368, 204, 205, 1314, 206, 0, 210, 211, 212, 213,
	0, 215, 299, 214, 216, 217, 652, 218, 207, 208,
	219, 369, 220, 690, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 691, 225, 660, 0, 228, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 692, 693,
	0, 0, 236, 237, 661, 662, 633, 238, 239, 240,
	241, 0, 0, 242, 243, 244, 245, 653, 246, 0,
	309, 247, 248, 249, 310, 694, 0, 0, 250, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 0, 0,
	638, 627, 628, 625, 626, 617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 1313, 105,
	0, 0, 0, 616, 655, 620, 0, 0, 0, 106,
	107, 108, 0, 670, 259, 671, 109, 672, 673, 0,
	110, 263, 264, 111, 112, 623, 654, 674, 675, 267,
	0, 113, 666, 0, 646, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 357, 121, 2197, 0,
	647, 648, 650, 0, 649, 651, 123, 124, 317, 125,
	676, 126, 677, 678, 0, 127, 0, 128, 0, 129,
	0, 0, 669, 131, 0, 132, 0, 0, 0, 611,
	133, 134, 135, 656, 657, 634, 0, 0, 136, 137,
	679, 680, 681, 0, 138, 0, 139, 0, 0, 358,
	0, 140, 667, 0, 279, 0, 141, 142, 143, 144,
	663, 665, 0, 0, 148, 0, 145, 0, 359, 146,
	682, 147, 683, 684, 685, 686, 687, 0, 645, 0,
	0, 149, 150, 151, 362, 152, 153, 154, 0, 156,
	155, 0, 668, 363, 157, 0, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 365, 165,
	166, 168, 167, 606, 0, 635, 664, 169, 688, 170,
	171, 0, 172, 0, 0, 173, 0, 0, 174, 293,
	366, 175, 367, 658, 176, 177, 178, 179, 180, 0,
	181, 659, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 689, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 368,
	204, 205, 612, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 652, 218, 207, 208, 219,
	0, 220, 690, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 691, 225, 660, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 692, 693, 0,
	0, 236, 237, 661, 662, 633, 238, 239, 2196, 241,
	0, 0, 242, 243, 244, 245, 653, 246, 0, 309,
	247, 248, 249, 310, 694, 0, 0, 250, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 604,
	0, 0, 0, 103, 104, 0, 105, 613, 0, 0,
	0, 655, 616, 0, 0, 0, 106, 107, 108, 257,
	258, 259, 260, 109, 261, 262, 0, 110, 263, 264,
	111, 112, 0, 654, 265, 266, 267, 0, 113, 666,
	0, 646, 0, 114, 115, 116, 0, 117, 0, 118,
	119, 120, 0, 357, 121, 122, 0, 647, 648, 650,
	0, 649, 651, 123, 124, 317, 125, 269, 126, 270,
	271, 0, 127, 0, 128, 0, 129, 0, 0, 130,
	131, 0, 132, 0, 0, 0, 272, 133, 134, 135,
	656, 657, 0, 0, 0, 136, 137, 275, 276, 277,
	0, 138, 0, 139, 0, 0, 358, 0, 140, 667,
	0, 279, 0, 141, 142, 143, 144, 663, 665, 360,
	0, 148, 0, 145, 0, 359, 146, 282, 147, 283,
	284, 285, 286, 287, 0, 288, 0, 361, 149, 150,
	151, 362, 152, 153, 154, 0, 156, 155, 0, 668,
	363, 157, 364, 0, 158, 0, 0, 159, 0, 160,
	161, 162, 164, 290, 163, 365, 165, 166, 168, 167,
	0, 0, 0, 664, 169, 292, 170, 171, 0, 172,
	0, 0, 173, 0, 0, 174, 293, 366, 175, 367,
	658, 176, 177, 178, 179, 180, 0, 181, 659, 182,
	296, 183, 0, 184, 185, 186, 187, 188, 297, 189,
	190, 0, 191, 192, 193, 194, 195, 197, 198, 196,
	199, 200, 201, 202, 0, 203, 368, 204, 205, 298,
	206, 0, 210, 211, 212, 213, 0, 215, 299, 214,
	216, 217, 652, 218, 207, 208, 219, 369, 220, 300,
	301, 221, 0, 227, 222, 223, 209, 224, 226, 302,
	225, 660, 0, 228, 0, 229, 230, 231, 232, 233,
	234, 235, 0, 304, 305, 306, 0, 0, 236, 237,
	661, 662, 0, 238, 239, 240, 241, 0, 0, 242,
	243, 244, 245, 653, 246, 0, 309, 247, 248, 249,
	310, 311, 0, 0, 250, 0, 563, 0, 0, 251,
	252, 253, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 0, 105, 0, 0, 0, 0,
	256, 0, 0, 0, 1693, 106, 107, 108, 257, 258,
	259, 260, 109, 261, 262, 0, 110, 263, 264, 111,
	112, 0, 0, 265, 266, 267, 0, 113, 268, 0,
	356, 0, 114, 115, 116, 0, 117, 0, 118, 119,
	120, 0, 357, 121, 122, 0, 0, 0, 0, 0,
	0, 0, 123, 124, 317, 125, 269, 126, 270, 271,
	0, 127, 0, 128, 0, 129, 0, 0, 130, 131,
	0, 132, 0, 0, 0, 272, 133, 134, 135, 273,
	274, 0, 0, 0, 136, 137, 275, 276, 277, 0,
	138, 0, 139, 0, 0, 358, 0, 140, 278, 0,
	279, 0, 141, 142, 143, 144, 280, 281, 360, 0,
	148, 0, 145, 0, 359, 146, 282, 147, 283, 284,
	285, 286, 287, 0, 288, 0, 361, 149, 150, 151,
	362, 152, 153, 154, 0, 156, 155, 0, 289, 363,
	157, 364, 0, 158, 0, 0, 159, 0, 160, 161,
	162, 164, 290, 163, 365, 165, 166, 168, 167, 0,
	0, 0, 291, 169, 292, 170, 171, 0, 172, 0,
	0, 173, 0, 0, 174, 293, 366, 175, 367, 294,
	176, 177, 178, 179, 180, 0, 181, 295, 182, 296,
	183, 0, 184, 185, 186, 187, 188, 297, 189, 190,
	0, 191, 192, 193, 194, 195, 197, 198, 196, 199,
	200, 201, 202, 0, 203, 368, 204, 205, 298, 206,
	0, 210, 211, 212, 213, 84, 215, 299, 214, 216,
	217, 0, 218, 207, 208, 219, 369, 220, 300, 301,
	221, 0, 227, 222, 223, 209, 224, 226, 302, 225,
	303, 0, 228, 86, 229, 230, 231, 232, 233, 234,
	235, 0, 304, 305, 306, 0, 0, 236, 237, 307,
	308, 0, 238, 239, 240, 241, 0, 0, 242, 243,
	244, 245, 0, 246, 0, 309, 247, 248, 249, 728,
	311, 0, 0, 250, 0, 0, 0, 82, 251, 252,
	253, 254, 255, 0, 83, 563, 560, 0, 561, 556,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 80, 105, 0, 0, 0, 0, 256,
	0, 0, 0, 0, 106, 107, 108, 257, 258, 259,
	260, 109, 261, 262, 0, 110, 263, 264, 111, 112,
	0, 0, 265, 266, 267, 0, 113, 268, 0, 356,
	0, 114, 115, 116, 0, 117, 0, 118, 119, 120,
	0, 357, 121, 122, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 317, 125, 269, 126, 270, 271, 1079,
	127, 0, 128, 0, 129, 0, 0, 130, 131, 0,
	132, 0, 0, 0, 272, 133, 134, 135, 273, 274,
	553, 0, 0, 136, 137, 275, 276, 277, 0, 138,
	0, 139, 0, 0, 358, 0, 140, 278, 0, 279,
	0, 141, 142, 143, 144, 280, 281, 360, 0, 148,
	0, 145, 0, 359, 146, 282, 147, 283, 284, 285,
	286, 287, 0, 288, 0, 361, 149, 150, 151, 362,
	152, 153, 154, 0, 156, 155, 0, 289, 363, 157,
	364, 0, 158, 0, 0, 159, 0, 160, 161, 162,
	164, 290, 163, 365, 165, 166, 168, 167, 0, 0,
	0, 291, 169, 292, 170, 171, 0, 172, 554, 0,
	173, 0, 0, 174, 293, 366, 175, 367, 294, 176,
	177, 178, 179, 180, 0, 181, 295, 182, 296, 183,
	0, 184, 185, 186, 187, 188, 297, 189, 190, 0,
	191, 192, 193, 194, 195, 197, 198, 196, 199, 200,
	201, 202, 0, 203, 368, 204, 205, 298, 206, 0,
	210, 211, 212, 213, 0, 215, 299, 214, 216, 217,
	0, 218, 207, 208, 219, 369, 220, 300, 301, 221,
	0, 227, 222, 223, 209, 224, 226, 302, 225, 303,
	0, 228, 0, 229, 230, 231, 232, 233, 234, 235,
	0, 304, 305, 306, 0, 0, 236, 237, 307, 308,
	552, 238, 239, 240, 241, 0, 0, 242, 243, 244,
	245, 0, 246, 0, 309, 247, 248, 249, 310, 311,
	0, 0, 250, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 563, 560, 0, 561, 556, 551, 0, 0,
	0, 0, 0, 562, 557, 0, 0, 0, 103, 104,
	0, 105, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 106, 107, 108, 257, 258, 259, 260, 109, 261,
	262, 0, 110, 263, 264, 111, 112, 0, 0, 265,
	266, 267, 0, 113, 268, 0, 356, 0, 114, 115,
	116, 0, 117, 0, 118, 119, 120, 0, 357, 121,
	122, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	317, 125, 269, 126, 270, 271, 1076, 127, 0, 128,
	0, 129, 0, 0, 130, 131, 0, 132, 0, 0,
	0, 272, 133, 134, 135, 273, 274, 553, 0, 0,
	136, 137, 275, 276, 277, 0, 138, 0, 139, 0,
	0, 358, 0, 140, 278, 0, 279, 0, 141, 142,
	143, 144, 280, 281, 360, 0, 148, 0, 145, 0,
	359, 146, 282, 147, 283, 284, 285, 286, 287, 0,
	288, 0, 361, 149, 150, 151, 362, 152, 153, 154,
	0, 156, 155, 0, 289, 363, 157, 364, 0, 158,
	0, 0, 159, 0, 160, 161, 162, 164, 290, 163,
	365, 165, 166, 168, 167, 0, 0, 0, 291, 169,
	292, 170, 171, 0, 172, 554, 0, 173, 0, 0,
	174, 293, 366, 175, 367, 294, 176, 177, 178, 179,
	180, 0, 181, 295, 182, 296, 183, 0, 184, 185,
	186, 187, 188, 297, 189, 190, 0, 191, 192, 193,
	194, 195, 197, 198, 196, 199, 200, 201, 202, 0,
	203, 368, 204, 205, 298, 206, 0, 210, 211, 212,
	213, 0, 215, 299, 214, 216, 217, 0, 218, 207,
	208, 219, 369, 220, 300, 301, 221, 0, 227, 222,
	223, 209, 224, 226, 302, 225, 303, 0, 228, 0,
	229, 230, 231, 232, 233, 234, 235, 0, 304, 305,
	306, 0, 0, 236, 237, 307, 308, 552, 238, 239,
	240, 241, 0, 0, 242, 243, 244, 245, 0, 246,
	0, 309, 247, 248, 249, 310, 311, 0, 0, 250,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 563,
	560, 0, 561, 556, 551, 0, 0, 0, 0, 0,
	562, 557, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 356, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 357, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 763, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 553, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 358, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 360, 0, 148, 0, 145, 0, 359, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 361,
	149, 150, 151, 362, 152, 153, 154, 0, 156, 155,
	0, 289, 363, 157, 364, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 365, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 554, 0, 173, 0, 0, 174, 293, 366,
	175, 367, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 368, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 369,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 552, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 0, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 563, 560, 0, 561,
	556, 551, 0, 0, 0, 0, 0, 562, 557, 0,
	0, 0, 103, 104, 0, 105, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 106, 107, 108, 257, 258,
	259, 260, 109, 261, 262, 0, 110, 263, 264, 111,
	112, 0, 0, 265, 266, 267, 0, 113, 268, 0,
	356, 0, 114, 115, 116, 0, 117, 0, 118, 119,
	120, 0, 357, 121, 122, 0, 0, 0, 0, 0,
	0, 0, 123, 124, 317, 125, 269, 126, 270, 271,
	0, 127, 0, 128, 0, 129, 0, 0, 130, 131,
	0, 132, 0, 0, 0, 272, 133, 134, 135, 273,
	274, 553, 0, 0, 136, 137, 275, 276, 277, 0,
	138, 0, 139, 0, 0, 358, 0, 140, 278, 0,
	279, 0, 141, 142, 143, 144, 280, 281, 360, 0,
	148, 0, 145, 0, 359, 146, 282, 147, 283, 284,
	285, 286, 287, 0, 288, 0, 361, 149, 150, 151,
	362, 152, 153, 154, 0, 156, 155, 0, 289, 363,
	157, 364, 0, 158, 0, 0, 159, 0, 160, 161,
	162, 164, 290, 163, 365, 165, 166, 168, 167, 0,
	0, 0, 291, 169, 292, 170, 171, 0, 172, 554,
	0, 173, 0, 0, 174, 293, 366, 175, 367, 294,
	176, 177, 178, 179, 180, 0, 181, 295, 182, 296,
	183, 0, 184, 185, 186, 187, 188, 297, 189, 190,
	0, 191, 192, 193, 194, 195, 197, 198, 196, 199,
	200, 201, 202, 0, 203, 368, 204, 205, 298, 206,
	0, 210, 211, 212, 213, 0, 215, 299, 214, 216,
	217, 0, 218, 207, 208, 219, 369, 220, 300, 301,
	221, 0, 227, 222, 223, 209, 224, 226, 302, 225,
	303, 0, 228, 0, 229, 230, 231, 232, 233, 234,
	235, 0, 304, 305, 306, 0, 0, 236, 237, 307,
	308, 552, 238, 239, 240, 241, 0, 0, 242, 243,
	244, 245, 0, 246, 0, 309, 247, 248, 249, 310,
	311, 0, 100, 250, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 0, 0, 0, 0, 0, 103, 104,
	0, 105, 0, 0, 562, 557, 256, 0, 0, 0,
	0, 106, 107, 108, 257, 258, 259, 260, 109, 261,
	262, 0, 110, 263, 264, 111, 112, 0, 0, 265,
	266, 267, 0, 113, 268, 0, 0, 0, 114, 115,
	116, 0, 117, 0, 118, 119, 120, 0, 0, 121,
	122, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	317, 125, 269, 126, 270, 271, 0, 127, 0, 128,
	0, 129, 0, 0, 130, 131, 0, 132, 0, 0,
	0, 272, 133, 134, 135, 273, 274, 0, 0, 0,
	136, 137, 275, 276, 277, 0, 138, 0, 139, 0,
	0, 0, 0, 140, 278, 0, 279, 0, 141, 142,
	143, 144, 280, 281, 0, 0, 148, 0, 145, 0,
	0, 146, 282, 147, 283, 284, 285, 286, 287, 0,
	288, 0, 0, 149, 150, 151, 0, 152, 153, 154,
	0, 156, 155, 0, 289, 0, 157, 0, 0, 158,
	0, 0, 159, 0, 160, 161, 162, 164, 290, 163,
	0, 165, 166, 168, 167, 0, 0, 0, 291, 169,
	292, 170, 171, 0, 172, 0, 579, 173, 0, 0,
	174, 293, 0, 175, 0, 294, 176, 177, 178, 179,
	180, 0, 181, 295, 182, 296, 183, 0, 184, 185,
	186, 187, 188, 297, 189, 190, 0, 191, 192, 193,
	194, 195, 197, 198, 196, 199, 200, 201, 202, 0,
	203, 0, 204, 205, 298, 206, 0, 210, 211, 212,
	213, 84, 215, 299, 214, 216, 217, 0, 218, 207,
	208, 219, 0, 220, 300, 301, 221, 0, 227, 222,
	223, 209, 224, 226, 302, 225, 303, 0, 228, 86,
	229, 230, 231, 232, 233, 234, 235, 0, 304, 305,
	306, 0, 0, 236, 237, 307, 308, 0, 238, 239,
	240, 241, 0, 0, 242, 243, 244, 245, 0, 246,
	0, 309, 247, 248, 249, 728, 311, 0, 0, 250,
	0, 100, 0, 82, 251, 252, 253, 254, 255, 0,
	83, 0, 0, 0, 0, 0, 0, 103, 104, 0,
	105, 0, 0, 0, 0, 256, 0, 1436, 0, 1441,
	106, 107, 108, 257, 258, 259, 260, 109, 261, 262,
	0, 110, 263, 264, 111, 112, 0, 0, 265, 266,
	267, 0, 113, 268, 0, 0, 0, 114, 115, 116,
	0, 117, 0, 118, 119, 120, 0, 0, 121, 122,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 317,
	125, 269, 126, 270, 271, 0, 127, 0, 128, 0,
	129, 0, 0, 130, 131, 0, 132, 0, 0, 0,
	272, 133, 134, 135, 273, 274, 0, 0, 0, 136,
	137, 275, 276, 277, 0, 138, 0, 139, 0, 0,
	0, 0, 140, 278, 0, 279, 0, 141, 142, 143,
	144, 280, 281, 0, 0, 148, 0, 145, 0, 0,
	146, 282, 147, 283, 284, 285, 286, 287, 0, 288,
	0, 0, 149, 150, 151, 0, 152, 153, 154, 0,
	156, 155, 0, 289, 0, 157, 0, 0, 158, 0,
	0, 159, 0, 160, 161, 162, 164, 290, 163, 0,
	165, 166, 168, 167, 0, 0, 0, 291, 169, 292,
	170, 171, 0, 172, 0, 0, 173, 0, 0, 174,
	293, 0, 175, 0, 294, 176, 177, 178, 179, 180,
	0, 181, 295, 182, 296, 183, 0, 184, 185, 186,
	187, 188, 297, 189, 190, 0, 191, 192, 193, 194,
	195, 197, 198, 196, 199, 200, 201, 202, 0, 203,
	0, 204, 205, 298, 206, 0, 210, 211, 212, 213,
	84, 215, 299, 214, 216, 217, 0, 218, 207, 208,
	219, 0, 220, 300, 301, 221, 0, 227, 222, 223,
	209, 224, 226, 302, 225, 303, 0, 228, 86, 229,
	230, 231, 232, 233, 234, 235, 0, 304, 305, 306,
	0, 0, 236, 237, 307, 308, 0, 238, 239, 240,
	241, 0, 0, 242, 243, 244, 245, 0, 246, 0,
	309, 247, 248, 249, 728, 311, 0, 0, 250, 0,
	100, 0, 82, 251, 252, 253, 254, 255, 0, 83,
	0, 0, 0, 0, 0, 0, 103, 104, 0, 105,
	0, 0, 0, 0, 256, 0, 0, 0, 80, 106,
	107, 108, 257, 258, 259, 260, 109, 261, 262, 0,
	110, 263, 264, 111, 112, 0, 0, 265, 266, 267,
	0, 113, 268, 0, 0, 0, 114, 115, 116, 0,
	117, 0, 118, 119, 120, 0, 0, 121, 122, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 317, 125,
	269, 126, 270, 271, 0, 127, 0, 128, 0, 129,
	0, 0, 130, 131, 0, 132, 0, 0, 0, 272,
	133, 134, 135, 273, 274, 0, 0, 0, 136, 137,
	275, 276, 277, 0, 138, 0, 139, 0, 0, 0,
	0, 140, 278, 0, 279, 0, 141, 142, 143, 144,
	280, 281, 0, 0, 148, 0, 145, 0, 0, 146,
	282, 147, 283, 284, 285, 286, 287, 0, 288, 0,
	0, 149, 150, 151, 0, 152, 153, 154, 0, 156,
	155, 0, 289, 0, 157, 0, 0, 158, 0, 0,
	159, 0, 160, 161, 162, 164, 290, 163, 0, 165,
	166, 168, 167, 0, 0, 0, 291, 169, 292, 170,
	171, 0, 172, 0, 579, 173, 0, 0, 174, 293,
	0, 175, 0, 294, 176, 177, 178, 179, 180, 0,
	181, 295, 182, 296, 183, 0, 184, 185, 186, 187,
	188, 297, 189, 190, 0, 191, 192, 193, 194, 195,
	197, 198, 196, 199, 200, 201, 202, 0, 203, 0,
	204, 205, 298, 206, 0, 210, 211, 212, 213, 0,
	215, 299, 214, 216, 217, 0, 218, 207, 208, 219,
	0, 220, 300, 301, 221, 0, 227, 222, 223, 209,
	224, 226, 302, 225, 303, 0, 228, 0, 229, 230,
	231, 232, 233, 234, 235, 0, 304, 305, 306, 0,
	0, 236, 237, 307, 308, 0, 238, 239, 240, 241,
	0, 0, 242, 243, 244, 245, 0, 246, 0, 309,
	247, 248, 249, 310, 311, 0, 0, 250, 0, 100,
	0, 0, 251, 252, 253, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 1436, 0, 1441, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 0, 0, 250, 0, 0, 100,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 970, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 0, 0, 250, 0, 100, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 0, 105, 0, 0,
	0, 0, 256, 0, 0, 0, 1354, 106, 107, 108,
	257, 258, 259, 260, 109, 261, 262, 0, 110, 263,
	264, 111, 112, 0, 0, 265, 266, 267, 0, 113,
	268, 0, 0, 0, 114, 115, 116, 0, 117, 0,
	118, 119, 120, 0, 0, 121, 122, 0, 0, 0,
	0, 0, 0, 0, 123, 124, 317, 125, 269, 126,
	270, 271, 0, 127, 0, 128, 0, 129, 0, 0,
	130, 131, 0, 132, 0, 0, 0, 272, 133, 134,
	135, 273, 274, 0, 0, 0, 136, 137, 275, 276,
	277, 0, 138, 0, 139, 0, 0, 0, 0, 140,
	278, 0, 279, 0, 141, 142, 143, 144, 280, 281,
	0, 0, 148, 0, 145, 0, 0, 146, 282, 147,
	283, 284, 285, 286, 287, 0, 288, 0, 0, 149,
	150, 151, 0, 152, 153, 154, 0, 156, 155, 0,
	289, 0, 157, 0, 0, 158, 0, 0, 159, 0,
	160, 161, 162, 164, 290, 163, 0, 165, 166, 168,
	167, 0, 0, 0, 291, 169, 292, 170, 171, 0,
	172, 0, 0, 173, 0, 0, 174, 293, 0, 175,
	0, 294, 176, 177, 178, 179, 180, 0, 181, 295,
	182, 296, 183, 0, 184, 185, 186, 187, 188, 297,
	189, 190, 0, 191, 192, 193, 194, 195, 197, 198,
	196, 199, 200, 201, 202, 0, 203, 0, 204, 205,
	298, 206, 0, 210, 211, 212, 213, 0, 215, 299,
	214, 216, 217, 0, 218, 207, 208, 219, 0, 220,
	300, 301, 221, 0, 227, 222, 223, 209, 224, 226,
	302, 225, 303, 0, 228, 0, 229, 230, 231, 232,
	233, 234, 235, 0, 304, 305, 306, 0, 0, 236,
	237, 307, 308, 0, 238, 239, 240, 241, 0, 0,
	242, 243, 244, 245, 0, 246, 0, 309, 247, 248,
	249, 310, 311, 0, 0, 250, 0, 100, 0, 0,
	251, 252, 253, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 0, 105, 0, 0, 0,
	0, 256, 0, 0, 0, 1755, 106, 107, 108, 257,
	258, 259, 260, 109, 261, 262, 0, 110, 263, 264,
	111, 112, 0, 0, 265, 266, 267, 0, 113, 268,
	0, 0, 0, 114, 115, 116, 0, 117, 0, 118,
	119, 120, 0, 0, 121, 122, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 317, 125, 269, 126, 270,
	271, 0, 127, 0, 128, 0, 129, 0, 0, 130,
	131, 0, 132, 0, 0, 0, 272, 133, 134, 135,
	273, 274, 0, 0, 0, 136, 137, 275, 276, 277,
	0, 138, 0, 139, 0, 0, 0, 0, 140, 278,
	0, 279, 0, 141, 142, 143, 144, 280, 281, 0,
	0, 148, 0, 145, 0, 0, 146, 282, 147, 283,
	284, 285, 286, 287, 0, 288, 0, 0, 149, 150,
	151, 0, 152, 153, 154, 0, 156, 155, 0, 289,
	0, 157, 0, 0, 158, 0, 0, 159, 0, 160,
	161, 162, 164, 290, 163, 0, 165, 166, 168, 167,
	0, 0, 0, 291, 169, 292, 170, 171, 0, 172,
	0, 0, 173, 0, 0, 174, 293, 0, 175, 0,
	294, 176, 177, 178, 179, 180, 0, 181, 295, 182,
	296, 183, 0, 184, 185, 186, 187, 188, 297, 189,
	190, 0, 191, 192, 193, 194, 195, 197, 198, 196,
	199, 200, 201, 202, 0, 203, 0, 204, 205, 298,
	206, 0, 210, 211, 212, 213, 0, 215, 299, 214,
	216, 217, 0, 218, 207, 208, 219, 0, 220, 300,
	301, 221, 0, 227, 222, 223, 209, 224, 226, 302,
	225, 303, 0, 228, 0, 229, 230, 231, 232, 233,
	234, 235, 0, 304, 305, 306, 0, 0, 236, 237,
	307, 308, 0, 238, 239, 240, 241, 0, 0, 242,
	243, 244, 245, 0, 246, 0, 309, 247, 248, 249,
	310, 311, 0, 0, 250, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 638, 627, 628, 625, 626, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 0, 105, 839, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 670, 259, 671,
	109, 672, 673, 0, 110, 263, 264, 111, 112, 0,
	0, 674, 675, 267, 0, 113, 268, 0, 356, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	357, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 676, 126, 677, 678, 0, 127,
	0, 128, 0, 129, 0, 0, 669, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 634,
	0, 0, 136, 137, 679, 680, 681, 0, 138, 0,
	139, 0, 0, 358, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 360, 0, 148, 0,
	145, 0, 359, 146, 682, 147, 683, 684, 685, 686,
	687, 0, 645, 0, 361, 149, 150, 151, 362, 152,
	153, 154, 0, 156, 155, 0, 289, 363, 157, 364,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 365, 165, 166, 168, 167, 0, 0, 635,
	291, 169, 688, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 366, 175, 367, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 689, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 368, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 369, 220, 690, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 691, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 692, 693, 0, 0, 236, 237, 307, 308, 633,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 694, 563,
	560, 250, 0, 0, 769, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 356, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 357, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 358, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 360, 0, 148, 0, 145, 0, 359, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 361,
	149, 150, 151, 362, 152, 153, 154, 0, 156, 155,
	0, 289, 363, 157, 364, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 365, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 366,
	175, 367, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 368, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 369,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 96, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 95, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 563,
	560, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 99, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 356, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 357, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 358, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 360, 0, 148, 0, 145, 0, 359, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 361,
	149, 150, 151, 362, 152, 153, 154, 0, 156, 155,
	0, 289, 363, 157, 364, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 365, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 366,
	175, 367, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 368, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 369,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 563,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 99, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 356, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 357, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 358, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 360, 0, 148, 0, 145, 0, 359, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 361,
	149, 150, 151, 362, 152, 153, 154, 0, 156, 155,
	0, 289, 363, 157, 364, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 365, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 366,
	175, 367, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 368, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 369,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 1163, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 1161, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	1406, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 1166, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 1404,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 1165,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 1405, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 1163,
	113, 268, 0, 0, 1158, 114, 115, 116, 0, 117,
	1161, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 1166, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 1157,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 1165, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	1164, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	1865, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 579, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 1085, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 996,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 579, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 736, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 591,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 579, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 584, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 579, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 456, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 455, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 1465,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 1463, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 1452,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 1116, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 472, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	980, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	0, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 807,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 802, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 747, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 485, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 481, 305, 306, 0, 0,
	236, 748, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 724, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 722,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 719, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 716,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 714, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	113, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 587,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 158, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 163, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 298, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 216, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 304, 305, 306, 0, 0,
	236, 237, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	178, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 187, 188, 297, 568, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 206, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 100,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 0, 0, 0, 0, 103, 104, 0, 105, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 106, 107,
	108, 257, 258, 259, 260, 109, 261, 262, 0, 110,
	263, 264, 111, 112, 0, 0, 265, 266, 267, 0,
	475, 268, 0, 0, 0, 114, 115, 116, 0, 117,
	0, 118, 119, 120, 0, 0, 121, 122, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 317, 125, 269,
	126, 270, 271, 0, 127, 0, 128, 0, 129, 0,
	0, 130, 131, 0, 132, 0, 0, 0, 272, 133,
	134, 135, 273, 274, 0, 0, 0, 136, 137, 275,
	276, 277, 0, 138, 0, 139, 0, 0, 0, 0,
	140, 278, 0, 279, 0, 141, 142, 143, 144, 280,
	281, 0, 0, 148, 0, 145, 0, 0, 146, 282,
	147, 283, 284, 285, 286, 287, 0, 288, 0, 0,
	149, 150, 151, 0, 152, 153, 154, 0, 156, 155,
	0, 289, 0, 157, 0, 0, 474, 0, 0, 159,
	0, 160, 161, 162, 164, 290, 485, 0, 165, 166,
	168, 167, 0, 0, 0, 291, 169, 292, 170, 171,
	0, 172, 0, 0, 173, 0, 0, 174, 293, 0,
	175, 0, 294, 176, 177, 178, 179, 180, 0, 181,
	295, 182, 296, 183, 0, 184, 185, 186, 187, 188,
	297, 189, 190, 0, 191, 192, 193, 194, 195, 197,
	198, 196, 199, 200, 201, 202, 0, 203, 0, 204,
	205, 476, 206, 0, 210, 211, 212, 213, 0, 215,
	299, 214, 477, 217, 0, 218, 207, 208, 219, 0,
	220, 300, 301, 221, 0, 227, 222, 223, 209, 224,
	226, 302, 225, 303, 0, 228, 0, 229, 230, 231,
	232, 233, 234, 235, 0, 481, 305, 306, 0, 0,
	236, 479, 307, 308, 0, 238, 239, 240, 241, 0,
	0, 242, 243, 244, 245, 0, 246, 0, 309, 247,
	248, 249, 310, 311, 100, 0, 250, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 0, 0, 0, 0,
	103, 104, 0, 105, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 106, 107, 108, 257, 258, 259, 260,
	109, 261, 262, 0, 110, 263, 264, 111, 112, 0,
	0, 265, 266, 267, 0, 113, 268, 0, 0, 0,
	114, 115, 116, 0, 117, 0, 118, 119, 120, 0,
	0, 121, 122, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 317, 125, 269, 126, 270, 271, 0, 127,
	0, 128, 0, 129, 0, 0, 130, 131, 0, 132,
	0, 0, 0, 272, 133, 134, 135, 273, 274, 0,
	0, 0, 136, 137, 275, 276, 277, 0, 138, 0,
	139, 0, 0, 0, 0, 140, 278, 0, 279, 0,
	141, 142, 143, 144, 280, 281, 0, 0, 148, 0,
	145, 0, 0, 146, 282, 147, 283, 284, 285, 286,
	287, 0, 288, 0, 0, 149, 150, 151, 0, 152,
	153, 154, 0, 156, 155, 0, 289, 0, 157, 0,
	0, 158, 0, 0, 159, 0, 160, 161, 162, 164,
	290, 163, 0, 165, 166, 168, 167, 0, 0, 0,
	291, 169, 292, 170, 171, 0, 172, 0, 0, 173,
	0, 0, 174, 293, 0, 175, 0, 294, 176, 177,
	0, 179, 180, 0, 181, 295, 182, 296, 183, 0,
	184, 185, 186, 0, 188, 297, 189, 190, 0, 191,
	192, 193, 194, 195, 197, 198, 196, 199, 200, 201,
	202, 0, 203, 0, 204, 205, 298, 0, 0, 210,
	211, 212, 213, 0, 215, 299, 214, 216, 217, 0,
	218, 207, 208, 219, 0, 220, 300, 301, 221, 0,
	227, 222, 223, 209, 224, 226, 302, 225, 303, 0,
	228, 0, 229, 230, 231, 232, 233, 234, 235, 0,
	304, 305, 306, 0, 0, 236, 237, 307, 308, 0,
	238, 239, 240, 241, 0, 0, 242, 243, 244, 245,
	0, 246, 0, 309, 247, 248, 249, 310, 311, 0,
	0, 250, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 905, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 873, 0,
	0, 0, 874, 0, 888, 905, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 0, 873, 0, 0, 0,
	874, 0, 888, 905, 0, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 873, 0, 0, 0, 879, 874,
	888, 0, 905, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 898, 906, 0,
	894, 0, 0, 873, 0, 0, 879, 874, 0, 888,
	905, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 0, 0,
	896, 873, 0, 0, 879, 0, 889, 888, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 906, 0, 0, 0, 896, 0,
	0, 895, 0, 879, 889, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 906, 0, 0, 896, 0, 0, 895,
	0, 879, 889, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	898, 906, 0, 0, 0, 896, 0, 895, 0, 0,
	0, 889, 0, 0, 0, 899, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 896, 0, 0, 895, 0, 0, 889,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 890, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	899, 0, 0, 0, 0, 0, 1586, 0, 0, 0,
	897, 0, 890, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 899, 0,
	0, 0, 0, 0, 1538, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 0, 0, 0, 2142,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 0, 0, 0, 2117, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 0, 871, 872, 2051, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	905, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 873, 0, 0, 0, 874, 0, 888, 905, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 873,
	0, 0, 0, 874, 0, 888, 905, 0, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 873, 0, 0,
	0, 879, 874, 888, 0, 905, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	898, 906, 0, 894, 0, 0, 873, 0, 0, 879,
	874, 0, 888, 905, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 0, 896, 873, 0, 0, 879, 0, 889,
	888, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 906, 0, 0,
	0, 896, 0, 0, 895, 0, 879, 889, 0, 0,
	0, 0, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 0, 896,
	0, 0, 895, 0, 879, 889, 0, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 898, 906, 0, 0, 0, 896, 0,
	895, 0, 0, 0, 889, 0, 0, 0, 899, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 896, 0, 0, 895,
	0, 0, 889, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 895, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 890, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 899, 0, 0, 2046, 0, 0, 0,
	0, 0, 0, 897, 0, 890, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	0, 899, 0, 0, 2042, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 885, 886, 887, 900, 0, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 0,
	0, 0, 2019, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	0, 1949, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 0, 871, 872, 1948,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 905, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 873, 0, 0, 0, 874, 0,
	888, 905, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 873, 0, 0, 0, 874, 0, 888, 905,
	0, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	873, 0, 0, 0, 879, 874, 888, 0, 905, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 898, 906, 0, 894, 0, 0, 873,
	0, 0, 879, 874, 0, 888, 905, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 896, 873, 0, 0,
	879, 0, 889, 888, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 896, 0, 0, 895, 0, 879,
	889, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 896, 0, 0, 895, 0, 879, 889, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 898, 906, 0, 0,
	0, 896, 0, 895, 0, 0, 0, 889, 0, 0,
	0, 899, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 896,
	0, 0, 895, 0, 0, 889, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	890, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 899, 0, 0, 1887,
	0, 0, 0, 0, 0, 0, 897, 0, 890, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 899, 0, 0, 1838, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 1758, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	0, 0, 1546, 1547, 1734, 1564, 1565, 1566, 0, 0,
	0, 897, 0, 0, 885, 886, 887, 900, 1727, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 0,
	871, 872, 1260, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 874, 0, 1561, 905, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 873, 0, 0,
	0, 874, 0, 888, 905, 0, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 873, 0, 0, 0, 1552,
	874, 888, 0, 905, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 873, 0, 1426, 879, 874, 0,
	888, 905, 0, 0, 0, 0, 1567, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 906, 0, 0,
	0, 0, 873, 0, 0, 879, 2219, 1562, 888, 0,
	0, 0, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 906, 0, 0, 0, 896,
	0, 0, 0, 0, 879, 889, 1578, 1427, 0, 1577,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 906, 0, 0, 896, 0, 0,
	895, 0, 879, 889, 0, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	1563, 898, 906, 0, 0, 0, 896, 0, 895, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 2218, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 896, 0, 0, 895, 0, 0,
	889, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 1558, 1559, 1560, 0,
	0, 1557, 1555, 1556, 1548, 1549, 1550, 1551, 1553, 1554,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 890, 885, 886, 887, 900, 0, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 899,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 1146, 0, 0, 0, 0, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 1145,
	0, 0, 874, 0, 0, 905, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 0, 873, 0, 0, 0,
	874, 0, 888, 905, 0, 0, 0, 0, 0, 0,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 873, 0, 0, 894, 0, 0,
	888, 0, 0, 0, 874, 0, 0, 905, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 894, 879, 0, 873, 0,
	0, 0, 874, 0, 888, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 873, 0, 0, 0,
	0, 0, 888, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 906, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 879, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 898, 906, 895,
	0, 0, 889, 0, 0, 0, 879, 0, 0, 0,
	0, 1584, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 895, 544, 0,
	896, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 895, 0, 899, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 895,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 890, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	1738, 0, 0, 899, 0, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 0, 0, 1579, 0, 0,
	874, 0, 0, 905, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 873, 0, 0, 0, 874, 0,
	888, 905, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 873, 1537, 0, 0, 874, 0, 888, 905,
	0, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	873, 0, 0, 0, 879, 874, 888, 0, 905, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 898, 906, 0, 894, 0, 0, 873,
	0, 0, 879, 874, 0, 888, 905, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 896, 873, 0, 0,
	879, 0, 889, 888, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 896, 0, 0, 895, 0, 879,
	889, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 896, 0, 0, 895, 0, 879, 889, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 1544, 0,
	0, 0, 0, 0, 0, 890, 898, 906, 0, 0,
	0, 896, 0, 895, 0, 0, 0, 889, 0, 0,
	0, 899, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 896,
	0, 0, 895, 0, 0, 889, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 1546, 1547, 0, 1564, 1565, 1566,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	1726, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	890, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 1561, 890, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1552, 0, 897, 0, 0, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	1546, 1547, 0, 1564, 1565, 1566, 0, 0, 0, 0,
	0, 897, 0, 0, 885, 886, 887, 900, 1567, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 1562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 1561, 905, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 874,
	0, 888, 905, 1546, 1547, 0, 1564, 1565, 1566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 1552, 0, 888,
	0, 0, 1563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1568, 0, 0,
	0, 0, 0, 0, 0, 879, 1561, 0, 0, 0,
	0, 0, 0, 0, 1567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 906, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 1562, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 906, 0, 0, 0, 896, 0, 0,
	1552, 0, 0, 889, 0, 0, 0, 0, 1558, 1559,
	1560, 0, 0, 1557, 1555, 1556, 1548, 1549, 1550, 1551,
	1553, 1554, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 1567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1563, 0, 0, 1558, 1559, 1560, 0, 0, 1557,
	1555, 1556, 1548, 1549, 1550, 1551, 1553, 1554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 0, 1025, 1015, 1044, 1007,
	1035, 1034, 0, 0, 1009, 1008, 0, 1558, 1559, 1560,
	1046, 1045, 1557, 1555, 1556, 1548, 1549, 1550, 1551, 1553,
	1554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1040, 0, 1032, 1031, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 1027, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1025, 1015, 1044, 1007,
	1035, 1034, 0, 0, 1009, 1008, 0, 0, 0, 0,
	1046, 1045, 0, 1018, 1017, 1019, 1020, 1021, 1022, 1023,
	0, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1040, 0, 1032, 1031, 0, 0, 1011,
	0, 0, 0, 0, 0, 1030, 0, 0, 0, 0,
	0, 1033, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 1029, 1027, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1026, 0, 0, 0, 1195, 1193,
	1194, 1197, 1196, 1018, 1017, 1019, 1020, 1021, 1022, 1023,
	0, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1012, 0, 0, 0, 0, 0,
	0, 0, 487, 0, 0, 1024, 1013, 0, 0, 1011,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	491, 1033, 0, 0, 0, 1016, 0, 1010, 0, 0,
	1041, 1042, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 493, 1026, 0, 0, 1047, 494, 0,
	0, 0, 0, 499, 500, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	490, 495, 0, 0, 1012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1024, 1013, 0, 0, 0,
	0, 0, 0, 514, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	1041, 1042, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 0, 1014, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 504, 0, 0, 501, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 507, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	508, 0, 0, 0, 513, 0, 0, 0, 509, 0,
	0, 0, 0, 505, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 512,
}
var sqlPact = [...]int{

	152, -1000, 8, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 737, 17960, 17960, 970, 22370,
	-1000, -1000, -1000, -1000, -1000, -1000, 719, 1039, 760, 810,
	5344, 22370, 22370, 22055, 1389, 1180, 1173, 1389, 23945, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 27725, 31628, 536, 542,
	536, 536, 533, 23945, 1130, 673, 739, 153, -1000, 782,
	-39, 14772, 27410, 22370, 1526, 5, 20165, 259, 152, 21740,
	27095, 22370, 21425, 636, -18, 18590, 22370, -1000, 14, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1298, 11467, 11467, 406, 14, -1000, 1297, 1200,
	1196, 20165, -1000, -1000, -1000, -1000, -1000, 26780, 26465, 26150,
	25835, 25520, -1000, 13462, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 809,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 299, 296, -1000, 21110, -1000, 1022, -1000, 3,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11467, 11467,
	1017, -1000, 22370, -1000, 1800, 777, 295, 25205, -1000, 1023,
	-1000, 433, 429, -1000, -1000, 14445, 19, -1000, -1000, -1000,
	-1000, 1584, 17645, 787, 1296, -1000, 1011, 1294, 1290, 1288,
	1282, 1281, -1000, 821, -1000, 1317, 546, -1000, 1280, 428,
	823, 514, -1000, 1278, 1277, 1023, -1000, 1023, -1000, -1000,
	-1000, 629, 23945, -1000, -1000, -1000, -1000, -1000, 20165, -1000,
	24890, 22370, 22370, 1187, 24575, -1000, 782, -1000, -1000, -1000,
	1104, 1513, 1513, 1513, 1627, 164, 160, 153, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1776, -1000, -1000,
	-1000, -1000, 1783, -1000, -1000, -1000, -1000, -20, 22370, -1000,
	293, -20, 9766, 9766, -1000, -1000, 259, -1000, 354, 17003,
	-1000, 8066, -1000, 850, 1408, 486, 790, 1406, -140, 880,
	865, 1400, 17645, 18590, -18, -42, -1000, -1000, -1000, 5017,
	17645, 30662, -1000, 11467, 11467, 11467, 11467, 11467, 954, 348,
	-1000, 292, 288, 6352, -1000, -1000, 1782, -1000, -1000, -1000,
	166, -1000, -1000, 11467, 14, -1000, -1000, -1000, -1000, 287,
	1794, -1000, 508, -1000, -1000, -1000, 438, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1314, 285, 284, 282,
	-1000, -1000, -1000, -1000, 281, 280, 279, 276, 275, 273,
	272, 269, 268, 267, 266, 265, 264, 263, 261, 920,
	-1000, 472, -1000, -1000, 472, 472, -1000, 251, 251, 252,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 251, -1000,
	-1000, -1000, 405, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	260, 30662, 722, 16045, 14, -1000, -1000, -1000, 20165, 22370,
	22370, 791, 24260, -1000, 1378, 130, 1374, -1000, 126, 1373,
	-1000, 126, 1371, -42, 1363, 47, -1000, -1000, 259, 20795,
	22370, 1691, 31459, -1000, 11467, -1000, -1000, 17960, 928, 30662,
	30662, 17960, -1000, -1000, 22370, 11467, -1000, 1687, 1023, -30,
	-1000, -1000, -1000, -1000, 1149, 1144, 569, 687, 14118, 13791,
	1475, -1000, -1000, -1000, 15, 5344, 759, -1000, -1000, -1000,
	20480, -1000, -1000, 22370, 1311, 17960, 22370, 22370, 22370, 22370,
	22370, -1000, -1000, 257, 1307, 22370, -1000, 1134, -1000, -1000,
	22370, 22370, 807, 668, -1000, -30, -1000, 23945, -1000, 134,
	-1000, 258, 1105, 415, 95, 23630, 415, 1103, -1000, 1104,
	-1000, 1009, 1209, 10447, 1178, 11467, 153, -1000, -1000, 153,
	153, 7373, -1000, -1000, -1000, -1000, -1000, 22370, -20, 1681,
	22370, 85, -1000, 30149, -1000, 85, -1000, -1000, -1000, 22370,
	45, -1000, 30662, -1000, -72, 792, -1000, 19535, 1564, 1492,
	1508, 20165, 1648, -39, 1276, 1644, -39, 1275, 626, 22370,
	5344, 620, 619, 20165, 395, -1000, 22370, -1000, -1000, -80,
	-1000, 31369, 31459, 5344, 653, 11467, 11467, 11467, 11467, 11467,
	11467, 11467, 11467, 11467, 11467, 11467, 11467, 11467, 11467, 11467,
	11467, 11467, 11467, 11467, 11467, 11467, 11467, 1171, 11467, 618,
	11467, 11467, 11467, 11467, 1007, 932, 237, 976, -1000, 1771,
	1771, 1771, 31028, 31028, 234, 348, -1000, 11467, -1000, 10107,
	160, 29380, -28, -1000, -1000, -1000, 7713, 468, 30662, 14,
	6011, -1000, 1781, 704, 1325, 1254, 254, 159, 155, 154,
	11467, 11467, 11807, 11807, 11467, 12147, 11467, 11467, 6692, 11467,
	11467, 11467, 11467, 11467, 11467, -1000, 253, -1000, -1000, -1000,
	-1000, 1780, -1000, -1000, 1779, -1000, 652, 649, 1778, -1000,
	1273, 43, -1000, -1000, 447, 100, 1677, 100, 16365, -1000,
	22370, 22370, -1000, 22370, -1000, -1000, 22370, -1000, 22370, 22370,
	-1000, 22370, 22370, 274, 18905, 894, 1353, 752, -39, 31,
	-1000, 1694, -1000, -1000, -1000, -1000, 94, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 252,
	920, 251, 251, 251, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 405, -1000, -1000, 472, 472, 472, -1000, -1000, 27,
	30662, 615, -1000, 1272, -1000, 410, 22, 522, -30, 1023,
	1020, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1793, -34, -1000, -1000, -34, -1000,
	-1000, 5344, -1000, -1000, -1000, -1000, -1000, -1000, 22370, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 245, -1000, -1000,
	-1000, -1000, 22370, 22370, 22370, -1000, -1000, 20165, 19220, 1673,
	1350, 930, -1000, 1671, 22370, 1004, 1100, -1000, 661, 1349,
	-1000, -1000, -1000, -1000, 30662, -1000, 384, -1000, -1000, 30662,
	818, 1203, -1000, 1203, -35, -1000, 29805, 1166, 22370, -1000,
	247, 4, 447, 9766, 15726, 5344, -1000, 447, 149, 8066,
	-1000, 894, 22370, 22370, 22370, -1000, -1000, 1098, 23315, 1094,
	31459, 22370, -1000, 246, 244, 1164, 1162, 22370, 22370, 23000,
	22685, 22370, 833, -39, -1000, 241, -39, -1000, 239, 22370,
	861, -1000, 22370, 22370, 844, 1237, 1046, -1000, 443, 17645,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	414, 690, 690, 751, 751, 751, 751, 1759, 2360, 2878,
	374, 3809, 3809, 3809, 2539, 200, 200, 3809, 3809, 3809,
	31028, 30690, 2339, 11467, 11467, 608, 926, 237, 2339, 11467,
	2339, 2339, 2339, 2339, -1000, 1361, -1000, -1000, -1000, -1000,
	1271, 236, 12147, 12147, -1000, -1000, -1000, 6352, 12487, -1000,
	-1000, -1000, -1000, 235, 11467, -1000, 29720, -190, 0, -1000,
	-1000, 11467, -96, -126, -1000, -1000, 685, -1000, 11467, -1000,
	-5, 11467, 11467, 11467, 148, 147, -1000, 607, -1000, 595,
	593, 592, -1000, 230, 952, 228, 225, 11467, -1000, -1000,
	-1000, 30633, 28389, 145, 1270, -183, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 144, 143, 30605, -183, 142, 31000, -1000,
	12147, 12147, 12147, 6352, 224, 140, 29777, -183, 30577, 9426,
	9426, 9426, 135, 30239, 11467, -183, 28361, 3943, 3838, -7,
	-8, -19, 1772, -36, 124, 413, 409, 119, 706, 1266,
	22370, 815, 11467, 897, -1000, 15407, 479, 22370, 815, 55,
	-1000, -1000, -1000, 389, 22370, -1000, -1000, -1000, 130, -1000,
	126, 126, -42, -1000, -1000, 20165, -1000, -1000, 31459, 347,
	340, -1000, 1767, -1000, 11467, 22370, 22370, -1000, 1190, -1000,
	-1000, 765, -1000, 901, -1000, 14772, -1000, -90, -1000, -1000,
	-1000, -1000, -1000, 395, -1000, 116, -37, -70, 31459, -1000,
	-1000, -1000, -1000, -1000, 22370, 298, 22370, -39, 22370, -1000,
	1792, -39, 22370, 1348, 1415, 376, 22370, 818, -1000, 11467,
	1764, -1000, -1000, -1000, 7373, -1000, -1000, -1000, 22370, -167,
	-39, -1000, 1248, -1000, -132, 1189, 158, -172, 128, 402,
	-1000, 15088, -1000, 1248, -1000, -1000, -1000, -1000, 587, 584,
	1346, -1000, 1093, -1000, 483, -1000, 757, 11467, 13143, 222,
	220, 935, -1000, 1344, 1028, 1341, 1028, -1000, -72, 788,
	-1000, 11467, -1000, 11467, -1000, 582, -1000, -1000, 579, 443,
	1265, 675, -1000, 988, -1000, 11467, 2339, 2339, 11467, 12147,
	12147, -1000, 2339, -1000, -1000, -1000, -1000, -1000, 1263, 217,
	11467, 31459, 30874, 29692, -44, -1000, 9086, -76, -1000, 11467,
	-1000, 29352, -1000, -1000, 339, 1364, -1000, 11467, 30211, 115,
	8746, -1000, 30177, -16, -16, -1000, 1791, 1118, 951, 898,
	802, 1760, -1000, 16684, 449, 972, 29323, 31369, 31459, -1000,
	11467, -1000, -1000, 1262, 11467, -1000, 31369, 31459, 12147, 12147,
	12147, 12147, 12147, 12147, 12147, 12147, 12147, 12147, 12147, 12147,
	12147, 12147, 12147, 12147, 12147, 12147, 12147, 1140, 12147, 1766,
	1766, 1766, -82, 8406, -1000, 1302, 1262, 11467, 11467, 31459,
	112, 108, 105, -1000, 11467, -183, 11467, 11467, 11467, -1000,
	-1000, -1000, 103, -1000, 1757, -1000, -1000, -1000, -1000, -1000,
	694, -1000, -1000, 7032, 30662, -1000, 815, 1512, -45, -1000,
	-1000, -1000, 447, 16365, 15726, 8066, -46, -1000, -1000, -1000,
	894, -1000, 560, 1752, 102, 30662, -90, -90, -1000, -1000,
	-1000, -1000, -1000, 22370, -1000, 1220, -1000, 19220, 215, 22370,
	214, -1000, 213, -1000, -1000, 209, 22370, 1146, 376, 18275,
	-1000, 415, 990, 29295, -1000, 1538, 5344, 101, 1243, 1612,
	-1000, 15726, 1186, 1185, 15726, 1147, 960, 960, 960, -1000,
	208, 332, 402, 4349, 11467, 19850, 964, 61, 98, 1189,
	1243, 22370, 22370, 22370, 1340, -1000, 1075, -1000, 29267, -50,
	-1000, 309, 1568, 11467, -1000, -1000, 207, 13143, 22370, -1000,
	1181, 1191, 515, 22370, -1000, 22370, -1000, 22370, 22370, 22370,
	-51, -52, 22370, 22370, -1000, 17645, 642, 206, 1762, 2339,
	3878, 2289, 11467, 31459, 31056, -56, 11467, 11467, -1000, -57,
	-1000, 11467, 328, 30662, -1000, -1000, -1000, 30662, 11467, 1786,
	11467, 97, 96, 92, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 91, -1000, -1000, 28040, 11467, 89, -1000, 86,
	84, 30662, 1302, 30662, -1000, -1000, 455, 455, 676, 676,
	676, 676, 1766, 1221, 1404, 883, 313, 313, 313, 330,
	408, 408, 313, 313, 313, 1261, 1142, 205, 31083, 11467,
	-61, -1000, -1000, -1000, 30662, 30662, 76, -1000, -1000, -1000,
	-183, 3593, 28927, 28899, -1000, 74, -1000, -94, -1000, -1000,
	232, -39, 815, -1000, -109, -1000, 388, -1000, 318, 317,
	-1000, -1000, -1000, 1228, -1000, 13143, 203, 22370, 19220, 1665,
	13143, 1001, 1152, 376, 18275, -1000, 661, -1000, -1000, -1000,
	1538, -1000, 445, 11467, 11467, 1189, 15726, 15726, 1119, 1170,
	15726, -1000, -1000, -1000, -1000, 314, 396, 402, 19850, -1000,
	1748, 1175, -63, -1000, -1000, 22370, 202, -1000, 402, 445,
	-1000, -1000, -1000, 22370, -1000, 22370, -1000, 5344, 22370, 1257,
	1061, -1000, -1000, 1160, 201, 12147, 22370, -1000, 902, 13143,
	1538, 14, 5344, 1538, 28870, 6011, -65, -71, 1057, -1000,
	1051, 11467, -1000, 31459, 1028, 1028, -1000, 576, 557, 556,
	553, -1000, -1000, -125, 17330, 1789, 11467, 11467, 31056, -78,
	-1000, 2339, 2339, -1000, 28842, -1000, 30662, -1000, 30177, -1000,
	-1000, -1000, -1000, 939, -1000, 28814, -1000, -1000, -1000, -1000,
	12147, 1260, 197, 31459, 28474, -1000, -1000, 11467, -1000, -1000,
	-1000, 1420, 22370, 1493, -1000, -1000, 190, -1000, -1000, 943,
	-85, 13143, -86, 70, -39, -92, 22370, -1000, 376, 18275,
	-1000, 1415, -1000, -1000, 22370, 30662, -183, -1000, 1119, -1000,
	188, 11467, 15726, -1000, -172, -1000, -104, -1000, 19850, -1000,
	311, -191, -1000, 372, -1000, 402, 185, 22370, 19850, -1000,
	-1000, 1145, -1000, -1000, 22370, 1086, -1000, -1000, 11467, 31083,
	183, 1220, 179, -1000, -1000, -1000, -1000, -1000, -1000, 1568,
	-5, -1000, 905, -1000, -1000, 30662, 1529, -1000, -1000, 22370,
	22370, 173, 171, -1000, 170, 14, -105, -1000, 363, 2339,
	2339, -1000, -1000, 68, 972, 1597, -1000, 670, 12147, 31459,
	-112, -1000, 28446, 637, -116, 22370, -1000, -1000, 5671, 22370,
	902, -117, -1000, 1220, -1000, 902, 168, 18275, -1000, 1146,
	-133, -1000, 1663, -1000, 22370, 30662, -1000, 402, -1000, 1745,
	-1000, -1000, 1175, -1000, 4687, 19850, 22370, -118, -1000, -1000,
	-1000, 1338, 28417, 1124, 22370, -1000, 22370, 1538, 64, 22370,
	497, 5344, -1000, -1000, 11467, 11467, 11467, 1789, -1000, -1000,
	1788, -1000, 889, 11467, 670, -124, -1000, -1000, 786, -1000,
	447, -1000, 167, 1220, 902, -1000, 1220, 13143, -1000, 1152,
	22370, 131, -137, 19850, -1000, -1000, -1000, 1734, -1000, -143,
	-1000, 1329, -1000, 994, 878, 62, -147, -1000, -1000, 95,
	-1000, 11467, -1000, -161, -162, -16, -1000, -1000, 57, 11127,
	11127, -183, -1000, 16365, -1000, 22370, -1000, 1220, -1000, -179,
	-1000, -1000, -1000, -1000, -1000, 301, -1000, 22370, -1000, 1000,
	996, 724, -1000, -1000, -1000, -1000, -1000, 1124, 30662, -1000,
	-1000, 56, -1000, -1000, -1000, 12816, 1049, 826, 29748, -1000,
	-153, -184, -1000, 902, -1000, -1000, -1000, 1428, -1000, 505,
	1018, 1018, 994, 1786, 1705, -1000, -1000, -1000, -1000, -1000,
	-1000, 1021, 1220, -1000, 1715, -1000, -1000, 1168, -1000, -1000,
	10787, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2047, 2045, 1637, 1760, 2044, 2040, 2039, 1757, 2036,
	2033, 2032, 2029, 2028, 2025, 1753, 2024, 1691, 1679, 1653,
	2023, 94, 112, 1631, 2022, 2021, 1583, 2020, 2019, 2015,
	2013, 2011, 2008, 77, 2006, 2003, 1997, 1995, 1994, 1991,
	150, 163, 1990, 1581, 1577, 1574, 1570, 1987, 1986, 1560,
	1984, 1982, 24, 1981, 79, 1979, 23, 154, 2353, 142,
	1978, 1974, 1973, 22, 116, 68, 1969, 66, 1968, 1966,
	55, 35, 29, 19, 1965, 99, 1963, 1962, 1408, 33,
	1958, 1957, 143, 1956, 14, 26, 113, 155, 152, 134,
	126, 1955, 1951, 1950, 1949, 43, 1948, 2, 1946, 1945,
	15, 76, 13, 1944, 31, 6, 1938, 1936, 136, 1934,
	75, 117, 1528, 132, 127, 563, 1933, 71, 10, 73,
	1930, 1927, 157, 36, 1926, 44, 100, 141, 1923, 57,
	162, 65, 30, 58, 130, 1922, 1920, 1919, 102, 1917,
	123, 80, 1915, 1912, 86, 1910, 137, 140, 1909, 1905,
	106, 1902, 133, 1901, 1900, 161, 149, 122, 8, 61,
	56, 4, 1552, 1522, 131, 70, 27, 18, 1899, 1841,
	1363, 39, 32, 110, 69, 46, 111, 62, 101, 148,
	41, 1898, 1897, 135, 1896, 1894, 1891, 1885, 1884, 107,
	1875, 1873, 72, 147, 17, 21, 45, 95, 42, 60,
	85, 105, 159, 119, 1871, 118, 128, 1869, 88, 1868,
	1867, 1655, 124, 1861, 1858, 1856, 1648, 1633, 1585, 928,
	1855, 1854, 1488, 1434, 1853, 1852, 81, 1850, 129, 121,
	1844, 144, 146, 28, 1843, 125, 47, 98, 1839, 114,
	50, 0, 1744, 1618, 1838, 138, 89, 1833, 1832, 1831,
	1830, 25, 3, 11, 7, 9, 5, 64, 34, 1825,
	1824, 139, 108, 63, 1823, 160, 1822, 1820, 1817, 48,
	1815, 16, 1814, 20, 1813, 1812, 12, 1, 1810, 1808,
	145, 1807, 120, 1806, 1587, 1805, 151, 1804, 1803, 1572,
	49, 115,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 65, 65,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 62, 62, 67, 67, 67,
	69, 69, 66, 66, 61, 61, 5, 5, 239, 239,
	240, 240, 51, 51, 55, 55, 52, 53, 53, 54,
	54, 7, 7, 7, 6, 6, 8, 8, 8, 8,
	8, 8, 15, 16, 16, 16, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 114, 114,
	113, 113, 116, 116, 18, 18, 21, 21, 21, 21,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 207, 207, 206, 20, 181, 181, 23, 139, 139,
	24, 24, 24, 24, 25, 32, 280, 280, 280, 284,
	284, 285, 285, 286, 286, 286, 286, 286, 286, 286,
	282, 282, 30, 30, 30, 30, 50, 35, 35, 35,
	35, 35, 35, 37, 39, 36, 36, 36, 38, 38,
	40, 40, 40, 40, 41, 41, 41, 41, 42, 42,
	94, 94, 232, 231, 231, 237, 237, 237, 92, 92,
	92, 92, 92, 93, 93, 93, 230, 230, 230, 230,
	238, 238, 238, 238, 238, 238, 236, 236, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 19, 281,
	281, 283, 283, 27, 44, 44, 45, 45, 46, 46,
	46, 46, 11, 11, 12, 12, 95, 95, 96, 96,
	160, 160, 160, 160, 97, 97, 68, 68, 68, 159,
	249, 249, 250, 250, 250, 250, 250, 250, 251, 251,
	251, 251, 251, 251, 251, 247, 247, 248, 245, 245,
	246, 246, 246, 246, 287, 287, 158, 158, 100, 100,
	254, 254, 254, 254, 252, 252, 252, 252, 252, 255,
	253, 256, 256, 256, 256, 256, 193, 193, 193, 48,
	13, 74, 74, 14, 10, 10, 143, 143, 104, 104,
	198, 198, 198, 85, 85, 63, 63, 63, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 144,
	144, 145, 145, 28, 31, 34, 47, 47, 47, 47,
	47, 289, 289, 81, 81, 81, 81, 82, 82, 155,
	155, 156, 156, 157, 157, 157, 76, 75, 77, 77,
	9, 9, 70, 70, 71, 71, 72, 72, 73, 73,
	290, 290, 26, 26, 26, 88, 88, 152, 152, 152,
	154, 154, 153, 153, 153, 129, 129, 129, 49, 109,
	109, 118, 118, 119, 119, 204, 120, 120, 33, 33,
	58, 58, 56, 56, 56, 56, 56, 56, 57, 57,
	59, 59, 59, 59, 59, 59, 59, 262, 262, 262,
	265, 265, 261, 263, 263, 264, 264, 288, 288, 130,
	130, 130, 99, 98, 98, 102, 102, 101, 103, 103,
	197, 197, 197, 127, 127, 127, 127, 146, 146, 147,
	147, 148, 148, 149, 149, 149, 150, 150, 151, 151,
	126, 126, 177, 177, 60, 60, 108, 108, 110, 110,
	167, 167, 167, 168, 168, 166, 166, 166, 166, 199,
	199, 199, 199, 199, 199, 199, 278, 278, 278, 279,
	279, 196, 196, 200, 200, 200, 200, 200, 200, 194,
	194, 194, 194, 195, 195, 205, 205, 133, 133, 133,
	133, 131, 131, 132, 132, 201, 201, 201, 201, 128,
	128, 202, 202, 202, 161, 161, 208, 208, 208, 226,
	226, 107, 107, 107, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 210, 210, 210, 210, 212, 212, 212, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 225, 225, 225, 225,
	225, 213, 213, 220, 220, 221, 221, 222, 223, 214,
	214, 215, 215, 216, 217, 224, 224, 224, 224, 228,
	228, 218, 218, 218, 218, 218, 219, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 141, 141, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 171, 171, 171, 171, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	257, 257, 257, 257, 257, 257, 257, 259, 259, 260,
	260, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	266, 266, 267, 267, 269, 269, 270, 270, 271, 272,
	272, 272, 273, 274, 274, 268, 268, 275, 275, 275,
	276, 276, 277, 277, 277, 277, 277, 183, 183, 183,
	184, 184, 185, 191, 191, 191, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 83, 83, 83, 83, 83, 115, 115, 180,
	180, 178, 178, 178, 182, 182, 134, 134, 227, 227,
	227, 227, 227, 227, 227, 135, 135, 135, 142, 136,
	136, 137, 137, 137, 137, 137, 137, 174, 175, 138,
	138, 138, 176, 176, 186, 190, 190, 189, 188, 188,
	187, 187, 164, 164, 165, 165, 163, 162, 123, 123,
	122, 122, 121, 121, 291, 291, 192, 192, 124, 124,
	125, 117, 117, 203, 203, 203, 203, 111, 111, 90,
	90, 112, 112, 86, 86, 89, 89, 87, 87, 87,
	87, 105, 105, 106, 106, 84, 84, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 229, 229,
	229, 179, 78, 78, 78, 79, 79, 80, 80, 234,
	234, 234, 235, 235, 235, 235, 233, 233, 233, 233,
	233, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 3, 3, 1, 1, 1, 1,
	1, 1, 6, 2, 2, 2, 2, 2, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 3, 4, 5, 3, 2, 6, 3, 4,
	3, 3, 3, 3, 1, 3, 3, 1, 2, 2,
	1, 0, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 3, 4, 4, 4, 4, 2, 4,
	4, 4, 4, 4, 4, 2, 3, 3, 2, 4,
	5, 4, 5, 2, 3, 3, 4, 2, 3, 4,
	3, 3, 4, 4, 2, 5, 5, 6, 2, 2,
	0, 2, 0, 3, 6, 6, 5, 5, 4, 12,
	4, 12, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 3, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 7,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -23, -24, -25, -26, -27,
	-29, -31, -32, -34, -33, -35, -43, -44, -45, -46,
	-47, -28, -30, -48, -49, 23, 34, 238, 47, 67,
	-9, -10, -11, -12, -13, -14, -264, 93, 97, 106,
	130, 218, 104, 89, 124, 212, 240, 242, 249, -56,
	-58, -36, -37, -38, -39, -50, 260, 263, 35, 272,
	61, 100, 244, 236, 237, 300, 69, -262, -59, -57,
	351, 309, 325, 332, 253, -60, 281, 317, 354, 281,
	139, 82, 320, -280, -112, 281, 82, -87, -78, 344,
	4, -241, -243, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 48, 55, 60, 61, 62, 64, 66, 67,
	68, 71, 72, 80, 81, 83, 85, 89, 91, 93,
	96, 97, 99, 104, 105, 106, 112, 113, 118, 120,
	125, 130, 131, 132, 133, 140, 143, 145, 138, 155,
	156, 157, 159, 160, 161, 164, 163, 168, 171, 174,
	176, 177, 178, 181, 179, 183, 184, 186, 185, 191,
	193, 194, 196, 199, 202, 205, 208, 209, 210, 211,
	212, 214, 216, 218, 220, 221, 222, 223, 224, 226,
	227, 229, 230, 231, 232, 233, 236, 234, 235, 237,
	238, 239, 240, 242, 244, 245, 247, 261, 262, 273,
	249, 250, 251, 252, 256, 254, 257, 258, 260, 263,
	265, 268, 271, 272, 274, 277, 275, 270, 280, 282,
	283, 284, 285, 286, 287, 288, 295, 296, 300, 301,
	302, 303, 306, 307, 308, 309, 311, 314, 315, 316,
	321, 326, 327, 328, 329, 330, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 51, 52, 53, 56, 84,
	86, 87, 103, 107, 108, 114, 115, 116, 126, 128,
	134, 135, 144, 146, 147, 148, 149, 150, 152, 166,
	180, 190, 192, 203, 207, 215, 217, 225, 246, 255,
	266, 267, 276, 278, 290, 291, 292, 297, 298, 313,
	317, 318, -280, 156, 222, -86, -78, 82, 91, 143,
	308, 307, 22, 214, 254, 283, 285, 82, 139, 281,
	320, 310, -22, 351, -21, -8, -17, -4, -43, -19,
	-44, -45, -46, -23, -18, -33, -26, -49, -15, 23,
	-233, 4, -241, -243, -242, -244, 58, 70, 123, 142,
	136, 154, 158, 167, 169, 182, 204, 206, 243, 264,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	49, 50, 54, 57, 59, 65, 69, 73, 74, 76,
	75, 77, 78, 79, 88, 90, 92, 94, 95, 98,
	100, 102, 109, 110, 111, 119, 121, 122, 124, 127,
	129, 137, 139, 141, 151, 153, 162, 165, 170, 172,
	173, 187, 188, 189, 195, 197, 198, 200, 201, 213,
	219, 228, 241, 253, 259, 269, 279, 281, 289, 293,
	294, 299, 304, 305, 310, 312, 319, 320, 322, 323,
	324, 325, -78, -78, -78, 218, 22, -284, 22, -285,
	-286, 69, 97, 124, 253, 143, 91, 307, 156, 156,
	-284, -82, 249, -78, 171, 55, 246, 257, -41, 296,
	-40, 290, -232, -42, -113, 181, -78, 4, 181, 259,
	82, 22, 34, 55, 60, 83, 125, 139, 140, 65,
	66, 160, 221, 171, 157, 295, 161, 258, 282, 290,
	296, 69, 311, 286, 105, -289, 296, 296, -289, -289,
	-81, 296, 293, -82, 4, 82, 259, 181, -288, 281,
	281, 310, 320, -143, 82, 305, -57, -59, -58, -101,
	-102, 304, 151, 102, 201, -56, -58, -262, -237, -230,
	-193, 9, 299, 109, 197, -236, 8, 343, -229, -235,
	5, 7, 342, 4, -241, -243, -242, -265, 226, -261,
	-78, -265, -98, -99, 22, 94, 355, -201, -86, 198,
	-125, 351, -3, -201, 134, -86, -89, 134, -86, -78,
	-201, 134, 293, 355, -112, -105, -78, -163, -162, 353,
	122, -169, -171, 342, 343, 337, 187, 331, -183, -173,
	-186, 103, 246, 351, -86, -172, 356, 9, -259, -58,
	29, -184, -185, 49, -78, 7, 8, 5, 6, -84,
	-210, -179, -219, 299, 109, 189, -257, -258, 4, -241,
	-234, -211, -221, -215, -218, 152, 58, 74, 75, 78,
	76, 79, 259, 310, 50, 28, 107, 108, 207, 215,
	278, 297, 298, 134, 190, 135, 56, 126, 166, 96,
	37, 39, 41, 42, 51, 52, 84, 86, 87, 114,
	115, 116, 144, 146, 147, 148, 149, 150, 192, 225,
	266, 276, 291, 292, 318, -242, -222, -223, -216, -217,
	-224, -169, 122, 351, -122, -123, -162, -163, 122, 153,
	153, -202, -201, -78, 134, -90, 134, -89, -114, 134,
	-113, -114, 134, -105, 134, -207, -206, -235, 317, 281,
	139, -181, 351, -139, 351, -78, 22, 197, 355, -169,
	-169, 197, -78, 2, 261, 351, -41, 53, 296, -156,
	-157, -75, -76, -77, 155, 220, 224, 330, 293, 336,
	122, -237, -94, 88, -116, 353, 55, -239, -236, 9,
	261, 221, 258, 122, -281, 197, 122, 122, 122, 122,
	122, 221, 258, 119, 295, 122, 330, 155, 220, 273,
	281, 320, 122, 122, -155, -156, -155, 293, -82, -128,
	-201, -113, 134, -78, -113, 139, -78, 134, -101, -102,
	-127, -146, -147, 170, 111, 195, -130, 22, 94, -130,
	-130, 44, 352, 352, 8, 7, 7, 355, -265, -106,
	351, -117, -203, -169, 344, -117, -125, 344, -86, 351,
	-124, -192, -169, 88, -65, 234, -64, 21, 23, 97,
	315, 103, 270, 287, 250, 270, 287, 250, 234, 103,
	356, 234, 234, 103, -239, -87, 355, -233, 344, -240,
	-239, 10, 11, 57, 33, 342, 343, 344, 345, 117,
	346, 347, 340, 341, 339, 334, 335, 336, 63, 175,
	248, 13, 14, 15, 26, 200, 169, 331, 136, 264,
	337, 16, 17, 18, 154, 36, 137, -83, -91, -169,
	-169, -169, -169, -169, 206, -121, -164, 349, -58, 351,
	-58, -169, -115, 7, -58, -178, 349, -187, -169, -122,
	351, 5, 351, 5, -266, 326, 119, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 217, -228, 321, -228, -228,
	-212, 351, -212, -213, 351, -212, 327, 332, 351, 274,
	352, -111, -86, -123, -202, -88, -86, -88, 260, -78,
	30, 103, -67, 355, 48, 239, 103, -67, 355, 103,
	-67, 103, 103, 352, 355, -201, 134, -89, 30, -180,
	-208, -209, -211, -220, -214, -218, -219, 40, 46, 45,
	288, 180, 255, 267, 313, 38, 196, 145, 144, 146,
	147, 148, 149, 150, 266, 37, 225, 115, 116, 114,
	96, 87, 86, 192, 42, 41, -222, -223, -216, -217,
	84, 291, 292, 152, 39, 52, 51, 318, 276, -115,
	-169, -280, -286, -280, -40, -232, -115, 30, -156, 355,
	168, -93, 174, 186, 131, 198, 328, -238, 5, 4,
	-179, -193, 88, 171, -219, -231, 88, -237, -231, 88,
	72, 353, -233, 262, -113, 22, -232, -283, 119, -280,
	-232, -232, -232, -232, -232, 257, -22, 119, -78, 168,
	-232, -232, 281, 139, 281, -82, -67, 355, 351, -100,
	187, -263, 325, -100, 351, -79, 134, -78, -263, 187,
	-127, -147, -146, -148, -169, 22, -151, 113, 183, -169,
	-171, -57, -57, -57, -103, -197, -169, 219, 139, -261,
	30, -105, -108, 355, 122, 30, 4, -108, -86, 355,
	352, 355, 293, -144, 65, 59, -159, 134, 59, -245,
	-78, 65, -246, 54, 305, 219, 121, -144, 65, -144,
	65, 65, -201, 33, -33, 122, 33, -33, 122, 293,
	-89, -233, 293, 293, -201, -205, 333, -78, -205, 355,
	-226, -208, -225, 230, 231, 229, 233, 232, -208, -233,
	290, -169, -169, -169, -169, -169, -169, -169, -169, -169,
	-169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
	-169, -169, -169, 169, 136, 264, 36, 137, -169, 293,
	-169, -169, -169, -169, 179, 187, 189, 299, 109, 306,
	94, 193, -291, 279, 32, -176, -58, 351, -191, 27,
	269, 22, -183, 246, 351, -164, -169, -165, -115, 352,
	352, 355, -115, -182, 350, -178, -190, -189, 322, 352,
	-115, 319, 22, 94, 344, 7, -140, 329, 178, 85,
	132, 177, -141, 252, -267, 112, 127, 351, 352, 352,
	352, -169, -169, -134, -227, -115, 4, 329, 178, 85,
	132, 177, 252, -134, -135, -169, -115, -136, -170, -171,
	342, 343, 337, 351, 246, -137, -169, -115, -169, 43,
	165, 294, -138, -169, 122, -115, -169, -169, -169, -115,
	-115, -115, 351, 7, 7, 290, 290, 7, 122, 352,
	355, -161, 323, -152, -33, 351, 88, 30, -152, -118,
	-119, -204, -120, -86, 351, -78, -78, -89, -90, -113,
	-114, -114, -105, -22, -206, 103, -21, 352, 355, -107,
	29, -140, 351, 352, 355, 293, 122, 352, 296, -157,
	-92, 224, 268, 235, 256, 355, -233, -282, -78, 257,
	-22, -86, -89, -86, -201, -95, -105, -96, -78, -160,
	-159, -247, -248, -245, 139, 305, 110, 30, 103, -74,
	211, 30, 197, 187, -70, 284, 103, -149, -229, 351,
	343, -150, 246, 247, 355, -63, 31, 92, 159, -86,
	351, 352, -161, -203, -110, -199, 349, -201, -86, -58,
	-200, 351, -233, -161, 352, -192, -64, -86, -78, -78,
	187, -159, 134, -69, 187, -208, -78, 351, 351, 159,
	159, -78, -78, 134, -78, 134, -78, -78, -65, 234,
	-33, 351, -33, 351, -78, 234, -78, -86, 234, -51,
	133, 193, -54, 325, -239, 330, -169, -169, 293, -291,
	279, -176, -169, 179, 189, 299, 109, 306, 94, 193,
	122, 351, -170, -170, -115, -173, 351, -115, 350, 359,
	352, -169, 350, 350, 355, -188, -189, 98, -169, -102,
	355, -101, -169, -115, -115, 352, 352, 293, 293, 293,
	293, 351, -272, 205, 351, 351, -169, 30, 355, 352,
	122, 352, 352, -142, 213, 352, 10, 11, 342, 343,
	344, 345, 117, 346, 347, 340, 341, 339, 334, 335,
	336, 63, 175, 248, 13, 14, 15, 154, 137, -170,
	-170, -170, -115, 351, 352, -174, -175, 122, 119, 30,
	-138, -138, -138, 352, 122, -115, 355, 355, 355, 352,
	352, 352, 7, 352, 355, 352, 330, 330, 352, 274,
	122, -86, -129, 241, -169, -129, -154, 197, -111, 317,
	-78, -129, -109, 355, 122, 336, -111, -67, -67, -67,
	-201, -208, 349, 349, 7, -169, -282, -282, -75, 303,
	62, 224, -237, 355, -205, 352, 352, 355, -79, 139,
	-79, -33, -113, 5, -33, -86, 103, -71, 99, -290,
	336, -78, -150, -169, -197, -86, 356, -21, -126, 127,
	-205, 355, 70, -133, 158, 182, 123, 167, 243, 142,
	7, -22, -166, 356, 351, -196, 332, -58, -200, -199,
	-126, 293, 293, 103, 187, 314, -249, -246, -169, -104,
	-198, -78, -260, 351, -257, -258, -84, 351, 351, -62,
	97, 260, -145, 103, -67, 103, -67, 293, -144, 65,
	-115, -115, 293, 293, -54, 122, 280, 199, -169, -169,
	-170, -170, 122, 351, -169, -180, 26, 26, 352, -115,
	352, 355, -165, -169, 352, -178, 100, -169, 289, 352,
	319, -102, -102, -102, 5, 178, 132, 177, -141, 177,
	-141, -141, 7, -273, -78, 351, 323, -101, 352, -226,
	-208, -169, -174, -169, -226, -208, -170, -170, -170, -170,
	-170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
	-170, -170, -170, -170, -170, 94, 187, 193, -170, 355,
	-115, 352, -175, -174, -169, -169, -208, 352, 352, 352,
	-115, -169, -169, -169, 352, 7, 274, -117, 188, -129,
	64, 352, -161, -119, -110, -192, 352, 350, 7, 7,
	352, -78, -97, 138, -160, 351, -79, 351, 351, -100,
	351, -78, -72, 164, -290, -236, -263, 198, 352, -63,
	-233, 352, -177, 129, 44, -199, 158, 158, -199, -133,
	158, -131, 204, -131, -131, -278, 351, 350, -196, -233,
	349, 357, -115, -195, -194, 30, -78, 202, 352, -177,
	-78, -78, -159, 103, -250, 65, -251, 57, 110, 69,
	187, 189, 305, 219, 54, 88, 228, 352, 352, 355,
	-85, -122, 57, -85, -169, 351, -104, -105, 187, 88,
	187, 88, 81, 301, -78, -78, -86, -78, -78, 352,
	352, -78, -86, -240, 290, 351, 26, 26, -169, -180,
	352, -169, -169, 352, -169, 350, -169, 5, -169, 352,
	352, 352, 352, -274, -78, -169, 352, 352, 352, -175,
	122, 94, 193, 351, -169, 352, 352, 355, 352, 352,
	352, -153, 351, 197, -33, -129, 336, 350, 350, 137,
	-104, 351, -105, -95, 30, -104, 197, -73, 163, -290,
	-236, -70, -63, -269, 324, -169, -115, -199, -199, -132,
	312, 197, 158, -199, 350, 352, -279, 7, -196, -195,
	7, -168, -167, 120, 185, 352, -78, 351, -196, -269,
	-159, -78, -233, -78, 110, 134, 189, 159, 351, -170,
	-86, -158, -287, 68, 277, -198, -63, -233, -63, 352,
	-115, 352, 352, 189, 189, -169, -208, -67, -67, 293,
	293, 293, 293, -172, -84, -78, -53, -52, 5, -169,
	-169, 352, 352, -102, -268, 210, 352, -170, 122, 351,
	-180, 352, -169, 95, -105, 65, -125, -58, 351, 208,
	352, -104, 352, 352, -33, 352, -86, -290, -236, -71,
	-270, -271, -78, -132, 351, -169, -199, -166, 352, 355,
	-195, 350, 355, 358, 336, -196, 351, -105, -194, -251,
	-79, 187, -169, -80, 351, -97, 351, -85, -102, 228,
	-66, 57, -78, -78, 351, 351, 351, 355, 352, -55,
	336, 352, -102, 44, -170, -180, 352, 352, 307, 188,
	352, -78, -78, -158, 352, -97, -158, 351, -236, -72,
	355, 30, -105, -196, 7, -167, -233, 349, -195, -105,
	352, 103, 352, -254, 176, -78, -105, -63, 352, -86,
	-61, 312, -233, -115, -115, -115, -52, 5, -275, 223,
	247, -115, 352, 260, -161, 351, -97, -158, -97, -104,
	-73, -271, -273, 352, -194, 7, 352, 110, -252, -255,
	-253, 197, 123, 209, 265, 352, 352, -100, -169, 352,
	352, -102, 352, -276, -277, 36, 302, 72, -169, -276,
	-118, -105, -97, 352, 350, -78, -253, 197, -255, 197,
	307, 91, -254, 352, -277, 216, 118, 246, 216, 118,
	-161, 352, -158, -256, 184, 239, 48, 260, -256, -252,
	26, -68, 48, 239, -97, 20, 189, 88, -277,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
	-2, 167, 168, 169, 170, 171, 0, 0, 382, 0,
	382, 382, 386, 0, 0, 468, 347, 465, -2, 476,
	0, 0, 0, 0, 474, 452, 0, 0, -2, 0,
	0, 0, 0, 0, 146, 0, 1013, 941, 947, 948,
	972, 973, 974, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 0, 0, 0, 0, 943, 1013, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 0, 0, 0,
	0, 0, 114, 0, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 116, 117, 118, 119, 0,
	258, 986, 987, 988, 989, 990, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 136, 139, 140, 1072, 142, 0, 149, 150,
	151, 153, 154, 155, 156, 157, 158, 159, 0, 0,
	0, 375, 1099, 388, -2, 1001, 1187, 1105, 176, 1126,
	184, 1193, 0, 187, 192, -2, 110, 218, 219, 220,
	221, 222, 0, 0, 0, 228, 260, 0, 0, 0,
	0, 0, 235, 0, 238, 0, 0, 243, 247, 0,
	0, 0, 254, 0, 0, 390, 381, 390, 378, 379,
	380, 383, 0, 373, 162, 163, 164, 165, 0, 467,
	0, 0, 0, 0, 0, 346, -2, 448, 449, -2,
	0, 471, 471, 471, 0, 0, 449, 0, 166, 195,
	196, 197, 206, 207, 208, 209, 336, 0, 338, 216,
	217, 968, 0, 982, 983, 984, 985, 457, 1078, 460,
	954, 458, 0, 0, 473, 472, 0, 453, 555, 0,
	504, 0, 2, 0, 1169, 555, 0, 1169, 946, 0,
	0, 1169, 0, 0, 147, 148, 951, 949, 950, 0,
	0, 84, 663, 0, 0, 0, 0, 0, 0, 755,
	757, 1161, 1187, 0, 759, 760, 0, 762, 764, 765,
	0, 768, 769, 911, 943, 957, 958, 959, 960, 0,
	0, 963, 0, 965, 966, 967, 811, 778, -2, -2,
	955, 591, 592, 593, 594, -2, 1201, 782, 784, 786,
	788, 789, 790, 791, 0, 1145, 1162, 1163, 1183, 1184,
	1192, 1196, 1197, 1169, 1180, 1170, 1157, 1167, 1178, 1019,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 981, 625, 626, 631, 632,
	634, 85, 0, 0, 944, 920, 918, 919, 0, 0,
	0, 0, 561, 98, 1169, 59, 1169, 939, 59, 1169,
	108, 59, 1169, 106, 1169, 0, 131, 133, 1199, 0,
	0, 0, 0, 137, 0, 141, 143, 0, 0, 263,
	374, 0, 387, 172, 0, 0, 175, 1156, 1126, 178,
	391, 393, 394, 395, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 190, 111, 0, 0, 223, 68, 69,
	0, 236, 244, 0, 262, 0, 0, 0, 0, 0,
	0, 237, 245, 466, 0, 0, 248, 0, 250, 251,
	0, 0, 0, 0, 376, 389, 377, 0, 385, 59,
	559, 319, 1169, 464, 319, 976, 464, 1169, -2, 0,
	444, 485, 486, 0, 0, 0, 0, 469, 470, 0,
	0, 0, 440, 441, 337, 970, 969, 0, 459, 0,
	0, 507, 931, 935, 936, 507, 505, 556, 557, 0,
	0, 928, 926, 927, 36, 370, 38, 0, 370, 370,
	0, 0, 0, 0, 268, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 546, 942, 0, 916, 917, 546,
	70, 0, 0, 0, 0, 846, 847, 848, 849, 850,
	851, 854, 855, 852, 853, 856, 857, 858, 0, 0,
	0, 859, 860, 861, 0, 0, 863, 0, 865, 0,
	0, 0, 0, 0, 0, 925, 0, 0, 862, 668,
	669, 670, 692, 693, 0, 756, 922, 915, 758, 0,
	-2, 867, 0, 761, 766, 767, 0, 0, 910, -2,
	0, 962, 0, 660, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 628, 639, 636, 635,
	612, 0, 611, 609, 0, 613, 0, 0, 0, 81,
	0, 0, 937, 921, 565, 0, 415, 0, 0, 562,
	0, 0, 100, 0, 57, 58, 0, 102, 0, 0,
	104, 0, 0, 466, 0, 0, 1169, 0, 466, 0,
	869, 573, 574, 575, 576, 577, 660, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 622,
	0, 597, 597, 597, 614, 615, 623, 624, 629, 630,
	641, 642, 644, 646, 640, 640, 640, 637, 638, 0,
	867, 0, 152, 0, 173, 0, 0, 0, 179, 0,
	0, 396, 203, 204, 205, 398, 399, 185, 210, 211,
	212, 213, 214, 215, 0, 180, 182, 193, 181, 183,
	186, 0, 112, 226, 224, 225, 227, 229, 0, 259,
	230, 231, 232, 233, 234, 239, 241, 466, 246, 249,
	252, 253, 0, 0, 0, 384, 339, 0, 277, 0,
	0, 342, 463, 0, 0, 0, 1169, 975, 403, 0,
	447, 483, 484, 487, 491, 492, 495, 498, 499, 489,
	663, 454, 455, 456, 477, 478, 357, 0, 0, 461,
	0, 0, 565, 0, 0, 0, 934, 565, 0, 0,
	930, 0, 0, 0, 0, 369, 40, 1169, 0, 61,
	0, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 0, 267, 0, 0,
	0, 945, 0, 0, 0, 73, 0, 952, 80, 0,
	664, 569, 570, 616, 617, 618, 619, 620, 665, 666,
	0, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, -2, -2, -2, 684, 685, 686, -2, -2, -2,
	690, 691, -2, 864, 866, 0, 925, 0, -2, 0,
	-2, -2, -2, -2, 704, 0, 706, 709, 711, 713,
	0, 0, 0, 0, 924, 723, 902, 0, 0, 843,
	844, 845, 708, 0, 0, 923, 914, 0, 0, -2,
	763, 0, 0, 0, 873, 874, 909, 905, 0, 770,
	476, 0, 0, 0, 0, 0, 971, 647, 648, 649,
	650, 651, 652, 661, 821, 0, 0, 0, 783, 785,
	787, 0, 0, 0, 0, 877, -2, -2, -2, -2,
	-2, -2, -2, 0, 0, 867, 887, 0, 0, 726,
	0, 0, 0, 0, 1187, 0, 867, 895, 0, 0,
	0, 0, 0, 867, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 0, 427, 417, 0, 0, 0, 427, 430,
	431, 433, 434, 0, 0, 563, 99, 940, 59, 109,
	59, 59, 107, 115, 132, 0, 134, 135, 0, 566,
	568, 578, 0, 138, 0, 0, 0, 174, 0, 392,
	397, 0, 200, 0, 202, 0, 113, 261, 160, 240,
	242, 255, 256, 546, 560, 0, 0, 276, 951, 278,
	280, 281, 282, 283, 976, 0, 976, 0, 0, 340,
	0, 0, 0, 0, 405, 411, 0, 0, 493, 0,
	0, 490, 496, 497, 0, 480, 355, 356, 0, 0,
	466, 953, 501, 932, 546, 508, 466, 518, 555, 532,
	523, 0, 933, 501, 558, 929, 39, 359, 0, 0,
	0, 42, 1169, 50, 0, 291, 0, 0, 0, 0,
	0, 372, 51, 1169, 59, 1169, 59, 52, 37, 370,
	264, 0, 265, 0, 363, 0, 358, 361, 0, 80,
	0, 0, 67, 0, 71, 0, -2, -2, 0, 0,
	0, 724, -2, 705, 707, 710, 712, 714, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 912, 915,
	-2, 868, 871, 872, 0, 0, 906, 0, 0, 0,
	0, 475, 476, 476, 476, 776, 0, 0, 0, 0,
	0, 0, 777, 0, 0, 0, 0, 0, 0, 794,
	0, 795, 796, 0, 0, 797, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	730, 731, 0, 0, 798, 893, 894, 0, 0, 0,
	0, 0, 0, 803, 0, 900, 0, 0, 0, 807,
	808, 809, 0, 595, 0, 621, 643, 645, 633, 82,
	0, 938, 92, 0, 564, 412, 427, 0, 0, 419,
	416, 414, 565, 0, 0, 0, 0, 101, 103, 105,
	0, 870, 0, 0, 0, 868, 144, 145, 177, 198,
	199, 201, 194, 0, 257, 285, 318, 0, 0, 976,
	0, 274, 319, 341, 343, 0, 0, 407, 411, 0,
	410, 464, 0, 0, 479, 357, 0, 0, 503, 0,
	506, 0, 0, 0, 0, 0, 552, 552, 552, 550,
	526, 0, 532, 0, 0, 544, 0, -2, 523, 0,
	503, 0, 0, 0, 0, 60, 289, 308, 0, 0,
	348, 354, 354, 0, 779, 780, 0, 0, 0, 44,
	0, 0, 0, 0, 48, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 667, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 903, 0,
	838, 0, 0, 914, -2, 875, 904, 908, 0, 771,
	0, 0, 0, 0, 964, 653, 654, 655, 656, 657,
	658, 659, 0, 819, 820, 824, 0, 0, 781, 0,
	0, 876, 886, 888, 727, 728, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, -2, -2, -2, 745,
	746, 747, -2, -2, -2, 0, 0, 0, 889, 0,
	0, 841, 891, 892, 897, 898, 0, 800, 801, 802,
	899, 0, 0, 0, 627, 0, 83, 425, 426, 413,
	424, 0, 427, 432, 429, 435, 0, 571, 0, 0,
	579, 161, 272, 0, 279, 0, 0, 0, 277, 0,
	0, 0, 409, 411, 0, 402, 403, 488, 494, 481,
	357, 462, 815, 0, 0, 509, 0, 0, 0, 0,
	0, 547, 551, 548, 549, 0, 0, 532, 544, 515,
	0, 0, 0, 522, 543, 0, 542, 531, -2, 815,
	365, 367, 41, 0, 290, 0, 293, 0, 0, 0,
	0, 299, 300, 0, 0, 0, 0, 310, 317, 0,
	357, 956, 0, 357, 0, 0, 0, 0, 0, 56,
	0, 0, 371, 0, 59, 59, 360, 0, 0, 0,
	0, 364, 362, 72, 0, 0, 0, 0, -2, 0,
	717, -2, -2, 837, 868, 913, 907, 961, 476, 772,
	774, 775, 662, 826, 823, 0, 810, 792, 793, 885,
	0, 0, 0, 0, 868, 840, 799, 0, 805, 806,
	596, 0, 0, 0, 418, 428, 0, 572, 567, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 411, 0,
	404, 405, 482, 450, 0, 502, 500, 534, 0, 536,
	0, 0, 0, 538, 518, 527, 0, 529, 544, 520,
	0, 0, 513, 0, 512, 532, 540, 0, 0, 451,
	43, 0, 294, 295, 976, 0, 298, 301, 0, 303,
	978, 285, 0, 314, 315, 349, 350, 353, 351, 354,
	476, 312, 0, 45, 46, 55, 63, 47, 53, 0,
	0, 0, 0, 545, 0, 0, 0, 77, 75, -2,
	-2, 718, 839, 0, 476, 0, 812, -2, 0, 0,
	0, 842, 0, 0, 0, 0, 436, 437, 0, 0,
	317, 0, 307, 285, 275, 317, 0, 0, 406, 407,
	814, 816, 0, 535, 0, 554, 537, 532, 528, 0,
	525, 516, 0, 517, 0, 544, 0, 0, 524, 292,
	296, 0, 0, 323, 0, 311, 0, 357, 0, 0,
	65, 0, 366, 368, 0, 0, 0, 0, 79, 76,
	0, 773, 829, 0, -2, 0, 753, 804, 0, 421,
	565, 423, 0, 285, 317, 273, 285, 0, 408, 409,
	0, 0, 0, 0, 530, 514, 510, 0, 521, 0,
	541, 0, 302, 328, 0, 0, 0, 352, 771, 319,
	49, 0, 62, 0, 0, 476, 78, 74, 0, 0,
	0, 825, 754, 0, 422, 0, 305, 285, 344, 0,
	401, 817, 818, 553, 519, 0, 539, 0, 304, 324,
	325, 0, 320, 321, 322, 977, 316, 323, 64, 269,
	271, 0, 822, 827, 830, -2, 1129, 1010, 0, 828,
	565, 0, 306, 317, 511, 297, 326, 0, 327, 0,
	0, 0, 328, 0, 0, 832, 833, 834, 835, 836,
	420, 288, 285, 329, 0, 332, 333, 0, 330, 313,
	0, 284, 286, 287, 345, 331, 334, 335, 831,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:803
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:815
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:915
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:938
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:948
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = nil
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = DropCascade
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = DropRestrict
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = DropDefault
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1010
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1011
		{
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1014
		{
			return unimplemented(sqllex, "alter using")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1015
		{
		}
	case 66:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.str = ""
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1088
		{
		}
	case 81:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1107
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1138
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1460
		{ /* SKIP DOC */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1461
		{ /* SKIP DOC */
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			return unimplemented(sqllex, "set local")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1527
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			return unimplemented(sqllex, "set from current")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1549
		{
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = Low
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = Normal
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = High
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1789
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1797
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1813
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1817
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1871
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1875
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1881
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1885
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1893
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = DropDefault
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return unimplemented(sqllex, "match full")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return unimplemented(sqllex, "match partial")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return unimplemented(sqllex, "match simple")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2186
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2196
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2199
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
			return unimplemented(sqllex, "no action")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return unimplemented(sqllex, "action set null")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			return unimplemented(sqllex, "action set default")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = true
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = false
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2319
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2323
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = Ascending
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = Descending
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2377
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2378
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = true
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = false
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2392
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2432
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.str = ""
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.str = ""
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = ReadOnly
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = ReadWrite
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.str = ""
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.str = ""
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.str = ""
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.str = ""
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2661
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 428:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2695
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2696
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2923
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2925
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			return unimplemented(sqllex, "cte")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = true
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = false
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = false
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = true
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2967
		{
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2968
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &From{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3182
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3227
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3244
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = nil
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = true
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = false
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.str = astFullJoin
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.str = astLeftJoin
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.str = astRightJoin
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.str = astInnerJoin
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3420
		{
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3506
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3519
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3520
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3534
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3543
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3615
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = nil
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3680
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3776
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3848
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = year
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = month
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = day
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = hour
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = minute
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = month
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = hour
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = minute
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = minute
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = nil
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = second
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3943
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3978
		{
			return unimplemented(sqllex, "at tz")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4146
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4212
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4385
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4438
		{
			return unimplemented(sqllex, "variadic")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4439
		{
			return unimplemented(sqllex, "variadic")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4462
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			return unimplemented(sqllex, "func_application")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4483
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			return unimplemented(sqllex, "current role")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4509
		{
			return unimplemented(sqllex, "current user")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			return unimplemented(sqllex, "session user")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			return unimplemented(sqllex, "user")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4540
		{
			return unimplemented(sqllex, "treat")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4584
		{
			return unimplemented(sqllex, "within group")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4585
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = Window(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4620
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4682
		{
			return unimplemented(sqllex, "frame range")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4683
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4684
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4688
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4694
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4695
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4696
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4697
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = Any
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = Some
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = All
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = Plus
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = Minus
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = Mult
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = Div
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = FloorDiv
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = Mod
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = Bitand
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = Bitor
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = Pow
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = Bitxor
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = LT
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = GT
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = EQ
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = LE
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = GE
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = NE
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = Like
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = NotLike
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = ILike
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = NotILike
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5062
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5063
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5181
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5225
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5261
		{
			return unimplemented(sqllex, "func const")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5270
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = DNull
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.str = ""
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
