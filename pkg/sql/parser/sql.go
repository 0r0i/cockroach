// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:335
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT8 = 57480
const INT64 = 57481
const INTEGER = 57482
const INTERSECT = 57483
const INTERVAL = 57484
const INTO = 57485
const IS = 57486
const ISOLATION = 57487
const JOIN = 57488
const KEY = 57489
const KEYS = 57490
const LATERAL = 57491
const LC_CTYPE = 57492
const LC_COLLATE = 57493
const LEADING = 57494
const LEAST = 57495
const LEFT = 57496
const LEVEL = 57497
const LIKE = 57498
const LIMIT = 57499
const LOCAL = 57500
const LOCALTIME = 57501
const LOCALTIMESTAMP = 57502
const LOW = 57503
const LSHIFT = 57504
const MATCH = 57505
const MINUTE = 57506
const MONTH = 57507
const NAME = 57508
const NAMES = 57509
const NATURAL = 57510
const NEXT = 57511
const NO = 57512
const NO_INDEX_JOIN = 57513
const NORMAL = 57514
const NOT = 57515
const NOTHING = 57516
const NULL = 57517
const NULLIF = 57518
const NULLS = 57519
const NUMERIC = 57520
const OF = 57521
const OFF = 57522
const OFFSET = 57523
const OID = 57524
const ON = 57525
const ONLY = 57526
const OPTIONS = 57527
const OR = 57528
const ORDER = 57529
const ORDINALITY = 57530
const OUT = 57531
const OUTER = 57532
const OVER = 57533
const OVERLAPS = 57534
const OVERLAY = 57535
const PARENT = 57536
const PARTIAL = 57537
const PARTITION = 57538
const PASSWORD = 57539
const PLACING = 57540
const POSITION = 57541
const PRECEDING = 57542
const PRECISION = 57543
const PREPARE = 57544
const PRIMARY = 57545
const PRIORITY = 57546
const RANGE = 57547
const READ = 57548
const REAL = 57549
const RECURSIVE = 57550
const REF = 57551
const REFERENCES = 57552
const REGCLASS = 57553
const REGPROC = 57554
const REGPROCEDURE = 57555
const REGNAMESPACE = 57556
const REGTYPE = 57557
const RENAME = 57558
const REPEATABLE = 57559
const RELEASE = 57560
const RESTORE = 57561
const RESTRICT = 57562
const RETURNING = 57563
const REVOKE = 57564
const RIGHT = 57565
const ROLLBACK = 57566
const ROLLUP = 57567
const ROW = 57568
const ROWS = 57569
const RSHIFT = 57570
const STATUS = 57571
const SAVEPOINT = 57572
const SEARCH = 57573
const SECOND = 57574
const SELECT = 57575
const SERIAL = 57576
const SERIALIZABLE = 57577
const SESSION = 57578
const SESSION_USER = 57579
const SET = 57580
const SHOW = 57581
const SIMILAR = 57582
const SIMPLE = 57583
const SMALLINT = 57584
const SMALLSERIAL = 57585
const SNAPSHOT = 57586
const SOME = 57587
const SPLIT = 57588
const SQL = 57589
const START = 57590
const STDIN = 57591
const STRICT = 57592
const STRING = 57593
const STORING = 57594
const SUBSTRING = 57595
const SYMMETRIC = 57596
const SYSTEM = 57597
const TABLE = 57598
const TABLES = 57599
const TEMPLATE = 57600
const TEXT = 57601
const THEN = 57602
const TIME = 57603
const TIMESTAMP = 57604
const TIMESTAMPTZ = 57605
const TO = 57606
const TRAILING = 57607
const TRANSACTION = 57608
const TREAT = 57609
const TRIM = 57610
const TRUE = 57611
const TRUNCATE = 57612
const TYPE = 57613
const UNBOUNDED = 57614
const UNCOMMITTED = 57615
const UNION = 57616
const UNIQUE = 57617
const UNKNOWN = 57618
const UPDATE = 57619
const UPSERT = 57620
const USER = 57621
const USERS = 57622
const USING = 57623
const VALID = 57624
const VALIDATE = 57625
const VALUE = 57626
const VALUES = 57627
const VARCHAR = 57628
const VARIADIC = 57629
const VIEW = 57630
const VARYING = 57631
const WHEN = 57632
const WHERE = 57633
const WINDOW = 57634
const WITH = 57635
const WITHIN = 57636
const WITHOUT = 57637
const YEAR = 57638
const ZONE = 57639
const NOT_LA = 57640
const WITH_LA = 57641
const AS_LA = 57642
const POSTFIXOP = 57643
const UMINUS = 57644

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5300

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	321, 28,
	-2, 410,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 393,
	141, 393,
	157, 393,
	181, 393,
	187, 393,
	274, 393,
	-2, 383,
	-1, 62,
	98, 392,
	141, 392,
	157, 392,
	181, 392,
	187, 392,
	274, 392,
	-2, 386,
	-1, 71,
	1, 28,
	321, 28,
	-2, 410,
	-1, 419,
	1, 191,
	321, 191,
	-2, 964,
	-1, 455,
	157, 420,
	181, 420,
	-2, 389,
	-1, 458,
	157, 419,
	181, 419,
	-2, 387,
	-1, 590,
	157, 419,
	181, 419,
	-2, 390,
	-1, 648,
	318, 898,
	-2, 891,
	-1, 649,
	318, 899,
	-2, 892,
	-1, 655,
	5, 568,
	318, 568,
	-2, 1067,
	-1, 679,
	5, 528,
	-2, 1041,
	-1, 680,
	5, 562,
	318, 562,
	-2, 1043,
	-1, 681,
	5, 536,
	-2, 1044,
	-1, 682,
	5, 535,
	-2, 1045,
	-1, 683,
	5, 562,
	318, 562,
	-2, 1048,
	-1, 684,
	5, 562,
	318, 562,
	-2, 1049,
	-1, 685,
	5, 563,
	-2, 1052,
	-1, 686,
	5, 522,
	-2, 1053,
	-1, 687,
	5, 522,
	-2, 1054,
	-1, 688,
	5, 544,
	-2, 1058,
	-1, 689,
	5, 523,
	-2, 1063,
	-1, 690,
	5, 524,
	-2, 1064,
	-1, 691,
	5, 525,
	-2, 1065,
	-1, 692,
	5, 526,
	-2, 1066,
	-1, 693,
	5, 522,
	-2, 1070,
	-1, 694,
	5, 529,
	-2, 1075,
	-1, 695,
	5, 527,
	-2, 1078,
	-1, 696,
	5, 560,
	318, 560,
	-2, 1080,
	-1, 697,
	5, 564,
	-2, 1083,
	-1, 698,
	5, 566,
	-2, 1084,
	-1, 699,
	5, 559,
	318, 559,
	-2, 1088,
	-1, 953,
	98, 393,
	141, 393,
	157, 393,
	181, 393,
	187, 393,
	274, 393,
	-2, 685,
	-1, 962,
	318, 876,
	-2, 864,
	-1, 1172,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 603,
	-1, 1173,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 604,
	-1, 1174,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 605,
	-1, 1178,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 609,
	-1, 1179,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 610,
	-1, 1180,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 611,
	-1, 1183,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 616,
	-1, 1189,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 618,
	-1, 1192,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 623,
	-1, 1193,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 624,
	-1, 1194,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 625,
	-1, 1220,
	192, 756,
	-2, 759,
	-1, 1249,
	115, 796,
	318, 898,
	-2, 891,
	-1, 1250,
	115, 797,
	-2, 1037,
	-1, 1251,
	115, 798,
	-2, 962,
	-1, 1252,
	115, 799,
	-2, 932,
	-1, 1253,
	115, 800,
	-2, 947,
	-1, 1254,
	115, 801,
	-2, 961,
	-1, 1255,
	115, 802,
	-2, 1005,
	-1, 1408,
	98, 393,
	141, 393,
	157, 393,
	181, 393,
	187, 393,
	274, 393,
	-2, 461,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 617,
	-1, 1414,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 619,
	-1, 1419,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 620,
	-1, 1436,
	192, 755,
	-2, 758,
	-1, 1613,
	1, 462,
	68, 462,
	98, 462,
	116, 462,
	120, 462,
	122, 462,
	135, 462,
	141, 462,
	146, 462,
	154, 462,
	157, 462,
	168, 462,
	181, 462,
	183, 462,
	187, 462,
	221, 462,
	223, 462,
	274, 462,
	281, 462,
	291, 462,
	292, 462,
	300, 462,
	317, 462,
	319, 462,
	321, 462,
	322, 462,
	-2, 461,
	-1, 1617,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 621,
	-1, 1622,
	144, 0,
	-2, 635,
	-1, 1632,
	192, 757,
	-2, 760,
	-1, 1666,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 662,
	-1, 1667,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 663,
	-1, 1668,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 664,
	-1, 1672,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 668,
	-1, 1673,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 669,
	-1, 1674,
	13, 0,
	14, 0,
	15, 0,
	301, 0,
	302, 0,
	303, 0,
	-2, 670,
	-1, 1790,
	144, 0,
	-2, 636,
	-1, 1793,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 639,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 641,
	-1, 1894,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 640,
	-1, 1895,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 642,
	-1, 1902,
	144, 0,
	-2, 671,
	-1, 1957,
	144, 0,
	-2, 672,
	-1, 2017,
	36, 0,
	129, 0,
	156, 0,
	240, 0,
	298, 0,
	-2, 1040,
}

const sqlNprod = 1183
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 26854

var sqlAct = [...]int{

	649, 2016, 1995, 1608, 2041, 1963, 1575, 1997, 1996, 1406,
	1043, 1834, 1278, 1051, 1643, 2015, 1863, 1879, 1852, 640,
	1135, 459, 1761, 1779, 276, 769, 871, 290, 647, 1585,
	84, 84, 84, 420, 1747, 1609, 834, 1748, 504, 1703,
	1772, 1384, 292, 84, 84, 84, 480, 646, 84, 877,
	1114, 84, 1386, 626, 278, 20, 1143, 466, 61, 84,
	1766, 522, 48, 732, 1497, 1128, 84, 84, 1109, 1591,
	84, 1334, 738, 84, 84, 84, 84, 1150, 1447, 84,
	84, 1218, 1396, 609, 753, 1496, 873, 1600, 1113, 958,
	1142, 715, 712, 1052, 1007, 1328, 1016, 1083, 61, 1391,
	1228, 620, 1147, 1205, 1067, 1275, 1202, 1035, 827, 894,
	283, 27, 1104, 1110, 1076, 742, 717, 282, 16, 284,
	8, 1246, 949, 576, 619, 988, 20, 464, 610, 61,
	577, 992, 523, 514, 1045, 517, 899, 1864, 1117, 469,
	516, 62, 458, 593, 76, 1144, 594, 825, 829, 592,
	746, 510, 398, 80, 597, 467, 575, 1885, 410, 1435,
	1886, 902, 903, 755, 755, 1044, 1080, 1048, 407, 755,
	463, 2032, 463, 63, 735, 264, 2012, 2003, 1404, 1862,
	735, 625, 27, 1993, 905, 1439, 1073, 902, 903, 16,
	1440, 8, 1987, 495, 1986, 735, 1345, 735, 1959, 770,
	1346, 1073, 1951, 456, 1938, 735, 904, 1862, 1928, 1081,
	905, 735, 642, 265, 486, 477, 417, 67, 483, 902,
	903, 490, 471, 1923, 1438, 1896, 1922, 446, 1073, 1086,
	1893, 1873, 904, 764, 1862, 455, 1870, 727, 1861, 735,
	69, 1862, 905, 1839, 1838, 1036, 735, 735, 1082, 1079,
	1816, 478, 1086, 1086, 485, 488, 1795, 478, 1036, 1086,
	1792, 910, 1782, 1073, 904, 1086, 1944, 1394, 1730, 70,
	919, 1086, 84, 84, 84, 84, 84, 65, 526, 1729,
	1039, 1715, 1086, 66, 735, 1626, 1561, 910, 1086, 1042,
	1555, 1514, 1512, 1042, 1515, 1086, 1511, 1510, 1436, 1086,
	1086, 1086, 64, 900, 901, 1086, 499, 1446, 519, 519,
	1039, 1373, 1394, 920, 735, 67, 1084, 1679, 1629, 910,
	902, 903, 1139, 1090, 1085, 735, 1086, 1086, 1371, 1005,
	1072, 902, 903, 1073, 1374, 1222, 756, 756, 69, 920,
	464, 524, 756, 905, 1041, 1004, 763, 1042, 1003, 764,
	1134, 1098, 605, 866, 905, 865, 819, 818, 735, 493,
	539, 476, 1865, 71, 67, 904, 1407, 70, 1467, 1468,
	850, 920, 559, 2030, 2014, 65, 904, 2010, 2002, 921,
	1078, 66, 1954, 1871, 1821, 1817, 604, 69, 1809, 1808,
	1807, 1803, 1802, 1801, 84, 1745, 1694, 1689, 1739, 1688,
	1047, 965, 1077, 1376, 503, 921, 1687, 1345, 1637, 84,
	1613, 520, 84, 84, 1590, 1565, 70, 511, 1519, 1516,
	910, 1504, 1495, 1466, 1463, 1462, 1460, 1452, 1451, 708,
	1372, 910, 1292, 1243, 1242, 501, 1405, 921, 759, 754,
	604, 1563, 603, 1214, 869, 959, 84, 64, 84, 64,
	84, 84, 84, 478, 84, 488, 915, 912, 913, 914,
	906, 907, 908, 909, 911, 876, 931, 1645, 1473, 84,
	1976, 1941, 1921, 1915, 1913, 1904, 1889, 591, 1882, 1868,
	84, 902, 903, 583, 1859, 586, 906, 907, 908, 909,
	911, 1831, 931, 526, 84, 1925, 1814, 1784, 1755, 1735,
	292, 526, 1621, 84, 905, 1583, 902, 903, 84, 84,
	84, 900, 84, 1581, 915, 912, 913, 914, 906, 907,
	908, 909, 911, 707, 931, 1580, 904, 736, 1578, 731,
	1531, 84, 84, 1738, 590, 1215, 1530, 739, 547, 84,
	1494, 84, 744, 1456, 1455, 548, 1467, 1468, 811, 1432,
	1427, 904, 526, 526, 1207, 1361, 1319, 706, 817, 1318,
	292, 84, 1306, 84, 84, 84, 84, 84, 84, 84,
	542, 544, 1305, 1285, 84, 84, 1241, 1138, 993, 996,
	84, 1000, 986, 985, 984, 983, 982, 851, 84, 1306,
	981, 980, 979, 582, 613, 978, 977, 578, 976, 975,
	974, 973, 758, 972, 971, 761, 84, 970, 456, 84,
	963, 952, 64, 875, 580, 870, 600, 601, 902, 903,
	481, 908, 909, 911, 606, 931, 608, 499, 1988, 478,
	906, 907, 908, 909, 911, 545, 931, 955, 502, 1797,
	455, 905, 535, 533, 1786, 1744, 1473, 734, 1743, 959,
	1355, 1354, 950, 511, 902, 903, 902, 903, 708, 745,
	748, 709, 1887, 904, 723, 1387, 868, 1469, 1470, 1471,
	1472, 1474, 767, 553, 1742, 880, 765, 905, 845, 844,
	1347, 838, 835, 813, 743, 815, 1036, 464, 1407, 478,
	747, 747, 814, 998, 1518, 874, 1517, 999, 1412, 904,
	840, 569, 85, 847, 554, 968, 1329, 855, 1767, 989,
	1044, 84, 485, 488, 966, 1646, 1229, 1443, 910, 84,
	1341, 1525, 898, 84, 573, 1969, 453, 84, 84, 708,
	702, 84, 701, 718, 2027, 719, 84, 1927, 884, 456,
	883, 882, 456, 456, 293, 896, 776, 1367, 867, 1723,
	84, 1562, 84, 84, 910, 84, 574, 654, 84, 848,
	84, 84, 1847, 84, 272, 526, 445, 846, 444, 1010,
	920, 890, 1009, 962, 891, 892, 1089, 852, 1542, 268,
	856, 857, 858, 859, 860, 74, 931, 439, 1064, 2028,
	863, 864, 1080, 1061, 519, 440, 519, 718, 1009, 719,
	1734, 1046, 1846, 1046, 1008, 720, 920, 1546, 1545, 990,
	991, 931, 1522, 1521, 1021, 1023, 805, 273, 1415, 994,
	1017, 61, 551, 1068, 1360, 997, 61, 269, 524, 718,
	1359, 719, 849, 1358, 1357, 1081, 921, 399, 73, 1190,
	1926, 462, 1087, 1001, 1033, 1032, 1038, 1471, 1472, 1474,
	1029, 292, 579, 492, 1289, 84, 1261, 1013, 404, 1424,
	1288, 552, 1161, 400, 1129, 448, 1549, 1030, 1026, 720,
	84, 84, 921, 1422, 1082, 1079, 1034, 84, 1103, 1070,
	1836, 1020, 1204, 1050, 461, 1551, 1069, 401, 1071, 1204,
	531, 1060, 1002, 1974, 1331, 1059, 1062, 1065, 1063, 740,
	724, 720, 84, 449, 478, 84, 403, 749, 488, 1570,
	1140, 1567, 478, 1229, 912, 913, 914, 906, 907, 908,
	909, 911, 454, 931, 1533, 994, 450, 997, 1317, 1084,
	463, 1055, 2049, 991, 990, 451, 488, 2038, 1160, 488,
	292, 274, 1084, 1092, 1420, 725, 1335, 2044, 1425, 1091,
	1568, 570, 914, 906, 907, 908, 909, 911, 1324, 931,
	1366, 931, 72, 1132, 1133, 1219, 755, 1212, 271, 270,
	1019, 1200, 1223, 275, 1553, 724, 1231, 1084, 2027, 1540,
	527, 1211, 1339, 839, 836, 1198, 1209, 1248, 1248, 1259,
	1107, 1270, 716, 1343, 75, 721, 1106, 1282, 1283, 1284,
	1999, 744, 1916, 402, 1711, 1006, 1078, 84, 84, 84,
	571, 1321, 1291, 84, 530, 1108, 84, 460, 1084, 729,
	1335, 728, 84, 84, 84, 84, 84, 1368, 550, 1141,
	84, 1990, 1124, 84, 84, 572, 1712, 987, 1421, 2037,
	526, 396, 1018, 84, 1094, 1423, 1860, 405, 84, 1226,
	84, 478, 1900, 1991, 1196, 1096, 1195, 84, 947, 721,
	1201, 1454, 1601, 1299, 289, 1187, 1837, 84, 1399, 1534,
	2042, 1216, 1213, 1097, 549, 1612, 1330, 463, 1550, 2000,
	1236, 1998, 1095, 1145, 2026, 2024, 399, 1402, 84, 84,
	1760, 721, 1126, 562, 540, 538, 1293, 1256, 1599, 526,
	1675, 596, 1151, 1159, 1417, 2050, 1400, 404, 60, 1327,
	464, 1203, 400, 595, 1841, 776, 776, 1337, 1316, 84,
	2043, 84, 1294, 84, 1707, 2001, 1708, 84, 2036, 1840,
	1395, 84, 704, 550, 39, 703, 401, 596, 2045, 756,
	289, 2055, 40, 1812, 1829, 1349, 1722, 1350, 1351, 84,
	1197, 1719, 1910, 1721, 1710, 403, 1379, 1199, 1185, 1188,
	1524, 1713, 1302, 1340, 41, 1298, 1127, 1711, 1375, 1704,
	1377, 881, 1348, 872, 1566, 1401, 1378, 1702, 1399, 1964,
	1381, 1706, 651, 1676, 60, 1184, 862, 595, 1295, 1677,
	820, 889, 1762, 1068, 1586, 527, 61, 1402, 1830, 1712,
	1363, 1364, 293, 527, 1210, 1410, 1308, 1369, 1397, 1780,
	39, 464, 1352, 1365, 1303, 1323, 1400, 1370, 40, 1705,
	1430, 1307, 1775, 824, 1333, 1596, 1709, 776, 1433, 743,
	1398, 2054, 1813, 1395, 1595, 549, 509, 508, 743, 1718,
	41, 1720, 461, 1390, 1389, 1774, 1449, 1450, 478, 1070,
	1393, 1409, 402, 1445, 527, 527, 1069, 587, 1071, 1576,
	822, 1746, 293, 1326, 799, 1592, 798, 1781, 1392, 1186,
	464, 823, 1240, 1353, 67, 1903, 1827, 1811, 1498, 1493,
	52, 1399, 1620, 1548, 1461, 1401, 776, 1707, 1426, 1708,
	1506, 775, 1418, 1332, 1416, 1088, 405, 69, 1828, 1040,
	1402, 568, 567, 566, 565, 564, 563, 84, 1382, 560,
	1431, 1397, 1303, 507, 500, 1499, 969, 1710, 854, 1400,
	1239, 1994, 1411, 1961, 1713, 776, 70, 1700, 1442, 464,
	1145, 1543, 1544, 1398, 65, 1538, 1536, 1523, 1383, 1130,
	66, 1122, 1066, 1773, 762, 760, 84, 84, 757, 752,
	67, 730, 726, 722, 1634, 1557, 52, 1385, 1854, 64,
	598, 474, 2028, 556, 1136, 842, 1856, 77, 506, 1025,
	505, 1554, 84, 69, 1956, 84, 1009, 84, 1501, 1502,
	1503, 1865, 1024, 1918, 84, 1593, 602, 526, 1401, 1709,
	1028, 1520, 287, 23, 3, 84, 1027, 1537, 84, 1539,
	1945, 1527, 70, 1758, 1125, 292, 1582, 84, 285, 22,
	65, 1121, 1541, 1604, 286, 11, 66, 635, 1607, 1552,
	1529, 1547, 1137, 1588, 1049, 897, 1579, 1556, 599, 475,
	288, 10, 1605, 280, 9, 1615, 1614, 1559, 1587, 1558,
	1560, 279, 7, 557, 1316, 1627, 494, 81, 81, 266,
	497, 1594, 498, 1623, 1597, 84, 1569, 1571, 1572, 438,
	390, 391, 392, 1577, 23, 409, 482, 527, 421, 61,
	1639, 1640, 1641, 1009, 395, 1589, 409, 816, 768, 1022,
	22, 1598, 1075, 470, 470, 2052, 11, 266, 1602, 1603,
	266, 266, 489, 266, 281, 4, 81, 496, 2053, 1467,
	1468, 1695, 10, 902, 903, 9, 1573, 1680, 1100, 1099,
	1564, 1513, 1356, 7, 1290, 441, 442, 1630, 1690, 1287,
	1286, 406, 84, 84, 84, 1237, 1101, 1055, 1145, 956,
	1633, 84, 84, 1799, 1973, 1647, 1649, 84, 1853, 84,
	1642, 84, 84, 84, 1380, 1654, 84, 84, 1102, 526,
	1652, 964, 447, 293, 1835, 397, 853, 561, 1989, 1804,
	1453, 1682, 1878, 1899, 1238, 967, 4, 38, 1750, 629,
	1701, 1526, 1262, 1116, 1699, 1115, 1145, 295, 843, 1145,
	650, 84, 84, 1683, 828, 739, 837, 1247, 526, 1152,
	1696, 705, 652, 773, 653, 774, 84, 84, 1754, 995,
	84, 641, 771, 1754, 1053, 84, 1769, 1753, 1777, 1208,
	1740, 84, 1753, 1227, 1441, 960, 526, 621, 1759, 633,
	632, 1733, 1224, 1785, 1764, 532, 1752, 1778, 1403, 1741,
	51, 1752, 546, 799, 799, 798, 798, 1736, 415, 1763,
	776, 416, 293, 1338, 1716, 1717, 84, 1791, 1737, 1131,
	1757, 885, 1770, 1771, 1535, 1765, 1776, 452, 1151, 1650,
	775, 775, 1464, 534, 1268, 1260, 801, 1151, 1655, 800,
	1257, 776, 776, 581, 711, 948, 1054, 1787, 464, 524,
	776, 776, 558, 1344, 1074, 607, 893, 473, 472, 266,
	512, 266, 421, 421, 1756, 1111, 555, 821, 1093, 941,
	1686, 84, 938, 84, 443, 84, 84, 1912, 1123, 1301,
	2048, 1917, 1532, 776, 84, 1968, 772, 1810, 68, 1924,
	1851, 1325, 1726, 26, 24, 21, 19, 18, 1732, 17,
	25, 15, 14, 13, 12, 37, 36, 35, 1825, 84,
	34, 33, 527, 32, 6, 799, 5, 798, 2, 1467,
	1468, 1823, 1, 0, 1849, 0, 0, 1822, 0, 0,
	0, 84, 0, 0, 526, 0, 0, 1866, 84, 0,
	0, 0, 775, 0, 0, 1754, 84, 1145, 1145, 0,
	0, 1145, 0, 0, 1753, 84, 84, 0, 1848, 1857,
	1869, 0, 1888, 812, 0, 0, 1892, 1262, 1262, 0,
	1876, 527, 0, 1752, 799, 0, 798, 1877, 0, 1844,
	1845, 536, 1881, 1872, 0, 1875, 0, 0, 0, 0,
	0, 1891, 1898, 0, 0, 0, 541, 0, 84, 421,
	421, 775, 1884, 0, 776, 0, 0, 0, 0, 0,
	1905, 1914, 0, 799, 0, 798, 0, 84, 84, 1473,
	0, 0, 1855, 0, 0, 0, 0, 84, 1262, 1262,
	1262, 84, 0, 409, 1908, 266, 84, 421, 585, 421,
	775, 588, 0, 1931, 0, 0, 526, 1909, 1939, 0,
	0, 1937, 1754, 84, 1933, 1940, 470, 1935, 292, 84,
	84, 1753, 1949, 84, 0, 1833, 1952, 266, 1890, 1934,
	1932, 1483, 0, 744, 0, 0, 0, 1943, 0, 1947,
	1752, 81, 1942, 0, 84, 1948, 84, 84, 1953, 84,
	266, 1955, 464, 1843, 0, 266, 266, 266, 0, 750,
	1958, 0, 0, 0, 1971, 0, 776, 0, 1977, 1975,
	0, 1972, 1874, 0, 0, 84, 0, 1981, 266, 266,
	1980, 61, 1970, 1978, 0, 0, 81, 1145, 81, 1979,
	1985, 1754, 1984, 0, 0, 0, 1983, 1484, 0, 1992,
	1753, 0, 0, 0, 0, 84, 1982, 84, 421, 0,
	81, 421, 421, 421, 421, 421, 861, 2011, 2007, 1752,
	0, 421, 421, 2006, 2004, 84, 1946, 409, 2013, 2009,
	1467, 1468, 0, 1950, 2023, 879, 2025, 2021, 0, 0,
	2029, 1262, 1262, 0, 84, 0, 0, 2034, 2031, 2035,
	0, 0, 0, 470, 2033, 0, 496, 776, 0, 1966,
	0, 0, 2047, 2046, 0, 801, 801, 0, 800, 800,
	2051, 0, 0, 0, 1478, 1475, 1476, 1477, 1469, 1470,
	1471, 1472, 1474, 0, 2056, 0, 0, 0, 0, 1428,
	1429, 1467, 1468, 0, 1262, 1262, 1262, 1262, 1262, 1262,
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
	1262, 1262, 1262, 0, 1262, 772, 772, 700, 0, 527,
	2008, 0, 0, 0, 0, 0, 0, 0, 1967, 0,
	1473, 0, 1467, 1468, 0, 0, 0, 293, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 776, 0, 0,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 266, 294,
	0, 0, 0, 0, 0, 0, 1014, 289, 0, 0,
	266, 0, 0, 0, 266, 1031, 0, 801, 266, 0,
	800, 0, 1483, 1037, 0, 0, 1055, 0, 799, 0,
	798, 1473, 0, 0, 0, 0, 0, 266, 0, 1057,
	1058, 0, 266, 0, 0, 266, 0, 421, 421, 0,
	421, 60, 0, 0, 0, 775, 0, 0, 0, 799,
	799, 798, 798, 0, 0, 0, 0, 772, 799, 799,
	798, 798, 1473, 0, 0, 0, 801, 39, 0, 800,
	0, 0, 0, 1483, 0, 40, 775, 775, 1484, 630,
	49, 0, 0, 0, 0, 775, 775, 0, 0, 0,
	0, 799, 0, 798, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 800, 0,
	0, 527, 0, 0, 1483, 0, 772, 0, 775, 0,
	49, 0, 0, 0, 0, 0, 611, 611, 0, 0,
	0, 0, 1105, 1618, 1619, 713, 0, 0, 0, 1484,
	0, 457, 1467, 1468, 465, 0, 0, 266, 1112, 0,
	527, 49, 0, 0, 496, 772, 1475, 1476, 1477, 1469,
	1470, 1471, 1472, 1474, 0, 0, 0, 1262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 266,
	1484, 0, 421, 0, 0, 0, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 0, 1678, 67, 0, 0,
	0, 0, 799, 52, 798, 0, 1478, 1475, 1476, 1477,
	1469, 1470, 1471, 1472, 1474, 528, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 775,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 886,
	888, 0, 0, 0, 0, 0, 895, 0, 0, 70,
	1477, 1469, 1470, 1471, 1472, 1474, 1262, 65, 942, 943,
	944, 945, 946, 66, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 266, 1296, 1297, 0, 961, 0,
	1014, 0, 277, 1304, 1483, 0, 0, 0, 0, 1309,
	1310, 1312, 1314, 1315, 0, 0, 0, 1320, 0, 0,
	1322, 266, 0, 0, 799, 0, 798, 0, 0, 0,
	266, 0, 0, 0, 0, 266, 527, 1342, 0, 0,
	0, 0, 0, 0, 266, 0, 0, 0, 0, 0,
	0, 775, 0, 422, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 465, 1262, 0,
	1484, 423, 0, 0, 0, 1105, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 425, 879, 0,
	421, 0, 430, 431, 266, 799, 436, 798, 1388, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 424, 426,
	801, 0, 0, 800, 0, 0, 266, 0, 0, 1832,
	0, 0, 775, 0, 0, 0, 0, 0, 527, 0,
	528, 1469, 1470, 1471, 1472, 1474, 0, 294, 528, 0,
	293, 801, 801, 0, 800, 800, 0, 427, 0, 0,
	801, 801, 0, 800, 800, 0, 0, 0, 0, 0,
	772, 428, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 432, 0, 0,
	0, 0, 0, 801, 0, 799, 800, 798, 0, 528,
	528, 772, 772, 0, 0, 0, 0, 294, 0, 0,
	772, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 775, 0, 0, 0, 0, 0, 1902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 772, 0, 0, 457, 0, 0, 0,
	0, 0, 0, 0, 611, 0, 0, 0, 0, 0,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 0, 1189, 496, 1191, 1192, 1193, 1194, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 0,
	434, 0, 0, 0, 1217, 435, 0, 0, 0, 0,
	0, 0, 0, 0, 801, 0, 0, 800, 0, 437,
	1957, 0, 0, 266, 266, 0, 1244, 1245, 0, 0,
	1258, 0, 1269, 1271, 1276, 1279, 1280, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1574,
	0, 0, 1014, 0, 879, 0, 0, 713, 0, 0,
	0, 1584, 0, 0, 772, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 266, 0, 457, 0, 0,
	457, 457, 0, 0, 1611, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 951, 0, 953, 0, 0, 0, 0, 0,
	0, 957, 528, 0, 0, 0, 801, 0, 0, 800,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1644, 0, 0, 0, 0, 0, 0, 0,
	1362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 1697,
	1698, 1014, 0, 0, 0, 0, 0, 801, 496, 496,
	800, 0, 0, 0, 1724, 0, 1725, 0, 266, 1727,
	1728, 0, 0, 1731, 266, 0, 49, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 49, 1419, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 1749, 772, 496, 1112,
	0, 1749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 266, 0, 1437, 266, 0, 0,
	0, 0, 1611, 1444, 902, 903, 1448, 294, 1783, 0,
	932, 933, 934, 0, 0, 1457, 0, 801, 0, 0,
	800, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 1805, 0, 0, 1276, 1276, 1276, 904,
	0, 0, 0, 0, 0, 919, 0, 0, 0, 1467,
	1468, 0, 1485, 1486, 1487, 0, 0, 772, 0, 0,
	0, 0, 0, 0, 0, 1789, 0, 0, 0, 1528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	1824, 1146, 421, 1826, 910, 0, 0, 528, 0, 611,
	1482, 266, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 713, 0, 929, 937, 0, 0, 0, 0, 0,
	0, 0, 1850, 0, 0, 0, 496, 1206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 1749, 0, 0, 920, 0, 266, 1473,
	0, 0, 0, 0, 0, 1880, 528, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 496, 1611, 0, 0, 1616, 0, 0, 1617,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	1622, 0, 0, 0, 0, 0, 0, 0, 0, 1631,
	0, 1483, 0, 0, 0, 0, 0, 1635, 0, 0,
	1362, 0, 921, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 1651, 0, 1467, 1468, 1653,
	1485, 1486, 1487, 0, 1919, 1920, 0, 465, 0, 0,
	0, 0, 0, 1788, 1929, 0, 0, 0, 1930, 0,
	1749, 0, 0, 421, 0, 0, 0, 0, 0, 0,
	0, 0, 1684, 1685, 0, 0, 0, 1484, 0, 0,
	496, 1691, 1692, 1693, 0, 0, 1611, 496, 1482, 0,
	1611, 0, 928, 0, 0, 0, 0, 0, 0, 915,
	912, 913, 914, 906, 907, 908, 909, 911, 0, 931,
	0, 1965, 0, 496, 266, 0, 421, 0, 0, 0,
	0, 49, 0, 0, 0, 49, 0, 611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 49, 1749,
	0, 0, 1880, 0, 0, 0, 0, 0, 1408, 0,
	1479, 1480, 1481, 0, 1478, 1475, 1476, 1477, 1469, 1470,
	1471, 1472, 1474, 0, 0, 0, 1768, 0, 0, 0,
	0, 1488, 266, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1206, 1483,
	0, 0, 2022, 0, 1790, 0, 0, 0, 1793, 1794,
	0, 0, 0, 1796, 0, 0, 0, 953, 0, 0,
	1798, 1611, 1800, 0, 0, 0, 0, 0, 0, 0,
	1806, 0, 902, 903, 0, 922, 923, 924, 932, 933,
	934, 0, 0, 0, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 0, 0, 905, 0, 0, 936, 0,
	0, 0, 0, 1815, 528, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 904, 0, 0,
	0, 0, 294, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 1867, 0, 0, 1479, 1480,
	1481, 0, 1478, 1475, 1476, 1477, 1469, 1470, 1471, 1472,
	1474, 929, 937, 0, 0, 0, 1146, 0, 1883, 1467,
	1468, 0, 1485, 1486, 1487, 0, 935, 0, 0, 0,
	0, 0, 1894, 1895, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 0, 0,
	902, 903, 0, 922, 923, 924, 932, 933, 934, 0,
	0, 0, 1907, 0, 1146, 0, 0, 1146, 926, 0,
	1482, 0, 0, 905, 0, 1911, 936, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 528, 0, 0, 0,
	0, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 919, 0, 713, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 930, 0, 0, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 528, 0, 0, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 0, 0, 0, 0, 929,
	937, 1483, 925, 0, 0, 0, 0, 0, 0, 905,
	928, 0, 936, 916, 917, 918, 0, 915, 912, 913,
	914, 906, 907, 908, 909, 911, 927, 931, 0, 0,
	0, 904, 920, 0, 1818, 0, 0, 919, 0, 0,
	0, 0, 0, 2005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1468, 49, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 2020, 2020, 0, 1484, 0, 1625,
	0, 0, 0, 0, 902, 903, 0, 922, 923, 924,
	932, 933, 934, 0, 0, 0, 910, 0, 0, 0,
	925, 2020, 0, 0, 0, 1146, 1146, 905, 921, 1146,
	936, 0, 0, 0, 1482, 929, 937, 0, 0, 0,
	930, 0, 0, 0, 0, 465, 0, 0, 0, 904,
	935, 0, 0, 0, 0, 919, 2020, 0, 0, 0,
	0, 528, 927, 0, 0, 0, 0, 0, 920, 0,
	1479, 1480, 1481, 0, 1478, 1475, 1476, 1477, 1469, 1470,
	1471, 1472, 1474, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 928, 0,
	0, 916, 917, 918, 910, 915, 912, 913, 914, 906,
	907, 908, 909, 911, 0, 931, 0, 1488, 0, 0,
	0, 0, 0, 929, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 1483, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	927, 0, 0, 0, 0, 0, 920, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1858, 528, 0, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 294, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 928, 1146, 0, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 921, 0, 0, 0, 0, 0, 1509, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 1480, 1481, 0, 1478, 1475,
	1476, 1477, 1469, 1470, 1471, 1472, 1474, 0, 0, 953,
	0, 0, 928, 0, 0, 916, 917, 918, 0, 915,
	912, 913, 914, 906, 907, 908, 909, 911, 291, 931,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 49, 86, 87, 310, 88, 311, 312,
	313, 314, 214, 315, 316, 317, 318, 89, 90, 91,
	215, 216, 217, 218, 92, 219, 220, 319, 93, 221,
	222, 94, 320, 321, 223, 224, 225, 322, 226, 323,
	296, 324, 95, 96, 97, 0, 98, 325, 99, 100,
	101, 326, 297, 102, 103, 327, 328, 329, 330, 331,
	332, 104, 105, 267, 106, 227, 107, 228, 229, 333,
	108, 334, 109, 335, 336, 337, 110, 111, 338, 112,
	339, 0, 340, 230, 113, 114, 231, 232, 341, 342,
	343, 115, 116, 233, 0, 117, 344, 118, 345, 346,
	298, 347, 119, 234, 348, 235, 349, 120, 121, 122,
	123, 236, 237, 300, 350, 126, 351, 124, 352, 299,
	125, 238, 239, 240, 241, 353, 242, 354, 301, 127,
	302, 128, 129, 355, 131, 130, 356, 243, 303, 132,
	304, 357, 133, 358, 359, 134, 0, 135, 136, 137,
	138, 139, 305, 140, 141, 144, 142, 360, 143, 361,
	244, 145, 245, 146, 147, 362, 148, 363, 364, 149,
	365, 366, 150, 246, 306, 151, 307, 247, 152, 153,
	154, 155, 367, 248, 156, 249, 157, 368, 158, 159,
	160, 250, 161, 162, 369, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 370, 173, 308, 174, 175,
	251, 176, 0, 177, 178, 179, 180, 371, 252, 181,
	182, 372, 183, 184, 309, 185, 253, 254, 186, 373,
	192, 187, 188, 189, 191, 255, 190, 256, 374, 193,
	375, 194, 195, 196, 376, 257, 258, 259, 377, 378,
	197, 260, 261, 379, 198, 199, 200, 201, 380, 381,
	202, 203, 204, 382, 205, 383, 206, 207, 208, 262,
	263, 384, 385, 209, 386, 387, 388, 389, 210, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1606, 86,
	87, 310, 88, 311, 312, 313, 314, 214, 315, 316,
	317, 318, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 319, 93, 221, 222, 94, 320, 321, 223,
	224, 225, 322, 226, 323, 296, 324, 95, 96, 97,
	0, 98, 325, 99, 100, 101, 326, 297, 102, 103,
	327, 328, 329, 330, 331, 332, 104, 105, 267, 106,
	227, 107, 228, 229, 333, 108, 334, 109, 335, 336,
	337, 110, 111, 338, 112, 339, 0, 340, 230, 113,
	114, 231, 232, 341, 342, 343, 115, 116, 233, 0,
	117, 344, 118, 345, 346, 298, 347, 119, 234, 348,
	235, 349, 120, 121, 122, 123, 236, 237, 300, 350,
	126, 351, 124, 352, 299, 125, 238, 239, 240, 241,
	353, 242, 354, 301, 127, 302, 128, 129, 355, 131,
	130, 356, 243, 303, 132, 304, 357, 133, 358, 359,
	134, 0, 135, 136, 137, 138, 139, 305, 140, 141,
	144, 142, 360, 143, 361, 244, 145, 245, 146, 147,
	362, 148, 363, 364, 149, 365, 366, 150, 246, 306,
	151, 307, 247, 152, 153, 154, 155, 367, 248, 156,
	249, 157, 368, 158, 159, 160, 250, 161, 162, 369,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	370, 173, 308, 174, 175, 251, 176, 0, 177, 178,
	179, 180, 371, 252, 181, 182, 372, 183, 184, 309,
	185, 253, 254, 186, 373, 192, 187, 188, 189, 191,
	255, 190, 256, 374, 193, 375, 194, 195, 196, 376,
	257, 258, 259, 377, 378, 197, 260, 261, 379, 198,
	199, 200, 201, 380, 381, 202, 203, 204, 382, 205,
	383, 206, 207, 208, 262, 263, 384, 385, 209, 386,
	387, 388, 389, 210, 211, 212, 213, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 86, 87, 310, 88, 311, 312, 313,
	314, 214, 315, 316, 317, 318, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 319, 93, 221, 222,
	94, 320, 321, 223, 224, 225, 322, 226, 323, 296,
	324, 95, 96, 97, 0, 98, 325, 99, 100, 101,
	326, 297, 102, 103, 327, 328, 329, 330, 331, 332,
	104, 105, 267, 106, 227, 107, 228, 229, 333, 108,
	334, 109, 335, 336, 337, 110, 111, 338, 112, 339,
	0, 340, 230, 113, 114, 231, 232, 341, 342, 343,
	115, 116, 233, 0, 117, 344, 118, 345, 346, 298,
	347, 119, 234, 348, 235, 349, 120, 121, 122, 123,
	236, 237, 300, 350, 126, 351, 124, 352, 299, 125,
	238, 239, 240, 241, 353, 242, 354, 301, 127, 302,
	128, 129, 355, 131, 130, 356, 243, 303, 132, 304,
	357, 133, 358, 359, 134, 0, 135, 136, 137, 138,
	139, 305, 140, 141, 144, 142, 360, 143, 361, 244,
	145, 245, 146, 147, 362, 148, 363, 364, 149, 365,
	366, 150, 246, 306, 151, 307, 247, 152, 153, 154,
	155, 367, 248, 156, 249, 157, 368, 158, 159, 160,
	250, 161, 162, 369, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 370, 173, 308, 174, 175, 251,
	176, 0, 177, 178, 179, 180, 371, 252, 181, 182,
	372, 183, 184, 309, 185, 253, 254, 186, 373, 192,
	187, 188, 189, 191, 255, 190, 256, 374, 193, 375,
	194, 195, 196, 376, 257, 258, 259, 377, 378, 197,
	260, 261, 379, 198, 199, 200, 201, 380, 381, 202,
	203, 204, 382, 205, 383, 206, 207, 208, 262, 263,
	384, 385, 209, 386, 387, 388, 389, 210, 211, 212,
	213, 648, 638, 639, 636, 637, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 1233,
	88, 0, 0, 0, 0, 664, 631, 0, 0, 0,
	89, 90, 91, 215, 679, 217, 680, 92, 681, 682,
	0, 93, 221, 222, 94, 634, 663, 683, 684, 225,
	0, 675, 0, 656, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 657,
	659, 0, 658, 660, 104, 105, 267, 106, 685, 107,
	686, 687, 0, 108, 0, 109, 0, 1234, 0, 678,
	111, 0, 112, 0, 0, 0, 622, 113, 114, 665,
	666, 644, 0, 0, 115, 116, 688, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 676, 0, 235, 0,
	120, 121, 122, 123, 672, 674, 300, 0, 126, 0,
	124, 0, 299, 125, 689, 690, 691, 692, 0, 655,
	0, 301, 127, 302, 128, 129, 0, 131, 130, 0,
	677, 303, 132, 304, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 305, 140, 141, 144, 142,
	617, 143, 645, 673, 145, 693, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 306, 151, 307,
	667, 152, 153, 154, 155, 0, 668, 156, 249, 157,
	0, 158, 159, 160, 694, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	308, 174, 175, 623, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 661, 183, 184, 309, 185, 695,
	254, 186, 0, 192, 187, 188, 189, 191, 696, 190,
	669, 0, 193, 0, 194, 195, 196, 0, 257, 697,
	698, 0, 0, 197, 670, 671, 643, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 662, 205, 0, 206,
	207, 208, 262, 699, 1232, 0, 209, 0, 0, 0,
	0, 210, 211, 212, 213, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 615, 1235, 0,
	0, 0, 616, 0, 0, 624, 1230, 0, 0, 0,
	627, 648, 638, 639, 636, 637, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 664, 631, 0, 0, 0,
	89, 90, 91, 215, 679, 217, 680, 92, 681, 682,
	0, 93, 221, 222, 94, 634, 663, 683, 684, 225,
	0, 675, 0, 656, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 657,
	659, 0, 658, 660, 104, 105, 267, 106, 685, 107,
	686, 687, 714, 108, 0, 109, 0, 0, 0, 678,
	111, 0, 112, 0, 0, 0, 622, 113, 114, 665,
	666, 644, 0, 0, 115, 116, 688, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 676, 0, 235, 0,
	120, 121, 122, 123, 672, 674, 300, 0, 126, 0,
	124, 0, 299, 125, 689, 690, 691, 692, 0, 655,
	0, 301, 127, 302, 128, 129, 0, 131, 130, 0,
	677, 303, 132, 304, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 305, 140, 141, 144, 142,
	617, 143, 645, 673, 145, 693, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 306, 151, 307,
	667, 152, 153, 154, 155, 0, 668, 156, 249, 157,
	0, 158, 159, 160, 694, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	308, 174, 175, 623, 176, 0, 177, 178, 179, 180,
	67, 252, 181, 182, 661, 183, 184, 309, 185, 695,
	254, 186, 0, 192, 187, 188, 189, 191, 696, 190,
	669, 0, 193, 69, 194, 195, 196, 0, 257, 697,
	698, 0, 0, 197, 670, 671, 643, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 662, 205, 0, 206,
	207, 208, 529, 699, 0, 0, 209, 0, 0, 0,
	65, 210, 211, 212, 213, 618, 66, 648, 638, 639,
	636, 637, 628, 0, 0, 0, 614, 615, 0, 0,
	0, 0, 616, 86, 87, 624, 88, 0, 0, 0,
	627, 664, 631, 0, 0, 0, 89, 90, 91, 215,
	679, 217, 680, 92, 681, 682, 0, 93, 221, 222,
	94, 634, 663, 683, 684, 225, 0, 675, 0, 656,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 297, 102, 103, 0, 657, 659, 0, 658, 660,
	104, 105, 267, 106, 685, 107, 686, 687, 0, 108,
	0, 109, 0, 0, 0, 678, 111, 0, 112, 0,
	0, 0, 622, 113, 114, 665, 666, 644, 0, 0,
	115, 116, 688, 0, 117, 0, 118, 0, 0, 298,
	0, 119, 676, 0, 235, 0, 120, 121, 122, 123,
	672, 674, 300, 0, 126, 0, 124, 0, 299, 125,
	689, 690, 691, 692, 0, 655, 0, 301, 127, 302,
	128, 129, 0, 131, 130, 0, 677, 303, 132, 304,
	0, 133, 0, 0, 134, 0, 135, 136, 137, 138,
	139, 305, 140, 141, 144, 142, 617, 143, 645, 673,
	145, 693, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 246, 306, 151, 307, 667, 152, 153, 154,
	155, 0, 668, 156, 249, 157, 0, 158, 159, 160,
	694, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 308, 174, 175, 623,
	176, 0, 177, 178, 179, 180, 67, 252, 181, 182,
	661, 183, 184, 309, 185, 695, 254, 186, 0, 192,
	187, 188, 189, 191, 696, 190, 669, 0, 193, 69,
	194, 195, 196, 0, 257, 697, 698, 0, 0, 197,
	670, 671, 643, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 662, 205, 0, 206, 207, 208, 529, 699,
	0, 0, 209, 0, 0, 0, 65, 210, 211, 212,
	213, 618, 66, 648, 638, 639, 636, 637, 628, 0,
	0, 0, 614, 615, 0, 0, 0, 0, 616, 86,
	87, 624, 88, 0, 0, 0, 627, 664, 631, 0,
	0, 0, 89, 90, 91, 215, 679, 217, 680, 92,
	681, 682, 1272, 93, 221, 222, 94, 634, 663, 683,
	684, 225, 0, 675, 0, 656, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 657, 659, 0, 658, 660, 104, 105, 267, 106,
	685, 107, 686, 687, 0, 108, 0, 109, 0, 0,
	0, 678, 111, 0, 112, 0, 0, 0, 622, 113,
	114, 665, 666, 644, 0, 0, 115, 116, 688, 0,
	117, 0, 118, 0, 1277, 298, 0, 119, 676, 0,
	235, 0, 120, 121, 122, 123, 672, 674, 300, 0,
	126, 0, 124, 0, 299, 125, 689, 690, 691, 692,
	0, 655, 0, 301, 127, 302, 128, 129, 0, 131,
	130, 1273, 677, 303, 132, 304, 0, 133, 0, 0,
	134, 0, 135, 136, 137, 138, 139, 305, 140, 141,
	144, 142, 617, 143, 645, 673, 145, 693, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 246, 306,
	151, 307, 667, 152, 153, 154, 155, 0, 668, 156,
	249, 157, 0, 158, 159, 160, 694, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 308, 174, 175, 623, 176, 0, 177, 178,
	179, 180, 0, 252, 181, 182, 661, 183, 184, 309,
	185, 695, 254, 186, 0, 192, 187, 188, 189, 191,
	696, 190, 669, 0, 193, 0, 194, 195, 196, 0,
	257, 697, 698, 0, 1274, 197, 670, 671, 643, 198,
	199, 200, 201, 0, 0, 202, 203, 204, 662, 205,
	0, 206, 207, 208, 262, 699, 0, 0, 209, 0,
	0, 0, 0, 210, 211, 212, 213, 618, 0, 648,
	638, 639, 636, 637, 628, 0, 0, 0, 614, 615,
	0, 0, 0, 0, 616, 86, 87, 624, 88, 0,
	0, 0, 627, 664, 631, 0, 0, 0, 89, 90,
	91, 215, 679, 217, 680, 92, 681, 682, 0, 93,
	221, 222, 94, 634, 663, 683, 684, 225, 0, 675,
	0, 656, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 297, 102, 103, 0, 657, 659, 0,
	658, 660, 104, 105, 267, 106, 685, 107, 686, 687,
	0, 108, 0, 109, 0, 0, 0, 678, 111, 0,
	112, 0, 0, 0, 622, 113, 114, 665, 666, 644,
	0, 0, 115, 116, 688, 0, 117, 0, 118, 0,
	0, 298, 0, 119, 676, 0, 235, 0, 120, 121,
	122, 123, 672, 674, 300, 0, 126, 0, 124, 0,
	299, 125, 689, 690, 691, 692, 0, 655, 0, 301,
	127, 302, 128, 129, 0, 131, 130, 0, 677, 303,
	132, 304, 0, 133, 0, 0, 134, 0, 135, 136,
	137, 138, 139, 305, 140, 141, 144, 142, 617, 143,
	645, 673, 145, 693, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 246, 306, 151, 307, 667, 152,
	153, 154, 155, 0, 668, 156, 249, 157, 0, 158,
	159, 160, 694, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 308, 174,
	175, 623, 176, 0, 177, 178, 179, 180, 0, 252,
	181, 182, 661, 183, 184, 309, 185, 695, 254, 186,
	0, 192, 187, 188, 189, 191, 696, 190, 669, 0,
	193, 0, 194, 195, 196, 0, 257, 697, 698, 0,
	0, 197, 670, 671, 643, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 662, 205, 0, 206, 207, 208,
	262, 699, 0, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 618, 0, 0, 0, 0, 648, 638,
	639, 636, 637, 628, 614, 615, 0, 0, 0, 0,
	616, 959, 1225, 624, 86, 87, 0, 88, 627, 0,
	0, 0, 664, 631, 0, 0, 0, 89, 90, 91,
	215, 679, 217, 680, 92, 681, 682, 0, 93, 221,
	222, 94, 634, 663, 683, 684, 225, 0, 675, 0,
	656, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 103, 0, 657, 659, 0, 658,
	660, 104, 105, 267, 106, 685, 107, 686, 687, 0,
	108, 0, 109, 0, 0, 0, 678, 111, 0, 112,
	0, 0, 0, 622, 113, 114, 665, 666, 644, 0,
	0, 115, 116, 688, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 676, 0, 235, 0, 120, 121, 122,
	123, 672, 674, 300, 0, 126, 0, 124, 0, 299,
	125, 689, 690, 691, 692, 0, 655, 0, 301, 127,
	302, 128, 129, 0, 131, 130, 0, 677, 303, 132,
	304, 0, 133, 0, 0, 134, 0, 135, 136, 137,
	138, 139, 305, 140, 141, 144, 142, 617, 143, 645,
	673, 145, 693, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 246, 306, 151, 307, 667, 152, 153,
	154, 155, 0, 668, 156, 249, 157, 0, 158, 159,
	160, 694, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 308, 174, 175,
	623, 176, 0, 177, 178, 179, 180, 0, 252, 181,
	182, 661, 183, 184, 309, 185, 695, 254, 186, 0,
	192, 187, 188, 189, 191, 696, 190, 669, 0, 193,
	0, 194, 195, 196, 0, 257, 697, 698, 0, 0,
	197, 670, 671, 643, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 662, 205, 0, 206, 207, 208, 262,
	699, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 618, 0, 648, 638, 639, 636, 637, 628,
	0, 0, 0, 614, 615, 612, 0, 0, 0, 616,
	86, 87, 624, 88, 0, 0, 0, 627, 664, 631,
	0, 0, 0, 89, 90, 91, 215, 679, 217, 680,
	92, 681, 682, 0, 93, 221, 222, 94, 634, 663,
	683, 684, 225, 0, 675, 0, 656, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	103, 0, 657, 659, 0, 658, 660, 104, 105, 267,
	106, 685, 107, 686, 687, 0, 108, 0, 109, 0,
	0, 0, 678, 111, 0, 112, 0, 0, 0, 622,
	113, 114, 665, 666, 644, 0, 0, 115, 116, 688,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 676,
	0, 235, 0, 120, 121, 122, 123, 672, 674, 300,
	0, 126, 0, 124, 0, 299, 125, 689, 690, 691,
	692, 0, 655, 0, 301, 127, 302, 128, 129, 0,
	131, 130, 0, 677, 303, 132, 304, 0, 133, 0,
	0, 134, 0, 135, 136, 137, 138, 139, 305, 140,
	141, 144, 142, 617, 143, 645, 673, 145, 693, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 246,
	306, 151, 307, 667, 152, 153, 154, 155, 0, 668,
	156, 249, 157, 0, 158, 159, 160, 694, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 308, 174, 175, 623, 176, 0, 177,
	178, 179, 180, 0, 252, 181, 182, 661, 183, 184,
	309, 185, 695, 254, 186, 0, 192, 187, 188, 189,
	191, 696, 190, 669, 0, 193, 0, 194, 195, 196,
	0, 257, 697, 698, 0, 0, 197, 670, 671, 643,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 662,
	205, 0, 206, 207, 208, 262, 699, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	615, 0, 0, 0, 0, 616, 0, 0, 624, 1681,
	0, 0, 0, 627, 648, 638, 639, 636, 637, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 664, 631,
	0, 0, 0, 89, 90, 91, 215, 679, 217, 680,
	92, 681, 682, 0, 93, 221, 222, 94, 634, 663,
	683, 684, 225, 0, 675, 0, 656, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	103, 0, 657, 659, 0, 658, 660, 104, 105, 267,
	106, 685, 107, 686, 687, 0, 108, 0, 109, 0,
	0, 0, 678, 111, 0, 112, 0, 0, 0, 622,
	113, 114, 665, 666, 644, 0, 0, 115, 116, 688,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 676,
	0, 235, 0, 120, 121, 122, 123, 672, 674, 300,
	0, 126, 0, 124, 0, 299, 125, 689, 690, 691,
	692, 0, 655, 0, 301, 127, 302, 128, 129, 0,
	131, 130, 0, 677, 303, 132, 304, 0, 133, 0,
	0, 134, 0, 135, 136, 137, 138, 139, 305, 140,
	141, 144, 142, 617, 143, 645, 673, 145, 693, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 246,
	306, 151, 307, 667, 152, 153, 154, 155, 0, 668,
	156, 249, 157, 0, 158, 159, 160, 694, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 308, 174, 175, 623, 176, 0, 177,
	178, 179, 180, 0, 252, 181, 182, 661, 183, 184,
	309, 185, 695, 254, 186, 0, 192, 187, 188, 189,
	191, 696, 190, 669, 0, 193, 0, 194, 195, 196,
	0, 257, 697, 698, 0, 0, 197, 670, 671, 643,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 662,
	205, 0, 206, 207, 208, 262, 699, 1638, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 618, 0,
	648, 638, 639, 636, 637, 628, 0, 0, 0, 614,
	615, 0, 0, 0, 0, 616, 86, 87, 624, 88,
	0, 0, 0, 627, 664, 631, 0, 0, 0, 89,
	90, 91, 215, 679, 217, 680, 92, 681, 682, 0,
	93, 221, 222, 94, 634, 663, 683, 684, 225, 0,
	675, 0, 656, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 657, 659,
	0, 658, 660, 104, 105, 267, 106, 685, 107, 686,
	687, 0, 108, 0, 109, 0, 0, 0, 678, 111,
	0, 112, 0, 0, 0, 622, 113, 114, 665, 666,
	644, 0, 0, 115, 116, 688, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 676, 0, 235, 0, 120,
	121, 122, 123, 672, 674, 300, 0, 126, 0, 124,
	0, 299, 125, 689, 690, 691, 692, 0, 655, 0,
	301, 127, 302, 128, 129, 0, 131, 130, 0, 677,
	303, 132, 304, 0, 133, 0, 0, 134, 0, 135,
	136, 137, 138, 139, 305, 140, 141, 144, 142, 617,
	143, 645, 673, 145, 693, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 246, 306, 151, 307, 667,
	152, 153, 154, 155, 0, 668, 156, 249, 157, 0,
	158, 159, 160, 694, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 308,
	174, 175, 623, 176, 0, 177, 178, 179, 180, 0,
	252, 181, 182, 661, 183, 184, 309, 185, 695, 254,
	186, 0, 192, 187, 188, 189, 191, 696, 190, 669,
	0, 193, 0, 194, 195, 196, 0, 257, 697, 698,
	0, 0, 197, 670, 671, 643, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 662, 205, 0, 206, 207,
	208, 262, 699, 0, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 615, 0, 0, 0,
	0, 616, 0, 0, 624, 1628, 0, 0, 0, 627,
	648, 638, 639, 636, 637, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 664, 631, 0, 0, 0, 89,
	90, 91, 215, 679, 217, 680, 92, 681, 682, 0,
	93, 221, 222, 94, 634, 663, 683, 684, 225, 0,
	675, 0, 656, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 657, 659,
	0, 658, 660, 104, 105, 267, 106, 685, 107, 686,
	687, 714, 108, 0, 109, 0, 0, 0, 678, 111,
	0, 112, 0, 0, 0, 622, 113, 114, 665, 666,
	644, 0, 0, 115, 116, 688, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 676, 0, 235, 0, 120,
	121, 122, 123, 672, 674, 300, 0, 126, 0, 124,
	0, 299, 125, 689, 690, 691, 692, 0, 655, 0,
	301, 127, 302, 128, 129, 0, 131, 130, 0, 677,
	303, 132, 304, 0, 133, 0, 0, 134, 0, 135,
	136, 137, 138, 139, 305, 140, 141, 144, 142, 617,
	143, 645, 673, 145, 693, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 246, 306, 151, 307, 667,
	152, 153, 154, 155, 0, 668, 156, 249, 157, 0,
	158, 159, 160, 694, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 308,
	174, 175, 623, 176, 0, 177, 178, 179, 180, 0,
	252, 181, 182, 661, 183, 184, 309, 185, 695, 254,
	186, 0, 192, 187, 188, 189, 191, 696, 190, 669,
	0, 193, 0, 194, 195, 196, 0, 257, 697, 698,
	0, 0, 197, 670, 671, 643, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 662, 205, 0, 206, 207,
	208, 262, 699, 0, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 618, 0, 648, 638, 639, 636,
	637, 628, 0, 0, 0, 614, 615, 0, 0, 0,
	0, 616, 86, 87, 624, 88, 0, 0, 0, 627,
	664, 631, 0, 0, 0, 89, 90, 91, 215, 679,
	217, 680, 92, 681, 682, 0, 93, 221, 222, 94,
	634, 663, 683, 684, 225, 0, 675, 0, 656, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 657, 659, 0, 658, 660, 104,
	105, 267, 106, 685, 107, 686, 687, 0, 108, 0,
	109, 0, 0, 0, 678, 111, 0, 112, 0, 0,
	0, 622, 113, 114, 665, 666, 644, 0, 0, 115,
	116, 688, 0, 117, 0, 118, 0, 1277, 298, 0,
	119, 676, 0, 235, 0, 120, 121, 122, 123, 672,
	674, 300, 0, 126, 0, 124, 0, 299, 125, 689,
	690, 691, 692, 0, 655, 0, 301, 127, 302, 128,
	129, 0, 131, 130, 0, 677, 303, 132, 304, 0,
	133, 0, 0, 134, 0, 135, 136, 137, 138, 139,
	305, 140, 141, 144, 142, 617, 143, 645, 673, 145,
	693, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 246, 306, 151, 307, 667, 152, 153, 154, 155,
	0, 668, 156, 249, 157, 0, 158, 159, 160, 694,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 308, 174, 175, 623, 176,
	0, 177, 178, 179, 180, 0, 252, 181, 182, 661,
	183, 184, 309, 185, 695, 254, 186, 0, 192, 187,
	188, 189, 191, 696, 190, 669, 0, 193, 0, 194,
	195, 196, 0, 257, 697, 698, 0, 0, 197, 670,
	671, 643, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 662, 205, 0, 206, 207, 208, 262, 699, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	618, 0, 648, 638, 639, 636, 637, 628, 0, 0,
	0, 614, 615, 0, 0, 0, 0, 616, 86, 87,
	624, 88, 0, 0, 0, 627, 664, 631, 0, 0,
	0, 89, 90, 91, 215, 679, 217, 680, 92, 681,
	682, 0, 93, 221, 222, 94, 634, 663, 683, 684,
	225, 0, 675, 0, 656, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	657, 659, 0, 658, 660, 104, 105, 267, 106, 685,
	107, 686, 687, 0, 108, 0, 109, 0, 0, 0,
	678, 111, 0, 112, 0, 0, 0, 622, 113, 114,
	665, 666, 644, 0, 0, 115, 116, 688, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 676, 0, 235,
	0, 120, 121, 122, 123, 672, 674, 300, 0, 126,
	0, 124, 0, 299, 125, 689, 690, 691, 692, 0,
	655, 0, 301, 127, 302, 128, 129, 0, 131, 130,
	0, 677, 303, 132, 304, 0, 133, 0, 0, 134,
	0, 135, 136, 137, 138, 139, 305, 140, 141, 144,
	142, 617, 143, 645, 673, 145, 693, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 246, 306, 151,
	307, 667, 152, 153, 154, 155, 0, 668, 156, 249,
	157, 0, 158, 159, 160, 694, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 308, 174, 175, 623, 176, 0, 177, 178, 179,
	180, 0, 252, 181, 182, 661, 183, 184, 309, 185,
	695, 254, 186, 0, 192, 187, 188, 189, 191, 696,
	190, 669, 0, 193, 0, 194, 195, 196, 0, 257,
	697, 698, 0, 0, 197, 670, 671, 643, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 662, 205, 0,
	206, 207, 208, 262, 699, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 615, 0,
	0, 0, 0, 616, 0, 0, 624, 1220, 0, 0,
	0, 627, 648, 638, 639, 636, 637, 628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	887, 88, 0, 0, 0, 0, 664, 631, 0, 0,
	0, 89, 90, 91, 215, 679, 217, 680, 92, 681,
	682, 0, 93, 221, 222, 94, 634, 663, 683, 684,
	225, 0, 675, 0, 656, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	657, 659, 0, 658, 660, 104, 105, 267, 106, 685,
	107, 686, 687, 0, 108, 0, 109, 0, 0, 0,
	678, 111, 0, 112, 0, 0, 0, 622, 113, 114,
	665, 666, 644, 0, 0, 115, 116, 688, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 676, 0, 235,
	0, 120, 121, 122, 123, 672, 674, 300, 0, 126,
	0, 124, 0, 299, 125, 689, 690, 691, 692, 0,
	655, 0, 301, 127, 302, 128, 129, 0, 131, 130,
	0, 677, 303, 132, 304, 0, 133, 0, 0, 134,
	0, 135, 136, 137, 138, 139, 305, 140, 141, 144,
	142, 617, 143, 645, 673, 145, 693, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 246, 306, 151,
	307, 667, 152, 153, 154, 155, 0, 668, 156, 249,
	157, 0, 158, 159, 160, 694, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 308, 174, 175, 623, 176, 0, 177, 178, 179,
	180, 0, 252, 181, 182, 661, 183, 184, 309, 185,
	695, 254, 186, 0, 192, 187, 188, 189, 191, 696,
	190, 669, 0, 193, 0, 194, 195, 196, 0, 257,
	697, 698, 0, 0, 197, 670, 671, 643, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 662, 205, 0,
	206, 207, 208, 262, 699, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 618, 0, 648, 638,
	639, 636, 637, 628, 0, 0, 0, 614, 615, 0,
	0, 0, 0, 616, 86, 87, 624, 88, 0, 0,
	0, 627, 664, 631, 0, 0, 0, 89, 90, 91,
	215, 679, 217, 680, 92, 681, 682, 0, 93, 221,
	222, 94, 634, 663, 683, 684, 225, 0, 675, 0,
	656, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 2019, 0, 657, 659, 0, 658,
	660, 104, 105, 267, 106, 685, 107, 686, 687, 0,
	108, 0, 109, 0, 0, 0, 678, 111, 0, 112,
	0, 0, 0, 622, 113, 114, 665, 666, 644, 0,
	0, 115, 116, 688, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 676, 0, 235, 0, 120, 121, 122,
	123, 672, 674, 300, 0, 126, 0, 124, 0, 299,
	125, 689, 690, 691, 692, 0, 655, 0, 301, 127,
	302, 128, 129, 0, 131, 130, 0, 677, 303, 132,
	304, 0, 133, 0, 0, 134, 0, 135, 136, 137,
	138, 139, 305, 140, 141, 144, 142, 617, 143, 645,
	673, 145, 693, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 246, 306, 151, 307, 667, 152, 153,
	154, 155, 0, 668, 156, 249, 157, 0, 158, 159,
	160, 694, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 308, 174, 175,
	623, 176, 0, 177, 178, 179, 180, 0, 252, 181,
	182, 661, 183, 184, 309, 185, 695, 254, 186, 0,
	192, 187, 188, 189, 191, 696, 190, 669, 0, 193,
	0, 194, 195, 196, 0, 257, 697, 698, 0, 0,
	197, 670, 671, 643, 198, 199, 2018, 201, 0, 0,
	202, 203, 204, 662, 205, 0, 206, 207, 208, 262,
	699, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 618, 0, 648, 638, 639, 636, 637, 628,
	0, 0, 0, 614, 615, 0, 0, 0, 0, 616,
	86, 87, 624, 88, 0, 0, 0, 627, 664, 631,
	0, 0, 0, 89, 90, 91, 2017, 679, 217, 680,
	92, 681, 682, 0, 93, 221, 222, 94, 634, 663,
	683, 684, 225, 0, 675, 0, 656, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	2019, 0, 657, 659, 0, 658, 660, 104, 105, 267,
	106, 685, 107, 686, 687, 0, 108, 0, 109, 0,
	0, 0, 678, 111, 0, 112, 0, 0, 0, 622,
	113, 114, 665, 666, 644, 0, 0, 115, 116, 688,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 676,
	0, 235, 0, 120, 121, 122, 123, 672, 674, 300,
	0, 126, 0, 124, 0, 299, 125, 689, 690, 691,
	692, 0, 655, 0, 301, 127, 302, 128, 129, 0,
	131, 130, 0, 677, 303, 132, 304, 0, 133, 0,
	0, 134, 0, 135, 136, 137, 138, 139, 305, 140,
	141, 144, 142, 617, 143, 645, 673, 145, 693, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 246,
	306, 151, 307, 667, 152, 153, 154, 155, 0, 668,
	156, 249, 157, 0, 158, 159, 160, 694, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 308, 174, 175, 623, 176, 0, 177,
	178, 179, 180, 0, 252, 181, 182, 661, 183, 184,
	309, 185, 695, 254, 186, 0, 192, 187, 188, 189,
	191, 696, 190, 669, 0, 193, 0, 194, 195, 196,
	0, 257, 697, 698, 0, 0, 197, 670, 671, 643,
	198, 199, 2018, 201, 0, 0, 202, 203, 204, 662,
	205, 0, 206, 207, 208, 262, 699, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 618, 0,
	648, 638, 639, 636, 637, 628, 0, 0, 0, 614,
	615, 0, 0, 0, 0, 616, 86, 87, 624, 88,
	0, 0, 0, 627, 664, 631, 0, 0, 0, 89,
	90, 91, 215, 679, 217, 680, 92, 681, 682, 0,
	93, 221, 222, 94, 634, 663, 683, 684, 225, 0,
	675, 0, 656, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 657, 659,
	0, 658, 660, 104, 105, 267, 106, 685, 107, 686,
	687, 0, 108, 0, 109, 0, 0, 0, 678, 111,
	0, 112, 0, 0, 0, 622, 113, 114, 665, 666,
	644, 0, 0, 115, 116, 688, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 676, 0, 235, 0, 120,
	121, 122, 123, 672, 674, 300, 0, 126, 0, 124,
	0, 299, 125, 689, 690, 691, 692, 0, 655, 0,
	301, 127, 302, 128, 129, 0, 131, 130, 0, 677,
	303, 132, 304, 0, 133, 0, 0, 134, 0, 135,
	136, 137, 138, 139, 305, 140, 141, 144, 142, 617,
	143, 645, 673, 145, 693, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 246, 306, 151, 307, 667,
	152, 153, 154, 155, 0, 668, 156, 249, 157, 0,
	158, 159, 160, 694, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 308,
	174, 175, 623, 176, 0, 177, 178, 179, 180, 0,
	252, 181, 182, 661, 183, 184, 309, 185, 695, 254,
	186, 0, 192, 187, 188, 189, 191, 696, 190, 669,
	0, 193, 0, 194, 195, 196, 0, 257, 697, 698,
	0, 0, 197, 670, 671, 643, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 662, 205, 0, 206, 207,
	208, 262, 699, 0, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 618, 0, 1249, 638, 639, 636,
	637, 628, 0, 0, 0, 614, 615, 0, 0, 0,
	0, 616, 86, 87, 624, 88, 0, 0, 0, 627,
	664, 631, 0, 0, 0, 89, 90, 91, 215, 679,
	217, 680, 92, 681, 682, 0, 93, 221, 222, 94,
	634, 663, 683, 684, 225, 0, 675, 0, 656, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 657, 659, 0, 658, 660, 104,
	105, 267, 106, 685, 1252, 686, 687, 0, 108, 0,
	109, 0, 0, 0, 678, 111, 0, 112, 0, 0,
	0, 622, 113, 114, 665, 666, 644, 0, 0, 115,
	116, 688, 0, 117, 0, 118, 0, 0, 298, 0,
	119, 676, 0, 235, 0, 120, 121, 1253, 123, 672,
	674, 300, 0, 126, 0, 124, 0, 299, 125, 689,
	690, 691, 692, 0, 655, 0, 301, 127, 302, 128,
	129, 0, 131, 130, 0, 677, 303, 132, 304, 0,
	133, 0, 0, 134, 0, 135, 1254, 1251, 138, 139,
	305, 140, 141, 144, 142, 617, 143, 645, 673, 145,
	693, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 246, 306, 151, 307, 667, 152, 153, 154, 155,
	0, 668, 156, 249, 157, 0, 158, 159, 160, 694,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 308, 174, 175, 623, 176,
	0, 177, 178, 179, 1255, 0, 252, 181, 182, 661,
	183, 184, 309, 185, 695, 254, 186, 0, 192, 187,
	188, 189, 191, 696, 190, 669, 0, 193, 0, 194,
	195, 196, 0, 257, 697, 698, 0, 0, 197, 670,
	671, 643, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 662, 205, 0, 206, 207, 208, 262, 699, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 1250, 213,
	618, 0, 648, 638, 639, 636, 637, 628, 0, 0,
	0, 614, 615, 0, 0, 0, 0, 616, 86, 87,
	624, 88, 0, 0, 0, 627, 664, 631, 0, 0,
	0, 89, 90, 91, 215, 679, 217, 680, 92, 681,
	682, 0, 93, 221, 222, 94, 634, 663, 683, 684,
	225, 0, 675, 0, 656, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	657, 659, 0, 658, 660, 104, 105, 267, 106, 685,
	107, 686, 687, 0, 108, 0, 109, 0, 0, 0,
	678, 111, 0, 112, 0, 0, 0, 622, 113, 114,
	665, 666, 644, 0, 0, 115, 116, 688, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 676, 0, 235,
	0, 120, 121, 122, 123, 672, 674, 300, 0, 126,
	0, 124, 0, 299, 125, 689, 690, 691, 692, 0,
	655, 0, 301, 127, 302, 128, 129, 0, 131, 130,
	0, 677, 303, 132, 304, 0, 133, 0, 0, 134,
	0, 135, 136, 137, 138, 139, 305, 140, 141, 144,
	142, 0, 143, 645, 673, 145, 693, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 246, 306, 151,
	307, 667, 152, 153, 154, 155, 0, 668, 156, 249,
	157, 0, 158, 159, 160, 694, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 308, 174, 175, 1267, 176, 0, 177, 178, 179,
	180, 0, 252, 181, 182, 661, 183, 184, 309, 185,
	695, 254, 186, 0, 192, 187, 188, 189, 191, 696,
	190, 669, 0, 193, 0, 194, 195, 196, 0, 257,
	697, 698, 0, 0, 197, 670, 671, 643, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 662, 205, 0,
	206, 207, 208, 262, 699, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 0, 648, 638,
	639, 636, 637, 628, 0, 0, 0, 1263, 1264, 0,
	0, 0, 0, 1265, 86, 87, 1266, 88, 0, 0,
	0, 627, 664, 631, 0, 0, 0, 89, 90, 91,
	0, 679, 217, 680, 92, 681, 682, 0, 93, 221,
	222, 94, 634, 663, 683, 684, 225, 0, 675, 0,
	656, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 2019, 0, 657, 659, 0, 658,
	660, 104, 105, 267, 106, 685, 107, 686, 687, 0,
	108, 0, 109, 0, 0, 0, 678, 111, 0, 112,
	0, 0, 0, 622, 113, 114, 665, 666, 644, 0,
	0, 115, 116, 688, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 676, 0, 235, 0, 120, 121, 122,
	123, 672, 674, 0, 0, 126, 0, 124, 0, 299,
	125, 689, 690, 691, 692, 0, 655, 0, 0, 127,
	302, 128, 129, 0, 131, 130, 0, 677, 303, 132,
	0, 0, 133, 0, 0, 134, 0, 135, 136, 137,
	138, 139, 305, 140, 141, 144, 142, 617, 143, 645,
	673, 145, 693, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 246, 306, 151, 307, 667, 152, 153,
	154, 155, 0, 668, 156, 249, 157, 0, 158, 159,
	160, 694, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 308, 174, 175,
	623, 176, 0, 177, 178, 179, 180, 0, 252, 181,
	182, 661, 183, 184, 0, 185, 695, 254, 186, 0,
	192, 187, 188, 189, 191, 696, 190, 669, 0, 193,
	0, 194, 195, 196, 0, 257, 697, 698, 0, 0,
	197, 670, 671, 643, 198, 199, 2018, 201, 0, 0,
	202, 203, 204, 662, 205, 0, 206, 207, 208, 262,
	699, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 648, 638, 639, 636, 637, 628,
	0, 0, 0, 614, 615, 0, 0, 0, 0, 616,
	86, 87, 624, 88, 0, 0, 0, 627, 664, 631,
	0, 0, 0, 89, 90, 91, 215, 679, 217, 680,
	92, 681, 682, 0, 93, 221, 222, 94, 0, 663,
	683, 684, 225, 0, 675, 0, 656, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	103, 0, 657, 659, 0, 658, 660, 104, 105, 267,
	106, 685, 107, 686, 687, 0, 108, 0, 109, 0,
	0, 0, 678, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 665, 666, 644, 0, 0, 115, 116, 688,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 676,
	0, 235, 0, 120, 121, 122, 123, 672, 674, 300,
	0, 126, 0, 124, 0, 299, 125, 689, 690, 691,
	692, 0, 655, 0, 301, 127, 302, 128, 129, 0,
	131, 130, 0, 677, 303, 132, 304, 0, 133, 0,
	0, 134, 0, 135, 136, 137, 138, 139, 305, 140,
	141, 144, 142, 0, 143, 645, 673, 145, 693, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 246,
	306, 151, 307, 667, 152, 153, 154, 155, 0, 668,
	156, 249, 157, 0, 158, 159, 160, 694, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 308, 174, 175, 1267, 176, 0, 177,
	178, 179, 180, 0, 252, 181, 182, 661, 183, 184,
	309, 185, 695, 254, 186, 0, 192, 187, 188, 189,
	191, 696, 190, 669, 0, 193, 0, 194, 195, 196,
	0, 257, 697, 698, 0, 0, 197, 670, 671, 643,
	198, 199, 200, 201, 648, 0, 202, 203, 204, 662,
	205, 0, 206, 207, 208, 262, 699, 0, 0, 209,
	86, 87, 0, 88, 210, 211, 212, 213, 664, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 1266, 663,
	223, 224, 225, 627, 675, 0, 656, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	103, 0, 657, 659, 0, 658, 660, 104, 105, 267,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 665, 666, 0, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 676,
	0, 235, 0, 120, 121, 122, 123, 672, 674, 300,
	0, 126, 0, 124, 0, 299, 125, 238, 239, 240,
	241, 0, 242, 0, 301, 127, 302, 128, 129, 0,
	131, 130, 0, 677, 303, 132, 304, 0, 133, 0,
	0, 134, 0, 135, 136, 137, 138, 139, 305, 140,
	141, 144, 142, 0, 143, 0, 673, 145, 245, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 246,
	306, 151, 307, 667, 152, 153, 154, 155, 0, 668,
	156, 249, 157, 0, 158, 159, 160, 250, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 308, 174, 175, 251, 176, 0, 177,
	178, 179, 180, 0, 252, 181, 182, 661, 183, 184,
	309, 185, 253, 254, 186, 0, 192, 187, 188, 189,
	191, 255, 190, 669, 0, 193, 0, 194, 195, 196,
	0, 257, 258, 259, 0, 0, 197, 670, 671, 0,
	198, 199, 200, 201, 525, 0, 202, 203, 204, 662,
	205, 0, 206, 207, 208, 262, 263, 0, 0, 209,
	86, 87, 0, 88, 210, 211, 212, 213, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 1751, 0,
	223, 224, 225, 0, 226, 0, 296, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 0, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 300,
	0, 126, 0, 124, 0, 299, 125, 238, 239, 240,
	241, 0, 242, 0, 301, 127, 302, 128, 129, 0,
	131, 130, 0, 243, 303, 132, 304, 0, 133, 0,
	0, 134, 0, 135, 136, 137, 138, 139, 305, 140,
	141, 144, 142, 0, 143, 0, 244, 145, 245, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 246,
	306, 151, 307, 247, 152, 153, 154, 155, 0, 248,
	156, 249, 157, 0, 158, 159, 160, 250, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 308, 174, 175, 251, 176, 0, 177,
	178, 179, 180, 67, 252, 181, 182, 0, 183, 184,
	309, 185, 253, 254, 186, 0, 192, 187, 188, 189,
	191, 255, 190, 256, 0, 193, 69, 194, 195, 196,
	0, 257, 258, 259, 0, 0, 197, 260, 261, 0,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 529, 263, 0, 0, 209,
	0, 0, 0, 65, 210, 211, 212, 213, 0, 66,
	525, 733, 0, 838, 835, 830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 64, 88,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 89,
	90, 91, 215, 216, 217, 218, 92, 219, 220, 0,
	93, 221, 222, 94, 0, 0, 223, 224, 225, 0,
	226, 0, 296, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 227, 107, 228,
	229, 841, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 230, 113, 114, 231, 232,
	832, 0, 0, 115, 116, 233, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 234, 0, 235, 0, 120,
	121, 122, 123, 236, 237, 300, 0, 126, 0, 124,
	0, 299, 125, 238, 239, 240, 241, 0, 242, 0,
	301, 127, 302, 128, 129, 0, 131, 130, 0, 243,
	303, 132, 304, 0, 133, 0, 0, 134, 0, 135,
	136, 137, 138, 139, 305, 140, 141, 144, 142, 0,
	143, 0, 244, 145, 245, 146, 147, 0, 148, 833,
	0, 149, 0, 0, 150, 246, 306, 151, 307, 247,
	152, 153, 154, 155, 0, 248, 156, 249, 157, 0,
	158, 159, 160, 250, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 308,
	174, 175, 251, 176, 0, 177, 178, 179, 180, 0,
	252, 181, 182, 0, 183, 184, 309, 185, 253, 254,
	186, 0, 192, 187, 188, 189, 191, 255, 190, 256,
	0, 193, 0, 194, 195, 196, 0, 257, 258, 259,
	0, 0, 197, 260, 261, 831, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 0, 205, 0, 206, 207,
	208, 262, 263, 525, 733, 209, 838, 835, 830, 0,
	210, 211, 212, 213, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 839, 836, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 296, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	227, 107, 228, 229, 826, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 832, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 298, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 300, 0,
	126, 0, 124, 0, 299, 125, 238, 239, 240, 241,
	0, 242, 0, 301, 127, 302, 128, 129, 0, 131,
	130, 0, 243, 303, 132, 304, 0, 133, 0, 0,
	134, 0, 135, 136, 137, 138, 139, 305, 140, 141,
	144, 142, 0, 143, 0, 244, 145, 245, 146, 147,
	0, 148, 833, 0, 149, 0, 0, 150, 246, 306,
	151, 307, 247, 152, 153, 154, 155, 0, 248, 156,
	249, 157, 0, 158, 159, 160, 250, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 308, 174, 175, 251, 176, 0, 177, 178,
	179, 180, 0, 252, 181, 182, 0, 183, 184, 309,
	185, 253, 254, 186, 0, 192, 187, 188, 189, 191,
	255, 190, 256, 0, 193, 0, 194, 195, 196, 0,
	257, 258, 259, 0, 0, 197, 260, 261, 831, 198,
	199, 200, 201, 0, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 262, 263, 525, 733, 209, 838,
	835, 830, 0, 210, 211, 212, 213, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 839, 836,
	214, 0, 0, 0, 0, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 0, 93, 221, 222, 94,
	0, 0, 223, 224, 225, 0, 226, 0, 296, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 267, 106, 227, 107, 228, 229, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 230, 113, 114, 231, 232, 832, 0, 0, 115,
	116, 233, 0, 117, 0, 118, 0, 0, 298, 0,
	119, 234, 0, 235, 0, 120, 121, 122, 123, 236,
	237, 300, 0, 126, 0, 124, 0, 299, 125, 238,
	239, 240, 241, 0, 242, 0, 301, 127, 302, 128,
	129, 0, 131, 130, 0, 243, 303, 132, 304, 0,
	133, 0, 0, 134, 0, 135, 136, 137, 138, 139,
	305, 140, 141, 144, 142, 0, 143, 0, 244, 145,
	245, 146, 147, 0, 148, 833, 0, 149, 0, 0,
	150, 246, 306, 151, 307, 247, 152, 153, 154, 155,
	0, 248, 156, 249, 157, 0, 158, 159, 160, 250,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 308, 174, 175, 251, 176,
	0, 177, 178, 179, 180, 0, 252, 181, 182, 0,
	183, 184, 309, 185, 253, 254, 186, 0, 192, 187,
	188, 189, 191, 255, 190, 256, 0, 193, 0, 194,
	195, 196, 0, 257, 258, 259, 0, 0, 197, 260,
	261, 831, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 262, 263, 83,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 839, 836, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 126, 0, 124, 0,
	0, 125, 238, 239, 240, 241, 0, 242, 0, 0,
	127, 0, 128, 129, 0, 131, 130, 0, 243, 0,
	132, 0, 0, 133, 0, 0, 134, 0, 135, 136,
	137, 138, 139, 0, 140, 141, 144, 142, 0, 143,
	0, 244, 145, 245, 146, 147, 0, 148, 0, 479,
	149, 0, 0, 150, 246, 0, 151, 0, 247, 152,
	153, 154, 155, 0, 248, 156, 249, 157, 0, 158,
	159, 160, 250, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 251, 176, 0, 177, 178, 179, 180, 67, 252,
	181, 182, 0, 183, 184, 0, 185, 253, 254, 186,
	0, 192, 187, 188, 189, 191, 255, 190, 256, 0,
	193, 69, 194, 195, 196, 0, 257, 258, 259, 0,
	0, 197, 260, 261, 0, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	529, 263, 0, 0, 209, 83, 0, 0, 65, 210,
	211, 212, 213, 0, 66, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 214,
	0, 1149, 0, 1148, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 126, 0, 124, 0, 0, 125, 238, 239,
	240, 241, 0, 242, 0, 0, 127, 0, 128, 129,
	0, 131, 130, 0, 243, 0, 132, 0, 0, 133,
	0, 0, 134, 0, 135, 136, 137, 138, 139, 0,
	140, 141, 144, 142, 0, 143, 0, 244, 145, 245,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	246, 0, 151, 0, 247, 152, 153, 154, 155, 0,
	248, 156, 249, 157, 0, 158, 159, 160, 250, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 251, 176, 0,
	177, 178, 179, 180, 67, 252, 181, 182, 0, 183,
	184, 0, 185, 253, 254, 186, 0, 192, 187, 188,
	189, 191, 255, 190, 256, 0, 193, 69, 194, 195,
	196, 0, 257, 258, 259, 0, 0, 197, 260, 261,
	0, 198, 199, 200, 201, 0, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 529, 263, 0, 0,
	209, 83, 0, 0, 65, 210, 211, 212, 213, 0,
	66, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 214, 0, 0, 0, 64,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 479, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 83, 0, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 214, 0, 1149, 0, 1148, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 126, 0, 124, 0, 0, 125,
	238, 239, 240, 241, 0, 242, 0, 0, 127, 0,
	128, 129, 0, 131, 130, 0, 243, 0, 132, 0,
	0, 133, 0, 0, 134, 0, 135, 136, 137, 138,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 244,
	145, 245, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 246, 0, 151, 0, 247, 152, 153, 154,
	155, 0, 248, 156, 249, 157, 0, 158, 159, 160,
	250, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 251,
	176, 0, 177, 178, 179, 180, 0, 252, 181, 182,
	0, 183, 184, 0, 185, 253, 254, 186, 0, 192,
	187, 188, 189, 191, 255, 190, 256, 0, 193, 0,
	194, 195, 196, 0, 257, 258, 259, 0, 0, 197,
	260, 261, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 262, 263,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 741, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 126, 0, 124, 0, 0, 125,
	238, 239, 240, 241, 0, 242, 0, 0, 127, 0,
	128, 129, 0, 131, 130, 0, 243, 0, 132, 0,
	0, 133, 0, 0, 134, 0, 135, 136, 137, 138,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 244,
	145, 245, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 246, 0, 151, 0, 247, 152, 153, 154,
	155, 0, 248, 156, 249, 157, 0, 158, 159, 160,
	250, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 251,
	176, 0, 177, 178, 179, 180, 0, 252, 181, 182,
	0, 183, 184, 0, 185, 253, 254, 186, 0, 192,
	187, 188, 189, 191, 255, 190, 256, 0, 193, 0,
	194, 195, 196, 0, 257, 258, 259, 0, 0, 197,
	260, 261, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 262, 263,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 1056, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 126, 0, 124, 0, 0, 125,
	238, 239, 240, 241, 0, 242, 0, 0, 127, 0,
	128, 129, 0, 131, 130, 0, 243, 0, 132, 0,
	0, 133, 0, 0, 134, 0, 135, 136, 137, 138,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 244,
	145, 245, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 246, 0, 151, 0, 247, 152, 153, 154,
	155, 0, 248, 156, 249, 157, 0, 158, 159, 160,
	250, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 251,
	176, 0, 177, 178, 179, 180, 0, 252, 181, 182,
	0, 183, 184, 0, 185, 253, 254, 186, 0, 192,
	187, 188, 189, 191, 255, 190, 256, 0, 193, 0,
	194, 195, 196, 0, 257, 258, 259, 0, 0, 197,
	260, 261, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 262, 263,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 1645, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 126, 0, 124, 0, 0, 125,
	238, 239, 240, 241, 0, 242, 0, 0, 127, 0,
	128, 129, 0, 131, 130, 0, 243, 0, 132, 0,
	0, 133, 0, 0, 134, 0, 135, 136, 137, 138,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 244,
	145, 245, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 246, 0, 151, 0, 247, 152, 153, 154,
	155, 0, 248, 156, 249, 157, 0, 158, 159, 160,
	250, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 251,
	176, 0, 177, 178, 179, 180, 0, 252, 181, 182,
	0, 183, 184, 0, 185, 253, 254, 186, 0, 192,
	187, 188, 189, 191, 255, 190, 256, 0, 193, 0,
	194, 195, 196, 0, 257, 258, 259, 0, 0, 197,
	260, 261, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 262, 263,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 648, 638, 639, 636, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 710, 0, 0, 0, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 679, 217, 680, 92, 681, 682,
	0, 93, 221, 222, 94, 0, 0, 683, 684, 225,
	0, 226, 0, 296, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 685, 107,
	686, 687, 0, 108, 0, 109, 0, 0, 0, 678,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 644, 0, 0, 115, 116, 688, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 300, 0, 126, 0,
	124, 0, 299, 125, 689, 690, 691, 692, 0, 655,
	0, 301, 127, 302, 128, 129, 0, 131, 130, 0,
	243, 303, 132, 304, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 305, 140, 141, 144, 142,
	0, 143, 645, 244, 145, 693, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 306, 151, 307,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 694, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	308, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 309, 185, 695,
	254, 186, 0, 192, 187, 188, 189, 191, 696, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 697,
	698, 0, 0, 197, 260, 261, 643, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 699, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 79, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 78, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 525, 733, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 82, 0,
	0, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 296,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 297, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 298,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 300, 0, 126, 0, 124, 0, 299, 125,
	238, 239, 240, 241, 0, 242, 0, 301, 127, 302,
	128, 129, 0, 131, 130, 0, 243, 303, 132, 304,
	0, 133, 0, 0, 134, 0, 135, 136, 137, 138,
	139, 305, 140, 141, 144, 142, 0, 143, 0, 244,
	145, 245, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 246, 306, 151, 307, 247, 152, 153, 154,
	155, 0, 248, 156, 249, 157, 0, 158, 159, 160,
	250, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 308, 174, 175, 251,
	176, 0, 177, 178, 179, 180, 0, 252, 181, 182,
	0, 183, 184, 309, 185, 253, 254, 186, 0, 192,
	187, 188, 189, 191, 255, 190, 256, 0, 193, 0,
	194, 195, 196, 0, 257, 258, 259, 0, 0, 197,
	260, 261, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 262, 263,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 126, 0, 124, 0, 0, 125,
	238, 239, 240, 241, 0, 242, 0, 0, 127, 0,
	128, 129, 0, 131, 130, 0, 243, 0, 132, 0,
	0, 133, 0, 0, 134, 0, 135, 136, 137, 138,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 244,
	145, 245, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 246, 0, 151, 0, 247, 152, 153, 154,
	155, 0, 248, 156, 249, 157, 0, 158, 159, 160,
	250, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 251,
	176, 0, 177, 178, 179, 180, 0, 252, 181, 182,
	0, 183, 184, 0, 185, 253, 254, 186, 0, 192,
	187, 188, 189, 191, 255, 190, 256, 0, 193, 0,
	194, 195, 196, 0, 257, 258, 259, 0, 0, 197,
	260, 261, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 262, 263,
	0, 525, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 82, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 296, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 300, 0, 126, 0,
	124, 0, 299, 125, 238, 239, 240, 241, 0, 242,
	0, 301, 127, 302, 128, 129, 0, 131, 130, 0,
	243, 303, 132, 304, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 305, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 306, 151, 307,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	308, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 309, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	1017, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	1015, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 1120, 0, 115, 116, 233, 0, 117, 0,
	118, 1020, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 1118,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	1019, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 1119, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	1017, 226, 0, 0, 1012, 95, 96, 97, 0, 98,
	1015, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 1020, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 1011, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	1019, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 1018, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 1610, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 479, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 766, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 479, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 537,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 491, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 479, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 484, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 479, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 394,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 393,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 1313, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 1311, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 1300, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 878, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 408, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 751, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 0, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 589, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 584, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 543,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 419, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 418, 258,
	259, 0, 0, 414, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 419, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 418, 258,
	259, 0, 0, 414, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 521, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 518, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 515, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 513, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 487, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 468, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 411, 0, 0, 134, 0,
	135, 136, 137, 138, 419, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 154, 155, 0, 248, 156, 249, 157,
	0, 158, 159, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 413, 176, 0, 177, 178, 179, 180,
	0, 252, 181, 412, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 418, 258,
	259, 0, 0, 414, 260, 261, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 126, 0,
	124, 0, 0, 125, 238, 239, 240, 241, 0, 242,
	0, 0, 127, 0, 128, 129, 0, 131, 130, 0,
	243, 0, 132, 0, 0, 133, 0, 0, 134, 0,
	135, 136, 137, 138, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 244, 145, 245, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 246, 0, 151, 0,
	247, 152, 153, 0, 155, 0, 248, 156, 249, 157,
	0, 158, 0, 160, 250, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 251, 0, 0, 177, 178, 179, 180,
	0, 252, 181, 182, 0, 183, 184, 0, 185, 253,
	254, 186, 0, 192, 187, 188, 189, 191, 255, 190,
	256, 0, 193, 0, 194, 195, 196, 0, 257, 258,
	259, 0, 0, 197, 260, 261, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 262, 263, 0, 0, 209, 0, 0, 0,
	0, 210, 211, 212, 213, 902, 903, 0, 922, 923,
	924, 932, 933, 934, 0, 0, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 905, 0,
	0, 936, 0, 0, 0, 0, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 0, 0, 0, 0, 0,
	904, 0, 925, 0, 0, 0, 919, 0, 0, 905,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 902, 903, 0, 922, 923,
	924, 932, 933, 934, 0, 910, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 905, 0,
	0, 936, 0, 0, 929, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 910, 0, 0, 935,
	904, 0, 0, 0, 0, 0, 919, 0, 0, 0,
	0, 927, 0, 0, 0, 929, 937, 920, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 927, 0, 0, 0, 0, 0, 920, 0,
	0, 0, 0, 0, 0, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 929, 937, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 0, 935,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 927, 0, 0, 0, 0, 0, 920, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 916, 917, 918, 0,
	915, 912, 913, 914, 906, 907, 908, 909, 911, 0,
	931, 0, 0, 921, 0, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 928, 930, 0, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 902, 903, 0, 922, 923, 924,
	932, 933, 934, 0, 0, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	936, 0, 0, 928, 0, 0, 916, 917, 918, 0,
	915, 912, 913, 914, 906, 907, 908, 909, 911, 904,
	931, 0, 0, 0, 1962, 919, 0, 902, 903, 0,
	922, 923, 924, 932, 933, 934, 0, 0, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 936, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 910, 0, 0, 0, 919, 0,
	902, 903, 0, 922, 923, 924, 932, 933, 934, 0,
	0, 0, 0, 929, 937, 0, 925, 0, 0, 0,
	0, 0, 0, 905, 0, 0, 936, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 904, 920, 910, 0, 0,
	0, 919, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 929, 937, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 0, 0, 0, 920,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 929,
	937, 0, 0, 926, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 930, 0, 0,
	0, 0, 928, 0, 0, 916, 917, 918, 0, 915,
	912, 913, 914, 906, 907, 908, 909, 911, 0, 931,
	0, 0, 0, 1960, 0, 0, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 0, 0, 0, 921, 0,
	0, 0, 925, 0, 0, 0, 0, 0, 0, 905,
	930, 0, 936, 0, 0, 928, 0, 0, 916, 917,
	918, 0, 915, 912, 913, 914, 906, 907, 908, 909,
	911, 904, 931, 0, 0, 0, 1936, 919, 0, 902,
	903, 0, 922, 923, 924, 932, 933, 934, 0, 0,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 905, 0, 0, 936, 0, 0, 928, 0,
	0, 916, 917, 918, 0, 915, 912, 913, 914, 906,
	907, 908, 909, 911, 904, 931, 910, 0, 0, 1906,
	919, 0, 902, 903, 0, 922, 923, 924, 932, 933,
	934, 0, 0, 0, 0, 929, 937, 0, 925, 0,
	0, 0, 0, 0, 0, 905, 0, 0, 936, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 0, 0, 904, 920, 910,
	0, 0, 0, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 929, 937,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 0, 0, 0,
	0, 920, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 929, 937, 0, 0, 926, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 930,
	0, 0, 0, 0, 928, 0, 0, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 0, 0, 0, 1901, 0, 0, 902, 903,
	0, 922, 923, 924, 932, 933, 934, 0, 0, 0,
	921, 0, 0, 0, 925, 0, 0, 0, 0, 0,
	0, 905, 930, 0, 936, 0, 0, 928, 0, 0,
	916, 917, 918, 0, 915, 912, 913, 914, 906, 907,
	908, 909, 911, 904, 931, 0, 0, 0, 1897, 919,
	0, 902, 903, 0, 922, 923, 924, 932, 933, 934,
	0, 0, 0, 0, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 905, 0, 0, 936, 0, 0,
	928, 0, 0, 916, 917, 918, 0, 915, 912, 913,
	914, 906, 907, 908, 909, 911, 904, 931, 910, 0,
	0, 1820, 919, 0, 902, 903, 0, 922, 923, 924,
	932, 933, 934, 0, 0, 0, 0, 929, 937, 0,
	925, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	936, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 904,
	920, 910, 0, 0, 0, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	929, 937, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 935, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 0, 920, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 929, 937, 0, 0, 926, 930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 0, 920, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	926, 930, 0, 0, 0, 0, 928, 0, 0, 916,
	917, 918, 0, 915, 912, 913, 914, 906, 907, 908,
	909, 911, 0, 931, 0, 0, 0, 1819, 0, 0,
	902, 903, 0, 922, 923, 924, 932, 933, 934, 0,
	0, 0, 921, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 905, 930, 0, 936, 0, 0, 928,
	0, 0, 916, 917, 918, 0, 915, 912, 913, 914,
	906, 907, 908, 909, 911, 904, 931, 0, 0, 0,
	1714, 919, 0, 902, 903, 0, 922, 923, 924, 932,
	933, 934, 0, 0, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 905, 0, 0, 936,
	0, 0, 928, 0, 0, 916, 917, 918, 0, 915,
	912, 913, 914, 906, 907, 908, 909, 911, 904, 931,
	910, 0, 0, 1648, 919, 0, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 0, 0, 0, 0, 929,
	937, 0, 925, 0, 0, 0, 0, 0, 0, 905,
	0, 0, 936, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 904, 920, 910, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 937, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 920, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 929, 937, 0, 0, 926,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 0, 0, 0, 920, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 930, 0, 0, 0, 0, 928, 0,
	0, 916, 917, 918, 0, 915, 912, 913, 914, 906,
	907, 908, 909, 911, 0, 931, 0, 0, 0, 1632,
	0, 0, 0, 0, 902, 903, 0, 922, 923, 924,
	932, 933, 934, 0, 921, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 930, 905, 0, 0,
	936, 928, 0, 0, 916, 917, 918, 0, 915, 912,
	913, 914, 906, 907, 908, 909, 911, 0, 931, 904,
	0, 0, 1221, 0, 0, 919, 0, 902, 903, 0,
	922, 923, 924, 932, 933, 934, 0, 0, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 936, 928, 0, 0, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 904, 1434, 910, 2040, 0, 0, 919, 0,
	902, 903, 0, 922, 923, 924, 932, 933, 934, 0,
	0, 0, 0, 929, 937, 0, 925, 0, 0, 0,
	0, 1136, 0, 905, 0, 0, 936, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 904, 920, 910, 0, 1499,
	0, 919, 1498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 929, 937, 0, 0,
	926, 1467, 1468, 0, 1485, 1486, 1487, 0, 0, 1137,
	0, 935, 0, 0, 2039, 0, 0, 1624, 0, 0,
	0, 0, 0, 927, 0, 0, 0, 0, 0, 920,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 929,
	937, 0, 1482, 926, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 926, 930, 0, 0,
	0, 0, 928, 0, 0, 916, 917, 918, 0, 915,
	912, 913, 914, 906, 907, 908, 909, 911, 0, 931,
	940, 0, 0, 0, 0, 1488, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 0, 0, 0, 921, 0,
	0, 0, 925, 1483, 0, 0, 939, 0, 0, 905,
	930, 0, 936, 0, 0, 928, 0, 0, 916, 917,
	918, 0, 915, 912, 913, 914, 906, 907, 908, 909,
	911, 904, 931, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 1484,
	0, 916, 917, 918, 0, 915, 912, 913, 914, 906,
	907, 908, 909, 911, 0, 931, 910, 0, 902, 903,
	0, 922, 923, 924, 932, 933, 934, 0, 0, 0,
	0, 0, 0, 0, 925, 929, 937, 0, 0, 0,
	0, 905, 0, 0, 936, 0, 0, 0, 0, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 904, 0, 0, 0, 0, 920, 919,
	0, 0, 1479, 1480, 1481, 0, 1478, 1475, 1476, 1477,
	1469, 1470, 1471, 1472, 1474, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 0, 0, 0, 910, 0,
	0, 0, 925, 0, 0, 0, 0, 0, 0, 905,
	0, 0, 936, 0, 921, 0, 0, 929, 937, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 904, 935, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	920, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 910, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 0, 0, 0, 929, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 902, 903,
	935, 922, 923, 924, 932, 933, 934, 0, 930, 0,
	0, 0, 927, 0, 925, 0, 0, 0, 920, 0,
	0, 905, 0, 0, 936, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 904, 0, 0, 0, 0, 0, 919,
	0, 0, 0, 0, 0, 0, 1467, 1468, 0, 1485,
	1486, 1487, 0, 0, 0, 0, 928, 0, 0, 916,
	917, 918, 0, 915, 912, 913, 914, 906, 907, 908,
	909, 911, 0, 931, 921, 0, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 0, 930, 0, 910, 0,
	0, 0, 925, 1505, 0, 0, 1500, 1482, 0, 905,
	0, 0, 936, 0, 0, 0, 1636, 929, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 904, 935, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	920, 0, 0, 0, 928, 0, 1473, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 0, 0, 926, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 910, 0, 902, 903,
	1488, 922, 923, 924, 932, 933, 934, 0, 0, 0,
	0, 0, 0, 0, 925, 929, 937, 0, 1483, 0,
	0, 905, 0, 0, 936, 0, 921, 0, 0, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	0, 0, 927, 904, 0, 0, 0, 0, 920, 919,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 910, 916,
	917, 918, 0, 915, 912, 913, 914, 906, 907, 908,
	909, 911, 0, 931, 921, 0, 0, 929, 937, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	920, 0, 0, 0, 0, 0, 0, 1479, 1480, 1481,
	0, 1478, 1475, 1476, 1477, 1469, 1470, 1471, 1472, 1474,
	0, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 1465, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 0, 0, 902, 903, 0, 922, 923, 924,
	932, 933, 934, 0, 0, 0, 921, 0, 0, 0,
	925, 0, 0, 0, 1458, 0, 0, 905, 930, 0,
	936, 0, 0, 0, 1467, 1468, 0, 1485, 1486, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 919, 0, 902, 903, 0,
	922, 923, 924, 932, 933, 934, 0, 0, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 936, 0, 1482, 928, 0, 0, 916,
	917, 918, 0, 915, 912, 913, 914, 906, 907, 908,
	909, 911, 904, 931, 910, 0, 0, 0, 919, 0,
	902, 903, 0, 922, 923, 924, 932, 933, 934, 0,
	0, 0, 0, 929, 937, 0, 925, 0, 0, 0,
	0, 0, 0, 905, 1473, 0, 936, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 904, 920, 910, 0, 0,
	0, 919, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 929, 937, 0, 0,
	926, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 935, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 0, 0, 0, 920,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 929,
	937, 0, 0, 926, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 928, 0, 0, 916, 917, 918, 0, 915,
	912, 913, 914, 906, 907, 908, 909, 911, 0, 931,
	0, 0, 0, 0, 0, 0, 902, 903, 0, 922,
	923, 924, 932, 933, 934, 1479, 1480, 1481, 921, 1478,
	1475, 1476, 1477, 1469, 1470, 1471, 1472, 1474, 0, 905,
	930, 0, 936, 0, 0, 928, 0, 0, 916, 917,
	918, 0, 915, 912, 913, 914, 906, 907, 908, 909,
	911, 904, 931, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 789, 783, 806, 777, 797,
	796, 0, 0, 779, 778, 0, 0, 0, 808, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 916, 917, 918, 0, 915, 912, 913, 914, 906,
	907, 908, 909, 911, 0, 931, 910, 0, 0, 802,
	0, 794, 793, 0, 0, 0, 0, 28, 0, 0,
	792, 0, 0, 0, 0, 929, 937, 0, 29, 53,
	0, 0, 0, 0, 0, 0, 0, 791, 0, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 55, 0, 0, 0, 0, 920, 31,
	0, 60, 0, 0, 0, 784, 785, 786, 787, 0,
	805, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	56, 0, 0, 0, 43, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	1153, 45, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 790, 930, 0, 0, 1156,
	1154, 1155, 1158, 1157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 781, 0, 0, 0, 0, 0, 0, 0,
	788, 782, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 0, 0, 0, 0, 0, 780, 0, 0,
	803, 804, 0, 0, 928, 0, 42, 916, 917, 918,
	0, 915, 912, 913, 914, 906, 907, 908, 909, 911,
	0, 931, 58, 30, 809, 0, 46, 0, 57, 0,
	0, 0, 0, 0, 47, 0, 0, 67, 0, 0,
	0, 0, 50, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 789, 783, 806, 777, 797, 796,
	69, 0, 779, 778, 0, 0, 0, 808, 807, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 65, 802, 0,
	794, 793, 0, 66, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 784, 785, 786, 787, 0, 805,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 790, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 781, 0, 0, 0, 0, 0, 0, 0, 788,
	782, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 780, 0, 0, 803,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 809,
}
var sqlPact = [...]int{

	26354, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 706, 14627,
	14627, 18167, -1000, -1000, -1000, -1000, -1000, -1000, 691, 685,
	2114, 4693, 18167, 18167, 17897, 1019, 1019, 19517, -1000, -1000,
	22757, -1000, 2479, 521, 529, 521, 521, 502, 19517, 609,
	647, 131, -1000, 743, -16, 22487, 18167, 1339, 39, 16547,
	302, 26354, 17627, 22217, 18167, 17357, 589, 37, 15183, 18167,
	-1000, -14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1199, 320, -14, -1000, 1198, 1094,
	1093, 16547, 21947, 21677, 21407, 21137, -1000, 11250, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 758,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	325, 324, -1000, 17087, -1000, 912, -1000, 38, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 911, -1000, 18167, -1000,
	-1000, 20867, 20597, 317, 929, -1000, -1000, 558, 407, 1358,
	-1000, 52, -1000, -1000, -1000, 1194, -1000, 910, 1191, 1190,
	1189, 1188, 1187, 1186, 404, 806, 468, -1000, 929, -1000,
	929, -1000, -1000, -1000, 588, 19517, -1000, 16547, -1000, 20327,
	18167, 18167, 1125, 20057, -1000, 743, -1000, -1000, -1000, 956,
	1338, 1338, 1338, 1342, 123, 121, 131, 30, 18167, -1000,
	308, 30, 6494, 6494, -1000, -1000, 302, -1000, 347, 14063,
	-1000, 7726, -1000, 776, 1254, 418, 729, 1253, -86, 805,
	803, 1252, 14913, 15183, 37, 36, -1000, -1000, -1000, 4399,
	14913, 650, 13253, -14, -1000, -1000, -1000, 16547, 18167, 18167,
	669, 19787, -1000, 1250, 117, 1249, -1000, 116, 1246, -1000,
	116, 1245, 27, -1000, -1000, -1000, -1000, -1000, -1000, 302,
	16817, 18167, 1448, 26567, -1000, 9526, -1000, -1000, 14627, 770,
	14627, -1000, -1000, 1447, -1000, 9526, -1000, 35, 34, 1035,
	1099, 11829, 11546, 1295, 674, -1000, -1000, -1000, 50, 4693,
	18167, 1206, 14627, 18167, 18167, 18167, 18167, 18167, 18167, -1000,
	1031, -1000, -1000, 18167, 18167, -1000, 33, 31, -1000, 19517,
	-1000, 122, -1000, 297, 1000, 402, 147, 19247, 402, 998,
	-1000, 956, -1000, 920, 1030, 8638, 9526, 131, -1000, -1000,
	131, 131, 9526, -1000, -1000, 18167, 30, 1395, 18167, 189,
	-1000, 25226, -1000, -1000, 9526, 9526, 9526, 9526, 9526, 866,
	336, -1000, 294, 293, 5603, -1000, -1000, 1522, -1000, -1000,
	-1000, 129, -1000, -1000, 9526, -14, -1000, -1000, -1000, -1000,
	292, 1546, 396, -1000, -1000, -1000, 411, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1204, 289, 286, -1000,
	-1000, -1000, -1000, 285, 283, 282, 281, 280, 278, 277,
	274, 273, 272, 268, 267, 266, 265, 264, 836, -1000,
	420, -1000, -1000, 420, 420, -1000, 260, 260, 261, -1000,
	-1000, -1000, -1000, 260, -1000, -1000, -1000, 398, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 263, 189, -1000, -1000, -1000,
	18167, 26, -1000, 25997, -1000, 7, 741, -1000, 16007, 1416,
	1319, 1306, 16547, 1363, 1357, 586, 18167, 18167, 581, 580,
	16547, 386, -1000, -1000, -1000, 18167, -1000, -1000, -42, -1000,
	-1000, 1184, 25, -1000, -1000, 419, 82, 1394, 82, 13523,
	-1000, 18167, 18167, -1000, 18167, -1000, -1000, 18167, -1000, 18167,
	18167, -1000, 18167, 1041, 15467, 808, 1243, 654, -16, 11,
	-1000, 1453, -1000, -1000, -1000, -1000, 84, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 261, 836, 260, 260, 260, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 398, -1000, -1000, 420, 420, 420, -1000,
	-1000, 5, 25997, 578, -1000, 1180, 510, 4, 824, 1090,
	838, -1000, -1000, -1000, -1000, 29, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1501, -1000, -1000, 1519,
	29, -1000, -1000, -1000, -1000, -1000, 1543, -1000, -1000, -1000,
	4693, -1000, -1000, -1000, 18167, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 824, 1090, -1000, -1000, 16547,
	15737, 1381, 1242, 835, -1000, 1374, 18167, 909, 993, -1000,
	606, 1240, -1000, -1000, -1000, -1000, 25997, -1000, 25997, 737,
	1101, -1000, 1101, 28, -1000, 25020, -1000, 259, 3, 419,
	6494, 12967, 26288, 26567, 18167, 601, 9526, 9526, 9526, 9526,
	9526, 9526, 9526, 9526, 9526, 9526, 9526, 9526, 9526, 9526,
	9526, 9526, 9526, 9526, 9526, 9526, 9526, 9526, 1029, 9526,
	575, 9526, 9526, 9526, 9526, 881, 857, 236, 959, 4693,
	-1000, -1000, 646, 646, 646, 26256, 26256, 217, 336, -1000,
	9526, -1000, 8318, 121, 24653, 13, -1000, -1000, -1000, 6195,
	426, 25997, -14, 4987, -1000, 710, 1518, 1213, 1152, 258,
	115, 114, 9526, 9526, 9822, 9822, 9526, 10118, 9526, 9526,
	5899, 9526, 9526, 9526, 9526, 9526, 9526, -1000, 255, -1000,
	-1000, -1000, -1000, 1513, -1000, -1000, 1512, -1000, 599, 593,
	1507, 419, 113, 7726, -1000, 808, 18167, 18167, 18167, -1000,
	-1000, 992, 18977, 989, 26567, 18167, -1000, 254, 244, 1074,
	1059, 18167, 18167, 18707, 18437, 18167, 712, 241, 238, 18167,
	795, -1000, 18167, 18167, 742, 1137, 930, -1000, 413, 14913,
	645, 1178, 18167, 725, 9526, 799, -1000, 12681, 435, 18167,
	772, 85, -1000, -1000, -1000, 377, 18167, -1000, -1000, -1000,
	117, -1000, 116, 116, -1000, -1000, 16547, -1000, -1000, -1000,
	-1000, -1000, -1000, 26567, 335, 334, -1000, 1505, 570, -1000,
	569, 566, 560, -1000, 237, -1000, 9526, 18167, 18167, 1090,
	-1000, -1000, -1000, -1000, 687, -1000, 821, -1000, 12112, -1000,
	-1000, -1000, 710, -1000, 6, -1000, -1000, -1000, -1000, 111,
	-8, 12, 26567, -1000, -1000, -1000, -1000, -1000, 18167, 271,
	18167, -16, 18167, -1000, 1539, -16, 18167, 1239, 1262, 362,
	18167, -1000, -1000, -1000, 9526, -1000, -1000, -1000, -16, -1000,
	1148, -1000, -55, 1165, -145, 118, 389, -1000, 12395, 1221,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 401, 310, 310, 471, 471, 471, 471, 644, 644,
	177, 608, 3014, 3014, 3014, 151, 321, 321, 3014, 3014,
	3014, 26256, 26050, 209, 9526, 9526, 554, 850, 236, 209,
	9526, 1493, 209, 209, 209, -1000, 769, -1000, -1000, -1000,
	1173, 232, 10118, 10118, -1000, -1000, -1000, 5603, 10710, -1000,
	-1000, -1000, -1000, -1000, 231, 9526, -1000, 24706, -167, -21,
	-1000, -1000, 9526, -93, -132, -1000, -1000, 623, -1000, 9526,
	-1000, -15, 9526, 9526, 9526, 109, -1000, 108, 870, 226,
	225, 9526, -1000, -1000, 25944, 23346, 107, 1169, -70, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 106, 105, 25738, -70,
	104, 25606, -1000, 10118, 10118, 10118, 5603, 222, 103, 24967,
	-70, 25636, 8022, 8022, 8022, 102, 25548, 9526, -70, 23315,
	3784, 3696, -22, -23, -27, 1504, -28, 100, 399, 397,
	99, 1148, -1000, -1000, -1000, -1000, 549, 548, 1238, -1000,
	987, -1000, 439, -1000, 767, 9526, 18167, 218, 212, 831,
	-1000, 1237, 919, 1236, 919, -1000, 7, 715, 9526, 9526,
	-1000, 544, -1000, -1000, 543, 413, 1168, 611, -1000, 893,
	-1000, -1000, 636, -1000, -1000, 6494, 25997, -1000, 753, 1309,
	-29, -1000, -1000, 6494, 419, 13523, 12967, 7726, -33, -1000,
	-1000, -1000, 808, -1000, 434, 1503, 96, 1009, 786, 745,
	697, 1499, 25997, 6, 6, -1000, -1000, -1000, -1000, -1000,
	-1000, 18167, 1128, -1000, 15737, 210, 18167, 207, -1000, 195,
	-1000, -1000, 187, 18167, 1043, 362, 14913, -1000, 402, -1000,
	95, 1143, 1341, -1000, 12967, 1088, 1079, 12967, 952, 872,
	872, 872, -1000, 389, 4094, 9526, 16277, 887, 67, 91,
	1165, 1117, 9526, 209, 209, 9526, 10118, 10118, -1000, 209,
	-1000, -1000, -1000, -1000, 1167, 184, 9526, 26567, 25091, 3763,
	-34, -1000, 7406, -4, -1000, 9526, -1000, 24600, -1000, -1000,
	333, 1258, -1000, 9526, 25416, 89, 7110, -1000, 25328, -17,
	-17, -1000, 1535, -1000, 13793, 424, 890, 24394, 26288, 26567,
	-1000, 9526, -1000, -1000, 1163, 9526, -1000, 26288, 26567, 10118,
	10118, 10118, 10118, 10118, 10118, 10118, 10118, 10118, 10118, 10118,
	10118, 10118, 10118, 10118, 10118, 10118, 10118, 10118, 1010, 10118,
	1489, 1489, 1489, -5, 6790, -1000, 1203, 1163, 9526, 9526,
	26567, 87, 80, 78, -1000, 9526, -70, 9526, 9526, 9526,
	-1000, -1000, -1000, 77, -1000, 1494, -1000, -1000, -1000, -1000,
	1143, 18167, 18167, 18167, 1228, -1000, 1114, -1000, 24341, -38,
	18167, 18167, -1000, 1066, 1068, 478, 18167, -1000, 18167, -1000,
	18167, 18167, 18167, -40, -51, 18167, 18167, -1000, 14913, 539,
	181, -1000, -19, 6494, 215, -16, -19, 725, -1000, -10,
	-1000, 371, -1000, 331, 328, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 76, -1000, -1000, 1131, -1000, 10980, 180,
	18167, 15737, 1373, 10980, 907, 1042, 362, 14913, -1000, 606,
	-1000, 416, 9526, 9526, 1165, 12967, 12967, 1062, 1076, 12967,
	-1000, -1000, -1000, -1000, 16277, -1000, 1096, -57, -1000, -1000,
	18167, 179, -1000, 389, 327, 11250, 496, 209, 3247, 3069,
	9526, 26567, 3590, -59, 9526, 9526, -1000, -63, -1000, 9526,
	322, 25997, -1000, -1000, -1000, 25997, 9526, 1528, 9526, 74,
	73, 72, -1000, -1000, -1000, 23027, 9526, 71, -1000, 70,
	69, 25997, 1203, 25997, -1000, -1000, 536, 536, 1489, 1489,
	1489, 1489, 2092, 2092, 2272, 1990, 2051, 2051, 2051, 1739,
	358, 358, 2051, 2051, 2051, 1162, 1053, 178, 25974, 9526,
	-69, -1000, -1000, -1000, 25997, 25997, 66, -1000, -1000, -1000,
	-70, 3432, 24288, 24082, -1000, 65, 416, -1000, -1000, -1000,
	18167, -1000, 18167, -1000, 18167, 18167, 1171, 969, -1000, -1000,
	1051, 173, 10118, 18167, -1000, 814, -75, -76, 954, -1000,
	939, 9526, -1000, 26567, 919, 919, -1000, 538, 498, -1000,
	-1000, -1000, -1000, -12, 14357, 1533, -19, 1267, 18167, 1303,
	-1000, -1000, 166, -1000, -1000, -1000, 852, -81, -1000, 307,
	1326, 9526, -1000, -1000, 161, 10980, -83, 64, -16, -88,
	18167, -1000, 362, 14913, -1000, 1262, -1000, 18167, 25997, -70,
	-1000, 1062, -1000, 160, 9526, 12967, -1000, -1000, -165, -1000,
	359, -1000, 389, 158, 18167, 16277, 389, -89, 9526, 9526,
	3590, -94, -1000, 209, 209, -1000, 24029, -1000, 25997, -1000,
	25328, -1000, -1000, -1000, 856, -1000, 23976, -1000, -1000, -1000,
	-1000, 10118, 1160, 157, 26567, 23770, -1000, -1000, 9526, -1000,
	-1000, -1000, -1000, -1000, 951, -1000, -1000, 18167, 979, -1000,
	-1000, 9526, 25974, 156, 1128, 155, -1000, -1000, -1000, 792,
	-1000, -1000, 25997, 1328, -1000, -1000, 18167, 18167, -1000, 154,
	-14, -96, -1000, 192, 563, -111, 18167, -1000, -1000, 5307,
	18167, 814, 10980, 1333, -14, 18167, 1333, 23717, 4987, -115,
	-1000, 1128, -1000, 814, 153, 14913, -1000, 1043, -56, -1000,
	1370, -1000, 18167, 25997, -1000, 1096, -1000, 4693, 16277, 18167,
	-117, -1000, 16277, 1041, 209, 209, -1000, -1000, 63, 890,
	1330, -1000, 3559, 10118, 26567, -121, -1000, 23664, -1000, -1000,
	1224, 23405, 1016, 18167, -1000, 18167, 18167, 444, 18167, -1000,
	-1000, 9526, 1533, -1000, -1000, 1529, 655, -1000, 419, -1000,
	152, 1128, -1000, -1000, -1000, -1000, 1326, -15, 814, -1000,
	1128, 10980, -1000, 1042, 18167, 149, -125, -1000, -1000, -1000,
	-127, -1000, -1000, 311, -1000, 826, 9526, 3559, -136, -1000,
	-1000, 1216, -1000, 898, 884, 59, -142, 147, -1000, 9526,
	-1000, -17, -1000, -1000, 13523, -1000, 18167, -1000, 1333, 58,
	1128, -1000, -143, -1000, -1000, -1000, -1000, -1000, 389, 55,
	9230, 9230, -70, -1000, 18167, -1000, 902, 901, 701, -1000,
	-1000, -1000, -1000, -1000, 1016, 25997, 54, -126, -148, -1000,
	-1000, -1000, 814, 16277, -1000, -1000, -1000, 10414, 928, 711,
	24914, -1000, -1000, -1000, 1274, -1000, 457, 900, 900, 898,
	1528, -1000, 885, 1128, -1000, 1459, -1000, -1000, -1000, -1000,
	-1000, -1000, 1478, -1000, -1000, 1056, -1000, -1000, -1000, -1000,
	-1000, -1000, 8934, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1752, 1748, 1394, 1494, 1746, 1744, 1441, 1743, 1741,
	1740, 1737, 1736, 1735, 119, 1433, 1430, 24, 1414, 1734,
	104, 1733, 1732, 1731, 117, 1730, 1729, 1727, 54, 1726,
	1725, 1408, 1392, 1724, 1723, 110, 1721, 18, 1720, 95,
	1719, 62, 173, 2219, 141, 1718, 1715, 1712, 20, 116,
	91, 1711, 84, 1710, 1709, 65, 41, 29, 22, 1708,
	123, 130, 1417, 49, 1707, 1704, 168, 1702, 19, 16,
	181, 153, 150, 140, 133, 1699, 1698, 1697, 1696, 68,
	1695, 6, 1688, 1687, 26, 78, 21, 1686, 34, 113,
	1685, 1684, 136, 1683, 90, 115, 1367, 33, 135, 12,
	1682, 83, 13, 93, 1676, 1675, 1675, 137, 38, 1674,
	46, 99, 149, 1673, 71, 154, 87, 40, 82, 121,
	1670, 1665, 1664, 105, 1663, 114, 97, 1662, 1657, 94,
	1654, 143, 146, 1651, 1649, 134, 1648, 1643, 1641, 158,
	1638, 1632, 156, 1630, 11, 50, 88, 10, 1370, 1368,
	122, 81, 1628, 23, 1627, 1793, 856, 594, 53, 101,
	85, 64, 103, 69, 89, 25, 1625, 1622, 124, 1620,
	1619, 1617, 1615, 1614, 100, 1613, 1609, 92, 148, 35,
	3, 9, 109, 37, 56, 102, 145, 151, 128, 1604,
	107, 132, 61, 199, 1602, 1601, 1182, 131, 1599, 1595,
	1594, 1135, 1132, 757, 212, 1593, 1592, 732, 730, 1591,
	1589, 77, 1587, 125, 1586, 1584, 147, 216, 27, 1580,
	63, 36, 108, 1578, 72, 0, 2087, 702, 1577, 138,
	96, 1575, 1573, 1571, 1570, 39, 2, 7, 5, 8,
	4, 47, 28, 1569, 1568, 139, 57, 86, 1567, 155,
	1565, 1564, 1563, 60, 1562, 17, 1560, 14, 1559, 1558,
	15, 1, 144, 1557, 112, 1556, 1474, 1555, 152, 1554,
	1552, 1459, 52, 106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 224, 224, 36, 36, 40, 40, 37, 38, 38,
	39, 39, 6, 6, 6, 7, 7, 7, 7, 7,
	7, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	98, 98, 97, 97, 100, 100, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 192,
	192, 191, 19, 166, 166, 20, 20, 20, 20, 21,
	124, 124, 22, 22, 22, 22, 23, 27, 262, 262,
	262, 266, 266, 267, 267, 268, 268, 268, 268, 268,
	268, 268, 264, 264, 30, 30, 30, 30, 30, 143,
	139, 139, 141, 141, 141, 141, 61, 138, 138, 138,
	138, 140, 140, 140, 140, 217, 216, 216, 222, 222,
	222, 76, 76, 76, 76, 76, 77, 77, 77, 215,
	215, 215, 215, 223, 223, 223, 223, 223, 223, 78,
	78, 78, 221, 221, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 18, 263, 263, 265, 265, 32,
	32, 10, 10, 11, 11, 79, 79, 80, 80, 146,
	146, 146, 146, 81, 81, 53, 53, 53, 145, 233,
	233, 234, 234, 234, 234, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 231, 231, 232, 229, 229, 230,
	230, 230, 230, 269, 269, 144, 144, 84, 84, 238,
	238, 238, 238, 236, 236, 236, 236, 236, 239, 237,
	240, 240, 240, 240, 240, 178, 178, 178, 34, 12,
	59, 59, 13, 9, 9, 128, 128, 88, 88, 183,
	183, 183, 69, 69, 48, 48, 48, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 129, 129,
	130, 130, 25, 29, 33, 33, 33, 33, 33, 271,
	271, 65, 65, 65, 65, 66, 66, 142, 142, 142,
	142, 142, 60, 8, 8, 55, 55, 56, 56, 57,
	57, 58, 58, 272, 272, 24, 24, 24, 24, 24,
	72, 72, 135, 135, 135, 137, 137, 136, 136, 136,
	114, 114, 35, 93, 93, 102, 102, 103, 103, 189,
	104, 104, 28, 28, 43, 43, 41, 41, 41, 41,
	41, 41, 42, 42, 44, 44, 44, 44, 44, 44,
	44, 246, 246, 246, 249, 249, 245, 247, 247, 248,
	248, 270, 270, 115, 115, 115, 83, 82, 82, 86,
	86, 85, 87, 87, 182, 112, 112, 112, 112, 131,
	132, 132, 133, 133, 134, 134, 111, 111, 163, 163,
	45, 45, 92, 92, 94, 94, 153, 153, 154, 154,
	152, 152, 152, 184, 184, 184, 184, 184, 184, 184,
	181, 181, 185, 185, 185, 185, 185, 185, 179, 179,
	179, 179, 180, 180, 190, 190, 118, 118, 118, 118,
	116, 116, 117, 117, 186, 186, 186, 186, 113, 113,
	187, 187, 187, 147, 147, 193, 193, 193, 211, 211,
	91, 91, 91, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 195, 195, 195, 195,
	197, 197, 197, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 210, 210, 210,
	210, 210, 210, 198, 198, 205, 205, 206, 206, 207,
	208, 199, 199, 200, 200, 201, 202, 209, 209, 209,
	209, 213, 213, 203, 203, 203, 203, 203, 204, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 126, 126, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 157, 157, 157, 157, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	241, 241, 241, 241, 241, 241, 241, 243, 243, 244,
	244, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 250, 250,
	251, 251, 253, 253, 254, 254, 255, 256, 256, 256,
	257, 258, 258, 252, 252, 259, 259, 259, 260, 260,
	261, 261, 261, 261, 261, 168, 168, 168, 169, 169,
	170, 176, 176, 176, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	67, 67, 67, 67, 67, 99, 99, 165, 165, 164,
	164, 164, 167, 167, 119, 119, 212, 212, 212, 212,
	212, 212, 212, 120, 120, 120, 127, 121, 121, 122,
	122, 122, 122, 122, 122, 160, 161, 123, 123, 123,
	162, 162, 171, 175, 175, 174, 173, 173, 172, 172,
	150, 150, 151, 151, 149, 148, 108, 108, 107, 107,
	105, 105, 106, 106, 273, 273, 177, 177, 109, 109,
	110, 101, 101, 188, 188, 188, 188, 95, 95, 74,
	74, 96, 96, 70, 70, 73, 73, 71, 71, 71,
	71, 89, 89, 90, 90, 68, 68, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 214, 214,
	214, 62, 62, 62, 63, 63, 64, 64, 219, 219,
	219, 220, 220, 220, 220, 218, 218, 218, 218, 218,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 1, 1, 1,
	1, 6, 3, 5, 4, 6, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 4, 6, 3, 1, 5, 6, 9,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 0, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 3, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	219, 65, -8, -9, -10, -11, -12, -13, -248, 93,
	101, 123, 202, 100, 86, 117, 222, 230, -41, -43,
	238, -143, 239, 35, 248, 59, 96, 224, 218, 270,
	67, -246, -44, -42, 318, 293, 299, 233, -45, 256,
	285, 321, 256, 132, 79, 288, -262, -96, 256, 79,
	-71, -62, 311, 4, -225, -227, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 131, 145, 147, 148,
	151, 150, 155, 158, 161, 163, 164, 165, 166, 167,
	169, 170, 172, 174, 171, 177, 179, 180, 182, 185,
	188, 191, 194, 195, 196, 197, 200, 202, 204, 205,
	206, 208, 209, 211, 212, 213, 214, 215, 218, 216,
	217, 219, 220, 222, 224, 225, 227, 229, 230, 231,
	232, 235, 236, 238, 239, 241, 244, 247, 248, 249,
	252, 250, 246, 255, 257, 258, 259, 266, 270, 271,
	272, 273, 276, 277, 278, 280, 282, 283, 284, 289,
	294, 295, 296, 297, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 50, 51, 52, 54, 81, 83, 84,
	99, 102, 103, 109, 119, 121, 127, 128, 137, 138,
	139, 140, 142, 153, 176, 178, 189, 193, 199, 201,
	207, 226, 234, 242, 243, 251, 253, 261, 262, 263,
	267, 268, 285, 286, -262, -70, -62, 79, 88, 136,
	278, 277, 79, 132, 256, 288, -17, 318, -28, -7,
	-15, -4, -24, -35, -14, -31, -18, -32, -16, 23,
	-218, 4, -225, -227, -226, -228, 56, 68, 116, 135,
	129, 144, 146, 154, 156, 168, 190, 192, 223, 240,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	48, 49, 53, 55, 57, 63, 67, 71, 72, 73,
	74, 75, 76, 85, 87, 89, 90, 91, 94, 96,
	98, 104, 105, 106, 112, 114, 115, 117, 120, 122,
	130, 132, 134, 141, 143, 149, 152, 157, 159, 160,
	173, 175, 181, 183, 184, 186, 187, 198, 203, 210,
	221, 233, 237, 245, 254, 256, 260, 264, 265, 269,
	274, 275, 279, 281, 287, 288, 290, 291, 292, 293,
	-62, -62, -62, 202, 22, -266, 22, -267, -268, 67,
	93, 117, 233, 136, 88, 277, -266, -66, 230, -62,
	-139, 158, 236, 226, 266, -140, -138, -217, 261, 167,
	-97, -62, 4, 22, 79, 58, 80, 118, 132, 133,
	63, 64, 148, 257, 261, 266, 67, 280, -271, 266,
	266, -271, -271, -65, 266, 264, -66, -270, 256, 256,
	279, 288, -128, 79, 275, -42, -44, -43, -85, -86,
	274, 141, 98, 187, -41, -43, -246, -249, 208, -245,
	-62, -249, -82, -83, 22, 90, 322, -186, -70, 184,
	-110, 318, -3, -186, 127, -70, -73, 127, -70, -62,
	-186, 127, 264, 322, -96, -89, -62, -149, -148, 320,
	115, 115, 318, -107, -108, -148, -149, 115, 143, 143,
	-187, -186, -62, 127, -74, 127, -73, -98, 127, -97,
	-98, 127, -192, -191, -220, 4, -225, -227, -226, 285,
	256, 132, -166, 318, -124, 318, -62, 22, 183, 322,
	183, -62, -139, 52, -139, 318, -141, -60, -61, 145,
	204, 264, 303, 115, 297, -78, 5, 85, -100, 320,
	115, -263, 183, 115, 115, 115, 115, 115, 115, 297,
	145, 204, 229, 256, 288, -142, -60, -61, -142, 264,
	-66, -113, -186, -97, 127, -62, -97, 132, -62, 127,
	-85, -86, -112, -131, -132, 157, 181, -115, 22, 90,
	-115, -115, 44, 319, 319, 322, -249, -90, 318, -101,
	-188, -155, 311, -157, 309, 310, 315, 173, 298, -168,
	-159, -171, 99, 226, 318, -70, -158, 323, 9, -243,
	-43, 29, -169, -170, 48, -62, 7, 8, 5, 6,
	-68, -195, -204, 269, 104, 175, -241, -242, 4, -225,
	-219, -196, -206, -200, -203, 142, 56, 72, 75, 73,
	76, 237, 279, 49, 28, 102, 103, 193, 199, 253,
	267, 268, 127, 176, 128, 54, 119, 153, 92, 37,
	39, 41, 42, 50, 51, 81, 83, 84, 109, 137,
	138, 139, 140, 178, 207, 242, 251, 262, 263, 286,
	-226, -207, -208, -201, -202, -209, -101, -110, 311, -70,
	318, -109, -177, -155, 85, -50, 216, -49, 21, 23,
	93, 283, 99, 246, 246, 216, 99, 323, 216, 216,
	99, -221, -220, 5, -71, 322, -218, 311, -224, -221,
	249, 319, -95, -70, -108, -187, -72, -70, -72, 238,
	-62, 30, 99, -52, 322, 47, 220, 99, -52, 322,
	99, -52, 99, 319, 322, -186, 127, -73, 30, -165,
	-193, -194, -196, -205, -199, -203, -204, 40, 46, 45,
	259, 234, 243, 38, 137, 138, 139, 140, 242, 37,
	207, 109, 92, 84, 83, 178, 42, 41, -207, -208,
	-201, -202, 81, 262, 263, 142, 39, 51, 50, 286,
	251, -99, -155, -262, -268, -262, 30, -99, 322, 322,
	155, -77, 161, 172, 124, -216, 85, -222, -215, -178,
	9, 269, 104, 183, -221, 8, 310, -214, 7, 309,
	-216, 85, 70, -223, 5, 4, -204, -178, 85, 158,
	320, -218, -217, -265, 112, -262, -217, -217, -217, -217,
	-217, -62, 155, -217, -217, 322, 322, -66, -52, 322,
	318, -84, 173, -247, 293, -84, 318, -63, 127, -62,
	-247, 173, -112, -132, -131, -133, -155, 22, -155, -157,
	-42, -42, -42, -87, -182, -155, -245, 30, -89, -92,
	322, 115, 10, 11, 55, 33, 309, 310, 311, 312,
	110, 313, 306, 307, 308, 305, 301, 302, 303, 61,
	162, 228, 13, 14, 15, 26, 186, 156, 298, 129,
	240, 315, 16, 17, 18, 144, 36, 130, -67, 30,
	4, -75, -155, -155, -155, -155, -155, 192, -105, -150,
	316, -43, 318, -43, -155, -99, 7, -43, -164, 316,
	-172, -155, -107, 318, 5, 5, 318, -250, 294, 112,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 201, -213, 289,
	-213, -213, -197, 318, -197, -198, 318, -197, 295, 299,
	318, -92, -70, 322, 319, 322, 264, -129, 63, 57,
	-145, 127, 57, -229, -62, 63, -230, 53, 275, 203,
	114, -129, 63, -129, 63, 63, -186, 33, 33, 264,
	-73, -62, 264, 264, -186, -190, 300, -62, -190, 322,
	115, 319, 322, -147, 291, -135, -28, 318, 85, 30,
	-135, -102, -103, -189, -104, -70, 318, -62, -62, -73,
	-74, -97, -98, -98, -17, -191, 99, -20, -28, -24,
	-35, -14, 319, 322, -91, 29, -125, 318, 296, 165,
	82, 125, 164, -126, 232, 319, 322, 264, 115, 266,
	319, -61, -60, -76, 206, 244, 217, 235, 322, 8,
	7, 7, 5, -218, -264, -62, -61, -60, -186, -79,
	-89, -80, -62, -146, -145, -231, -232, -229, 132, 275,
	105, 30, 99, -59, 197, 30, 183, 173, -55, 258,
	99, -134, 226, 227, 322, -48, 31, 89, 318, 319,
	-147, -188, -94, -184, -186, -70, -43, -185, 318, 316,
	-211, -193, -210, 182, 212, 213, 211, 215, 214, -193,
	-97, 261, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, 156, 129, 240, 36, 130, -155,
	264, -155, -155, -155, -155, 175, 173, 269, 104, 276,
	90, 179, -273, 254, 32, -162, -43, 318, -176, 27,
	245, 22, -218, -168, 226, 318, -150, -155, -151, -99,
	319, 319, 322, -99, -167, 317, -164, -175, -174, 290,
	319, -99, 287, 22, 90, 311, -125, 7, -251, 107,
	120, 318, 319, 319, -155, -155, -119, -212, -99, 4,
	296, 165, 82, 125, 164, 232, -119, -120, -155, -99,
	-121, -156, -157, 309, 310, 315, 318, 226, -122, -155,
	-99, -155, 43, 152, 265, -123, -155, 115, -99, -155,
	-155, -155, -99, -99, -99, 318, 7, 7, 261, 261,
	7, -147, 319, -177, -49, -70, -62, -62, 173, -145,
	127, -54, 173, -193, -62, 318, 318, 147, 147, -62,
	-62, 127, -62, 127, -62, -62, -50, 216, 318, 318,
	-62, 216, -62, -70, 216, -36, 126, 179, -39, 293,
	-221, 249, 115, -70, -114, 221, -155, -114, -137, 183,
	-95, 285, -62, 221, -93, 322, 115, 303, -95, -52,
	-52, -52, -186, -193, 316, 316, 7, 264, 264, 264,
	264, 318, -155, -264, -264, -60, 273, 60, 206, -222,
	-125, 322, 319, 319, 322, -63, 132, -63, -28, -97,
	5, -28, -70, 99, -56, 95, -272, 303, -62, -182,
	-20, -111, 120, -190, 322, 68, -118, 146, 168, 116,
	154, 223, 135, -152, 323, 318, -181, 299, -43, -185,
	-184, 101, 297, -155, -155, 264, -273, 254, -162, -155,
	175, 269, 104, 276, 90, 179, 115, 318, -156, -156,
	-99, -159, 318, -99, 317, 326, 319, -155, 317, 317,
	322, -173, -174, 94, -155, -86, 322, -85, -155, -99,
	-99, 319, 319, -256, 191, 318, 318, -155, 30, 322,
	319, 115, 319, 319, -127, 198, 319, 10, 11, 309,
	310, 311, 312, 110, 313, 306, 307, 308, 305, 301,
	302, 303, 61, 162, 228, 13, 14, 15, 144, 130,
	-156, -156, -156, -99, 318, 319, -160, -161, 115, 112,
	30, -123, -123, -123, 319, 115, -99, 322, 322, 322,
	319, 319, 319, 7, 319, 322, 319, 297, 297, 319,
	-111, 264, 264, 99, 173, 282, -233, -230, -155, -89,
	318, 318, -47, 93, 238, -130, 99, -52, 99, -52,
	264, -129, 63, -99, -99, 264, 264, -39, 115, 255,
	185, 249, -101, 221, 62, 319, -101, -147, -103, -94,
	-177, 319, 317, 7, 7, 319, 165, 125, 164, -126,
	164, -126, -126, 7, -62, -81, 131, -146, 318, -63,
	318, 318, -84, 318, -62, -57, 151, -272, -221, -247,
	319, -163, 122, 44, -184, 146, 146, -184, -118, 146,
	-116, 190, -116, -116, -181, -218, 324, -99, -180, -179,
	30, -62, 188, 319, -17, 318, -155, -155, -156, -156,
	115, 318, -155, -165, 26, 26, 319, -99, 319, 322,
	-151, -155, 319, -164, 96, -155, 260, 319, 287, -86,
	-86, -86, 5, -257, -62, 318, 291, -85, 319, -211,
	-193, -155, -160, -155, -211, -193, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, 90, 173, 179, -156, 322,
	-99, 319, -161, -160, -155, -155, -193, 319, 319, 319,
	-99, -155, -155, -155, 319, 7, -163, -62, -62, -145,
	99, -234, 63, -235, 55, 105, 67, 173, 175, 275,
	203, 53, 85, 210, 319, 319, -89, -89, 173, 85,
	173, 85, 78, 271, -62, -62, -70, -62, -62, 319,
	319, -62, -70, -224, 261, 318, -101, -136, 318, 183,
	-28, -114, 303, 317, 317, 319, 130, -88, -183, -62,
	-244, 318, -241, -242, -68, 318, -89, -79, 30, -88,
	183, -58, 150, -272, -221, -55, -253, 292, -155, -99,
	-184, -184, -117, 281, 183, 146, -184, -180, -154, -153,
	113, 171, 319, -62, 318, -181, 317, -192, 26, 26,
	-155, -165, 319, -155, -155, 319, -155, 317, -155, 5,
	-155, 319, 319, 319, -258, -62, -155, 319, 319, 319,
	-161, 115, 90, 179, 318, -155, 319, 319, 322, 319,
	319, 319, -253, -145, -62, -97, -62, 105, 127, 175,
	147, 318, -156, -70, -144, -269, 66, 252, 319, 319,
	175, 175, -155, -193, -52, -52, 264, 264, -158, -68,
	-62, -38, -37, 5, 91, -89, 63, -110, -43, 318,
	194, 319, 322, -69, -107, 55, -69, -155, 318, -88,
	319, 319, -28, 319, -70, -272, -221, -56, -254, -255,
	-62, -117, 318, -155, -184, 322, 325, 303, -181, 318,
	-89, -179, -181, 319, -155, -155, 319, 319, -86, -252,
	196, 319, -156, 115, 318, -165, 319, -155, -235, -63,
	173, -155, -64, 318, -81, 318, 210, -51, 55, -62,
	-62, 318, 322, 319, -40, 303, 277, 174, 319, -62,
	-62, -144, -183, -48, -97, -48, 319, -99, 319, -81,
	-144, 318, -221, -57, 322, 30, -89, -153, -218, -180,
	-89, 319, -180, -17, 319, -86, 44, -156, -165, 319,
	319, 99, 319, -238, 163, -62, -89, -70, -46, 281,
	-97, -99, -37, 5, 238, -147, 318, -81, -69, -86,
	-144, -81, -88, -58, -255, -257, 319, 319, 317, -259,
	205, 227, -99, 319, 105, -236, -239, -237, 183, 116,
	195, 241, 319, 319, -84, -155, -86, -102, -89, -48,
	319, -81, 319, -181, 319, -260, -261, 36, 272, 70,
	-155, -260, -62, -237, 183, -239, 183, 277, 88, -238,
	319, -147, 319, -144, -180, -261, 200, 111, 226, 200,
	111, -240, 170, 220, 47, 238, -240, -236, -53, 47,
	220, -81, 26, 20, 175, 85, -261,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 75, 76, 77, 78, 79, 80, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 382, -2,
	0, 148, 0, 330, 0, 330, 330, 334, 0, 412,
	296, 409, -2, 420, 0, 0, 0, 418, 396, 0,
	0, -2, 0, 0, 0, 0, 0, 128, 0, 930,
	861, 867, 868, 891, 892, 893, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 0, 0, 863, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 0,
	214, 905, 906, 907, 908, 909, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	114, 121, 122, 982, 124, 0, 131, 132, 133, 135,
	136, 137, 138, 139, 140, 141, 0, 323, 1003, 336,
	144, 958, 1007, 1076, 1022, 151, 161, 0, 1082, -2,
	165, 92, 194, 195, 196, 0, 198, 216, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 213, 341, 329,
	341, 326, 327, 328, 331, 0, 322, 0, 411, 0,
	0, 0, 0, 0, 295, -2, 392, 393, -2, 0,
	415, 415, 415, 0, 0, 393, 0, 401, 986, 404,
	874, 402, 0, 0, 417, 416, 0, 397, 484, 0,
	440, 0, 2, 0, 1061, 484, 0, 1061, 866, 0,
	0, 1061, 0, 0, 129, 130, 871, 869, 870, 0,
	0, 0, 0, 864, 838, 836, 837, 0, 0, 0,
	0, 490, 82, 1061, 52, 1061, 859, 52, 1061, 90,
	52, 1061, 0, 109, 111, 901, 902, 903, 904, 1087,
	0, 0, 0, 0, 119, 0, 123, 125, 0, 0,
	0, 335, 145, 1050, 147, 0, 150, 152, 153, 0,
	0, 0, 0, 0, 0, 164, 189, 190, 93, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 209, 210, 0, 0, 324, 337, 338, 325, 0,
	333, 52, 488, 268, 1061, 408, 268, 895, 408, 1061,
	-2, 0, 388, 427, 428, 0, 0, 0, 413, 414,
	0, 0, 0, 384, 385, 0, 403, 0, 0, 443,
	851, 855, 856, 585, 0, 0, 0, 0, 0, 0,
	675, 677, 1055, 1076, 0, 679, 680, 0, 682, 684,
	685, 0, 688, 689, 829, 863, 877, 878, 879, 880,
	0, 0, 0, 885, 886, 887, 729, 698, -2, -2,
	875, 516, 517, 518, 519, -2, 1089, 702, 704, 706,
	707, 708, 709, 0, 1039, 1056, 1057, 1072, 1073, 1081,
	1085, 1086, 1061, 1069, 1062, 1051, 1059, 1068, 935, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	900, 547, 548, 553, 554, 556, 443, 441, 485, 486,
	0, 0, 848, 846, 847, 29, 319, 31, 0, 319,
	319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 192, 193, 862, 0, 834, 835, 475, 61,
	72, 0, 0, 857, 839, 494, 0, 360, 0, 0,
	491, 0, 0, 84, 0, 50, 51, 0, 86, 0,
	0, 88, 0, 410, 0, 0, 1061, 0, 410, 0,
	787, 502, 503, 504, 505, 506, 582, 509, 510, 511,
	512, 513, 514, 515, 523, 524, 525, 526, 527, 528,
	529, 544, 0, 522, 522, 522, 535, 536, 545, 546,
	551, 552, 563, 564, 566, 568, 562, 562, 562, 559,
	560, 0, 785, 0, 134, 0, 0, 0, 0, 0,
	0, 156, 176, 177, 178, 157, 159, 166, 168, 169,
	170, 179, 180, 181, 182, 285, 0, 287, 888, 0,
	158, 160, 162, 163, 183, 184, 0, 186, 187, 188,
	0, 94, 197, 199, 0, 215, 200, 201, 202, 203,
	204, 205, 208, 211, 212, 0, 0, 332, 288, 0,
	226, 0, 0, 291, 407, 0, 0, 0, 1061, 894,
	346, 0, 391, 425, 426, 429, 432, 433, 430, 585,
	398, 399, 400, 421, 422, 306, 405, 0, 0, 494,
	0, 0, 0, 0, 0, 0, 764, 765, 766, 767,
	768, 769, 772, 773, 770, 771, 774, 775, 776, 0,
	0, 0, 777, 778, 779, 0, 0, 781, 0, 783,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	854, 780, 590, 591, 592, 614, 615, 0, 676, 840,
	833, 678, 0, -2, 785, 0, 681, 686, 687, 0,
	0, 828, -2, 0, 882, 582, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 808, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 550, 561,
	558, 557, 533, 0, 532, 530, 0, 534, 0, 0,
	0, 494, 0, 0, 850, 0, 0, 0, 0, 318,
	33, 1061, 0, 54, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 0, 0, 64, 0, 872, 71, 0,
	0, 0, 0, 371, 0, 371, 362, 0, 0, 0,
	358, 374, 375, 377, 378, 0, 0, 492, 83, 860,
	52, 91, 52, 52, 97, 110, 0, 112, 115, 116,
	117, 118, 113, 0, 495, 497, 507, 0, 569, 570,
	571, 572, 573, 574, 583, 120, 0, 0, 0, 0,
	149, 154, 155, 342, 0, 173, 0, 175, 0, 286,
	890, 889, 582, 95, 217, 142, 339, 340, 489, 0,
	0, 225, 871, 227, 229, 230, 231, 232, 895, 0,
	895, 0, 0, 289, 0, 0, 0, 0, 348, 354,
	0, 431, 434, 435, 0, 424, 304, 305, 410, 873,
	437, 852, 475, 444, 452, 484, 461, 456, 0, 0,
	586, 498, 499, 537, 538, 539, 540, 541, 542, 587,
	588, 0, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, -2, -2, -2, 606, 607, 608, -2, -2,
	-2, 612, 613, -2, 782, 784, 0, 845, 0, -2,
	0, 622, -2, -2, -2, 626, 0, 629, 631, 633,
	0, 0, 0, 0, 844, 643, 820, 0, 0, 761,
	762, 763, 853, 628, 0, 0, 841, 832, 0, 0,
	-2, 683, 0, 0, 0, 791, 792, 827, 823, 0,
	690, 420, 0, 0, 0, 0, 883, 0, 739, 0,
	0, 0, 703, 705, 0, 0, 0, 0, 795, -2,
	-2, -2, -2, -2, -2, -2, 0, 0, 785, 805,
	0, 0, 646, 0, 0, 0, 0, 1076, 0, 785,
	813, 0, 0, 0, 0, 0, 785, 0, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 437, 487, 849, 32, 308, 0, 0, 0, 35,
	1061, 43, 0, 240, 0, 0, 0, 0, 0, 321,
	44, 1061, 52, 1061, 52, 45, 30, 319, 0, 0,
	312, 0, 307, 310, 0, 71, 0, 0, 60, 0,
	62, 73, 0, 858, 81, 0, 493, 355, 356, 0,
	0, 364, 361, 0, 494, 0, 0, 0, 0, 85,
	87, 89, 0, 788, 0, 0, 0, 0, 0, 0,
	0, 0, 786, 126, 127, 146, 171, 172, 174, 167,
	185, 0, 234, 267, 0, 0, 895, 0, 223, 268,
	290, 292, 0, 0, 350, 354, 0, 353, 408, 423,
	0, 439, 0, 442, 0, 0, 0, 0, 0, 481,
	481, 481, 479, 461, 0, 0, 473, 0, -2, 456,
	0, 410, 0, -2, -2, 0, 0, 0, 644, -2,
	627, 630, 632, 634, 0, 0, 0, 0, 0, 0,
	0, 645, 0, 0, 830, 833, -2, 786, 789, 790,
	0, 0, 824, 0, 0, 0, 0, 419, 420, 420,
	420, 696, 0, 697, 0, 0, 0, 0, 0, 0,
	712, 0, 713, 714, 0, 0, 715, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 650, 651, 0, 0, 716, 811, 812, 0, 0,
	0, 0, 0, 0, 721, 0, 818, 0, 0, 0,
	725, 726, 727, 0, 520, 0, 543, 565, 567, 555,
	439, 0, 0, 0, 0, 53, 238, 257, 0, 0,
	0, 0, 37, 0, 0, 0, 0, 41, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 74, 370, 0, 369, 0, 359, 371, 376, 373,
	379, 0, 500, 0, 0, 508, 575, 576, 577, 578,
	579, 580, 581, 0, 143, 221, 0, 228, 0, 0,
	0, 226, 0, 0, 0, 352, 354, 0, 345, 346,
	406, 733, 0, 0, 445, 0, 0, 0, 0, 0,
	476, 480, 477, 478, 473, 450, 0, 0, 455, 472,
	0, 471, 460, -2, 0, 0, 589, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 821, 0, 756, 0,
	0, 832, -2, 793, 822, 826, 0, 691, 0, 0,
	0, 0, 884, 737, 738, 742, 0, 0, 701, 0,
	0, 794, 804, 806, 647, 648, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, -2, -2, -2, 665,
	666, 667, -2, -2, -2, 0, 0, 0, 807, 0,
	0, 759, 809, 810, 815, 816, 0, 718, 719, 720,
	817, 0, 0, 0, 549, 0, 733, 314, 316, 34,
	0, 239, 0, 242, 0, 0, 0, 0, 248, 249,
	0, 0, 0, 0, 259, 266, 0, 0, 0, 49,
	0, 0, 320, 0, 52, 52, 309, 0, 0, 219,
	220, 313, 311, 63, 0, 0, 357, 0, 0, 0,
	363, 372, 0, 501, 496, 584, 0, 0, 297, 303,
	303, 0, 699, 700, 0, 0, 0, 0, 0, 0,
	0, 343, 354, 0, 347, 348, 394, 0, 438, 436,
	463, 0, 465, 0, 0, 0, 467, 453, 0, 448,
	0, 447, 461, 469, 0, 0, 461, 0, 0, 0,
	-2, 0, 637, -2, -2, 755, 786, 831, 825, 881,
	420, 692, 694, 695, 744, 741, 0, 728, 710, 711,
	803, 0, 0, 0, 0, 786, 758, 717, 0, 723,
	724, 521, 395, 36, 0, 243, 244, 895, 0, 247,
	250, 0, 252, 897, 234, 0, 263, 264, 261, 0,
	38, 39, 48, 56, 40, 46, 0, 0, 474, 0,
	0, 0, 68, 66, 0, 0, 0, 380, 381, 0,
	0, 266, 0, 306, 876, 0, 306, 0, 0, 0,
	256, 234, 224, 266, 0, 0, 349, 350, 732, 734,
	0, 464, 0, 483, 466, 0, 451, 0, 473, 0,
	0, 457, 473, 410, -2, -2, 638, 757, 0, 420,
	0, 730, -2, 0, 0, 0, 760, 0, 241, 245,
	0, 0, 272, 0, 260, 0, 0, 58, 0, 315,
	317, 0, 0, 70, 67, 0, 0, 366, 494, 368,
	0, 234, 298, 299, 302, 300, 303, 420, 266, 222,
	234, 0, 351, 352, 0, 0, 0, 449, 446, 454,
	0, 470, 458, 0, 693, 747, 0, -2, 0, 673,
	722, 0, 251, 277, 0, 0, 0, 268, 42, 0,
	55, 420, 69, 65, 0, 367, 0, 254, 306, 0,
	234, 293, 0, 344, 735, 736, 482, 468, 461, 0,
	0, 0, 743, 674, 0, 253, 273, 274, 0, 269,
	270, 271, 896, 265, 272, 57, 0, 494, 0, 301,
	691, 255, 266, 473, 740, 745, 748, -2, 1025, 927,
	0, 746, 246, 275, 0, 276, 0, 0, 0, 277,
	0, 365, 237, 234, 459, 0, 750, 751, 752, 753,
	754, 278, 0, 281, 282, 0, 279, 262, 233, 235,
	236, 294, 0, 280, 283, 284, 749,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 307, 3, 313, 308, 3,
	318, 319, 311, 309, 322, 310, 320, 312, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 326, 321,
	301, 303, 302, 3, 323, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 316, 3, 317, 306, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 324, 305, 325, 315,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 304, 57644, 314,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:769
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:775
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:868
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:891
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:901
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:964
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:968
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:972
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].str, IncrementalFrom: sqlDollar[6].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:976
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = []string(nil)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.str = ""
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{ /* SKIP DOC */
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			return unimplemented(sqllex)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{ /* SKIP DOC */
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			return unimplemented(sqllex)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return unimplemented(sqllex)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = Low
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = Normal
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = High
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			return unimplemented(sqllex)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			return unimplemented(sqllex)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = DropDefault
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1754
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1962
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1973
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = false
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2094
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2098
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = Ascending
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = Descending
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2152
		{
			return unimplemented(sqllex)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2153
		{
			return unimplemented(sqllex)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = true
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = false
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2167
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2210
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.str = ""
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.str = ""
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.str = ""
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2333
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2352
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2401
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return unimplemented(sqllex)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2431
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2658
		{
			return unimplemented(sqllex)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			return unimplemented(sqllex)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			return unimplemented(sqllex)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2663
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2667
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2679
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = true
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = false
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = false
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = true
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2703
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &From{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = true
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = false
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.str = astFullJoin
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.str = astLeftJoin
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.str = astRightJoin
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.str = astInnerJoin
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3192
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3207
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			return unimplemented(sqllex)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3272
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = nil
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = oidPseudoTypeOid
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3420
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3452
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3492
		{
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = year
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = month
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = day
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = hour
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = minute
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = month
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = hour
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = minute
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = minute
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3577
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = second
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3584
		{
			return unimplemented(sqllex)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3619
		{
			return unimplemented(sqllex)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			return unimplemented(sqllex)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3845
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4018
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4071
		{
			return unimplemented(sqllex)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4072
		{
			return unimplemented(sqllex)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4095
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4111
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			return unimplemented(sqllex)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4116
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4165
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4209
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4210
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = Window(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.str = ""
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4307
		{
			return unimplemented(sqllex)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			return unimplemented(sqllex)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4309
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			return unimplemented(sqllex)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			return unimplemented(sqllex)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4319
		{
			return unimplemented(sqllex)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			return unimplemented(sqllex)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			return unimplemented(sqllex)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = Any
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = Some
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = All
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = Plus
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = Minus
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = Mult
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = Div
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = FloorDiv
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = Mod
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = Bitand
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = Bitor
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = Bitxor
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = Bitxor
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = LT
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = GT
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = EQ
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = LE
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = GE
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = NE
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = Like
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = NotLike
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = ILike
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = NotILike
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4698
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4858
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4894
		{
			return unimplemented(sqllex)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = DNull
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.str = ""
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
