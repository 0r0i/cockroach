// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESET = 57563
const RESTORE = 57564
const RESTRICT = 57565
const RETURNING = 57566
const REVOKE = 57567
const RIGHT = 57568
const ROLLBACK = 57569
const ROLLUP = 57570
const ROW = 57571
const ROWS = 57572
const RSHIFT = 57573
const STATUS = 57574
const SAVEPOINT = 57575
const SEARCH = 57576
const SECOND = 57577
const SELECT = 57578
const SERIAL = 57579
const SERIALIZABLE = 57580
const SESSION = 57581
const SESSION_USER = 57582
const SET = 57583
const SHOW = 57584
const SIMILAR = 57585
const SIMPLE = 57586
const SMALLINT = 57587
const SMALLSERIAL = 57588
const SNAPSHOT = 57589
const SOME = 57590
const SPLIT = 57591
const SQL = 57592
const START = 57593
const STDIN = 57594
const STRICT = 57595
const STRING = 57596
const STORING = 57597
const SUBSTRING = 57598
const SYMMETRIC = 57599
const SYSTEM = 57600
const TABLE = 57601
const TABLES = 57602
const TEMPLATE = 57603
const TESTING_RANGES = 57604
const TEXT = 57605
const THEN = 57606
const TIME = 57607
const TIMESTAMP = 57608
const TIMESTAMPTZ = 57609
const TO = 57610
const TRAILING = 57611
const TRANSACTION = 57612
const TREAT = 57613
const TRIM = 57614
const TRUE = 57615
const TRUNCATE = 57616
const TYPE = 57617
const UNBOUNDED = 57618
const UNCOMMITTED = 57619
const UNION = 57620
const UNIQUE = 57621
const UNKNOWN = 57622
const UPDATE = 57623
const UPSERT = 57624
const USER = 57625
const USERS = 57626
const USING = 57627
const VALID = 57628
const VALIDATE = 57629
const VALUE = 57630
const VALUES = 57631
const VARCHAR = 57632
const VARIADIC = 57633
const VIEW = 57634
const VARYING = 57635
const WHEN = 57636
const WHERE = 57637
const WINDOW = 57638
const WITH = 57639
const WITHIN = 57640
const WITHOUT = 57641
const YEAR = 57642
const ZONE = 57643
const NOT_LA = 57644
const WITH_LA = 57645
const AS_LA = 57646
const POSTFIXOP = 57647
const UMINUS = 57648

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5416

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 29,
	325, 29,
	-2, 415,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	278, 398,
	-2, 388,
	-1, 64,
	98, 397,
	142, 397,
	158, 397,
	183, 397,
	189, 397,
	278, 397,
	-2, 391,
	-1, 73,
	1, 29,
	325, 29,
	-2, 415,
	-1, 425,
	1, 195,
	325, 195,
	-2, 980,
	-1, 463,
	158, 425,
	183, 425,
	-2, 394,
	-1, 466,
	158, 424,
	183, 424,
	-2, 392,
	-1, 599,
	158, 424,
	183, 424,
	-2, 395,
	-1, 658,
	322, 914,
	-2, 907,
	-1, 659,
	322, 915,
	-2, 908,
	-1, 665,
	5, 583,
	322, 583,
	-2, 1085,
	-1, 689,
	5, 544,
	-2, 1059,
	-1, 690,
	5, 577,
	322, 577,
	-2, 1061,
	-1, 691,
	5, 552,
	-2, 1062,
	-1, 692,
	5, 551,
	-2, 1063,
	-1, 693,
	5, 577,
	322, 577,
	-2, 1066,
	-1, 694,
	5, 577,
	322, 577,
	-2, 1067,
	-1, 695,
	5, 578,
	-2, 1070,
	-1, 696,
	5, 538,
	-2, 1071,
	-1, 697,
	5, 538,
	-2, 1072,
	-1, 698,
	5, 559,
	-2, 1076,
	-1, 699,
	5, 539,
	-2, 1081,
	-1, 700,
	5, 540,
	-2, 1082,
	-1, 701,
	5, 541,
	-2, 1083,
	-1, 702,
	5, 542,
	-2, 1084,
	-1, 703,
	5, 538,
	-2, 1089,
	-1, 704,
	5, 545,
	-2, 1094,
	-1, 705,
	5, 543,
	-2, 1097,
	-1, 706,
	5, 575,
	322, 575,
	-2, 1099,
	-1, 707,
	5, 579,
	-2, 1102,
	-1, 708,
	5, 581,
	-2, 1103,
	-1, 709,
	5, 574,
	322, 574,
	-2, 1107,
	-1, 971,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	278, 398,
	-2, 702,
	-1, 980,
	322, 891,
	-2, 879,
	-1, 1190,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 618,
	-1, 1191,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 619,
	-1, 1192,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 620,
	-1, 1196,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 624,
	-1, 1197,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 625,
	-1, 1198,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 626,
	-1, 1201,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 631,
	-1, 1207,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 633,
	-1, 1210,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 638,
	-1, 1211,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 639,
	-1, 1212,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 640,
	-1, 1239,
	194, 773,
	-2, 776,
	-1, 1268,
	115, 813,
	322, 914,
	-2, 907,
	-1, 1269,
	115, 814,
	-2, 1055,
	-1, 1270,
	115, 815,
	-2, 979,
	-1, 1271,
	115, 816,
	-2, 948,
	-1, 1272,
	115, 817,
	-2, 963,
	-1, 1273,
	115, 818,
	-2, 978,
	-1, 1274,
	115, 819,
	-2, 1022,
	-1, 1428,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	278, 398,
	-2, 474,
	-1, 1432,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 632,
	-1, 1433,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 634,
	-1, 1438,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 635,
	-1, 1456,
	194, 772,
	-2, 775,
	-1, 1643,
	1, 475,
	68, 475,
	98, 475,
	116, 475,
	120, 475,
	122, 475,
	135, 475,
	142, 475,
	147, 475,
	155, 475,
	158, 475,
	170, 475,
	183, 475,
	185, 475,
	189, 475,
	224, 475,
	226, 475,
	278, 475,
	285, 475,
	295, 475,
	296, 475,
	304, 475,
	321, 475,
	323, 475,
	325, 475,
	326, 475,
	-2, 474,
	-1, 1645,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 636,
	-1, 1650,
	145, 0,
	-2, 652,
	-1, 1660,
	194, 774,
	-2, 777,
	-1, 1694,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 679,
	-1, 1695,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 680,
	-1, 1696,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 681,
	-1, 1700,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 685,
	-1, 1701,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 686,
	-1, 1702,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 687,
	-1, 1820,
	145, 0,
	-2, 653,
	-1, 1823,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 656,
	-1, 1824,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 658,
	-1, 1927,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 657,
	-1, 1928,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 659,
	-1, 1935,
	145, 0,
	-2, 688,
	-1, 1989,
	145, 0,
	-2, 689,
	-1, 2050,
	36, 0,
	129, 0,
	157, 0,
	243, 0,
	302, 0,
	-2, 1058,
}

const sqlPrivate = 57344

const sqlLast = 28163

var sqlAct = [...]int{

	86, 2029, 2049, 1600, 2074, 1061, 1995, 2030, 1638, 2031,
	2048, 889, 1069, 1671, 467, 1639, 1888, 1129, 1786, 1908,
	1426, 781, 1864, 1549, 1811, 295, 649, 657, 742, 1610,
	656, 426, 474, 63, 1154, 1731, 281, 1423, 1402, 1745,
	1797, 488, 635, 297, 1791, 895, 744, 49, 1404, 1616,
	512, 1550, 1128, 1133, 1169, 1517, 1625, 530, 1147, 782,
	1516, 765, 1237, 1467, 750, 891, 976, 1132, 1161, 725,
	1414, 1025, 722, 618, 63, 1347, 1034, 1070, 1409, 629,
	1353, 1294, 1247, 1101, 1221, 585, 1167, 1085, 842, 1053,
	1121, 754, 283, 20, 1224, 727, 1265, 1094, 751, 503,
	288, 28, 287, 16, 289, 8, 63, 967, 1162, 912,
	628, 619, 531, 1010, 472, 525, 522, 1063, 1136, 477,
	1746, 1164, 64, 602, 524, 917, 586, 652, 603, 466,
	1297, 423, 844, 65, 651, 601, 758, 840, 78, 518,
	404, 413, 475, 82, 1006, 606, 416, 1920, 1455, 1066,
	1921, 767, 584, 2065, 471, 1424, 747, 920, 921, 471,
	940, 941, 942, 950, 951, 952, 20, 1062, 767, 767,
	269, 1365, 2044, 943, 28, 1744, 16, 919, 8, 2037,
	923, 2027, 747, 954, 1091, 1098, 464, 737, 2022, 920,
	921, 747, 454, 485, 1054, 1104, 491, 463, 1364, 498,
	494, 453, 922, 294, 2018, 1459, 1991, 747, 937, 1091,
	1460, 479, 923, 920, 921, 1985, 1412, 1458, 747, 950,
	951, 952, 1104, 1973, 1967, 920, 921, 1744, 1099, 1963,
	1958, 1057, 747, 1957, 922, 1929, 923, 1918, 1091, 954,
	776, 1915, 1902, 1899, 1916, 1744, 747, 62, 923, 1897,
	1875, 1874, 1744, 747, 1744, 69, 1846, 928, 922, 1104,
	1825, 1412, 1822, 1104, 937, 1091, 1054, 918, 1100, 1097,
	922, 1814, 1743, 40, 1104, 1744, 947, 955, 71, 1487,
	1488, 41, 1654, 534, 1586, 1104, 1707, 1060, 1057, 928,
	1581, 1104, 953, 1060, 1534, 1532, 1466, 1535, 1104, 1531,
	69, 1657, 1104, 42, 945, 1389, 1530, 1023, 72, 1104,
	938, 527, 527, 928, 1456, 1391, 67, 1104, 747, 634,
	1392, 1158, 68, 71, 747, 928, 712, 768, 1108, 532,
	472, 1104, 947, 955, 1241, 944, 1103, 294, 1102, 1104,
	1090, 66, 938, 1091, 768, 768, 1059, 1022, 775, 1060,
	1021, 776, 270, 72, 1153, 1116, 614, 884, 883, 834,
	945, 67, 833, 747, 501, 547, 938, 68, 484, 73,
	1747, 507, 1487, 1488, 866, 1805, 567, 2063, 939, 1493,
	1427, 62, 1364, 2047, 2036, 69, 1065, 1771, 918, 2000,
	948, 486, 511, 1986, 493, 496, 528, 486, 519, 1900,
	613, 1851, 1847, 1096, 1839, 1838, 1837, 40, 71, 1833,
	939, 1832, 1831, 1777, 1722, 41, 69, 1717, 1716, 1715,
	1665, 1643, 53, 1615, 1590, 1095, 509, 1588, 1539, 1536,
	771, 1524, 1503, 1515, 939, 1486, 1483, 42, 72, 71,
	1482, 1480, 920, 921, 984, 1233, 948, 766, 887, 946,
	1472, 1471, 934, 935, 936, 1390, 933, 930, 931, 932,
	924, 925, 926, 927, 929, 923, 949, 718, 1394, 72,
	894, 66, 1493, 1848, 1425, 2046, 1311, 67, 600, 1262,
	1261, 659, 659, 68, 613, 612, 977, 922, 66, 592,
	659, 595, 924, 925, 926, 927, 929, 1673, 949, 2010,
	1504, 534, 66, 1970, 1956, 946, 555, 1948, 297, 534,
	1946, 1937, 933, 930, 931, 932, 924, 925, 926, 927,
	929, 1924, 949, 1911, 1770, 2020, 717, 599, 924, 925,
	926, 927, 929, 748, 949, 1895, 1861, 718, 1234, 1844,
	1816, 1780, 928, 1768, 659, 1750, 1649, 556, 1630, 1608,
	69, 1606, 1605, 1603, 659, 716, 53, 1558, 1557, 1514,
	534, 534, 756, 1476, 550, 552, 1475, 1452, 297, 1447,
	1226, 1380, 1325, 71, 1324, 920, 921, 591, 1498, 1495,
	1496, 1497, 1489, 1490, 1491, 1492, 1494, 770, 849, 849,
	773, 977, 1304, 867, 589, 711, 486, 464, 496, 741,
	587, 1487, 1488, 72, 1260, 659, 659, 893, 463, 1157,
	1011, 67, 659, 1014, 1018, 609, 610, 68, 1004, 615,
	922, 1003, 1002, 1001, 659, 659, 659, 659, 659, 664,
	1000, 999, 998, 510, 659, 916, 1632, 519, 997, 507,
	996, 995, 994, 993, 659, 746, 992, 991, 920, 921,
	990, 989, 886, 988, 760, 757, 1487, 1488, 1325, 981,
	777, 970, 66, 898, 779, 888, 489, 617, 553, 788,
	543, 923, 541, 1919, 826, 1489, 1490, 1491, 1492, 1494,
	1827, 472, 1806, 1374, 832, 828, 1802, 830, 829, 1373,
	865, 1803, 1776, 922, 1775, 862, 968, 861, 855, 1960,
	868, 1493, 733, 872, 873, 874, 875, 876, 1922, 871,
	920, 921, 1405, 879, 880, 1774, 1366, 561, 1016, 1054,
	1427, 1062, 1017, 1538, 1537, 1431, 577, 902, 562, 464,
	885, 901, 464, 464, 914, 87, 900, 1792, 986, 892,
	908, 1587, 1348, 909, 910, 1674, 1248, 926, 927, 929,
	1007, 949, 581, 1360, 1503, 1463, 1493, 1545, 2003, 1962,
	728, 983, 729, 2060, 973, 980, 2061, 1758, 718, 1386,
	452, 1107, 451, 1027, 446, 486, 447, 534, 298, 1569,
	1883, 1882, 1028, 1571, 1570, 582, 1542, 1541, 1434, 1379,
	710, 1378, 1377, 277, 1376, 622, 1208, 1105, 1051, 1050,
	1047, 1039, 1041, 1079, 527, 470, 527, 719, 63, 1027,
	76, 1012, 1082, 63, 588, 1026, 500, 1015, 1767, 1308,
	1307, 273, 1504, 532, 1179, 1148, 456, 728, 461, 729,
	755, 1574, 730, 299, 1576, 486, 759, 759, 1008, 1009,
	1056, 1223, 1019, 1223, 1866, 882, 278, 1031, 1350, 469,
	752, 1064, 539, 1064, 1044, 734, 2008, 761, 493, 496,
	1102, 1048, 1052, 75, 1961, 1560, 735, 297, 814, 274,
	559, 1230, 2024, 1086, 1487, 1488, 1228, 1358, 1068, 1151,
	1152, 1088, 1112, 1087, 949, 1089, 1078, 2071, 1080, 1083,
	1081, 1077, 1120, 1114, 1595, 2025, 471, 734, 1343, 730,
	1354, 1495, 1496, 1497, 1489, 1490, 1491, 1492, 1494, 560,
	1951, 1340, 1115, 739, 738, 1035, 1354, 558, 1387, 659,
	1110, 1113, 1012, 1159, 1015, 659, 659, 659, 659, 659,
	659, 659, 659, 659, 659, 659, 659, 659, 659, 659,
	659, 659, 659, 659, 659, 659, 659, 1592, 659, 1005,
	659, 659, 659, 659, 1178, 1248, 1280, 949, 297, 2060,
	1109, 1491, 1492, 1494, 1102, 1487, 1488, 1009, 1008, 659,
	1126, 659, 881, 279, 1493, 728, 1038, 729, 659, 538,
	1170, 1177, 659, 1231, 1567, 468, 1385, 1593, 2033, 714,
	74, 659, 659, 659, 659, 659, 659, 659, 659, 659,
	659, 659, 659, 659, 659, 659, 280, 1124, 457, 1127,
	1125, 1487, 1488, 1561, 276, 275, 2082, 578, 535, 949,
	1024, 1933, 659, 77, 1336, 1310, 731, 1503, 462, 2070,
	1160, 756, 458, 1867, 767, 1143, 2077, 1896, 557, 965,
	1020, 459, 1642, 1474, 1245, 1626, 471, 730, 788, 788,
	1575, 2032, 486, 2059, 2057, 1785, 496, 1102, 534, 713,
	486, 1145, 1502, 659, 1098, 1493, 1436, 1037, 1222, 2034,
	570, 548, 546, 536, 1235, 604, 1232, 579, 605, 1346,
	1877, 1073, 1256, 1703, 1318, 1876, 496, 1859, 1943, 496,
	1275, 1544, 1322, 731, 1312, 1504, 1842, 1229, 558, 1754,
	605, 1238, 2088, 580, 1321, 659, 1317, 1099, 1242, 1146,
	899, 1493, 1250, 472, 1335, 839, 2035, 534, 1503, 1313,
	2069, 1757, 890, 1267, 1267, 1278, 1591, 1289, 1756, 1996,
	604, 878, 835, 1301, 1302, 1303, 661, 813, 1337, 1338,
	1368, 1036, 1369, 1370, 1356, 849, 1611, 1100, 1097, 1362,
	1787, 1372, 1860, 837, 659, 1327, 1349, 1359, 1326, 1800,
	788, 2075, 1621, 1620, 1503, 838, 1367, 557, 1704, 1417,
	517, 787, 726, 1397, 1705, 516, 1497, 1489, 1490, 1491,
	1492, 1494, 469, 1393, 596, 1395, 1504, 1843, 1420, 1753,
	63, 1322, 2083, 1384, 2087, 1601, 1382, 1383, 1778, 1857,
	1624, 1123, 496, 659, 659, 1388, 1371, 486, 1418, 659,
	768, 1345, 2076, 1812, 1617, 1205, 472, 1102, 1755, 788,
	1519, 1858, 659, 659, 1410, 1259, 1936, 659, 659, 1841,
	2078, 1518, 1504, 1396, 1648, 659, 535, 1399, 1573, 1165,
	1481, 731, 659, 298, 535, 1408, 1446, 814, 814, 659,
	1086, 1411, 659, 659, 659, 1429, 1351, 1106, 1088, 788,
	1087, 659, 1089, 1407, 1058, 1465, 583, 576, 1489, 1490,
	1491, 1492, 1494, 1813, 472, 575, 574, 1430, 573, 1419,
	572, 571, 1096, 659, 659, 659, 659, 568, 515, 508,
	1435, 536, 659, 659, 659, 535, 535, 659, 299, 536,
	987, 1437, 870, 298, 1258, 2028, 1993, 1451, 1203, 1206,
	1498, 1495, 1496, 1497, 1489, 1490, 1491, 1492, 1494, 1421,
	1728, 1565, 1563, 1543, 1401, 659, 659, 1149, 1141, 1462,
	1084, 774, 772, 472, 860, 859, 1202, 853, 850, 769,
	764, 740, 736, 732, 1314, 1662, 1403, 1890, 1155, 607,
	536, 536, 1556, 1555, 2061, 659, 1554, 1450, 299, 814,
	857, 482, 1892, 1043, 1413, 1453, 1027, 659, 564, 1582,
	514, 1342, 1042, 1521, 1522, 1523, 79, 1580, 1953, 1988,
	1352, 1027, 401, 1469, 1470, 755, 513, 1040, 1747, 1540,
	1618, 611, 1046, 1564, 755, 1566, 1093, 292, 23, 1045,
	1547, 907, 1974, 3, 486, 534, 1156, 1783, 1568, 1607,
	1144, 1140, 1417, 1422, 1067, 863, 1513, 608, 814, 915,
	1572, 831, 1204, 2085, 780, 297, 659, 1526, 1577, 483,
	412, 1420, 659, 1613, 1584, 659, 659, 659, 1579, 1585,
	1604, 1335, 1583, 1415, 1633, 2086, 1739, 659, 565, 2021,
	1634, 1418, 1612, 659, 505, 63, 659, 502, 814, 1631,
	1602, 1594, 1596, 1597, 659, 1400, 1416, 659, 1977, 1651,
	506, 23, 1614, 820, 1809, 1627, 1628, 490, 1740, 290,
	22, 1723, 659, 1667, 1668, 1669, 659, 1623, 1165, 864,
	659, 659, 659, 659, 659, 659, 659, 659, 659, 659,
	659, 659, 659, 659, 659, 659, 659, 659, 659, 1219,
	659, 1598, 535, 291, 11, 659, 813, 813, 1658, 659,
	659, 1619, 1419, 1217, 1622, 1589, 659, 1661, 659, 659,
	659, 816, 1533, 1677, 293, 10, 285, 9, 1170, 1678,
	1675, 1375, 1682, 284, 7, 1680, 1309, 1170, 1683, 1306,
	787, 787, 1305, 22, 659, 1255, 1637, 1119, 659, 1487,
	1488, 920, 921, 1118, 1117, 974, 1829, 536, 1735, 2007,
	1736, 1889, 1710, 1670, 534, 788, 1752, 1398, 1711, 984,
	1714, 1751, 982, 1655, 1556, 1555, 1213, 11, 1554, 445,
	1724, 455, 1748, 1865, 1214, 403, 1215, 1727, 1738, 869,
	1220, 815, 298, 569, 659, 1741, 788, 788, 10, 659,
	9, 1804, 1629, 534, 2023, 788, 788, 7, 659, 659,
	286, 4, 1834, 1781, 1473, 1907, 1932, 1779, 813, 1257,
	1556, 1555, 1784, 534, 1554, 1556, 1555, 644, 1766, 1554,
	985, 1789, 1808, 854, 851, 1708, 448, 449, 788, 659,
	39, 1552, 638, 659, 659, 1729, 1718, 299, 659, 1782,
	1788, 1546, 787, 1773, 1817, 659, 1135, 659, 83, 83,
	271, 1821, 1737, 1790, 1772, 659, 1134, 300, 784, 532,
	472, 396, 397, 398, 1073, 1165, 415, 813, 858, 427,
	1807, 660, 1216, 298, 4, 843, 852, 415, 427, 1218,
	1266, 1171, 715, 662, 785, 478, 478, 663, 659, 271,
	786, 1413, 271, 271, 497, 271, 1013, 650, 83, 504,
	783, 787, 1071, 1227, 1246, 1461, 978, 813, 630, 1795,
	1796, 642, 1165, 1801, 641, 1165, 1840, 1243, 540, 1810,
	52, 659, 554, 421, 422, 659, 1357, 1769, 299, 1794,
	1150, 659, 903, 1562, 460, 1484, 542, 659, 1287, 1417,
	1279, 787, 1276, 590, 1855, 721, 966, 1072, 659, 1852,
	566, 1556, 1555, 1363, 814, 1554, 1092, 788, 1420, 1870,
	1869, 659, 1853, 1871, 616, 402, 911, 481, 1891, 534,
	1415, 1281, 480, 535, 1885, 1130, 1868, 756, 1418, 563,
	659, 836, 1111, 959, 1898, 814, 814, 1556, 1555, 956,
	1884, 1554, 450, 1416, 814, 814, 1893, 1905, 1879, 659,
	659, 1880, 1881, 1945, 1142, 1320, 2081, 1917, 1799, 1906,
	405, 1952, 1559, 1926, 1925, 1923, 1904, 1910, 2002, 70,
	1914, 1959, 659, 1887, 1344, 1931, 27, 814, 536, 659,
	24, 410, 535, 21, 19, 18, 406, 26, 17, 25,
	639, 50, 659, 15, 14, 13, 1938, 12, 1947, 1419,
	38, 37, 36, 35, 34, 33, 1901, 6, 5, 2,
	407, 1873, 1, 0, 0, 0, 788, 1761, 1950, 0,
	1941, 1765, 0, 0, 0, 0, 659, 0, 0, 409,
	0, 0, 50, 1942, 1968, 534, 0, 536, 0, 1913,
	816, 816, 1949, 0, 271, 520, 271, 427, 427, 0,
	1966, 0, 0, 297, 465, 1969, 1978, 473, 1798, 1975,
	0, 0, 1983, 1971, 50, 1976, 1972, 659, 0, 0,
	1165, 1165, 1984, 472, 1165, 1980, 0, 1987, 1981, 0,
	0, 63, 0, 0, 0, 1979, 0, 659, 0, 1990,
	0, 0, 0, 0, 0, 0, 1998, 0, 0, 2009,
	2011, 659, 788, 2013, 2006, 0, 814, 0, 0, 0,
	815, 815, 0, 0, 1999, 2004, 0, 0, 2017, 659,
	2012, 2015, 2019, 2016, 2014, 0, 0, 1556, 1555, 408,
	0, 1554, 0, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 2038, 0, 0, 2043, 1281, 1281, 0,
	2040, 2041, 816, 0, 0, 659, 659, 0, 2042, 0,
	0, 0, 0, 0, 0, 1444, 2054, 544, 0, 2058,
	2056, 2045, 0, 813, 411, 2062, 0, 2064, 0, 1442,
	0, 659, 549, 2068, 2067, 427, 427, 784, 784, 0,
	0, 1863, 0, 0, 2080, 788, 2079, 2066, 0, 0,
	2084, 0, 0, 0, 813, 813, 0, 787, 1281, 1281,
	1281, 816, 0, 813, 813, 814, 659, 2005, 2089, 0,
	415, 0, 815, 271, 0, 427, 594, 427, 0, 597,
	0, 0, 0, 0, 0, 1903, 0, 0, 787, 787,
	0, 0, 1439, 1739, 478, 1732, 813, 787, 787, 2026,
	1165, 816, 1440, 1730, 0, 271, 1445, 1734, 0, 1487,
	1488, 0, 1505, 1506, 1507, 405, 0, 0, 0, 83,
	535, 0, 0, 473, 0, 1740, 0, 0, 271, 0,
	787, 815, 0, 271, 271, 271, 410, 762, 0, 0,
	298, 406, 0, 0, 0, 1733, 0, 0, 0, 784,
	0, 814, 0, 0, 0, 0, 271, 271, 1448, 1449,
	1502, 0, 0, 0, 83, 407, 83, 0, 0, 0,
	0, 815, 0, 0, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 409, 0, 427, 0, 83, 427,
	427, 427, 427, 427, 877, 299, 0, 0, 1441, 427,
	427, 0, 0, 0, 0, 1443, 415, 0, 784, 1493,
	0, 1281, 1281, 0, 897, 1735, 0, 1736, 0, 1510,
	1511, 1512, 0, 0, 0, 813, 0, 0, 0, 0,
	0, 0, 478, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 294, 814, 1738, 0, 0, 784, 0,
	0, 2001, 1741, 0, 0, 0, 0, 0, 0, 787,
	0, 0, 1503, 0, 0, 1281, 1281, 1281, 1281, 1281,
	1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
	1281, 1281, 1281, 1281, 408, 1281, 0, 62, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 40, 0, 465, 0, 0, 0, 1737,
	0, 41, 0, 0, 920, 921, 0, 0, 535, 411,
	1504, 0, 0, 0, 813, 0, 0, 0, 271, 0,
	0, 0, 0, 42, 536, 0, 1032, 923, 535, 0,
	271, 0, 0, 0, 271, 1049, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 787, 922,
	0, 0, 1646, 1647, 0, 937, 0, 0, 0, 271,
	0, 1075, 1076, 536, 271, 0, 0, 271, 0, 427,
	427, 0, 427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 1499, 1500, 1501, 0, 1498, 1495,
	1496, 1497, 1489, 1490, 1491, 1492, 1494, 816, 0, 0,
	813, 0, 0, 0, 928, 0, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 0, 1706, 465, 816, 816,
	465, 465, 0, 0, 787, 0, 69, 816, 816, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 971, 0, 0, 938, 0, 71,
	0, 975, 0, 0, 0, 0, 0, 815, 1122, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	271, 0, 0, 0, 535, 271, 1131, 0, 0, 72,
	0, 0, 504, 813, 0, 0, 1281, 67, 815, 815,
	0, 0, 0, 68, 0, 0, 0, 815, 815, 0,
	0, 0, 0, 0, 0, 920, 921, 271, 0, 0,
	427, 0, 282, 0, 0, 939, 0, 787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 923, 536,
	815, 0, 920, 921, 784, 940, 941, 942, 950, 951,
	952, 0, 0, 0, 0, 0, 0, 0, 943, 0,
	922, 0, 0, 0, 0, 923, 0, 0, 954, 0,
	0, 920, 921, 0, 0, 784, 784, 0, 0, 50,
	0, 50, 0, 0, 784, 784, 0, 922, 0, 0,
	0, 0, 0, 937, 923, 0, 50, 1281, 0, 816,
	535, 50, 0, 933, 930, 931, 932, 924, 925, 926,
	927, 929, 0, 949, 0, 928, 922, 784, 298, 0,
	0, 0, 271, 1315, 1316, 0, 0, 0, 1032, 0,
	0, 1323, 0, 0, 0, 0, 0, 1328, 1329, 1331,
	1333, 1334, 928, 0, 0, 1339, 0, 0, 1341, 271,
	0, 0, 0, 0, 0, 536, 0, 1862, 271, 0,
	0, 947, 955, 271, 0, 1361, 0, 0, 938, 815,
	0, 928, 271, 299, 0, 0, 0, 953, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 1281, 0, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 1122, 1122, 0, 0, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 939, 897, 0, 427,
	1166, 0, 0, 271, 0, 827, 784, 1406, 0, 0,
	920, 921, 0, 0, 0, 0, 0, 0, 1935, 0,
	0, 0, 0, 939, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 923, 0, 948, 1225, 0, 815, 0,
	0, 920, 921, 0, 940, 941, 942, 950, 951, 952,
	0, 0, 939, 0, 816, 922, 0, 943, 0, 0,
	0, 0, 0, 0, 923, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 933, 930, 931, 932, 924, 925,
	926, 927, 929, 0, 949, 0, 922, 0, 0, 0,
	0, 0, 937, 0, 946, 0, 0, 934, 935, 936,
	0, 933, 930, 931, 932, 924, 925, 926, 927, 929,
	928, 949, 0, 1989, 0, 784, 0, 0, 1529, 0,
	0, 0, 0, 0, 815, 0, 50, 50, 0, 0,
	0, 930, 931, 932, 924, 925, 926, 927, 929, 0,
	949, 928, 0, 0, 0, 0, 473, 816, 920, 921,
	0, 940, 941, 942, 950, 951, 952, 0, 0, 0,
	947, 955, 0, 938, 943, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 954, 0, 953, 0, 0, 0,
	0, 0, 0, 1551, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 922, 938, 0, 0, 0, 0, 937,
	0, 784, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 944,
	0, 50, 271, 271, 0, 50, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 1599, 928, 1428,
	1032, 0, 897, 0, 0, 0, 0, 0, 0, 1609,
	0, 0, 939, 0, 0, 0, 0, 947, 955, 0,
	271, 0, 0, 271, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 1641, 0, 0, 1225, 0, 0,
	0, 0, 0, 0, 784, 945, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 932, 924, 925, 926, 927, 929, 0, 949,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 1672, 946, 0, 0, 934, 935, 936, 0,
	933, 930, 931, 932, 924, 925, 926, 927, 929, 0,
	949, 0, 0, 0, 0, 0, 0, 1528, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 920, 921,
	0, 940, 941, 942, 950, 951, 952, 0, 0, 1725,
	1726, 1032, 0, 0, 943, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 954, 1551, 504, 0, 0, 0,
	0, 1759, 0, 1760, 0, 271, 1762, 1763, 1764, 271,
	0, 0, 0, 922, 0, 0, 0, 0, 0, 937,
	946, 0, 0, 934, 935, 936, 1166, 933, 930, 931,
	932, 924, 925, 926, 927, 929, 0, 949, 0, 1454,
	0, 1551, 0, 504, 1131, 0, 1551, 428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 271,
	0, 0, 271, 0, 0, 429, 620, 620, 928, 0,
	0, 1641, 0, 1166, 0, 723, 1166, 0, 1815, 0,
	0, 0, 0, 50, 0, 0, 0, 947, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 0, 953, 0, 0, 436, 437, 0, 0,
	442, 1835, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 938, 430, 432, 0, 0, 1487, 1488, 0, 1505,
	1506, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1819, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 0, 0, 1032, 0, 1854, 0,
	427, 1856, 0, 0, 0, 434, 435, 1502, 0, 271,
	0, 0, 1551, 0, 0, 427, 0, 0, 0, 939,
	904, 906, 438, 0, 0, 0, 0, 913, 0, 0,
	0, 948, 0, 0, 0, 1886, 0, 0, 504, 960,
	961, 962, 963, 964, 0, 0, 0, 0, 1551, 972,
	0, 0, 0, 271, 0, 0, 1493, 0, 0, 979,
	1909, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	0, 0, 50, 0, 0, 0, 1487, 1488, 0, 1505,
	1506, 1507, 0, 0, 504, 1641, 0, 0, 0, 0,
	946, 1508, 1818, 934, 935, 936, 0, 933, 930, 931,
	932, 924, 925, 926, 927, 929, 0, 949, 0, 1503,
	0, 1166, 1166, 0, 1527, 1166, 0, 0, 0, 0,
	0, 0, 0, 473, 0, 897, 0, 1502, 0, 0,
	0, 0, 0, 439, 0, 444, 0, 0, 440, 0,
	0, 0, 0, 441, 0, 0, 0, 0, 0, 0,
	1954, 1955, 0, 0, 0, 0, 0, 443, 0, 0,
	1964, 0, 0, 0, 1965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 1504, 0, 504,
	0, 0, 0, 0, 0, 1641, 0, 0, 0, 0,
	0, 1641, 504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 1997, 0, 504, 0, 0, 271,
	0, 427, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 1551, 0,
	0, 1909, 0, 0, 1641, 0, 0, 0, 0, 0,
	0, 1499, 1500, 1501, 0, 1498, 1495, 1496, 1497, 1489,
	1490, 1491, 1492, 1494, 0, 1894, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 271, 0, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1166, 0, 0, 0, 0, 2055, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 0,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 0, 1207, 0, 1209, 1210, 1211, 1212, 0,
	0, 1499, 1500, 1501, 0, 1498, 1495, 1496, 1497, 1489,
	1490, 1491, 1492, 1494, 1236, 0, 971, 0, 0, 1487,
	1488, 0, 1505, 1506, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1653, 1263, 1264, 0, 50,
	1277, 0, 1288, 1290, 1295, 1298, 1299, 1300, 920, 921,
	0, 940, 941, 942, 950, 951, 952, 0, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 723, 0, 0,
	1502, 923, 0, 0, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 921, 0, 940, 941, 942,
	950, 951, 952, 922, 0, 0, 0, 0, 0, 937,
	943, 0, 0, 0, 0, 0, 0, 923, 1355, 0,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	1487, 1488, 0, 1505, 1506, 1507, 0, 0, 0, 922,
	0, 0, 0, 0, 0, 937, 1652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	1381, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 947, 955, 0,
	0, 1502, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 0, 0, 0, 913,
	0, 938, 0, 947, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	1493, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 938, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1432, 1433,
	0, 0, 0, 0, 1438, 1508, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 1503, 0, 0, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 939, 1477, 0, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1501, 948, 1498, 1495,
	1496, 1497, 1489, 1490, 1491, 1492, 1494, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 1295, 1295, 1295,
	946, 1504, 0, 934, 935, 936, 0, 933, 930, 931,
	932, 924, 925, 926, 927, 929, 0, 949, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	1548, 0, 0, 0, 0, 0, 946, 0, 0, 934,
	935, 936, 0, 933, 930, 931, 932, 924, 925, 926,
	927, 929, 0, 949, 0, 0, 0, 1994, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 723, 0, 0, 1499, 1500, 1501, 0, 1498,
	1495, 1496, 1497, 1489, 1490, 1491, 1492, 1494, 0, 0,
	0, 0, 0, 920, 921, 0, 940, 941, 942, 950,
	951, 952, 0, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 954,
	0, 0, 0, 920, 921, 0, 940, 941, 942, 950,
	951, 952, 0, 0, 0, 0, 0, 1644, 922, 943,
	1645, 0, 0, 0, 937, 0, 923, 0, 0, 954,
	0, 0, 1650, 0, 0, 0, 0, 0, 0, 0,
	0, 1659, 0, 0, 0, 0, 0, 0, 922, 1663,
	0, 0, 1381, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1679, 0, 0,
	0, 1681, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 1712, 1713, 0, 0, 953, 0,
	0, 0, 0, 1719, 1720, 1721, 0, 0, 0, 0,
	945, 0, 947, 955, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 953, 1749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 944, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 1793, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1820, 0, 948, 0, 1823, 1824,
	0, 0, 0, 1826, 0, 0, 0, 0, 0, 0,
	1828, 0, 1830, 0, 0, 0, 0, 0, 0, 0,
	1836, 0, 0, 0, 0, 946, 0, 0, 934, 935,
	936, 0, 933, 930, 931, 932, 924, 925, 926, 927,
	929, 0, 949, 0, 0, 0, 1992, 0, 0, 0,
	0, 0, 0, 1845, 0, 946, 0, 0, 934, 935,
	936, 0, 933, 930, 931, 932, 924, 925, 926, 927,
	929, 0, 949, 0, 0, 0, 1939, 920, 921, 0,
	940, 941, 942, 950, 951, 952, 0, 0, 0, 0,
	0, 0, 0, 943, 0, 0, 0, 0, 0, 0,
	923, 0, 1878, 954, 0, 0, 920, 921, 0, 940,
	941, 942, 950, 951, 952, 0, 0, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 937, 923,
	0, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1912, 0, 0, 0, 0,
	0, 922, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 0, 1927, 1928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1940, 0, 947, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 1944, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 945, 947, 955, 0, 0, 0,
	938, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 944, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 946,
	2053, 2053, 934, 935, 936, 0, 933, 930, 931, 932,
	924, 925, 926, 927, 929, 0, 949, 0, 0, 0,
	1934, 0, 0, 0, 0, 0, 2053, 0, 946, 0,
	0, 934, 935, 936, 0, 933, 930, 931, 932, 924,
	925, 926, 927, 929, 0, 949, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2053, 88, 89, 315, 90, 316, 317, 318, 319,
	218, 320, 321, 322, 323, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 324, 95, 225, 226, 96,
	325, 326, 227, 228, 229, 327, 230, 328, 301, 329,
	97, 98, 99, 0, 100, 330, 101, 102, 103, 331,
	302, 104, 105, 332, 333, 334, 335, 336, 337, 106,
	107, 272, 108, 231, 109, 232, 233, 338, 110, 339,
	111, 340, 341, 342, 112, 113, 343, 114, 344, 0,
	345, 234, 115, 116, 235, 236, 346, 347, 348, 117,
	118, 237, 0, 119, 349, 120, 350, 351, 303, 352,
	121, 238, 353, 239, 354, 122, 123, 124, 125, 240,
	241, 305, 355, 129, 356, 126, 357, 304, 127, 242,
	128, 243, 244, 245, 358, 246, 359, 306, 130, 307,
	131, 132, 360, 134, 133, 361, 247, 308, 135, 309,
	362, 136, 363, 364, 137, 0, 138, 139, 140, 142,
	248, 141, 310, 143, 144, 146, 145, 365, 366, 367,
	249, 147, 250, 148, 149, 368, 150, 369, 370, 151,
	371, 372, 152, 251, 311, 153, 312, 252, 154, 155,
	156, 157, 373, 253, 158, 254, 159, 374, 160, 161,
	162, 255, 163, 164, 375, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 376, 176, 313, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 377, 257,
	184, 185, 378, 186, 187, 314, 188, 258, 259, 189,
	379, 195, 190, 191, 192, 194, 260, 193, 261, 380,
	196, 381, 197, 198, 199, 200, 382, 262, 263, 264,
	383, 384, 201, 265, 266, 385, 202, 203, 204, 205,
	386, 387, 206, 207, 208, 388, 209, 389, 210, 211,
	212, 267, 268, 390, 391, 213, 392, 393, 394, 395,
	214, 215, 216, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 0, 0, 0,
	0, 0, 1635, 0, 0, 0, 0, 0, 0, 0,
	1636, 88, 89, 315, 90, 316, 317, 318, 319, 218,
	320, 321, 322, 323, 91, 92, 93, 219, 220, 221,
	222, 94, 223, 224, 324, 95, 225, 226, 96, 325,
	326, 227, 228, 229, 327, 230, 328, 301, 329, 97,
	98, 99, 0, 100, 330, 101, 102, 103, 331, 302,
	104, 105, 332, 333, 334, 335, 336, 337, 106, 107,
	272, 108, 231, 109, 232, 233, 338, 110, 339, 111,
	340, 341, 342, 112, 113, 343, 114, 344, 0, 345,
	234, 115, 116, 235, 236, 346, 347, 348, 117, 118,
	237, 0, 119, 349, 120, 350, 351, 303, 352, 121,
	238, 353, 239, 354, 122, 123, 124, 125, 240, 241,
	305, 355, 129, 356, 126, 357, 304, 127, 242, 128,
	243, 244, 245, 358, 246, 359, 306, 130, 307, 131,
	132, 360, 134, 133, 361, 247, 308, 135, 309, 362,
	136, 363, 364, 137, 0, 138, 139, 140, 142, 248,
	141, 310, 143, 144, 146, 145, 365, 366, 367, 249,
	147, 250, 148, 149, 368, 150, 369, 370, 151, 371,
	372, 152, 251, 311, 153, 312, 252, 154, 155, 156,
	157, 373, 253, 158, 254, 159, 374, 160, 161, 162,
	255, 163, 164, 375, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 376, 176, 313, 177, 178,
	256, 179, 0, 180, 181, 182, 183, 377, 257, 184,
	185, 378, 186, 187, 314, 188, 258, 259, 189, 379,
	195, 190, 191, 192, 194, 260, 193, 261, 380, 196,
	381, 197, 198, 199, 200, 382, 262, 263, 264, 383,
	384, 201, 265, 266, 385, 202, 203, 204, 205, 386,
	387, 206, 207, 208, 388, 209, 389, 210, 211, 212,
	267, 268, 390, 391, 213, 392, 393, 394, 395, 214,
	215, 216, 217, 0, 0, 0, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1982, 88, 89, 315, 90, 316, 317, 318, 319,
	218, 320, 321, 322, 323, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 324, 95, 225, 226, 96,
	325, 326, 227, 228, 229, 327, 230, 328, 301, 329,
	97, 98, 99, 0, 100, 330, 101, 102, 103, 331,
	302, 104, 105, 332, 333, 334, 335, 336, 337, 106,
	107, 272, 108, 231, 109, 232, 233, 338, 110, 339,
	111, 340, 341, 342, 112, 113, 343, 114, 344, 0,
	345, 234, 115, 116, 235, 236, 346, 347, 348, 117,
	118, 237, 0, 119, 349, 120, 350, 351, 303, 352,
	121, 238, 353, 239, 354, 122, 123, 124, 125, 240,
	241, 305, 355, 129, 356, 126, 357, 304, 127, 242,
	128, 243, 244, 245, 358, 246, 359, 306, 130, 307,
	131, 132, 360, 134, 133, 361, 247, 308, 135, 309,
	362, 136, 363, 364, 137, 0, 138, 139, 140, 142,
	248, 141, 310, 143, 144, 146, 145, 365, 366, 367,
	249, 147, 250, 148, 149, 368, 150, 369, 370, 151,
	371, 372, 152, 251, 311, 153, 312, 252, 154, 155,
	156, 157, 373, 253, 158, 254, 159, 374, 160, 161,
	162, 255, 163, 164, 375, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 376, 176, 313, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 377, 257,
	184, 185, 378, 186, 187, 314, 188, 258, 259, 189,
	379, 195, 190, 191, 192, 194, 260, 193, 261, 380,
	196, 381, 197, 198, 199, 200, 382, 262, 263, 264,
	383, 384, 201, 265, 266, 385, 202, 203, 204, 205,
	386, 387, 206, 207, 208, 388, 209, 389, 210, 211,
	212, 267, 268, 390, 391, 213, 392, 393, 394, 395,
	214, 215, 216, 217, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	88, 89, 315, 90, 316, 317, 318, 319, 218, 320,
	321, 322, 323, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 324, 95, 225, 226, 96, 325, 326,
	227, 228, 229, 327, 230, 328, 301, 329, 97, 98,
	99, 0, 100, 330, 101, 102, 103, 331, 302, 104,
	105, 332, 333, 334, 335, 336, 337, 106, 107, 272,
	108, 231, 109, 232, 233, 338, 110, 339, 111, 340,
	341, 342, 112, 113, 343, 114, 344, 0, 345, 234,
	115, 116, 235, 236, 346, 347, 348, 117, 118, 237,
	0, 119, 349, 120, 350, 351, 303, 352, 121, 238,
	353, 239, 354, 122, 123, 124, 125, 240, 241, 305,
	355, 129, 356, 126, 357, 304, 127, 242, 128, 243,
	244, 245, 358, 246, 359, 306, 130, 307, 131, 132,
	360, 134, 133, 361, 247, 308, 135, 309, 362, 136,
	363, 364, 137, 0, 138, 139, 140, 142, 248, 141,
	310, 143, 144, 146, 145, 365, 366, 367, 249, 147,
	250, 148, 149, 368, 150, 369, 370, 151, 371, 372,
	152, 251, 311, 153, 312, 252, 154, 155, 156, 157,
	373, 253, 158, 254, 159, 374, 160, 161, 162, 255,
	163, 164, 375, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 376, 176, 313, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 377, 257, 184, 185,
	378, 186, 187, 314, 188, 258, 259, 189, 379, 195,
	190, 191, 192, 194, 260, 193, 261, 380, 196, 381,
	197, 198, 199, 200, 382, 262, 263, 264, 383, 384,
	201, 265, 266, 385, 202, 203, 204, 205, 386, 387,
	206, 207, 208, 388, 209, 389, 210, 211, 212, 267,
	268, 390, 391, 213, 392, 393, 394, 395, 214, 215,
	216, 217, 658, 647, 648, 645, 646, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 674, 640, 0, 0,
	0, 91, 92, 93, 219, 689, 221, 690, 94, 691,
	692, 0, 95, 225, 226, 96, 643, 673, 693, 694,
	229, 0, 685, 0, 666, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 302, 104, 105, 0,
	667, 669, 0, 668, 670, 106, 107, 272, 108, 695,
	109, 696, 697, 724, 110, 0, 111, 0, 0, 0,
	688, 113, 0, 114, 0, 0, 0, 631, 115, 116,
	675, 676, 654, 0, 0, 117, 118, 698, 0, 119,
	0, 120, 0, 0, 303, 0, 121, 686, 0, 239,
	0, 122, 123, 124, 125, 682, 684, 305, 0, 129,
	0, 126, 0, 304, 127, 699, 128, 700, 701, 702,
	0, 665, 0, 306, 130, 307, 131, 132, 0, 134,
	133, 0, 687, 308, 135, 309, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 141, 310, 143,
	144, 146, 145, 626, 0, 655, 683, 147, 703, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 251,
	311, 153, 312, 677, 154, 155, 156, 157, 0, 678,
	158, 254, 159, 0, 160, 161, 162, 704, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 313, 177, 178, 632, 179, 0,
	180, 181, 182, 183, 69, 257, 184, 185, 671, 186,
	187, 314, 188, 705, 259, 189, 0, 195, 190, 191,
	192, 194, 706, 193, 679, 0, 196, 71, 197, 198,
	199, 200, 0, 262, 707, 708, 0, 0, 201, 680,
	681, 653, 202, 203, 204, 205, 0, 0, 206, 207,
	208, 672, 209, 0, 210, 211, 212, 537, 709, 0,
	0, 213, 0, 0, 0, 67, 214, 215, 216, 217,
	627, 68, 0, 0, 0, 658, 647, 648, 645, 646,
	637, 623, 624, 0, 0, 0, 0, 625, 0, 0,
	633, 88, 89, 1252, 90, 636, 0, 0, 0, 674,
	640, 0, 0, 0, 91, 92, 93, 219, 689, 221,
	690, 94, 691, 692, 0, 95, 225, 226, 96, 643,
	673, 693, 694, 229, 0, 685, 0, 666, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 302,
	104, 105, 0, 667, 669, 0, 668, 670, 106, 107,
	272, 108, 695, 109, 696, 697, 0, 110, 0, 111,
	0, 1253, 0, 688, 113, 0, 114, 0, 0, 0,
	631, 115, 116, 675, 676, 654, 0, 0, 117, 118,
	698, 0, 119, 0, 120, 0, 0, 303, 0, 121,
	686, 0, 239, 0, 122, 123, 124, 125, 682, 684,
	305, 0, 129, 0, 126, 0, 304, 127, 699, 128,
	700, 701, 702, 0, 665, 0, 306, 130, 307, 131,
	132, 0, 134, 133, 0, 687, 308, 135, 309, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 248,
	141, 310, 143, 144, 146, 145, 626, 0, 655, 683,
	147, 703, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 251, 311, 153, 312, 677, 154, 155, 156,
	157, 0, 678, 158, 254, 159, 0, 160, 161, 162,
	704, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 313, 177, 178,
	632, 179, 0, 180, 181, 182, 183, 0, 257, 184,
	185, 671, 186, 187, 314, 188, 705, 259, 189, 0,
	195, 190, 191, 192, 194, 706, 193, 679, 0, 196,
	0, 197, 198, 199, 200, 0, 262, 707, 708, 0,
	0, 201, 680, 681, 653, 202, 203, 204, 205, 0,
	0, 206, 207, 208, 672, 209, 0, 210, 211, 212,
	267, 709, 1251, 0, 213, 0, 0, 0, 0, 214,
	215, 216, 217, 627, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 623, 624, 1254, 0, 0, 0,
	625, 0, 0, 633, 1249, 0, 0, 0, 636, 658,
	647, 648, 645, 646, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 674, 640, 0, 0, 0, 91, 92,
	93, 219, 689, 221, 690, 94, 691, 692, 0, 95,
	225, 226, 96, 643, 673, 693, 694, 229, 0, 685,
	0, 666, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 302, 104, 105, 0, 667, 669, 0,
	668, 670, 106, 107, 272, 108, 695, 109, 696, 697,
	0, 110, 0, 111, 0, 0, 0, 688, 113, 0,
	114, 0, 0, 0, 631, 115, 116, 675, 676, 654,
	0, 0, 117, 118, 698, 0, 119, 0, 120, 0,
	0, 303, 0, 121, 686, 0, 239, 0, 122, 123,
	124, 125, 682, 684, 305, 0, 129, 0, 126, 0,
	304, 127, 699, 128, 700, 701, 702, 0, 665, 0,
	306, 130, 307, 131, 132, 0, 134, 133, 0, 687,
	308, 135, 309, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 248, 141, 310, 143, 144, 146, 145,
	626, 0, 655, 683, 147, 703, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 251, 311, 153, 312,
	677, 154, 155, 156, 157, 0, 678, 158, 254, 159,
	0, 160, 161, 162, 704, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 313, 177, 178, 632, 179, 0, 180, 181, 182,
	183, 69, 257, 184, 185, 671, 186, 187, 314, 188,
	705, 259, 189, 0, 195, 190, 191, 192, 194, 706,
	193, 679, 0, 196, 71, 197, 198, 199, 200, 0,
	262, 707, 708, 0, 0, 201, 680, 681, 653, 202,
	203, 204, 205, 0, 0, 206, 207, 208, 672, 209,
	0, 210, 211, 212, 537, 709, 0, 0, 213, 0,
	0, 0, 67, 214, 215, 216, 217, 627, 68, 658,
	647, 648, 645, 646, 637, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 625, 88, 89, 633, 90, 0,
	0, 0, 636, 674, 640, 0, 0, 0, 91, 92,
	93, 219, 689, 221, 690, 94, 691, 692, 1291, 95,
	225, 226, 96, 643, 673, 693, 694, 229, 0, 685,
	0, 666, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 302, 104, 105, 0, 667, 669, 0,
	668, 670, 106, 107, 272, 108, 695, 109, 696, 697,
	0, 110, 0, 111, 0, 0, 0, 688, 113, 0,
	114, 0, 0, 0, 631, 115, 116, 675, 676, 654,
	0, 0, 117, 118, 698, 0, 119, 0, 120, 0,
	1296, 303, 0, 121, 686, 0, 239, 0, 122, 123,
	124, 125, 682, 684, 305, 0, 129, 0, 126, 0,
	304, 127, 699, 128, 700, 701, 702, 0, 665, 0,
	306, 130, 307, 131, 132, 0, 134, 133, 1292, 687,
	308, 135, 309, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 248, 141, 310, 143, 144, 146, 145,
	626, 0, 655, 683, 147, 703, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 251, 311, 153, 312,
	677, 154, 155, 156, 157, 0, 678, 158, 254, 159,
	0, 160, 161, 162, 704, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 313, 177, 178, 632, 179, 0, 180, 181, 182,
	183, 0, 257, 184, 185, 671, 186, 187, 314, 188,
	705, 259, 189, 0, 195, 190, 191, 192, 194, 706,
	193, 679, 0, 196, 0, 197, 198, 199, 200, 0,
	262, 707, 708, 0, 1293, 201, 680, 681, 653, 202,
	203, 204, 205, 0, 0, 206, 207, 208, 672, 209,
	0, 210, 211, 212, 267, 709, 0, 0, 213, 0,
	0, 0, 0, 214, 215, 216, 217, 627, 0, 658,
	647, 648, 645, 646, 637, 0, 0, 0, 623, 624,
	0, 0, 0, 0, 625, 88, 89, 633, 90, 0,
	0, 0, 636, 674, 640, 0, 0, 0, 91, 92,
	93, 219, 689, 221, 690, 94, 691, 692, 0, 95,
	225, 226, 96, 643, 673, 693, 694, 229, 0, 685,
	0, 666, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 302, 104, 105, 0, 667, 669, 0,
	668, 670, 106, 107, 272, 108, 695, 109, 696, 697,
	0, 110, 0, 111, 0, 0, 0, 688, 113, 0,
	114, 0, 0, 0, 631, 115, 116, 675, 676, 654,
	0, 0, 117, 118, 698, 0, 119, 0, 120, 0,
	0, 303, 0, 121, 686, 0, 239, 0, 122, 123,
	124, 125, 682, 684, 305, 0, 129, 0, 126, 0,
	304, 127, 699, 128, 700, 701, 702, 0, 665, 0,
	306, 130, 307, 131, 132, 0, 134, 133, 0, 687,
	308, 135, 309, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 248, 141, 310, 143, 144, 146, 145,
	626, 1578, 655, 683, 147, 703, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 251, 311, 153, 312,
	677, 154, 155, 156, 157, 0, 678, 158, 254, 159,
	0, 160, 161, 162, 704, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 313, 177, 178, 632, 179, 0, 180, 181, 182,
	183, 0, 257, 184, 185, 671, 186, 187, 314, 188,
	705, 259, 189, 0, 195, 190, 191, 192, 194, 706,
	193, 679, 0, 196, 0, 197, 198, 199, 200, 0,
	262, 707, 708, 0, 0, 201, 680, 681, 653, 202,
	203, 204, 205, 0, 0, 206, 207, 208, 672, 209,
	0, 210, 211, 212, 267, 709, 0, 0, 213, 0,
	0, 0, 0, 214, 215, 216, 217, 627, 0, 658,
	647, 648, 645, 646, 637, 0, 0, 0, 623, 624,
	621, 0, 0, 0, 625, 88, 89, 633, 90, 0,
	0, 0, 636, 674, 640, 0, 0, 0, 91, 92,
	93, 219, 689, 221, 690, 94, 691, 692, 0, 95,
	225, 226, 96, 643, 673, 693, 694, 229, 0, 685,
	0, 666, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 302, 104, 105, 0, 667, 669, 0,
	668, 670, 106, 107, 272, 108, 695, 109, 696, 697,
	0, 110, 0, 111, 0, 0, 0, 688, 113, 0,
	114, 0, 0, 0, 631, 115, 116, 675, 676, 654,
	0, 0, 117, 118, 698, 0, 119, 0, 120, 0,
	0, 303, 0, 121, 686, 0, 239, 0, 122, 123,
	124, 125, 682, 684, 305, 0, 129, 0, 126, 0,
	304, 127, 699, 128, 700, 701, 702, 0, 665, 0,
	306, 130, 307, 131, 132, 0, 134, 133, 0, 687,
	308, 135, 309, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 248, 141, 310, 143, 144, 146, 145,
	626, 0, 655, 683, 147, 703, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 251, 311, 153, 312,
	677, 154, 155, 156, 157, 0, 678, 158, 254, 159,
	0, 160, 161, 162, 704, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 313, 177, 178, 632, 179, 0, 180, 181, 182,
	183, 0, 257, 184, 185, 671, 186, 187, 314, 188,
	705, 259, 189, 0, 195, 190, 191, 192, 194, 706,
	193, 679, 0, 196, 0, 197, 198, 199, 200, 0,
	262, 707, 708, 0, 0, 201, 680, 681, 653, 202,
	203, 204, 205, 0, 0, 206, 207, 208, 672, 209,
	0, 210, 211, 212, 267, 709, 0, 0, 213, 0,
	0, 0, 0, 214, 215, 216, 217, 627, 0, 0,
	0, 0, 658, 647, 648, 645, 646, 637, 623, 624,
	0, 0, 0, 0, 625, 977, 1244, 633, 88, 89,
	0, 90, 636, 0, 0, 0, 674, 640, 0, 0,
	0, 91, 92, 93, 219, 689, 221, 690, 94, 691,
	692, 0, 95, 225, 226, 96, 643, 673, 693, 694,
	229, 0, 685, 0, 666, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 302, 104, 105, 0,
	667, 669, 0, 668, 670, 106, 107, 272, 108, 695,
	109, 696, 697, 0, 110, 0, 111, 0, 0, 0,
	688, 113, 0, 114, 0, 0, 0, 631, 115, 116,
	675, 676, 654, 0, 0, 117, 118, 698, 0, 119,
	0, 120, 0, 0, 303, 0, 121, 686, 0, 239,
	0, 122, 123, 124, 125, 682, 684, 305, 0, 129,
	0, 126, 0, 304, 127, 699, 128, 700, 701, 702,
	0, 665, 0, 306, 130, 307, 131, 132, 0, 134,
	133, 0, 687, 308, 135, 309, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 141, 310, 143,
	144, 146, 145, 626, 0, 655, 683, 147, 703, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 251,
	311, 153, 312, 677, 154, 155, 156, 157, 0, 678,
	158, 254, 159, 0, 160, 161, 162, 704, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 313, 177, 178, 632, 179, 0,
	180, 181, 182, 183, 0, 257, 184, 185, 671, 186,
	187, 314, 188, 705, 259, 189, 0, 195, 190, 191,
	192, 194, 706, 193, 679, 0, 196, 0, 197, 198,
	199, 200, 0, 262, 707, 708, 0, 0, 201, 680,
	681, 653, 202, 203, 204, 205, 0, 0, 206, 207,
	208, 672, 209, 0, 210, 211, 212, 267, 709, 0,
	0, 213, 0, 0, 0, 0, 214, 215, 216, 217,
	627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 623, 624, 0, 0, 0, 0, 625, 0, 0,
	633, 1709, 0, 0, 0, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	674, 640, 0, 0, 0, 91, 92, 93, 219, 689,
	221, 690, 94, 691, 692, 0, 95, 225, 226, 96,
	643, 673, 693, 694, 229, 0, 685, 0, 666, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	302, 104, 105, 0, 667, 669, 0, 668, 670, 106,
	107, 272, 108, 695, 109, 696, 697, 0, 110, 0,
	111, 0, 0, 0, 688, 113, 0, 114, 0, 0,
	0, 631, 115, 116, 675, 676, 654, 0, 0, 117,
	118, 698, 0, 119, 0, 120, 0, 0, 303, 0,
	121, 686, 0, 239, 0, 122, 123, 124, 125, 682,
	684, 305, 0, 129, 0, 126, 0, 304, 127, 699,
	128, 700, 701, 702, 0, 665, 0, 306, 130, 307,
	131, 132, 0, 134, 133, 0, 687, 308, 135, 309,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 310, 143, 144, 146, 145, 626, 0, 655,
	683, 147, 703, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 311, 153, 312, 677, 154, 155,
	156, 157, 0, 678, 158, 254, 159, 0, 160, 161,
	162, 704, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 313, 177,
	178, 632, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 671, 186, 187, 314, 188, 705, 259, 189,
	0, 195, 190, 191, 192, 194, 706, 193, 679, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 707, 708,
	0, 0, 201, 680, 681, 653, 202, 203, 204, 205,
	0, 0, 206, 207, 208, 672, 209, 0, 210, 211,
	212, 267, 709, 1666, 0, 213, 0, 0, 0, 0,
	214, 215, 216, 217, 627, 0, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 625, 88, 89, 633, 90, 0, 0, 0, 636,
	674, 640, 0, 0, 0, 91, 92, 93, 219, 689,
	221, 690, 94, 691, 692, 0, 95, 225, 226, 96,
	643, 673, 693, 694, 229, 0, 685, 0, 666, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	302, 104, 105, 0, 667, 669, 0, 668, 670, 106,
	107, 272, 108, 695, 109, 696, 697, 0, 110, 0,
	111, 0, 0, 0, 688, 113, 0, 114, 0, 0,
	0, 631, 115, 116, 675, 676, 654, 0, 0, 117,
	118, 698, 0, 119, 0, 120, 0, 0, 303, 0,
	121, 686, 0, 239, 0, 122, 123, 124, 125, 682,
	684, 305, 0, 129, 0, 126, 0, 304, 127, 699,
	128, 700, 701, 702, 0, 665, 0, 306, 130, 307,
	131, 132, 0, 134, 133, 0, 687, 308, 135, 309,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 310, 143, 144, 146, 145, 626, 0, 655,
	683, 147, 703, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 311, 153, 312, 677, 154, 155,
	156, 157, 0, 678, 158, 254, 159, 0, 160, 161,
	162, 704, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 313, 177,
	178, 632, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 671, 186, 187, 314, 188, 705, 259, 189,
	0, 195, 190, 191, 192, 194, 706, 193, 679, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 707, 708,
	0, 0, 201, 680, 681, 653, 202, 203, 204, 205,
	0, 0, 206, 207, 208, 672, 209, 0, 210, 211,
	212, 267, 709, 0, 0, 213, 0, 0, 0, 0,
	214, 215, 216, 217, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 625, 0, 0, 633, 1656, 0, 0, 0, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 674, 640, 0, 0, 0, 91,
	92, 93, 219, 689, 221, 690, 94, 691, 692, 0,
	95, 225, 226, 96, 643, 673, 693, 694, 229, 0,
	685, 0, 666, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 302, 104, 105, 0, 667, 669,
	0, 668, 670, 106, 107, 272, 108, 695, 109, 696,
	697, 724, 110, 0, 111, 0, 0, 0, 688, 113,
	0, 114, 0, 0, 0, 631, 115, 116, 675, 676,
	654, 0, 0, 117, 118, 698, 0, 119, 0, 120,
	0, 0, 303, 0, 121, 686, 0, 239, 0, 122,
	123, 124, 125, 682, 684, 305, 0, 129, 0, 126,
	0, 304, 127, 699, 128, 700, 701, 702, 0, 665,
	0, 306, 130, 307, 131, 132, 0, 134, 133, 0,
	687, 308, 135, 309, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 310, 143, 144, 146,
	145, 626, 0, 655, 683, 147, 703, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 311, 153,
	312, 677, 154, 155, 156, 157, 0, 678, 158, 254,
	159, 0, 160, 161, 162, 704, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 313, 177, 178, 632, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 671, 186, 187, 314,
	188, 705, 259, 189, 0, 195, 190, 191, 192, 194,
	706, 193, 679, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 707, 708, 0, 0, 201, 680, 681, 653,
	202, 203, 204, 205, 0, 0, 206, 207, 208, 672,
	209, 0, 210, 211, 212, 267, 709, 0, 0, 213,
	0, 0, 0, 0, 214, 215, 216, 217, 627, 0,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 623,
	624, 0, 0, 0, 0, 625, 88, 89, 633, 90,
	0, 0, 0, 636, 674, 640, 0, 0, 0, 91,
	92, 93, 219, 689, 221, 690, 94, 691, 692, 0,
	95, 225, 226, 96, 643, 673, 693, 694, 229, 0,
	685, 0, 666, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 302, 104, 105, 0, 667, 669,
	0, 668, 670, 106, 107, 272, 108, 695, 109, 696,
	697, 0, 110, 0, 111, 0, 0, 0, 688, 113,
	0, 114, 0, 0, 0, 631, 115, 116, 675, 676,
	654, 0, 0, 117, 118, 698, 0, 119, 0, 120,
	0, 1296, 303, 0, 121, 686, 0, 239, 0, 122,
	123, 124, 125, 682, 684, 305, 0, 129, 0, 126,
	0, 304, 127, 699, 128, 700, 701, 702, 0, 665,
	0, 306, 130, 307, 131, 132, 0, 134, 133, 0,
	687, 308, 135, 309, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 310, 143, 144, 146,
	145, 626, 0, 655, 683, 147, 703, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 311, 153,
	312, 677, 154, 155, 156, 157, 0, 678, 158, 254,
	159, 0, 160, 161, 162, 704, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 313, 177, 178, 632, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 671, 186, 187, 314,
	188, 705, 259, 189, 0, 195, 190, 191, 192, 194,
	706, 193, 679, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 707, 708, 0, 0, 201, 680, 681, 653,
	202, 203, 204, 205, 0, 0, 206, 207, 208, 672,
	209, 0, 210, 211, 212, 267, 709, 0, 0, 213,
	0, 0, 0, 0, 214, 215, 216, 217, 627, 0,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 623,
	624, 0, 0, 0, 0, 625, 88, 89, 633, 90,
	0, 0, 0, 636, 674, 640, 0, 0, 0, 91,
	92, 93, 219, 689, 221, 690, 94, 691, 692, 0,
	95, 225, 226, 96, 643, 673, 693, 694, 229, 0,
	685, 0, 666, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 302, 104, 105, 0, 667, 669,
	0, 668, 670, 106, 107, 272, 108, 695, 109, 696,
	697, 0, 110, 0, 111, 0, 0, 0, 688, 113,
	0, 114, 0, 0, 0, 631, 115, 116, 675, 676,
	654, 0, 0, 117, 118, 698, 0, 119, 0, 120,
	0, 0, 303, 0, 121, 686, 0, 239, 0, 122,
	123, 124, 125, 682, 684, 305, 0, 129, 0, 126,
	0, 304, 127, 699, 128, 700, 701, 702, 0, 665,
	0, 306, 130, 307, 131, 132, 0, 134, 133, 0,
	687, 308, 135, 309, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 310, 143, 144, 146,
	145, 626, 0, 655, 683, 147, 703, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 311, 153,
	312, 677, 154, 155, 156, 157, 0, 678, 158, 254,
	159, 0, 160, 161, 162, 704, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 313, 177, 178, 632, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 671, 186, 187, 314,
	188, 705, 259, 189, 0, 195, 190, 191, 192, 194,
	706, 193, 679, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 707, 708, 0, 0, 201, 680, 681, 653,
	202, 203, 204, 205, 0, 0, 206, 207, 208, 672,
	209, 0, 210, 211, 212, 267, 709, 0, 0, 213,
	0, 0, 0, 0, 214, 215, 216, 217, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	624, 0, 0, 0, 0, 625, 0, 0, 633, 1239,
	0, 0, 0, 636, 658, 647, 648, 645, 646, 637,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 674, 640,
	0, 0, 0, 91, 92, 93, 219, 689, 221, 690,
	94, 691, 692, 0, 95, 225, 226, 96, 643, 673,
	693, 694, 229, 0, 685, 0, 666, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 302, 104,
	105, 0, 667, 669, 0, 668, 670, 106, 107, 272,
	108, 695, 109, 696, 697, 0, 110, 0, 111, 0,
	0, 0, 688, 113, 0, 114, 0, 0, 0, 631,
	115, 116, 675, 676, 654, 0, 0, 117, 118, 698,
	0, 119, 0, 120, 0, 0, 303, 0, 121, 686,
	0, 239, 0, 122, 123, 124, 125, 682, 684, 305,
	0, 129, 0, 126, 0, 304, 127, 699, 128, 700,
	701, 702, 0, 665, 0, 306, 130, 307, 131, 132,
	0, 134, 133, 0, 687, 308, 135, 309, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	310, 143, 144, 146, 145, 626, 0, 655, 683, 147,
	703, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 311, 153, 312, 677, 154, 155, 156, 157,
	0, 678, 158, 254, 159, 0, 160, 161, 162, 704,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 313, 177, 178, 632,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	671, 186, 187, 314, 188, 705, 259, 189, 0, 195,
	190, 191, 192, 194, 706, 193, 679, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 707, 708, 0, 0,
	201, 680, 681, 653, 202, 203, 204, 205, 0, 0,
	206, 207, 208, 672, 209, 0, 210, 211, 212, 267,
	709, 0, 0, 213, 0, 0, 0, 0, 214, 215,
	216, 217, 627, 0, 0, 0, 0, 658, 647, 648,
	645, 646, 637, 623, 624, 621, 0, 0, 0, 625,
	0, 0, 633, 88, 89, 905, 90, 636, 0, 0,
	0, 674, 640, 0, 0, 0, 91, 92, 93, 219,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 643, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 105, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 109, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 631, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 124, 125,
	682, 684, 305, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 306, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	309, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 248, 141, 310, 143, 144, 146, 145, 626, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 632, 179, 0, 180, 181, 182, 183, 0,
	257, 184, 185, 671, 186, 187, 314, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 204,
	205, 0, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 0, 0, 0,
	0, 214, 215, 216, 217, 627, 0, 658, 647, 648,
	645, 646, 637, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 625, 88, 89, 633, 90, 0, 0, 0,
	636, 674, 640, 0, 0, 0, 91, 92, 93, 219,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 643, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 2052, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 109, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 631, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 124, 125,
	682, 684, 305, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 306, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	309, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 248, 141, 310, 143, 144, 146, 145, 626, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 632, 179, 0, 180, 181, 182, 183, 0,
	257, 184, 185, 671, 186, 187, 314, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 2051,
	205, 0, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 0, 0, 0,
	0, 214, 215, 216, 217, 627, 0, 658, 647, 648,
	645, 646, 637, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 625, 88, 89, 633, 90, 0, 0, 0,
	636, 674, 640, 0, 0, 0, 91, 92, 93, 2050,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 643, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 2052, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 109, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 631, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 124, 125,
	682, 684, 305, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 306, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	309, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 248, 141, 310, 143, 144, 146, 145, 626, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 632, 179, 0, 180, 181, 182, 183, 0,
	257, 184, 185, 671, 186, 187, 314, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 2051,
	205, 0, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 0, 0, 0,
	0, 214, 215, 216, 217, 627, 0, 658, 647, 648,
	645, 646, 637, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 625, 88, 89, 633, 90, 0, 0, 0,
	636, 674, 640, 0, 0, 0, 91, 92, 93, 219,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 643, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 105, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 109, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 631, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 124, 125,
	682, 684, 305, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 306, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	309, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 248, 141, 310, 143, 144, 146, 145, 626, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 632, 179, 0, 180, 181, 182, 183, 0,
	257, 184, 185, 671, 186, 187, 314, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 204,
	205, 0, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 0, 0, 0,
	0, 214, 215, 216, 217, 627, 0, 1268, 647, 648,
	645, 646, 637, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 625, 88, 89, 633, 90, 0, 0, 0,
	636, 674, 640, 0, 0, 0, 91, 92, 93, 219,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 643, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 105, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 1271, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 631, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 1272, 125,
	682, 684, 305, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 306, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	309, 0, 136, 0, 0, 137, 0, 138, 1273, 1270,
	142, 248, 141, 310, 143, 144, 146, 145, 626, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 632, 179, 0, 180, 181, 182, 1274, 0,
	257, 184, 185, 671, 186, 187, 314, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 204,
	205, 0, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 0, 0, 0,
	0, 214, 215, 1269, 217, 627, 0, 658, 647, 648,
	645, 646, 637, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 625, 88, 89, 633, 90, 0, 0, 0,
	636, 674, 640, 0, 0, 0, 91, 92, 93, 219,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 643, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 105, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 109, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 631, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 124, 125,
	682, 684, 305, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 306, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	309, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 248, 141, 310, 143, 144, 146, 145, 0, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 1286, 179, 0, 180, 181, 182, 183, 0,
	257, 184, 185, 671, 186, 187, 314, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 204,
	205, 0, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 0, 0, 0,
	0, 214, 215, 216, 217, 0, 0, 658, 647, 648,
	645, 646, 637, 0, 0, 0, 1282, 1283, 0, 0,
	0, 0, 1284, 88, 89, 1285, 90, 0, 0, 0,
	636, 674, 640, 0, 0, 0, 91, 92, 93, 0,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 643, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 2052, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 109, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 631, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 124, 125,
	682, 684, 0, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 0, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 248, 141, 310, 143, 144, 146, 145, 626, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 632, 179, 0, 180, 181, 182, 183, 0,
	257, 184, 185, 671, 186, 187, 0, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 2051,
	205, 0, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 0, 0, 0,
	0, 214, 215, 216, 217, 0, 0, 658, 647, 648,
	645, 646, 637, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 625, 88, 89, 633, 90, 0, 0, 0,
	636, 674, 640, 0, 0, 0, 91, 92, 93, 219,
	689, 221, 690, 94, 691, 692, 0, 95, 225, 226,
	96, 0, 673, 693, 694, 229, 0, 685, 0, 666,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 302, 104, 105, 0, 667, 669, 0, 668, 670,
	106, 107, 272, 108, 695, 109, 696, 697, 0, 110,
	0, 111, 0, 0, 0, 688, 113, 0, 114, 0,
	0, 0, 234, 115, 116, 675, 676, 654, 0, 0,
	117, 118, 698, 0, 119, 0, 120, 0, 0, 303,
	0, 121, 686, 0, 239, 0, 122, 123, 124, 125,
	682, 684, 305, 0, 129, 0, 126, 0, 304, 127,
	699, 128, 700, 701, 702, 0, 665, 0, 306, 130,
	307, 131, 132, 0, 134, 133, 0, 687, 308, 135,
	309, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 248, 141, 310, 143, 144, 146, 145, 0, 0,
	655, 683, 147, 703, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 251, 311, 153, 312, 677, 154,
	155, 156, 157, 0, 678, 158, 254, 159, 0, 160,
	161, 162, 704, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 313,
	177, 178, 1286, 179, 0, 180, 181, 182, 183, 0,
	257, 184, 185, 671, 186, 187, 314, 188, 705, 259,
	189, 0, 195, 190, 191, 192, 194, 706, 193, 679,
	0, 196, 0, 197, 198, 199, 200, 0, 262, 707,
	708, 0, 0, 201, 680, 681, 653, 202, 203, 204,
	205, 658, 0, 206, 207, 208, 672, 209, 0, 210,
	211, 212, 267, 709, 0, 0, 213, 88, 89, 0,
	90, 214, 215, 216, 217, 674, 0, 0, 0, 0,
	91, 92, 93, 219, 220, 221, 222, 94, 223, 224,
	0, 95, 225, 226, 96, 1285, 673, 227, 228, 229,
	636, 685, 0, 666, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 302, 104, 105, 0, 667,
	669, 0, 668, 670, 106, 107, 272, 108, 231, 109,
	232, 233, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 234, 115, 116, 675,
	676, 0, 0, 0, 117, 118, 237, 0, 119, 0,
	120, 0, 0, 303, 0, 121, 686, 0, 239, 0,
	122, 123, 124, 125, 682, 684, 305, 0, 129, 0,
	126, 0, 304, 127, 242, 128, 243, 244, 245, 0,
	246, 0, 306, 130, 307, 131, 132, 0, 134, 133,
	0, 687, 308, 135, 309, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 248, 141, 310, 143, 144,
	146, 145, 0, 0, 0, 683, 147, 250, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 251, 311,
	153, 312, 677, 154, 155, 156, 157, 0, 678, 158,
	254, 159, 0, 160, 161, 162, 255, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 313, 177, 178, 256, 179, 0, 180,
	181, 182, 183, 0, 257, 184, 185, 671, 186, 187,
	314, 188, 258, 259, 189, 0, 195, 190, 191, 192,
	194, 260, 193, 679, 0, 196, 0, 197, 198, 199,
	200, 0, 262, 263, 264, 0, 0, 201, 680, 681,
	0, 202, 203, 204, 205, 533, 0, 206, 207, 208,
	672, 209, 0, 210, 211, 212, 267, 268, 0, 0,
	213, 88, 89, 0, 90, 214, 215, 216, 217, 218,
	0, 0, 0, 0, 91, 92, 93, 219, 220, 221,
	222, 94, 223, 224, 0, 95, 225, 226, 96, 1553,
	0, 227, 228, 229, 0, 230, 0, 301, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 302,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	272, 108, 231, 109, 232, 233, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	234, 115, 116, 235, 236, 0, 0, 0, 117, 118,
	237, 0, 119, 0, 120, 0, 0, 303, 0, 121,
	238, 0, 239, 0, 122, 123, 124, 125, 240, 241,
	305, 0, 129, 0, 126, 0, 304, 127, 242, 128,
	243, 244, 245, 0, 246, 0, 306, 130, 307, 131,
	132, 0, 134, 133, 0, 247, 308, 135, 309, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 248,
	141, 310, 143, 144, 146, 145, 0, 0, 0, 249,
	147, 250, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 251, 311, 153, 312, 252, 154, 155, 156,
	157, 0, 253, 158, 254, 159, 0, 160, 161, 162,
	255, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 313, 177, 178,
	256, 179, 0, 180, 181, 182, 183, 69, 257, 184,
	185, 0, 186, 187, 314, 188, 258, 259, 189, 0,
	195, 190, 191, 192, 194, 260, 193, 261, 0, 196,
	71, 197, 198, 199, 200, 0, 262, 263, 264, 0,
	0, 201, 265, 266, 0, 202, 203, 204, 205, 0,
	0, 206, 207, 208, 0, 209, 0, 210, 211, 212,
	537, 268, 0, 0, 213, 0, 0, 0, 67, 214,
	215, 216, 217, 0, 68, 533, 745, 0, 853, 850,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 66, 90, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 91, 92, 93, 219, 220, 221,
	222, 94, 223, 224, 0, 95, 225, 226, 96, 0,
	0, 227, 228, 229, 0, 230, 0, 301, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 302,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	272, 108, 231, 109, 232, 233, 856, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	234, 115, 116, 235, 236, 847, 0, 0, 117, 118,
	237, 0, 119, 0, 120, 0, 0, 303, 0, 121,
	238, 0, 239, 0, 122, 123, 124, 125, 240, 241,
	305, 0, 129, 0, 126, 0, 304, 127, 242, 128,
	243, 244, 245, 0, 246, 0, 306, 130, 307, 131,
	132, 0, 134, 133, 0, 247, 308, 135, 309, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 248,
	141, 310, 143, 144, 146, 145, 0, 0, 0, 249,
	147, 250, 148, 149, 0, 150, 848, 0, 151, 0,
	0, 152, 251, 311, 153, 312, 252, 154, 155, 156,
	157, 0, 253, 158, 254, 159, 0, 160, 161, 162,
	255, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 313, 177, 178,
	256, 179, 0, 180, 181, 182, 183, 0, 257, 184,
	185, 0, 186, 187, 314, 188, 258, 259, 189, 0,
	195, 190, 191, 192, 194, 260, 193, 261, 0, 196,
	0, 197, 198, 199, 200, 0, 262, 263, 264, 0,
	0, 201, 265, 266, 846, 202, 203, 204, 205, 0,
	0, 206, 207, 208, 0, 209, 0, 210, 211, 212,
	267, 268, 533, 745, 213, 853, 850, 845, 0, 214,
	215, 216, 217, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 854, 851, 218, 0, 0, 0,
	0, 91, 92, 93, 219, 220, 221, 222, 94, 223,
	224, 0, 95, 225, 226, 96, 0, 0, 227, 228,
	229, 0, 230, 0, 301, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 302, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 272, 108, 231,
	109, 232, 233, 841, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 234, 115, 116,
	235, 236, 847, 0, 0, 117, 118, 237, 0, 119,
	0, 120, 0, 0, 303, 0, 121, 238, 0, 239,
	0, 122, 123, 124, 125, 240, 241, 305, 0, 129,
	0, 126, 0, 304, 127, 242, 128, 243, 244, 245,
	0, 246, 0, 306, 130, 307, 131, 132, 0, 134,
	133, 0, 247, 308, 135, 309, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 141, 310, 143,
	144, 146, 145, 0, 0, 0, 249, 147, 250, 148,
	149, 0, 150, 848, 0, 151, 0, 0, 152, 251,
	311, 153, 312, 252, 154, 155, 156, 157, 0, 253,
	158, 254, 159, 0, 160, 161, 162, 255, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 313, 177, 178, 256, 179, 0,
	180, 181, 182, 183, 0, 257, 184, 185, 0, 186,
	187, 314, 188, 258, 259, 189, 0, 195, 190, 191,
	192, 194, 260, 193, 261, 0, 196, 0, 197, 198,
	199, 200, 0, 262, 263, 264, 0, 0, 201, 265,
	266, 846, 202, 203, 204, 205, 0, 0, 206, 207,
	208, 0, 209, 0, 210, 211, 212, 267, 268, 533,
	745, 213, 853, 850, 845, 0, 214, 215, 216, 217,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 854, 851, 218, 0, 0, 0, 0, 91, 92,
	93, 219, 220, 221, 222, 94, 223, 224, 0, 95,
	225, 226, 96, 0, 0, 227, 228, 229, 0, 230,
	0, 301, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 302, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 272, 108, 231, 109, 232, 233,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 234, 115, 116, 235, 236, 847,
	0, 0, 117, 118, 237, 0, 119, 0, 120, 0,
	0, 303, 0, 121, 238, 0, 239, 0, 122, 123,
	124, 125, 240, 241, 305, 0, 129, 0, 126, 0,
	304, 127, 242, 128, 243, 244, 245, 0, 246, 0,
	306, 130, 307, 131, 132, 0, 134, 133, 0, 247,
	308, 135, 309, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 248, 141, 310, 143, 144, 146, 145,
	0, 0, 0, 249, 147, 250, 148, 149, 0, 150,
	848, 0, 151, 0, 0, 152, 251, 311, 153, 312,
	252, 154, 155, 156, 157, 0, 253, 158, 254, 159,
	0, 160, 161, 162, 255, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 313, 177, 178, 256, 179, 0, 180, 181, 182,
	183, 0, 257, 184, 185, 0, 186, 187, 314, 188,
	258, 259, 189, 0, 195, 190, 191, 192, 194, 260,
	193, 261, 0, 196, 0, 197, 198, 199, 200, 0,
	262, 263, 264, 0, 0, 201, 265, 266, 846, 202,
	203, 204, 205, 0, 0, 206, 207, 208, 0, 209,
	0, 210, 211, 212, 267, 268, 85, 0, 213, 0,
	0, 0, 0, 214, 215, 216, 217, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 854, 851,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 487, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 69, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 71, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	0, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 537, 268, 0, 0, 213, 85, 0, 0, 67,
	214, 215, 216, 217, 0, 68, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	218, 0, 1163, 0, 1168, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 69, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 71, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	0, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 537, 268, 0, 0, 213, 85, 0, 0, 67,
	214, 215, 216, 217, 0, 68, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	218, 0, 0, 0, 66, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 487, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	0, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 85, 0, 0, 0,
	214, 215, 216, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	218, 0, 1163, 0, 1168, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	85, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 88, 89, 0, 90,
	214, 215, 216, 217, 218, 0, 0, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 753, 227, 228, 229, 0,
	230, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 0, 0, 117, 118, 237, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 240, 241, 0, 0, 129, 0, 126,
	0, 0, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	247, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 0, 153,
	0, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 0, 160, 161, 162, 255, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 186, 187, 0,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 0, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 1074, 0,
	227, 228, 229, 0, 230, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 240, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 85, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 0, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 1673, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 240, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 156, 157, 0, 253, 158, 254, 159, 0,
	160, 161, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 179, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 0, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 0, 213, 0, 0,
	0, 0, 214, 215, 216, 217, 658, 647, 648, 645,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 720, 0, 0, 0,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 689,
	221, 690, 94, 691, 692, 0, 95, 225, 226, 96,
	0, 0, 693, 694, 229, 0, 230, 0, 301, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	302, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 695, 109, 696, 697, 0, 110, 0,
	111, 0, 0, 0, 688, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 654, 0, 0, 117,
	118, 698, 0, 119, 0, 120, 0, 0, 303, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 305, 0, 129, 0, 126, 0, 304, 127, 699,
	128, 700, 701, 702, 0, 665, 0, 306, 130, 307,
	131, 132, 0, 134, 133, 0, 247, 308, 135, 309,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 310, 143, 144, 146, 145, 0, 0, 655,
	249, 147, 703, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 311, 153, 312, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 704, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 313, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 314, 188, 705, 259, 189,
	0, 195, 190, 191, 192, 194, 706, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 707, 708,
	0, 0, 201, 265, 266, 653, 202, 203, 204, 205,
	533, 745, 206, 207, 208, 743, 209, 0, 210, 211,
	212, 267, 709, 0, 0, 213, 88, 89, 0, 90,
	214, 215, 216, 217, 218, 0, 0, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 0, 227, 228, 229, 0,
	230, 0, 301, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 302, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 0, 0, 117, 118, 237, 0, 119, 0, 120,
	0, 0, 303, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 240, 241, 305, 0, 129, 0, 126,
	0, 304, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 306, 130, 307, 131, 132, 0, 134, 133, 0,
	247, 308, 135, 309, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 310, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 311, 153,
	312, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 0, 160, 161, 162, 255, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 313, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 186, 187, 314,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 0, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 0, 230, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 81,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 240, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 80,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 0, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 533, 745, 0, 0, 214, 215,
	216, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 84, 0, 0, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 0, 230, 0, 301, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 302, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 303, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 240, 241, 305,
	0, 129, 0, 126, 0, 304, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 306, 130, 307, 131, 132,
	0, 134, 133, 0, 247, 308, 135, 309, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	310, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 311, 153, 312, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 313, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 314, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 85, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 0, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 0, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 240, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 156, 157, 0, 253, 158, 254, 159, 0,
	160, 161, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 179, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 0, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 533, 213, 0, 0,
	0, 0, 214, 215, 216, 217, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 84,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 301, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	302, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 303, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 305, 0, 129, 0, 126, 0, 304, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 306, 130, 307,
	131, 132, 0, 134, 133, 0, 247, 308, 135, 309,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 310, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 311, 153, 312, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 313, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 314, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	85, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 88, 89, 0, 90,
	214, 215, 216, 217, 218, 0, 0, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 0, 227, 228, 229, 1035,
	230, 0, 0, 0, 97, 98, 99, 0, 100, 1033,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 1139, 0, 117, 118, 237, 0, 119, 0, 120,
	1038, 0, 0, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 240, 241, 0, 0, 129, 1137, 126,
	0, 0, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	247, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 0, 153,
	0, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 1037, 160, 161, 162, 255, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 186, 187, 0,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 1138, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 1035, 230, 0, 0, 1030, 97, 98,
	99, 0, 100, 1033, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 1038, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 1029, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 1037, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 85, 1036,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 1640, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 0, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 240, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 156, 157, 0, 253, 158, 254, 159, 0,
	160, 161, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 179, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 85, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 0, 213, 88, 89,
	0, 90, 214, 215, 216, 217, 218, 0, 0, 0,
	0, 91, 92, 93, 219, 220, 221, 222, 94, 223,
	224, 0, 95, 225, 226, 96, 0, 0, 227, 228,
	229, 0, 230, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 272, 108, 231,
	109, 232, 233, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 234, 115, 116,
	235, 236, 0, 0, 0, 117, 118, 237, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 238, 0, 239,
	0, 122, 123, 124, 125, 240, 241, 0, 0, 129,
	0, 126, 0, 0, 127, 242, 128, 243, 244, 245,
	0, 246, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 247, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 249, 147, 250, 148,
	149, 0, 150, 0, 487, 151, 0, 0, 152, 251,
	0, 153, 0, 252, 154, 155, 156, 157, 0, 253,
	158, 254, 159, 0, 160, 161, 162, 255, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 256, 179, 0,
	180, 181, 182, 183, 0, 257, 184, 185, 0, 186,
	187, 0, 188, 258, 259, 189, 0, 195, 190, 191,
	192, 194, 260, 193, 261, 0, 196, 0, 197, 198,
	199, 200, 0, 262, 263, 264, 0, 0, 201, 265,
	266, 0, 202, 203, 204, 205, 85, 0, 206, 207,
	208, 0, 209, 0, 210, 211, 212, 267, 268, 0,
	0, 213, 88, 89, 0, 90, 214, 215, 216, 217,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 778,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 487, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	85, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 88, 89, 545, 90,
	214, 215, 216, 217, 218, 0, 0, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 0, 227, 228, 229, 0,
	230, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 0, 0, 117, 118, 237, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 240, 241, 0, 0, 129, 0, 126,
	0, 0, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	247, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 0, 153,
	0, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 0, 160, 161, 162, 255, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 186, 187, 0,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 0, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 0, 230, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 499, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 487, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 85, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 0, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 0, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 492, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	487, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 156, 157, 0, 253, 158, 254, 159, 0,
	160, 161, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 179, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 85, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 0, 213, 88, 89,
	400, 90, 214, 215, 216, 217, 218, 0, 0, 0,
	0, 91, 92, 93, 219, 220, 221, 222, 94, 223,
	224, 0, 95, 225, 226, 96, 0, 0, 227, 228,
	229, 0, 230, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 272, 108, 231,
	109, 232, 233, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 234, 115, 116,
	235, 236, 0, 0, 0, 117, 118, 237, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 238, 0, 239,
	0, 122, 123, 124, 125, 240, 241, 0, 0, 129,
	0, 126, 0, 0, 127, 242, 128, 243, 244, 245,
	0, 246, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 247, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 249, 147, 250, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 251,
	0, 153, 0, 252, 154, 155, 156, 157, 0, 253,
	158, 254, 399, 0, 160, 161, 162, 255, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 256, 179, 0,
	180, 181, 182, 183, 0, 257, 184, 185, 0, 186,
	187, 0, 188, 258, 259, 189, 0, 195, 190, 191,
	192, 194, 260, 193, 261, 0, 196, 0, 197, 198,
	199, 200, 0, 262, 263, 264, 0, 0, 201, 265,
	266, 0, 202, 203, 204, 205, 85, 0, 206, 207,
	208, 0, 209, 0, 210, 211, 212, 267, 268, 0,
	0, 213, 88, 89, 0, 90, 214, 215, 216, 217,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	85, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 88, 89, 0, 90,
	214, 215, 216, 217, 218, 0, 0, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 0, 227, 228, 229, 0,
	230, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 0, 0, 117, 118, 237, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 1332, 241, 0, 0, 129, 0, 126,
	0, 0, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	247, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 0, 153,
	0, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 0, 160, 161, 162, 255, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 186, 187, 0,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 0, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 0, 230, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 1330, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 85, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 0, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 0, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 1319, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 156, 157, 0, 253, 158, 254, 159, 0,
	160, 161, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 179, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 85, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 0, 213, 88, 89,
	0, 90, 214, 215, 216, 217, 218, 0, 0, 0,
	0, 91, 92, 93, 219, 220, 221, 222, 94, 223,
	224, 0, 95, 225, 226, 96, 0, 0, 227, 228,
	229, 0, 230, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 272, 108, 231,
	109, 232, 233, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 234, 115, 116,
	235, 236, 0, 0, 0, 117, 118, 237, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 238, 0, 239,
	0, 122, 123, 124, 125, 896, 241, 0, 0, 129,
	0, 126, 0, 0, 127, 242, 128, 243, 244, 245,
	0, 246, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 247, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 249, 147, 250, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 251,
	0, 153, 0, 252, 154, 155, 156, 157, 0, 253,
	158, 254, 159, 0, 160, 161, 162, 255, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 256, 179, 0,
	180, 181, 182, 183, 0, 257, 184, 185, 0, 186,
	187, 0, 188, 258, 259, 189, 0, 195, 190, 191,
	192, 194, 260, 193, 261, 0, 196, 0, 197, 198,
	199, 200, 0, 262, 263, 264, 0, 0, 201, 265,
	266, 0, 202, 203, 204, 205, 85, 0, 206, 207,
	208, 0, 209, 0, 210, 211, 212, 267, 268, 0,
	0, 213, 88, 89, 0, 90, 214, 215, 216, 217,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 414, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	85, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 88, 89, 0, 90,
	214, 215, 216, 217, 218, 0, 763, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 0, 227, 228, 229, 0,
	230, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 0, 0, 117, 118, 237, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 240, 241, 0, 0, 129, 0, 126,
	0, 0, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	247, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 0, 153,
	0, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 0, 160, 161, 162, 255, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 0, 187, 0,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 0, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 0, 230, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 598, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 85, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 0, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 0, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 593, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 156, 157, 0, 253, 158, 254, 159, 0,
	160, 161, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 179, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 85, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 0, 213, 88, 89,
	0, 90, 214, 215, 216, 217, 218, 0, 0, 0,
	0, 91, 92, 93, 219, 220, 221, 222, 94, 223,
	224, 0, 95, 225, 226, 96, 0, 0, 227, 228,
	551, 0, 230, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 272, 108, 231,
	109, 232, 233, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 234, 115, 116,
	235, 236, 0, 0, 0, 117, 118, 237, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 238, 0, 239,
	0, 122, 123, 124, 125, 240, 241, 0, 0, 129,
	0, 126, 0, 0, 127, 242, 128, 243, 244, 245,
	0, 246, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 247, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 425, 0, 143,
	144, 146, 145, 0, 0, 0, 249, 147, 250, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 251,
	0, 153, 0, 252, 154, 155, 156, 157, 0, 253,
	158, 254, 159, 0, 160, 161, 162, 255, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 256, 179, 0,
	180, 181, 182, 183, 0, 257, 184, 185, 0, 186,
	187, 0, 188, 258, 259, 189, 0, 195, 190, 191,
	192, 194, 260, 193, 261, 0, 196, 0, 197, 198,
	199, 200, 0, 424, 263, 264, 0, 0, 420, 265,
	266, 0, 202, 203, 204, 205, 85, 0, 206, 207,
	208, 0, 209, 0, 210, 211, 212, 267, 268, 0,
	0, 213, 88, 89, 0, 90, 214, 215, 216, 217,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 240,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 425, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 424, 263, 264,
	0, 0, 420, 265, 266, 0, 202, 203, 204, 205,
	85, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 88, 89, 0, 90,
	214, 215, 216, 217, 218, 0, 0, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 0, 227, 228, 229, 0,
	230, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 0, 0, 117, 118, 237, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 529, 241, 0, 0, 129, 0, 126,
	0, 0, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	247, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 0, 153,
	0, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 0, 160, 161, 162, 255, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 186, 187, 0,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 0, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 0, 230, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 526, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 256,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 185,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 262, 263, 264, 0, 0,
	201, 265, 266, 0, 202, 203, 204, 205, 85, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 0, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 0, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 523, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 156, 157, 0, 253, 158, 254, 159, 0,
	160, 161, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 179, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 85, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 0, 213, 88, 89,
	0, 90, 214, 215, 216, 217, 218, 0, 0, 0,
	0, 91, 92, 93, 219, 220, 221, 222, 94, 223,
	224, 0, 95, 225, 226, 96, 0, 0, 227, 228,
	229, 0, 230, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 272, 108, 231,
	109, 232, 233, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 234, 115, 116,
	235, 236, 0, 0, 0, 117, 118, 237, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 238, 0, 239,
	0, 122, 123, 124, 125, 521, 241, 0, 0, 129,
	0, 126, 0, 0, 127, 242, 128, 243, 244, 245,
	0, 246, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 247, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 248, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 249, 147, 250, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 251,
	0, 153, 0, 252, 154, 155, 156, 157, 0, 253,
	158, 254, 159, 0, 160, 161, 162, 255, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 256, 179, 0,
	180, 181, 182, 183, 0, 257, 184, 185, 0, 186,
	187, 0, 188, 258, 259, 189, 0, 195, 190, 191,
	192, 194, 260, 193, 261, 0, 196, 0, 197, 198,
	199, 200, 0, 262, 263, 264, 0, 0, 201, 265,
	266, 0, 202, 203, 204, 205, 85, 0, 206, 207,
	208, 0, 209, 0, 210, 211, 212, 267, 268, 0,
	0, 213, 88, 89, 0, 90, 214, 215, 216, 217,
	218, 0, 0, 0, 0, 91, 92, 93, 219, 220,
	221, 222, 94, 223, 224, 0, 95, 225, 226, 96,
	0, 0, 227, 228, 229, 0, 230, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 272, 108, 231, 109, 232, 233, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 234, 115, 116, 235, 236, 0, 0, 0, 117,
	118, 237, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 238, 0, 239, 0, 122, 123, 124, 125, 495,
	241, 0, 0, 129, 0, 126, 0, 0, 127, 242,
	128, 243, 244, 245, 0, 246, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 247, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	248, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	249, 147, 250, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 251, 0, 153, 0, 252, 154, 155,
	156, 157, 0, 253, 158, 254, 159, 0, 160, 161,
	162, 255, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 256, 179, 0, 180, 181, 182, 183, 0, 257,
	184, 185, 0, 186, 187, 0, 188, 258, 259, 189,
	0, 195, 190, 191, 192, 194, 260, 193, 261, 0,
	196, 0, 197, 198, 199, 200, 0, 262, 263, 264,
	0, 0, 201, 265, 266, 0, 202, 203, 204, 205,
	85, 0, 206, 207, 208, 0, 209, 0, 210, 211,
	212, 267, 268, 0, 0, 213, 88, 89, 0, 90,
	214, 215, 216, 217, 218, 0, 0, 0, 0, 91,
	92, 93, 219, 220, 221, 222, 94, 223, 224, 0,
	95, 225, 226, 96, 0, 0, 227, 228, 229, 0,
	230, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 272, 108, 231, 109, 232,
	233, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 234, 115, 116, 235, 236,
	0, 0, 0, 117, 118, 237, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 238, 0, 239, 0, 122,
	123, 124, 125, 240, 241, 0, 0, 129, 0, 126,
	0, 0, 127, 242, 128, 243, 244, 245, 0, 246,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	247, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 248, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 249, 147, 250, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 251, 0, 153,
	0, 252, 154, 155, 156, 157, 0, 253, 158, 254,
	159, 0, 160, 161, 162, 255, 476, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 256, 179, 0, 180, 181,
	182, 183, 0, 257, 184, 185, 0, 186, 187, 0,
	188, 258, 259, 189, 0, 195, 190, 191, 192, 194,
	260, 193, 261, 0, 196, 0, 197, 198, 199, 200,
	0, 262, 263, 264, 0, 0, 201, 265, 266, 0,
	202, 203, 204, 205, 85, 0, 206, 207, 208, 0,
	209, 0, 210, 211, 212, 267, 268, 0, 0, 213,
	88, 89, 0, 90, 214, 215, 216, 217, 218, 0,
	0, 0, 0, 91, 92, 93, 219, 220, 221, 222,
	94, 223, 224, 0, 95, 225, 226, 96, 0, 0,
	227, 228, 229, 0, 230, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 272,
	108, 231, 109, 232, 233, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 234,
	115, 116, 235, 236, 0, 0, 0, 117, 118, 237,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 238,
	0, 239, 0, 122, 123, 124, 125, 240, 241, 0,
	0, 129, 0, 126, 0, 0, 127, 242, 128, 243,
	244, 245, 0, 246, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 247, 0, 135, 0, 0, 417,
	0, 0, 137, 0, 138, 139, 140, 142, 248, 425,
	0, 143, 144, 146, 145, 0, 0, 0, 249, 147,
	250, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 251, 0, 153, 0, 252, 154, 155, 156, 157,
	0, 253, 158, 254, 159, 0, 160, 161, 162, 255,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 419,
	179, 0, 180, 181, 182, 183, 0, 257, 184, 418,
	0, 186, 187, 0, 188, 258, 259, 189, 0, 195,
	190, 191, 192, 194, 260, 193, 261, 0, 196, 0,
	197, 198, 199, 200, 0, 424, 263, 264, 0, 0,
	420, 265, 266, 0, 202, 203, 204, 205, 85, 0,
	206, 207, 208, 0, 209, 0, 210, 211, 212, 267,
	268, 0, 0, 213, 88, 89, 0, 90, 214, 215,
	216, 217, 218, 0, 0, 0, 0, 91, 92, 93,
	219, 220, 221, 222, 94, 223, 224, 0, 95, 225,
	226, 96, 0, 0, 227, 228, 229, 0, 230, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 272, 108, 231, 109, 232, 233, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 234, 115, 116, 235, 236, 0, 0,
	0, 117, 118, 237, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 238, 0, 239, 0, 122, 123, 124,
	125, 240, 241, 0, 0, 129, 0, 126, 0, 0,
	127, 242, 128, 243, 244, 245, 0, 246, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 247, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 248, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 249, 147, 250, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 251, 0, 153, 0, 252,
	154, 155, 0, 157, 0, 253, 158, 254, 159, 0,
	160, 0, 162, 255, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 256, 0, 0, 180, 181, 182, 183,
	0, 257, 184, 185, 0, 186, 187, 0, 188, 258,
	259, 189, 0, 195, 190, 191, 192, 194, 260, 193,
	261, 0, 196, 0, 197, 198, 199, 200, 0, 262,
	263, 264, 0, 0, 201, 265, 266, 0, 202, 203,
	204, 205, 0, 0, 206, 207, 208, 0, 209, 0,
	210, 211, 212, 267, 268, 0, 0, 213, 0, 0,
	0, 0, 214, 215, 216, 217, 920, 921, 0, 940,
	941, 942, 950, 951, 952, 0, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 0, 0, 0, 0, 923,
	920, 921, 954, 940, 941, 942, 950, 951, 952, 0,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 922, 0, 923, 0, 0, 954, 937, 0, 0,
	920, 921, 0, 940, 941, 942, 950, 951, 952, 0,
	0, 0, 0, 0, 0, 922, 943, 0, 0, 0,
	0, 937, 0, 923, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 922, 928, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 955, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 947,
	955, 0, 0, 945, 0, 0, 0, 0, 0, 938,
	928, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 947,
	955, 0, 0, 938, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 944, 0,
	0, 0, 0, 938, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 946, 0,
	0, 934, 935, 936, 0, 933, 930, 931, 932, 924,
	925, 926, 927, 929, 0, 949, 0, 0, 0, 1930,
	0, 0, 946, 0, 0, 934, 935, 936, 0, 933,
	930, 931, 932, 924, 925, 926, 927, 929, 0, 949,
	0, 0, 0, 1872, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 934, 935, 936, 0, 933,
	930, 931, 932, 924, 925, 926, 927, 929, 0, 949,
	0, 920, 921, 1850, 940, 941, 942, 950, 951, 952,
	0, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 923, 920, 921, 954, 940, 941,
	942, 950, 951, 952, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 0, 0, 922, 0, 923, 0,
	0, 954, 937, 0, 0, 920, 921, 0, 940, 941,
	942, 950, 951, 952, 0, 0, 0, 0, 0, 0,
	922, 943, 0, 0, 0, 0, 937, 0, 923, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	922, 928, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 955, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 947, 955, 0, 0, 945, 0,
	0, 0, 0, 0, 938, 928, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 947, 955, 0, 0, 938, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 944, 0, 0, 0, 0, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 946, 0, 0, 934, 935, 936, 0,
	933, 930, 931, 932, 924, 925, 926, 927, 929, 0,
	949, 0, 0, 0, 1849, 0, 0, 946, 0, 0,
	934, 935, 936, 0, 933, 930, 931, 932, 924, 925,
	926, 927, 929, 0, 949, 0, 0, 0, 1742, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	934, 935, 936, 0, 933, 930, 931, 932, 924, 925,
	926, 927, 929, 0, 949, 0, 920, 921, 1676, 940,
	941, 942, 950, 951, 952, 0, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 0, 0, 0, 0, 923,
	920, 921, 954, 940, 941, 942, 950, 951, 952, 0,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 922, 0, 923, 0, 0, 954, 937, 0, 0,
	920, 921, 0, 940, 941, 942, 950, 951, 952, 0,
	0, 0, 0, 0, 0, 922, 943, 0, 0, 0,
	0, 937, 0, 923, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 922, 928, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 955, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 947,
	955, 0, 0, 945, 0, 0, 0, 0, 0, 938,
	928, 2073, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 947,
	955, 0, 0, 938, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 944, 0,
	0, 0, 0, 938, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 2072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 946, 0,
	0, 934, 935, 936, 0, 933, 930, 931, 932, 924,
	925, 926, 927, 929, 0, 949, 0, 0, 0, 1660,
	0, 0, 946, 0, 0, 934, 935, 936, 0, 933,
	930, 931, 932, 924, 925, 926, 927, 929, 0, 949,
	0, 0, 0, 1240, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 934, 935, 936, 0, 933,
	930, 931, 932, 924, 925, 926, 927, 929, 0, 949,
	920, 921, 0, 940, 941, 942, 950, 951, 952, 0,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 923, 0, 0, 954, 0, 0, 0,
	0, 0, 920, 921, 0, 940, 941, 942, 950, 951,
	952, 0, 0, 0, 0, 922, 0, 0, 943, 0,
	958, 937, 0, 1155, 0, 923, 920, 921, 954, 940,
	941, 942, 950, 951, 952, 0, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 0, 957, 922, 0, 923,
	0, 0, 954, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 922, 1519, 0, 0, 1518, 0, 937, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 0, 947,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 947, 955, 938, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 947, 955, 0, 944, 945,
	0, 0, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 938,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 948, 0, 920, 921, 0,
	940, 941, 942, 950, 951, 952, 0, 939, 0, 0,
	0, 0, 0, 943, 0, 0, 0, 0, 0, 948,
	923, 0, 946, 954, 0, 934, 935, 936, 0, 933,
	930, 931, 932, 924, 925, 926, 927, 929, 0, 949,
	0, 0, 922, 0, 0, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 946, 0, 0, 934, 935, 936,
	0, 933, 930, 931, 932, 924, 925, 926, 927, 929,
	0, 949, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 934, 935, 936, 0, 933, 930, 931, 932, 924,
	925, 926, 927, 929, 0, 949, 0, 928, 0, 0,
	0, 0, 920, 921, 0, 940, 941, 942, 950, 951,
	952, 0, 0, 0, 0, 0, 947, 955, 943, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 954, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 945, 0, 0, 922, 0, 0,
	938, 0, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 920, 921,
	0, 940, 941, 942, 950, 951, 952, 0, 939, 0,
	0, 947, 955, 0, 943, 0, 0, 0, 0, 0,
	948, 923, 0, 0, 954, 0, 0, 953, 0, 0,
	920, 921, 0, 940, 941, 942, 950, 951, 952, 945,
	0, 0, 0, 922, 0, 938, 943, 0, 0, 937,
	1520, 0, 0, 923, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 922, 0, 0, 0, 946,
	0, 937, 934, 935, 936, 0, 933, 930, 931, 932,
	924, 925, 926, 927, 929, 0, 949, 0, 928, 0,
	0, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 947, 955, 0,
	0, 0, 0, 0, 0, 948, 0, 0, 0, 0,
	928, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 1664, 0, 0, 947,
	955, 938, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 945, 0, 0,
	0, 0, 0, 938, 946, 0, 0, 934, 935, 936,
	0, 933, 930, 931, 932, 924, 925, 926, 927, 929,
	0, 949, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 920, 921, 0, 940, 941, 942, 950, 951, 952,
	0, 948, 0, 0, 0, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 923, 0, 0, 954, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 922, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 934, 935, 936, 0, 933, 930, 931,
	932, 924, 925, 926, 927, 929, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 928, 946, 0, 0, 934, 935, 936, 0, 933,
	930, 931, 932, 924, 925, 926, 927, 929, 0, 949,
	947, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 920, 921, 0,
	940, 941, 942, 950, 951, 952, 0, 0, 945, 0,
	0, 0, 0, 943, 938, 0, 0, 1478, 0, 0,
	923, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 922, 0, 0, 0, 0, 0, 937, 0,
	0, 1485, 0, 0, 920, 921, 0, 940, 941, 942,
	950, 951, 952, 0, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 0, 0, 0, 0, 923, 0, 0,
	954, 0, 939, 0, 920, 921, 0, 940, 941, 942,
	950, 951, 952, 0, 948, 0, 0, 928, 0, 922,
	943, 0, 0, 0, 0, 937, 0, 923, 0, 0,
	954, 0, 0, 0, 0, 0, 947, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 922,
	0, 0, 953, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	938, 0, 0, 946, 928, 0, 934, 935, 936, 0,
	933, 930, 931, 932, 924, 925, 926, 927, 929, 0,
	949, 0, 0, 947, 955, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 953,
	920, 921, 0, 940, 941, 942, 950, 951, 952, 0,
	0, 945, 0, 947, 955, 0, 0, 938, 0, 0,
	0, 0, 0, 923, 0, 0, 954, 0, 939, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 945, 944, 0, 0, 922, 0, 938, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 939, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 948, 0, 946,
	928, 0, 934, 935, 936, 0, 933, 930, 931, 932,
	924, 925, 926, 927, 929, 939, 949, 0, 0, 947,
	955, 0, 0, 0, 0, 1487, 1488, 948, 1505, 1506,
	1507, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 938, 0, 0, 946, 0, 0, 934,
	935, 936, 0, 933, 930, 931, 932, 924, 925, 926,
	927, 929, 29, 949, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 30, 54, 0, 946, 0, 0, 934,
	935, 936, 0, 933, 930, 931, 932, 924, 925, 926,
	927, 929, 0, 949, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 32, 0, 62, 0, 0, 1487,
	1488, 939, 1505, 1506, 1507, 1493, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 45, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 57, 0, 0, 0, 44,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 46, 0, 0, 0,
	1502, 0, 42, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 934, 935, 936, 0, 933,
	930, 931, 932, 924, 925, 926, 927, 929, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 43, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 31, 1503, 0, 47, 0, 58, 0, 0, 0,
	0, 0, 48, 0, 0, 69, 0, 0, 0, 0,
	51, 53, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 804, 796, 821, 789, 812, 811, 0, 71, 791,
	790, 0, 0, 0, 823, 822, 0, 0, 0, 0,
	1499, 1500, 1501, 61, 1498, 1495, 1496, 1497, 1489, 1490,
	1491, 1492, 1494, 0, 0, 0, 0, 0, 72, 0,
	1504, 0, 0, 0, 0, 817, 67, 809, 808, 0,
	0, 0, 68, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 799, 798, 800, 801, 802, 0, 820, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1501, 0, 1498, 1495,
	1496, 1497, 1489, 1490, 1491, 1492, 1494, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 0, 0, 797, 804,
	796, 821, 789, 812, 811, 0, 0, 791, 790, 0,
	0, 0, 823, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 1174, 1172, 1173,
	1176, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 809, 808, 0, 0, 0,
	0, 794, 0, 0, 807, 0, 0, 0, 0, 803,
	795, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 806, 0, 0, 0, 0, 0, 792, 0, 0,
	818, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 799,
	798, 800, 801, 802, 824, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 0, 0, 0, 797, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 0, 0, 803, 795, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 792, 0, 0, 818, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824,
}
var sqlPact = [...]int{

	27509, -1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 731,
	16410, 16410, 20002, -1000, -1000, -1000, -1000, -1000, -1000, 733,
	714, 2240, 5760, 20002, 20002, 19728, 1763, 1763, 21372, -1000,
	-1000, 24660, -1000, 3243, 504, 506, 504, 504, 502, 21372,
	20002, 567, 749, 149, -1000, 707, 19, 24386, 20002, 1339,
	42, 18358, 344, 27509, 19454, 24112, 20002, 19180, 548, 38,
	16974, 20002, -1000, 47, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1174,
	311, 47, -1000, 1173, 1031, 1026, 18358, 23838, 23564, 23290,
	23016, -1000, 12711, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 720, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 350, 348, -1000, 18906,
	-1000, 887, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 886, -1000, 20002, -1000, -1000, 22742, 22468, 346,
	892, -1000, -1000, 602, 427, 1363, -1000, 52, -1000, -1000,
	-1000, 1172, -1000, 885, 1166, 1165, 1163, 1161, 1160, 1152,
	425, 871, 493, -1000, 1151, 892, -1000, 892, -1000, -1000,
	-1000, 546, 21372, -1000, -1000, 18358, -1000, 22194, 20002, 20002,
	1052, 21920, -1000, 707, -1000, -1000, -1000, 917, 1327, 1327,
	1327, 1347, 162, 161, 149, 30, 20002, -1000, 345, 30,
	9760, 9760, -1000, -1000, 344, -1000, 222, 15564, -1000, 8836,
	-1000, 954, 1244, 453, 648, 1243, -140, 696, 695, 1242,
	16136, 16974, 38, 37, -1000, -1000, -1000, 5462, 16136, 598,
	14742, 47, -1000, -1000, -1000, 18358, 20002, 20002, 616, 21646,
	-1000, 1241, 121, 1240, -1000, 104, 1233, -1000, 104, 1232,
	25, -1000, -1000, -1000, -1000, -1000, -1000, 344, 18632, 20002,
	1394, 27872, -1000, 10963, -1000, -1000, 16410, 2068, 16410, -1000,
	-1000, 1391, -1000, 10963, -1000, 36, 33, 976, 991, 13298,
	13011, 1290, 1330, -1000, -1000, -1000, 50, 5760, 20002, 1190,
	16410, 20002, 20002, 20002, 20002, 20002, 20002, -1000, 975, -1000,
	-1000, 20002, 20002, 713, -1000, 32, 31, -1000, 21372, -1000,
	122, -1000, 343, 947, 442, 148, 21098, 442, 935, -1000,
	917, -1000, 895, 972, 10063, 10963, 149, -1000, -1000, 149,
	149, 10963, -1000, -1000, 20002, 30, 1389, 20002, 62, -1000,
	26376, -1000, -1000, 10963, 10963, 10963, 10963, 10963, 845, 376,
	-1000, 340, 339, 6685, -1000, -1000, 1558, -1000, -1000, -1000,
	166, -1000, -1000, 10963, 47, -1000, -1000, -1000, -1000, 337,
	1577, -1000, 439, -1000, -1000, -1000, 440, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1188, 331, 329, -1000,
	-1000, -1000, -1000, 328, 325, 324, 321, 320, 319, 318,
	316, 310, 309, 308, 301, 300, 299, 296, 746, -1000,
	457, -1000, -1000, 457, 457, -1000, 288, 288, 291, -1000,
	-1000, -1000, -1000, 288, -1000, -1000, -1000, 419, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 292, 62, -1000, -1000, -1000,
	20002, 24, -1000, 27214, -1000, -19, 752, -1000, 17810, 1324,
	1309, 1300, 18358, 1366, 1359, 532, 20002, 20002, 531, 530,
	18358, 415, -1000, -1000, -1000, -1000, -1000, 20002, -1000, -1000,
	-38, -1000, -1000, 1149, 23, -1000, -1000, 426, 64, 1384,
	64, 15016, -1000, 20002, 20002, -1000, 20002, -1000, -1000, 20002,
	-1000, 20002, 20002, -1000, 20002, 180, 17262, 739, 1231, 606,
	19, 17, -1000, 1367, -1000, -1000, -1000, -1000, 103, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 291, 746, 288, 288,
	288, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 419, -1000,
	-1000, 457, 457, 457, -1000, -1000, 13, 27214, 529, -1000,
	1142, 501, 5, 711, 1021, 674, -1000, -1000, -1000, -1000,
	29, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1556, -1000, -1000, 1550, 29, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1574, 5760, -1000, -1000, -1000,
	20002, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20002, 20002, 711, 1021, -1000, -1000, 18358, 17536, 1381,
	1229, 836, -1000, 1380, 20002, 876, 934, -1000, 564, 1228,
	-1000, -1000, -1000, -1000, 27214, -1000, 27214, 650, 1040, -1000,
	1040, 28, -1000, 26352, -1000, 287, -2, 426, 9760, 14452,
	27724, 27872, 20002, 559, 10963, 10963, 10963, 10963, 10963, 10963,
	10963, 10963, 10963, 10963, 10963, 10963, 10963, 10963, 10963, 10963,
	10963, 10963, 10963, 10963, 10963, 10963, 1179, 10963, 528, 10963,
	10963, 10963, 10963, 1419, 811, 248, 849, 5760, -1000, -1000,
	700, 700, 700, 27350, 27350, 216, 376, -1000, 10963, -1000,
	9436, 161, 25980, 8, -1000, -1000, -1000, 7585, 452, 27214,
	47, 6361, -1000, 1548, 982, 1197, 1105, 282, 157, 156,
	10963, 10963, 11263, 11263, 10963, 11563, 10963, 10963, 6985, 10963,
	10963, 10963, 10963, 10963, 10963, -1000, 270, -1000, -1000, -1000,
	-1000, 1545, -1000, -1000, 1542, -1000, 555, 554, 1539, 426,
	153, 8836, -1000, 739, 20002, 20002, 20002, -1000, -1000, 931,
	20824, 929, 27872, 20002, -1000, 252, 250, 1010, 1007, 20002,
	20002, 20550, 20276, 20002, 806, 19, 19, 20002, 693, -1000,
	20002, 20002, 680, 1085, 898, -1000, 445, 16136, 596, 1141,
	20002, 676, 10963, 692, -1000, 14162, 464, 20002, 676, 56,
	-1000, -1000, -1000, 409, 20002, -1000, -1000, -1000, 121, -1000,
	104, 104, -1000, -1000, 18358, -1000, -1000, -1000, -1000, -1000,
	-1000, 27872, 369, 363, -1000, 1534, 526, -1000, 524, 523,
	521, -1000, 249, -1000, 10963, 20002, 20002, 1021, -1000, -1000,
	-1000, -1000, 709, -1000, 710, -1000, 13585, -1000, -1000, -1000,
	-1000, -21, -1000, -1000, -1000, -1000, -1000, -1000, 132, -8,
	-6, 27872, -1000, -1000, -1000, -1000, -1000, 20002, 336, 20002,
	19, 20002, -1000, 1572, 19, 20002, 1225, 1251, 405, 20002,
	-1000, -1000, -1000, 10963, -1000, -1000, -1000, 19, -1000, 1104,
	-1000, -110, 1296, 1312, -172, 152, 417, -1000, 13872, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 424,
	432, 432, 638, 638, 638, 638, 2780, 2780, 179, 2601,
	203, 203, 203, 2545, 215, 215, 203, 203, 203, 27350,
	27244, 2334, 10963, 10963, 520, 809, 248, 2334, 10963, 1551,
	2334, 2334, 2334, -1000, 1945, -1000, -1000, -1000, -1000, 1131,
	247, 11563, 11563, -1000, -1000, -1000, 6685, 12163, -1000, -1000,
	-1000, -1000, -1000, 245, 10963, -1000, 2918, -182, -9, -1000,
	-1000, 10963, -104, -116, -1000, -1000, 661, -1000, 10963, -1000,
	-30, 10963, 10963, 10963, 128, 127, -1000, 850, 244, 241,
	10963, -1000, -1000, 27157, 3778, 118, 1125, -131, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 117, 113, 27021, -131, 112,
	27569, -1000, 11563, 11563, 11563, 6685, 237, 110, 26320, -131,
	26830, 9136, 9136, 9136, 108, 26798, 10963, -131, 3158, 2811,
	2572, -17, -24, -28, 1525, -29, 106, 423, 422, 105,
	1104, -1000, -1000, -1000, -1000, 519, 518, 1224, -1000, 916,
	-1000, 471, -1000, 862, 10963, 12437, 236, 235, 772, -1000,
	1223, 987, 1222, 987, -1000, -19, 716, -1000, -1000, -1000,
	516, -1000, -1000, 515, 445, 1123, 573, -1000, 863, -1000,
	-1000, 582, -1000, -1000, 7285, 27214, -1000, 676, 1315, -33,
	-1000, -1000, -1000, 426, 15016, 14452, 8836, -39, -1000, -1000,
	-1000, 739, -1000, 420, 1518, 101, 960, 822, 729, 625,
	1504, 27214, -21, -21, -1000, -1000, -1000, -1000, -1000, 20002,
	1064, -1000, 17536, 231, 20002, 230, -1000, 229, -1000, -1000,
	227, 20002, 994, 405, 16700, -1000, 442, -1000, 100, 1092,
	1346, -1000, 14452, 1016, 1015, 14452, 1053, 853, 853, 853,
	-1000, 226, 314, 417, 4852, 10963, 18084, 852, 77, 98,
	1296, 10963, 2334, 2334, 10963, 11563, 11563, -1000, 2334, -1000,
	-1000, -1000, -1000, -1000, 1119, 224, 10963, 27872, 3850, 3749,
	-41, -1000, 8512, -25, -1000, 10963, -1000, 25956, -1000, -1000,
	271, 1249, -1000, 10963, 26692, 97, 8212, -1000, 26587, -35,
	-35, -1000, 1568, -1000, 15290, 450, 857, 25645, 27724, 27872,
	-1000, 10963, -1000, -1000, 1116, 10963, -1000, 27724, 27872, 11563,
	11563, 11563, 11563, 11563, 11563, 11563, 11563, 11563, 11563, 11563,
	11563, 11563, 11563, 11563, 11563, 11563, 11563, 11563, 993, 11563,
	1549, 1549, 1549, -40, 7888, -1000, 1108, 1116, 10963, 10963,
	27872, 96, 95, 94, -1000, 10963, -131, 10963, 10963, 10963,
	-1000, -1000, -1000, 91, -1000, 1474, -1000, -1000, -1000, -1000,
	1092, 20002, 20002, 20002, 1221, -1000, 2060, -1000, 25615, -51,
	-1000, 315, 1333, 10963, -1000, -1000, 223, 12437, 20002, -1000,
	1014, 1043, 492, 20002, -1000, 20002, -1000, 20002, 20002, 20002,
	20002, 20002, -1000, 16136, 553, 221, -1000, -59, -1000, -1000,
	202, 19, 676, -1000, -65, -1000, 408, -1000, 373, 371,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 90, -1000,
	-1000, 1068, -1000, 12437, 219, 20002, 17536, 1377, 12437, 870,
	999, 405, 16700, -1000, 564, -1000, 441, 10963, 10963, 1296,
	14452, 14452, 1643, 1012, 14452, -1000, -1000, -1000, -1000, 365,
	368, 361, 12711, 18084, -1000, 1467, 1100, -52, -1000, -1000,
	20002, 218, -1000, 417, 565, 2334, 3436, 3316, 10963, 27872,
	4536, -61, 10963, 10963, -1000, -63, -1000, 10963, 359, 27214,
	-1000, -1000, -1000, 27214, 10963, 1561, 10963, 89, 88, 86,
	-1000, -1000, -1000, 24934, 10963, 83, -1000, 82, 81, 27214,
	1108, 27214, -1000, -1000, 646, 646, 1549, 1549, 1549, 1549,
	864, 864, 955, 591, 1001, 1001, 1001, 269, 362, 362,
	1001, 1001, 1001, 1114, 1006, 217, 27475, 10963, -67, -1000,
	-1000, -1000, 27214, 27214, 79, -1000, -1000, -1000, -131, 147,
	25591, 25280, -1000, 78, 441, -1000, -1000, -1000, 20002, -1000,
	20002, -1000, 20002, 20002, 1094, 910, -1000, -1000, 1004, 214,
	11563, 20002, -1000, 778, 12437, 1317, 47, 20002, 1317, 25250,
	6361, -72, -73, 908, -1000, 903, 10963, -1000, 27872, 987,
	987, -1000, 513, 512, -1000, -1000, -95, 15862, 1566, 1256,
	20002, 1299, -1000, -1000, 213, -1000, -1000, -1000, 841, -74,
	12437, -80, 76, 19, -81, 20002, -1000, 405, 16700, -1000,
	1251, -1000, 20002, 27214, -131, -1000, 1643, -1000, 201, 10963,
	14452, -1000, -172, -1000, -82, -1000, 417, -86, -1000, 352,
	-179, -1000, 401, -1000, 417, 199, 20002, 18084, 10963, 10963,
	4536, -88, -1000, 2334, 2334, -1000, 25226, -1000, 27214, -1000,
	26587, -1000, -1000, -1000, 823, -1000, 4507, -1000, -1000, -1000,
	-1000, 11563, 1111, 189, 27872, 4193, -1000, -1000, 10963, -1000,
	-1000, -1000, -1000, -1000, 1393, -1000, -1000, 20002, 913, -1000,
	-1000, 10963, 27475, 188, 1064, 185, -1000, -1000, -1000, -1000,
	-1000, -1000, 1333, -30, -1000, 698, -1000, -1000, 27214, 1323,
	-1000, -1000, 20002, 20002, -1000, 182, 47, -93, -1000, 392,
	583, -94, 20002, -1000, -1000, 6058, 20002, 778, -99, -1000,
	1064, -1000, 778, 181, 16700, -1000, 994, -103, -1000, 1372,
	-1000, 20002, 27214, -1000, 417, -1000, 1461, 18084, 180, -1000,
	1100, -1000, 5161, 18084, 20002, -108, -1000, 2334, 2334, -1000,
	-1000, 70, 857, 1335, -1000, 2119, 11563, 27872, -117, -1000,
	4163, -1000, -1000, 1207, 3814, 965, 20002, -1000, 20002, 1317,
	66, 20002, 473, 20002, -1000, -1000, 10963, 1566, -1000, -1000,
	1564, 615, -1000, 426, -1000, 177, 1064, 778, -1000, 1064,
	12437, -1000, 999, 20002, 175, -119, 18084, -1000, -1000, 204,
	-1000, -1000, 1442, -1000, -135, -1000, -1000, 665, 10963, 2119,
	-142, -1000, -1000, 1200, -1000, 866, 872, 61, -144, -1000,
	-1000, 148, -1000, 10963, -1000, -35, -1000, -1000, 15016, -1000,
	20002, -1000, 1064, -1000, -151, -1000, -1000, -1000, -1000, -1000,
	417, 154, -1000, 60, 10663, 10663, -131, -1000, 20002, -1000,
	869, 868, 678, -1000, -1000, -1000, -1000, -1000, 965, 27214,
	54, -128, -170, -1000, 778, 18084, -1000, -1000, -1000, -1000,
	11863, 918, 658, 26010, -1000, -1000, -1000, 1266, -1000, 482,
	989, 989, 866, 1561, -1000, 969, 1064, -1000, 1397, -1000,
	-1000, -1000, -1000, -1000, -1000, 1425, -1000, -1000, 1017, -1000,
	-1000, -1000, -1000, -1000, -1000, 10363, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1882, 1879, 1403, 1620, 1878, 1877, 1543, 1875, 1874,
	1873, 1872, 1871, 1870, 104, 1536, 1534, 36, 1513, 1867,
	87, 1865, 1864, 1863, 102, 1859, 1858, 1857, 1855, 92,
	1854, 1853, 1479, 1397, 1850, 1846, 100, 1844, 16, 1843,
	75, 1841, 47, 133, 1860, 122, 1839, 1838, 1832, 34,
	95, 69, 1831, 61, 1826, 1825, 58, 38, 29, 18,
	1824, 85, 126, 1637, 45, 1823, 1812, 141, 1809, 26,
	39, 319, 143, 136, 124, 116, 1803, 1802, 1801, 1799,
	52, 1795, 3, 1792, 1787, 11, 63, 14, 1786, 23,
	17, 1784, 1776, 125, 1773, 68, 91, 1376, 31, 115,
	130, 1770, 73, 12, 77, 1767, 1766, 120, 50, 1765,
	41, 78, 135, 1763, 80, 145, 56, 40, 70, 96,
	1762, 1760, 1758, 81, 1756, 97, 83, 1755, 1754, 71,
	1753, 123, 128, 1752, 1750, 117, 1747, 1746, 1744, 146,
	1743, 1742, 152, 1740, 22, 53, 67, 5, 1386, 1370,
	107, 62, 37, 24, 1739, 2785, 956, 795, 42, 79,
	60, 55, 94, 49, 66, 134, 21, 1738, 1737, 110,
	1734, 1731, 1728, 1726, 1725, 82, 1724, 1723, 72, 132,
	15, 8, 20, 109, 51, 108, 86, 121, 139, 111,
	1722, 89, 112, 57, 59, 1720, 1717, 1136, 113, 1716,
	1710, 1707, 1059, 989, 629, 127, 1704, 1703, 595, 326,
	1702, 1701, 54, 1700, 144, 1696, 1695, 137, 131, 25,
	1691, 46, 28, 88, 1688, 98, 64, 0, 790, 735,
	1677, 118, 76, 1676, 1666, 1661, 1655, 35, 1, 9,
	6, 7, 4, 30, 27, 1652, 1651, 119, 32, 65,
	1650, 142, 1640, 1629, 1626, 44, 1625, 19, 1624, 13,
	1622, 1614, 10, 2, 1612, 1611, 138, 1603, 90, 1599,
	1382, 1595, 140, 1593, 1591, 1589, 48, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 51, 51, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 48,
	48, 53, 53, 53, 55, 55, 52, 52, 47, 47,
	5, 5, 225, 225, 226, 226, 37, 37, 41, 41,
	38, 39, 39, 40, 40, 6, 6, 6, 7, 7,
	7, 7, 7, 7, 14, 15, 15, 15, 15, 15,
	15, 15, 15, 99, 99, 98, 98, 101, 101, 16,
	16, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 193, 193, 192, 19, 167, 167, 20, 20,
	20, 20, 21, 124, 124, 22, 22, 22, 22, 23,
	28, 266, 266, 266, 270, 270, 271, 271, 272, 272,
	272, 272, 272, 272, 272, 268, 268, 27, 31, 31,
	31, 31, 31, 143, 139, 139, 141, 141, 141, 141,
	62, 138, 138, 138, 138, 140, 140, 140, 140, 218,
	217, 217, 223, 223, 223, 77, 77, 77, 77, 77,
	78, 78, 78, 216, 216, 216, 216, 224, 224, 224,
	224, 224, 224, 79, 79, 79, 222, 222, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	18, 267, 267, 269, 269, 33, 33, 10, 10, 11,
	11, 80, 80, 81, 81, 146, 146, 146, 146, 82,
	82, 54, 54, 54, 145, 235, 235, 236, 236, 236,
	236, 236, 236, 237, 237, 237, 237, 237, 237, 237,
	233, 233, 234, 231, 231, 232, 232, 232, 232, 273,
	273, 144, 144, 85, 85, 240, 240, 240, 240, 238,
	238, 238, 238, 238, 241, 239, 242, 242, 242, 242,
	242, 179, 179, 179, 35, 12, 60, 60, 13, 9,
	9, 128, 128, 89, 89, 184, 184, 184, 70, 70,
	49, 49, 49, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 129, 129, 130, 130, 25, 30,
	34, 34, 34, 34, 34, 275, 275, 66, 66, 66,
	66, 67, 67, 142, 142, 142, 142, 142, 61, 8,
	8, 56, 56, 57, 57, 58, 58, 59, 59, 276,
	276, 24, 24, 24, 73, 73, 135, 135, 135, 137,
	137, 136, 136, 136, 114, 114, 114, 36, 94, 94,
	103, 103, 104, 104, 190, 105, 105, 29, 29, 44,
	44, 42, 42, 42, 42, 42, 42, 43, 43, 45,
	45, 45, 45, 45, 45, 45, 248, 248, 248, 251,
	251, 247, 249, 249, 250, 250, 274, 274, 115, 115,
	115, 84, 83, 83, 87, 87, 86, 88, 88, 183,
	112, 112, 112, 112, 131, 132, 132, 133, 133, 134,
	134, 111, 111, 163, 163, 46, 46, 93, 93, 95,
	95, 153, 153, 153, 154, 154, 152, 152, 152, 152,
	185, 185, 185, 185, 185, 185, 185, 185, 264, 264,
	264, 265, 265, 182, 182, 186, 186, 186, 186, 186,
	186, 180, 180, 180, 180, 181, 181, 191, 191, 118,
	118, 118, 118, 116, 116, 117, 117, 187, 187, 187,
	187, 113, 113, 188, 188, 188, 147, 147, 194, 194,
	194, 212, 212, 92, 92, 92, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 196, 196, 196, 196, 198, 198, 198, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 211, 211, 211, 211, 211, 199, 199,
	206, 206, 207, 207, 208, 209, 200, 200, 201, 201,
	202, 203, 210, 210, 210, 210, 214, 214, 204, 204,
	204, 204, 204, 205, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 126, 126,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 157, 157, 157, 157, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 243, 243, 243,
	243, 243, 243, 243, 245, 245, 246, 246, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 252, 252, 253, 253, 255,
	255, 256, 256, 257, 258, 258, 258, 259, 260, 260,
	254, 254, 261, 261, 261, 262, 262, 263, 263, 263,
	263, 263, 169, 169, 169, 170, 170, 171, 177, 177,
	177, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 68, 68, 68,
	68, 68, 100, 100, 166, 166, 164, 164, 164, 168,
	168, 119, 119, 213, 213, 213, 213, 213, 213, 213,
	120, 120, 120, 127, 121, 121, 122, 122, 122, 122,
	122, 122, 160, 161, 123, 123, 123, 162, 162, 172,
	176, 176, 175, 174, 174, 173, 173, 150, 150, 151,
	151, 149, 148, 108, 108, 107, 107, 106, 106, 277,
	277, 178, 178, 109, 109, 110, 102, 102, 189, 189,
	189, 189, 96, 96, 75, 75, 97, 97, 71, 71,
	74, 74, 72, 72, 72, 72, 90, 90, 91, 91,
	69, 69, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 215, 215, 215, 165, 63, 63, 63,
	64, 64, 65, 65, 220, 220, 220, 221, 221, 221,
	221, 219, 219, 219, 219, 219, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 3, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 6, 1, 1, 1, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 4, 6, 7, 1, 1,
	1, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 5, 3, 0, 1, 1,
	1, 1, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 3,
	6, 3, 1, 5, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	2, 4, 2, 4, 4, 4, 4, 4, 4, 4,
	2, 3, 4, 3, 3, 4, 4, 2, 5, 5,
	2, 2, 0, 2, 0, 6, 6, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	7, 4, 6, 3, 1, 5, 6, 9, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -25, -27, -35, -36, 23,
	34, 222, 65, -8, -9, -10, -11, -12, -13, -250,
	93, 101, 123, 204, 100, 86, 117, 225, 233, -42,
	-44, 241, -143, 242, 35, 251, 59, 96, 227, 220,
	221, 274, 67, -248, -45, -43, 322, 297, 303, 236,
	-46, 259, 289, 325, 259, 132, 79, 292, -266, -97,
	259, 79, -72, -63, 315, 4, -227, -229, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 58, 59, 60,
	62, 64, 65, 66, 69, 70, 77, 78, 80, 82,
	86, 88, 92, 93, 95, 100, 101, 107, 108, 111,
	113, 118, 123, 124, 125, 126, 133, 136, 138, 131,
	146, 148, 149, 152, 151, 156, 159, 162, 164, 165,
	166, 169, 167, 171, 172, 174, 173, 179, 181, 182,
	184, 187, 190, 193, 196, 197, 198, 199, 202, 204,
	206, 207, 208, 210, 211, 213, 214, 215, 216, 217,
	220, 218, 219, 221, 222, 223, 225, 227, 228, 230,
	232, 233, 234, 235, 238, 239, 241, 242, 244, 247,
	250, 251, 252, 255, 253, 249, 258, 260, 261, 262,
	263, 270, 274, 275, 276, 277, 280, 281, 282, 284,
	286, 287, 288, 293, 298, 299, 300, 301, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 50, 51, 52,
	54, 81, 83, 84, 99, 102, 103, 109, 119, 121,
	127, 128, 137, 139, 140, 141, 143, 154, 168, 178,
	180, 191, 195, 201, 203, 209, 229, 237, 245, 246,
	254, 256, 265, 266, 267, 271, 272, 289, 290, -266,
	-71, -63, 79, 88, 136, 282, 281, 79, 132, 259,
	292, -17, 322, -29, -7, -15, -4, -24, -36, -14,
	-32, -18, -33, -16, 23, -219, 4, -227, -229, -228,
	-230, 56, 68, 116, 135, 129, 145, 147, 155, 157,
	170, 192, 194, 226, 243, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 48, 49, 53, 55, 57,
	63, 67, 71, 72, 73, 74, 75, 76, 85, 87,
	89, 90, 91, 94, 96, 98, 104, 105, 106, 112,
	114, 115, 117, 120, 122, 130, 132, 134, 142, 144,
	150, 153, 158, 160, 161, 175, 176, 177, 183, 185,
	186, 188, 189, 200, 205, 212, 224, 236, 240, 248,
	257, 259, 264, 268, 269, 273, 278, 279, 283, 285,
	291, 292, 294, 295, 296, 297, -63, -63, -63, 204,
	22, -270, 22, -271, -272, 67, 93, 117, 236, 136,
	88, 281, -270, -67, 233, -63, -139, 159, 239, 229,
	270, -140, -138, -218, 265, 169, -98, -63, 4, 22,
	79, 58, 80, 118, 132, 133, 63, 64, 149, 260,
	265, 270, 67, 284, 262, -275, 270, 270, -275, -275,
	-66, 270, 268, -67, -218, -274, 259, 259, 283, 292,
	-128, 79, 279, -43, -45, -44, -86, -87, 278, 142,
	98, 189, -42, -44, -248, -251, 210, -247, -63, -251,
	-83, -84, 22, 90, 326, -187, -71, 186, -110, 322,
	-3, -187, 127, -71, -74, 127, -71, -63, -187, 127,
	268, 326, -97, -90, -63, -149, -148, 324, 115, 115,
	322, -107, -108, -148, -149, 115, 144, 144, -188, -187,
	-63, 127, -75, 127, -74, -99, 127, -98, -99, 127,
	-193, -192, -221, 4, -227, -229, -228, 289, 259, 132,
	-167, 322, -124, 322, -63, 22, 185, 326, 185, -63,
	-139, 52, -139, 322, -141, -61, -62, 146, 206, 268,
	307, 115, 301, -79, 5, 85, -101, 324, 115, -267,
	185, 115, 115, 115, 115, 115, 115, 301, 146, 206,
	232, 259, 292, 115, -142, -61, -62, -142, 268, -67,
	-113, -187, -98, 127, -63, -98, 132, -63, 127, -86,
	-87, -112, -131, -132, 158, 183, -115, 22, 90, -115,
	-115, 44, 323, 323, 326, -251, -91, 322, -102, -189,
	-155, 315, -157, 313, 314, 319, 175, 302, -169, -159,
	-172, 99, 229, 322, -71, -158, 327, 9, -245, -44,
	29, -170, -171, 48, -63, 7, 8, 5, 6, -69,
	-196, -165, -205, 273, 104, 177, -243, -244, 4, -227,
	-220, -197, -207, -201, -204, 143, 56, 72, 75, 73,
	76, 240, 283, 49, 28, 102, 103, 195, 201, 256,
	271, 272, 127, 178, 128, 54, 119, 154, 92, 37,
	39, 41, 42, 50, 51, 81, 83, 84, 109, 137,
	139, 140, 141, 180, 209, 245, 254, 266, 267, 290,
	-228, -208, -209, -202, -203, -210, -102, -110, 315, -71,
	322, -109, -178, -155, 85, -51, 218, -50, 21, 23,
	93, 287, 99, 249, 249, 218, 99, 327, 218, 218,
	99, -225, -222, 9, -221, 5, -72, 326, -219, 315,
	-226, -225, 252, 323, -96, -71, -108, -188, -73, -71,
	-73, 241, -63, 30, 99, -53, 326, 47, 223, 99,
	-53, 326, 99, -53, 99, 323, 326, -187, 127, -74,
	30, -166, -194, -195, -197, -206, -200, -204, -205, 40,
	46, 45, 263, 168, 237, 246, 38, 184, 138, 137,
	139, 140, 141, 245, 37, 209, 109, 92, 84, 83,
	180, 42, 41, -208, -209, -202, -203, 81, 266, 267,
	143, 39, 51, 50, 290, 254, -100, -155, -266, -272,
	-266, 30, -100, 326, 326, 156, -78, 162, 174, 124,
	-217, 85, -223, -216, -179, 9, 273, 104, 185, -222,
	8, 314, -215, 7, 313, -217, 85, 70, -224, 5,
	4, -165, -179, 85, 159, -205, 324, -219, -218, -269,
	112, -266, -218, -218, -218, -218, -218, -63, 156, -218,
	-218, 259, 132, 326, 326, -67, -53, 326, 322, -85,
	175, -249, 297, -85, 322, -64, 127, -63, -249, 175,
	-112, -132, -131, -133, -155, 22, -155, -157, -43, -43,
	-43, -88, -183, -155, -247, 30, -90, -93, 326, 115,
	10, 11, 55, 33, 313, 314, 315, 316, 110, 317,
	310, 311, 312, 309, 305, 306, 307, 61, 163, 231,
	13, 14, 15, 26, 188, 157, 302, 129, 243, 319,
	16, 17, 18, 145, 36, 130, -68, 30, 4, -76,
	-155, -155, -155, -155, -155, 194, -106, -150, 320, -44,
	322, -44, -155, -100, 7, -44, -164, 320, -173, -155,
	-107, 322, 5, 322, 5, -252, 298, 112, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 203, -214, 293, -214, -214,
	-198, 322, -198, -199, 322, -198, 299, 303, 322, -93,
	-71, 326, 323, 326, 268, -129, 63, 57, -145, 127,
	57, -231, -63, 63, -232, 53, 279, 205, 114, -129,
	63, -129, 63, 63, -187, 33, 33, 268, -74, -63,
	268, 268, -187, -191, 304, -63, -191, 326, 115, 323,
	326, -147, 295, -135, -29, 322, 85, 30, -135, -103,
	-104, -190, -105, -71, 322, -63, -63, -74, -75, -98,
	-99, -99, -17, -192, 99, -20, -29, -24, -36, -14,
	323, 326, -92, 29, -125, 322, 300, 166, 82, 125,
	165, -126, 235, 323, 326, 268, 115, 270, 323, -62,
	-61, -77, 208, 247, 219, 238, 326, 8, 7, 7,
	-219, -268, -63, -71, -74, -62, -61, -187, -80, -90,
	-81, -63, -146, -145, -233, -234, -231, 132, 279, 105,
	30, 99, -60, 199, 30, 185, 175, -56, 261, 99,
	-134, 229, 230, 326, -49, 31, 89, 322, 323, -147,
	-189, -95, -185, 320, -187, -71, -44, -186, 322, -212,
	-194, -211, 214, 215, 213, 217, 216, -194, -98, 265,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, 157, 129, 243, 36, 130, -155, 268, -155,
	-155, -155, -155, 167, 175, 177, 273, 104, 280, 90,
	181, -277, 257, 32, -162, -44, 322, -177, 27, 248,
	22, -219, -169, 229, 322, -150, -155, -151, -100, 323,
	323, 326, -100, -168, 321, -164, -176, -175, 294, 323,
	-100, 291, 22, 90, 315, 7, -125, -253, 107, 120,
	322, 323, 323, -155, -155, -119, -213, -100, 4, 300,
	166, 82, 125, 165, 235, -119, -120, -155, -100, -121,
	-156, -157, 313, 314, 319, 322, 229, -122, -155, -100,
	-155, 43, 153, 269, -123, -155, 115, -100, -155, -155,
	-155, -100, -100, -100, 322, 7, 7, 265, 265, 7,
	-147, 323, -178, -50, -71, -63, -63, 175, -145, 127,
	-55, 175, -194, -63, 322, 322, 148, 148, -63, -63,
	127, -63, 127, -63, -63, -51, 218, -29, -29, -63,
	218, -63, -71, 218, -37, 126, 181, -40, 297, -225,
	252, 115, -71, -114, 224, -155, -114, -137, 185, -96,
	289, -63, -114, -94, 326, 115, 307, -96, -53, -53,
	-53, -187, -194, 320, 320, 7, 268, 268, 268, 268,
	322, -155, -268, -268, -61, 277, 60, 208, -223, 326,
	323, 323, 326, -64, 132, -64, -29, -98, 5, -29,
	-71, 99, -57, 95, -276, 307, -63, -183, -20, -111,
	120, -191, 326, 68, -118, 147, 170, 116, 155, 226,
	135, 7, 101, -152, 327, 322, -182, 303, -44, -186,
	-185, 301, -155, -155, 268, -277, 257, -162, -155, 167,
	177, 273, 104, 280, 90, 181, 115, 322, -156, -156,
	-100, -159, 322, -100, 321, 330, 323, -155, 321, 321,
	326, -174, -175, 94, -155, -87, 326, -86, -155, -100,
	-100, 323, 323, -258, 193, 322, 322, -155, 30, 326,
	323, 115, 323, 323, -127, 200, 323, 10, 11, 313,
	314, 315, 316, 110, 317, 310, 311, 312, 309, 305,
	306, 307, 61, 163, 231, 13, 14, 15, 145, 130,
	-156, -156, -156, -100, 322, 323, -160, -161, 115, 112,
	30, -123, -123, -123, 323, 115, -100, 326, 326, 326,
	323, 323, 323, 7, 323, 326, 323, 301, 301, 323,
	-111, 268, 268, 99, 175, 286, -235, -232, -155, -89,
	-184, -63, -246, 322, -243, -244, -69, 322, 322, -48,
	93, 241, -130, 99, -53, 99, -53, 268, -129, 63,
	268, 268, -40, 115, 258, 187, 252, -102, 176, -114,
	62, 323, -147, -104, -95, -178, 323, 321, 7, 7,
	323, 166, 125, 165, -126, 165, -126, -126, 7, -63,
	-82, 131, -146, 322, -64, 322, 322, -85, 322, -63,
	-58, 152, -276, -222, -249, 323, -163, 122, 44, -185,
	147, 147, -185, -118, 147, -116, 192, -116, -116, -264,
	322, -17, 322, -182, -219, 320, 328, -100, -181, -180,
	30, -63, 190, 323, -155, -155, -156, -156, 115, 322,
	-155, -166, 26, 26, 323, -100, 323, 326, -151, -155,
	323, -164, 96, -155, 264, 323, 291, -87, -87, -87,
	5, -259, -63, 322, 295, -86, 323, -212, -194, -155,
	-160, -155, -212, -194, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, 90, 175, 181, -156, 326, -100, 323,
	-161, -160, -155, -155, -194, 323, 323, 323, -100, -155,
	-155, -155, 323, 7, -163, -63, -63, -145, 99, -236,
	63, -237, 55, 105, 67, 175, 177, 279, 205, 53,
	85, 212, 323, 323, 326, -70, -107, 55, -70, -155,
	322, -89, -90, 175, 85, 175, 85, 78, 275, -63,
	-63, -71, -63, -63, -63, -71, -226, 265, 322, -136,
	322, 185, -29, -114, 307, 321, 321, 323, 130, -89,
	322, -90, -80, 30, -89, 185, -59, 151, -276, -222,
	-56, -255, 296, -155, -100, -185, -185, -117, 285, 185,
	147, -185, 321, 323, -265, 7, 321, -193, -181, 7,
	-154, -153, 113, 173, 323, -63, 322, -182, 26, 26,
	-155, -166, 323, -155, -155, 323, -155, 321, -155, 5,
	-155, 323, 323, 323, -260, -63, -155, 323, 323, 323,
	-161, 115, 90, 181, 322, -155, 323, 323, 326, 323,
	323, 323, -255, -145, -63, -98, -63, 105, 127, 177,
	148, 322, -156, -71, -144, -273, 66, 255, -184, -49,
	-98, -49, 323, -100, 323, 323, 177, 177, -155, -194,
	-53, -53, 268, 268, -158, -69, -63, -39, -38, 5,
	91, -90, 63, -110, -44, 322, 196, 323, -89, 323,
	323, -29, 323, -71, -276, -222, -57, -256, -257, -63,
	-117, 322, -155, -185, -152, 323, 326, -182, 323, 321,
	326, 329, 307, -182, 322, -90, -180, -155, -155, 323,
	323, -87, -254, 198, 323, -156, 115, 322, -166, 323,
	-155, -237, -64, 175, -155, -65, 322, -82, 322, -70,
	-87, 212, -52, 55, -63, -63, 322, 326, 323, -41,
	307, 281, 176, 323, -63, -63, -144, 323, -82, -144,
	322, -222, -58, 326, 30, -90, -182, 7, -181, -17,
	-153, -219, 320, -181, -90, 323, 323, -87, 44, -156,
	-166, 323, 323, 99, 323, -240, 164, -63, -90, -49,
	323, -71, -47, 285, -98, -100, -38, 5, 241, -147,
	322, -82, -144, -82, -89, -59, -257, -259, 323, -180,
	321, 7, 323, -261, 207, 230, -100, 323, 105, -238,
	-241, -239, 185, 116, 197, 244, 323, 323, -85, -155,
	-87, -103, -90, -82, 323, -182, 321, 323, -262, -263,
	36, 276, 70, -155, -262, -63, -239, 185, -241, 185,
	281, 88, -240, 323, -147, 323, -144, -181, -263, 202,
	111, 229, 202, 111, -242, 172, 223, 47, 241, -242,
	-238, -54, 47, 223, -82, 26, 20, 177, 85, -263,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 415, 0, 0, 0, 0, 0, 0, 0, 387,
	-2, 0, 152, 0, 336, 0, 336, 336, 340, 0,
	0, 417, 302, 414, -2, 425, 0, 0, 0, 423,
	401, 0, 0, -2, 0, 0, 0, 0, 0, 131,
	0, 946, 876, 882, 883, 907, 908, 909, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 0,
	0, 878, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 0, 220, 921, 922, 923, 924,
	925, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 117, 124, 125, 998,
	127, 0, 134, 135, 136, 138, 139, 140, 141, 142,
	143, 144, 0, 329, 1020, 342, 148, 975, 1024, 1095,
	1040, 155, 165, 0, 1101, -2, 169, 95, 198, 199,
	200, 0, 202, 222, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 217, 0, 347, 335, 347, 332, 333,
	334, 337, 0, 328, 147, 0, 416, 0, 0, 0,
	0, 0, 301, -2, 397, 398, -2, 0, 420, 420,
	420, 0, 0, 398, 0, 406, 1002, 409, 889, 407,
	0, 0, 422, 421, 0, 402, 497, 0, 445, 0,
	2, 0, 1079, 497, 0, 1079, 881, 0, 0, 1079,
	0, 0, 132, 133, 886, 884, 885, 0, 0, 0,
	0, 879, 855, 853, 854, 0, 0, 0, 0, 503,
	85, 1079, 53, 1079, 874, 53, 1079, 93, 53, 1079,
	0, 112, 114, 917, 918, 919, 920, 1106, 0, 0,
	0, 0, 122, 0, 126, 128, 0, 0, 0, 341,
	149, 1068, 151, 0, 154, 156, 157, 0, 0, 0,
	0, 0, 0, 168, 193, 194, 96, 0, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 213,
	214, 0, 0, 0, 330, 343, 344, 331, 0, 339,
	53, 501, 274, 1079, 413, 274, 911, 413, 1079, -2,
	0, 393, 432, 433, 0, 0, 0, 418, 419, 0,
	0, 0, 389, 390, 0, 408, 0, 0, 448, 866,
	870, 871, 600, 0, 0, 0, 0, 0, 0, 692,
	694, 1073, 1095, 0, 696, 697, 0, 699, 701, 702,
	0, 705, 706, 846, 878, 892, 893, 894, 895, 0,
	0, 898, 0, 900, 901, 902, 746, 715, -2, -2,
	890, 532, 533, 534, 535, -2, 1108, 719, 721, 723,
	724, 725, 726, 0, 1057, 1074, 1075, 1091, 1092, 1100,
	1104, 1105, 1079, 1088, 1080, 1069, 1077, 1086, 951, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	916, 562, 563, 568, 569, 571, 448, 446, 498, 499,
	0, 0, 863, 861, 862, 30, 325, 32, 0, 325,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 488, 62, 63, 196, 197, 877, 0, 851, 852,
	488, 64, 75, 0, 0, 872, 856, 507, 0, 364,
	0, 0, 504, 0, 0, 87, 0, 51, 52, 0,
	89, 0, 0, 91, 0, 415, 0, 0, 1079, 0,
	415, 0, 804, 515, 516, 517, 518, 519, 597, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 539,
	540, 541, 542, 543, 544, 545, 559, 0, 538, 538,
	538, 551, 552, 560, 561, 566, 567, 578, 579, 581,
	583, 577, 577, 577, 574, 575, 0, 802, 0, 137,
	0, 0, 0, 0, 0, 0, 160, 180, 181, 182,
	161, 163, 170, 172, 173, 174, 183, 184, 185, 186,
	291, 0, 293, 903, 0, 162, 164, 166, 167, 187,
	188, 189, 190, 191, 192, 0, 0, 97, 201, 203,
	0, 221, 204, 205, 206, 207, 208, 209, 212, 215,
	216, 0, 0, 0, 0, 338, 294, 0, 232, 0,
	0, 297, 412, 0, 0, 0, 1079, 910, 352, 0,
	396, 430, 431, 434, 437, 438, 435, 600, 403, 404,
	405, 426, 427, 312, 410, 0, 0, 507, 0, 0,
	0, 0, 0, 0, 781, 782, 783, 784, 785, 786,
	789, 790, 787, 788, 791, 792, 793, 0, 0, 0,
	794, 795, 796, 0, 0, 798, 0, 800, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 0, 869, 797,
	605, 606, 607, 629, 630, 0, 693, 857, 850, 695,
	0, -2, 802, 0, 698, 703, 704, 0, 0, 845,
	-2, 0, 897, 0, 597, 748, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 565, 576, 573, 572,
	549, 0, 548, 546, 0, 550, 0, 0, 0, 507,
	0, 0, 865, 0, 0, 0, 0, 324, 34, 1079,
	0, 55, 0, 0, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 67, 0, 887, 74, 0, 0, 0,
	0, 376, 0, 376, 366, 0, 0, 0, 376, 379,
	380, 382, 383, 0, 0, 505, 86, 875, 53, 94,
	53, 53, 100, 113, 0, 115, 118, 119, 120, 121,
	116, 0, 508, 510, 520, 0, 584, 585, 586, 587,
	588, 589, 598, 123, 0, 0, 0, 0, 153, 158,
	159, 348, 0, 177, 0, 179, 0, 292, 905, 904,
	98, 223, 145, 218, 219, 345, 346, 502, 0, 0,
	231, 886, 233, 235, 236, 237, 238, 911, 0, 911,
	0, 0, 295, 0, 0, 0, 0, 354, 360, 0,
	436, 439, 440, 0, 429, 310, 311, 415, 888, 442,
	867, 488, 449, 0, 459, 497, 474, 464, 0, 601,
	511, 512, 553, 554, 555, 556, 557, 602, 603, 0,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	-2, -2, -2, 621, 622, 623, -2, -2, -2, 627,
	628, -2, 799, 801, 0, 860, 0, -2, 0, 637,
	-2, -2, -2, 641, 0, 643, 646, 648, 650, 0,
	0, 0, 0, 859, 660, 837, 0, 0, 778, 779,
	780, 868, 645, 0, 0, 858, 849, 0, 0, -2,
	700, 0, 0, 0, 808, 809, 844, 840, 0, 707,
	425, 0, 0, 0, 0, 0, 906, 756, 0, 0,
	0, 720, 722, 0, 0, 0, 0, 812, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 802, 822, 0,
	0, 663, 0, 0, 0, 0, 1095, 0, 802, 830,
	0, 0, 0, 0, 0, 802, 0, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 500, 864, 33, 314, 0, 0, 0, 36, 1079,
	44, 0, 246, 0, 0, 0, 0, 0, 327, 45,
	1079, 53, 1079, 53, 46, 31, 325, 225, 226, 318,
	0, 313, 316, 0, 74, 0, 0, 61, 0, 65,
	76, 0, 873, 84, 0, 506, 361, 376, 0, 0,
	368, 365, 363, 507, 0, 0, 0, 0, 88, 90,
	92, 0, 805, 0, 0, 0, 0, 0, 0, 0,
	0, 803, 129, 130, 150, 175, 176, 178, 171, 0,
	240, 273, 0, 0, 911, 0, 229, 274, 296, 298,
	0, 0, 356, 360, 0, 359, 413, 428, 0, 444,
	0, 447, 0, 0, 0, 0, 0, 494, 494, 494,
	492, 468, 415, 474, 0, 0, 486, 0, -2, 464,
	0, 0, -2, -2, 0, 0, 0, 661, -2, 642,
	644, 647, 649, 651, 0, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 847, 850, -2, 803, 806, 807,
	0, 0, 841, 0, 0, 0, 0, 424, 425, 425,
	425, 713, 0, 714, 0, 0, 0, 0, 0, 0,
	729, 0, 730, 731, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	666, 667, 668, 0, 0, 733, 828, 829, 0, 0,
	0, 0, 0, 0, 738, 0, 835, 0, 0, 0,
	742, 743, 744, 0, 536, 0, 558, 580, 582, 570,
	444, 0, 0, 0, 0, 54, 244, 263, 0, 0,
	303, 309, 309, 0, 716, 717, 0, 0, 0, 38,
	0, 0, 0, 0, 42, 0, 48, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 77, 374, 375, 362,
	373, 0, 376, 381, 378, 384, 0, 513, 0, 0,
	521, 590, 591, 592, 593, 594, 595, 596, 0, 146,
	227, 0, 234, 0, 0, 0, 232, 0, 0, 0,
	358, 360, 0, 351, 352, 411, 750, 0, 0, 450,
	0, 0, 0, 0, 0, 489, 493, 490, 491, 0,
	0, 0, 0, 486, 456, 0, 0, 0, 463, 485,
	0, 484, 473, -2, 604, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 838, 0, 773, 0, 0, 849,
	-2, 810, 839, 843, 0, 708, 0, 0, 0, 0,
	899, 754, 755, 759, 0, 0, 718, 0, 0, 811,
	821, 823, 664, 665, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, -2, -2, -2, 682, 683, 684,
	-2, -2, -2, 0, 0, 0, 824, 0, 0, 776,
	826, 827, 832, 833, 0, 735, 736, 737, 834, 0,
	0, 0, 564, 0, 750, 320, 322, 35, 0, 245,
	0, 248, 0, 0, 0, 0, 254, 255, 0, 0,
	0, 0, 265, 272, 0, 312, 891, 0, 312, 0,
	0, 0, 0, 0, 50, 0, 0, 326, 0, 53,
	53, 315, 0, 0, 319, 317, 66, 0, 0, 0,
	0, 0, 367, 377, 0, 514, 509, 599, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 360, 0, 353,
	354, 399, 0, 443, 441, 476, 0, 478, 0, 0,
	0, 480, 459, 469, 0, 471, 474, 0, 461, 0,
	0, 454, 0, 453, 474, 482, 0, 0, 0, 0,
	-2, 0, 654, -2, -2, 772, 803, 848, 842, 896,
	425, 709, 711, 712, 761, 758, 0, 745, 727, 728,
	820, 0, 0, 0, 0, 803, 775, 734, 0, 740,
	741, 537, 400, 37, 0, 249, 250, 911, 0, 253,
	256, 0, 258, 913, 240, 0, 269, 270, 304, 305,
	308, 306, 309, 425, 267, 0, 39, 40, 49, 57,
	41, 47, 0, 0, 487, 0, 0, 0, 71, 69,
	0, 0, 0, 385, 386, 0, 0, 272, 0, 262,
	240, 230, 272, 0, 0, 355, 356, 749, 751, 0,
	477, 0, 496, 479, 474, 470, 0, 486, 415, 457,
	0, 458, 0, 486, 0, 0, 465, -2, -2, 655,
	774, 0, 425, 0, 747, -2, 0, 0, 0, 777,
	0, 247, 251, 0, 0, 278, 0, 266, 0, 312,
	0, 0, 59, 0, 321, 323, 0, 0, 73, 70,
	0, 0, 370, 507, 372, 0, 240, 272, 228, 240,
	0, 357, 358, 0, 0, 0, 0, 472, 466, 0,
	455, 451, 0, 462, 0, 483, 710, 764, 0, -2,
	0, 690, 739, 0, 257, 283, 0, 0, 0, 307,
	708, 274, 43, 0, 56, 425, 72, 68, 0, 371,
	0, 260, 240, 299, 0, 350, 752, 753, 495, 460,
	474, 0, 481, 0, 0, 0, 760, 691, 0, 259,
	279, 280, 0, 275, 276, 277, 912, 271, 278, 58,
	0, 507, 0, 261, 272, 486, 452, 757, 762, 765,
	-2, 1043, 943, 0, 763, 252, 281, 0, 282, 0,
	0, 0, 283, 0, 369, 243, 240, 467, 0, 767,
	768, 769, 770, 771, 284, 0, 287, 288, 0, 285,
	268, 239, 241, 242, 300, 0, 286, 289, 290, 766,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 311, 3, 317, 312, 3,
	322, 323, 315, 313, 326, 314, 324, 316, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 330, 325,
	305, 307, 306, 3, 327, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 320, 3, 321, 310, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 328, 309, 329, 319,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 308, 57648, 318, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:783
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:789
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			return unimplemented(sqllex)
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:912
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = nil
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = DropCascade
		}
	case 52:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropRestrict
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplemented(sqllex)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 67:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = ""
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1062
		{
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{ /* SKIP DOC */
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			return unimplemented(sqllex)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = Low
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = Normal
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = High
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			return unimplemented(sqllex)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			return unimplemented(sqllex)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1575
		{
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1663
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1667
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1775
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = DropDefault
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1997
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2006
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2008
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2011
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2019
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2053
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = true
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = false
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2128
		{
			return unimplemented(sqllex)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2129
		{
			return unimplemented(sqllex)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2133
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = Ascending
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = Descending
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2187
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2188
		{
			return unimplemented(sqllex)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = false
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2202
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2245
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.str = ""
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.str = ""
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.str = ""
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2368
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2432
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			return unimplemented(sqllex)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 377:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2466
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2467
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2695
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2699
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2700
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2703
		{
			return unimplemented(sqllex)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2707
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			return unimplemented(sqllex)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2711
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = true
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = false
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = false
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = true
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &From{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2933
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2978
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2995
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = nil
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = true
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = false
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.str = astFullJoin
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.str = astLeftJoin
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.str = astRightJoin
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.str = astInnerJoin
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3273
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3274
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3288
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3297
		{
			return unimplemented(sqllex)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3365
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = nil
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3510
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3542
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3582
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = year
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = month
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = day
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = hour
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = minute
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = month
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = hour
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = minute
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = minute
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = nil
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = second
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3677
		{
			return unimplemented(sqllex)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplemented(sqllex)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			return unimplemented(sqllex)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4119
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4172
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4173
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4196
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4217
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4236
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4266
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4310
		{
			return unimplemented(sqllex)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4311
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = Window(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4408
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4410
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4413
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4414
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4420
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4421
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4422
		{
			return unimplemented(sqllex)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4423
		{
			return unimplemented(sqllex)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			return unimplemented(sqllex)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = Any
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = Some
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = All
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = Plus
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = Minus
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = Mult
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = Div
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = FloorDiv
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Mod
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = Bitand
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = Bitor
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = Bitxor
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = Bitxor
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = LT
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = GT
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = EQ
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = LE
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = GE
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = NE
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = Like
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = NotLike
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = ILike
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = NotILike
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4788
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4789
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4951
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4987
		{
			return unimplemented(sqllex)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = DNull
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.str = ""
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
