// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5828

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	354, 31,
	-2, 494,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	1, 467,
	197, 467,
	241, 467,
	350, 467,
	352, 467,
	354, 467,
	-2, 477,
	-1, 105,
	1, 470,
	197, 470,
	241, 470,
	350, 470,
	352, 470,
	354, 470,
	-2, 476,
	-1, 117,
	1, 31,
	354, 31,
	-2, 494,
	-1, 495,
	122, 1075,
	293, 1075,
	336, 1075,
	353, 1075,
	-2, 0,
	-1, 506,
	1, 207,
	354, 207,
	-2, 1080,
	-1, 529,
	111, 504,
	170, 504,
	195, 504,
	-2, 473,
	-1, 532,
	111, 503,
	170, 503,
	195, 503,
	-2, 471,
	-1, 656,
	351, 1007,
	-2, 1000,
	-1, 657,
	351, 1008,
	-2, 1001,
	-1, 663,
	5, 674,
	351, 674,
	-2, 1205,
	-1, 688,
	5, 633,
	-2, 1175,
	-1, 689,
	5, 668,
	351, 668,
	-2, 1177,
	-1, 690,
	5, 643,
	-2, 1178,
	-1, 691,
	5, 642,
	-2, 1179,
	-1, 692,
	5, 668,
	351, 668,
	-2, 1182,
	-1, 693,
	5, 668,
	351, 668,
	-2, 1183,
	-1, 694,
	5, 669,
	-2, 1186,
	-1, 695,
	5, 625,
	-2, 1187,
	-1, 696,
	5, 625,
	-2, 1188,
	-1, 697,
	5, 650,
	-2, 1192,
	-1, 698,
	5, 635,
	-2, 1193,
	-1, 699,
	5, 636,
	-2, 1194,
	-1, 700,
	5, 626,
	-2, 1199,
	-1, 701,
	5, 627,
	-2, 1200,
	-1, 702,
	5, 628,
	-2, 1201,
	-1, 703,
	5, 629,
	-2, 1202,
	-1, 704,
	5, 630,
	-2, 1203,
	-1, 705,
	5, 631,
	-2, 1204,
	-1, 706,
	5, 625,
	-2, 1209,
	-1, 707,
	5, 634,
	-2, 1214,
	-1, 708,
	5, 632,
	-2, 1217,
	-1, 709,
	5, 666,
	351, 666,
	-2, 1219,
	-1, 710,
	5, 670,
	-2, 1222,
	-1, 711,
	5, 672,
	-2, 1223,
	-1, 712,
	5, 665,
	351, 665,
	-2, 1228,
	-1, 797,
	111, 503,
	170, 503,
	195, 503,
	-2, 474,
	-1, 927,
	102, 477,
	111, 477,
	151, 477,
	170, 477,
	195, 477,
	201, 477,
	304, 477,
	-2, 793,
	-1, 936,
	351, 984,
	-2, 972,
	-1, 1201,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 709,
	-1, 1202,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 710,
	-1, 1203,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 711,
	-1, 1207,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 715,
	-1, 1208,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 716,
	-1, 1209,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 717,
	-1, 1212,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 722,
	-1, 1218,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 724,
	-1, 1220,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 728,
	-1, 1221,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 729,
	-1, 1222,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 730,
	-1, 1223,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 731,
	-1, 1249,
	206, 866,
	-2, 869,
	-1, 1286,
	122, 906,
	351, 1007,
	-2, 1000,
	-1, 1287,
	122, 907,
	-2, 1171,
	-1, 1288,
	122, 908,
	-2, 1079,
	-1, 1289,
	122, 909,
	-2, 1043,
	-1, 1290,
	122, 910,
	-2, 1060,
	-1, 1291,
	122, 911,
	-2, 1078,
	-1, 1292,
	122, 912,
	-2, 1130,
	-1, 1476,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 723,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 725,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 726,
	-1, 1500,
	206, 865,
	-2, 868,
	-1, 1699,
	102, 477,
	111, 477,
	151, 477,
	170, 477,
	195, 477,
	201, 477,
	304, 477,
	-2, 560,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 727,
	-1, 1713,
	154, 0,
	-2, 743,
	-1, 1723,
	206, 867,
	-2, 870,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 770,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 771,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 772,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 776,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 777,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 778,
	-1, 1890,
	1, 561,
	70, 561,
	102, 561,
	111, 561,
	123, 561,
	127, 561,
	129, 561,
	142, 561,
	151, 561,
	158, 561,
	167, 561,
	170, 561,
	182, 561,
	195, 561,
	197, 561,
	201, 561,
	241, 561,
	243, 561,
	304, 561,
	312, 561,
	323, 561,
	324, 561,
	333, 561,
	350, 561,
	352, 561,
	354, 561,
	355, 561,
	-2, 560,
	-1, 1897,
	154, 0,
	-2, 744,
	-1, 1900,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 747,
	-1, 1901,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 749,
	-1, 2028,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 748,
	-1, 2029,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 750,
	-1, 2036,
	154, 0,
	-2, 779,
	-1, 2119,
	154, 0,
	-2, 780,
	-1, 2203,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1174,
}

const sqlPrivate = 57344

const sqlLast = 31622

var sqlAct = [...]int{

	657, 2211, 1810, 2202, 2176, 2249, 2061, 2212, 1339, 2213,
	1331, 1886, 2093, 1092, 533, 1742, 1970, 2201, 371, 2014,
	2026, 1956, 1833, 58, 1816, 1098, 1941, 1640, 1817, 1694,
	2001, 1885, 1458, 655, 723, 1379, 126, 126, 1995, 126,
	1642, 1004, 1402, 1383, 633, 607, 367, 23, 1378, 1864,
	373, 126, 126, 126, 1697, 1566, 876, 1873, 126, 647,
	1427, 1391, 1685, 1340, 1094, 868, 126, 1457, 1382, 1592,
	858, 1511, 989, 1180, 1565, 1272, 932, 1247, 1472, 654,
	540, 104, 1463, 1175, 357, 1118, 1413, 1680, 1146, 1144,
	126, 359, 768, 1409, 627, 1005, 1082, 1418, 978, 1257,
	548, 1235, 877, 505, 1232, 1315, 859, 1386, 1460, 557,
	767, 1266, 126, 126, 551, 963, 126, 967, 745, 737,
	1312, 126, 126, 735, 552, 1333, 733, 1283, 923, 104,
	626, 538, 596, 1166, 105, 118, 800, 799, 801, 106,
	492, 1080, 543, 784, 649, 501, 481, 1957, 982, 122,
	503, 729, 594, 805, 560, 783, 2104, 613, 499, 2105,
	991, 1692, 1499, 2235, 23, 1332, 873, 991, 537, 991,
	2225, 1269, 337, 1364, 1176, 1695, 110, 110, 532, 2224,
	2222, 2220, 1364, 1955, 873, 537, 2198, 35, 84, 873,
	2195, 2170, 2162, 873, 1358, 873, 1683, 1603, 104, 110,
	37, 2135, 878, 879, 1955, 541, 1649, 994, 908, 909,
	910, 1604, 2125, 1168, 86, 873, 1536, 1537, 1270, 1364,
	38, 2152, 103, 103, 604, 881, 113, 1179, 912, 632,
	516, 2121, 2113, 2100, 1358, 2112, 2101, 2076, 2073, 530,
	1955, 873, 52, 1336, 529, 103, 46, 1503, 1683, 880,
	47, 47, 1504, 87, 115, 895, 1502, 51, 51, 48,
	48, 1364, 1167, 1271, 1268, 598, 1425, 2072, 340, 1551,
	1955, 2071, 2059, 47, 873, 1955, 2030, 53, 2017, 1358,
	51, 1364, 48, 49, 49, 1992, 1991, 1650, 1364, 1364,
	116, 1954, 1924, 1902, 1955, 1364, 1364, 1899, 111, 1805,
	1358, 1800, 1330, 1176, 1330, 112, 49, 1717, 1623, 886,
	1364, 873, 1583, 1581, 1580, 1584, 1364, 1364, 1579, 1778,
	1720, 1364, 1364, 1542, 107, 1179, 1624, 1500, 905, 913,
	1364, 110, 1454, 1367, 1363, 873, 1364, 1364, 1273, 1510,
	1357, 1329, 873, 1358, 1330, 605, 1174, 126, 1412, 1173,
	1375, 992, 1064, 126, 126, 126, 126, 126, 992, 557,
	992, 903, 1251, 1001, 854, 54, 1002, 896, 611, 755,
	603, 50, 1958, 117, 554, 617, 2009, 103, 1698, 1086,
	782, 1552, 538, 2227, 2218, 2200, 2183, 2116, 2074, 89,
	90, 36, 742, 55, 1929, 56, 1925, 88, 812, 113,
	1932, 1917, 57, 1916, 1915, 47, 113, 113, 113, 1911,
	1536, 1537, 51, 65, 48, 1267, 109, 109, 1910, 1909,
	1908, 1890, 1863, 1809, 1793, 85, 1788, 115, 1787, 113,
	1786, 1728, 1622, 1420, 115, 115, 115, 1362, 49, 109,
	897, 864, 1627, 940, 1603, 1588, 1167, 1585, 1696, 720,
	1573, 1564, 1535, 91, 1553, 730, 906, 115, 739, 739,
	1532, 1531, 108, 116, 1243, 1529, 1516, 996, 1515, 1467,
	116, 116, 116, 1097, 990, 740, 1090, 126, 111, 111,
	111, 1536, 1537, 746, 1280, 112, 112, 112, 1279, 722,
	1278, 812, 811, 116, 126, 1744, 933, 107, 107, 126,
	2173, 111, 2151, 2150, 107, 107, 1335, 557, 112, 2143,
	2137, 2133, 2111, 2108, 2096, 2056, 126, 1542, 2047, 2038,
	2019, 1961, 126, 904, 126, 126, 126, 107, 126, 907,
	1953, 891, 889, 890, 882, 883, 884, 885, 887, 888,
	1922, 1894, 1878, 1807, 798, 1547, 1545, 1546, 1538, 1539,
	1540, 1541, 1543, 1544, 1931, 1831, 1829, 1176, 1828, 1827,
	1824, 113, 1814, 557, 1712, 1134, 1673, 1671, 1628, 1244,
	1631, 109, 1563, 1525, 1524, 1552, 605, 1521, 1496, 1491,
	1237, 1453, 968, 736, 971, 878, 879, 127, 1542, 115,
	1322, 126, 126, 126, 126, 1277, 126, 1091, 878, 879,
	608, 797, 975, 778, 961, 960, 959, 126, 881, 958,
	957, 557, 126, 956, 955, 954, 953, 952, 373, 557,
	951, 881, 950, 949, 948, 116, 947, 790, 946, 793,
	789, 945, 880, 111, 944, 937, 874, 374, 926, 107,
	112, 857, 762, 751, 766, 880, 749, 2226, 1553, 863,
	2103, 2006, 1937, 933, 1628, 538, 787, 763, 1612, 107,
	1936, 1904, 1879, 819, 1154, 818, 785, 1611, 617, 924,
	864, 862, 1536, 1537, 777, 530, 2115, 775, 721, 2106,
	529, 1643, 1935, 1605, 1152, 878, 879, 1698, 1587, 808,
	809, 1536, 1537, 1536, 1537, 973, 558, 942, 1332, 846,
	974, 1153, 852, 1586, 1475, 886, 845, 774, 881, 555,
	1408, 819, 1095, 871, 1070, 849, 816, 1473, 1407, 819,
	776, 2007, 126, 1996, 1745, 1258, 1507, 126, 126, 126,
	713, 126, 880, 964, 841, 1599, 650, 929, 895, 1547,
	1545, 1546, 1538, 1539, 1540, 1541, 1543, 1544, 855, 1847,
	2242, 605, 2189, 2124, 2241, 126, 1985, 980, 864, 126,
	515, 872, 126, 514, 1147, 1368, 1148, 2091, 509, 510,
	1147, 1619, 1148, 842, 836, 2090, 557, 557, 2089, 1542,
	375, 2088, 1862, 373, 1861, 1844, 1147, 126, 1148, 939,
	936, 1843, 886, 1520, 1519, 126, 1518, 1517, 1542, 1478,
	1429, 1087, 1451, 1450, 878, 879, 1858, 1096, 965, 966,
	995, 1448, 1365, 998, 969, 1540, 1541, 1543, 1544, 1219,
	848, 736, 126, 605, 972, 1392, 126, 881, 126, 126,
	126, 126, 126, 126, 352, 730, 865, 1552, 126, 559,
	1149, 592, 126, 126, 1071, 775, 1149, 1429, 786, 610,
	896, 880, 1893, 1428, 1326, 126, 1325, 1054, 126, 1190,
	1101, 1089, 1149, 1403, 1143, 522, 1705, 126, 1061, 1142,
	1795, 1589, 2123, 976, 126, 1124, 715, 984, 981, 1234,
	761, 373, 1849, 2171, 1234, 985, 1806, 1273, 776, 2231,
	1056, 353, 1394, 1165, 1058, 343, 1593, 2063, 591, 1189,
	833, 1678, 1057, 1738, 1410, 1411, 1675, 1059, 2247, 1063,
	1553, 886, 1060, 1298, 1161, 1597, 104, 1076, 1083, 1075,
	1135, 1160, 888, 897, 1241, 1122, 347, 1088, 1949, 1239,
	882, 883, 884, 885, 887, 888, 1103, 834, 1105, 1104,
	530, 1371, 2140, 530, 530, 1114, 558, 344, 1115, 1116,
	1258, 979, 1373, 1620, 962, 1398, 605, 983, 983, 1593,
	1178, 2034, 1950, 1128, 1536, 1537, 2241, 620, 2048, 896,
	921, 980, 1523, 1374, 1181, 1188, 1125, 1669, 1273, 1129,
	1130, 1131, 1132, 1133, 1874, 1372, 126, 1163, 126, 126,
	1393, 126, 1139, 1140, 126, 373, 1171, 126, 126, 1145,
	126, 126, 1889, 557, 1538, 1539, 1540, 1541, 1543, 1544,
	1255, 1141, 1618, 1349, 891, 889, 890, 882, 883, 884,
	885, 887, 888, 1538, 1539, 1540, 1541, 1543, 1544, 1334,
	1544, 1334, 1248, 354, 1856, 527, 1353, 1158, 991, 1252,
	590, 537, 897, 1260, 2167, 1850, 1074, 1073, 536, 554,
	549, 1245, 1242, 1157, 1706, 1285, 1285, 1296, 1150, 1307,
	1230, 1945, 356, 1946, 1150, 1319, 1320, 1321, 2168, 1269,
	1735, 1542, 355, 1155, 1838, 1228, 1435, 2214, 1293, 593,
	1150, 1426, 104, 2240, 104, 2230, 1354, 373, 2215, 559,
	1156, 126, 126, 1948, 558, 1356, 1172, 535, 126, 2248,
	1350, 739, 1951, 739, 2238, 1376, 2064, 838, 1969, 822,
	1338, 346, 345, 1400, 1347, 1736, 1270, 1351, 348, 1352,
	1348, 1355, 126, 1361, 827, 758, 1480, 746, 126, 1552,
	1077, 1233, 2252, 891, 889, 890, 882, 883, 884, 885,
	887, 888, 126, 126, 126, 1224, 823, 537, 126, 821,
	558, 1216, 126, 1225, 969, 1226, 972, 771, 349, 1231,
	126, 1271, 1268, 126, 804, 754, 966, 965, 1920, 126,
	373, 1240, 839, 1471, 2216, 1369, 338, 1455, 2083, 1947,
	557, 517, 1466, 2229, 878, 879, 803, 350, 1465, 351,
	1273, 1430, 2082, 2054, 1048, 2130, 642, 1846, 558, 1377,
	1443, 585, 1553, 1446, 2260, 374, 558, 881, 1981, 1436,
	1438, 1774, 1660, 1078, 1069, 1343, 1656, 104, 1401, 817,
	736, 1421, 772, 736, 1406, 840, 773, 1102, 1093, 992,
	2217, 880, 123, 123, 523, 341, 1273, 559, 2015, 1468,
	714, 1110, 339, 1734, 2177, 802, 1984, 473, 474, 475,
	534, 1214, 1217, 1983, 494, 1433, 803, 1067, 528, 518,
	1441, 538, 507, 524, 1138, 1227, 1423, 1921, 2250, 1068,
	804, 1452, 1229, 525, 1456, 1509, 1065, 1834, 2055, 586,
	819, 1633, 1474, 1449, 1213, 479, 494, 1971, 1632, 1416,
	2004, 886, 1869, 559, 1545, 1546, 1538, 1539, 1540, 1541,
	1543, 1544, 1868, 2016, 1775, 2259, 490, 1980, 597, 597,
	1776, 1111, 341, 1267, 489, 802, 771, 123, 614, 1481,
	605, 1479, 728, 2251, 727, 794, 535, 538, 1811, 1938,
	1681, 126, 482, 1495, 1470, 1865, 126, 2052, 126, 1276,
	2037, 559, 725, 1494, 2253, 126, 724, 1919, 375, 559,
	1497, 1417, 1982, 1567, 487, 1711, 1506, 1704, 520, 538,
	483, 2053, 1590, 558, 558, 1530, 126, 126, 1513, 1514,
	374, 1422, 736, 1424, 1275, 1688, 557, 1490, 587, 1215,
	1447, 605, 1444, 1366, 555, 550, 1328, 484, 126, 736,
	126, 126, 605, 844, 1691, 843, 837, 126, 1461, 832,
	831, 126, 830, 1595, 829, 126, 486, 828, 1601, 1562,
	1872, 825, 726, 1626, 618, 1629, 119, 126, 1568, 1689,
	1575, 1607, 1136, 1127, 1608, 1609, 943, 126, 126, 126,
	1570, 1571, 1572, 126, 1598, 835, 519, 126, 126, 126,
	126, 126, 1634, 1606, 369, 30, 1637, 1488, 3, 126,
	2210, 126, 126, 2174, 1610, 1979, 588, 363, 25, 1854,
	1852, 1617, 1486, 1615, 1616, 126, 615, 1845, 374, 1639,
	616, 1404, 1621, 368, 18, 1396, 1657, 1625, 1162, 878,
	879, 365, 15, 1159, 1151, 1000, 1011, 589, 538, 1670,
	999, 997, 1672, 993, 988, 1690, 1725, 1701, 1647, 1645,
	1635, 1641, 881, 2042, 364, 13, 559, 559, 1651, 662,
	2242, 1079, 806, 375, 1652, 601, 485, 1414, 884, 885,
	887, 888, 1085, 2044, 126, 1440, 880, 1730, 1731, 1732,
	1625, 1668, 1483, 1714, 104, 1799, 2147, 612, 1958, 824,
	104, 1682, 1484, 341, 1693, 1679, 1489, 1700, 1703, 731,
	341, 507, 507, 614, 1702, 1429, 2118, 482, 366, 12,
	1591, 1439, 30, 1429, 1866, 979, 609, 361, 11, 1437,
	488, 370, 9, 810, 979, 25, 1445, 1721, 1415, 487,
	478, 1724, 374, 1442, 807, 483, 886, 602, 2153, 1684,
	558, 18, 360, 8, 1737, 1739, 1740, 1746, 1967, 15,
	1399, 1748, 1718, 1395, 126, 126, 1337, 1164, 1751, 1062,
	1753, 375, 484, 1801, 1360, 1011, 1011, 1003, 362, 4,
	2245, 1781, 13, 1181, 1749, 126, 1042, 2258, 126, 2197,
	1638, 486, 1181, 1754, 1536, 1537, 2156, 491, 878, 879,
	126, 1782, 1688, 557, 896, 2012, 1648, 814, 813, 1830,
	373, 126, 1485, 1815, 1684, 1808, 1653, 878, 879, 1487,
	1794, 1691, 1822, 1741, 1796, 1785, 1798, 1802, 1841, 1779,
	814, 1804, 1803, 752, 374, 1613, 12, 1686, 1582, 1327,
	1789, 1677, 1835, 508, 126, 11, 1689, 126, 1823, 9,
	759, 1324, 1825, 1812, 1461, 507, 373, 1323, 126, 1265,
	930, 1687, 815, 1906, 880, 557, 2165, 1688, 1821, 1837,
	8, 2027, 494, 1733, 1881, 1636, 1867, 897, 341, 1870,
	507, 792, 507, 940, 795, 375, 1691, 938, 760, 521,
	1857, 2062, 480, 559, 1126, 1840, 4, 1853, 826, 1855,
	2008, 485, 1686, 1836, 1877, 126, 2166, 1875, 1876, 1880,
	1871, 1689, 1891, 1912, 1898, 1042, 1042, 374, 1522, 878,
	879, 1892, 1690, 2092, 2033, 1274, 1687, 558, 941, 45,
	511, 512, 1113, 1819, 636, 1939, 1813, 1859, 1385, 1860,
	1384, 2003, 881, 376, 1072, 658, 542, 341, 341, 851,
	341, 1284, 597, 1182, 718, 488, 660, 1008, 661, 1009,
	970, 648, 1884, 341, 1006, 819, 880, 1918, 123, 889,
	890, 882, 883, 884, 885, 887, 888, 375, 744, 1341,
	1238, 1256, 1505, 934, 628, 126, 640, 1690, 639, 126,
	126, 1253, 748, 1343, 1461, 2013, 557, 1596, 1930, 1952,
	1109, 1959, 1405, 1106, 126, 126, 126, 1933, 1822, 1851,
	526, 1533, 1964, 126, 717, 126, 1968, 126, 126, 126,
	1962, 1822, 126, 126, 1965, 1822, 716, 750, 1305, 126,
	126, 1934, 1297, 126, 1823, 1972, 1294, 788, 1966, 867,
	1974, 126, 922, 1342, 781, 1602, 1359, 1823, 126, 1978,
	856, 1823, 1117, 600, 1821, 599, 2002, 1380, 779, 1066,
	375, 1999, 2000, 1370, 915, 2005, 914, 1821, 513, 2132,
	559, 1821, 2011, 1461, 770, 769, 1461, 1397, 341, 1659,
	1299, 2246, 2032, 341, 341, 341, 2146, 986, 1975, 1848,
	2021, 2188, 126, 114, 2010, 2114, 1973, 2025, 2022, 1469,
	64, 126, 29, 373, 126, 2020, 26, 83, 82, 81,
	80, 123, 126, 2023, 79, 123, 78, 77, 507, 373,
	76, 2050, 75, 558, 2039, 74, 73, 2043, 72, 71,
	126, 70, 1998, 557, 659, 69, 68, 2067, 2060, 67,
	126, 2045, 66, 494, 2065, 504, 63, 1822, 62, 1822,
	1041, 1100, 980, 61, 878, 879, 60, 126, 24, 22,
	21, 20, 2080, 28, 27, 126, 19, 17, 16, 14,
	10, 126, 2078, 1823, 2075, 1823, 44, 881, 507, 43,
	126, 126, 507, 2081, 123, 507, 507, 507, 507, 507,
	42, 2095, 2110, 1821, 1137, 1821, 2099, 2098, 507, 507,
	41, 880, 2102, 2066, 40, 126, 2068, 39, 2117, 126,
	7, 597, 6, 126, 614, 2109, 5, 101, 98, 2086,
	2087, 100, 97, 341, 2136, 99, 2134, 2070, 102, 94,
	1177, 538, 2107, 2079, 95, 96, 2128, 2141, 2129, 557,
	2120, 2085, 93, 2142, 92, 2139, 1988, 34, 33, 126,
	126, 2138, 1994, 32, 31, 1011, 2, 126, 1461, 1461,
	1, 886, 1461, 2145, 0, 0, 559, 373, 126, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 1011, 1041,
	1041, 0, 0, 0, 2157, 2158, 0, 0, 0, 0,
	0, 0, 2154, 2164, 126, 0, 2172, 2179, 126, 2160,
	0, 126, 2180, 0, 2161, 2185, 1492, 1493, 373, 0,
	0, 0, 0, 126, 2155, 0, 126, 0, 0, 896,
	0, 0, 2187, 0, 0, 2193, 2190, 2196, 2186, 2194,
	0, 1011, 126, 2181, 126, 0, 0, 1822, 2199, 2144,
	2208, 2058, 341, 2219, 1345, 1346, 2207, 341, 0, 0,
	341, 0, 0, 507, 507, 0, 507, 614, 2221, 2077,
	1299, 1299, 0, 1823, 0, 0, 0, 2228, 0, 2209,
	0, 126, 0, 0, 1559, 1560, 1561, 2163, 0, 2234,
	0, 2239, 2237, 1821, 2169, 2182, 2243, 0, 1011, 2244,
	558, 0, 897, 0, 1461, 1042, 0, 374, 0, 0,
	0, 0, 0, 0, 0, 2255, 0, 2256, 2254, 2257,
	0, 0, 0, 0, 0, 0, 2191, 2192, 1042, 1010,
	0, 0, 0, 0, 1011, 1011, 0, 0, 1299, 1299,
	1299, 0, 0, 1011, 1011, 0, 0, 0, 0, 0,
	0, 0, 0, 374, 0, 0, 0, 341, 1381, 0,
	0, 0, 558, 0, 614, 0, 0, 0, 637, 59,
	0, 0, 0, 0, 0, 0, 1011, 0, 0, 0,
	0, 1042, 0, 0, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 0, 1419, 890, 882, 883, 884, 885,
	887, 888, 0, 0, 0, 0, 0, 0, 341, 341,
	341, 0, 0, 0, 1434, 0, 0, 59, 341, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 341,
	0, 0, 0, 1949, 0, 341, 1942, 1055, 1042, 0,
	2184, 0, 0, 559, 1940, 0, 0, 0, 1944, 0,
	375, 0, 0, 0, 0, 0, 0, 0, 1010, 1010,
	0, 0, 0, 1709, 1710, 0, 0, 1950, 0, 0,
	0, 1343, 0, 531, 1042, 1042, 539, 0, 0, 0,
	0, 0, 0, 1042, 1042, 0, 59, 0, 0, 1943,
	0, 0, 0, 558, 0, 0, 375, 0, 0, 1536,
	1537, 0, 1554, 1555, 1556, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1896, 1042, 1299, 1299, 1011,
	0, 0, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 0, 1777, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1551, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1945, 0, 1946, 0,
	0, 0, 0, 0, 0, 0, 1299, 1299, 1299, 1299,
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
	1299, 1299, 1299, 1299, 1299, 0, 1299, 341, 1948, 0,
	374, 0, 341, 0, 1600, 0, 1542, 1951, 0, 0,
	0, 341, 0, 0, 0, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	558, 0, 1419, 1419, 0, 0, 559, 0, 0, 0,
	0, 0, 0, 1557, 1536, 1537, 0, 1554, 1555, 1556,
	0, 0, 0, 0, 1100, 0, 1100, 1630, 0, 1042,
	1895, 0, 0, 507, 1552, 0, 0, 341, 0, 1041,
	0, 1644, 0, 103, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 1947, 0, 1043, 0, 0, 0,
	0, 0, 1041, 341, 1654, 1655, 0, 1551, 0, 1434,
	110, 47, 0, 1661, 1662, 1664, 1666, 1667, 51, 0,
	48, 0, 0, 0, 0, 1674, 0, 1676, 341, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 0, 1011,
	0, 341, 0, 0, 49, 0, 558, 1553, 0, 0,
	0, 0, 0, 375, 0, 1041, 103, 0, 0, 0,
	0, 1542, 0, 0, 0, 0, 0, 0, 0, 375,
	0, 0, 0, 0, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 47, 0, 619, 719, 0, 0,
	0, 51, 0, 48, 0, 0, 0, 0, 1557, 0,
	1743, 0, 1011, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 1041, 1044, 1044, 374, 0, 49, 0, 1552,
	0, 0, 0, 0, 0, 1043, 1043, 0, 0, 0,
	0, 0, 0, 1548, 1549, 1550, 0, 0, 1547, 1545,
	1546, 1538, 1539, 1540, 1541, 1543, 1544, 0, 1041, 1041,
	0, 0, 0, 0, 0, 1011, 0, 1041, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 1536,
	1537, 0, 1554, 1555, 1556, 0, 0, 109, 0, 1042,
	341, 341, 0, 0, 0, 1716, 0, 0, 0, 559,
	1041, 0, 1553, 0, 0, 115, 0, 0, 0, 0,
	0, 1434, 878, 879, 1100, 1818, 0, 0, 0, 0,
	0, 0, 0, 2036, 0, 0, 1832, 375, 0, 531,
	0, 0, 1551, 0, 0, 881, 0, 1842, 1536, 1537,
	0, 116, 0, 1007, 1007, 0, 0, 756, 757, 111,
	113, 0, 1042, 0, 2057, 0, 112, 0, 1010, 880,
	109, 0, 0, 0, 0, 0, 0, 0, 375, 0,
	341, 0, 0, 341, 0, 107, 0, 1299, 115, 0,
	0, 1010, 0, 0, 1888, 0, 1542, 0, 1548, 1549,
	1550, 0, 0, 1547, 1545, 1546, 1538, 1539, 1540, 1541,
	1543, 1544, 0, 0, 0, 1042, 0, 0, 1299, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 925, 886,
	927, 0, 111, 1557, 0, 0, 0, 931, 0, 112,
	0, 1913, 0, 0, 1010, 0, 0, 0, 0, 0,
	0, 2119, 0, 1041, 1552, 1542, 0, 0, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 860, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 916,
	917, 918, 919, 920, 0, 0, 0, 0, 0, 928,
	0, 1010, 0, 0, 0, 1299, 0, 0, 0, 935,
	0, 1818, 0, 1552, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 1818, 614, 1381, 1553, 1818, 0,
	0, 0, 0, 0, 0, 0, 0, 1010, 1010, 0,
	1976, 1977, 1434, 0, 0, 0, 1010, 1010, 0, 1986,
	0, 1987, 0, 341, 1989, 1990, 0, 0, 1993, 341,
	897, 0, 0, 0, 0, 341, 341, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 0, 1888, 0, 1010,
	0, 0, 0, 0, 2018, 0, 1553, 0, 0, 0,
	2024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 0, 0, 531, 531, 0,
	0, 0, 0, 1548, 1549, 1550, 0, 0, 1547, 1545,
	1546, 1538, 1539, 1540, 1541, 1543, 1544, 0, 614, 0,
	0, 0, 0, 0, 59, 0, 0, 2049, 0, 0,
	2051, 0, 0, 0, 0, 0, 0, 0, 341, 0,
	1818, 0, 1818, 0, 882, 883, 884, 885, 887, 888,
	0, 0, 0, 1041, 0, 0, 341, 0, 0, 0,
	1107, 0, 1112, 0, 0, 0, 1434, 0, 1119, 1546,
	1538, 1539, 1540, 1541, 1543, 1544, 0, 0, 0, 0,
	0, 0, 0, 2094, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 1888, 0, 0,
	0, 0, 1236, 1044, 0, 0, 614, 1888, 0, 0,
	0, 0, 1010, 0, 0, 1043, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 2126, 0, 0, 0, 2127, 0, 0, 1043, 1100,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 0, 1218, 0, 1220, 1221, 1222, 1223, 1041,
	0, 59, 0, 59, 0, 2148, 2149, 0, 0, 1044,
	0, 0, 1246, 614, 0, 0, 0, 0, 0, 0,
	59, 1043, 59, 0, 1888, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 1282, 0, 0, 1295,
	0, 1306, 1308, 1313, 1316, 1317, 1318, 0, 0, 0,
	2178, 0, 0, 1007, 614, 0, 0, 341, 0, 0,
	1818, 0, 0, 0, 0, 0, 1044, 0, 0, 2094,
	0, 0, 1888, 0, 0, 0, 1007, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 341, 0,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 1044, 0, 0, 0, 0, 0, 0,
	0, 1044, 1044, 0, 1043, 1043, 0, 0, 0, 0,
	0, 0, 0, 1043, 1043, 0, 0, 2236, 0, 1007,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 59, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1007, 1462, 0, 0,
	0, 878, 879, 0, 898, 899, 900, 908, 909, 910,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 881, 1010, 0, 912, 0, 0,
	0, 0, 1007, 1007, 0, 0, 0, 0, 0, 0,
	0, 1007, 1007, 0, 0, 0, 1236, 0, 880, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 927, 0, 0, 0,
	0, 869, 0, 0, 1007, 0, 0, 0, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 1043,
	0, 1476, 1477, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 905, 913, 0,
	0, 0, 927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 1512,
	903, 0, 0, 0, 539, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 1526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 1313, 1313, 1313,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 59, 0,
	1594, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 1536, 1537, 0, 1554, 1555,
	1556, 0, 0, 0, 0, 906, 0, 0, 0, 0,
	0, 1715, 1614, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 1699, 0, 0, 0, 0, 1551, 0,
	0, 0, 0, 0, 0, 1646, 0, 1044, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 904, 0, 0, 892, 893, 894, 907, 0,
	891, 889, 890, 882, 883, 884, 885, 887, 888, 0,
	0, 0, 0, 0, 0, 0, 1926, 0, 0, 0,
	0, 0, 1542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 1707, 0, 0, 1708, 0, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 1713, 1557,
	0, 0, 0, 0, 0, 878, 879, 1722, 898, 899,
	900, 908, 909, 910, 0, 1726, 0, 0, 1614, 0,
	1552, 901, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 912, 0, 1044, 0, 0, 0, 1007, 1750, 0,
	0, 0, 1752, 1462, 0, 1043, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 878, 879, 895, 898,
	899, 900, 908, 909, 910, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 1783, 1784, 0, 0, 881,
	0, 0, 912, 0, 1790, 1791, 1792, 0, 0, 0,
	0, 0, 0, 1553, 0, 0, 0, 0, 0, 0,
	1007, 860, 0, 880, 0, 0, 0, 0, 0, 895,
	0, 0, 886, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 1462, 0, 0, 0, 0,
	0, 905, 913, 0, 0, 0, 0, 0, 0, 1826,
	1536, 1537, 0, 1554, 1555, 1556, 0, 0, 0, 911,
	0, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 903, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 1548,
	1549, 1550, 905, 913, 1547, 1545, 1546, 1538, 1539, 1540,
	1541, 1543, 1544, 1551, 0, 902, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 1536, 1537, 0,
	1554, 1555, 1556, 0, 0, 903, 0, 0, 0, 1897,
	0, 896, 0, 1900, 1901, 0, 0, 0, 1903, 0,
	0, 0, 0, 0, 0, 1905, 0, 1907, 0, 59,
	0, 0, 0, 897, 0, 0, 902, 1542, 0, 0,
	0, 0, 0, 1914, 0, 0, 0, 0, 0, 906,
	1551, 0, 0, 0, 0, 0, 0, 1558, 0, 0,
	0, 0, 878, 879, 0, 898, 899, 900, 908, 909,
	910, 0, 0, 0, 1557, 0, 1923, 0, 901, 0,
	0, 0, 0, 0, 897, 881, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 1552, 0, 1462, 1462, 0,
	906, 1462, 0, 0, 1542, 0, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 895, 904, 0, 1960, 892,
	893, 894, 907, 0, 891, 889, 890, 882, 883, 884,
	885, 887, 888, 0, 0, 0, 0, 0, 0, 0,
	1578, 1557, 0, 0, 1536, 1537, 0, 1554, 1555, 1556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1552, 1997, 2046, 0, 0, 904, 1553, 886,
	892, 893, 894, 907, 0, 891, 889, 890, 882, 883,
	884, 885, 887, 888, 0, 0, 0, 0, 905, 913,
	0, 1577, 0, 2028, 2029, 0, 59, 1551, 0, 0,
	0, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 2041, 0, 0, 896, 0, 0,
	0, 0, 0, 1462, 0, 1553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1542, 902, 0, 1548, 1549, 1550, 0, 0, 1547,
	1545, 1546, 1538, 1539, 1540, 1541, 1543, 1544, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 2084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 2097, 0, 0, 0, 0, 0, 0, 0, 1552,
	0, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 1548, 1549, 1550, 0, 0, 1547, 1545, 1546, 1538,
	1539, 1540, 1541, 1543, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 2131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1553, 904, 0, 0, 892, 893, 894, 907,
	0, 891, 889, 890, 882, 883, 884, 885, 887, 888,
	0, 0, 0, 0, 0, 0, 0, 1576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2206, 2206, 0, 1548, 1549,
	1550, 0, 0, 1547, 1545, 1546, 1538, 1539, 1540, 1541,
	1543, 1544, 0, 0, 0, 0, 0, 2223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2206, 128, 129, 391, 130, 392, 393,
	394, 395, 281, 396, 397, 398, 399, 131, 132, 133,
	282, 283, 284, 285, 134, 286, 287, 400, 135, 288,
	289, 136, 137, 401, 402, 290, 291, 292, 403, 138,
	293, 404, 377, 405, 139, 140, 141, 0, 142, 406,
	143, 144, 145, 407, 378, 146, 147, 408, 409, 411,
	410, 412, 413, 414, 148, 149, 342, 150, 294, 151,
	295, 296, 415, 152, 416, 153, 417, 154, 418, 419,
	155, 156, 420, 157, 421, 0, 422, 297, 158, 159,
	160, 298, 299, 423, 424, 425, 161, 162, 300, 301,
	302, 0, 163, 426, 164, 427, 428, 379, 429, 165,
	303, 430, 304, 431, 166, 167, 168, 169, 305, 306,
	381, 432, 173, 433, 170, 434, 380, 171, 307, 172,
	308, 309, 310, 311, 312, 435, 313, 436, 382, 174,
	175, 176, 383, 177, 178, 179, 437, 181, 180, 438,
	314, 384, 182, 385, 439, 183, 440, 441, 184, 0,
	185, 186, 187, 189, 315, 188, 386, 190, 191, 193,
	192, 442, 443, 444, 316, 194, 317, 195, 196, 445,
	197, 446, 447, 198, 448, 449, 199, 318, 387, 200,
	388, 319, 201, 202, 203, 204, 205, 450, 206, 320,
	207, 321, 208, 451, 209, 210, 211, 212, 213, 322,
	214, 215, 452, 216, 217, 218, 219, 220, 222, 223,
	221, 224, 225, 226, 227, 453, 228, 389, 229, 230,
	323, 231, 0, 235, 236, 237, 238, 454, 240, 324,
	239, 241, 242, 455, 243, 232, 233, 244, 390, 245,
	325, 326, 246, 456, 252, 247, 248, 234, 249, 251,
	327, 250, 328, 457, 253, 458, 254, 255, 256, 257,
	258, 259, 260, 459, 329, 330, 331, 460, 461, 261,
	262, 332, 333, 462, 263, 264, 265, 266, 463, 464,
	267, 268, 269, 270, 465, 271, 466, 334, 272, 273,
	274, 335, 336, 467, 468, 275, 469, 470, 471, 472,
	276, 277, 278, 279, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 0, 0,
	0, 0, 0, 1882, 0, 0, 0, 0, 0, 0,
	0, 1883, 128, 129, 391, 130, 392, 393, 394, 395,
	281, 396, 397, 398, 399, 131, 132, 133, 282, 283,
	284, 285, 134, 286, 287, 400, 135, 288, 289, 136,
	137, 401, 402, 290, 291, 292, 403, 138, 293, 404,
	377, 405, 139, 140, 141, 0, 142, 406, 143, 144,
	145, 407, 378, 146, 147, 408, 409, 411, 410, 412,
	413, 414, 148, 149, 342, 150, 294, 151, 295, 296,
	415, 152, 416, 153, 417, 154, 418, 419, 155, 156,
	420, 157, 421, 0, 422, 297, 158, 159, 160, 298,
	299, 423, 424, 425, 161, 162, 300, 301, 302, 0,
	163, 426, 164, 427, 428, 379, 429, 165, 303, 430,
	304, 431, 166, 167, 168, 169, 305, 306, 381, 432,
	173, 433, 170, 434, 380, 171, 307, 172, 308, 309,
	310, 311, 312, 435, 313, 436, 382, 174, 175, 176,
	383, 177, 178, 179, 437, 181, 180, 438, 314, 384,
	182, 385, 439, 183, 440, 441, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 442,
	443, 444, 316, 194, 317, 195, 196, 445, 197, 446,
	447, 198, 448, 449, 199, 318, 387, 200, 388, 319,
	201, 202, 203, 204, 205, 450, 206, 320, 207, 321,
	208, 451, 209, 210, 211, 212, 213, 322, 214, 215,
	452, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 453, 228, 389, 229, 230, 323, 231,
	0, 235, 236, 237, 238, 454, 240, 324, 239, 241,
	242, 455, 243, 232, 233, 244, 390, 245, 325, 326,
	246, 456, 252, 247, 248, 234, 249, 251, 327, 250,
	328, 457, 253, 458, 254, 255, 256, 257, 258, 259,
	260, 459, 329, 330, 331, 460, 461, 261, 262, 332,
	333, 462, 263, 264, 265, 266, 463, 464, 267, 268,
	269, 270, 465, 271, 466, 334, 272, 273, 274, 335,
	336, 467, 468, 275, 469, 470, 471, 472, 276, 277,
	278, 279, 280, 0, 0, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2159, 128, 129, 391, 130, 392, 393, 394, 395,
	281, 396, 397, 398, 399, 131, 132, 133, 282, 283,
	284, 285, 134, 286, 287, 400, 135, 288, 289, 136,
	137, 401, 402, 290, 291, 292, 403, 138, 293, 404,
	377, 405, 139, 140, 141, 0, 142, 406, 143, 144,
	145, 407, 378, 146, 147, 408, 409, 411, 410, 412,
	413, 414, 148, 149, 342, 150, 294, 151, 295, 296,
	415, 152, 416, 153, 417, 154, 418, 419, 155, 156,
	420, 157, 421, 0, 422, 297, 158, 159, 160, 298,
	299, 423, 424, 425, 161, 162, 300, 301, 302, 0,
	163, 426, 164, 427, 428, 379, 429, 165, 303, 430,
	304, 431, 166, 167, 168, 169, 305, 306, 381, 432,
	173, 433, 170, 434, 380, 171, 307, 172, 308, 309,
	310, 311, 312, 435, 313, 436, 382, 174, 175, 176,
	383, 177, 178, 179, 437, 181, 180, 438, 314, 384,
	182, 385, 439, 183, 440, 441, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 442,
	443, 444, 316, 194, 317, 195, 196, 445, 197, 446,
	447, 198, 448, 449, 199, 318, 387, 200, 388, 319,
	201, 202, 203, 204, 205, 450, 206, 320, 207, 321,
	208, 451, 209, 210, 211, 212, 213, 322, 214, 215,
	452, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 453, 228, 389, 229, 230, 323, 231,
	0, 235, 236, 237, 238, 454, 240, 324, 239, 241,
	242, 455, 243, 232, 233, 244, 390, 245, 325, 326,
	246, 456, 252, 247, 248, 234, 249, 251, 327, 250,
	328, 457, 253, 458, 254, 255, 256, 257, 258, 259,
	260, 459, 329, 330, 331, 460, 461, 261, 262, 332,
	333, 462, 263, 264, 265, 266, 463, 464, 267, 268,
	269, 270, 465, 271, 466, 334, 272, 273, 274, 335,
	336, 467, 468, 275, 469, 470, 471, 472, 276, 277,
	278, 279, 280, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 128,
	129, 391, 130, 392, 393, 394, 395, 281, 396, 397,
	398, 399, 131, 132, 133, 282, 283, 284, 285, 134,
	286, 287, 400, 135, 288, 289, 136, 137, 401, 402,
	290, 291, 292, 403, 138, 293, 404, 377, 405, 139,
	140, 141, 0, 142, 406, 143, 144, 145, 407, 378,
	146, 147, 408, 409, 411, 410, 412, 413, 414, 148,
	149, 342, 150, 294, 151, 295, 296, 415, 152, 416,
	153, 417, 154, 418, 419, 155, 156, 420, 157, 421,
	0, 422, 297, 158, 159, 160, 298, 299, 423, 424,
	425, 161, 162, 300, 301, 302, 0, 163, 426, 164,
	427, 428, 379, 429, 165, 303, 430, 304, 431, 166,
	167, 168, 169, 305, 306, 381, 432, 173, 433, 170,
	434, 380, 171, 307, 172, 308, 309, 310, 311, 312,
	435, 313, 436, 382, 174, 175, 176, 383, 177, 178,
	179, 437, 181, 180, 438, 314, 384, 182, 385, 439,
	183, 440, 441, 184, 0, 185, 186, 187, 189, 315,
	188, 386, 190, 191, 193, 192, 442, 443, 444, 316,
	194, 317, 195, 196, 445, 197, 446, 447, 198, 448,
	449, 199, 318, 387, 200, 388, 319, 201, 202, 203,
	204, 205, 450, 206, 320, 207, 321, 208, 451, 209,
	210, 211, 212, 213, 322, 214, 215, 452, 216, 217,
	218, 219, 220, 222, 223, 221, 224, 225, 226, 227,
	453, 228, 389, 229, 230, 323, 231, 0, 235, 236,
	237, 238, 454, 240, 324, 239, 241, 242, 455, 243,
	232, 233, 244, 390, 245, 325, 326, 246, 456, 252,
	247, 248, 234, 249, 251, 327, 250, 328, 457, 253,
	458, 254, 255, 256, 257, 258, 259, 260, 459, 329,
	330, 331, 460, 461, 261, 262, 332, 333, 462, 263,
	264, 265, 266, 463, 464, 267, 268, 269, 270, 465,
	271, 466, 334, 272, 273, 274, 335, 336, 467, 468,
	275, 469, 470, 471, 472, 276, 277, 278, 279, 280,
	656, 645, 646, 643, 644, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 130,
	0, 0, 0, 0, 673, 638, 0, 0, 0, 131,
	132, 133, 282, 688, 284, 689, 134, 690, 691, 0,
	135, 288, 289, 136, 137, 641, 672, 692, 693, 292,
	0, 138, 684, 0, 664, 0, 139, 140, 141, 0,
	142, 0, 143, 144, 145, 0, 378, 146, 147, 0,
	665, 666, 668, 0, 667, 669, 148, 149, 342, 150,
	694, 151, 695, 696, 870, 152, 0, 153, 0, 154,
	0, 0, 687, 156, 0, 157, 0, 0, 0, 629,
	158, 159, 160, 674, 675, 652, 0, 0, 161, 162,
	697, 698, 699, 0, 163, 0, 164, 0, 0, 379,
	0, 165, 685, 0, 304, 0, 166, 167, 168, 169,
	681, 683, 381, 0, 173, 0, 170, 0, 380, 171,
	700, 172, 701, 702, 703, 704, 705, 0, 663, 0,
	382, 174, 175, 176, 383, 177, 178, 179, 0, 181,
	180, 0, 686, 384, 182, 385, 0, 183, 0, 0,
	184, 0, 185, 186, 187, 189, 315, 188, 386, 190,
	191, 193, 192, 624, 0, 653, 682, 194, 706, 195,
	196, 0, 197, 0, 0, 198, 0, 0, 199, 318,
	387, 200, 388, 676, 201, 202, 203, 204, 205, 0,
	206, 677, 207, 321, 208, 0, 209, 210, 211, 212,
	213, 707, 214, 215, 0, 216, 217, 218, 219, 220,
	222, 223, 221, 224, 225, 226, 227, 0, 228, 389,
	229, 230, 630, 231, 0, 235, 236, 237, 238, 113,
	240, 324, 239, 241, 242, 670, 243, 232, 233, 244,
	390, 245, 708, 326, 246, 0, 252, 247, 248, 234,
	249, 251, 709, 250, 678, 0, 253, 115, 254, 255,
	256, 257, 258, 259, 260, 0, 329, 710, 711, 0,
	0, 261, 262, 679, 680, 651, 263, 264, 265, 266,
	0, 0, 267, 268, 269, 270, 671, 271, 0, 334,
	272, 273, 274, 747, 712, 0, 0, 275, 0, 0,
	0, 111, 276, 277, 278, 279, 280, 625, 112, 0,
	0, 0, 0, 623, 0, 0, 0, 0, 621, 622,
	656, 645, 646, 643, 644, 635, 0, 631, 0, 0,
	0, 0, 634, 0, 0, 0, 128, 129, 1262, 130,
	0, 0, 0, 0, 673, 638, 0, 0, 0, 131,
	132, 133, 282, 688, 284, 689, 134, 690, 691, 0,
	135, 288, 289, 136, 137, 641, 672, 692, 693, 292,
	0, 138, 684, 0, 664, 0, 139, 140, 141, 0,
	142, 0, 143, 144, 145, 0, 378, 146, 147, 0,
	665, 666, 668, 0, 667, 669, 148, 149, 342, 150,
	694, 151, 695, 696, 0, 152, 0, 153, 0, 154,
	1263, 0, 687, 156, 0, 157, 0, 0, 0, 629,
	158, 159, 160, 674, 675, 652, 0, 0, 161, 162,
	697, 698, 699, 0, 163, 0, 164, 0, 0, 379,
	0, 165, 685, 0, 304, 0, 166, 167, 168, 169,
	681, 683, 381, 0, 173, 0, 170, 0, 380, 171,
	700, 172, 701, 702, 703, 704, 705, 0, 663, 0,
	382, 174, 175, 176, 383, 177, 178, 179, 0, 181,
	180, 0, 686, 384, 182, 385, 0, 183, 0, 0,
	184, 0, 185, 186, 187, 189, 315, 188, 386, 190,
	191, 193, 192, 624, 0, 653, 682, 194, 706, 195,
	196, 0, 197, 0, 0, 198, 0, 0, 199, 318,
	387, 200, 388, 676, 201, 202, 203, 204, 205, 0,
	206, 677, 207, 321, 208, 0, 209, 210, 211, 212,
	213, 707, 214, 215, 0, 216, 217, 218, 219, 220,
	222, 223, 221, 224, 225, 226, 227, 0, 228, 389,
	229, 230, 630, 231, 0, 235, 236, 237, 238, 0,
	240, 324, 239, 241, 242, 670, 243, 232, 233, 244,
	390, 245, 708, 326, 246, 0, 252, 247, 248, 234,
	249, 251, 709, 250, 678, 0, 253, 0, 254, 255,
	256, 257, 258, 259, 260, 0, 329, 710, 711, 0,
	0, 261, 262, 679, 680, 651, 263, 264, 265, 266,
	0, 0, 267, 268, 269, 270, 671, 271, 0, 334,
	272, 273, 274, 335, 712, 1261, 0, 275, 0, 0,
	0, 0, 276, 277, 278, 279, 280, 625, 0, 0,
	0, 0, 0, 623, 0, 0, 0, 0, 621, 622,
	1264, 656, 645, 646, 643, 644, 635, 631, 1259, 0,
	0, 0, 634, 0, 0, 0, 0, 128, 129, 0,
	130, 0, 0, 0, 0, 673, 638, 0, 0, 0,
	131, 132, 133, 282, 688, 284, 689, 134, 690, 691,
	0, 135, 288, 289, 136, 137, 641, 672, 692, 693,
	292, 0, 138, 684, 0, 664, 0, 139, 140, 141,
	0, 142, 0, 143, 144, 145, 0, 378, 146, 147,
	0, 665, 666, 668, 0, 667, 669, 148, 149, 342,
	150, 694, 151, 695, 696, 0, 152, 0, 153, 0,
	154, 0, 0, 687, 156, 0, 157, 0, 0, 0,
	629, 158, 159, 160, 674, 675, 652, 0, 0, 161,
	162, 697, 698, 699, 0, 163, 0, 164, 0, 0,
	379, 0, 165, 685, 0, 304, 0, 166, 167, 168,
	169, 681, 683, 381, 0, 173, 0, 170, 0, 380,
	171, 700, 172, 701, 702, 703, 704, 705, 0, 663,
	0, 382, 174, 175, 176, 383, 177, 178, 179, 0,
	181, 180, 0, 686, 384, 182, 385, 0, 183, 0,
	0, 184, 0, 185, 186, 187, 189, 315, 188, 386,
	190, 191, 193, 192, 624, 0, 653, 682, 194, 706,
	195, 196, 0, 197, 0, 0, 198, 0, 0, 199,
	318, 387, 200, 388, 676, 201, 202, 203, 204, 205,
	0, 206, 677, 207, 321, 208, 0, 209, 210, 211,
	212, 213, 707, 214, 215, 0, 216, 217, 218, 219,
	220, 222, 223, 221, 224, 225, 226, 227, 0, 228,
	389, 229, 230, 630, 231, 0, 235, 236, 237, 238,
	113, 240, 324, 239, 241, 242, 670, 243, 232, 233,
	244, 390, 245, 708, 326, 246, 0, 252, 247, 248,
	234, 249, 251, 709, 250, 678, 0, 253, 115, 254,
	255, 256, 257, 258, 259, 260, 0, 329, 710, 711,
	0, 0, 261, 262, 679, 680, 651, 263, 264, 265,
	266, 0, 0, 267, 268, 269, 270, 671, 271, 0,
	334, 272, 273, 274, 747, 712, 0, 0, 275, 0,
	0, 0, 111, 276, 277, 278, 279, 280, 625, 112,
	0, 0, 0, 0, 623, 0, 0, 0, 0, 621,
	622, 656, 645, 646, 643, 644, 635, 0, 631, 0,
	0, 0, 0, 634, 0, 0, 0, 128, 129, 0,
	130, 0, 0, 0, 0, 673, 638, 0, 0, 0,
	131, 132, 133, 282, 688, 284, 689, 134, 690, 691,
	1309, 135, 288, 289, 136, 137, 641, 672, 692, 693,
	292, 0, 138, 684, 0, 664, 0, 139, 140, 141,
	0, 142, 0, 143, 144, 145, 0, 378, 146, 147,
	0, 665, 666, 668, 0, 667, 669, 148, 149, 342,
	150, 694, 151, 695, 696, 0, 152, 0, 153, 0,
	154, 0, 0, 687, 156, 0, 157, 0, 0, 0,
	629, 158, 159, 160, 674, 675, 652, 0, 0, 161,
	162, 697, 698, 699, 0, 163, 0, 164, 0, 1314,
	379, 0, 165, 685, 0, 304, 0, 166, 167, 168,
	169, 681, 683, 381, 0, 173, 0, 170, 0, 380,
	171, 700, 172, 701, 702, 703, 704, 705, 0, 663,
	0, 382, 174, 175, 176, 383, 177, 178, 179, 0,
	181, 180, 1310, 686, 384, 182, 385, 0, 183, 0,
	0, 184, 0, 185, 186, 187, 189, 315, 188, 386,
	190, 191, 193, 192, 624, 0, 653, 682, 194, 706,
	195, 196, 0, 197, 0, 0, 198, 0, 0, 199,
	318, 387, 200, 388, 676, 201, 202, 203, 204, 205,
	0, 206, 677, 207, 321, 208, 0, 209, 210, 211,
	212, 213, 707, 214, 215, 0, 216, 217, 218, 219,
	220, 222, 223, 221, 224, 225, 226, 227, 0, 228,
	389, 229, 230, 630, 231, 0, 235, 236, 237, 238,
	0, 240, 324, 239, 241, 242, 670, 243, 232, 233,
	244, 390, 245, 708, 326, 246, 0, 252, 247, 248,
	234, 249, 251, 709, 250, 678, 0, 253, 0, 254,
	255, 256, 257, 258, 259, 260, 0, 329, 710, 711,
	0, 1311, 261, 262, 679, 680, 651, 263, 264, 265,
	266, 0, 0, 267, 268, 269, 270, 671, 271, 0,
	334, 272, 273, 274, 335, 712, 0, 0, 275, 0,
	0, 0, 0, 276, 277, 278, 279, 280, 625, 0,
	0, 0, 0, 0, 623, 0, 0, 0, 0, 621,
	622, 656, 645, 646, 643, 644, 635, 0, 631, 0,
	0, 0, 0, 634, 0, 0, 0, 128, 129, 0,
	130, 0, 0, 0, 0, 673, 638, 0, 0, 0,
	131, 132, 133, 282, 688, 284, 689, 134, 690, 691,
	0, 135, 288, 289, 136, 137, 641, 672, 692, 693,
	292, 0, 138, 684, 0, 664, 0, 139, 140, 141,
	0, 142, 0, 143, 144, 145, 0, 378, 146, 147,
	0, 665, 666, 668, 0, 667, 669, 148, 149, 342,
	150, 694, 151, 695, 696, 0, 152, 0, 153, 0,
	154, 0, 0, 687, 156, 0, 157, 0, 0, 0,
	629, 158, 159, 160, 674, 675, 652, 0, 0, 161,
	162, 697, 698, 699, 0, 163, 0, 164, 0, 0,
	379, 0, 165, 685, 0, 304, 0, 166, 167, 168,
	169, 681, 683, 381, 0, 173, 0, 170, 0, 380,
	171, 700, 172, 701, 702, 703, 704, 705, 0, 663,
	0, 382, 174, 175, 176, 383, 177, 178, 179, 0,
	181, 180, 0, 686, 384, 182, 385, 0, 183, 0,
	0, 184, 0, 185, 186, 187, 189, 315, 188, 386,
	190, 191, 193, 192, 624, 1797, 653, 682, 194, 706,
	195, 196, 0, 197, 0, 0, 198, 0, 0, 199,
	318, 387, 200, 388, 676, 201, 202, 203, 204, 205,
	0, 206, 677, 207, 321, 208, 0, 209, 210, 211,
	212, 213, 707, 214, 215, 0, 216, 217, 218, 219,
	220, 222, 223, 221, 224, 225, 226, 227, 0, 228,
	389, 229, 230, 630, 231, 0, 235, 236, 237, 238,
	0, 240, 324, 239, 241, 242, 670, 243, 232, 233,
	244, 390, 245, 708, 326, 246, 0, 252, 247, 248,
	234, 249, 251, 709, 250, 678, 0, 253, 0, 254,
	255, 256, 257, 258, 259, 260, 0, 329, 710, 711,
	0, 0, 261, 262, 679, 680, 651, 263, 264, 265,
	266, 0, 0, 267, 268, 269, 270, 671, 271, 0,
	334, 272, 273, 274, 335, 712, 0, 0, 275, 0,
	0, 0, 0, 276, 277, 278, 279, 280, 625, 0,
	0, 0, 0, 0, 623, 0, 0, 0, 0, 621,
	622, 861, 656, 645, 646, 643, 644, 635, 631, 0,
	0, 0, 0, 634, 0, 0, 0, 0, 128, 129,
	0, 130, 0, 0, 0, 0, 673, 638, 0, 0,
	0, 131, 132, 133, 282, 688, 284, 689, 134, 690,
	691, 0, 135, 288, 289, 136, 137, 641, 672, 692,
	693, 292, 0, 138, 684, 0, 664, 0, 139, 140,
	141, 0, 142, 0, 143, 144, 145, 0, 378, 146,
	147, 0, 665, 666, 668, 0, 667, 669, 148, 149,
	342, 150, 694, 151, 695, 696, 0, 152, 0, 153,
	0, 154, 0, 0, 687, 156, 0, 157, 0, 0,
	0, 629, 158, 159, 160, 674, 675, 652, 0, 0,
	161, 162, 697, 698, 699, 0, 163, 0, 164, 0,
	0, 379, 0, 165, 685, 0, 304, 0, 166, 167,
	168, 169, 681, 683, 381, 0, 173, 1121, 170, 0,
	380, 171, 700, 172, 701, 702, 703, 704, 705, 0,
	663, 0, 382, 174, 175, 176, 383, 177, 178, 179,
	0, 181, 180, 0, 686, 384, 182, 385, 0, 183,
	0, 0, 184, 0, 185, 186, 187, 189, 315, 188,
	386, 190, 191, 193, 192, 624, 0, 653, 682, 194,
	706, 195, 196, 0, 197, 0, 0, 198, 0, 0,
	199, 318, 387, 200, 388, 676, 201, 202, 203, 204,
	205, 0, 206, 677, 207, 321, 208, 1120, 209, 210,
	211, 212, 213, 707, 214, 215, 0, 216, 217, 218,
	219, 220, 222, 223, 221, 224, 225, 226, 227, 0,
	228, 389, 229, 230, 630, 231, 0, 235, 236, 237,
	238, 0, 240, 324, 239, 241, 242, 670, 243, 232,
	233, 244, 390, 245, 708, 326, 246, 0, 252, 247,
	248, 234, 249, 251, 709, 250, 678, 0, 253, 0,
	254, 255, 256, 257, 258, 259, 260, 0, 329, 710,
	711, 0, 0, 261, 262, 679, 680, 651, 263, 264,
	265, 266, 0, 0, 267, 268, 269, 270, 671, 271,
	0, 334, 272, 273, 274, 335, 712, 0, 0, 275,
	0, 0, 0, 0, 276, 277, 278, 279, 280, 625,
	0, 0, 0, 0, 0, 623, 0, 0, 0, 0,
	621, 622, 656, 645, 646, 643, 644, 635, 0, 631,
	0, 0, 0, 0, 634, 0, 0, 0, 128, 129,
	0, 130, 0, 0, 0, 0, 673, 638, 0, 0,
	0, 131, 132, 133, 282, 688, 284, 689, 134, 690,
	691, 0, 135, 288, 289, 136, 137, 641, 672, 692,
	693, 292, 0, 138, 684, 0, 664, 0, 139, 140,
	141, 0, 142, 0, 143, 144, 145, 0, 378, 146,
	147, 0, 665, 666, 668, 0, 667, 669, 148, 149,
	342, 150, 694, 151, 695, 696, 0, 152, 0, 153,
	0, 154, 0, 0, 687, 156, 0, 157, 0, 0,
	0, 629, 158, 159, 160, 674, 675, 652, 0, 0,
	161, 162, 697, 698, 699, 0, 163, 0, 164, 0,
	0, 379, 0, 165, 685, 0, 304, 0, 166, 167,
	168, 169, 681, 683, 381, 0, 173, 0, 170, 0,
	380, 171, 700, 172, 701, 702, 703, 704, 705, 0,
	663, 0, 382, 174, 175, 176, 383, 177, 178, 179,
	0, 181, 180, 0, 686, 384, 182, 385, 0, 183,
	0, 0, 184, 0, 185, 186, 187, 189, 315, 188,
	386, 190, 191, 193, 192, 624, 0, 653, 682, 194,
	706, 195, 196, 0, 197, 0, 0, 198, 0, 0,
	199, 318, 387, 200, 388, 676, 201, 202, 203, 204,
	205, 0, 206, 677, 207, 321, 208, 0, 209, 210,
	211, 212, 213, 707, 214, 215, 0, 216, 217, 218,
	219, 220, 222, 223, 221, 224, 225, 226, 227, 0,
	228, 389, 229, 230, 630, 231, 0, 235, 236, 237,
	238, 0, 240, 324, 239, 241, 242, 670, 243, 232,
	233, 244, 390, 245, 708, 326, 246, 0, 252, 247,
	248, 234, 249, 251, 709, 250, 678, 0, 253, 0,
	254, 255, 256, 257, 258, 259, 260, 0, 329, 710,
	711, 0, 0, 261, 262, 679, 680, 651, 263, 264,
	265, 266, 0, 0, 267, 268, 269, 270, 671, 271,
	0, 334, 272, 273, 274, 335, 712, 0, 0, 275,
	0, 0, 0, 0, 276, 277, 278, 279, 280, 625,
	0, 0, 0, 0, 0, 623, 0, 0, 0, 0,
	621, 622, 0, 0, 0, 0, 0, 933, 1254, 631,
	0, 0, 0, 0, 634, 656, 645, 646, 643, 644,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 129, 0, 130, 0, 0, 0, 0, 673,
	638, 0, 0, 0, 131, 132, 133, 282, 688, 284,
	689, 134, 690, 691, 0, 135, 288, 289, 136, 137,
	641, 672, 692, 693, 292, 0, 138, 684, 0, 664,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 378, 146, 147, 0, 665, 666, 668, 0, 667,
	669, 148, 149, 342, 150, 694, 151, 695, 696, 870,
	152, 0, 153, 0, 154, 0, 0, 687, 156, 0,
	157, 0, 0, 0, 629, 158, 159, 160, 674, 675,
	652, 0, 0, 161, 162, 697, 698, 699, 0, 163,
	0, 164, 0, 0, 379, 0, 165, 685, 0, 304,
	0, 166, 167, 168, 169, 681, 683, 381, 0, 173,
	0, 170, 0, 380, 171, 700, 172, 701, 702, 703,
	704, 705, 0, 663, 0, 382, 174, 175, 176, 383,
	177, 178, 179, 0, 181, 180, 0, 686, 384, 182,
	385, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 386, 190, 191, 193, 192, 624, 0,
	653, 682, 194, 706, 195, 196, 0, 197, 0, 0,
	198, 0, 0, 199, 318, 387, 200, 388, 676, 201,
	202, 203, 204, 205, 0, 206, 677, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 707, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 389, 229, 230, 630, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	670, 243, 232, 233, 244, 390, 245, 708, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 709, 250, 678,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 710, 711, 0, 0, 261, 262, 679, 680,
	651, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	270, 671, 271, 0, 334, 272, 273, 274, 335, 712,
	0, 0, 275, 0, 0, 0, 0, 276, 277, 278,
	279, 280, 625, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 656, 645, 646, 643, 644,
	635, 0, 631, 0, 0, 0, 0, 634, 0, 0,
	0, 128, 129, 0, 130, 0, 0, 0, 0, 673,
	638, 0, 0, 0, 131, 132, 133, 282, 688, 284,
	689, 134, 690, 691, 0, 135, 288, 289, 136, 137,
	641, 672, 692, 693, 292, 0, 138, 684, 0, 664,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 378, 146, 147, 0, 665, 666, 668, 0, 667,
	669, 148, 149, 342, 150, 694, 151, 695, 696, 0,
	152, 0, 153, 0, 154, 0, 0, 687, 156, 0,
	157, 0, 0, 0, 629, 158, 159, 160, 674, 675,
	652, 0, 0, 161, 162, 697, 698, 699, 0, 163,
	0, 164, 0, 0, 379, 0, 165, 685, 0, 304,
	0, 166, 167, 168, 169, 681, 683, 381, 0, 173,
	0, 170, 0, 380, 171, 700, 172, 701, 702, 703,
	704, 705, 0, 663, 0, 382, 174, 175, 176, 383,
	177, 178, 179, 0, 181, 180, 0, 686, 384, 182,
	385, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 386, 190, 191, 193, 192, 624, 0,
	653, 682, 194, 706, 195, 196, 0, 197, 0, 0,
	198, 0, 0, 199, 318, 387, 200, 388, 676, 201,
	202, 203, 204, 205, 0, 206, 677, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 707, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 389, 229, 230, 630, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	670, 243, 232, 233, 244, 390, 245, 708, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 709, 250, 678,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 710, 711, 0, 0, 261, 262, 679, 680,
	651, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	270, 671, 271, 0, 334, 272, 273, 274, 335, 712,
	0, 0, 275, 0, 0, 0, 0, 276, 277, 278,
	279, 280, 625, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 656, 645, 646, 643, 644,
	635, 0, 631, 1780, 0, 0, 0, 634, 0, 0,
	0, 128, 129, 0, 130, 0, 0, 0, 0, 673,
	638, 0, 0, 0, 131, 132, 133, 282, 688, 284,
	689, 134, 690, 691, 0, 135, 288, 289, 136, 137,
	641, 672, 692, 693, 292, 0, 138, 684, 0, 664,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 378, 146, 147, 0, 665, 666, 668, 0, 667,
	669, 148, 149, 342, 150, 694, 151, 695, 696, 0,
	152, 0, 153, 0, 154, 0, 0, 687, 156, 0,
	157, 0, 0, 0, 629, 158, 159, 160, 674, 675,
	652, 0, 0, 161, 162, 697, 698, 699, 0, 163,
	0, 164, 0, 0, 379, 0, 165, 685, 0, 304,
	0, 166, 167, 168, 169, 681, 683, 381, 0, 173,
	0, 170, 0, 380, 171, 700, 172, 701, 702, 703,
	704, 705, 0, 663, 0, 382, 174, 175, 176, 383,
	177, 178, 179, 0, 181, 180, 0, 686, 384, 182,
	385, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 386, 190, 191, 193, 192, 624, 0,
	653, 682, 194, 706, 195, 196, 0, 197, 0, 0,
	198, 0, 0, 199, 318, 387, 200, 388, 676, 201,
	202, 203, 204, 205, 0, 206, 677, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 707, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 389, 229, 230, 630, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	670, 243, 232, 233, 244, 390, 245, 708, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 709, 250, 678,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 710, 711, 0, 0, 261, 262, 679, 680,
	651, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	270, 671, 271, 0, 334, 272, 273, 274, 335, 712,
	1729, 0, 275, 0, 0, 0, 0, 276, 277, 278,
	279, 280, 625, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 656, 645, 646, 643, 644,
	635, 0, 631, 0, 0, 0, 0, 634, 0, 0,
	0, 128, 129, 0, 130, 0, 0, 0, 0, 673,
	638, 0, 0, 0, 131, 132, 133, 282, 688, 284,
	689, 134, 690, 691, 0, 135, 288, 289, 136, 137,
	641, 672, 692, 693, 292, 0, 138, 684, 0, 664,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 378, 146, 147, 0, 665, 666, 668, 0, 667,
	669, 148, 149, 342, 150, 694, 151, 695, 696, 0,
	152, 0, 153, 0, 154, 0, 0, 687, 156, 0,
	157, 0, 0, 0, 629, 158, 159, 160, 674, 675,
	652, 0, 0, 161, 162, 697, 698, 699, 0, 163,
	0, 164, 0, 0, 379, 0, 165, 685, 0, 304,
	0, 166, 167, 168, 169, 681, 683, 381, 0, 173,
	0, 170, 0, 380, 171, 700, 172, 701, 702, 703,
	704, 705, 0, 663, 0, 382, 174, 175, 176, 383,
	177, 178, 179, 0, 181, 180, 0, 686, 384, 182,
	385, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 386, 190, 191, 193, 192, 624, 0,
	653, 682, 194, 706, 195, 196, 0, 197, 0, 0,
	198, 0, 0, 199, 318, 387, 200, 388, 676, 201,
	202, 203, 204, 205, 0, 206, 677, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 707, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 389, 229, 230, 630, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	670, 243, 232, 233, 244, 390, 245, 708, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 709, 250, 678,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 710, 711, 0, 0, 261, 262, 679, 680,
	651, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	270, 671, 271, 0, 334, 272, 273, 274, 335, 712,
	0, 0, 275, 0, 0, 0, 0, 276, 277, 278,
	279, 280, 625, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 656, 645, 646, 643, 644,
	635, 0, 631, 1719, 0, 0, 0, 634, 0, 0,
	0, 128, 129, 0, 130, 0, 0, 0, 0, 673,
	638, 0, 0, 0, 131, 132, 133, 282, 688, 284,
	689, 134, 690, 691, 0, 135, 288, 289, 136, 137,
	641, 672, 692, 693, 292, 0, 138, 684, 0, 664,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 378, 146, 147, 0, 665, 666, 668, 0, 667,
	669, 148, 149, 342, 150, 694, 151, 695, 696, 0,
	152, 0, 153, 0, 154, 0, 0, 687, 156, 0,
	157, 0, 0, 0, 629, 158, 159, 160, 674, 675,
	652, 0, 0, 161, 162, 697, 698, 699, 0, 163,
	0, 164, 0, 1314, 379, 0, 165, 685, 0, 304,
	0, 166, 167, 168, 169, 681, 683, 381, 0, 173,
	0, 170, 0, 380, 171, 700, 172, 701, 702, 703,
	704, 705, 0, 663, 0, 382, 174, 175, 176, 383,
	177, 178, 179, 0, 181, 180, 0, 686, 384, 182,
	385, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 386, 190, 191, 193, 192, 624, 0,
	653, 682, 194, 706, 195, 196, 0, 197, 0, 0,
	198, 0, 0, 199, 318, 387, 200, 388, 676, 201,
	202, 203, 204, 205, 0, 206, 677, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 707, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 389, 229, 230, 630, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	670, 243, 232, 233, 244, 390, 245, 708, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 709, 250, 678,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 710, 711, 0, 0, 261, 262, 679, 680,
	651, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	270, 671, 271, 0, 334, 272, 273, 274, 335, 712,
	0, 0, 275, 0, 0, 0, 0, 276, 277, 278,
	279, 280, 625, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 656, 645, 646, 643, 644,
	635, 0, 631, 0, 0, 0, 0, 634, 0, 0,
	0, 128, 129, 0, 130, 0, 0, 0, 0, 673,
	638, 0, 0, 0, 131, 132, 133, 282, 688, 284,
	689, 134, 690, 691, 0, 135, 288, 289, 136, 137,
	641, 672, 692, 693, 292, 0, 138, 684, 0, 664,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 378, 146, 147, 0, 665, 666, 668, 0, 667,
	669, 148, 149, 342, 150, 694, 151, 695, 696, 0,
	152, 0, 153, 0, 154, 0, 0, 687, 156, 0,
	157, 0, 0, 0, 629, 158, 159, 160, 674, 675,
	652, 0, 0, 161, 162, 697, 698, 699, 0, 163,
	0, 164, 0, 0, 379, 0, 165, 685, 0, 304,
	0, 166, 167, 168, 169, 681, 683, 381, 0, 173,
	0, 170, 0, 380, 171, 700, 172, 701, 702, 703,
	704, 705, 0, 663, 0, 382, 174, 175, 176, 383,
	177, 178, 179, 0, 181, 180, 0, 686, 384, 182,
	385, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 386, 190, 191, 193, 192, 624, 0,
	653, 682, 194, 706, 195, 196, 0, 197, 0, 0,
	198, 0, 0, 199, 318, 387, 200, 388, 676, 201,
	202, 203, 204, 205, 0, 206, 677, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 707, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 389, 229, 230, 630, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	670, 243, 232, 233, 244, 390, 245, 708, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 709, 250, 678,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 710, 711, 0, 0, 261, 262, 679, 680,
	651, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	270, 671, 271, 0, 334, 272, 273, 274, 335, 712,
	0, 0, 275, 0, 0, 0, 0, 276, 277, 278,
	279, 280, 625, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 621, 622, 861, 656, 645, 646, 643,
	644, 635, 631, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 282, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 641, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 147, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 151, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 629, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 168, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 624,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 630, 231,
	0, 235, 236, 237, 238, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 279, 280, 625, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 656, 645, 646, 643,
	644, 635, 0, 631, 1249, 0, 0, 0, 634, 0,
	0, 0, 128, 129, 1108, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 282, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 641, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 147, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 151, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 629, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 168, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 624,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 630, 231,
	0, 235, 236, 237, 238, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 279, 280, 625, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 656, 645, 646, 643,
	644, 635, 0, 631, 0, 0, 0, 0, 634, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 282, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 641, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 2205, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 151, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 629, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 168, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 624,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 630, 231,
	0, 235, 236, 237, 238, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 2204, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 279, 280, 625, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 656, 645, 646, 643,
	644, 635, 0, 631, 0, 0, 0, 0, 634, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 282, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 641, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 147, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 151, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 629, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 168, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 624,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 630, 231,
	0, 235, 236, 237, 238, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 279, 280, 625, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 656, 645, 646, 643,
	644, 635, 0, 631, 0, 0, 0, 0, 634, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 2203, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 641, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 2205, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 151, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 629, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 168, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 624,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 630, 231,
	0, 235, 236, 237, 238, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 2204, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 279, 280, 625, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 1286, 645, 646, 643,
	644, 635, 0, 631, 0, 0, 0, 0, 634, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 282, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 641, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 147, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 1289, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 629, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 1290, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 1291,
	1288, 189, 315, 188, 386, 190, 191, 193, 192, 624,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 630, 231,
	0, 235, 236, 237, 1292, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 1287, 280, 625, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 621, 622, 656, 645, 646, 643,
	644, 635, 0, 631, 0, 0, 0, 0, 634, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 282, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 641, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 147, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 151, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 629, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 168, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 0,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 1304, 231,
	0, 235, 236, 237, 238, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 1300, 1301, 656, 645, 646, 643,
	644, 635, 0, 1303, 0, 0, 0, 0, 634, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	673, 638, 0, 0, 0, 131, 132, 133, 282, 688,
	284, 689, 134, 690, 691, 0, 135, 288, 289, 136,
	137, 0, 672, 692, 693, 292, 0, 138, 684, 0,
	664, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 378, 146, 147, 0, 665, 666, 668, 0,
	667, 669, 148, 149, 342, 150, 694, 151, 695, 696,
	0, 152, 0, 153, 0, 154, 0, 0, 687, 156,
	0, 157, 0, 0, 0, 297, 158, 159, 160, 674,
	675, 652, 0, 0, 161, 162, 697, 698, 699, 0,
	163, 0, 164, 0, 0, 379, 0, 165, 685, 0,
	304, 0, 166, 167, 168, 169, 681, 683, 381, 0,
	173, 0, 170, 0, 380, 171, 700, 172, 701, 702,
	703, 704, 705, 0, 663, 0, 382, 174, 175, 176,
	383, 177, 178, 179, 0, 181, 180, 0, 686, 384,
	182, 385, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 386, 190, 191, 193, 192, 0,
	0, 653, 682, 194, 706, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 387, 200, 388, 676,
	201, 202, 203, 204, 205, 0, 206, 677, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 707, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 389, 229, 230, 1304, 231,
	0, 235, 236, 237, 238, 0, 240, 324, 239, 241,
	242, 670, 243, 232, 233, 244, 390, 245, 708, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 709, 250,
	678, 0, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 710, 711, 0, 0, 261, 262, 679,
	680, 651, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 270, 671, 271, 0, 334, 272, 273, 274, 335,
	712, 0, 0, 275, 0, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 0, 656, 645, 646, 643, 644,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 129, 1303, 130, 0, 0, 0, 634, 673,
	638, 0, 0, 0, 131, 132, 133, 0, 688, 284,
	689, 134, 690, 691, 0, 135, 288, 289, 136, 137,
	641, 672, 692, 693, 292, 0, 138, 684, 0, 664,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 378, 146, 2205, 0, 665, 666, 668, 0, 667,
	669, 148, 149, 342, 150, 694, 151, 695, 696, 0,
	152, 0, 153, 0, 154, 0, 0, 687, 156, 0,
	157, 0, 0, 0, 629, 158, 159, 160, 674, 675,
	652, 0, 0, 161, 162, 697, 698, 699, 0, 163,
	0, 164, 0, 0, 379, 0, 165, 685, 0, 304,
	0, 166, 167, 168, 169, 681, 683, 0, 0, 173,
	0, 170, 0, 380, 171, 700, 172, 701, 702, 703,
	704, 705, 0, 663, 0, 0, 174, 175, 176, 383,
	177, 178, 179, 0, 181, 180, 0, 686, 384, 182,
	0, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 386, 190, 191, 193, 192, 624, 0,
	653, 682, 194, 706, 195, 196, 0, 197, 0, 0,
	198, 0, 0, 199, 318, 387, 200, 388, 676, 201,
	202, 203, 204, 205, 0, 206, 677, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 707, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 389, 229, 230, 630, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	670, 243, 232, 233, 244, 0, 245, 708, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 709, 250, 678,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 710, 711, 0, 0, 261, 262, 679, 680,
	651, 263, 264, 2204, 266, 0, 0, 267, 268, 269,
	270, 671, 271, 0, 334, 272, 273, 274, 335, 712,
	0, 0, 275, 0, 0, 0, 0, 276, 277, 278,
	279, 280, 656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 622, 0, 0, 0, 128, 129,
	0, 130, 631, 0, 0, 0, 673, 634, 0, 0,
	0, 131, 132, 133, 282, 283, 284, 285, 134, 286,
	287, 0, 135, 288, 289, 136, 137, 0, 672, 290,
	291, 292, 0, 138, 684, 0, 664, 0, 139, 140,
	141, 0, 142, 0, 143, 144, 145, 0, 378, 146,
	147, 0, 665, 666, 668, 0, 667, 669, 148, 149,
	342, 150, 294, 151, 295, 296, 0, 152, 0, 153,
	0, 154, 0, 0, 155, 156, 0, 157, 0, 0,
	0, 297, 158, 159, 160, 674, 675, 0, 0, 0,
	161, 162, 300, 301, 302, 0, 163, 0, 164, 0,
	0, 379, 0, 165, 685, 0, 304, 0, 166, 167,
	168, 169, 681, 683, 381, 0, 173, 0, 170, 0,
	380, 171, 307, 172, 308, 309, 310, 311, 312, 0,
	313, 0, 382, 174, 175, 176, 383, 177, 178, 179,
	0, 181, 180, 0, 686, 384, 182, 385, 0, 183,
	0, 0, 184, 0, 185, 186, 187, 189, 315, 188,
	386, 190, 191, 193, 192, 0, 0, 0, 682, 194,
	317, 195, 196, 0, 197, 0, 0, 198, 0, 0,
	199, 318, 387, 200, 388, 676, 201, 202, 203, 204,
	205, 0, 206, 677, 207, 321, 208, 0, 209, 210,
	211, 212, 213, 322, 214, 215, 0, 216, 217, 218,
	219, 220, 222, 223, 221, 224, 225, 226, 227, 0,
	228, 389, 229, 230, 323, 231, 0, 235, 236, 237,
	238, 0, 240, 324, 239, 241, 242, 670, 243, 232,
	233, 244, 390, 245, 325, 326, 246, 0, 252, 247,
	248, 234, 249, 251, 327, 250, 678, 0, 253, 0,
	254, 255, 256, 257, 258, 259, 260, 0, 329, 330,
	331, 0, 0, 261, 262, 679, 680, 0, 263, 264,
	265, 266, 0, 0, 267, 268, 269, 270, 671, 271,
	0, 334, 272, 273, 274, 335, 336, 0, 0, 275,
	0, 556, 0, 0, 276, 277, 278, 279, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 129, 0,
	130, 0, 0, 0, 0, 281, 0, 0, 0, 1820,
	131, 132, 133, 282, 283, 284, 285, 134, 286, 287,
	0, 135, 288, 289, 136, 137, 0, 0, 290, 291,
	292, 0, 138, 293, 0, 377, 0, 139, 140, 141,
	0, 142, 0, 143, 144, 145, 0, 378, 146, 147,
	0, 0, 0, 0, 0, 0, 0, 148, 149, 342,
	150, 294, 151, 295, 296, 0, 152, 0, 153, 0,
	154, 0, 0, 155, 156, 0, 157, 0, 0, 0,
	297, 158, 159, 160, 298, 299, 0, 0, 0, 161,
	162, 300, 301, 302, 0, 163, 0, 164, 0, 0,
	379, 0, 165, 303, 0, 304, 0, 166, 167, 168,
	169, 305, 306, 381, 0, 173, 0, 170, 0, 380,
	171, 307, 172, 308, 309, 310, 311, 312, 0, 313,
	0, 382, 174, 175, 176, 383, 177, 178, 179, 0,
	181, 180, 0, 314, 384, 182, 385, 0, 183, 0,
	0, 184, 0, 185, 186, 187, 189, 315, 188, 386,
	190, 191, 193, 192, 0, 0, 0, 316, 194, 317,
	195, 196, 0, 197, 0, 0, 198, 0, 0, 199,
	318, 387, 200, 388, 319, 201, 202, 203, 204, 205,
	0, 206, 320, 207, 321, 208, 0, 209, 210, 211,
	212, 213, 322, 214, 215, 0, 216, 217, 218, 219,
	220, 222, 223, 221, 224, 225, 226, 227, 0, 228,
	389, 229, 230, 323, 231, 0, 235, 236, 237, 238,
	113, 240, 324, 239, 241, 242, 0, 243, 232, 233,
	244, 390, 245, 325, 326, 246, 0, 252, 247, 248,
	234, 249, 251, 327, 250, 328, 0, 253, 115, 254,
	255, 256, 257, 258, 259, 260, 0, 329, 330, 331,
	0, 0, 261, 262, 332, 333, 0, 263, 264, 265,
	266, 0, 0, 267, 268, 269, 270, 0, 271, 0,
	334, 272, 273, 274, 747, 336, 0, 0, 275, 0,
	0, 0, 111, 276, 277, 278, 279, 280, 0, 112,
	556, 553, 0, 554, 549, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 107, 130,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 131,
	132, 133, 282, 283, 284, 285, 134, 286, 287, 0,
	135, 288, 289, 136, 137, 0, 0, 290, 291, 292,
	0, 138, 293, 0, 377, 0, 139, 140, 141, 0,
	142, 0, 143, 144, 145, 0, 378, 146, 147, 0,
	0, 0, 0, 0, 0, 0, 148, 149, 342, 150,
	294, 151, 295, 296, 1084, 152, 0, 153, 0, 154,
	0, 0, 155, 156, 0, 157, 0, 0, 0, 297,
	158, 159, 160, 298, 299, 546, 0, 0, 161, 162,
	300, 301, 302, 0, 163, 0, 164, 0, 0, 379,
	0, 165, 303, 0, 304, 0, 166, 167, 168, 169,
	305, 306, 381, 0, 173, 0, 170, 0, 380, 171,
	307, 172, 308, 309, 310, 311, 312, 0, 313, 0,
	382, 174, 175, 176, 383, 177, 178, 179, 0, 181,
	180, 0, 314, 384, 182, 385, 0, 183, 0, 0,
	184, 0, 185, 186, 187, 189, 315, 188, 386, 190,
	191, 193, 192, 0, 0, 0, 316, 194, 317, 195,
	196, 0, 197, 547, 0, 198, 0, 0, 199, 318,
	387, 200, 388, 319, 201, 202, 203, 204, 205, 0,
	206, 320, 207, 321, 208, 0, 209, 210, 211, 212,
	213, 322, 214, 215, 0, 216, 217, 218, 219, 220,
	222, 223, 221, 224, 225, 226, 227, 0, 228, 389,
	229, 230, 323, 231, 0, 235, 236, 237, 238, 0,
	240, 324, 239, 241, 242, 0, 243, 232, 233, 244,
	390, 245, 325, 326, 246, 0, 252, 247, 248, 234,
	249, 251, 327, 250, 328, 0, 253, 0, 254, 255,
	256, 257, 258, 259, 260, 0, 329, 330, 331, 0,
	0, 261, 262, 332, 333, 545, 263, 264, 265, 266,
	0, 0, 267, 268, 269, 270, 0, 271, 0, 334,
	272, 273, 274, 335, 336, 0, 0, 275, 0, 0,
	0, 0, 276, 277, 278, 279, 280, 556, 553, 0,
	554, 549, 544, 0, 0, 0, 0, 0, 555, 550,
	0, 0, 0, 128, 129, 0, 130, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 131, 132, 133, 282,
	283, 284, 285, 134, 286, 287, 0, 135, 288, 289,
	136, 137, 0, 0, 290, 291, 292, 0, 138, 293,
	0, 377, 0, 139, 140, 141, 0, 142, 0, 143,
	144, 145, 0, 378, 146, 147, 0, 0, 0, 0,
	0, 0, 0, 148, 149, 342, 150, 294, 151, 295,
	296, 1081, 152, 0, 153, 0, 154, 0, 0, 155,
	156, 0, 157, 0, 0, 0, 297, 158, 159, 160,
	298, 299, 546, 0, 0, 161, 162, 300, 301, 302,
	0, 163, 0, 164, 0, 0, 379, 0, 165, 303,
	0, 304, 0, 166, 167, 168, 169, 305, 306, 381,
	0, 173, 0, 170, 0, 380, 171, 307, 172, 308,
	309, 310, 311, 312, 0, 313, 0, 382, 174, 175,
	176, 383, 177, 178, 179, 0, 181, 180, 0, 314,
	384, 182, 385, 0, 183, 0, 0, 184, 0, 185,
	186, 187, 189, 315, 188, 386, 190, 191, 193, 192,
	0, 0, 0, 316, 194, 317, 195, 196, 0, 197,
	547, 0, 198, 0, 0, 199, 318, 387, 200, 388,
	319, 201, 202, 203, 204, 205, 0, 206, 320, 207,
	321, 208, 0, 209, 210, 211, 212, 213, 322, 214,
	215, 0, 216, 217, 218, 219, 220, 222, 223, 221,
	224, 225, 226, 227, 0, 228, 389, 229, 230, 323,
	231, 0, 235, 236, 237, 238, 0, 240, 324, 239,
	241, 242, 0, 243, 232, 233, 244, 390, 245, 325,
	326, 246, 0, 252, 247, 248, 234, 249, 251, 327,
	250, 328, 0, 253, 0, 254, 255, 256, 257, 258,
	259, 260, 0, 329, 330, 331, 0, 0, 261, 262,
	332, 333, 545, 263, 264, 265, 266, 0, 0, 267,
	268, 269, 270, 0, 271, 0, 334, 272, 273, 274,
	335, 336, 0, 0, 275, 0, 0, 0, 0, 276,
	277, 278, 279, 280, 556, 553, 0, 554, 549, 544,
	0, 0, 0, 0, 0, 555, 550, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 377, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	378, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 780, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 546,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 379, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 381, 0, 173, 0,
	170, 0, 380, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 382, 174, 175, 176, 383, 177,
	178, 179, 0, 181, 180, 0, 314, 384, 182, 385,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 386, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 547, 0, 198,
	0, 0, 199, 318, 387, 200, 388, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 389, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 390, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 545,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 0,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 556, 553, 0, 554, 549, 544, 0, 0, 0,
	0, 0, 555, 550, 0, 0, 0, 128, 129, 0,
	130, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	131, 132, 133, 282, 283, 284, 285, 134, 286, 287,
	0, 135, 288, 289, 136, 137, 0, 0, 290, 291,
	292, 0, 138, 293, 0, 377, 0, 139, 140, 141,
	0, 142, 0, 143, 144, 145, 0, 378, 146, 147,
	0, 0, 0, 0, 0, 0, 0, 148, 149, 342,
	150, 294, 151, 295, 296, 0, 152, 0, 153, 0,
	154, 0, 0, 155, 156, 0, 157, 0, 0, 0,
	297, 158, 159, 160, 298, 299, 546, 0, 0, 161,
	162, 300, 301, 302, 0, 163, 0, 164, 0, 0,
	379, 0, 165, 303, 0, 304, 0, 166, 167, 168,
	169, 305, 306, 381, 0, 173, 0, 170, 0, 380,
	171, 307, 172, 308, 309, 310, 311, 312, 0, 313,
	0, 382, 174, 175, 176, 383, 177, 178, 179, 0,
	181, 180, 0, 314, 384, 182, 385, 0, 183, 0,
	0, 184, 0, 185, 186, 187, 189, 315, 188, 386,
	190, 191, 193, 192, 0, 0, 0, 316, 194, 317,
	195, 196, 0, 197, 547, 0, 198, 0, 0, 199,
	318, 387, 200, 388, 319, 201, 202, 203, 204, 205,
	0, 206, 320, 207, 321, 208, 0, 209, 210, 211,
	212, 213, 322, 214, 215, 0, 216, 217, 218, 219,
	220, 222, 223, 221, 224, 225, 226, 227, 0, 228,
	389, 229, 230, 323, 231, 0, 235, 236, 237, 238,
	0, 240, 324, 239, 241, 242, 0, 243, 232, 233,
	244, 390, 245, 325, 326, 246, 0, 252, 247, 248,
	234, 249, 251, 327, 250, 328, 0, 253, 0, 254,
	255, 256, 257, 258, 259, 260, 0, 329, 330, 331,
	0, 0, 261, 262, 332, 333, 545, 263, 264, 265,
	266, 0, 0, 267, 268, 269, 270, 0, 271, 0,
	334, 272, 273, 274, 335, 336, 0, 125, 275, 0,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 0,
	0, 0, 0, 128, 129, 0, 130, 0, 0, 555,
	550, 281, 0, 0, 0, 0, 131, 132, 133, 282,
	283, 284, 285, 134, 286, 287, 0, 135, 288, 289,
	136, 137, 0, 0, 290, 291, 292, 0, 138, 293,
	0, 0, 0, 139, 140, 141, 0, 142, 0, 143,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 0,
	0, 0, 0, 148, 149, 342, 150, 294, 151, 295,
	296, 0, 152, 0, 153, 0, 154, 0, 0, 155,
	156, 0, 157, 0, 0, 0, 297, 158, 159, 160,
	298, 299, 0, 0, 0, 161, 162, 300, 301, 302,
	0, 163, 0, 164, 0, 0, 0, 0, 165, 303,
	0, 304, 0, 166, 167, 168, 169, 305, 306, 0,
	0, 173, 0, 170, 0, 0, 171, 307, 172, 308,
	309, 310, 311, 312, 0, 313, 0, 0, 174, 175,
	176, 0, 177, 178, 179, 0, 181, 180, 0, 314,
	0, 182, 0, 0, 183, 0, 0, 184, 0, 185,
	186, 187, 189, 315, 188, 0, 190, 191, 193, 192,
	0, 0, 0, 316, 194, 317, 195, 196, 0, 197,
	0, 606, 198, 0, 0, 199, 318, 0, 200, 0,
	319, 201, 202, 203, 204, 205, 0, 206, 320, 207,
	321, 208, 0, 209, 210, 211, 212, 213, 322, 214,
	215, 0, 216, 217, 218, 219, 220, 222, 223, 221,
	224, 225, 226, 227, 0, 228, 0, 229, 230, 323,
	231, 0, 235, 236, 237, 238, 113, 240, 324, 239,
	241, 242, 0, 243, 232, 233, 244, 0, 245, 325,
	326, 246, 0, 252, 247, 248, 234, 249, 251, 327,
	250, 328, 0, 253, 115, 254, 255, 256, 257, 258,
	259, 260, 0, 329, 330, 331, 0, 0, 261, 262,
	332, 333, 0, 263, 264, 265, 266, 0, 0, 267,
	268, 269, 270, 0, 271, 0, 334, 272, 273, 274,
	747, 336, 0, 0, 275, 0, 125, 0, 111, 276,
	277, 278, 279, 280, 0, 112, 0, 0, 0, 0,
	0, 0, 128, 129, 0, 130, 0, 0, 0, 0,
	281, 0, 1459, 0, 1464, 131, 132, 133, 282, 283,
	284, 285, 134, 286, 287, 0, 135, 288, 289, 136,
	137, 0, 0, 290, 291, 292, 0, 138, 293, 0,
	0, 0, 139, 140, 141, 0, 142, 0, 143, 144,
	145, 0, 0, 146, 147, 0, 0, 0, 0, 0,
	0, 0, 148, 149, 342, 150, 294, 151, 295, 296,
	0, 152, 0, 153, 0, 154, 0, 0, 155, 156,
	0, 157, 0, 0, 0, 297, 158, 159, 160, 298,
	299, 0, 0, 0, 161, 162, 300, 301, 302, 0,
	163, 0, 164, 0, 0, 0, 0, 165, 303, 0,
	304, 0, 166, 167, 168, 169, 305, 306, 0, 0,
	173, 0, 170, 0, 0, 171, 307, 172, 308, 309,
	310, 311, 312, 0, 313, 0, 0, 174, 175, 176,
	0, 177, 178, 179, 0, 181, 180, 0, 314, 0,
	182, 0, 0, 183, 0, 0, 184, 0, 185, 186,
	187, 189, 315, 188, 0, 190, 191, 193, 192, 0,
	0, 0, 316, 194, 317, 195, 196, 0, 197, 0,
	0, 198, 0, 0, 199, 318, 0, 200, 0, 319,
	201, 202, 203, 204, 205, 0, 206, 320, 207, 321,
	208, 0, 209, 210, 211, 212, 213, 322, 214, 215,
	0, 216, 217, 218, 219, 220, 222, 223, 221, 224,
	225, 226, 227, 0, 228, 0, 229, 230, 323, 231,
	0, 235, 236, 237, 238, 113, 240, 324, 239, 241,
	242, 0, 243, 232, 233, 244, 0, 245, 325, 326,
	246, 0, 252, 247, 248, 234, 249, 251, 327, 250,
	328, 0, 253, 115, 254, 255, 256, 257, 258, 259,
	260, 0, 329, 330, 331, 0, 0, 261, 262, 332,
	333, 0, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 270, 0, 271, 0, 334, 272, 273, 274, 747,
	336, 0, 0, 275, 0, 125, 0, 111, 276, 277,
	278, 279, 280, 0, 112, 0, 0, 0, 0, 0,
	0, 128, 129, 0, 130, 0, 0, 0, 0, 281,
	0, 0, 0, 107, 131, 132, 133, 282, 283, 284,
	285, 134, 286, 287, 0, 135, 288, 289, 136, 137,
	0, 0, 290, 291, 292, 0, 138, 293, 0, 0,
	0, 139, 140, 141, 0, 142, 0, 143, 144, 145,
	0, 0, 146, 147, 0, 0, 0, 0, 0, 0,
	0, 148, 149, 342, 150, 294, 151, 295, 296, 0,
	152, 0, 153, 0, 154, 0, 0, 155, 156, 0,
	157, 0, 0, 0, 297, 158, 159, 160, 298, 299,
	0, 0, 0, 161, 162, 300, 301, 302, 0, 163,
	0, 164, 0, 0, 0, 0, 165, 303, 0, 304,
	0, 166, 167, 168, 169, 305, 306, 0, 0, 173,
	0, 170, 0, 0, 171, 307, 172, 308, 309, 310,
	311, 312, 0, 313, 0, 0, 174, 175, 176, 0,
	177, 178, 179, 0, 181, 180, 0, 314, 0, 182,
	0, 0, 183, 0, 0, 184, 0, 185, 186, 187,
	189, 315, 188, 0, 190, 191, 193, 192, 0, 0,
	0, 316, 194, 317, 195, 196, 0, 197, 0, 606,
	198, 0, 0, 199, 318, 0, 200, 0, 319, 201,
	202, 203, 204, 205, 0, 206, 320, 207, 321, 208,
	0, 209, 210, 211, 212, 213, 322, 214, 215, 0,
	216, 217, 218, 219, 220, 222, 223, 221, 224, 225,
	226, 227, 0, 228, 0, 229, 230, 323, 231, 0,
	235, 236, 237, 238, 0, 240, 324, 239, 241, 242,
	0, 243, 232, 233, 244, 0, 245, 325, 326, 246,
	0, 252, 247, 248, 234, 249, 251, 327, 250, 328,
	0, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	0, 329, 330, 331, 0, 0, 261, 262, 332, 333,
	0, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	270, 0, 271, 0, 334, 272, 273, 274, 335, 336,
	0, 0, 275, 0, 125, 0, 0, 276, 277, 278,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	1459, 0, 1464, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 0,
	0, 275, 0, 0, 125, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 977, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 0,
	0, 275, 0, 125, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	129, 0, 130, 0, 0, 0, 0, 281, 0, 0,
	0, 1344, 131, 132, 133, 282, 283, 284, 285, 134,
	286, 287, 0, 135, 288, 289, 136, 137, 0, 0,
	290, 291, 292, 0, 138, 293, 0, 0, 0, 139,
	140, 141, 0, 142, 0, 143, 144, 145, 0, 0,
	146, 147, 0, 0, 0, 0, 0, 0, 0, 148,
	149, 342, 150, 294, 151, 295, 296, 0, 152, 0,
	153, 0, 154, 0, 0, 155, 156, 0, 157, 0,
	0, 0, 297, 158, 159, 160, 298, 299, 0, 0,
	0, 161, 162, 300, 301, 302, 0, 163, 0, 164,
	0, 0, 0, 0, 165, 303, 0, 304, 0, 166,
	167, 168, 169, 305, 306, 0, 0, 173, 0, 170,
	0, 0, 171, 307, 172, 308, 309, 310, 311, 312,
	0, 313, 0, 0, 174, 175, 176, 0, 177, 178,
	179, 0, 181, 180, 0, 314, 0, 182, 0, 0,
	183, 0, 0, 184, 0, 185, 186, 187, 189, 315,
	188, 0, 190, 191, 193, 192, 0, 0, 0, 316,
	194, 317, 195, 196, 0, 197, 0, 0, 198, 0,
	0, 199, 318, 0, 200, 0, 319, 201, 202, 203,
	204, 205, 0, 206, 320, 207, 321, 208, 0, 209,
	210, 211, 212, 213, 322, 214, 215, 0, 216, 217,
	218, 219, 220, 222, 223, 221, 224, 225, 226, 227,
	0, 228, 0, 229, 230, 323, 231, 0, 235, 236,
	237, 238, 0, 240, 324, 239, 241, 242, 0, 243,
	232, 233, 244, 0, 245, 325, 326, 246, 0, 252,
	247, 248, 234, 249, 251, 327, 250, 328, 0, 253,
	0, 254, 255, 256, 257, 258, 259, 260, 0, 329,
	330, 331, 0, 0, 261, 262, 332, 333, 0, 263,
	264, 265, 266, 0, 0, 267, 268, 269, 270, 0,
	271, 0, 334, 272, 273, 274, 335, 336, 0, 0,
	275, 0, 125, 0, 0, 276, 277, 278, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 129,
	0, 130, 0, 0, 0, 0, 281, 0, 0, 0,
	1744, 131, 132, 133, 282, 283, 284, 285, 134, 286,
	287, 0, 135, 288, 289, 136, 137, 0, 0, 290,
	291, 292, 0, 138, 293, 0, 0, 0, 139, 140,
	141, 0, 142, 0, 143, 144, 145, 0, 0, 146,
	147, 0, 0, 0, 0, 0, 0, 0, 148, 149,
	342, 150, 294, 151, 295, 296, 0, 152, 0, 153,
	0, 154, 0, 0, 155, 156, 0, 157, 0, 0,
	0, 297, 158, 159, 160, 298, 299, 0, 0, 0,
	161, 162, 300, 301, 302, 0, 163, 0, 164, 0,
	0, 0, 0, 165, 303, 0, 304, 0, 166, 167,
	168, 169, 305, 306, 0, 0, 173, 0, 170, 0,
	0, 171, 307, 172, 308, 309, 310, 311, 312, 0,
	313, 0, 0, 174, 175, 176, 0, 177, 178, 179,
	0, 181, 180, 0, 314, 0, 182, 0, 0, 183,
	0, 0, 184, 0, 185, 186, 187, 189, 315, 188,
	0, 190, 191, 193, 192, 0, 0, 0, 316, 194,
	317, 195, 196, 0, 197, 0, 0, 198, 0, 0,
	199, 318, 0, 200, 0, 319, 201, 202, 203, 204,
	205, 0, 206, 320, 207, 321, 208, 0, 209, 210,
	211, 212, 213, 322, 214, 215, 0, 216, 217, 218,
	219, 220, 222, 223, 221, 224, 225, 226, 227, 0,
	228, 0, 229, 230, 323, 231, 0, 235, 236, 237,
	238, 0, 240, 324, 239, 241, 242, 0, 243, 232,
	233, 244, 0, 245, 325, 326, 246, 0, 252, 247,
	248, 234, 249, 251, 327, 250, 328, 0, 253, 0,
	254, 255, 256, 257, 258, 259, 260, 0, 329, 330,
	331, 0, 0, 261, 262, 332, 333, 0, 263, 264,
	265, 266, 0, 0, 267, 268, 269, 270, 0, 271,
	0, 334, 272, 273, 274, 335, 336, 0, 0, 275,
	0, 0, 0, 0, 276, 277, 278, 279, 280, 656,
	645, 646, 643, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 129, 0, 130, 866,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 688, 284, 689, 134, 690, 691, 0, 135,
	288, 289, 136, 137, 0, 0, 692, 693, 292, 0,
	138, 293, 0, 377, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 378, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 694,
	151, 695, 696, 0, 152, 0, 153, 0, 154, 0,
	0, 687, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 652, 0, 0, 161, 162, 697,
	698, 699, 0, 163, 0, 164, 0, 0, 379, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 381, 0, 173, 0, 170, 0, 380, 171, 700,
	172, 701, 702, 703, 704, 705, 0, 663, 0, 382,
	174, 175, 176, 383, 177, 178, 179, 0, 181, 180,
	0, 314, 384, 182, 385, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 386, 190, 191,
	193, 192, 0, 0, 653, 316, 194, 706, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 387,
	200, 388, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	707, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 389, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 390,
	245, 708, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 709, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 710, 711, 0, 0,
	261, 262, 332, 333, 651, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 712, 556, 553, 275, 0, 0, 820,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 377, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	378, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 379, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 381, 0, 173, 0,
	170, 0, 380, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 382, 174, 175, 176, 383, 177,
	178, 179, 0, 181, 180, 0, 314, 384, 182, 385,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 386, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 387, 200, 388, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 389, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 390, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 121, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 120, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 556, 553, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 124,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 377, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	378, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 379, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 381, 0, 173, 0,
	170, 0, 380, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 382, 174, 175, 176, 383, 177,
	178, 179, 0, 181, 180, 0, 314, 384, 182, 385,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 386, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 387, 200, 388, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 389, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 390, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 556, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 124,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 377, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	378, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 379, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 381, 0, 173, 0,
	170, 0, 380, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 382, 174, 175, 176, 383, 177,
	178, 179, 0, 181, 180, 0, 314, 384, 182, 385,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 386, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 387, 200, 388, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 389, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 390, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 1392,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	1390, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 1389, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 1394, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 1387, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 1393, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	1388, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 1392, 138, 293, 0, 0, 1432,
	139, 140, 141, 0, 142, 1390, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 1394, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 1431, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 1393,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 1435, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 1887, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 606, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 1123, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 853, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 606, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 847,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 606, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 753, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 477, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 476, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 1665,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 1663, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 1658,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 1099, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 493, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	987, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	0, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 850,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 796, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 791,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 764, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 506, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	502, 330, 331, 0, 0, 261, 765, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 743,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 741, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 738,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 734, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	138, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 732,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 183, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 188, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 323, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 241, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 329, 330, 331, 0, 0,
	261, 262, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	203, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 212, 213, 322, 595, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 231, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 125,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 0, 0, 0, 128, 129, 0, 130, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 131, 132,
	133, 282, 283, 284, 285, 134, 286, 287, 0, 135,
	288, 289, 136, 137, 0, 0, 290, 291, 292, 0,
	496, 293, 0, 0, 0, 139, 140, 141, 0, 142,
	0, 143, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 342, 150, 294,
	151, 295, 296, 0, 152, 0, 153, 0, 154, 0,
	0, 155, 156, 0, 157, 0, 0, 0, 297, 158,
	159, 160, 298, 299, 0, 0, 0, 161, 162, 300,
	301, 302, 0, 163, 0, 164, 0, 0, 0, 0,
	165, 303, 0, 304, 0, 166, 167, 168, 169, 305,
	306, 0, 0, 173, 0, 170, 0, 0, 171, 307,
	172, 308, 309, 310, 311, 312, 0, 313, 0, 0,
	174, 175, 176, 0, 177, 178, 179, 0, 181, 180,
	0, 314, 0, 182, 0, 0, 495, 0, 0, 184,
	0, 185, 186, 187, 189, 315, 506, 0, 190, 191,
	193, 192, 0, 0, 0, 316, 194, 317, 195, 196,
	0, 197, 0, 0, 198, 0, 0, 199, 318, 0,
	200, 0, 319, 201, 202, 203, 204, 205, 0, 206,
	320, 207, 321, 208, 0, 209, 210, 211, 212, 213,
	322, 214, 215, 0, 216, 217, 218, 219, 220, 222,
	223, 221, 224, 225, 226, 227, 0, 228, 0, 229,
	230, 497, 231, 0, 235, 236, 237, 238, 0, 240,
	324, 239, 498, 242, 0, 243, 232, 233, 244, 0,
	245, 325, 326, 246, 0, 252, 247, 248, 234, 249,
	251, 327, 250, 328, 0, 253, 0, 254, 255, 256,
	257, 258, 259, 260, 0, 502, 330, 331, 0, 0,
	261, 500, 332, 333, 0, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 270, 0, 271, 0, 334, 272,
	273, 274, 335, 336, 125, 0, 275, 0, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 0, 0, 0,
	128, 129, 0, 130, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 131, 132, 133, 282, 283, 284, 285,
	134, 286, 287, 0, 135, 288, 289, 136, 137, 0,
	0, 290, 291, 292, 0, 138, 293, 0, 0, 0,
	139, 140, 141, 0, 142, 0, 143, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	148, 149, 342, 150, 294, 151, 295, 296, 0, 152,
	0, 153, 0, 154, 0, 0, 155, 156, 0, 157,
	0, 0, 0, 297, 158, 159, 160, 298, 299, 0,
	0, 0, 161, 162, 300, 301, 302, 0, 163, 0,
	164, 0, 0, 0, 0, 165, 303, 0, 304, 0,
	166, 167, 168, 169, 305, 306, 0, 0, 173, 0,
	170, 0, 0, 171, 307, 172, 308, 309, 310, 311,
	312, 0, 313, 0, 0, 174, 175, 176, 0, 177,
	178, 179, 0, 181, 180, 0, 314, 0, 182, 0,
	0, 183, 0, 0, 184, 0, 185, 186, 187, 189,
	315, 188, 0, 190, 191, 193, 192, 0, 0, 0,
	316, 194, 317, 195, 196, 0, 197, 0, 0, 198,
	0, 0, 199, 318, 0, 200, 0, 319, 201, 202,
	0, 204, 205, 0, 206, 320, 207, 321, 208, 0,
	209, 210, 211, 0, 213, 322, 214, 215, 0, 216,
	217, 218, 219, 220, 222, 223, 221, 224, 225, 226,
	227, 0, 228, 0, 229, 230, 323, 0, 0, 235,
	236, 237, 238, 0, 240, 324, 239, 241, 242, 0,
	243, 232, 233, 244, 0, 245, 325, 326, 246, 0,
	252, 247, 248, 234, 249, 251, 327, 250, 328, 0,
	253, 0, 254, 255, 256, 257, 258, 259, 260, 0,
	329, 330, 331, 0, 0, 261, 262, 332, 333, 0,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 270,
	0, 271, 0, 334, 272, 273, 274, 335, 336, 0,
	0, 275, 0, 0, 0, 0, 276, 277, 278, 279,
	280, 878, 879, 0, 898, 899, 900, 908, 909, 910,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 912, 0, 878,
	879, 0, 898, 899, 900, 908, 909, 910, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 880, 0,
	0, 0, 881, 0, 895, 912, 0, 878, 879, 0,
	898, 899, 900, 908, 909, 910, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 880, 0, 0, 0,
	881, 0, 895, 912, 0, 0, 878, 879, 0, 898,
	899, 900, 908, 909, 910, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 880, 0, 0, 0, 886, 881,
	895, 0, 912, 0, 878, 879, 0, 898, 899, 900,
	908, 909, 910, 0, 0, 0, 0, 905, 913, 0,
	901, 0, 0, 880, 0, 0, 886, 881, 0, 895,
	912, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 913, 0, 0, 0,
	903, 880, 0, 0, 886, 0, 896, 895, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 913, 0, 0, 0, 903, 0,
	0, 902, 0, 886, 896, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 913, 0, 0, 903, 0, 0, 902,
	0, 886, 896, 0, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	905, 913, 0, 0, 0, 903, 0, 902, 0, 0,
	0, 896, 0, 0, 0, 906, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 903, 0, 0, 902, 0, 0, 896,
	0, 0, 0, 906, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 897, 892, 893, 894, 907, 0,
	891, 889, 890, 882, 883, 884, 885, 887, 888, 0,
	906, 0, 0, 0, 0, 0, 1528, 0, 0, 0,
	904, 0, 897, 892, 893, 894, 907, 0, 891, 889,
	890, 882, 883, 884, 885, 887, 888, 0, 906, 0,
	0, 2175, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 892, 893, 894, 907, 0, 891, 889, 890, 882,
	883, 884, 885, 887, 888, 0, 0, 0, 0, 2122,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	892, 893, 894, 907, 0, 891, 889, 890, 882, 883,
	884, 885, 887, 888, 0, 0, 0, 0, 2069, 0,
	0, 0, 0, 0, 0, 904, 0, 0, 892, 893,
	894, 907, 0, 891, 889, 890, 882, 883, 884, 885,
	887, 888, 0, 0, 878, 879, 2040, 898, 899, 900,
	908, 909, 910, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	912, 0, 878, 879, 0, 898, 899, 900, 908, 909,
	910, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 880, 0, 0, 0, 881, 0, 895, 912, 0,
	878, 879, 0, 898, 899, 900, 908, 909, 910, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 880,
	0, 0, 0, 881, 0, 895, 912, 0, 0, 878,
	879, 0, 898, 899, 900, 908, 909, 910, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 880, 0, 0,
	0, 886, 881, 895, 0, 912, 0, 878, 879, 0,
	898, 899, 900, 908, 909, 910, 0, 0, 0, 0,
	905, 913, 0, 901, 0, 0, 880, 0, 0, 886,
	881, 0, 895, 912, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 913,
	0, 0, 0, 903, 880, 0, 0, 886, 0, 896,
	895, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 905, 913, 0, 0,
	0, 903, 0, 0, 902, 0, 886, 896, 0, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 913, 0, 0, 903,
	0, 0, 902, 0, 886, 896, 0, 0, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 905, 913, 0, 0, 0, 903, 0,
	902, 0, 0, 0, 896, 0, 0, 0, 906, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 903, 0, 0, 902,
	0, 0, 896, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 0, 0, 0, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 904, 0, 897, 892, 893,
	894, 907, 0, 891, 889, 890, 882, 883, 884, 885,
	887, 888, 0, 906, 0, 0, 2035, 0, 0, 0,
	0, 0, 0, 904, 0, 897, 892, 893, 894, 907,
	0, 891, 889, 890, 882, 883, 884, 885, 887, 888,
	0, 906, 0, 0, 2031, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 892, 893, 894, 907, 0, 891,
	889, 890, 882, 883, 884, 885, 887, 888, 0, 0,
	0, 0, 1963, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 892, 893, 894, 907, 0, 891, 889,
	890, 882, 883, 884, 885, 887, 888, 0, 0, 0,
	0, 1928, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 892, 893, 894, 907, 0, 891, 889, 890, 882,
	883, 884, 885, 887, 888, 0, 0, 878, 879, 1927,
	898, 899, 900, 908, 909, 910, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 912, 0, 878, 879, 0, 898, 899,
	900, 908, 909, 910, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 0, 880, 0, 0, 0, 881, 0,
	895, 912, 0, 878, 879, 0, 898, 899, 900, 908,
	909, 910, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 880, 0, 0, 0, 881, 0, 895, 912,
	0, 0, 878, 879, 0, 898, 899, 900, 908, 909,
	910, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	880, 0, 0, 0, 886, 881, 895, 0, 912, 0,
	878, 879, 0, 898, 899, 900, 908, 909, 910, 0,
	0, 0, 0, 905, 913, 0, 901, 0, 0, 880,
	0, 0, 886, 881, 0, 895, 912, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 913, 0, 0, 0, 903, 880, 0, 0,
	886, 0, 896, 895, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 905,
	913, 0, 0, 0, 903, 0, 0, 902, 0, 886,
	896, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 913,
	0, 0, 903, 0, 0, 902, 0, 886, 896, 0,
	0, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 905, 913, 0, 0,
	0, 903, 0, 902, 0, 0, 0, 896, 0, 0,
	0, 906, 0, 0, 911, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 0, 0, 903,
	0, 0, 902, 0, 0, 896, 0, 0, 0, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	897, 892, 893, 894, 907, 0, 891, 889, 890, 882,
	883, 884, 885, 887, 888, 0, 906, 0, 0, 1839,
	0, 0, 0, 0, 0, 0, 904, 0, 897, 892,
	893, 894, 907, 0, 891, 889, 890, 882, 883, 884,
	885, 887, 888, 0, 906, 0, 0, 1747, 0, 0,
	0, 0, 0, 0, 904, 0, 0, 892, 893, 894,
	907, 0, 891, 889, 890, 882, 883, 884, 885, 887,
	888, 0, 0, 0, 0, 1723, 0, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 892, 893, 894, 907,
	0, 891, 889, 890, 882, 883, 884, 885, 887, 888,
	0, 0, 0, 0, 1250, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 892, 893, 894, 907, 0, 891,
	889, 890, 882, 883, 884, 885, 887, 888, 878, 879,
	1498, 898, 899, 900, 908, 909, 910, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 881, 0, 0, 912, 0, 878, 879, 0, 898,
	899, 900, 908, 909, 910, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 880, 0, 0, 0, 881,
	0, 895, 912, 0, 878, 879, 0, 898, 899, 900,
	908, 909, 910, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 880, 0, 1414, 0, 881, 0, 895,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 886, 2233, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 913, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 1568, 1415, 0, 1567, 0,
	0, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 913, 0, 0, 0, 903, 0, 0,
	0, 886, 0, 896, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 913, 0, 0, 0, 903, 0, 0, 902, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 2232, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 902, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 1170, 0, 0, 897, 0, 0, 878, 879, 0,
	898, 899, 900, 908, 909, 910, 0, 0, 0, 0,
	906, 0, 0, 901, 0, 0, 0, 1169, 0, 0,
	881, 0, 897, 912, 0, 878, 879, 0, 898, 899,
	900, 908, 909, 910, 0, 0, 0, 0, 906, 0,
	0, 901, 0, 0, 880, 0, 0, 0, 881, 904,
	895, 912, 892, 893, 894, 907, 0, 891, 889, 890,
	882, 883, 884, 885, 887, 888, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 0, 904, 895, 0,
	892, 893, 894, 907, 0, 891, 889, 890, 882, 883,
	884, 885, 887, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 904, 0, 0, 892, 893,
	894, 907, 0, 891, 889, 890, 882, 883, 884, 885,
	887, 888, 0, 905, 913, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 913, 0, 0, 0, 903, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 902, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 878, 879,
	0, 898, 899, 900, 908, 909, 910, 0, 0, 0,
	0, 906, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 881, 0, 897, 912, 0, 878, 879, 0, 898,
	899, 900, 908, 909, 910, 0, 0, 0, 0, 906,
	0, 0, 901, 0, 0, 880, 0, 0, 0, 881,
	0, 895, 912, 0, 878, 879, 0, 898, 899, 900,
	908, 909, 910, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 880, 1569, 0, 0, 881, 904, 895,
	912, 892, 893, 894, 907, 0, 891, 889, 890, 882,
	883, 884, 885, 887, 888, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 886, 904, 895, 0, 892,
	893, 894, 907, 0, 891, 889, 890, 882, 883, 884,
	885, 887, 888, 0, 905, 913, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 1574, 0,
	0, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 913, 0, 0, 0, 903, 0, 0,
	0, 886, 0, 896, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 913, 0, 0, 0, 903, 0, 0, 902, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 902, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 878, 879, 0,
	898, 899, 900, 908, 909, 910, 0, 1727, 0, 0,
	906, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	881, 0, 897, 912, 0, 878, 879, 0, 898, 899,
	900, 908, 909, 910, 0, 0, 0, 0, 906, 0,
	0, 901, 0, 0, 880, 1527, 0, 0, 881, 904,
	895, 912, 892, 893, 894, 907, 0, 891, 889, 890,
	882, 883, 884, 885, 887, 888, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 0, 904, 895, 0,
	892, 893, 894, 907, 0, 891, 889, 890, 882, 883,
	884, 885, 887, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 904, 0, 0, 892, 893,
	894, 907, 0, 891, 889, 890, 882, 883, 884, 885,
	887, 888, 0, 905, 913, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 913, 0, 0, 0, 903, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 902, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 878, 879,
	0, 898, 899, 900, 908, 909, 910, 0, 0, 0,
	0, 906, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 881, 0, 897, 912, 0, 878, 879, 0, 898,
	899, 900, 908, 909, 910, 0, 0, 0, 0, 906,
	0, 0, 901, 0, 0, 880, 0, 0, 0, 881,
	0, 895, 912, 0, 878, 879, 0, 898, 899, 900,
	908, 909, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 881, 904, 895,
	912, 892, 893, 894, 907, 0, 891, 889, 890, 882,
	883, 884, 885, 887, 888, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 886, 904, 895, 0, 892,
	893, 894, 907, 0, 891, 889, 890, 882, 883, 884,
	885, 887, 888, 0, 905, 913, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 913, 0, 0, 0, 903, 0, 0,
	0, 886, 0, 896, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 913, 0, 0, 0, 903, 0, 0, 902, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 878, 879, 0, 898, 899, 900, 908, 909,
	910, 0, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 881, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	906, 0, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 897, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 904,
	0, 0, 892, 893, 894, 907, 0, 891, 889, 890,
	882, 883, 884, 885, 887, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 886,
	892, 893, 894, 907, 0, 891, 889, 890, 882, 883,
	884, 885, 887, 888, 0, 0, 0, 0, 905, 913,
	0, 0, 0, 0, 0, 904, 0, 0, 892, 893,
	894, 907, 0, 891, 889, 890, 882, 883, 884, 885,
	887, 888, 0, 0, 1030, 1020, 1049, 1012, 1040, 1039,
	0, 903, 1014, 1013, 0, 0, 0, 896, 1051, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 1037, 1036, 0, 0, 0, 0, 0,
	0, 0, 0, 1035, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1034, 1032, 1033, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 1023, 1022, 1024, 1025, 1026, 1027, 1028, 0, 1048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1038,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 892, 893, 894, 907,
	0, 891, 889, 890, 882, 883, 884, 885, 887, 888,
	0, 0, 1031, 0, 0, 0, 1185, 1183, 1184, 1187,
	1186, 0, 0, 0, 1030, 1020, 1049, 1012, 1040, 1039,
	0, 0, 1014, 1013, 0, 0, 0, 0, 1051, 1050,
	0, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 585, 0, 0, 0, 0, 0,
	0, 1045, 0, 1037, 1036, 1015, 0, 0, 1046, 1047,
	0, 0, 564, 1035, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 0, 0, 0, 0, 0,
	1019, 1034, 1032, 1033, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 0, 0, 0, 0,
	565, 0, 0, 0, 0, 571, 572, 0, 0, 581,
	0, 1023, 1022, 1024, 1025, 1026, 1027, 1028, 0, 1048,
	0, 0, 586, 566, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1038,
	0, 0, 0, 1021, 0, 567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1031, 0, 0, 0, 0, 575, 0, 0,
	570, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 1046, 1047,
	0, 573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1019, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 578, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 0, 583, 0, 0, 0,
	589, 0, 0, 0, 0, 576, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582,
}
var sqlPact = [...]int{

	153, -1000, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18205, 18205, 1020, 22300, -1000,
	-1000, -1000, -1000, -1000, -1000, 804, 904, 752, 2607, 5589,
	22300, 22300, 21985, 1263, 1158, 1150, 1263, 23875, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 27655, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 472, 473, 472, 472, 467, 23875,
	1177, 584, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 953, 146, -1000, 946, -27, 15017, 31310,
	759, 27340, 22300, 1493, 15, 20410, 249, 153, 556, 13,
	18835, 22300, -1000, 22, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1292, 11372, 11372,
	327, 22, -1000, 1290, 1171, 1169, 20410, -1000, -1000, -1000,
	-1000, -1000, 27025, 26710, 26395, 26080, 25765, -1000, 13707, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 295, 292, -1000, 21670, -1000, 968, -1000,
	14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11372,
	11372, 928, -1000, 22300, -1000, 1726, 619, 291, 25450, -1000,
	1002, -1000, 377, 552, -1000, -1000, 14690, 27, 1002, -1000,
	1002, -1000, -1000, -1000, 555, 23875, -1000, -1000, -1000, -1000,
	-1000, 20410, -1000, 25135, 22300, 22300, 1186, 24820, -1000, 946,
	-1000, -1000, -1000, 1075, 1490, 1490, 1490, 1529, 140, 139,
	146, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1640, -1000, -1000, -1000, -1000, 1695, -1000, -1000, -1000, -1000,
	-1000, 1197, 17890, 888, 1484, 1289, -1000, 927, 1285, 1282,
	1280, 1278, 1277, -1000, 679, -1000, 1316, 479, -1000, 1274,
	952, 453, -1000, 1273, 1271, -1000, -1000, -1000, -1000, 376,
	21355, 24505, 22300, 21040, 9, 22300, -1000, 290, 9, 10011,
	10011, -1000, -1000, 249, -1000, 326, 17248, -1000, 8311, -1000,
	17890, 18835, 13, -13, -1000, -1000, -1000, 5262, 17890, 30668,
	-1000, 11372, 11372, 11372, 11372, 11372, 764, 320, -1000, 288,
	287, 6597, -1000, -1000, 1693, -1000, -1000, -1000, 147, -1000,
	-1000, 11372, 22, -1000, -1000, -1000, -1000, 284, 1722, -1000,
	438, -1000, -1000, -1000, 371, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1307, 283, 280, 277, -1000, -1000,
	-1000, -1000, 275, 273, 272, 271, 269, 266, 265, 264,
	263, 262, 259, 258, 255, 254, 253, 737, -1000, 412,
	-1000, -1000, 412, 412, -1000, 231, 231, 233, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 231, -1000, -1000, -1000,
	368, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 251, 30668,
	599, 16290, 22, -1000, -1000, -1000, 20410, 22300, 22300, 625,
	24190, -1000, 1391, 119, 1390, -1000, -149, 112, 1388, -1000,
	112, 1387, -13, 1382, 11, -1000, -1000, 249, 1587, 31237,
	-1000, 11372, -1000, -1000, 18205, 1488, 30668, 30668, 18205, -1000,
	-1000, 22300, 11372, -1000, 1579, 1002, -3, -1000, -1000, -1000,
	-1000, 1108, 1083, 516, 1042, 14363, 14036, 1450, -1000, -1000,
	-1000, 26, 5589, -1000, -3, -1000, 23875, -1000, 121, -1000,
	246, 1041, 387, 122, 23560, 387, 1040, -1000, 1075, -1000,
	969, 1145, 10692, 1128, 11372, 146, -1000, -1000, 146, 146,
	7618, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20725, -1000, -1000, 613, 22300, 1304, 18205, 22300, 22300,
	22300, 22300, 22300, -1000, -1000, 308, 1303, 22300, 1096, -1000,
	-1000, 22300, 22300, 730, 583, -1000, 765, 1381, 414, 803,
	1380, 687, 680, 1375, 22300, 9, 1577, 22300, 91, -1000,
	29917, -1000, 91, -1000, -1000, -1000, 22300, -6, -1000, 30668,
	-1000, 224, -1000, 22300, -1000, -1000, -30, -1000, 31037, 31237,
	5589, 569, 11372, 11372, 11372, 11372, 11372, 11372, 11372, 11372,
	11372, 11372, 11372, 11372, 11372, 11372, 11372, 11372, 11372, 11372,
	11372, 11372, 11372, 11372, 1115, 11372, 526, 11372, 11372, 11372,
	11372, 966, 852, 229, 902, -1000, 1628, 1628, 1628, 30724,
	30724, 218, 320, -1000, 11372, -1000, 10352, 139, 29282, 7,
	-1000, -1000, -1000, 7958, 403, 30668, 22, 6256, -1000, 1692,
	984, 1262, 1212, 244, 138, 136, 132, 11372, 11372, 12052,
	12052, 11372, 12392, 11372, 11372, 6937, 11372, 11372, 11372, 11372,
	11372, 11372, -1000, 239, -1000, -1000, -1000, -1000, 1690, -1000,
	-1000, 1684, -1000, 566, 564, 1672, -1000, 1264, -11, -1000,
	-1000, 375, 155, 1576, 155, 16610, -1000, 22300, 22300, -1000,
	22300, -1000, -1000, 22300, 5589, -1000, 22300, 22300, -1000, 22300,
	22300, 2534, 19150, -27, -12, -1000, 1585, -1000, -1000, -1000,
	-1000, 86, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 233, 737, 231, 231, 231, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 368, -1000, -1000, 412,
	412, 412, -1000, -1000, -18, 30668, 519, -1000, 1261, -1000,
	384, -19, 469, -3, 1002, 717, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1718,
	-5, -1000, -1000, -5, -1000, -1000, 5589, -1000, -1000, -1000,
	20410, 19465, 1573, 1372, 744, -1000, 1570, 22300, 916, 1031,
	-1000, 579, 1368, -1000, -1000, -1000, -1000, 30668, -1000, 367,
	-1000, -1000, 30668, 658, 1175, -1000, 1175, -7, -1000, 29704,
	1130, 22300, -1000, -1000, -1000, -1000, -1000, 22300, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 176, -1000, -1000, -1000,
	-1000, 22300, 22300, 22300, -89, 788, -1000, 19780, 1504, 1496,
	1460, 20410, 1550, -27, 1260, 1543, -27, 1258, 518, 22300,
	510, 509, 20410, -1000, 230, -20, 375, 10011, 15971, 5589,
	-1000, 375, 117, 8311, -1000, 1201, 980, -1000, 392, 17890,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	374, 1174, 1174, 575, 575, 575, 575, 1749, 1984, 2812,
	1469, 192, 192, 192, 794, 588, 588, 192, 192, 192,
	30724, 30696, 675, 11372, 11372, 506, 847, 229, 675, 11372,
	675, 675, 675, 675, -1000, 1353, -1000, -1000, -1000, -1000,
	1255, 228, 12392, 12392, -1000, -1000, -1000, 6597, 12732, -1000,
	-1000, -1000, -1000, 227, 11372, -1000, 29310, -197, -25, -1000,
	-1000, 11372, -94, -103, -1000, -1000, 628, -1000, 11372, -1000,
	-16, 11372, 11372, 11372, 116, 114, -1000, 504, -1000, 503,
	501, 500, -1000, 226, 767, 223, 222, 11372, -1000, -1000,
	-1000, 30455, 28291, 113, 1243, -136, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 109, 108, 30427, -136, 100, 3990, -1000,
	12392, 12392, 12392, 6597, 221, 99, 29676, -136, 30214, 9671,
	9671, 9671, 98, 30186, 11372, -136, 4122, 3906, 3855, -34,
	-38, -39, 1671, -40, 95, 373, 358, 93, 597, 1240,
	22300, 655, 11372, 718, -1000, 15652, 418, 22300, 655, 89,
	-1000, -1000, -1000, 347, 22300, -1000, -1000, -1000, 119, -1000,
	-1000, 112, 112, -13, -1000, -1000, -1000, -1000, 31237, 318,
	309, -1000, 1668, -1000, 11372, 22300, 22300, -1000, 1161, -1000,
	-1000, 709, -1000, 729, -1000, 15017, -1000, -1000, 80, -44,
	-29, 31237, -1000, -1000, -1000, -1000, -1000, 22300, 303, 22300,
	22300, -1000, 219, 1129, 1122, -27, 22300, -1000, 1710, -27,
	22300, 1366, 1402, 345, 22300, 658, -1000, 11372, 1663, -1000,
	-1000, -1000, 7618, -1000, -1000, -1000, 22300, -150, -68, -1000,
	-1000, -1000, -1000, -1000, 224, 749, 22300, 22300, 22300, -1000,
	-1000, 1029, 23245, 1025, 31237, 217, 22300, 22300, 22930, 22615,
	22300, 743, -27, -1000, 216, -27, -1000, 215, 22300, 672,
	22300, 22300, 667, -27, -1000, 1203, -1000, -159, 1519, 154,
	-181, 97, 355, -1000, 15333, -1000, 1203, -1000, -1000, 392,
	1235, 586, -1000, 855, -1000, 11372, 675, 675, 11372, 12392,
	12392, -1000, 675, -1000, -1000, -1000, -1000, -1000, 1233, 213,
	11372, 31237, 3705, 2779, -45, -1000, 9331, -35, -1000, 11372,
	-1000, 29253, -1000, -1000, 304, 1396, -1000, 11372, 30158, 79,
	8991, -1000, 29945, -33, -33, -1000, 1708, 1065, 938, 726,
	635, 1656, -1000, 16929, 401, 840, 29225, 31037, 31237, -1000,
	11372, -1000, -1000, 1231, 11372, -1000, 31037, 31237, 12392, 12392,
	12392, 12392, 12392, 12392, 12392, 12392, 12392, 12392, 12392, 12392,
	12392, 12392, 12392, 12392, 12392, 12392, 12392, 1117, 12392, 1624,
	1624, 1624, -36, 8651, -1000, 1299, 1231, 11372, 11372, 31237,
	78, 76, 74, -1000, 11372, -136, 11372, 11372, 11372, -1000,
	-1000, -1000, 72, -1000, 1653, -1000, -1000, -1000, -1000, -1000,
	596, -1000, -1000, 7277, 30668, -1000, 655, 1471, -51, -1000,
	-1000, -1000, 375, 16610, 15971, 8311, -53, -1000, -1000, -1000,
	-1000, 536, 1648, 71, 30668, -68, -68, -1000, -1000, -1000,
	-1000, -1000, 1190, -1000, 19465, -1000, 211, 22300, 13388, 209,
	771, 11372, 208, 207, -1000, 205, -1000, -1000, 204, 22300,
	1113, 345, 18520, -1000, 387, 876, 29197, -1000, 1486, 5589,
	22300, -1000, -1000, -1000, 498, 492, 1364, -1000, 1010, -1000,
	435, 785, -1000, 1357, 990, 1356, 990, -1000, -89, 741,
	-1000, 11372, -1000, 11372, -1000, 491, -1000, -1000, 489, 70,
	1206, 1520, -1000, 15971, 1144, 1134, 15971, 1252, 780, 780,
	780, -1000, 191, 312, 355, 4594, 11372, 20095, 800, 46,
	69, 1519, 1206, -1000, 17890, 562, 190, 1647, 675, 2564,
	2419, 11372, 31237, 30912, -55, 11372, 11372, -1000, -59, -1000,
	11372, 311, 30668, -1000, -1000, -1000, 30668, 11372, 1698, 11372,
	68, 67, 66, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57, -1000, -1000, 27970, 11372, 52, -1000, 51, 49,
	30668, 1299, 30668, -1000, -1000, 471, 471, 683, 683, 683,
	683, 1624, 2838, 662, 954, 206, 206, 206, 400, 681,
	681, 206, 206, 206, 1225, 1074, 189, 4057, 11372, -60,
	-1000, -1000, -1000, 30668, 30668, 44, -1000, -1000, -1000, -136,
	3461, 28857, 28829, -1000, 42, -1000, -93, -1000, -1000, 203,
	-27, 655, -1000, -107, -1000, 346, -1000, 310, 302, -1000,
	-1000, 1192, -1000, 2309, 13388, 179, -61, -1000, 315, 1481,
	11372, -1000, -1000, 170, 22300, -1000, 28800, 13388, 22300, 19465,
	1568, 13388, 911, 1124, 345, 18520, -1000, 579, -1000, -1000,
	-1000, 1486, -1000, 22300, 22300, 22300, 1352, -1000, -1000, 1120,
	1165, 455, 22300, -1000, 22300, -1000, 22300, 22300, 22300, -66,
	-67, 22300, 22300, -1000, 399, 11372, 11372, 1519, 15971, 15971,
	1584, 1132, 15971, -1000, -1000, -1000, -1000, 301, 369, 355,
	20095, -1000, 1638, 1118, -74, -1000, -1000, 22300, 169, -1000,
	355, 399, -128, 17575, 1706, 11372, 11372, 30912, -76, -1000,
	675, 675, -1000, 28772, -1000, 30668, -1000, 29945, -1000, -1000,
	-1000, -1000, 751, -1000, 28744, -1000, -1000, -1000, -1000, 12392,
	1218, 168, 31237, 28404, -1000, -1000, 11372, -1000, -1000, -1000,
	1408, 22300, 1458, -1000, -1000, 167, -1000, -1000, 760, -1000,
	22300, -1000, 5589, 22300, 1227, 1004, -1000, -1000, 1119, 164,
	12392, 22300, -80, 13388, 829, 13388, 1486, 22, 5589, 1486,
	28376, 6256, -81, -1000, -85, -114, 36, -27, -115, 22300,
	-1000, 345, 18520, -1000, 1402, -1000, -1000, -1000, -1000, 22300,
	1003, -1000, 989, 11372, -1000, 31237, 990, 990, -1000, 488,
	485, 482, 474, -1000, -1000, -1000, 22300, 30668, -136, -1000,
	1584, -1000, 163, 11372, 15971, -1000, -181, -1000, -119, -1000,
	20095, -1000, 300, -199, -1000, 343, -1000, 355, 162, 22300,
	20095, -1000, -1000, 161, 22, -120, -1000, 340, 675, 675,
	-1000, -1000, 35, 840, 1512, -1000, 4204, 12392, 31237, -121,
	-1000, 28347, 565, -140, 22300, -1000, -1000, 5916, 22300, 874,
	-1000, -1000, 22300, 1008, -1000, -1000, 11372, 4057, 160, 829,
	-151, 1190, 159, -1000, -1000, -1000, -1000, -1000, -1000, 1481,
	-16, -1000, -1000, 714, 1190, -1000, 829, 158, 18520, -1000,
	1113, -1000, -1000, -1000, 30668, 1479, -1000, -1000, 22300, 22300,
	152, 151, -134, -1000, 1558, -1000, 22300, 30668, -1000, 355,
	-1000, 1629, -1000, -1000, 1118, -1000, 4932, 20095, 22300, -160,
	-1000, 11372, 1706, -1000, -1000, 1701, -1000, 821, 11372, 4204,
	-161, -1000, -1000, 623, -1000, 375, -1000, 149, -1000, -1000,
	1350, 28319, 1068, 22300, 1190, 829, -1000, 22300, 1486, 34,
	22300, -1000, 1190, 13388, -1000, 1124, 440, 5589, -1000, -1000,
	11372, 11372, 22300, 144, -162, 20095, -1000, -1000, -1000, 1622,
	-1000, -166, -1000, -33, -1000, -1000, 33, 11712, 11712, -136,
	-1000, 16610, -1000, 22300, 1340, -1000, 880, 965, 32, -1000,
	1190, -171, -1000, -1000, 122, -1000, -172, -1000, -1000, 11372,
	-1000, -173, -182, -1000, -1000, -1000, -1000, 297, -1000, 31,
	-1000, -1000, -1000, 13061, 967, 643, 29648, -1000, -158, -189,
	22300, -1000, 907, 886, 659, -1000, -1000, -1000, -1000, -1000,
	-1000, 1068, 829, 30668, -1000, -1000, -1000, 1698, 1594, -1000,
	-1000, -1000, -1000, -1000, -1000, 860, -1000, -1000, 1419, -1000,
	447, 1084, 1084, 880, 1190, 11032, -1000, -1000, -1000, -1000,
	1607, -1000, -1000, 1116, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 2100, 2096, 1448, 1618, 2094, 2093, 2088, 2087, 2084,
	2082, 2075, 2074, 2069, 2068, 2065, 2062, 2061, 2058, 2057,
	2056, 2052, 2050, 1592, 2047, 2044, 2040, 2030, 2019, 2016,
	1571, 2010, 1567, 1558, 1504, 2009, 91, 84, 1481, 2008,
	2007, 1473, 2006, 2004, 2003, 2001, 2000, 46, 1999, 1998,
	1996, 1993, 1988, 1986, 145, 158, 1985, 1457, 1982, 1979,
	1976, 1975, 1971, 1969, 1968, 1966, 1965, 1962, 1960, 1957,
	1956, 1954, 1950, 1949, 1948, 1947, 154, 1946, 1942, 1444,
	1940, 1939, 20, 1937, 78, 1935, 23, 139, 2298, 134,
	1933, 1931, 1929, 86, 88, 89, 1926, 72, 1921, 1919,
	42, 27, 22, 16, 1917, 92, 1915, 1914, 1196, 25,
	1909, 1908, 140, 1906, 59, 21, 229, 149, 148, 123,
	126, 1904, 1903, 1899, 1898, 48, 1897, 2, 1895, 1893,
	13, 71, 14, 1892, 24, 35, 1890, 1886, 133, 1885,
	67, 98, 1416, 103, 119, 105, 1884, 70, 8, 63,
	1883, 1882, 147, 34, 1879, 45, 87, 137, 1877, 69,
	153, 57, 30, 62, 127, 1876, 1872, 1868, 120, 1867,
	111, 75, 1851, 1850, 60, 1849, 136, 138, 1843, 1842,
	93, 1840, 125, 1838, 1837, 155, 143, 110, 6, 43,
	68, 10, 1346, 1342, 128, 77, 29, 19, 1835, 2367,
	913, 967, 44, 94, 74, 55, 101, 49, 76, 144,
	41, 1832, 1831, 130, 1828, 1826, 1824, 1823, 1822, 99,
	1821, 1820, 65, 142, 11, 31, 54, 85, 28, 32,
	82, 108, 151, 106, 1819, 83, 118, 1818, 95, 1804,
	1801, 1974, 117, 1800, 1799, 1798, 1866, 1854, 1509, 736,
	1797, 1796, 1240, 876, 1794, 1793, 73, 1791, 115, 114,
	1786, 141, 150, 18, 1785, 124, 100, 96, 1784, 102,
	56, 0, 730, 587, 1783, 107, 61, 1780, 1778, 1776,
	1775, 26, 1, 9, 4, 7, 5, 79, 33, 1774,
	1773, 132, 80, 64, 1769, 152, 1768, 1765, 1764, 38,
	1763, 12, 1758, 15, 1753, 1746, 17, 3, 1744, 1740,
	135, 1738, 97, 1734, 1580, 1732, 146, 1731, 1729, 1683,
	40, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 7, 8, 6, 6, 6, 6, 9, 9, 10,
	16, 13, 18, 12, 12, 15, 15, 95, 95, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 92, 92, 97, 97, 97, 99,
	99, 96, 96, 91, 91, 20, 20, 269, 269, 270,
	270, 81, 81, 85, 85, 82, 83, 83, 84, 84,
	22, 22, 22, 21, 21, 23, 23, 23, 23, 23,
	23, 30, 31, 31, 31, 31, 31, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 144, 144, 143,
	143, 146, 146, 33, 33, 36, 36, 36, 36, 37,
	37, 37, 37, 37, 37, 37, 37, 237, 237, 236,
	35, 211, 211, 38, 169, 169, 39, 39, 39, 39,
	40, 46, 310, 310, 310, 314, 314, 315, 315, 316,
	316, 316, 316, 316, 316, 316, 312, 312, 44, 44,
	44, 44, 80, 49, 49, 49, 49, 49, 49, 51,
	53, 50, 50, 50, 52, 52, 54, 54, 54, 54,
	55, 55, 55, 55, 56, 56, 124, 124, 262, 261,
	261, 267, 267, 267, 122, 122, 122, 122, 122, 123,
	123, 123, 260, 260, 260, 260, 268, 268, 268, 268,
	268, 268, 266, 266, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 69, 69, 76, 76, 76, 76, 76, 76,
	58, 63, 63, 63, 59, 64, 65, 66, 66, 66,
	60, 60, 68, 68, 68, 67, 73, 73, 73, 73,
	70, 70, 70, 71, 71, 74, 74, 74, 61, 62,
	75, 72, 72, 72, 34, 311, 311, 313, 313, 42,
	26, 26, 27, 27, 125, 125, 126, 126, 190, 190,
	190, 190, 127, 127, 98, 98, 98, 189, 279, 279,
	280, 280, 280, 280, 280, 280, 281, 281, 281, 281,
	281, 281, 281, 277, 277, 278, 275, 275, 276, 276,
	276, 276, 317, 317, 188, 188, 130, 130, 284, 284,
	284, 284, 282, 282, 282, 282, 282, 285, 283, 286,
	286, 286, 286, 286, 223, 223, 223, 78, 28, 104,
	104, 29, 25, 25, 173, 173, 134, 134, 228, 228,
	228, 115, 115, 93, 93, 93, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 174, 174, 175,
	175, 43, 45, 48, 77, 77, 77, 77, 77, 319,
	319, 111, 111, 111, 111, 112, 112, 185, 185, 186,
	186, 187, 187, 187, 106, 105, 107, 107, 24, 24,
	100, 100, 101, 101, 102, 102, 103, 103, 320, 320,
	41, 41, 41, 118, 118, 182, 182, 182, 184, 184,
	183, 183, 183, 159, 159, 159, 79, 139, 139, 148,
	148, 149, 149, 234, 150, 150, 47, 47, 88, 88,
	86, 86, 86, 86, 86, 86, 87, 87, 89, 89,
	89, 89, 89, 89, 89, 292, 292, 292, 295, 295,
	291, 293, 293, 294, 294, 318, 318, 160, 160, 160,
	129, 128, 128, 132, 132, 131, 133, 133, 227, 227,
	227, 157, 157, 157, 157, 176, 176, 177, 177, 178,
	178, 179, 179, 179, 180, 180, 181, 181, 156, 156,
	207, 207, 90, 90, 138, 138, 140, 140, 197, 197,
	197, 198, 198, 196, 196, 196, 196, 229, 229, 229,
	229, 229, 229, 229, 308, 308, 308, 309, 309, 226,
	226, 230, 230, 230, 230, 230, 230, 224, 224, 224,
	224, 225, 225, 235, 235, 163, 163, 163, 163, 161,
	161, 162, 162, 231, 231, 231, 231, 158, 158, 232,
	232, 232, 191, 191, 238, 238, 238, 256, 256, 137,
	137, 137, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 240,
	240, 240, 240, 242, 242, 242, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 255, 255, 255, 255, 255, 243,
	243, 250, 250, 251, 251, 252, 253, 244, 244, 245,
	245, 246, 247, 254, 254, 254, 254, 258, 258, 248,
	248, 248, 248, 248, 249, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 171,
	171, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 201, 201, 201, 201, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 287, 287,
	287, 287, 287, 287, 287, 289, 289, 290, 290, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 296, 296,
	297, 297, 299, 299, 300, 300, 301, 302, 302, 302,
	303, 304, 304, 298, 298, 305, 305, 305, 306, 306,
	307, 307, 307, 307, 307, 213, 213, 213, 214, 214,
	215, 221, 221, 221, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	113, 113, 113, 113, 113, 145, 145, 210, 210, 208,
	208, 208, 212, 212, 164, 164, 257, 257, 257, 257,
	257, 257, 257, 165, 165, 165, 172, 166, 166, 167,
	167, 167, 167, 167, 167, 204, 205, 168, 168, 168,
	206, 206, 216, 220, 220, 219, 218, 218, 217, 217,
	194, 194, 195, 195, 193, 192, 153, 153, 152, 152,
	151, 151, 321, 321, 222, 222, 154, 154, 155, 147,
	147, 233, 233, 233, 233, 141, 141, 120, 120, 142,
	142, 116, 116, 119, 119, 117, 117, 117, 117, 135,
	135, 136, 136, 114, 114, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 259, 259, 259, 209,
	108, 108, 108, 109, 109, 110, 110, 264, 264, 264,
	265, 265, 265, 265, 263, 263, 263, 263, 263, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 6,
	6, 5, 5, 4, 12, 4, 12, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 3,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 2, 0, 7, 6, 1, 1, 1,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	4, 6, 7, 3, 3, 1, 1, 1, 1, 1,
	1, 6, 2, 2, 2, 2, 2, 3, 5, 4,
	6, 4, 6, 4, 6, 3, 5, 1, 3, 1,
	2, 2, 3, 2, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 3, 3, 0, 2, 3, 2, 3,
	6, 6, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 3, 4,
	5, 3, 2, 6, 3, 4, 3, 3, 3, 3,
	1, 3, 3, 1, 2, 2, 1, 0, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 1, 1, 1, 1, 1, 2,
	3, 4, 4, 4, 4, 2, 4, 4, 4, 4,
	4, 4, 2, 3, 3, 2, 4, 5, 4, 5,
	2, 3, 3, 4, 2, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 3,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 5, 2,
	0, 6, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 3, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 6, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 7, 4, 6,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -21, -22, -23, -30,
	-31, -32, -33, -34, -35, -38, -39, -40, -41, -42,
	-45, -46, -48, -47, -49, -57, -77, -43, -44, -78,
	-79, -5, -6, -7, -8, 34, 238, 47, 67, -24,
	-25, -26, -27, -28, -29, -294, 93, 97, 106, 130,
	218, 104, 89, 124, 212, 240, 242, 249, -86, -88,
	-50, -51, -52, -53, -80, 260, -58, -59, -60, -61,
	-62, -63, -64, -65, -66, -67, -68, -69, -70, -71,
	-72, -73, -74, -75, 35, 272, 61, 100, 244, 236,
	237, 300, -9, -10, -13, -12, -11, -16, -18, -15,
	-17, -19, -14, 69, -292, -89, -87, 351, 309, 263,
	23, 325, 332, 253, -90, 281, 317, 354, -310, -142,
	281, 82, -117, -108, 344, 4, -271, -273, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 67, 68, 71, 72, 80, 81,
	83, 85, 89, 91, 93, 96, 97, 99, 104, 105,
	106, 112, 113, 118, 120, 125, 130, 131, 132, 133,
	140, 143, 145, 138, 155, 156, 157, 159, 160, 161,
	164, 163, 168, 171, 174, 176, 177, 178, 181, 179,
	183, 184, 186, 185, 191, 193, 194, 196, 199, 202,
	205, 208, 209, 210, 211, 212, 214, 216, 218, 220,
	221, 222, 223, 224, 226, 227, 229, 230, 231, 232,
	233, 236, 234, 235, 237, 238, 239, 240, 242, 244,
	245, 247, 261, 262, 273, 249, 250, 251, 252, 256,
	254, 257, 258, 260, 263, 265, 268, 271, 272, 274,
	277, 275, 270, 280, 282, 283, 284, 285, 286, 287,
	288, 295, 296, 300, 301, 302, 303, 306, 307, 308,
	309, 311, 314, 315, 316, 321, 326, 327, 328, 329,
	330, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 84, 86, 87, 103, 107, 108,
	114, 115, 116, 126, 128, 134, 135, 144, 146, 147,
	148, 149, 150, 152, 166, 180, 190, 192, 203, 207,
	215, 217, 225, 246, 255, 266, 267, 276, 278, 290,
	291, 292, 297, 298, 313, 317, 318, -310, 156, 222,
	-116, -108, 82, 91, 143, 308, 307, 22, 214, 254,
	283, 285, 82, 139, 281, 320, 310, -37, 351, -36,
	-23, -32, -4, -57, -34, -38, -33, -47, -41, -79,
	-30, -263, 4, -271, -273, -272, -274, 58, 70, 123,
	142, 136, 154, 158, 167, 169, 182, 204, 206, 243,
	264, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 65, 69, 73, 74,
	76, 75, 77, 78, 79, 88, 90, 92, 94, 95,
	98, 100, 102, 109, 110, 111, 119, 121, 122, 124,
	127, 129, 137, 139, 141, 151, 153, 162, 165, 170,
	172, 173, 187, 188, 189, 195, 197, 198, 200, 201,
	213, 219, 228, 241, 253, 259, 269, 279, 281, 289,
	293, 294, 299, 304, 305, 310, 312, 319, 320, 322,
	323, 324, 325, -108, -108, -108, 218, 22, -314, 22,
	-315, -316, 69, 97, 124, 253, 143, 91, 307, 156,
	156, -314, -112, 249, -108, 171, 55, 246, 257, -55,
	296, -54, 290, -262, -56, -143, 181, -108, -319, 296,
	296, -319, -319, -111, 296, 293, -112, 4, 82, 259,
	181, -318, 281, 281, 310, 320, -173, 82, 305, -87,
	-89, -88, -131, -132, 304, 151, 102, 201, -86, -88,
	-292, -267, -260, -223, 9, 299, 109, 197, -266, 8,
	343, -259, -265, 5, 7, 342, 4, -271, -273, -272,
	-76, 257, 34, 55, 22, 60, 83, 125, 139, 140,
	160, 65, 66, 221, 171, 157, 295, 161, 258, 282,
	296, 69, 311, 286, 105, 4, 82, 181, 259, 290,
	281, 139, 82, 320, -295, 226, -291, -108, -295, -128,
	-129, 22, 94, 355, -231, -116, 198, -155, 351, -3,
	293, 355, -142, -135, -108, -193, -192, 353, 122, -199,
	-201, 342, 343, 337, 187, 331, -213, -203, -216, 103,
	246, 351, -116, -202, 356, 9, -289, -88, 29, -214,
	-215, 49, -108, 7, 8, 5, 6, -114, -240, -209,
	-249, 299, 109, 189, -287, -288, 4, -271, -264, -241,
	-251, -245, -248, 152, 58, 74, 75, 78, 76, 79,
	259, 310, 50, 28, 107, 108, 207, 215, 278, 297,
	298, 134, 190, 135, 56, 126, 166, 96, 37, 39,
	41, 42, 51, 52, 84, 86, 87, 114, 115, 116,
	144, 146, 147, 148, 149, 150, 192, 225, 266, 276,
	291, 292, 318, -272, -252, -253, -246, -247, -254, -199,
	122, 351, -152, -153, -192, -193, 122, 153, 153, -232,
	-231, -108, 134, -120, 134, -119, -116, -144, 134, -143,
	-144, 134, -135, 134, -237, -236, -265, 317, -211, 351,
	-169, 351, -108, 22, 197, 355, -199, -199, 197, -108,
	2, 261, 351, -55, 53, 296, -186, -187, -105, -106,
	-107, 155, 220, 224, 330, 293, 336, 122, -267, -124,
	88, -146, 353, -185, -186, -185, 293, -112, -158, -231,
	-143, 134, -108, -143, 139, -108, 134, -131, -132, -157,
	-176, -177, 170, 111, 195, -160, 22, 94, -160, -160,
	44, 352, 352, 8, 7, 7, -76, 22, -269, -266,
	9, 261, 221, 258, 55, 122, -311, 197, 122, 122,
	122, 122, 122, 221, 258, 119, 295, 122, 155, 220,
	273, 281, 320, 122, 122, 330, -231, 134, -116, -119,
	134, -108, -231, 134, 355, -295, -136, 351, -147, -233,
	-199, 344, -147, -155, 344, -116, 351, -154, -222, -199,
	88, -269, -117, 355, -263, 344, -270, -269, 10, 11,
	57, 33, 342, 343, 344, 345, 117, 346, 347, 340,
	341, 339, 334, 335, 336, 63, 175, 248, 13, 14,
	15, 26, 200, 169, 331, 136, 264, 337, 16, 17,
	18, 154, 36, 137, -113, -121, -199, -199, -199, -199,
	-199, 206, -151, -194, 349, -88, 351, -88, -199, -145,
	7, -88, -208, 349, -217, -199, -152, 351, 5, 351,
	5, -296, 326, 119, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 217, -258, 321, -258, -258, -242, 351, -242,
	-243, 351, -242, 327, 332, 351, 274, 352, -141, -116,
	-153, -232, -118, -116, -118, 260, -108, 30, 103, -97,
	355, 48, 239, 103, 356, -97, 355, 103, -97, 103,
	103, 352, 355, 30, -210, -238, -239, -241, -250, -244,
	-248, -249, 40, 46, 45, 288, 180, 255, 267, 313,
	38, 196, 145, 144, 146, 147, 148, 149, 150, 266,
	37, 225, 115, 116, 114, 96, 87, 86, 192, 42,
	41, -252, -253, -246, -247, 84, 291, 292, 152, 39,
	52, 51, 318, 276, -145, -199, -310, -316, -310, -54,
	-262, -145, 30, -186, 355, 168, -123, 174, 186, 131,
	198, 328, -268, 5, 4, -209, -223, 88, 171, -249,
	-261, 88, -267, -261, 88, 72, 353, -263, -112, -97,
	355, 351, -130, 187, -293, 325, -130, 351, -109, 134,
	-108, -293, 187, -157, -177, -176, -178, -199, 22, -181,
	113, 183, -199, -201, -87, -87, -87, -133, -227, -199,
	219, 139, -143, 22, 262, -262, -313, 119, -310, -262,
	-262, -262, -262, -262, 257, -37, 119, -108, 168, -262,
	-262, 281, 139, 281, -95, 234, -94, 21, 23, 97,
	315, 103, 270, 287, 250, 270, 287, 250, 234, 103,
	234, 234, 103, -291, 30, -135, -138, 355, 122, 30,
	4, -138, -116, 355, 352, -235, 333, -108, -235, 355,
	-256, -238, -255, 230, 231, 229, 233, 232, -238, -263,
	290, -199, -199, -199, -199, -199, -199, -199, -199, -199,
	-199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
	-199, -199, -199, 169, 136, 264, 36, 137, -199, 293,
	-199, -199, -199, -199, 179, 187, 189, 299, 109, 306,
	94, 193, -321, 279, 32, -206, -88, 351, -221, 27,
	269, 22, -213, 246, 351, -194, -199, -195, -145, 352,
	352, 355, -145, -212, 350, -208, -220, -219, 322, 352,
	-145, 319, 22, 94, 344, 7, -170, 329, 178, 85,
	132, 177, -171, 252, -297, 112, 127, 351, 352, 352,
	352, -199, -199, -164, -257, -145, 4, 329, 178, 85,
	132, 177, 252, -164, -165, -199, -145, -166, -200, -201,
	342, 343, 337, 351, 246, -167, -199, -145, -199, 43,
	165, 294, -168, -199, 122, -145, -199, -199, -199, -145,
	-145, -145, 351, 7, 7, 290, 290, 7, 122, 352,
	355, -191, 323, -182, -47, 351, 88, 30, -182, -148,
	-149, -234, -150, -116, 351, -108, -108, -119, -120, -263,
	-143, -144, -144, -135, -37, -236, -36, 352, 355, -137,
	29, -170, 351, 352, 355, 293, 122, 352, 296, -187,
	-122, 224, 268, 235, 256, 355, -263, -231, -125, -135,
	-126, -108, -190, -189, -277, -278, -275, 139, 305, 110,
	65, -276, 54, 219, 121, 30, 103, -104, 211, 30,
	197, 187, -100, 284, 103, -179, -259, 351, 343, -180,
	246, 247, 355, -93, 31, 92, 159, -116, -312, -108,
	257, -37, -116, -119, -116, 355, 293, -174, 65, 59,
	-189, 134, 59, -275, -108, 305, -174, 65, -174, 65,
	65, -231, 33, -47, 122, 33, -47, 122, 293, -119,
	293, 293, -231, 351, 352, -191, -233, -140, -229, 349,
	-231, -116, -88, -230, 351, -263, -191, 352, -222, -81,
	133, 193, -84, 325, -269, 330, -199, -199, 293, -321,
	279, -206, -199, 179, 189, 299, 109, 306, 94, 193,
	122, 351, -200, -200, -145, -203, 351, -145, 350, 359,
	352, -199, 350, 350, 355, -218, -219, 98, -199, -132,
	355, -131, -199, -145, -145, 352, 352, 293, 293, 293,
	293, 351, -302, 205, 351, 351, -199, 30, 355, 352,
	122, 352, 352, -172, 213, 352, 10, 11, 342, 343,
	344, 345, 117, 346, 347, 340, 341, 339, 334, 335,
	336, 63, 175, 248, 13, 14, 15, 154, 137, -200,
	-200, -200, -145, 351, 352, -204, -205, 122, 119, 30,
	-168, -168, -168, 352, 122, -145, 355, 355, 355, 352,
	352, 352, 7, 352, 355, 352, 330, 330, 352, 274,
	122, -116, -159, 241, -199, -159, -184, 197, -141, 317,
	-108, -159, -139, 355, 122, 336, -141, -97, -97, -97,
	-238, 349, 349, 7, -199, -312, -312, -105, 303, 62,
	224, -267, 352, 352, 355, -238, -109, 139, 351, -109,
	-108, 351, 159, 159, -47, -143, 5, -47, -116, 103,
	-101, 99, -320, 336, -108, -180, -199, -227, -116, 356,
	355, -235, -94, -116, -108, -108, 187, -189, 134, -99,
	187, -108, -108, 134, -108, 134, -108, -108, -95, 234,
	-47, 351, -47, 351, -108, 234, -108, -116, 234, -36,
	-156, 127, -235, 355, 70, -163, 158, 182, 123, 167,
	243, 142, 7, -37, -196, 356, 351, -226, 332, -88,
	-230, -229, -156, -84, 122, 280, 199, -199, -199, -200,
	-200, 122, 351, -199, -210, 26, 26, 352, -145, 352,
	355, -195, -199, 352, -208, 100, -199, 289, 352, 319,
	-132, -132, -132, 5, 178, 132, 177, -171, 177, -171,
	-171, 7, -303, -108, 351, 323, -131, 352, -256, -238,
	-199, -204, -199, -256, -238, -200, -200, -200, -200, -200,
	-200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
	-200, -200, -200, -200, 94, 187, 193, -200, 355, -145,
	352, -205, -204, -199, -199, -238, 352, 352, 352, -145,
	-199, -199, -199, 352, 7, 274, -147, 188, -159, 64,
	352, -191, -149, -140, -222, 352, 350, 7, 7, 352,
	-127, 138, -190, -279, 351, -109, -134, -228, -108, -290,
	351, -287, -288, -114, 351, -276, -199, 351, 351, 351,
	-130, 351, -108, -102, 164, -320, -266, -293, 198, 352,
	-93, -263, -108, 293, 293, 103, 187, 314, -92, 97,
	260, -175, 103, -97, 103, -97, 293, -174, 65, -145,
	-145, 293, 293, 352, -207, 129, 44, -229, 158, 158,
	-229, -163, 158, -161, 204, -161, -161, -308, 351, 350,
	-226, -263, 349, 357, -145, -225, -224, 30, -108, 202,
	352, -207, -270, 290, 351, 26, 26, -199, -210, 352,
	-199, -199, 352, -199, 350, -199, 5, -199, 352, 352,
	352, 352, -304, -108, -199, 352, 352, 352, -205, 122,
	94, 193, 351, -199, 352, 352, 355, 352, 352, 352,
	-183, 351, 197, -47, -159, 336, 350, 350, 137, -280,
	65, -281, 57, 110, 69, 187, 189, 305, 219, 54,
	88, 228, -134, 351, 352, 355, -115, -152, 57, -115,
	-199, 351, -135, 352, -134, -135, -125, 30, -134, 197,
	-103, 163, -320, -266, -100, -93, -108, -108, -189, 103,
	187, 88, 187, 88, 81, 301, -108, -108, -116, -108,
	-108, 352, 352, -108, -116, -299, 324, -199, -145, -229,
	-229, -162, 312, 197, 158, -229, 350, 352, -309, 7,
	-226, -225, 7, -198, -197, 120, 185, 352, -108, 351,
	-226, -299, -202, -114, -108, -83, -82, 5, -199, -199,
	352, 352, -132, -298, 210, 352, -200, 122, 351, -210,
	352, -199, 95, -135, 65, -155, -88, 351, 208, -108,
	-263, -108, 110, 134, 189, 159, 351, -200, -116, 352,
	-134, -188, -317, 68, 277, -228, -93, -263, -93, 352,
	-145, 352, 352, 352, 352, -47, 352, -116, -320, -266,
	-101, -189, 189, 189, -199, -238, -97, -97, 293, 293,
	293, 293, -300, -301, -108, -162, 351, -199, -229, -196,
	352, 355, -225, 350, 355, 358, 336, -226, 351, -135,
	-224, 351, 355, 352, -85, 336, 352, -132, 44, -200,
	-210, 352, 352, 307, 188, 352, -108, -108, -281, -109,
	187, -199, -110, 351, -188, 352, -127, 351, -115, -132,
	228, -127, -188, 351, -266, -102, -96, 57, -108, -108,
	351, 351, 355, 30, -135, -226, 7, -197, -263, 349,
	-225, -135, 352, -145, -82, 5, -305, 223, 247, -145,
	352, 260, -191, 351, 103, 352, -284, 176, -108, -127,
	-188, -135, -93, 352, -116, -127, -134, -103, -91, 312,
	-263, -145, -145, -301, -303, 352, -224, 7, 352, -132,
	352, -306, -307, 36, 302, 72, -199, -306, -148, -135,
	110, -282, -285, -283, 197, 123, 209, 265, 352, -127,
	352, -130, 352, -199, 352, 352, 350, 352, -307, 216,
	118, 246, 216, 118, -191, 352, -108, -283, 197, -285,
	197, 307, 91, -284, -188, 26, -98, 48, 239, -286,
	184, 239, 48, 260, -286, -282, -127, -307, 20, 189,
	88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 466, -2,
	183, 184, 185, 186, 187, 0, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 410, 0, 410, 410, 414, 0,
	0, 496, 36, 37, 38, 39, 40, 43, 44, 45,
	46, 41, 42, 375, 493, -2, 504, 0, 0, 0,
	0, 0, 0, 502, 480, 0, 0, -2, 0, 162,
	0, 1041, 969, 975, 976, 1000, 1001, 1002, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 0, 0, 0,
	0, 971, 1041, 0, 0, 0, 0, 112, 113, 114,
	115, 116, 0, 0, 0, 0, 0, 133, 0, 139,
	140, 141, 142, 143, 144, 145, 146, 135, 136, 137,
	138, 294, 1014, 1015, 1016, 1017, 1018, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 152, 155, 156, 1100, 158, 0, 165,
	166, 167, 169, 170, 171, 172, 173, 174, 175, 0,
	0, 0, 403, 1127, 416, -2, 1029, 1215, 1133, 192,
	1154, 200, 1221, 0, 203, 208, -2, 129, 418, 409,
	418, 406, 407, 408, 411, 0, 401, 178, 179, 180,
	181, 0, 495, 0, 0, 0, 0, 0, 374, -2,
	476, 477, -2, 0, 499, 499, 499, 0, 0, 477,
	0, 182, 211, 212, 213, 222, 223, 224, 225, 364,
	0, 366, 232, 233, 996, 0, 1010, 1011, 1012, 1013,
	252, 0, 0, 0, 255, 0, 265, 296, 0, 0,
	0, 0, 0, 272, 0, 275, 0, 0, 280, 284,
	0, 0, 290, 0, 0, 254, 256, 257, 258, 0,
	0, 0, 0, 0, 485, 1106, 488, 982, 486, 0,
	0, 501, 500, 0, 481, 583, 0, 532, 0, 2,
	0, 0, 163, 164, 979, 977, 978, 0, 0, 103,
	691, 0, 0, 0, 0, 0, 0, 783, 785, 1189,
	1215, 0, 787, 788, 0, 790, 792, 793, 0, 796,
	797, 939, 971, 985, 986, 987, 988, 0, 0, 991,
	0, 993, 994, 995, 839, 806, -2, -2, 983, 619,
	620, 621, 622, -2, 1229, 810, 812, 814, 816, 817,
	818, 819, 0, 1173, 1190, 1191, 1211, 1212, 1220, 1224,
	1225, 1197, 1208, 1198, 1185, 1195, 1206, 1047, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1009, 653, 654, 659, 660, 662, 104,
	0, 0, 972, 948, 946, 947, 0, 0, 0, 0,
	589, 117, 1197, 78, 1197, 967, 974, 78, 1197, 127,
	78, 1197, 125, 1197, 0, 147, 149, 1227, 0, 0,
	153, 0, 157, 159, 0, 0, 299, 402, 0, 415,
	188, 0, 0, 191, 1184, 1154, 194, 419, 421, 422,
	423, 0, 0, 0, 0, 0, 0, 0, 204, 205,
	206, 130, 0, 404, 417, 405, 0, 413, 78, 587,
	347, 1197, 492, 347, 1004, 492, 1197, -2, 0, 472,
	513, 514, 0, 0, 0, 0, 497, 498, 0, 0,
	0, 468, 469, 365, 998, 997, 253, 255, 260, 87,
	88, 0, 273, 281, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 274, 282, 494, 0, 0, 0, 286,
	287, 0, 0, 0, 0, 259, 0, 1197, 583, 0,
	1197, 0, 0, 1197, 0, 487, 0, 0, 535, 959,
	963, 964, 535, 533, 584, 585, 0, 0, 956, 954,
	955, 574, 970, 0, 944, 945, 574, 89, 0, 0,
	0, 0, 874, 875, 876, 877, 878, 879, 882, 883,
	880, 881, 884, 885, 886, 0, 0, 0, 887, 888,
	889, 0, 0, 891, 0, 893, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 890, 696, 697, 698, 720,
	721, 0, 784, 950, 943, 786, 0, -2, 895, 0,
	789, 794, 795, 0, 0, 938, -2, 0, 990, 0,
	688, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 918, 924, 0, 0, 0, 0, 0, 0,
	0, 0, 638, 656, 667, 664, 663, 640, 0, 639,
	637, 0, 641, 0, 0, 0, 100, 0, 0, 965,
	949, 593, 0, 443, 0, 0, 590, 0, 0, 119,
	0, 76, 77, 0, 0, 121, 0, 0, 123, 0,
	0, 494, 0, 494, 0, 897, 601, 602, 603, 604,
	605, 688, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 650, 0, 625, 625, 625, 642,
	643, 651, 652, 657, 658, 669, 670, 672, 674, 668,
	668, 668, 665, 666, 0, 895, 0, 168, 0, 189,
	0, 0, 0, 195, 0, 0, 424, 219, 220, 221,
	426, 427, 201, 226, 227, 228, 229, 230, 231, 0,
	196, 198, 209, 197, 199, 202, 0, 131, 412, 367,
	0, 305, 0, 0, 370, 491, 0, 0, 0, 1197,
	1003, 431, 0, 475, 511, 512, 515, 519, 520, 523,
	526, 527, 517, 691, 482, 483, 484, 505, 506, 385,
	0, 0, 261, 262, 263, 264, 266, 0, 295, 267,
	268, 269, 270, 271, 276, 278, 494, 283, 285, 288,
	289, 0, 0, 0, 47, 398, 57, 0, 398, 398,
	0, 0, 0, 0, 53, 0, 0, 55, 0, 0,
	0, 0, 0, 489, 0, 0, 593, 0, 0, 0,
	962, 593, 0, 0, 958, 92, 0, 980, 99, 0,
	692, 597, 598, 644, 645, 646, 647, 648, 693, 694,
	0, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, -2, -2, -2, 712, 713, 714, -2, -2, -2,
	718, 719, -2, 892, 894, 0, 953, 0, -2, 0,
	-2, -2, -2, -2, 732, 0, 734, 737, 739, 741,
	0, 0, 0, 0, 952, 751, 930, 0, 0, 871,
	872, 873, 736, 0, 0, 951, 942, 0, 0, -2,
	791, 0, 0, 0, 901, 902, 937, 933, 0, 798,
	504, 0, 0, 0, 0, 0, 999, 675, 676, 677,
	678, 679, 680, 689, 849, 0, 0, 0, 811, 813,
	815, 0, 0, 0, 0, 905, -2, -2, -2, -2,
	-2, -2, -2, 0, 0, 895, 915, 0, 0, 754,
	0, 0, 0, 0, 1215, 0, 895, 923, 0, 0,
	0, 0, 0, 895, 0, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 455, 0, 455, 445, 0, 0, 0, 455, 458,
	459, 461, 462, 0, 0, 591, 118, 968, 78, 973,
	128, 78, 78, 126, 134, 148, 150, 151, 0, 594,
	596, 606, 0, 154, 0, 0, 0, 190, 0, 420,
	425, 0, 216, 0, 218, 0, 132, 588, 0, 0,
	304, 979, 306, 308, 309, 310, 311, 1004, 0, 1004,
	0, 337, 0, 0, 0, 0, 0, 368, 0, 0,
	0, 0, 433, 439, 0, 0, 521, 0, 0, 518,
	524, 525, 0, 508, 383, 384, 0, 0, 297, 176,
	277, 279, 291, 292, 574, 0, 0, 0, 0, 397,
	59, 1197, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 52, 0, 0, 0,
	0, 0, 0, 494, 981, 529, 960, 574, 536, 494,
	546, 583, 560, 551, 0, 961, 529, 586, 957, 99,
	0, 0, 86, 0, 90, 0, -2, -2, 0, 0,
	0, 752, -2, 733, 735, 738, 740, 742, 0, 0,
	0, 0, 0, 0, 0, 753, 0, 0, 940, 943,
	-2, 896, 899, 900, 0, 0, 934, 0, 0, 0,
	0, 503, 504, 504, 504, 804, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 0, 0, 822,
	0, 823, 824, 0, 0, 825, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 759, 0, 0, 826, 921, 922, 0, 0, 0,
	0, 0, 0, 831, 0, 928, 0, 0, 0, 835,
	836, 837, 0, 623, 0, 649, 671, 673, 661, 101,
	0, 966, 111, 0, 592, 440, 455, 0, 0, 447,
	444, 442, 593, 0, 0, 0, 0, 120, 122, 124,
	898, 0, 0, 0, 896, 160, 161, 193, 214, 215,
	217, 210, 313, 346, 0, 319, 0, 1004, 0, 0,
	0, 0, 0, 0, 302, 347, 369, 371, 0, 0,
	435, 439, 0, 438, 492, 0, 0, 507, 385, 0,
	0, 293, 58, 387, 0, 0, 0, 61, 1197, 69,
	0, 400, 70, 1197, 78, 1197, 78, 71, 48, 398,
	49, 0, 50, 0, 395, 0, 386, 393, 0, 0,
	531, 0, 534, 0, 0, 0, 0, 0, 580, 580,
	580, 578, 554, 0, 560, 0, 0, 572, 0, -2,
	551, 0, 531, 85, 0, 0, 0, 695, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 931, 0, 866,
	0, 0, 942, -2, 903, 932, 936, 0, 799, 0,
	0, 0, 0, 992, 681, 682, 683, 684, 685, 686,
	687, 0, 847, 848, 852, 0, 0, 809, 0, 0,
	904, 914, 916, 755, 756, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, -2, -2, -2, 773, 774,
	775, -2, -2, -2, 0, 0, 0, 917, 0, 0,
	869, 919, 920, 925, 926, 0, 828, 829, 830, 927,
	0, 0, 0, 655, 0, 102, 453, 454, 441, 452,
	0, 455, 460, 457, 463, 0, 599, 0, 0, 607,
	300, 0, 307, 317, 0, 0, 0, 376, 382, 382,
	0, 807, 808, 0, 0, 336, 0, 0, 0, 305,
	0, 0, 0, 437, 439, 0, 430, 431, 516, 522,
	509, 385, 177, 0, 0, 0, 0, 79, 63, 0,
	0, 0, 0, 67, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 490, 843, 0, 0, 537, 0, 0,
	0, 0, 0, 575, 579, 576, 577, 0, 0, 560,
	572, 543, 0, 0, 0, 550, 571, 0, 570, 559,
	-2, 843, 91, 0, 0, 0, 0, -2, 0, 745,
	-2, -2, 865, 896, 941, 935, 989, 504, 800, 802,
	803, 690, 854, 851, 0, 838, 820, 821, 913, 0,
	0, 0, 0, 896, 868, 827, 0, 833, 834, 624,
	0, 0, 0, 446, 456, 0, 600, 595, 0, 318,
	0, 321, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 345, 0, 385, 984, 0, 385,
	0, 0, 0, 338, 0, 0, 0, 0, 0, 0,
	428, 439, 0, 432, 433, 510, 389, 391, 60, 0,
	0, 75, 0, 0, 399, 0, 78, 78, 388, 0,
	0, 0, 0, 396, 394, 478, 0, 530, 528, 562,
	0, 564, 0, 0, 0, 566, 546, 555, 0, 557,
	572, 548, 0, 0, 541, 0, 540, 560, 568, 0,
	0, 479, 573, 0, 0, 0, 96, 94, -2, -2,
	746, 867, 0, 504, 0, 840, -2, 0, 0, 0,
	870, 0, 0, 0, 0, 464, 465, 0, 0, 0,
	322, 323, 1004, 0, 326, 329, 0, 331, 1006, 345,
	0, 313, 0, 342, 343, 377, 378, 381, 379, 382,
	504, 335, 340, 0, 313, 303, 345, 0, 0, 434,
	435, 62, 64, 65, 74, 82, 66, 72, 0, 0,
	0, 0, 842, 844, 0, 563, 0, 582, 565, 560,
	556, 0, 553, 544, 0, 545, 0, 572, 0, 0,
	552, 0, 0, 98, 95, 0, 801, 857, 0, -2,
	0, 781, 832, 0, 449, 593, 451, 0, 320, 324,
	0, 0, 351, 0, 313, 345, 339, 0, 385, 0,
	0, 301, 313, 0, 436, 437, 84, 0, 390, 392,
	0, 0, 0, 0, 0, 0, 558, 542, 538, 0,
	549, 0, 569, 504, 97, 93, 0, 0, 0, 853,
	782, 0, 450, 0, 0, 330, 356, 0, 0, 333,
	313, 0, 380, 799, 347, 372, 0, 429, 68, 0,
	81, 0, 0, 845, 846, 581, 547, 0, 567, 0,
	850, 855, 858, -2, 1157, 1038, 0, 856, 593, 0,
	0, 332, 352, 353, 0, 348, 349, 350, 1005, 334,
	344, 351, 345, 83, 54, 56, 539, 0, 0, 860,
	861, 862, 863, 864, 448, 316, 325, 354, 0, 355,
	0, 0, 0, 356, 313, 0, 312, 314, 315, 357,
	0, 360, 361, 0, 358, 341, 373, 859, 359, 362,
	363,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:844
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:850
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:856
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:937
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:955
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1021
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1044
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = nil
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = DropCascade
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = DropRestrict
		}
	case 78:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = DropDefault
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1116
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1117
		{
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1120
		{
			return unimplemented(sqllex, "alter using")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
		}
	case 85:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 94:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.str = ""
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1194
		{
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1213
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1244
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1245
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1246
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{ /* SKIP DOC */
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{ /* SKIP DOC */
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{ /* SKIP DOC */
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			return unimplemented(sqllex, "set local")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			return unimplemented(sqllex, "set from current")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1650
		{
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1652
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = Low
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = Normal
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = High
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.str = "client_encoding"
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1928
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1932
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1936
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1960
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1964
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = DropDefault
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return unimplemented(sqllex, "match full")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return unimplemented(sqllex, "match partial")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return unimplemented(sqllex, "match simple")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2295
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2302
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2305
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			return unimplemented(sqllex, "no action")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2317
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			return unimplemented(sqllex, "action set null")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			return unimplemented(sqllex, "action set default")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = true
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = false
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2428
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2432
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = Ascending
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = Descending
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2472
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2474
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = true
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = false
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2508
		{
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2558
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.str = ""
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.str = ""
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = ReadOnly
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = ReadWrite
		}
	case 428:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.str = ""
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.str = ""
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.str = ""
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.str = ""
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2713
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2777
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 456:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2812
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3044
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3048
		{
			return unimplemented(sqllex, "cte")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3056
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3060
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = true
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = false
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = false
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = true
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3207
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &From{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3298
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3343
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3360
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = nil
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = true
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = false
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.str = astFullJoin
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.str = astLeftJoin
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.str = astRightJoin
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.str = astInnerJoin
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3536
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3635
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3650
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3731
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = nil
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3796
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3892
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = year
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = month
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = day
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = hour
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = minute
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = month
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = hour
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = minute
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = minute
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = nil
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = second
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4059
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4094
		{
			return unimplemented(sqllex, "at tz")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4328
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4554
		{
			return unimplemented(sqllex, "variadic")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4555
		{
			return unimplemented(sqllex, "variadic")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4578
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			return unimplemented(sqllex, "func_application")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4599
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			return unimplemented(sqllex, "current role")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			return unimplemented(sqllex, "current user")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "session user")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplemented(sqllex, "user")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4656
		{
			return unimplemented(sqllex, "treat")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4700
		{
			return unimplemented(sqllex, "within group")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4701
		{
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Window(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.str = ""
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			return unimplemented(sqllex, "frame range")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4800
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4803
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4804
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4813
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4814
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = Any
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = Some
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = All
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = Plus
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = Minus
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = Mult
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = Div
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = FloorDiv
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = Mod
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = Bitand
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = Bitor
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = Pow
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = Bitxor
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = LT
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = GT
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = EQ
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = LE
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = GE
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = NE
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = Like
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = NotLike
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = ILike
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = NotILike
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5178
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5179
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5341
		{
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5377
		{
			return unimplemented(sqllex, "func const")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5386
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = DNull
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.str = ""
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
