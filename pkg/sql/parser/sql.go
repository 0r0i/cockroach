// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6502

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 52,
	358, 52,
	-2, 671,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	141, 524,
	-2, 0,
	-1, 60,
	92, 671,
	145, 671,
	310, 671,
	311, 671,
	-2, 0,
	-1, 70,
	103, 646,
	112, 646,
	153, 646,
	172, 646,
	197, 646,
	203, 646,
	307, 646,
	-2, 635,
	-1, 102,
	4, 673,
	20, 673,
	21, 673,
	23, 673,
	28, 673,
	33, 673,
	34, 673,
	35, 673,
	36, 673,
	37, 673,
	38, 673,
	39, 673,
	40, 673,
	41, 673,
	42, 673,
	44, 673,
	45, 673,
	46, 673,
	47, 673,
	48, 673,
	51, 673,
	52, 673,
	53, 673,
	55, 673,
	56, 673,
	60, 673,
	61, 673,
	62, 673,
	64, 673,
	66, 673,
	67, 673,
	68, 673,
	71, 673,
	72, 673,
	73, 673,
	81, 673,
	82, 673,
	83, 673,
	84, 673,
	85, 673,
	86, 673,
	87, 673,
	88, 673,
	90, 673,
	92, 673,
	94, 673,
	97, 673,
	98, 673,
	100, 673,
	104, 673,
	105, 673,
	106, 673,
	107, 673,
	108, 673,
	109, 673,
	113, 673,
	114, 673,
	115, 673,
	116, 673,
	117, 673,
	119, 673,
	121, 673,
	126, 673,
	127, 673,
	129, 673,
	132, 673,
	133, 673,
	134, 673,
	135, 673,
	136, 673,
	137, 673,
	140, 673,
	142, 673,
	145, 673,
	146, 673,
	147, 673,
	148, 673,
	149, 673,
	150, 673,
	151, 673,
	152, 673,
	154, 673,
	157, 673,
	158, 673,
	159, 673,
	161, 673,
	162, 673,
	163, 673,
	165, 673,
	166, 673,
	168, 673,
	170, 673,
	173, 673,
	176, 673,
	178, 673,
	179, 673,
	180, 673,
	181, 673,
	182, 673,
	183, 673,
	185, 673,
	186, 673,
	187, 673,
	188, 673,
	192, 673,
	193, 673,
	194, 673,
	195, 673,
	196, 673,
	198, 673,
	200, 673,
	201, 673,
	204, 673,
	205, 673,
	207, 673,
	209, 673,
	210, 673,
	211, 673,
	212, 673,
	213, 673,
	214, 673,
	216, 673,
	217, 673,
	218, 673,
	219, 673,
	220, 673,
	222, 673,
	223, 673,
	224, 673,
	225, 673,
	226, 673,
	227, 673,
	228, 673,
	229, 673,
	231, 673,
	232, 673,
	233, 673,
	234, 673,
	235, 673,
	236, 673,
	237, 673,
	238, 673,
	239, 673,
	240, 673,
	241, 673,
	242, 673,
	244, 673,
	246, 673,
	247, 673,
	248, 673,
	249, 673,
	251, 673,
	252, 673,
	253, 673,
	254, 673,
	256, 673,
	257, 673,
	258, 673,
	259, 673,
	260, 673,
	262, 673,
	263, 673,
	264, 673,
	265, 673,
	267, 673,
	268, 673,
	269, 673,
	270, 673,
	272, 673,
	273, 673,
	274, 673,
	275, 673,
	276, 673,
	277, 673,
	278, 673,
	279, 673,
	280, 673,
	281, 673,
	283, 673,
	285, 673,
	286, 673,
	287, 673,
	288, 673,
	289, 673,
	290, 673,
	291, 673,
	293, 673,
	294, 673,
	295, 673,
	298, 673,
	299, 673,
	300, 673,
	301, 673,
	303, 673,
	304, 673,
	305, 673,
	306, 673,
	309, 673,
	310, 673,
	311, 673,
	312, 673,
	314, 673,
	316, 673,
	317, 673,
	318, 673,
	319, 673,
	320, 673,
	321, 673,
	324, 673,
	329, 673,
	330, 673,
	331, 673,
	332, 673,
	333, 673,
	-2, 0,
	-1, 115,
	103, 645,
	112, 645,
	153, 645,
	172, 645,
	197, 645,
	203, 645,
	307, 645,
	-2, 638,
	-1, 120,
	1, 573,
	157, 573,
	222, 573,
	226, 573,
	357, 573,
	358, 573,
	-2, 0,
	-1, 122,
	1, 573,
	357, 573,
	358, 573,
	-2, 0,
	-1, 123,
	1, 573,
	357, 573,
	358, 573,
	-2, 0,
	-1, 124,
	1, 577,
	357, 577,
	358, 577,
	-2, 0,
	-1, 131,
	4, 679,
	5, 679,
	6, 679,
	7, 679,
	8, 679,
	9, 679,
	20, 679,
	21, 679,
	23, 679,
	28, 679,
	29, 679,
	33, 679,
	34, 679,
	35, 679,
	36, 679,
	37, 679,
	38, 679,
	39, 679,
	40, 679,
	41, 679,
	42, 679,
	44, 679,
	45, 679,
	46, 679,
	47, 679,
	48, 679,
	49, 679,
	50, 679,
	51, 679,
	52, 679,
	53, 679,
	55, 679,
	56, 679,
	58, 679,
	60, 679,
	61, 679,
	62, 679,
	64, 679,
	66, 679,
	67, 679,
	68, 679,
	70, 679,
	71, 679,
	72, 679,
	73, 679,
	75, 679,
	76, 679,
	77, 679,
	79, 679,
	80, 679,
	81, 679,
	82, 679,
	83, 679,
	84, 679,
	85, 679,
	86, 679,
	87, 679,
	88, 679,
	90, 679,
	92, 679,
	94, 679,
	97, 679,
	98, 679,
	100, 679,
	104, 679,
	105, 679,
	106, 679,
	107, 679,
	108, 679,
	109, 679,
	110, 679,
	113, 679,
	114, 679,
	115, 679,
	116, 679,
	117, 679,
	119, 679,
	121, 679,
	124, 679,
	126, 679,
	127, 679,
	129, 679,
	132, 679,
	133, 679,
	134, 679,
	135, 679,
	136, 679,
	137, 679,
	138, 679,
	140, 679,
	142, 679,
	144, 679,
	145, 679,
	146, 679,
	147, 679,
	148, 679,
	149, 679,
	150, 679,
	151, 679,
	152, 679,
	154, 679,
	156, 679,
	157, 679,
	158, 679,
	159, 679,
	160, 679,
	161, 679,
	162, 679,
	163, 679,
	165, 679,
	166, 679,
	168, 679,
	169, 679,
	170, 679,
	171, 679,
	173, 679,
	176, 679,
	178, 679,
	179, 679,
	180, 679,
	181, 679,
	182, 679,
	183, 679,
	184, 679,
	185, 679,
	186, 679,
	187, 679,
	188, 679,
	189, 679,
	191, 679,
	192, 679,
	193, 679,
	194, 679,
	195, 679,
	196, 679,
	198, 679,
	201, 679,
	204, 679,
	205, 679,
	206, 679,
	207, 679,
	208, 679,
	209, 679,
	210, 679,
	211, 679,
	212, 679,
	213, 679,
	214, 679,
	216, 679,
	217, 679,
	218, 679,
	219, 679,
	220, 679,
	222, 679,
	223, 679,
	224, 679,
	225, 679,
	226, 679,
	227, 679,
	228, 679,
	229, 679,
	231, 679,
	232, 679,
	233, 679,
	234, 679,
	235, 679,
	236, 679,
	237, 679,
	238, 679,
	239, 679,
	240, 679,
	241, 679,
	242, 679,
	244, 679,
	245, 679,
	246, 679,
	247, 679,
	248, 679,
	249, 679,
	251, 679,
	252, 679,
	253, 679,
	254, 679,
	256, 679,
	257, 679,
	258, 679,
	259, 679,
	260, 679,
	261, 679,
	262, 679,
	263, 679,
	264, 679,
	265, 679,
	266, 679,
	267, 679,
	268, 679,
	269, 679,
	270, 679,
	272, 679,
	273, 679,
	274, 679,
	275, 679,
	276, 679,
	277, 679,
	278, 679,
	279, 679,
	280, 679,
	281, 679,
	283, 679,
	285, 679,
	286, 679,
	287, 679,
	288, 679,
	289, 679,
	290, 679,
	291, 679,
	293, 679,
	294, 679,
	295, 679,
	298, 679,
	299, 679,
	300, 679,
	301, 679,
	302, 679,
	303, 679,
	304, 679,
	305, 679,
	306, 679,
	309, 679,
	310, 679,
	311, 679,
	312, 679,
	313, 679,
	314, 679,
	316, 679,
	317, 679,
	318, 679,
	319, 679,
	320, 679,
	321, 679,
	324, 679,
	329, 679,
	330, 679,
	331, 679,
	332, 679,
	333, 679,
	334, 679,
	340, 679,
	345, 679,
	346, 679,
	347, 679,
	354, 679,
	360, 679,
	-2, 0,
	-1, 134,
	1, 52,
	358, 52,
	-2, 671,
	-1, 493,
	123, 1268,
	296, 1268,
	339, 1268,
	356, 1268,
	-2, 0,
	-1, 494,
	123, 1221,
	296, 1221,
	339, 1221,
	356, 1221,
	-2, 0,
	-1, 496,
	123, 1326,
	296, 1326,
	339, 1326,
	356, 1326,
	-2, 0,
	-1, 498,
	123, 1348,
	296, 1348,
	339, 1348,
	356, 1348,
	-2, 0,
	-1, 505,
	123, 1273,
	296, 1273,
	339, 1273,
	356, 1273,
	-2, 316,
	-1, 531,
	1, 393,
	353, 393,
	355, 393,
	357, 393,
	358, 393,
	-2, 0,
	-1, 532,
	1, 440,
	120, 440,
	353, 440,
	355, 440,
	357, 440,
	358, 440,
	-2, 0,
	-1, 538,
	1, 407,
	353, 407,
	355, 407,
	357, 407,
	358, 407,
	-2, 0,
	-1, 540,
	1, 411,
	353, 411,
	355, 411,
	357, 411,
	358, 411,
	-2, 0,
	-1, 543,
	1, 419,
	353, 419,
	355, 419,
	357, 419,
	358, 419,
	-2, 0,
	-1, 544,
	1, 424,
	353, 424,
	355, 424,
	357, 424,
	358, 424,
	-2, 0,
	-1, 547,
	1, 434,
	353, 434,
	355, 434,
	357, 434,
	358, 434,
	-2, 0,
	-1, 561,
	112, 681,
	172, 681,
	197, 681,
	-2, 641,
	-1, 564,
	112, 680,
	172, 680,
	197, 680,
	-2, 639,
	-1, 621,
	354, 1199,
	-2, 1192,
	-1, 622,
	354, 1200,
	-2, 1193,
	-1, 628,
	5, 856,
	354, 856,
	-2, 1399,
	-1, 653,
	5, 815,
	-2, 1369,
	-1, 654,
	5, 850,
	354, 850,
	-2, 1371,
	-1, 655,
	5, 825,
	-2, 1372,
	-1, 656,
	5, 824,
	-2, 1373,
	-1, 657,
	5, 850,
	354, 850,
	-2, 1376,
	-1, 658,
	5, 850,
	354, 850,
	-2, 1377,
	-1, 659,
	5, 851,
	-2, 1380,
	-1, 660,
	5, 807,
	-2, 1381,
	-1, 661,
	5, 807,
	-2, 1382,
	-1, 662,
	5, 832,
	-2, 1386,
	-1, 663,
	5, 817,
	-2, 1387,
	-1, 664,
	5, 818,
	-2, 1388,
	-1, 665,
	5, 808,
	-2, 1393,
	-1, 666,
	5, 809,
	-2, 1394,
	-1, 667,
	5, 810,
	-2, 1395,
	-1, 668,
	5, 811,
	-2, 1396,
	-1, 669,
	5, 812,
	-2, 1397,
	-1, 670,
	5, 813,
	-2, 1398,
	-1, 671,
	5, 807,
	-2, 1403,
	-1, 672,
	5, 816,
	-2, 1408,
	-1, 673,
	5, 814,
	-2, 1411,
	-1, 674,
	5, 848,
	354, 848,
	-2, 1413,
	-1, 675,
	5, 852,
	-2, 1416,
	-1, 676,
	5, 854,
	-2, 1417,
	-1, 677,
	5, 847,
	354, 847,
	-2, 1422,
	-1, 772,
	213, 669,
	-2, 517,
	-1, 776,
	199, 1196,
	-2, 0,
	-1, 811,
	1, 207,
	353, 207,
	355, 207,
	357, 207,
	358, 207,
	-2, 644,
	-1, 818,
	4, 1421,
	10, 1421,
	11, 1421,
	13, 1421,
	14, 1421,
	15, 1421,
	16, 1421,
	17, 1421,
	18, 1421,
	20, 1421,
	21, 1421,
	23, 1421,
	26, 1421,
	28, 1421,
	30, 1421,
	33, 1421,
	34, 1421,
	35, 1421,
	36, 1421,
	37, 1421,
	38, 1421,
	39, 1421,
	40, 1421,
	41, 1421,
	42, 1421,
	44, 1421,
	45, 1421,
	46, 1421,
	47, 1421,
	48, 1421,
	51, 1421,
	52, 1421,
	53, 1421,
	55, 1421,
	56, 1421,
	57, 1421,
	60, 1421,
	61, 1421,
	62, 1421,
	63, 1421,
	64, 1421,
	66, 1421,
	67, 1421,
	68, 1421,
	70, 1421,
	71, 1421,
	72, 1421,
	73, 1421,
	81, 1421,
	82, 1421,
	83, 1421,
	84, 1421,
	85, 1421,
	86, 1421,
	87, 1421,
	88, 1421,
	90, 1421,
	92, 1421,
	94, 1421,
	97, 1421,
	98, 1421,
	100, 1421,
	104, 1421,
	105, 1421,
	106, 1421,
	107, 1421,
	108, 1421,
	109, 1421,
	113, 1421,
	114, 1421,
	115, 1421,
	116, 1421,
	117, 1421,
	118, 1421,
	119, 1421,
	121, 1421,
	124, 1421,
	126, 1421,
	127, 1421,
	129, 1421,
	132, 1421,
	133, 1421,
	134, 1421,
	135, 1421,
	136, 1421,
	137, 1421,
	138, 1421,
	139, 1421,
	140, 1421,
	142, 1421,
	144, 1421,
	145, 1421,
	146, 1421,
	147, 1421,
	148, 1421,
	149, 1421,
	150, 1421,
	151, 1421,
	152, 1421,
	154, 1421,
	156, 1421,
	157, 1421,
	158, 1421,
	159, 1421,
	160, 1421,
	161, 1421,
	162, 1421,
	163, 1421,
	165, 1421,
	166, 1421,
	168, 1421,
	169, 1421,
	170, 1421,
	171, 1421,
	173, 1421,
	176, 1421,
	177, 1421,
	178, 1421,
	179, 1421,
	180, 1421,
	181, 1421,
	182, 1421,
	183, 1421,
	184, 1421,
	185, 1421,
	186, 1421,
	187, 1421,
	188, 1421,
	192, 1421,
	193, 1421,
	194, 1421,
	195, 1421,
	196, 1421,
	198, 1421,
	201, 1421,
	202, 1421,
	204, 1421,
	205, 1421,
	207, 1421,
	209, 1421,
	210, 1421,
	211, 1421,
	212, 1421,
	213, 1421,
	214, 1421,
	216, 1421,
	217, 1421,
	218, 1421,
	219, 1421,
	220, 1421,
	222, 1421,
	223, 1421,
	224, 1421,
	225, 1421,
	226, 1421,
	227, 1421,
	228, 1421,
	229, 1421,
	231, 1421,
	232, 1421,
	233, 1421,
	234, 1421,
	235, 1421,
	236, 1421,
	237, 1421,
	238, 1421,
	239, 1421,
	240, 1421,
	241, 1421,
	242, 1421,
	244, 1421,
	245, 1421,
	246, 1421,
	247, 1421,
	248, 1421,
	249, 1421,
	250, 1421,
	251, 1421,
	252, 1421,
	253, 1421,
	254, 1421,
	256, 1421,
	257, 1421,
	258, 1421,
	259, 1421,
	260, 1421,
	262, 1421,
	263, 1421,
	264, 1421,
	265, 1421,
	266, 1421,
	267, 1421,
	268, 1421,
	269, 1421,
	270, 1421,
	272, 1421,
	273, 1421,
	274, 1421,
	275, 1421,
	276, 1421,
	277, 1421,
	278, 1421,
	279, 1421,
	280, 1421,
	281, 1421,
	283, 1421,
	285, 1421,
	286, 1421,
	287, 1421,
	288, 1421,
	289, 1421,
	290, 1421,
	291, 1421,
	293, 1421,
	294, 1421,
	295, 1421,
	298, 1421,
	299, 1421,
	300, 1421,
	301, 1421,
	303, 1421,
	304, 1421,
	305, 1421,
	306, 1421,
	309, 1421,
	310, 1421,
	311, 1421,
	312, 1421,
	314, 1421,
	316, 1421,
	317, 1421,
	318, 1421,
	319, 1421,
	320, 1421,
	321, 1421,
	324, 1421,
	329, 1421,
	330, 1421,
	331, 1421,
	332, 1421,
	333, 1421,
	334, 1421,
	335, 1421,
	337, 1421,
	338, 1421,
	339, 1421,
	340, 1421,
	342, 1421,
	343, 1421,
	344, 1421,
	345, 1421,
	346, 1421,
	347, 1421,
	348, 1421,
	349, 1421,
	350, 1421,
	352, 1421,
	355, 1421,
	356, 1421,
	359, 1421,
	360, 1421,
	-2, 0,
	-1, 832,
	123, 1326,
	296, 1326,
	339, 1326,
	356, 1326,
	-2, 0,
	-1, 849,
	123, 1348,
	296, 1348,
	339, 1348,
	356, 1348,
	-2, 0,
	-1, 919,
	112, 680,
	172, 680,
	197, 680,
	-2, 642,
	-1, 988,
	103, 646,
	112, 646,
	153, 646,
	172, 646,
	197, 646,
	203, 646,
	307, 646,
	-2, 975,
	-1, 998,
	354, 1176,
	-2, 1164,
	-1, 1015,
	355, 1116,
	-2, 0,
	-1, 1071,
	103, 646,
	112, 646,
	153, 646,
	172, 646,
	197, 646,
	203, 646,
	307, 646,
	-2, 742,
	-1, 1391,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 891,
	-1, 1392,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 892,
	-1, 1393,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 893,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 897,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 898,
	-1, 1399,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 899,
	-1, 1402,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 904,
	-1, 1408,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 906,
	-1, 1410,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 910,
	-1, 1411,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 911,
	-1, 1412,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 912,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 913,
	-1, 1439,
	208, 1058,
	-2, 1061,
	-1, 1481,
	123, 1098,
	354, 1199,
	-2, 1192,
	-1, 1482,
	123, 1099,
	-2, 1365,
	-1, 1483,
	123, 1100,
	-2, 1272,
	-1, 1484,
	123, 1101,
	-2, 1236,
	-1, 1485,
	123, 1102,
	-2, 1252,
	-1, 1486,
	123, 1103,
	-2, 1271,
	-1, 1487,
	123, 1104,
	-2, 1323,
	-1, 1563,
	1, 743,
	70, 743,
	103, 743,
	112, 743,
	124, 743,
	128, 743,
	130, 743,
	144, 743,
	153, 743,
	160, 743,
	169, 743,
	172, 743,
	184, 743,
	197, 743,
	199, 743,
	203, 743,
	243, 743,
	245, 743,
	307, 743,
	315, 743,
	326, 743,
	327, 743,
	336, 743,
	353, 743,
	355, 743,
	357, 743,
	358, 743,
	359, 743,
	-2, 742,
	-1, 1703,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 905,
	-1, 1704,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 907,
	-1, 1709,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 908,
	-1, 1727,
	208, 1057,
	-2, 1060,
	-1, 1952,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 909,
	-1, 1957,
	156, 0,
	-2, 925,
	-1, 1967,
	208, 1059,
	-2, 1062,
	-1, 2009,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 952,
	-1, 2010,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 953,
	-1, 2011,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 954,
	-1, 2015,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 958,
	-1, 2016,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 959,
	-1, 2017,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 960,
	-1, 2142,
	156, 0,
	-2, 926,
	-1, 2145,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 929,
	-1, 2146,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 931,
	-1, 2262,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 930,
	-1, 2263,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 932,
	-1, 2270,
	156, 0,
	-2, 961,
	-1, 2347,
	156, 0,
	-2, 962,
	-1, 2424,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1368,
}

const sqlPrivate = 57344

const sqlLast = 41453

var sqlAct = [...]int{

	622, 2098, 2471, 2423, 2398, 2432, 1626, 2433, 2296, 2434,
	1986, 1634, 2352, 1934, 1195, 2243, 2422, 2108, 1606, 581,
	2210, 1287, 1697, 2196, 870, 620, 2130, 1202, 565, 2069,
	2132, 1900, 69, 1237, 598, 766, 1610, 2276, 615, 172,
	1841, 1558, 1902, 172, 2070, 724, 612, 1215, 1623, 1605,
	1908, 172, 1288, 2176, 1069, 2124, 1065, 1793, 1820, 1048,
	172, 1609, 1635, 1198, 1559, 172, 172, 1828, 1599, 172,
	1792, 1576, 172, 2040, 1437, 436, 1463, 1738, 853, 1370,
	172, 619, 1567, 994, 1693, 1365, 922, 573, 114, 1681,
	1077, 451, 24, 1318, 1100, 1191, 1079, 504, 1049, 1447,
	592, 1425, 1510, 1422, 1314, 433, 1029, 1457, 801, 1607,
	852, 1025, 872, 798, 1628, 791, 597, 812, 733, 1613,
	1545, 1056, 1532, 712, 730, 1477, 172, 172, 484, 983,
	923, 591, 1317, 921, 172, 1513, 614, 163, 1039, 462,
	788, 1209, 168, 497, 525, 710, 1038, 1074, 114, 927,
	570, 1726, 2211, 2054, 37, 856, 2055, 569, 1217, 390,
	172, 172, 172, 172, 1627, 38, 1217, 172, 172, 1238,
	2467, 1217, 2448, 2444, 1099, 173, 2209, 1649, 41, 569,
	2443, 938, 939, 115, 1649, 1649, 754, 968, 969, 970,
	116, 2440, 501, 1066, 564, 1099, 1918, 1917, 678, 1950,
	47, 2420, 2419, 476, 941, 1664, 1664, 972, 2393, 1600,
	2388, 2384, 1657, 579, 2257, 1099, 1534, 2376, 1096, 2349,
	857, 2209, 114, 1657, 858, 2394, 24, 2327, 940, 58,
	1664, 2209, 2043, 2324, 955, 2257, 59, 1099, 60, 938,
	939, 2322, 2307, 2306, 2284, 2209, 1099, 2209, 1099, 2281,
	731, 2264, 2231, 1099, 2229, 1657, 1649, 2208, 1649, 2043,
	2189, 2209, 941, 574, 1099, 62, 2169, 1533, 1945, 2147,
	1649, 748, 714, 1649, 2144, 1565, 740, 744, 1657, 750,
	572, 727, 1730, 2123, 738, 742, 940, 1604, 1731, 946,
	2118, 2050, 955, 1961, 1604, 2051, 1928, 1649, 562, 1889,
	1890, 1631, 1844, 1099, 1817, 561, 1649, 1810, 1099, 965,
	973, 1811, 1808, 1649, 938, 939, 1649, 958, 959, 960,
	968, 969, 970, 1807, 1806, 1729, 1600, 1649, 1649, 1727,
	961, 1649, 1668, 1649, 1656, 1737, 1649, 941, 1657, 1648,
	972, 1460, 963, 1649, 2022, 63, 1603, 946, 956, 1664,
	1604, 1218, 1964, 1099, 1539, 938, 939, 1295, 1538, 1218,
	1890, 940, 938, 939, 1218, 1230, 716, 955, 717, 1231,
	118, 65, 1696, 66, 1679, 131, 38, 1043, 941, 1441,
	752, 834, 134, 2212, 1315, 941, 131, 831, 1461, 41,
	1683, 131, 830, 457, 829, 828, 98, 827, 172, 826,
	172, 172, 940, 172, 133, 825, 956, 824, 172, 940,
	823, 822, 821, 820, 172, 133, 718, 715, 557, 556,
	133, 957, 946, 555, 523, 522, 521, 172, 172, 172,
	172, 172, 1917, 520, 1462, 1459, 815, 966, 519, 518,
	132, 517, 965, 973, 516, 515, 514, 513, 125, 805,
	758, 132, 1533, 512, 511, 126, 132, 510, 172, 125,
	971, 509, 508, 946, 507, 492, 126, 131, 570, 1223,
	946, 172, 491, 490, 117, 963, 62, 1216, 489, 957,
	1321, 956, 1349, 488, 424, 117, 423, 172, 1763, 1764,
	117, 422, 421, 2466, 420, 770, 133, 172, 774, 405,
	404, 396, 395, 394, 393, 964, 962, 386, 385, 1464,
	157, 967, 156, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 956, 155, 794, 794, 154, 153, 815, 956,
	744, 152, 132, 131, 151, 150, 149, 148, 790, 147,
	125, 1778, 146, 795, 765, 750, 145, 126, 813, 144,
	143, 142, 141, 140, 957, 139, 63, 138, 137, 172,
	136, 135, 133, 1070, 1474, 1836, 1630, 865, 835, 1472,
	966, 951, 949, 950, 942, 943, 944, 945, 947, 948,
	868, 118, 65, 934, 66, 1470, 2439, 1458, 2421, 2403,
	920, 2344, 2325, 2250, 2175, 957, 1769, 131, 132, 863,
	2174, 2170, 957, 2162, 457, 2161, 125, 98, 2160, 1662,
	1433, 816, 2156, 126, 2155, 2154, 2153, 2129, 2037, 2032,
	2031, 2030, 1972, 1892, 1888, 1848, 133, 1815, 1812, 570,
	1800, 1791, 117, 1234, 817, 1762, 1759, 850, 964, 919,
	847, 952, 953, 954, 967, 1758, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 1779, 1756, 1743, 1742, 725,
	1563, 934, 132, 2171, 1763, 1764, 1068, 1002, 933, 763,
	125, 866, 995, 1067, 986, 744, 1201, 126, 1988, 2411,
	995, 2379, 758, 918, 2373, 2372, 2371, 951, 949, 950,
	942, 943, 944, 945, 947, 948, 117, 942, 943, 944,
	945, 947, 948, 816, 2363, 2361, 1932, 2339, 2338, 2337,
	172, 2293, 172, 2272, 2258, 2237, 1434, 930, 931, 2215,
	935, 2167, 1316, 1692, 2106, 2104, 817, 2103, 1780, 2101,
	2078, 1691, 990, 2077, 2058, 172, 172, 2046, 1956, 1879,
	1874, 1861, 1860, 1846, 1816, 1790, 1054, 1752, 2249, 1751,
	1748, 1723, 815, 172, 1718, 1763, 1764, 562, 1427, 1103,
	998, 938, 939, 1047, 561, 172, 1030, 570, 1031, 1027,
	1028, 1033, 1769, 1550, 1522, 1468, 1194, 172, 1034, 726,
	1052, 1046, 1037, 172, 941, 172, 1023, 172, 1022, 1200,
	1021, 172, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013,
	1012, 1193, 1011, 1010, 1097, 585, 1763, 1764, 940, 1009,
	1008, 1007, 1006, 999, 987, 986, 846, 114, 838, 809,
	1774, 1772, 1773, 1765, 1766, 1767, 1768, 1770, 1771, 2355,
	2256, 1779, 2149, 172, 172, 1064, 1861, 2128, 1042, 2053,
	815, 1206, 172, 1220, 2049, 172, 1222, 1040, 1551, 1659,
	1225, 731, 1075, 1072, 1763, 1764, 1930, 1044, 984, 1087,
	1068, 1903, 2260, 1769, 2259, 1667, 1103, 2253, 2056, 1919,
	1600, 1035, 862, 1070, 2277, 172, 1036, 1244, 1814, 1085,
	172, 1192, 1813, 1702, 859, 172, 172, 916, 172, 1302,
	172, 1935, 172, 1199, 172, 1098, 1627, 1086, 1311, 744,
	764, 1210, 1004, 1210, 1780, 172, 1989, 790, 1666, 1448,
	1734, 172, 172, 1834, 1769, 1026, 1913, 1473, 1235, 910,
	938, 939, 1471, 1208, 2406, 2065, 1653, 816, 1211, 2463,
	2223, 1763, 1764, 568, 1104, 2464, 2383, 172, 1469, 1669,
	1080, 1103, 1081, 941, 707, 1228, 680, 1763, 1764, 2317,
	817, 705, 1942, 703, 1068, 1495, 902, 1105, 911, 2316,
	1322, 1296, 2315, 2314, 701, 1348, 698, 940, 410, 398,
	2093, 1232, 1323, 1779, 1233, 2091, 847, 1244, 1244, 1289,
	2062, 2061, 1291, 567, 1747, 2234, 1746, 114, 1293, 679,
	550, 1745, 1744, 1705, 1319, 1577, 1307, 1772, 1773, 1765,
	1766, 1767, 1768, 1770, 1771, 1337, 1652, 1596, 578, 1592,
	1352, 726, 1590, 1409, 1041, 816, 1001, 1082, 751, 570,
	1303, 411, 1330, 1526, 570, 1525, 938, 939, 946, 1380,
	1624, 559, 1347, 569, 1193, 1379, 2096, 1290, 817, 1769,
	2097, 1104, 172, 471, 172, 860, 1780, 172, 1885, 941,
	402, 1569, 1931, 1351, 1350, 1769, 2382, 2089, 172, 1189,
	938, 939, 627, 1580, 1105, 1531, 1424, 1103, 2417, 551,
	172, 425, 1327, 940, 172, 2080, 1346, 172, 1331, 1445,
	1332, 172, 1333, 941, 1334, 172, 1335, 956, 861, 1424,
	172, 682, 1767, 1768, 1770, 1771, 172, 1103, 1779, 2298,
	172, 948, 1212, 1341, 1343, 1431, 570, 940, 1371, 1378,
	1429, 562, 1435, 1432, 562, 562, 1104, 1570, 1361, 1464,
	1552, 1362, 1363, 1438, 1910, 1694, 1695, 990, 1326, 1369,
	2455, 1442, 937, 1911, 946, 1450, 1448, 566, 1488, 1105,
	1773, 1765, 1766, 1767, 1768, 1770, 1771, 1480, 1480, 1493,
	1296, 1505, 429, 2463, 1763, 1764, 845, 1517, 1518, 1520,
	957, 1553, 1579, 158, 1581, 1583, 1881, 1529, 946, 552,
	1528, 1780, 1660, 1569, 731, 1537, 1876, 1910, 1588, 1568,
	1543, 1547, 1548, 1460, 1594, 2366, 413, 412, 938, 939,
	731, 1598, 1072, 1564, 1771, 172, 1941, 1090, 1943, 681,
	1573, 744, 172, 1556, 1597, 1542, 744, 2390, 2479, 1586,
	428, 941, 750, 172, 1591, 172, 1217, 172, 915, 1345,
	172, 1080, 172, 1081, 172, 172, 909, 172, 172, 624,
	1461, 2391, 815, 1088, 2474, 940, 172, 1083, 709, 2081,
	1024, 708, 1104, 1080, 161, 1081, 1647, 553, 699, 1578,
	699, 397, 901, 949, 950, 942, 943, 944, 945, 947,
	948, 700, 1769, 699, 1619, 1105, 1765, 1766, 1767, 1768,
	1770, 1771, 1104, 1094, 2268, 403, 1462, 1459, 896, 554,
	399, 387, 1765, 1766, 1767, 1768, 1770, 1771, 2087, 1093,
	400, 1420, 1982, 981, 875, 1105, 946, 2321, 1082, 1672,
	1406, 1629, 162, 1629, 1306, 1305, 1418, 1315, 1312, 1091,
	1674, 2299, 1655, 560, 1641, 897, 1707, 794, 114, 794,
	1082, 1779, 1103, 1750, 114, 470, 1633, 1092, 2436, 1638,
	172, 1675, 1644, 1546, 569, 1642, 1650, 1643, 1645, 1423,
	750, 750, 2454, 1673, 813, 1654, 172, 172, 172, 1651,
	172, 1464, 1661, 427, 1430, 956, 1663, 463, 2136, 1979,
	1562, 942, 943, 944, 945, 947, 948, 1464, 576, 172,
	550, 2435, 2472, 856, 883, 2462, 1031, 1414, 1034, 2460,
	468, 906, 430, 1294, 2204, 1415, 464, 1416, 578, 1309,
	1325, 1421, 426, 936, 1780, 1028, 1027, 944, 945, 947,
	948, 2480, 1404, 1407, 1296, 1980, 1670, 816, 2242, 1218,
	1566, 481, 1621, 465, 419, 2437, 1680, 844, 841, 2205,
	833, 577, 926, 925, 1884, 2309, 114, 2473, 957, 1458,
	817, 460, 851, 467, 414, 1403, 1872, 388, 857, 2308,
	2291, 2453, 858, 2358, 1684, 159, 907, 2165, 2475, 551,
	2222, 2064, 1857, 1978, 1281, 1686, 2219, 2221, 1078, 1853,
	570, 1690, 1685, 750, 1687, 1622, 744, 1207, 2399, 1196,
	165, 2438, 2018, 1310, 1688, 2485, 1340, 925, 463, 1736,
	1464, 2109, 1842, 924, 160, 1701, 1774, 1772, 1773, 1765,
	1766, 1767, 1768, 1770, 1771, 1297, 2244, 1104, 1417, 908,
	768, 468, 767, 389, 1357, 1419, 2292, 464, 926, 1708,
	1706, 1863, 1862, 479, 1700, 876, 1831, 1541, 1083, 2200,
	1105, 2201, 950, 942, 943, 944, 945, 947, 948, 1722,
	1405, 1540, 856, 570, 465, 172, 1103, 924, 856, 1818,
	1083, 172, 172, 466, 1824, 172, 1733, 2166, 1843, 552,
	172, 2203, 877, 172, 467, 874, 2218, 2220, 1825, 1059,
	2206, 172, 473, 1721, 1301, 776, 2019, 172, 172, 172,
	1724, 884, 2020, 172, 787, 1358, 172, 2484, 785, 1062,
	567, 2099, 172, 172, 172, 172, 172, 856, 1740, 1741,
	2235, 172, 1883, 172, 1838, 1544, 2289, 172, 469, 2177,
	2041, 456, 32, 857, 1060, 172, 1837, 858, 1299, 1854,
	1797, 1798, 1799, 1244, 1833, 172, 1467, 172, 1847, 172,
	1300, 2290, 172, 2271, 3, 575, 172, 553, 415, 905,
	1823, 172, 1819, 172, 1795, 2164, 1789, 753, 2202, 697,
	172, 2095, 1891, 1794, 1893, 1316, 1313, 1244, 1802, 1955,
	1055, 731, 857, 172, 815, 1886, 858, 731, 731, 554,
	1757, 731, 1849, 570, 466, 815, 172, 894, 416, 478,
	756, 892, 757, 455, 31, 454, 28, 1871, 1717, 1873,
	1061, 1665, 1822, 1850, 1915, 1878, 890, 1602, 1826, 1827,
	1921, 1922, 1832, 1923, 1924, 888, 1244, 1595, 417, 1338,
	418, 172, 453, 75, 1059, 886, 1927, 1875, 1589, 1894,
	459, 1104, 1897, 1906, 914, 607, 1895, 1936, 472, 469,
	913, 1887, 1055, 880, 1062, 783, 1912, 786, 839, 1329,
	460, 784, 1360, 1005, 1105, 1920, 32, 900, 1898, 1466,
	1057, 2431, 1926, 2396, 1858, 452, 74, 1192, 1940, 1060,
	904, 172, 1958, 2193, 169, 1937, 1192, 1244, 391, 736,
	1938, 1939, 702, 704, 1058, 2085, 406, 2083, 1974, 1975,
	1976, 1715, 2063, 1944, 1946, 431, 1059, 463, 1858, 1899,
	474, 169, 1948, 1625, 482, 1275, 1713, 487, 893, 1618,
	1227, 1226, 891, 1244, 1244, 506, 1062, 449, 20, 1224,
	468, 1965, 1244, 1244, 1221, 1219, 464, 889, 31, 1095,
	28, 1089, 1057, 1084, 1969, 1968, 887, 1949, 450, 21,
	1496, 1060, 1981, 1983, 1984, 1061, 885, 1929, 1274, 816,
	1990, 1995, 172, 465, 1992, 1244, 1058, 75, 172, 1901,
	816, 713, 713, 1997, 879, 2332, 782, 172, 172, 391,
	2025, 1830, 817, 467, 721, 899, 2464, 1710, 2255, 1962,
	2254, 448, 26, 817, 2026, 2059, 1320, 1711, 447, 18,
	2125, 1716, 445, 17, 722, 391, 391, 746, 391, 2052,
	74, 928, 169, 755, 2334, 1275, 1275, 2075, 1698, 2042,
	458, 172, 2039, 172, 1585, 2045, 2094, 1061, 2044, 2057,
	172, 1243, 2117, 815, 114, 446, 16, 2368, 2076, 2346,
	2105, 2212, 2060, 440, 13, 2084, 878, 2086, 172, 172,
	2102, 441, 14, 2119, 1371, 1993, 2023, 2111, 1274, 1274,
	1277, 2067, 20, 1371, 1998, 2178, 172, 2033, 932, 2122,
	439, 12, 1593, 2074, 2110, 1587, 172, 723, 731, 2395,
	1699, 1103, 2100, 21, 929, 2088, 2113, 2240, 480, 1569,
	2114, 938, 939, 466, 1632, 1584, 2029, 1829, 2112, 1620,
	2115, 1617, 2138, 444, 10, 438, 8, 2121, 1712, 2048,
	2120, 1569, 938, 939, 2126, 1714, 867, 1582, 550, 172,
	2143, 1530, 1292, 443, 6, 1244, 26, 1236, 442, 5,
	2470, 1243, 1243, 18, 2283, 941, 578, 17, 940, 2483,
	2090, 2183, 437, 4, 2127, 2092, 1763, 1764, 469, 938,
	939, 1677, 1676, 2038, 1985, 1677, 1933, 1839, 1809, 940,
	1277, 1277, 1678, 1527, 1638, 731, 1524, 1523, 1276, 1456,
	16, 992, 2151, 1977, 172, 2139, 1896, 172, 13, 1002,
	1000, 912, 903, 2163, 898, 895, 14, 1103, 172, 172,
	881, 843, 172, 172, 172, 2181, 1822, 551, 1240, 558,
	2297, 461, 1328, 882, 1835, 12, 1549, 2188, 816, 172,
	2389, 2157, 1749, 2351, 172, 2267, 172, 1465, 172, 172,
	172, 1003, 172, 2213, 172, 2184, 815, 2217, 2180, 2187,
	2192, 817, 51, 2075, 172, 172, 2182, 2216, 10, 2072,
	8, 815, 601, 506, 2194, 772, 506, 2233, 777, 2066,
	1612, 1611, 2238, 780, 2076, 1106, 1104, 2075, 6, 391,
	1304, 2236, 2075, 5, 623, 2246, 2241, 1479, 1276, 1276,
	1372, 696, 506, 506, 391, 802, 755, 4, 2076, 1105,
	625, 2185, 2245, 2076, 2239, 1241, 626, 1242, 1032, 2074,
	731, 2247, 2261, 613, 1239, 810, 1636, 552, 1240, 1240,
	2252, 1308, 1428, 506, 1446, 1732, 996, 593, 605, 604,
	1229, 2266, 1443, 2074, 837, 1840, 506, 1909, 2074, 2248,
	1356, 2179, 1689, 1353, 172, 1905, 172, 2082, 1103, 172,
	401, 2273, 842, 1760, 2226, 808, 1244, 172, 2230, 1502,
	2251, 1494, 506, 1103, 1490, 917, 1053, 982, 2280, 1637,
	864, 1916, 1658, 1045, 1364, 720, 719, 1298, 1496, 1496,
	2285, 1671, 1104, 2301, 975, 2075, 2303, 2282, 974, 706,
	2360, 855, 854, 172, 1197, 553, 815, 1193, 1856, 2478,
	172, 2367, 2079, 2405, 2300, 1105, 2076, 130, 172, 172,
	815, 815, 1244, 2075, 127, 129, 128, 2323, 2333, 2318,
	2330, 816, 2312, 2313, 391, 1882, 78, 554, 172, 2331,
	30, 2319, 29, 172, 2076, 2341, 816, 2329, 2340, 97,
	172, 2074, 2287, 96, 817, 95, 2345, 94, 2362, 2335,
	583, 93, 92, 1496, 1496, 1496, 2348, 2302, 91, 817,
	2356, 1244, 2342, 2343, 2279, 172, 172, 2357, 90, 2074,
	89, 88, 172, 2295, 2354, 2364, 87, 2377, 86, 85,
	815, 2375, 2326, 84, 2365, 172, 2378, 83, 82, 815,
	815, 81, 80, 502, 499, 77, 76, 27, 23, 2381,
	101, 2305, 22, 73, 2380, 72, 25, 1054, 15, 2328,
	2386, 2387, 172, 9, 172, 19, 56, 172, 57, 1103,
	570, 55, 54, 1104, 53, 11, 49, 2412, 1719, 1720,
	2414, 48, 2401, 46, 45, 2413, 44, 2402, 1104, 43,
	7, 2418, 100, 2311, 40, 172, 1105, 2416, 39, 99,
	112, 109, 111, 108, 110, 2075, 2430, 2429, 2428, 2415,
	113, 1105, 172, 105, 106, 2447, 107, 104, 172, 2441,
	103, 816, 36, 35, 34, 487, 2076, 713, 2452, 2449,
	2446, 33, 172, 2450, 2451, 816, 816, 2, 2374, 2445,
	1, 0, 2461, 2459, 817, 0, 2465, 0, 0, 0,
	391, 391, 0, 1786, 1787, 1788, 2469, 2468, 817, 817,
	0, 2074, 2204, 2407, 0, 2197, 0, 2476, 169, 0,
	2481, 2477, 0, 2195, 2482, 0, 0, 2199, 0, 0,
	391, 0, 2392, 2404, 0, 0, 0, 0, 0, 0,
	0, 0, 1205, 0, 0, 0, 0, 2205, 391, 0,
	391, 0, 391, 0, 0, 816, 1213, 2408, 2409, 2410,
	0, 0, 1496, 1496, 816, 816, 0, 0, 0, 2198,
	0, 1275, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 1638, 0, 0, 817, 817, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 506, 169,
	0, 0, 0, 0, 0, 1275, 0, 169, 0, 0,
	506, 0, 0, 0, 1274, 0, 0, 1105, 0, 759,
	761, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
	1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
	506, 1496, 0, 0, 0, 506, 0, 2200, 1274, 2201,
	169, 506, 0, 506, 1275, 506, 0, 506, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 506, 506, 0, 2203,
	0, 0, 0, 0, 0, 0, 0, 1243, 2206, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	0, 0, 506, 836, 0, 0, 0, 0, 0, 840,
	0, 0, 1953, 1954, 0, 1275, 1277, 0, 0, 0,
	0, 1243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 1275, 1275, 0, 0, 0, 0, 0, 1274, 0,
	1275, 1275, 0, 0, 0, 0, 2202, 0, 0, 0,
	1243, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	0, 2021, 0, 1275, 1274, 1274, 0, 0, 0, 1277,
	0, 0, 0, 1274, 1274, 0, 0, 487, 0, 713,
	0, 0, 755, 0, 0, 0, 0, 976, 977, 978,
	979, 980, 0, 391, 1276, 0, 0, 989, 602, 70,
	0, 1243, 0, 0, 0, 1561, 1274, 997, 37, 391,
	0, 0, 391, 0, 0, 0, 1574, 0, 0, 38,
	391, 0, 0, 0, 1240, 391, 0, 0, 1276, 0,
	1277, 391, 41, 0, 0, 1601, 0, 1243, 1243, 0,
	0, 0, 0, 0, 0, 0, 1243, 1243, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 0, 1240, 70,
	0, 0, 0, 0, 0, 0, 1277, 1277, 0, 0,
	0, 0, 0, 0, 0, 1277, 1277, 1276, 0, 1243,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	59, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1240, 1277, 0,
	0, 0, 0, 563, 0, 0, 571, 0, 0, 62,
	1050, 1050, 0, 1275, 0, 0, 0, 583, 0, 0,
	1608, 0, 732, 70, 0, 0, 0, 755, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 0,
	1640, 0, 506, 0, 0, 506, 0, 506, 0, 391,
	391, 0, 1646, 755, 0, 0, 1274, 0, 1240, 0,
	0, 1574, 0, 0, 1276, 1276, 0, 0, 0, 0,
	0, 0, 0, 1276, 1276, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 1240, 1240, 0, 0, 0, 0,
	0, 0, 0, 1240, 1240, 0, 1276, 0, 0, 0,
	0, 0, 0, 0, 118, 65, 0, 66, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 1243,
	131, 0, 0, 0, 1336, 0, 1240, 457, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 583, 0, 0, 1682, 0, 0, 1277, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 391, 391, 391, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 391, 132, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 1354, 0, 1359, 0, 0,
	0, 0, 0, 1366, 1275, 0, 0, 0, 0, 117,
	2270, 0, 0, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 0, 1408, 0, 1410, 1411,
	1412, 1413, 0, 0, 0, 0, 1276, 1274, 0, 0,
	0, 2294, 0, 0, 0, 1436, 0, 0, 0, 0,
	1275, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1240, 0, 0, 0,
	1475, 1476, 0, 0, 1492, 0, 1504, 1506, 1511, 1514,
	1515, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1274, 571, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 0, 0, 2347, 0, 0,
	1243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	391, 0, 0, 0, 0, 0, 391, 391, 0, 1277,
	391, 37, 1274, 0, 0, 1561, 0, 0, 1561, 0,
	0, 0, 38, 0, 0, 0, 1845, 0, 0, 0,
	0, 0, 391, 1851, 1852, 41, 1243, 0, 1574, 0,
	0, 1859, 0, 0, 0, 0, 0, 1864, 1865, 1867,
	1869, 1870, 0, 0, 0, 0, 391, 47, 1877, 0,
	0, 0, 1880, 0, 0, 1277, 0, 0, 0, 0,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1205, 0, 1205, 0, 506, 1243, 58, 391, 0, 0,
	0, 1904, 0, 59, 0, 60, 391, 0, 1914, 0,
	0, 0, 563, 0, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 1276, 1682, 0,
	0, 0, 62, 985, 0, 988, 0, 0, 0, 0,
	0, 1682, 993, 0, 0, 0, 0, 0, 938, 939,
	0, 958, 959, 960, 968, 969, 970, 1240, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 972, 0, 391, 0, 0, 0,
	0, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 1240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1987, 0, 0, 0,
	0, 0, 1276, 0, 0, 0, 0, 118, 65, 0,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 946, 0, 0, 0,
	457, 0, 1240, 98, 0, 0, 1763, 1764, 70, 1781,
	1782, 1783, 0, 1071, 0, 0, 965, 973, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 391, 0, 963,
	0, 0, 0, 1561, 0, 956, 0, 0, 132, 1778,
	0, 0, 755, 1561, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 2071, 0, 0,
	962, 0, 0, 0, 1703, 1704, 0, 0, 0, 0,
	1709, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1574, 0, 1205, 0,
	0, 0, 0, 0, 1769, 2107, 0, 0, 0, 0,
	0, 0, 1728, 0, 0, 0, 0, 0, 957, 1735,
	0, 0, 1739, 391, 391, 1785, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 1753,
	0, 2133, 1784, 0, 0, 0, 0, 0, 0, 0,
	0, 2135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1779, 0, 0, 0, 0, 70, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 1511, 1511,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2158, 0, 563, 0, 0, 563,
	563, 0, 964, 0, 1050, 952, 953, 954, 967, 583,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 1805, 0, 0,
	0, 0, 0, 0, 0, 0, 1780, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 391,
	0, 0, 755, 0, 0, 571, 0, 0, 0, 0,
	988, 0, 0, 1561, 755, 0, 0, 2190, 2191, 1574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2071, 755, 0, 0, 0, 0, 2224,
	0, 2225, 0, 391, 2227, 2228, 0, 391, 1907, 2232,
	0, 0, 0, 0, 0, 0, 0, 2071, 0, 755,
	1608, 0, 2071, 0, 0, 0, 0, 0, 0, 0,
	1925, 0, 0, 1775, 1776, 1777, 732, 0, 1774, 1772,
	1773, 1765, 1766, 1767, 1768, 1770, 1771, 583, 583, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	583, 0, 0, 0, 0, 70, 0, 0, 0, 0,
	0, 70, 1947, 0, 0, 0, 0, 1366, 0, 0,
	0, 0, 0, 1951, 0, 0, 1952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1957, 0,
	0, 0, 0, 0, 0, 0, 0, 1966, 0, 1574,
	0, 2286, 0, 0, 2288, 1970, 0, 0, 1925, 0,
	0, 0, 391, 0, 0, 2071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1994, 0,
	0, 0, 1996, 0, 0, 0, 0, 0, 0, 0,
	2320, 0, 0, 2071, 0, 0, 0, 0, 391, 0,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 2133, 2133, 2027, 2028, 0, 0, 0,
	0, 0, 0, 0, 2034, 2035, 2036, 0, 70, 0,
	70, 0, 0, 2353, 0, 0, 0, 0, 1561, 0,
	0, 0, 0, 0, 0, 1205, 0, 0, 0, 70,
	0, 2047, 0, 0, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2369, 2370, 0, 0, 0, 0, 0, 391, 0, 0,
	0, 2068, 0, 0, 0, 0, 0, 0, 0, 0,
	2385, 0, 938, 939, 0, 958, 959, 960, 968, 969,
	970, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 941, 0, 2400, 972, 755,
	0, 0, 391, 0, 0, 0, 0, 0, 0, 0,
	0, 1050, 0, 0, 0, 2071, 0, 0, 0, 940,
	583, 0, 0, 0, 0, 955, 0, 0, 0, 0,
	2353, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 0, 391, 0, 0, 2142, 0, 0, 0,
	2145, 2146, 0, 0, 0, 2148, 0, 2458, 0, 0,
	0, 0, 2150, 0, 2152, 0, 0, 434, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 938, 939,
	2159, 958, 959, 960, 968, 969, 970, 0, 37, 0,
	965, 973, 0, 0, 961, 0, 1426, 0, 0, 38,
	0, 941, 0, 0, 972, 0, 0, 0, 971, 0,
	0, 0, 41, 2168, 938, 939, 988, 958, 959, 960,
	968, 969, 970, 963, 0, 940, 0, 0, 0, 956,
	961, 955, 0, 0, 47, 0, 0, 941, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 940, 0, 58, 2214, 0, 0, 955, 0, 0,
	59, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 957, 0, 0, 0, 965, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 946, 732, 971, 0, 0, 0, 0, 732,
	732, 2262, 2263, 732, 0, 0, 0, 0, 0, 963,
	0, 37, 965, 973, 0, 956, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 2275, 0, 0, 41, 0, 0, 2278, 0,
	962, 0, 0, 0, 0, 963, 70, 0, 0, 63,
	0, 956, 70, 0, 0, 0, 964, 47, 0, 952,
	953, 954, 967, 0, 951, 949, 950, 942, 943, 944,
	945, 947, 948, 0, 118, 65, 70, 66, 0, 70,
	0, 1804, 2310, 0, 0, 0, 58, 0, 957, 571,
	131, 0, 0, 59, 0, 60, 0, 457, 0, 0,
	98, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 62, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2359, 132, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	126, 0, 964, 0, 0, 952, 953, 954, 967, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 435,
	0, 0, 0, 0, 0, 0, 0, 1803, 583, 0,
	0, 0, 63, 0, 0, 0, 0, 0, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 0, 118, 65, 0,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	457, 2427, 2427, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2442, 0, 0,
	0, 0, 133, 0, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2427, 0, 0, 0, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 2427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 1455,
	0, 621, 610, 611, 608, 609, 600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 1452,
	176, 0, 0, 0, 0, 638, 603, 732, 0, 0,
	177, 178, 179, 330, 653, 332, 654, 180, 655, 656,
	0, 181, 336, 337, 182, 183, 606, 637, 657, 658,
	340, 0, 184, 649, 0, 629, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 683, 192, 193,
	194, 0, 630, 631, 633, 0, 632, 634, 195, 196,
	392, 197, 659, 198, 660, 661, 0, 199, 0, 200,
	0, 201, 1453, 0, 652, 203, 0, 204, 0, 0,
	0, 594, 205, 206, 207, 639, 640, 617, 0, 0,
	208, 209, 662, 663, 664, 0, 210, 0, 211, 0,
	0, 684, 0, 212, 650, 0, 352, 0, 0, 213,
	214, 215, 216, 646, 648, 686, 0, 220, 0, 217,
	0, 685, 218, 665, 219, 666, 667, 668, 669, 670,
	0, 628, 732, 687, 221, 222, 223, 688, 224, 225,
	226, 0, 228, 227, 0, 651, 689, 229, 690, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 691, 237, 238, 240, 239, 589, 0, 618, 647,
	241, 671, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 692, 247, 693, 641, 248, 249, 250,
	251, 252, 0, 253, 642, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 672, 261, 262, 70, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 694, 276, 277, 595, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 635, 290,
	279, 280, 291, 695, 292, 673, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 674, 297, 298, 643, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 675, 676, 0, 0, 309, 310, 644, 645, 616,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	636, 319, 0, 382, 320, 321, 322, 383, 677, 1451,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 590, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 0, 586, 587, 1454, 0, 0, 0, 1102, 70,
	0, 596, 1449, 0, 0, 0, 0, 599, 0, 0,
	0, 0, 2336, 0, 174, 175, 1107, 176, 1108, 1109,
	1110, 1111, 329, 1112, 1113, 1114, 1115, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 1116, 181, 336,
	337, 182, 183, 1117, 1118, 338, 339, 340, 1119, 184,
	341, 1120, 819, 1121, 185, 186, 187, 0, 188, 1122,
	189, 190, 191, 1123, 683, 192, 193, 194, 1124, 1125,
	1127, 1126, 1128, 1129, 1130, 195, 196, 392, 197, 342,
	198, 343, 344, 1131, 199, 1132, 200, 1133, 201, 1134,
	1135, 202, 203, 1136, 204, 1137, 988, 1138, 345, 205,
	206, 207, 346, 347, 1139, 1140, 1141, 208, 209, 348,
	349, 350, 0, 210, 1142, 211, 1143, 1144, 684, 1145,
	212, 351, 1146, 352, 1147, 0, 213, 214, 215, 216,
	353, 354, 686, 1148, 220, 1149, 217, 1150, 685, 218,
	355, 219, 356, 357, 358, 359, 360, 1151, 361, 1152,
	687, 221, 222, 223, 688, 224, 225, 226, 1153, 228,
	227, 1154, 362, 689, 229, 690, 1155, 230, 1156, 1157,
	231, 0, 232, 233, 234, 236, 363, 235, 691, 237,
	238, 240, 239, 1158, 1159, 1160, 364, 241, 365, 242,
	243, 1161, 244, 1162, 1163, 245, 1164, 1165, 246, 366,
	692, 247, 693, 367, 248, 249, 250, 251, 252, 1166,
	253, 368, 254, 369, 255, 1167, 256, 257, 258, 259,
	260, 370, 261, 262, 1168, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 1169, 275, 694,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 1170,
	287, 372, 286, 288, 289, 1171, 290, 279, 280, 291,
	695, 292, 373, 374, 293, 1172, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 1173, 301, 1174, 302,
	303, 304, 305, 306, 307, 308, 1175, 377, 378, 379,
	1176, 1177, 309, 310, 380, 381, 1178, 311, 312, 313,
	314, 1179, 1180, 315, 316, 317, 318, 1181, 319, 1182,
	382, 320, 321, 322, 383, 384, 1183, 1184, 323, 1185,
	1186, 1187, 1188, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 1554, 0, 0, 0,
	0, 0, 0, 0, 0, 1555, 174, 175, 1107, 176,
	1108, 1109, 1110, 1111, 329, 1112, 1113, 1114, 1115, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 1116,
	181, 336, 337, 182, 183, 1117, 1118, 338, 339, 340,
	1119, 184, 341, 1120, 819, 1121, 185, 186, 187, 0,
	188, 1122, 189, 190, 191, 1123, 683, 192, 193, 194,
	1124, 1125, 1127, 1126, 1128, 1129, 1130, 195, 196, 392,
	197, 342, 198, 343, 344, 1131, 199, 1132, 200, 1133,
	201, 1134, 1135, 202, 203, 1136, 204, 1137, 0, 1138,
	345, 205, 206, 207, 346, 347, 1139, 1140, 1141, 208,
	209, 348, 349, 350, 0, 210, 1142, 211, 1143, 1144,
	684, 1145, 212, 351, 1146, 352, 1147, 0, 213, 214,
	215, 216, 353, 354, 686, 1148, 220, 1149, 217, 1150,
	685, 218, 355, 219, 356, 357, 358, 359, 360, 1151,
	361, 1152, 687, 221, 222, 223, 688, 224, 225, 226,
	1153, 228, 227, 1154, 362, 689, 229, 690, 1155, 230,
	1156, 1157, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 1158, 1159, 1160, 364, 241,
	365, 242, 243, 1161, 244, 1162, 1163, 245, 1164, 1165,
	246, 366, 692, 247, 693, 367, 248, 249, 250, 251,
	252, 1166, 253, 368, 254, 369, 255, 1167, 256, 257,
	258, 259, 260, 370, 261, 262, 1168, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 1169,
	275, 694, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 1170, 287, 372, 286, 288, 289, 1171, 290, 279,
	280, 291, 695, 292, 373, 374, 293, 1172, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 1173, 301,
	1174, 302, 303, 304, 305, 306, 307, 308, 1175, 377,
	378, 379, 1176, 1177, 309, 310, 380, 381, 1178, 311,
	312, 313, 314, 1179, 1180, 315, 316, 317, 318, 1181,
	319, 1182, 382, 320, 321, 322, 383, 384, 1183, 1184,
	323, 1185, 1186, 1187, 1188, 324, 325, 326, 327, 328,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2186, 174,
	175, 1107, 176, 1108, 1109, 1110, 1111, 329, 1112, 1113,
	1114, 1115, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 1116, 181, 336, 337, 182, 183, 1117, 1118,
	338, 339, 340, 1119, 184, 341, 1120, 819, 1121, 185,
	186, 187, 0, 188, 1122, 189, 190, 191, 1123, 683,
	192, 193, 194, 1124, 1125, 1127, 1126, 1128, 1129, 1130,
	195, 196, 392, 197, 342, 198, 343, 344, 1131, 199,
	1132, 200, 1133, 201, 1134, 1135, 202, 203, 1136, 204,
	1137, 0, 1138, 345, 205, 206, 207, 346, 347, 1139,
	1140, 1141, 208, 209, 348, 349, 350, 0, 210, 1142,
	211, 1143, 1144, 684, 1145, 212, 351, 1146, 352, 1147,
	0, 213, 214, 215, 216, 353, 354, 686, 1148, 220,
	1149, 217, 1150, 685, 218, 355, 219, 356, 357, 358,
	359, 360, 1151, 361, 1152, 687, 221, 222, 223, 688,
	224, 225, 226, 1153, 228, 227, 1154, 362, 689, 229,
	690, 1155, 230, 1156, 1157, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 1158, 1159,
	1160, 364, 241, 365, 242, 243, 1161, 244, 1162, 1163,
	245, 1164, 1165, 246, 366, 692, 247, 693, 367, 248,
	249, 250, 251, 252, 1166, 253, 368, 254, 369, 255,
	1167, 256, 257, 258, 259, 260, 370, 261, 262, 1168,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 1169, 275, 694, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 1170, 287, 372, 286, 288, 289,
	1171, 290, 279, 280, 291, 695, 292, 373, 374, 293,
	1172, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 1173, 301, 1174, 302, 303, 304, 305, 306, 307,
	308, 1175, 377, 378, 379, 1176, 1177, 309, 310, 380,
	381, 1178, 311, 312, 313, 314, 1179, 1180, 315, 316,
	317, 318, 1181, 319, 1182, 382, 320, 321, 322, 383,
	384, 1183, 1184, 323, 1185, 1186, 1187, 1188, 324, 325,
	326, 327, 328, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 174,
	175, 1107, 176, 1108, 1109, 1110, 1111, 329, 1112, 1113,
	1114, 1115, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 1116, 181, 336, 337, 182, 183, 1117, 1118,
	338, 339, 340, 1119, 184, 341, 1120, 819, 1121, 185,
	186, 187, 0, 188, 1122, 189, 190, 191, 1123, 683,
	192, 193, 194, 1124, 1125, 1127, 1126, 1128, 1129, 1130,
	195, 196, 392, 197, 342, 198, 343, 344, 1131, 199,
	1132, 200, 1133, 201, 1134, 1135, 202, 203, 1136, 204,
	1137, 0, 1138, 345, 205, 206, 207, 346, 347, 1139,
	1140, 1141, 208, 209, 348, 349, 350, 0, 210, 1142,
	211, 1143, 1144, 684, 1145, 212, 351, 1146, 352, 1147,
	0, 213, 214, 215, 216, 353, 354, 686, 1148, 220,
	1149, 217, 1150, 685, 218, 355, 219, 356, 357, 358,
	359, 360, 1151, 361, 1152, 687, 221, 222, 223, 688,
	224, 225, 226, 1153, 228, 227, 1154, 362, 689, 229,
	690, 1155, 230, 1156, 1157, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 1158, 1159,
	1160, 364, 241, 365, 242, 243, 1161, 244, 1162, 1163,
	245, 1164, 1165, 246, 366, 692, 247, 693, 367, 248,
	249, 250, 251, 252, 1166, 253, 368, 254, 369, 255,
	1167, 256, 257, 258, 259, 260, 370, 261, 262, 1168,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 1169, 275, 694, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 1170, 287, 372, 286, 288, 289,
	1171, 290, 279, 280, 291, 695, 292, 373, 374, 293,
	1172, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 1173, 301, 1174, 302, 303, 304, 305, 306, 307,
	308, 1175, 377, 378, 379, 1176, 1177, 309, 310, 380,
	381, 1178, 311, 312, 313, 314, 1179, 1180, 315, 316,
	317, 318, 1181, 319, 1182, 382, 320, 321, 322, 383,
	384, 1183, 1184, 323, 1185, 1186, 1187, 1188, 324, 325,
	326, 327, 328, 621, 610, 611, 608, 609, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 638, 603, 0,
	0, 0, 177, 178, 179, 330, 653, 332, 654, 180,
	655, 656, 0, 181, 336, 337, 182, 183, 606, 637,
	657, 658, 340, 0, 184, 649, 0, 629, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 683,
	192, 193, 194, 0, 630, 631, 633, 0, 632, 634,
	195, 196, 392, 197, 659, 198, 660, 661, 584, 199,
	0, 200, 0, 201, 0, 0, 652, 203, 0, 204,
	0, 0, 0, 594, 205, 206, 207, 639, 640, 617,
	0, 0, 208, 209, 662, 663, 664, 0, 210, 0,
	211, 0, 0, 684, 0, 212, 650, 0, 352, 0,
	0, 213, 214, 215, 216, 646, 648, 686, 0, 220,
	0, 217, 0, 685, 218, 665, 219, 666, 667, 668,
	669, 670, 0, 628, 0, 687, 221, 222, 223, 688,
	224, 225, 226, 0, 228, 227, 0, 651, 689, 229,
	690, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 589, 0,
	618, 647, 241, 671, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 692, 247, 693, 641, 248,
	249, 250, 251, 252, 0, 253, 642, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 672, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 694, 276, 277, 595, 278, 0,
	282, 283, 284, 285, 131, 287, 372, 286, 288, 289,
	635, 290, 279, 280, 291, 695, 292, 673, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 674, 297, 298,
	643, 0, 301, 133, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 675, 676, 0, 0, 309, 310, 644,
	645, 616, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 636, 319, 0, 382, 320, 321, 322, 818,
	677, 0, 0, 323, 0, 0, 0, 125, 324, 325,
	326, 327, 328, 590, 126, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 572, 599,
	621, 610, 611, 608, 609, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 638, 603, 0, 0, 0, 177,
	178, 179, 330, 653, 332, 654, 180, 655, 656, 0,
	181, 336, 337, 182, 183, 606, 637, 657, 658, 340,
	0, 184, 649, 0, 629, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 630, 631, 633, 0, 632, 634, 195, 196, 392,
	197, 659, 198, 660, 661, 0, 199, 0, 200, 0,
	201, 0, 0, 652, 203, 0, 204, 0, 0, 0,
	594, 205, 206, 207, 639, 640, 617, 0, 0, 208,
	209, 662, 663, 664, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 650, 0, 352, 0, 0, 213, 214,
	215, 216, 646, 648, 686, 0, 220, 0, 217, 0,
	685, 218, 665, 219, 666, 667, 668, 669, 670, 0,
	628, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 651, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 589, 0, 618, 647, 241,
	671, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 641, 248, 249, 250, 251,
	252, 0, 253, 642, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 672, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 595, 278, 0, 282, 283, 284,
	285, 131, 287, 372, 286, 288, 289, 635, 290, 279,
	280, 291, 695, 292, 673, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 674, 297, 298, 643, 0, 301,
	133, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	675, 676, 0, 0, 309, 310, 644, 645, 616, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 636,
	319, 0, 382, 320, 321, 322, 818, 677, 0, 0,
	323, 0, 0, 0, 125, 324, 325, 326, 327, 328,
	590, 126, 0, 0, 0, 0, 588, 0, 0, 0,
	0, 586, 587, 621, 610, 611, 608, 609, 600, 0,
	991, 0, 0, 0, 0, 0, 599, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 638, 603, 0,
	0, 0, 177, 178, 179, 330, 653, 332, 654, 180,
	655, 656, 0, 181, 336, 337, 182, 183, 606, 637,
	657, 658, 340, 0, 184, 649, 0, 629, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 683,
	192, 193, 194, 0, 630, 631, 633, 0, 632, 634,
	195, 196, 392, 197, 659, 198, 660, 661, 0, 199,
	0, 200, 0, 201, 0, 0, 652, 203, 0, 204,
	0, 0, 0, 594, 205, 206, 207, 639, 640, 617,
	0, 0, 208, 209, 662, 663, 664, 0, 210, 0,
	211, 0, 0, 684, 0, 212, 650, 0, 352, 0,
	0, 213, 214, 215, 216, 646, 648, 686, 0, 220,
	0, 217, 0, 685, 218, 665, 219, 666, 667, 668,
	669, 670, 0, 628, 0, 687, 221, 222, 223, 688,
	224, 225, 226, 0, 228, 227, 0, 651, 689, 229,
	690, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 589, 0,
	618, 647, 241, 671, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 692, 247, 693, 641, 248,
	249, 250, 251, 252, 0, 253, 642, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 672, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 694, 276, 277, 595, 278, 0,
	282, 283, 284, 285, 131, 287, 372, 286, 288, 289,
	635, 290, 279, 280, 291, 695, 292, 673, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 674, 297, 298,
	643, 0, 301, 133, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 675, 676, 0, 0, 309, 310, 644,
	645, 616, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 636, 319, 0, 382, 320, 321, 322, 818,
	677, 0, 0, 323, 0, 0, 0, 125, 324, 325,
	326, 327, 328, 590, 126, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 586, 587, 621, 610, 611, 608,
	609, 600, 0, 991, 0, 0, 0, 0, 0, 599,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	638, 603, 0, 0, 0, 177, 178, 179, 330, 653,
	332, 654, 180, 655, 656, 1507, 181, 336, 337, 182,
	183, 606, 637, 657, 658, 340, 0, 184, 649, 0,
	629, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 683, 192, 193, 194, 0, 630, 631, 633,
	0, 632, 634, 195, 196, 392, 197, 659, 198, 660,
	661, 0, 199, 0, 200, 0, 201, 0, 0, 652,
	203, 0, 204, 0, 0, 0, 594, 205, 206, 207,
	639, 640, 617, 0, 0, 208, 209, 662, 663, 664,
	0, 210, 0, 211, 0, 1512, 684, 0, 212, 650,
	0, 352, 0, 0, 213, 214, 215, 216, 646, 648,
	686, 0, 220, 0, 217, 0, 685, 218, 665, 219,
	666, 667, 668, 669, 670, 0, 628, 0, 687, 221,
	222, 223, 688, 224, 225, 226, 0, 228, 227, 1508,
	651, 689, 229, 690, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 691, 237, 238, 240,
	239, 589, 0, 618, 647, 241, 671, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 692, 247,
	693, 641, 248, 249, 250, 251, 252, 0, 253, 642,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 672,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 694, 276, 277,
	595, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 635, 290, 279, 280, 291, 695, 292,
	673, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	674, 297, 298, 643, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 675, 676, 0, 1509,
	309, 310, 644, 645, 616, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 636, 319, 0, 382, 320,
	321, 322, 383, 677, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 590, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 586, 587, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 0,
	0, 580, 599, 621, 610, 611, 608, 609, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 638, 603, 0,
	0, 0, 177, 178, 179, 330, 653, 332, 654, 180,
	655, 656, 0, 181, 336, 337, 182, 183, 606, 637,
	657, 658, 340, 0, 184, 649, 0, 629, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 683,
	192, 193, 194, 0, 630, 631, 633, 0, 632, 634,
	195, 196, 392, 197, 659, 198, 660, 661, 584, 199,
	0, 200, 0, 201, 0, 0, 652, 203, 0, 204,
	0, 0, 0, 594, 205, 206, 207, 639, 640, 617,
	0, 0, 208, 209, 662, 663, 664, 0, 210, 0,
	211, 0, 0, 684, 0, 212, 650, 0, 352, 0,
	0, 213, 214, 215, 216, 646, 648, 686, 0, 220,
	0, 217, 0, 685, 218, 665, 219, 666, 667, 668,
	669, 670, 0, 628, 0, 687, 221, 222, 223, 688,
	224, 225, 226, 0, 228, 227, 0, 651, 689, 229,
	690, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 589, 0,
	618, 647, 241, 671, 242, 243, 0, 244, 582, 0,
	245, 0, 0, 246, 366, 692, 247, 693, 641, 248,
	249, 250, 251, 252, 0, 253, 642, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 672, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 694, 276, 277, 595, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	635, 290, 279, 280, 291, 695, 292, 673, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 674, 297, 298,
	643, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 675, 676, 0, 0, 309, 310, 644,
	645, 616, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 636, 319, 0, 382, 320, 321, 322, 383,
	677, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 590, 0, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 586, 587, 621, 610, 611, 608,
	609, 600, 0, 596, 0, 0, 0, 0, 0, 599,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	638, 603, 0, 0, 0, 177, 178, 179, 330, 653,
	332, 654, 180, 655, 656, 0, 181, 336, 337, 182,
	183, 606, 637, 657, 658, 340, 0, 184, 649, 0,
	629, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 683, 192, 193, 194, 0, 630, 631, 633,
	0, 632, 634, 195, 196, 392, 197, 659, 198, 660,
	661, 0, 199, 0, 200, 0, 201, 0, 0, 652,
	203, 0, 204, 0, 0, 0, 594, 205, 206, 207,
	639, 640, 617, 0, 0, 208, 209, 662, 663, 664,
	0, 210, 0, 211, 0, 0, 684, 0, 212, 650,
	0, 352, 0, 0, 213, 214, 215, 216, 646, 648,
	686, 0, 220, 0, 217, 0, 685, 218, 665, 219,
	666, 667, 668, 669, 670, 0, 628, 0, 687, 221,
	222, 223, 688, 224, 225, 226, 0, 228, 227, 0,
	651, 689, 229, 690, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 691, 237, 238, 240,
	239, 589, 2116, 618, 647, 241, 671, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 692, 247,
	693, 641, 248, 249, 250, 251, 252, 0, 253, 642,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 672,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 694, 276, 277,
	595, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 635, 290, 279, 280, 291, 695, 292,
	673, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	674, 297, 298, 643, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 675, 676, 0, 0,
	309, 310, 644, 645, 616, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 636, 319, 0, 382, 320,
	321, 322, 383, 677, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 590, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 586, 587, 1051,
	621, 610, 611, 608, 609, 600, 596, 0, 0, 0,
	0, 0, 599, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 638, 603, 0, 0, 0, 177,
	178, 179, 330, 653, 332, 654, 180, 655, 656, 0,
	181, 336, 337, 182, 183, 606, 637, 657, 658, 340,
	0, 184, 649, 0, 629, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 630, 631, 633, 0, 632, 634, 195, 196, 392,
	197, 659, 198, 660, 661, 0, 199, 0, 200, 0,
	201, 0, 0, 652, 203, 0, 204, 0, 0, 0,
	594, 205, 206, 207, 639, 640, 617, 0, 0, 208,
	209, 662, 663, 664, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 650, 0, 352, 0, 0, 213, 214,
	215, 216, 646, 648, 686, 0, 220, 1368, 217, 0,
	685, 218, 665, 219, 666, 667, 668, 669, 670, 0,
	628, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 651, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 589, 0, 618, 647, 241,
	671, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 641, 248, 249, 250, 251,
	252, 0, 253, 642, 254, 369, 255, 1367, 256, 257,
	258, 259, 260, 672, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 595, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 635, 290, 279,
	280, 291, 695, 292, 673, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 674, 297, 298, 643, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	675, 676, 0, 0, 309, 310, 644, 645, 616, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 636,
	319, 0, 382, 320, 321, 322, 383, 677, 0, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	590, 0, 0, 0, 0, 0, 588, 0, 0, 0,
	0, 586, 587, 621, 610, 611, 608, 609, 600, 0,
	596, 0, 0, 0, 0, 0, 599, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 638, 603, 0,
	0, 0, 177, 178, 179, 330, 653, 332, 654, 180,
	655, 656, 0, 181, 336, 337, 182, 183, 606, 637,
	657, 658, 340, 0, 184, 649, 0, 629, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 683,
	192, 193, 194, 0, 630, 631, 633, 0, 632, 634,
	195, 196, 392, 197, 659, 198, 660, 661, 584, 199,
	0, 200, 0, 201, 0, 0, 652, 203, 0, 204,
	0, 0, 0, 594, 205, 206, 207, 639, 640, 617,
	0, 0, 208, 209, 662, 663, 664, 0, 210, 0,
	211, 0, 0, 684, 0, 212, 650, 0, 352, 0,
	0, 213, 214, 215, 216, 646, 648, 686, 0, 220,
	0, 217, 0, 685, 218, 665, 219, 666, 667, 668,
	669, 670, 0, 628, 0, 687, 221, 222, 223, 688,
	224, 225, 226, 0, 228, 227, 0, 651, 689, 229,
	690, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 589, 0,
	618, 647, 241, 671, 242, 243, 0, 244, 582, 0,
	245, 0, 0, 246, 366, 692, 247, 693, 641, 248,
	249, 250, 251, 252, 0, 253, 642, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 672, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 694, 276, 277, 595, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	635, 290, 279, 280, 291, 695, 292, 673, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 674, 297, 298,
	643, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 675, 676, 0, 0, 309, 310, 644,
	645, 616, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 636, 319, 0, 382, 320, 321, 322, 383,
	677, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 590, 0, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 586, 587, 621, 610, 611, 608,
	609, 600, 0, 596, 0, 0, 0, 0, 0, 599,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	638, 603, 0, 0, 0, 177, 178, 179, 330, 653,
	332, 654, 180, 655, 656, 0, 181, 336, 337, 182,
	183, 606, 637, 657, 658, 340, 0, 184, 649, 0,
	629, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 683, 192, 193, 194, 0, 630, 631, 633,
	0, 632, 634, 195, 196, 392, 197, 659, 198, 660,
	661, 0, 199, 0, 200, 0, 201, 0, 0, 652,
	203, 0, 204, 0, 0, 0, 594, 205, 206, 207,
	639, 640, 617, 0, 0, 208, 209, 662, 663, 664,
	0, 210, 0, 211, 0, 0, 684, 0, 212, 650,
	0, 352, 0, 0, 213, 214, 215, 216, 646, 648,
	686, 0, 220, 0, 217, 0, 685, 218, 665, 219,
	666, 667, 668, 669, 670, 0, 628, 0, 687, 221,
	222, 223, 688, 224, 225, 226, 0, 228, 227, 0,
	651, 689, 229, 690, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 691, 237, 238, 240,
	239, 589, 0, 618, 647, 241, 671, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 692, 247,
	693, 641, 248, 249, 250, 251, 252, 0, 253, 642,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 672,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 694, 276, 277,
	595, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 635, 290, 279, 280, 291, 695, 292,
	673, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	674, 297, 298, 643, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 675, 676, 0, 0,
	309, 310, 644, 645, 616, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 636, 319, 0, 382, 320,
	321, 322, 383, 677, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 590, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 586, 587, 0,
	0, 0, 0, 0, 995, 1444, 596, 0, 0, 0,
	0, 0, 599, 621, 610, 611, 608, 609, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 638, 603, 0,
	0, 0, 177, 178, 179, 330, 653, 332, 654, 180,
	655, 656, 0, 181, 336, 337, 182, 183, 606, 637,
	657, 658, 340, 0, 184, 649, 0, 629, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 683,
	192, 193, 194, 0, 630, 631, 633, 0, 632, 634,
	195, 196, 392, 197, 659, 198, 660, 661, 584, 199,
	0, 200, 0, 201, 0, 0, 652, 203, 0, 204,
	0, 0, 0, 594, 205, 206, 207, 639, 640, 617,
	0, 0, 208, 209, 662, 663, 664, 0, 210, 0,
	211, 0, 0, 684, 0, 212, 650, 0, 352, 0,
	0, 213, 214, 215, 216, 646, 648, 686, 0, 220,
	0, 217, 0, 685, 218, 665, 219, 666, 667, 668,
	669, 670, 0, 628, 0, 687, 221, 222, 223, 688,
	224, 225, 226, 0, 228, 227, 0, 651, 689, 229,
	690, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 589, 0,
	618, 647, 241, 671, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 692, 247, 693, 641, 248,
	249, 250, 251, 252, 0, 253, 642, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 672, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 694, 276, 277, 595, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	635, 290, 279, 280, 291, 695, 292, 673, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 674, 297, 298,
	643, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 675, 676, 0, 0, 309, 310, 644,
	645, 616, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 636, 319, 0, 382, 320, 321, 322, 383,
	677, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 590, 0, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 586, 587, 621, 610, 611, 608,
	609, 600, 0, 596, 0, 0, 0, 0, 0, 599,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	638, 603, 0, 0, 0, 177, 178, 179, 330, 653,
	332, 654, 180, 655, 656, 0, 181, 336, 337, 182,
	183, 606, 637, 657, 658, 340, 0, 184, 649, 0,
	629, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 683, 192, 193, 194, 0, 630, 631, 633,
	0, 632, 634, 195, 196, 392, 197, 659, 198, 660,
	661, 0, 199, 0, 200, 0, 201, 0, 0, 652,
	203, 0, 204, 0, 0, 0, 594, 205, 206, 207,
	639, 640, 617, 0, 0, 208, 209, 662, 663, 664,
	0, 210, 0, 211, 0, 0, 684, 0, 212, 650,
	0, 352, 0, 0, 213, 214, 215, 216, 646, 648,
	686, 0, 220, 0, 217, 0, 685, 218, 665, 219,
	666, 667, 668, 669, 670, 0, 628, 0, 687, 221,
	222, 223, 688, 224, 225, 226, 0, 228, 227, 0,
	651, 689, 229, 690, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 691, 237, 238, 240,
	239, 589, 0, 618, 647, 241, 671, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 692, 247,
	693, 641, 248, 249, 250, 251, 252, 0, 253, 642,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 672,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 694, 276, 277,
	595, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 635, 290, 279, 280, 291, 695, 292,
	673, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	674, 297, 298, 643, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 675, 676, 0, 0,
	309, 310, 644, 645, 616, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 636, 319, 0, 382, 320,
	321, 322, 383, 677, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 590, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 586, 587, 621,
	610, 611, 608, 609, 600, 0, 596, 2024, 0, 0,
	0, 0, 599, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 638, 603, 0, 0, 0, 177, 178,
	179, 330, 653, 332, 654, 180, 655, 656, 0, 181,
	336, 337, 182, 183, 606, 637, 657, 658, 340, 0,
	184, 649, 0, 629, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 683, 192, 193, 194, 0,
	630, 631, 633, 0, 632, 634, 195, 196, 392, 197,
	659, 198, 660, 661, 0, 199, 0, 200, 0, 201,
	0, 0, 652, 203, 0, 204, 0, 0, 0, 594,
	205, 206, 207, 639, 640, 617, 0, 0, 208, 209,
	662, 663, 664, 0, 210, 0, 211, 0, 0, 684,
	0, 212, 650, 0, 352, 0, 0, 213, 214, 215,
	216, 646, 648, 686, 0, 220, 0, 217, 0, 685,
	218, 665, 219, 666, 667, 668, 669, 670, 0, 628,
	0, 687, 221, 222, 223, 688, 224, 225, 226, 0,
	228, 227, 0, 651, 689, 229, 690, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 691,
	237, 238, 240, 239, 589, 0, 618, 647, 241, 671,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	366, 692, 247, 693, 641, 248, 249, 250, 251, 252,
	0, 253, 642, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 672, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	694, 276, 277, 595, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 635, 290, 279, 280,
	291, 695, 292, 673, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 674, 297, 298, 643, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 675,
	676, 0, 0, 309, 310, 644, 645, 616, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 636, 319,
	0, 382, 320, 321, 322, 383, 677, 1973, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 590,
	0, 0, 0, 0, 0, 588, 0, 0, 0, 0,
	586, 587, 621, 610, 611, 608, 609, 600, 0, 596,
	0, 0, 0, 0, 0, 599, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 638, 603, 0, 0,
	0, 177, 178, 179, 330, 653, 332, 654, 180, 655,
	656, 0, 181, 336, 337, 182, 183, 606, 637, 657,
	658, 340, 0, 184, 649, 0, 629, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 683, 192,
	193, 194, 0, 630, 631, 633, 0, 632, 634, 195,
	196, 392, 197, 659, 198, 660, 661, 0, 199, 0,
	200, 0, 201, 0, 0, 652, 203, 0, 204, 0,
	0, 0, 594, 205, 206, 207, 639, 640, 617, 0,
	0, 208, 209, 662, 663, 664, 0, 210, 0, 211,
	0, 0, 684, 0, 212, 650, 0, 352, 0, 0,
	213, 214, 215, 216, 646, 648, 686, 0, 220, 0,
	217, 0, 685, 218, 665, 219, 666, 667, 668, 669,
	670, 0, 628, 0, 687, 221, 222, 223, 688, 224,
	225, 226, 0, 228, 227, 0, 651, 689, 229, 690,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 691, 237, 238, 240, 239, 589, 0, 618,
	647, 241, 671, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 692, 247, 693, 641, 248, 249,
	250, 251, 252, 0, 253, 642, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 672, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 694, 276, 277, 595, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 635,
	290, 279, 280, 291, 695, 292, 673, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 674, 297, 298, 643,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 675, 676, 0, 0, 309, 310, 644, 645,
	616, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 636, 319, 0, 382, 320, 321, 322, 383, 677,
	0, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 590, 0, 0, 0, 0, 0, 588, 0,
	0, 0, 0, 586, 587, 621, 610, 611, 608, 609,
	600, 0, 596, 1963, 0, 0, 0, 0, 599, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 638,
	603, 0, 0, 0, 177, 178, 179, 330, 653, 332,
	654, 180, 655, 656, 0, 181, 336, 337, 182, 183,
	606, 637, 657, 658, 340, 0, 184, 649, 0, 629,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 683, 192, 193, 194, 0, 630, 631, 633, 0,
	632, 634, 195, 196, 392, 197, 659, 198, 660, 661,
	0, 199, 0, 200, 0, 201, 0, 0, 652, 203,
	0, 204, 0, 0, 0, 594, 205, 206, 207, 639,
	640, 617, 0, 0, 208, 209, 662, 663, 664, 0,
	210, 0, 211, 0, 0, 684, 0, 212, 650, 0,
	352, 0, 0, 213, 214, 215, 216, 646, 648, 686,
	0, 220, 0, 217, 0, 685, 218, 665, 219, 666,
	667, 668, 669, 670, 0, 628, 0, 687, 221, 222,
	223, 688, 224, 225, 226, 0, 228, 227, 0, 651,
	689, 229, 690, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 691, 237, 238, 240, 239,
	589, 0, 618, 647, 241, 671, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 692, 247, 693,
	641, 248, 249, 250, 251, 252, 0, 253, 642, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 672, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 694, 276, 277, 595,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 635, 290, 279, 280, 291, 695, 292, 673,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 674,
	297, 298, 643, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 675, 676, 0, 0, 309,
	310, 644, 645, 616, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 636, 319, 0, 382, 320, 321,
	322, 383, 677, 0, 0, 323, 0, 0, 0, 0,
	324, 325, 326, 327, 328, 590, 0, 0, 0, 0,
	0, 588, 0, 0, 0, 0, 586, 587, 1051, 621,
	610, 611, 608, 609, 600, 596, 0, 0, 0, 0,
	0, 599, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 638, 603, 0, 0, 0, 177, 178,
	179, 330, 653, 332, 654, 180, 655, 656, 0, 181,
	336, 337, 182, 183, 606, 637, 657, 658, 340, 0,
	184, 649, 0, 629, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 683, 192, 193, 194, 0,
	630, 631, 633, 0, 632, 634, 195, 196, 392, 197,
	659, 198, 660, 661, 0, 199, 0, 200, 0, 201,
	0, 0, 652, 203, 0, 204, 0, 0, 0, 594,
	205, 206, 207, 639, 640, 617, 0, 0, 208, 209,
	662, 663, 664, 0, 210, 0, 211, 0, 1512, 684,
	0, 212, 650, 0, 352, 0, 0, 213, 214, 215,
	216, 646, 648, 686, 0, 220, 0, 217, 0, 685,
	218, 665, 219, 666, 667, 668, 669, 670, 0, 628,
	0, 687, 221, 222, 223, 688, 224, 225, 226, 0,
	228, 227, 0, 651, 689, 229, 690, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 691,
	237, 238, 240, 239, 589, 0, 618, 647, 241, 671,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	366, 692, 247, 693, 641, 248, 249, 250, 251, 252,
	0, 253, 642, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 672, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	694, 276, 277, 595, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 635, 290, 279, 280,
	291, 695, 292, 673, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 674, 297, 298, 643, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 675,
	676, 0, 0, 309, 310, 644, 645, 616, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 636, 319,
	0, 382, 320, 321, 322, 383, 677, 0, 0, 323,
	0, 0, 0, 0, 324, 325, 326, 327, 328, 590,
	0, 0, 0, 0, 0, 588, 0, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 0, 0, 1557, 599, 621, 610, 611, 608,
	609, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	638, 603, 0, 0, 0, 177, 178, 179, 330, 653,
	332, 654, 180, 655, 656, 0, 181, 336, 337, 182,
	183, 606, 637, 657, 658, 340, 0, 184, 649, 0,
	629, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 683, 192, 193, 194, 0, 630, 631, 633,
	0, 632, 634, 195, 196, 392, 197, 659, 198, 660,
	661, 0, 199, 0, 200, 0, 201, 0, 0, 652,
	203, 0, 204, 0, 0, 0, 594, 205, 206, 207,
	639, 640, 617, 0, 0, 208, 209, 662, 663, 664,
	0, 210, 0, 211, 0, 0, 684, 0, 212, 650,
	0, 352, 0, 0, 213, 214, 215, 216, 646, 648,
	686, 0, 220, 0, 217, 0, 685, 218, 665, 219,
	666, 667, 668, 669, 670, 0, 628, 0, 687, 221,
	222, 223, 688, 224, 225, 226, 0, 228, 227, 0,
	651, 689, 229, 690, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 691, 237, 238, 240,
	239, 589, 0, 618, 647, 241, 671, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 692, 247,
	693, 641, 248, 249, 250, 251, 252, 0, 253, 642,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 672,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 694, 276, 277,
	595, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 635, 290, 279, 280, 291, 695, 292,
	673, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	674, 297, 298, 643, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 675, 676, 0, 0,
	309, 310, 644, 645, 616, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 636, 319, 0, 382, 320,
	321, 322, 383, 677, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 590, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 586, 587, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 0,
	0, 1521, 599, 621, 610, 611, 608, 609, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 638, 603, 0,
	0, 0, 177, 178, 179, 330, 653, 332, 654, 180,
	655, 656, 0, 181, 336, 337, 182, 183, 606, 637,
	657, 658, 340, 0, 184, 649, 0, 629, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 683,
	192, 193, 194, 0, 630, 631, 633, 0, 632, 634,
	195, 196, 392, 197, 659, 198, 660, 661, 0, 199,
	0, 200, 0, 201, 0, 0, 652, 203, 0, 204,
	0, 0, 0, 594, 205, 206, 207, 639, 640, 617,
	0, 0, 208, 209, 662, 663, 664, 0, 210, 0,
	211, 0, 0, 684, 0, 212, 650, 0, 352, 0,
	0, 213, 214, 215, 216, 646, 648, 686, 0, 220,
	0, 217, 0, 685, 218, 665, 219, 666, 667, 668,
	669, 670, 0, 628, 0, 687, 221, 222, 223, 688,
	224, 225, 226, 0, 228, 227, 0, 651, 689, 229,
	690, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 589, 0,
	618, 647, 241, 671, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 692, 247, 693, 641, 248,
	249, 250, 251, 252, 0, 253, 642, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 672, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 694, 276, 277, 595, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	635, 290, 279, 280, 291, 695, 292, 673, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 674, 297, 298,
	643, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 675, 676, 0, 0, 309, 310, 644,
	645, 616, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 636, 319, 0, 382, 320, 321, 322, 383,
	677, 0, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 590, 0, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 0, 0, 1519, 599,
	621, 610, 611, 608, 609, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 638, 603, 0, 0, 0, 177,
	178, 179, 330, 653, 332, 654, 180, 655, 656, 0,
	181, 336, 337, 182, 183, 606, 637, 657, 658, 340,
	0, 184, 649, 0, 629, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 630, 631, 633, 0, 632, 634, 195, 196, 392,
	197, 659, 198, 660, 661, 0, 199, 0, 200, 0,
	201, 0, 0, 652, 203, 0, 204, 0, 0, 0,
	594, 205, 206, 207, 639, 640, 617, 0, 0, 208,
	209, 662, 663, 664, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 650, 0, 352, 0, 0, 213, 214,
	215, 216, 646, 648, 686, 0, 220, 0, 217, 0,
	685, 218, 665, 219, 666, 667, 668, 669, 670, 0,
	628, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 651, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 589, 0, 618, 647, 241,
	671, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 641, 248, 249, 250, 251,
	252, 0, 253, 642, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 672, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 595, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 635, 290, 279,
	280, 291, 695, 292, 673, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 674, 297, 298, 643, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	675, 676, 0, 0, 309, 310, 644, 645, 616, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 636,
	319, 0, 382, 320, 321, 322, 383, 677, 0, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	590, 0, 0, 0, 0, 0, 588, 0, 0, 0,
	0, 586, 587, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 0, 0, 1503, 599, 621, 610, 611,
	608, 609, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 638, 603, 0, 0, 0, 177, 178, 179, 330,
	653, 332, 654, 180, 655, 656, 0, 181, 336, 337,
	182, 183, 606, 637, 657, 658, 340, 0, 184, 649,
	0, 629, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 683, 192, 193, 194, 0, 630, 631,
	633, 0, 632, 634, 195, 196, 392, 197, 659, 198,
	660, 661, 0, 199, 0, 200, 0, 201, 0, 0,
	652, 203, 0, 204, 0, 0, 0, 594, 205, 206,
	207, 639, 640, 617, 0, 0, 208, 209, 662, 663,
	664, 0, 210, 0, 211, 0, 0, 684, 0, 212,
	650, 0, 352, 0, 0, 213, 214, 215, 216, 646,
	648, 686, 0, 220, 0, 217, 0, 685, 218, 665,
	219, 666, 667, 668, 669, 670, 0, 628, 0, 687,
	221, 222, 223, 688, 224, 225, 226, 0, 228, 227,
	0, 651, 689, 229, 690, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 691, 237, 238,
	240, 239, 589, 0, 618, 647, 241, 671, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 692,
	247, 693, 641, 248, 249, 250, 251, 252, 0, 253,
	642, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	672, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 694, 276,
	277, 595, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 635, 290, 279, 280, 291, 695,
	292, 673, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 674, 297, 298, 643, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 675, 676, 0,
	0, 309, 310, 644, 645, 616, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 636, 319, 0, 382,
	320, 321, 322, 383, 677, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 590, 0, 0,
	0, 0, 0, 588, 0, 0, 0, 0, 586, 587,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	0, 0, 1491, 599, 621, 610, 611, 608, 609, 600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 638, 603,
	0, 0, 0, 177, 178, 179, 330, 653, 332, 654,
	180, 655, 656, 0, 181, 336, 337, 182, 183, 606,
	637, 657, 658, 340, 0, 184, 649, 0, 629, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	683, 192, 193, 194, 0, 630, 631, 633, 0, 632,
	634, 195, 196, 392, 197, 659, 198, 660, 661, 0,
	199, 0, 200, 0, 201, 0, 0, 652, 203, 0,
	204, 0, 0, 0, 594, 205, 206, 207, 639, 640,
	617, 0, 0, 208, 209, 662, 663, 664, 0, 210,
	0, 211, 0, 0, 684, 0, 212, 650, 0, 352,
	0, 0, 213, 214, 215, 216, 646, 648, 686, 0,
	220, 0, 217, 0, 685, 218, 665, 219, 666, 667,
	668, 669, 670, 0, 628, 0, 687, 221, 222, 223,
	688, 224, 225, 226, 0, 228, 227, 0, 651, 689,
	229, 690, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 691, 237, 238, 240, 239, 589,
	0, 618, 647, 241, 671, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 692, 247, 693, 641,
	248, 249, 250, 251, 252, 0, 253, 642, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 672, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 694, 276, 277, 595, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 635, 290, 279, 280, 291, 695, 292, 673, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 674, 297,
	298, 643, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 675, 676, 0, 0, 309, 310,
	644, 645, 616, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 636, 319, 0, 382, 320, 321, 322,
	383, 677, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 590, 0, 0, 0, 0, 0,
	588, 0, 0, 0, 0, 586, 587, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 0, 0, 1489,
	599, 1481, 610, 611, 608, 609, 600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 638, 603, 0, 0, 0,
	177, 178, 179, 330, 653, 332, 654, 180, 655, 656,
	0, 181, 336, 337, 182, 183, 606, 637, 657, 658,
	340, 0, 184, 649, 0, 629, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 683, 192, 193,
	194, 0, 630, 631, 633, 0, 632, 634, 195, 196,
	392, 197, 659, 1484, 660, 661, 0, 199, 0, 200,
	0, 201, 0, 0, 652, 203, 0, 204, 0, 0,
	0, 594, 205, 206, 207, 639, 640, 617, 0, 0,
	208, 209, 662, 663, 664, 0, 210, 0, 211, 0,
	0, 684, 0, 212, 650, 0, 352, 0, 0, 213,
	1485, 215, 216, 646, 648, 686, 0, 220, 0, 217,
	0, 685, 218, 665, 219, 666, 667, 668, 669, 670,
	0, 628, 0, 687, 221, 222, 223, 688, 224, 225,
	226, 0, 228, 227, 0, 651, 689, 229, 690, 0,
	230, 0, 0, 231, 0, 232, 1486, 1483, 236, 363,
	235, 691, 237, 238, 240, 239, 589, 0, 618, 647,
	241, 671, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 692, 247, 693, 641, 248, 249, 250,
	251, 252, 0, 253, 642, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 672, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 694, 276, 277, 595, 278, 0, 282, 283,
	284, 1487, 0, 287, 372, 286, 288, 289, 635, 290,
	279, 280, 291, 695, 292, 673, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 674, 297, 298, 643, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 675, 676, 0, 0, 309, 310, 644, 645, 616,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	636, 319, 0, 382, 320, 321, 322, 383, 677, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 1482,
	328, 590, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 0, 0, 1478, 599, 1481, 610,
	611, 608, 609, 600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 638, 603, 0, 0, 0, 177, 178, 179,
	330, 653, 332, 654, 180, 655, 656, 0, 181, 336,
	337, 182, 183, 606, 637, 657, 658, 340, 0, 184,
	649, 0, 629, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 683, 192, 193, 194, 0, 630,
	631, 633, 0, 632, 634, 195, 196, 392, 197, 659,
	1484, 660, 661, 0, 199, 0, 200, 0, 201, 0,
	0, 652, 203, 0, 204, 0, 0, 0, 594, 205,
	206, 207, 639, 640, 617, 0, 0, 208, 209, 662,
	663, 664, 0, 210, 0, 211, 0, 0, 684, 0,
	212, 650, 0, 352, 0, 0, 213, 1485, 215, 216,
	646, 648, 686, 0, 220, 0, 217, 0, 685, 218,
	665, 219, 666, 667, 668, 669, 670, 0, 628, 0,
	687, 221, 222, 223, 688, 224, 225, 226, 0, 228,
	227, 0, 651, 689, 229, 690, 0, 230, 0, 0,
	231, 0, 232, 1486, 1483, 236, 363, 235, 691, 237,
	238, 240, 239, 589, 0, 618, 647, 241, 671, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	692, 247, 693, 641, 248, 249, 250, 251, 252, 0,
	253, 642, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 672, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 694,
	276, 277, 595, 278, 0, 282, 283, 284, 1487, 0,
	287, 372, 286, 288, 289, 635, 290, 279, 280, 291,
	695, 292, 673, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 674, 297, 298, 643, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 675, 676,
	0, 0, 309, 310, 644, 645, 616, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 636, 319, 0,
	382, 320, 321, 322, 383, 677, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 1482, 328, 590, 0,
	0, 0, 0, 0, 588, 0, 0, 0, 0, 586,
	587, 621, 610, 611, 608, 609, 600, 0, 596, 0,
	0, 0, 0, 0, 599, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 638, 603, 0, 0, 0,
	177, 178, 179, 330, 653, 332, 654, 180, 655, 656,
	0, 181, 336, 337, 182, 183, 606, 637, 657, 658,
	340, 0, 184, 649, 0, 629, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 683, 192, 193,
	194, 0, 630, 631, 633, 0, 632, 634, 195, 196,
	392, 197, 659, 198, 660, 661, 0, 199, 0, 200,
	0, 201, 0, 0, 652, 203, 0, 204, 0, 0,
	0, 594, 205, 206, 207, 639, 640, 617, 0, 0,
	208, 209, 662, 663, 664, 0, 210, 0, 211, 0,
	0, 684, 0, 212, 650, 0, 352, 0, 0, 213,
	214, 215, 216, 646, 648, 686, 0, 220, 0, 217,
	0, 685, 218, 665, 219, 666, 667, 668, 669, 670,
	0, 628, 0, 687, 221, 222, 223, 688, 224, 225,
	226, 0, 228, 227, 0, 651, 689, 229, 690, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 691, 237, 238, 240, 239, 589, 0, 618, 647,
	241, 671, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 692, 247, 693, 641, 248, 249, 250,
	251, 252, 0, 253, 642, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 672, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 694, 276, 277, 595, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 635, 290,
	279, 280, 291, 695, 292, 673, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 674, 297, 298, 643, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 675, 676, 0, 0, 309, 310, 644, 645, 616,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	636, 319, 0, 382, 320, 321, 322, 383, 677, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 590, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 0, 586, 587, 621, 610, 611, 608, 609, 600,
	0, 596, 1439, 0, 0, 0, 0, 599, 0, 0,
	174, 175, 1355, 176, 0, 0, 0, 0, 638, 603,
	0, 0, 0, 177, 178, 179, 330, 653, 332, 654,
	180, 655, 656, 0, 181, 336, 337, 182, 183, 606,
	637, 657, 658, 340, 0, 184, 649, 0, 629, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	683, 192, 193, 194, 0, 630, 631, 633, 0, 632,
	634, 195, 196, 392, 197, 659, 198, 660, 661, 0,
	199, 0, 200, 0, 201, 0, 0, 652, 203, 0,
	204, 0, 0, 0, 594, 205, 206, 207, 639, 640,
	617, 0, 0, 208, 209, 662, 663, 664, 0, 210,
	0, 211, 0, 0, 684, 0, 212, 650, 0, 352,
	0, 0, 213, 214, 215, 216, 646, 648, 686, 0,
	220, 0, 217, 0, 685, 218, 665, 219, 666, 667,
	668, 669, 670, 0, 628, 0, 687, 221, 222, 223,
	688, 224, 225, 226, 0, 228, 227, 0, 651, 689,
	229, 690, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 691, 237, 238, 240, 239, 589,
	0, 618, 647, 241, 671, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 692, 247, 693, 641,
	248, 249, 250, 251, 252, 0, 253, 642, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 672, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 694, 276, 277, 595, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 635, 290, 279, 280, 291, 695, 292, 673, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 674, 297,
	298, 643, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 675, 676, 0, 0, 309, 310,
	644, 645, 616, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 636, 319, 0, 382, 320, 321, 322,
	383, 677, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 590, 0, 0, 0, 0, 0,
	588, 0, 0, 0, 0, 586, 587, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 0, 0, 762,
	599, 621, 610, 611, 608, 609, 600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 638, 603, 0, 0, 0,
	177, 178, 179, 330, 653, 332, 654, 180, 655, 656,
	0, 181, 336, 337, 182, 183, 606, 637, 657, 658,
	340, 0, 184, 649, 0, 629, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 683, 192, 193,
	194, 0, 630, 631, 633, 0, 632, 634, 195, 196,
	392, 197, 659, 198, 660, 661, 0, 199, 0, 200,
	0, 201, 0, 0, 652, 203, 0, 204, 0, 0,
	0, 594, 205, 206, 207, 639, 640, 617, 0, 0,
	208, 209, 662, 663, 664, 0, 210, 0, 211, 0,
	0, 684, 0, 212, 650, 0, 352, 0, 0, 213,
	214, 215, 216, 646, 648, 686, 0, 220, 0, 217,
	0, 685, 218, 665, 219, 666, 667, 668, 669, 670,
	0, 628, 0, 687, 221, 222, 223, 688, 224, 225,
	226, 0, 228, 227, 0, 651, 689, 229, 690, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 691, 237, 238, 240, 239, 589, 0, 618, 647,
	241, 671, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 692, 247, 693, 641, 248, 249, 250,
	251, 252, 0, 253, 642, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 672, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 694, 276, 277, 595, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 635, 290,
	279, 280, 291, 695, 292, 673, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 674, 297, 298, 643, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 675, 676, 0, 0, 309, 310, 644, 645, 616,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	636, 319, 0, 382, 320, 321, 322, 383, 677, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 590, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 0, 0, 760, 599, 621, 610,
	611, 608, 609, 600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 638, 603, 0, 0, 0, 177, 178, 179,
	330, 653, 332, 654, 180, 655, 656, 0, 181, 336,
	337, 182, 183, 606, 637, 657, 658, 340, 0, 184,
	649, 0, 629, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 683, 192, 193, 194, 0, 630,
	631, 633, 0, 632, 634, 195, 196, 392, 197, 659,
	198, 660, 661, 0, 199, 0, 200, 0, 201, 0,
	0, 652, 203, 0, 204, 0, 0, 0, 594, 205,
	206, 207, 639, 640, 617, 0, 0, 208, 209, 662,
	663, 664, 0, 210, 0, 211, 0, 0, 684, 0,
	212, 650, 0, 352, 0, 0, 213, 214, 215, 216,
	646, 648, 686, 0, 220, 0, 217, 0, 685, 218,
	665, 219, 666, 667, 668, 669, 670, 0, 628, 0,
	687, 221, 222, 223, 688, 224, 225, 226, 0, 228,
	227, 0, 651, 689, 229, 690, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 691, 237,
	238, 240, 239, 589, 0, 618, 647, 241, 671, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	692, 247, 693, 641, 248, 249, 250, 251, 252, 0,
	253, 642, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 672, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 694,
	276, 277, 595, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 635, 290, 279, 280, 291,
	695, 292, 673, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 674, 297, 298, 643, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 675, 676,
	0, 0, 309, 310, 644, 645, 616, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 636, 319, 0,
	382, 320, 321, 322, 383, 677, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 590, 0,
	0, 0, 0, 0, 588, 0, 0, 0, 0, 586,
	587, 621, 610, 611, 608, 609, 600, 0, 596, 0,
	0, 0, 0, 0, 599, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 638, 603, 0, 0, 0,
	177, 178, 179, 330, 653, 332, 654, 180, 655, 656,
	0, 181, 336, 337, 182, 183, 606, 637, 657, 658,
	340, 0, 184, 649, 0, 629, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 683, 192, 193,
	2426, 0, 630, 631, 633, 0, 632, 634, 195, 196,
	392, 197, 659, 198, 660, 661, 0, 199, 0, 200,
	0, 201, 0, 0, 652, 203, 0, 204, 0, 0,
	0, 594, 205, 206, 207, 639, 640, 617, 0, 0,
	208, 209, 662, 663, 664, 0, 210, 0, 211, 0,
	0, 684, 0, 212, 650, 0, 352, 0, 0, 213,
	214, 215, 216, 646, 648, 686, 0, 220, 0, 217,
	0, 685, 218, 665, 219, 666, 667, 668, 669, 670,
	0, 628, 0, 687, 221, 222, 223, 688, 224, 225,
	226, 0, 228, 227, 0, 651, 689, 229, 690, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 691, 237, 238, 240, 239, 589, 0, 618, 647,
	241, 671, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 692, 247, 693, 641, 248, 249, 250,
	251, 252, 0, 253, 642, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 672, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 694, 276, 277, 595, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 635, 290,
	279, 280, 291, 695, 292, 673, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 674, 297, 298, 643, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 675, 676, 0, 0, 309, 310, 644, 645, 616,
	311, 312, 2425, 314, 0, 0, 315, 316, 317, 318,
	636, 319, 0, 382, 320, 321, 322, 383, 677, 0,
	0, 323, 0, 0, 0, 0, 324, 325, 326, 327,
	328, 590, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 0, 586, 587, 621, 610, 611, 608, 609, 600,
	0, 596, 0, 0, 0, 0, 0, 599, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 638, 603,
	0, 0, 0, 177, 178, 179, 330, 653, 332, 654,
	180, 655, 656, 0, 181, 336, 337, 182, 183, 606,
	637, 657, 658, 340, 0, 184, 649, 0, 629, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	683, 192, 193, 194, 0, 630, 631, 633, 0, 632,
	634, 195, 196, 392, 197, 659, 198, 660, 661, 0,
	199, 0, 200, 0, 201, 0, 0, 652, 203, 0,
	204, 0, 0, 0, 594, 205, 206, 207, 639, 640,
	617, 0, 0, 208, 209, 662, 663, 664, 0, 210,
	0, 211, 0, 0, 684, 0, 212, 650, 0, 352,
	0, 0, 213, 214, 215, 216, 646, 648, 686, 0,
	220, 0, 217, 0, 685, 218, 665, 219, 666, 667,
	668, 669, 670, 0, 628, 0, 687, 221, 222, 223,
	688, 224, 225, 226, 0, 228, 227, 0, 651, 689,
	229, 690, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 691, 237, 238, 240, 239, 589,
	0, 618, 647, 241, 671, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 692, 247, 693, 641,
	248, 249, 250, 251, 252, 0, 253, 642, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 672, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 694, 276, 277, 595, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 635, 290, 279, 280, 291, 695, 292, 673, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 674, 297,
	298, 643, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 675, 676, 0, 0, 309, 310,
	644, 645, 616, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 636, 319, 0, 382, 320, 321, 322,
	383, 677, 0, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 590, 0, 0, 0, 0, 0,
	588, 0, 0, 0, 0, 586, 587, 621, 610, 611,
	608, 609, 600, 0, 596, 0, 0, 0, 0, 0,
	599, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 638, 603, 0, 0, 0, 177, 178, 179, 2424,
	653, 332, 654, 180, 655, 656, 0, 181, 336, 337,
	182, 183, 606, 637, 657, 658, 340, 0, 184, 649,
	0, 629, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 683, 192, 193, 2426, 0, 630, 631,
	633, 0, 632, 634, 195, 196, 392, 197, 659, 198,
	660, 661, 0, 199, 0, 200, 0, 201, 0, 0,
	652, 203, 0, 204, 0, 0, 0, 594, 205, 206,
	207, 639, 640, 617, 0, 0, 208, 209, 662, 663,
	664, 0, 210, 0, 211, 0, 0, 684, 0, 212,
	650, 0, 352, 0, 0, 213, 214, 215, 216, 646,
	648, 686, 0, 220, 0, 217, 0, 685, 218, 665,
	219, 666, 667, 668, 669, 670, 0, 628, 0, 687,
	221, 222, 223, 688, 224, 225, 226, 0, 228, 227,
	0, 651, 689, 229, 690, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 691, 237, 238,
	240, 239, 589, 0, 618, 647, 241, 671, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 692,
	247, 693, 641, 248, 249, 250, 251, 252, 0, 253,
	642, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	672, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 694, 276,
	277, 595, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 635, 290, 279, 280, 291, 695,
	292, 673, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 674, 297, 298, 643, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 675, 676, 0,
	0, 309, 310, 644, 645, 616, 311, 312, 2425, 314,
	0, 0, 315, 316, 317, 318, 636, 319, 0, 382,
	320, 321, 322, 383, 677, 0, 0, 323, 0, 0,
	0, 0, 324, 325, 326, 327, 328, 590, 0, 0,
	0, 0, 0, 588, 0, 0, 0, 0, 586, 587,
	621, 610, 611, 608, 609, 600, 0, 596, 0, 0,
	0, 0, 0, 599, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 638, 603, 0, 0, 0, 177,
	178, 179, 330, 653, 332, 654, 180, 655, 656, 0,
	181, 336, 337, 182, 183, 606, 637, 657, 658, 340,
	0, 184, 649, 0, 629, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 630, 631, 633, 0, 632, 634, 195, 196, 392,
	197, 659, 198, 660, 661, 0, 199, 0, 200, 0,
	201, 0, 0, 652, 203, 0, 204, 0, 0, 0,
	594, 205, 206, 207, 639, 640, 617, 0, 0, 208,
	209, 662, 663, 664, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 650, 0, 352, 0, 0, 213, 214,
	215, 216, 646, 648, 686, 0, 220, 0, 217, 0,
	685, 218, 665, 219, 666, 667, 668, 669, 670, 0,
	628, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 651, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 0, 0, 618, 647, 241,
	671, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 641, 248, 249, 250, 251,
	252, 0, 253, 642, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 672, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 1501, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 635, 290, 279,
	280, 291, 695, 292, 673, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 674, 297, 298, 643, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	675, 676, 0, 0, 309, 310, 644, 645, 616, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 636,
	319, 0, 382, 320, 321, 322, 383, 677, 0, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	621, 610, 611, 608, 609, 600, 1499, 0, 0, 0,
	0, 1497, 1498, 0, 0, 0, 174, 175, 0, 176,
	1500, 0, 0, 0, 638, 603, 599, 0, 0, 177,
	178, 179, 330, 653, 332, 654, 180, 655, 656, 0,
	181, 336, 337, 182, 183, 0, 637, 657, 658, 340,
	0, 184, 649, 0, 629, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 630, 631, 633, 0, 632, 634, 195, 196, 392,
	197, 659, 198, 660, 661, 0, 199, 0, 200, 0,
	201, 0, 0, 652, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 639, 640, 617, 0, 0, 208,
	209, 662, 663, 664, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 650, 0, 352, 0, 0, 213, 214,
	215, 216, 646, 648, 686, 0, 220, 0, 217, 0,
	685, 218, 665, 219, 666, 667, 668, 669, 670, 0,
	628, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 651, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 0, 0, 618, 647, 241,
	671, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 641, 248, 249, 250, 251,
	252, 0, 253, 642, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 672, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 1501, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 635, 290, 279,
	280, 291, 695, 292, 673, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 674, 297, 298, 643, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	675, 676, 0, 0, 309, 310, 644, 645, 616, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 636,
	319, 0, 382, 320, 321, 322, 383, 677, 0, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	621, 610, 611, 608, 609, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	1500, 0, 0, 0, 638, 603, 599, 0, 0, 177,
	178, 179, 0, 653, 332, 654, 180, 655, 656, 0,
	181, 336, 337, 182, 183, 606, 637, 657, 658, 340,
	0, 184, 649, 0, 629, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 2426,
	0, 630, 631, 633, 0, 632, 634, 195, 196, 392,
	197, 659, 198, 660, 661, 0, 199, 0, 200, 0,
	201, 0, 0, 652, 203, 0, 204, 0, 0, 0,
	594, 205, 206, 207, 639, 640, 617, 0, 0, 208,
	209, 662, 663, 664, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 650, 0, 352, 0, 0, 213, 214,
	215, 216, 646, 648, 0, 0, 220, 0, 217, 0,
	685, 218, 665, 219, 666, 667, 668, 669, 670, 0,
	628, 0, 0, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 651, 689, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 589, 0, 618, 647, 241,
	671, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 641, 248, 249, 250, 251,
	252, 0, 253, 642, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 672, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 595, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 635, 290, 279,
	280, 291, 0, 292, 673, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 674, 297, 298, 643, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	675, 676, 0, 0, 309, 310, 644, 645, 616, 311,
	312, 2425, 314, 0, 0, 315, 316, 317, 318, 636,
	319, 0, 382, 320, 321, 322, 383, 677, 0, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	621, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 587, 0, 0, 0, 174, 175, 0, 176,
	596, 0, 0, 0, 638, 0, 599, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 637, 338, 339, 340,
	0, 184, 649, 0, 629, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 630, 631, 633, 0, 632, 634, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 639, 640, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 650, 0, 352, 0, 0, 213, 214,
	215, 216, 646, 648, 686, 0, 220, 0, 217, 0,
	685, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 651, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 0, 0, 0, 647, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 641, 248, 249, 250, 251,
	252, 0, 253, 642, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 635, 290, 279,
	280, 291, 695, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 643, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 644, 645, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 636,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 0,
	323, 811, 0, 814, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 0,
	2073, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 819, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 683,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 684, 0, 212, 351, 0, 352, 0,
	0, 213, 214, 215, 216, 353, 354, 686, 0, 220,
	0, 217, 0, 685, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 687, 221, 222, 223, 688,
	224, 225, 226, 0, 228, 227, 0, 362, 689, 229,
	690, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 691, 237, 238, 240, 239, 0, 0,
	0, 364, 241, 365, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 692, 247, 693, 367, 248,
	249, 250, 251, 252, 0, 253, 368, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 370, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 694, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 131, 287, 372, 286, 288, 289,
	0, 290, 279, 280, 291, 695, 292, 373, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 0, 301, 133, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 818,
	384, 0, 0, 323, 572, 0, 171, 125, 324, 325,
	326, 327, 328, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 117, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 735, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 131, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 133, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 818, 384, 0, 0, 323, 0, 171, 0,
	125, 324, 325, 326, 327, 328, 0, 126, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 729, 0, 1073, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 735, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 131,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 133, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 818, 384, 0, 0, 323, 572,
	0, 171, 125, 324, 325, 326, 327, 328, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 729, 0, 1073, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 131, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 133, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 818, 384, 0,
	0, 323, 1821, 0, 171, 125, 324, 325, 326, 327,
	328, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 117, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	735, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 0, 323, 728, 0, 171, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 729, 0, 734, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 735, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 0, 0, 323, 0, 171,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 729, 0, 734, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 0,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 353, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 0, 735, 245, 0, 0, 246,
	366, 0, 247, 0, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 371, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 0, 323,
	0, 171, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 729, 0, 734,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	0, 323, 0, 0, 171, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 1190, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 0, 323, 0, 171, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 1639, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 0, 323, 0, 171, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 1988, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 621, 610,
	611, 608, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 1076, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 653, 332, 654, 180, 655, 656, 0, 181, 336,
	337, 182, 183, 0, 0, 657, 658, 340, 0, 184,
	341, 0, 819, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 683, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 659,
	198, 660, 661, 0, 199, 0, 200, 0, 201, 0,
	0, 652, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 617, 0, 0, 208, 209, 662,
	663, 664, 0, 210, 0, 211, 0, 0, 684, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 686, 0, 220, 0, 217, 0, 685, 218,
	665, 219, 666, 667, 668, 669, 670, 0, 628, 0,
	687, 221, 222, 223, 688, 224, 225, 226, 0, 228,
	227, 0, 362, 689, 229, 690, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 691, 237,
	238, 240, 239, 0, 0, 618, 364, 241, 671, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	692, 247, 693, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 672, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 694,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	695, 292, 673, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 674, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 675, 676,
	0, 0, 309, 310, 380, 381, 616, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 677, 0, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 869, 0,
	814, 873, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 819, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 686, 0, 220, 0, 217, 0,
	685, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 362, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 695, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 477,
	323, 171, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	167, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 166, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	164, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 170, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 167, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 166, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	814, 873, 323, 0, 0, 871, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 170, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 819, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 683, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	684, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 686, 0, 220, 0, 217, 0,
	685, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 687, 221, 222, 223, 688, 224, 225, 226,
	0, 228, 227, 0, 362, 689, 229, 690, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	691, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 692, 247, 693, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 694, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 695, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 171, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 167, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 166, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 814, 873, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 170, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	819, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 683, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 684, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	686, 0, 220, 0, 217, 0, 685, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 687, 221,
	222, 223, 688, 224, 225, 226, 0, 228, 227, 0,
	362, 689, 229, 690, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 691, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 692, 247,
	693, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 694, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 695, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 814, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 170, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 819, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 683, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 684, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 686, 0, 220, 0,
	217, 0, 685, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 687, 221, 222, 223, 688, 224,
	225, 226, 0, 228, 227, 0, 362, 689, 229, 690,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 691, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 692, 247, 693, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 694, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 695, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	1577, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 1575, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 1616, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 1580, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 1614, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 1579, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 1615, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 171, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 1577, 184,
	341, 0, 0, 1572, 185, 186, 187, 0, 188, 1575,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 1580, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	1571, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 1579, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 1578, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 0, 789, 323, 171,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 0,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 353, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 0, 735, 245, 0, 0, 246,
	366, 0, 247, 0, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 371, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 741, 323,
	171, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 743, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 735, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 737,
	323, 171, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 739, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 735, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	409, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	408, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 407, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 1560, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 171, 2134,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 2134, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 2131, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	735, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 1344, 323, 171, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 1342, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 1324, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 503, 323, 171, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 848, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 353, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 505, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 500, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 1204, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 1203, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 503, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 848, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 505, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 500, 378, 379, 0,
	0, 309, 849, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 0, 503, 323, 171, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 494,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 505, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 832, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 500, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 0, 807, 323, 171,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 0,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 806, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	366, 0, 247, 0, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 371, 278, 0, 282, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 804, 323,
	171, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 803, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 800,
	323, 171, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 799, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	797, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 796, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 793, 323, 171, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	0, 213, 214, 215, 216, 792, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 364, 241, 365, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 0, 247, 0, 367, 248,
	249, 250, 251, 252, 0, 253, 368, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 370, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 373, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 171, 0, 323, 0, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 174, 175, 781,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	779, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 778, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	0, 775, 323, 171, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 0, 176, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 177, 178, 179, 330, 331, 332, 333, 180,
	334, 335, 0, 181, 336, 337, 182, 183, 0, 0,
	338, 339, 340, 0, 184, 341, 0, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 0, 0,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 392, 197, 342, 198, 343, 344, 0, 199,
	0, 200, 0, 201, 0, 0, 202, 203, 0, 204,
	0, 0, 0, 345, 205, 206, 207, 346, 347, 0,
	0, 0, 208, 209, 348, 349, 350, 0, 210, 0,
	211, 0, 0, 0, 0, 212, 351, 0, 352, 0,
	0, 213, 214, 215, 216, 353, 354, 0, 0, 220,
	0, 217, 0, 0, 218, 355, 219, 356, 357, 358,
	359, 360, 0, 361, 0, 0, 221, 222, 223, 0,
	224, 225, 226, 0, 228, 227, 0, 362, 0, 229,
	0, 0, 230, 0, 0, 231, 0, 232, 233, 234,
	236, 363, 235, 0, 237, 238, 240, 239, 0, 0,
	0, 364, 241, 365, 242, 243, 0, 244, 0, 0,
	245, 0, 0, 246, 366, 0, 247, 0, 367, 248,
	249, 250, 251, 252, 0, 253, 368, 254, 369, 255,
	0, 256, 257, 258, 259, 260, 370, 261, 262, 0,
	263, 264, 265, 266, 267, 269, 270, 268, 271, 272,
	273, 274, 0, 275, 0, 276, 277, 371, 278, 0,
	282, 283, 284, 285, 0, 287, 372, 286, 288, 289,
	0, 290, 279, 280, 291, 0, 292, 373, 374, 293,
	0, 300, 294, 295, 281, 296, 299, 375, 297, 298,
	376, 0, 301, 0, 302, 303, 304, 305, 306, 307,
	308, 0, 377, 378, 379, 0, 0, 309, 310, 380,
	381, 0, 311, 312, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 319, 0, 382, 320, 321, 322, 383,
	384, 0, 773, 323, 171, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 353, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 0, 769, 323, 171, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 0, 176, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 177, 178, 179, 330, 331, 332,
	333, 180, 334, 335, 0, 181, 336, 337, 182, 183,
	0, 0, 338, 339, 340, 0, 184, 341, 0, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	0, 0, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 392, 197, 342, 198, 343, 344,
	0, 199, 0, 200, 0, 201, 0, 0, 202, 203,
	0, 204, 0, 0, 0, 345, 205, 206, 207, 346,
	347, 0, 0, 0, 208, 209, 348, 349, 350, 0,
	210, 0, 211, 0, 0, 0, 0, 212, 351, 0,
	352, 0, 0, 213, 214, 215, 216, 771, 354, 0,
	0, 220, 0, 217, 0, 0, 218, 355, 219, 356,
	357, 358, 359, 360, 0, 361, 0, 0, 221, 222,
	223, 0, 224, 225, 226, 0, 228, 227, 0, 362,
	0, 229, 0, 0, 230, 0, 0, 231, 0, 232,
	233, 234, 236, 363, 235, 0, 237, 238, 240, 239,
	0, 0, 0, 364, 241, 365, 242, 243, 0, 244,
	0, 0, 245, 0, 0, 246, 366, 0, 247, 0,
	367, 248, 249, 250, 251, 252, 0, 253, 368, 254,
	369, 255, 0, 256, 257, 258, 259, 260, 370, 261,
	262, 0, 263, 264, 265, 266, 267, 269, 270, 268,
	271, 272, 273, 274, 0, 275, 0, 276, 277, 371,
	278, 0, 282, 283, 284, 285, 0, 287, 372, 286,
	288, 289, 0, 290, 279, 280, 291, 0, 292, 373,
	374, 293, 0, 300, 294, 295, 281, 296, 299, 375,
	297, 298, 376, 0, 301, 0, 302, 303, 304, 305,
	306, 307, 308, 0, 377, 378, 379, 0, 0, 309,
	310, 380, 381, 0, 311, 312, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 319, 0, 382, 320, 321,
	322, 383, 384, 0, 747, 323, 171, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 749, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 745, 323, 171, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 0, 176, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 177, 178, 179, 330,
	331, 332, 333, 180, 334, 335, 0, 181, 336, 337,
	182, 183, 0, 0, 338, 339, 340, 0, 184, 341,
	0, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 0, 0, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 392, 197, 342, 198,
	343, 344, 0, 199, 0, 200, 0, 201, 0, 0,
	202, 203, 0, 204, 0, 0, 0, 345, 205, 206,
	207, 346, 347, 0, 0, 0, 208, 209, 348, 349,
	350, 0, 210, 0, 211, 0, 0, 0, 0, 212,
	351, 0, 352, 0, 0, 213, 214, 215, 216, 353,
	354, 0, 0, 220, 0, 217, 0, 0, 218, 355,
	219, 356, 357, 358, 359, 360, 0, 361, 0, 0,
	221, 222, 223, 0, 224, 225, 226, 0, 228, 227,
	0, 362, 0, 229, 0, 0, 230, 0, 0, 231,
	0, 232, 233, 234, 236, 363, 235, 0, 237, 238,
	240, 239, 0, 0, 0, 364, 241, 365, 242, 243,
	0, 244, 0, 0, 245, 0, 0, 246, 366, 0,
	247, 0, 367, 248, 249, 250, 251, 252, 0, 253,
	368, 254, 369, 255, 0, 256, 257, 258, 259, 260,
	370, 261, 262, 0, 263, 264, 265, 266, 267, 269,
	270, 268, 271, 272, 273, 274, 0, 275, 0, 276,
	277, 371, 278, 0, 282, 283, 284, 285, 0, 287,
	372, 286, 288, 289, 0, 290, 279, 280, 291, 0,
	292, 373, 374, 293, 0, 300, 294, 295, 281, 296,
	299, 375, 297, 298, 376, 0, 301, 0, 302, 303,
	304, 305, 306, 307, 308, 0, 377, 378, 379, 0,
	0, 309, 310, 380, 381, 0, 311, 312, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 319, 0, 382,
	320, 321, 322, 383, 384, 0, 503, 323, 171, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 494,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 493, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 505, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 495, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 496, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 500, 378, 379,
	0, 0, 309, 498, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 0, 485, 323, 171,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 0, 176, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 177, 178,
	179, 330, 331, 332, 333, 180, 334, 335, 0, 181,
	336, 337, 182, 183, 0, 0, 338, 339, 340, 0,
	184, 341, 0, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 0, 0, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 392, 197,
	342, 198, 343, 344, 0, 199, 0, 200, 0, 201,
	0, 0, 202, 203, 0, 204, 0, 0, 0, 345,
	205, 206, 207, 346, 347, 0, 0, 0, 208, 209,
	348, 349, 350, 0, 210, 0, 211, 0, 0, 0,
	0, 212, 351, 0, 352, 0, 0, 213, 214, 215,
	216, 353, 354, 0, 0, 220, 0, 217, 0, 0,
	218, 355, 219, 356, 357, 358, 359, 360, 0, 361,
	0, 0, 221, 222, 223, 0, 224, 225, 226, 0,
	228, 227, 0, 362, 0, 229, 0, 0, 230, 0,
	0, 231, 0, 232, 233, 234, 236, 363, 235, 0,
	237, 238, 240, 239, 0, 0, 0, 364, 241, 365,
	242, 243, 0, 244, 0, 0, 245, 0, 0, 246,
	366, 0, 247, 0, 367, 248, 249, 250, 251, 252,
	0, 253, 368, 254, 369, 255, 0, 256, 257, 258,
	259, 260, 370, 261, 262, 0, 263, 264, 265, 266,
	267, 269, 270, 268, 271, 272, 273, 274, 0, 275,
	0, 276, 277, 371, 278, 0, 486, 283, 284, 285,
	0, 287, 372, 286, 288, 289, 0, 290, 279, 280,
	291, 0, 292, 373, 374, 293, 0, 300, 294, 295,
	281, 296, 299, 375, 297, 298, 376, 0, 301, 0,
	302, 303, 304, 305, 306, 307, 308, 0, 377, 378,
	379, 0, 0, 309, 310, 380, 381, 0, 311, 312,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 319,
	0, 382, 320, 321, 322, 383, 384, 0, 483, 323,
	171, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 0, 475,
	323, 171, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 0,
	176, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	177, 178, 179, 330, 331, 332, 333, 180, 334, 335,
	0, 181, 336, 337, 182, 183, 0, 0, 338, 339,
	340, 0, 184, 341, 0, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 0, 0, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	392, 197, 342, 198, 343, 344, 0, 199, 0, 200,
	0, 201, 0, 0, 202, 203, 0, 204, 0, 0,
	0, 345, 205, 206, 207, 346, 347, 0, 0, 0,
	208, 209, 348, 349, 350, 0, 210, 0, 211, 0,
	0, 0, 0, 212, 351, 0, 352, 0, 0, 213,
	214, 215, 216, 353, 354, 0, 0, 220, 0, 217,
	0, 0, 218, 355, 219, 356, 357, 358, 359, 360,
	0, 361, 0, 0, 221, 222, 223, 0, 224, 225,
	226, 0, 228, 227, 0, 362, 0, 229, 0, 0,
	230, 0, 0, 231, 0, 232, 233, 234, 236, 363,
	235, 0, 237, 238, 240, 239, 0, 0, 0, 364,
	241, 365, 242, 243, 0, 244, 0, 0, 245, 0,
	0, 246, 366, 0, 247, 0, 367, 248, 249, 250,
	251, 252, 0, 253, 368, 254, 369, 255, 0, 256,
	257, 258, 259, 260, 370, 261, 262, 0, 263, 264,
	265, 266, 267, 269, 270, 268, 271, 272, 273, 274,
	0, 275, 0, 276, 277, 371, 278, 0, 282, 283,
	284, 285, 0, 287, 372, 286, 288, 289, 0, 290,
	279, 280, 291, 0, 292, 373, 374, 293, 0, 300,
	294, 295, 281, 296, 299, 375, 297, 298, 376, 0,
	301, 0, 302, 303, 304, 305, 306, 307, 308, 0,
	377, 378, 379, 0, 0, 309, 310, 380, 381, 0,
	311, 312, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 319, 0, 382, 320, 321, 322, 383, 384, 0,
	432, 323, 171, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 282,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 290, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 171, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	1868, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 261, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 1866, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 250, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 259, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 278, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 171, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 0, 0, 0,
	174, 175, 0, 176, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 177, 178, 179, 330, 331, 332, 333,
	180, 334, 335, 0, 181, 336, 337, 182, 183, 0,
	0, 338, 339, 340, 0, 184, 341, 0, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 0,
	0, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 392, 197, 342, 198, 343, 344, 0,
	199, 0, 200, 0, 201, 0, 0, 202, 203, 0,
	204, 0, 0, 0, 345, 205, 206, 207, 346, 347,
	0, 0, 0, 208, 209, 348, 349, 350, 0, 210,
	0, 211, 0, 0, 0, 0, 212, 351, 0, 352,
	0, 0, 213, 214, 215, 216, 1855, 354, 0, 0,
	220, 0, 217, 0, 0, 218, 355, 219, 356, 357,
	358, 359, 360, 0, 361, 0, 0, 221, 222, 223,
	0, 224, 225, 226, 0, 228, 227, 0, 362, 0,
	229, 0, 0, 230, 0, 0, 231, 0, 232, 233,
	234, 236, 363, 235, 0, 237, 238, 240, 239, 0,
	0, 0, 364, 241, 365, 242, 243, 0, 244, 0,
	0, 245, 0, 0, 246, 366, 0, 247, 0, 367,
	248, 249, 250, 251, 252, 0, 253, 368, 254, 369,
	255, 0, 256, 257, 258, 259, 260, 370, 261, 262,
	0, 263, 264, 265, 266, 267, 269, 270, 268, 271,
	272, 273, 274, 0, 275, 0, 276, 277, 371, 278,
	0, 282, 283, 284, 285, 0, 287, 372, 286, 288,
	289, 0, 290, 279, 280, 291, 0, 292, 373, 374,
	293, 0, 300, 294, 295, 281, 296, 299, 375, 297,
	298, 376, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 377, 378, 379, 0, 0, 309, 310,
	380, 381, 0, 311, 312, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 319, 0, 382, 320, 321, 322,
	383, 384, 171, 0, 323, 0, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 0, 0, 0, 174, 175,
	0, 176, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 177, 178, 179, 330, 331, 332, 333, 180, 334,
	335, 0, 181, 336, 337, 182, 183, 0, 0, 338,
	339, 340, 0, 184, 341, 0, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 0, 0, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 392, 197, 342, 198, 343, 344, 0, 199, 0,
	200, 0, 201, 0, 0, 202, 203, 0, 204, 0,
	0, 0, 345, 205, 206, 207, 346, 347, 0, 0,
	0, 208, 209, 348, 349, 350, 0, 210, 0, 211,
	0, 0, 0, 0, 212, 351, 0, 352, 0, 0,
	213, 214, 215, 216, 353, 354, 0, 0, 220, 0,
	217, 0, 0, 218, 355, 219, 356, 357, 358, 359,
	360, 0, 361, 0, 0, 221, 222, 223, 0, 224,
	225, 226, 0, 228, 227, 0, 362, 0, 229, 0,
	0, 230, 0, 0, 231, 0, 232, 233, 234, 236,
	363, 235, 0, 237, 238, 240, 239, 0, 0, 0,
	364, 241, 365, 242, 243, 0, 244, 0, 0, 245,
	0, 0, 246, 366, 0, 247, 0, 367, 248, 249,
	250, 251, 252, 0, 253, 368, 254, 369, 255, 0,
	256, 257, 258, 259, 260, 370, 261, 262, 0, 263,
	264, 265, 266, 267, 269, 270, 268, 271, 272, 273,
	274, 0, 275, 0, 276, 277, 371, 278, 0, 486,
	283, 284, 285, 0, 287, 372, 286, 288, 289, 0,
	290, 279, 280, 291, 0, 292, 373, 374, 293, 0,
	300, 294, 295, 281, 296, 299, 375, 297, 298, 376,
	0, 301, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 377, 378, 379, 0, 0, 309, 310, 380, 381,
	0, 311, 312, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 319, 0, 382, 320, 321, 322, 383, 384,
	171, 0, 323, 0, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 0, 0, 0, 174, 175, 0, 176,
	0, 0, 0, 0, 329, 0, 1214, 0, 0, 177,
	178, 179, 330, 331, 332, 333, 180, 334, 335, 0,
	181, 336, 337, 182, 183, 0, 0, 338, 339, 340,
	0, 184, 341, 0, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 0, 0, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 392,
	197, 342, 198, 343, 344, 0, 199, 0, 200, 0,
	201, 0, 0, 202, 203, 0, 204, 0, 0, 0,
	345, 205, 206, 207, 346, 347, 0, 0, 0, 208,
	209, 348, 349, 350, 0, 210, 0, 211, 0, 0,
	0, 0, 212, 351, 0, 352, 0, 0, 213, 214,
	215, 216, 353, 354, 0, 0, 220, 0, 217, 0,
	0, 218, 355, 219, 356, 357, 358, 359, 360, 0,
	361, 0, 0, 221, 222, 223, 0, 224, 225, 226,
	0, 228, 227, 0, 362, 0, 229, 0, 0, 230,
	0, 0, 231, 0, 232, 233, 234, 236, 363, 235,
	0, 237, 238, 240, 239, 0, 0, 0, 364, 241,
	365, 242, 243, 0, 244, 0, 0, 245, 0, 0,
	246, 366, 0, 247, 0, 367, 248, 249, 250, 251,
	252, 0, 253, 368, 254, 369, 255, 0, 256, 257,
	258, 259, 260, 370, 261, 262, 0, 263, 264, 265,
	266, 267, 269, 270, 268, 271, 272, 273, 274, 0,
	275, 0, 276, 277, 371, 278, 0, 282, 283, 284,
	285, 0, 287, 372, 286, 288, 289, 0, 0, 279,
	280, 291, 0, 292, 373, 374, 293, 0, 300, 294,
	295, 281, 296, 299, 375, 297, 298, 376, 0, 301,
	0, 302, 303, 304, 305, 306, 307, 308, 0, 377,
	378, 379, 0, 0, 309, 310, 380, 381, 0, 311,
	312, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	319, 0, 382, 320, 321, 322, 383, 384, 171, 0,
	323, 0, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 0, 174, 175, 0, 176, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 177, 178, 179,
	330, 331, 332, 333, 180, 334, 335, 0, 181, 336,
	337, 182, 183, 0, 0, 338, 339, 340, 0, 184,
	341, 0, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 0, 0, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 392, 197, 342,
	198, 343, 344, 0, 199, 0, 200, 0, 201, 0,
	0, 202, 203, 0, 204, 0, 0, 0, 345, 205,
	206, 207, 346, 347, 0, 0, 0, 208, 209, 348,
	349, 350, 0, 210, 0, 211, 0, 0, 0, 0,
	212, 351, 0, 352, 0, 0, 213, 214, 215, 216,
	353, 354, 0, 0, 220, 0, 217, 0, 0, 218,
	355, 219, 356, 357, 358, 359, 360, 0, 361, 0,
	0, 221, 222, 223, 0, 224, 225, 226, 0, 228,
	227, 0, 362, 0, 229, 0, 0, 230, 0, 0,
	231, 0, 232, 233, 234, 236, 363, 235, 0, 237,
	238, 240, 239, 0, 0, 0, 364, 241, 365, 242,
	243, 0, 244, 0, 0, 245, 0, 0, 246, 366,
	0, 247, 0, 367, 248, 249, 250, 251, 252, 0,
	253, 368, 254, 369, 255, 0, 256, 257, 258, 259,
	260, 370, 711, 262, 0, 263, 264, 265, 266, 267,
	269, 270, 268, 271, 272, 273, 274, 0, 275, 0,
	276, 277, 371, 278, 0, 282, 283, 284, 285, 0,
	287, 372, 286, 288, 289, 0, 290, 279, 280, 291,
	0, 292, 373, 374, 293, 0, 300, 294, 295, 281,
	296, 299, 375, 297, 298, 376, 0, 301, 0, 302,
	303, 304, 305, 306, 307, 308, 0, 377, 378, 379,
	0, 0, 309, 310, 380, 381, 0, 311, 312, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 319, 0,
	382, 320, 321, 322, 383, 384, 171, 0, 323, 0,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 0,
	0, 0, 174, 175, 0, 176, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 177, 178, 179, 330, 331,
	332, 333, 180, 334, 335, 0, 181, 336, 337, 182,
	183, 0, 0, 338, 339, 340, 0, 184, 341, 0,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 0, 0, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 392, 197, 342, 198, 343,
	344, 0, 199, 0, 200, 0, 201, 0, 0, 202,
	203, 0, 204, 0, 0, 0, 345, 205, 206, 207,
	346, 347, 0, 0, 0, 208, 209, 348, 349, 350,
	0, 210, 0, 211, 0, 0, 0, 0, 212, 351,
	0, 352, 0, 0, 213, 214, 215, 216, 353, 354,
	0, 0, 220, 0, 217, 0, 0, 218, 355, 219,
	356, 357, 358, 359, 360, 0, 361, 0, 0, 221,
	222, 223, 0, 224, 225, 226, 0, 228, 227, 0,
	362, 0, 229, 0, 0, 230, 0, 0, 231, 0,
	232, 233, 234, 236, 363, 235, 0, 237, 238, 240,
	239, 0, 0, 0, 364, 241, 365, 242, 243, 0,
	244, 0, 0, 245, 0, 0, 246, 366, 0, 247,
	0, 367, 248, 249, 0, 251, 252, 0, 253, 368,
	254, 369, 255, 0, 256, 257, 258, 0, 260, 370,
	261, 262, 0, 263, 264, 265, 266, 267, 269, 270,
	268, 271, 272, 273, 274, 0, 275, 0, 276, 277,
	371, 0, 0, 282, 283, 284, 285, 0, 287, 372,
	286, 288, 289, 0, 290, 279, 280, 291, 0, 292,
	373, 374, 293, 0, 300, 294, 295, 281, 296, 299,
	375, 297, 298, 376, 0, 301, 0, 302, 303, 304,
	305, 306, 307, 308, 0, 377, 378, 379, 0, 0,
	309, 310, 380, 381, 0, 311, 312, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 319, 0, 382, 320,
	321, 322, 383, 384, 0, 0, 323, 0, 0, 0,
	0, 324, 325, 326, 327, 328, 938, 939, 0, 958,
	959, 960, 968, 969, 970, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 972, 0, 938, 939, 0, 958, 959, 960,
	968, 969, 970, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 940, 0, 0, 0, 941, 0, 955,
	972, 0, 938, 939, 0, 958, 959, 960, 968, 969,
	970, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 940, 0, 0, 0, 941, 0, 955, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 946, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 973, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 973, 0, 0, 0, 963, 0, 0,
	946, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 973, 0, 0, 0, 963, 0, 0, 962, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 962, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 0, 0, 0,
	966, 961, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 972, 957, 938, 939, 0, 958, 959, 960, 968,
	969, 970, 0, 0, 0, 0, 0, 0, 966, 961,
	0, 0, 940, 0, 0, 0, 941, 0, 955, 972,
	964, 0, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 0,
	940, 0, 0, 0, 0, 1755, 955, 0, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 0, 0, 0, 2397,
	0, 0, 0, 946, 0, 0, 964, 0, 0, 952,
	953, 954, 967, 0, 951, 949, 950, 942, 943, 944,
	945, 947, 948, 965, 973, 0, 0, 2350, 0, 0,
	0, 946, 0, 0, 0, 1763, 1764, 0, 1781, 1782,
	1783, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 973, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 963, 0, 0, 962, 1778, 0,
	956, 961, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 938, 939, 1769, 958, 959, 960, 968, 969, 970,
	0, 966, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 957, 941, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 1784, 0, 946, 0, 0, 0, 0, 940, 0,
	0, 0, 938, 939, 955, 958, 959, 960, 968, 969,
	970, 0, 1779, 965, 973, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 972, 964,
	0, 971, 952, 953, 954, 967, 0, 951, 949, 950,
	942, 943, 944, 945, 947, 948, 963, 0, 0, 940,
	2304, 0, 956, 0, 0, 955, 0, 964, 0, 946,
	952, 953, 954, 967, 0, 951, 949, 950, 942, 943,
	944, 945, 947, 948, 0, 0, 0, 962, 2274, 965,
	973, 0, 0, 0, 0, 1780, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 963, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	965, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 962, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 956,
	0, 0, 1775, 1776, 1777, 0, 0, 1774, 1772, 1773,
	1765, 1766, 1767, 1768, 1770, 1771, 0, 0, 0, 0,
	0, 957, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 964,
	0, 0, 952, 953, 954, 967, 0, 951, 949, 950,
	942, 943, 944, 945, 947, 948, 0, 0, 0, 0,
	2269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 0, 966, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 972, 0, 0, 0, 964, 0, 0, 952, 953,
	954, 967, 0, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 940, 0, 0, 0, 2265, 0, 955, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 972, 964, 0, 0, 952,
	953, 954, 967, 0, 951, 949, 950, 942, 943, 944,
	945, 947, 948, 0, 0, 0, 940, 2207, 0, 0,
	0, 0, 955, 946, 0, 0, 0, 0, 0, 0,
	0, 938, 939, 0, 958, 959, 960, 968, 969, 970,
	0, 0, 0, 965, 973, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 972, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 946, 940, 0,
	0, 0, 956, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 956, 0, 0, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 965,
	973, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 938, 939, 0, 958, 959, 960, 968, 969, 970,
	0, 0, 0, 962, 0, 966, 0, 961, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 972, 0, 964,
	0, 0, 952, 953, 954, 967, 0, 951, 949, 950,
	942, 943, 944, 945, 947, 948, 0, 0, 940, 0,
	2173, 0, 0, 0, 955, 0, 0, 0, 0, 938,
	939, 957, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 966, 0, 0,
	0, 0, 941, 964, 0, 972, 952, 953, 954, 967,
	0, 951, 949, 950, 942, 943, 944, 945, 947, 948,
	0, 0, 0, 0, 2172, 0, 940, 0, 0, 946,
	0, 0, 955, 0, 0, 0, 938, 939, 0, 958,
	959, 960, 968, 969, 970, 0, 0, 0, 0, 965,
	973, 0, 961, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 972, 0, 0, 964, 0, 971, 952, 953,
	954, 967, 0, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 963, 940, 0, 0, 2137, 946, 956, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 973, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 1763,
	1764, 0, 1781, 1782, 1783, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2141, 0, 0, 0, 0,
	963, 0, 0, 0, 946, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 965, 973, 0, 0, 0, 0,
	0, 962, 1778, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 971, 1763, 1764, 0, 1781, 1782, 1783, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 2140,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 1769, 962, 0,
	0, 0, 0, 0, 0, 966, 1778, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 952, 953,
	954, 967, 0, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 0, 0, 0, 1784, 1991, 0, 0, 0,
	0, 0, 0, 0, 938, 939, 957, 958, 959, 960,
	968, 969, 970, 0, 0, 0, 1779, 0, 0, 0,
	961, 1769, 966, 0, 0, 0, 0, 941, 0, 0,
	972, 0, 0, 964, 0, 0, 952, 953, 954, 967,
	0, 951, 949, 950, 942, 943, 944, 945, 947, 948,
	0, 940, 0, 0, 1967, 0, 0, 955, 0, 1784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1779, 0, 0, 0, 0, 0, 0, 0, 0, 1780,
	964, 0, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 0,
	0, 1440, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 1780, 0, 37, 1763, 1764, 0, 1781,
	1782, 1783, 0, 0, 0, 963, 38, 120, 0, 0,
	0, 956, 1960, 0, 0, 0, 1775, 1776, 1777, 41,
	0, 1774, 1772, 1773, 1765, 1766, 1767, 1768, 1770, 1771,
	0, 0, 0, 122, 0, 0, 962, 0, 0, 42,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 1778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 52, 0, 0, 0,
	58, 0, 0, 123, 0, 0, 0, 59, 0, 60,
	1775, 1776, 1777, 0, 957, 1774, 1772, 1773, 1765, 1766,
	1767, 1768, 1770, 1771, 0, 0, 0, 61, 0, 0,
	966, 0, 0, 0, 1769, 0, 62, 0, 0, 0,
	0, 938, 939, 0, 958, 959, 960, 968, 969, 970,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 972, 0, 0,
	0, 0, 1784, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 1779, 955, 0, 0, 0, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 63, 1725, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 118, 65, 0, 66, 0, 67, 0, 124, 946,
	2457, 0, 0, 68, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 79, 0, 1780, 98, 0, 965,
	973, 0, 0, 0, 938, 939, 121, 958, 959, 960,
	968, 969, 970, 0, 0, 0, 133, 971, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	972, 0, 963, 0, 0, 102, 0, 0, 956, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 940, 132, 0, 0, 0, 0, 955, 0, 0,
	125, 0, 0, 962, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2456,
	0, 0, 0, 1775, 1776, 1777, 117, 0, 1774, 1772,
	1773, 1765, 1766, 1767, 1768, 1770, 1771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 946, 0, 1795, 0, 0, 1794, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 965, 973, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 0, 0, 0,
	971, 961, 0, 0, 0, 0, 1698, 0, 941, 0,
	0, 972, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 964, 962, 0, 952, 953,
	954, 967, 0, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 0, 0, 0, 0, 0, 0, 1699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 957, 1536, 0, 0, 0, 0,
	0, 938, 939, 0, 958, 959, 960, 968, 969, 970,
	966, 0, 0, 965, 973, 0, 0, 961, 0, 0,
	0, 1535, 0, 0, 941, 0, 0, 972, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 940, 0,
	0, 0, 956, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 965,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 971, 0, 0,
	938, 939, 0, 958, 959, 960, 968, 969, 970, 0,
	0, 0, 963, 0, 0, 0, 961, 0, 956, 0,
	0, 0, 0, 941, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 964,
	0, 0, 952, 953, 954, 967, 0, 951, 949, 950,
	942, 943, 944, 945, 947, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 946, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 965, 973,
	0, 0, 941, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 963, 955, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 952, 953,
	954, 967, 0, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 962, 569, 0, 1763, 1764, 0, 1781, 1782,
	1783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1959, 0, 0, 0, 0, 0, 946, 938, 939,
	0, 958, 959, 960, 968, 969, 970, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 965, 973, 0,
	957, 941, 1763, 1764, 972, 1781, 1782, 1783, 1778, 0,
	0, 0, 0, 0, 0, 971, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	963, 955, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1778, 0, 0, 0, 0,
	0, 962, 0, 1769, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 946, 952, 953, 954,
	967, 1801, 951, 949, 950, 942, 943, 944, 945, 947,
	948, 1784, 0, 0, 0, 0, 965, 973, 0, 957,
	1769, 938, 939, 0, 958, 959, 960, 968, 969, 970,
	0, 0, 1779, 0, 971, 966, 0, 961, 0, 0,
	0, 1796, 0, 0, 941, 0, 0, 972, 0, 963,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 1971, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 955, 0, 0, 0, 0, 1779,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 1780, 952, 953, 954, 967,
	0, 951, 949, 950, 942, 943, 944, 945, 947, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 946,
	938, 939, 0, 958, 959, 960, 968, 969, 970, 0,
	0, 0, 0, 0, 966, 0, 961, 0, 0, 965,
	973, 0, 1780, 941, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 963, 955, 0, 0, 0, 0, 956, 0,
	0, 0, 1775, 1776, 1777, 0, 0, 1774, 1772, 1773,
	1765, 1766, 1767, 1768, 1770, 1771, 0, 0, 0, 0,
	0, 0, 964, 962, 0, 952, 953, 954, 967, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 1775,
	1776, 1777, 0, 0, 1774, 1772, 1773, 1765, 1766, 1767,
	1768, 1770, 1771, 0, 0, 0, 0, 0, 965, 973,
	0, 957, 0, 938, 939, 0, 958, 959, 960, 968,
	969, 970, 0, 0, 0, 0, 971, 966, 0, 961,
	0, 0, 0, 1754, 0, 0, 941, 0, 0, 972,
	0, 963, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 952, 953,
	954, 967, 0, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 946, 938, 939, 0, 958, 959, 960, 968, 969,
	970, 0, 0, 0, 0, 0, 966, 0, 961, 0,
	0, 965, 973, 0, 0, 941, 0, 0, 972, 0,
	938, 939, 0, 958, 959, 960, 968, 969, 970, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 941, 963, 955, 972, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 955, 964, 962, 0, 952, 953, 954,
	967, 0, 951, 949, 950, 942, 943, 944, 945, 947,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 973, 0, 957, 0, 0, 0, 0, 946, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 971, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 973,
	0, 0, 941, 963, 0, 972, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 963, 955, 0, 962, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	952, 953, 954, 967, 0, 951, 949, 950, 942, 943,
	944, 945, 947, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 973, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 952,
	953, 954, 967, 0, 951, 949, 950, 942, 943, 944,
	945, 947, 948, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 952, 953, 954,
	967, 0, 951, 949, 950, 942, 943, 944, 945, 947,
	948, 0, 1263, 1253, 1282, 1245, 1273, 1272, 0, 957,
	1247, 1246, 0, 0, 0, 0, 1284, 1283, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 1270, 1269, 0, 0, 0, 0, 0, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1267, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 952, 953, 954, 967,
	0, 951, 949, 950, 942, 943, 944, 945, 947, 948,
	0, 1256, 1255, 1257, 1258, 1259, 1260, 1261, 0, 1281,
	0, 0, 0, 0, 0, 0, 0, 1263, 1253, 1282,
	1245, 1273, 1272, 0, 0, 1247, 1246, 0, 0, 0,
	0, 1284, 1283, 0, 0, 0, 0, 1249, 0, 0,
	524, 0, 550, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 1254, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 1278, 0, 1270, 1269, 0,
	0, 0, 527, 0, 0, 0, 0, 1268, 0, 0,
	0, 0, 1264, 0, 0, 0, 1375, 1373, 1374, 1377,
	1376, 0, 0, 528, 0, 1267, 1265, 1266, 530, 0,
	0, 0, 0, 536, 537, 0, 0, 546, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 531, 1262, 1251, 0, 1256, 1255, 1257, 1258,
	1259, 1260, 1261, 1286, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 1248, 0, 0, 1279,
	1280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1249, 0, 532, 0, 0, 0, 0, 0,
	0, 1252, 0, 0, 1271, 0, 1285, 0, 1254, 533,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 0, 0,
	535, 542, 0, 0, 0, 0, 0, 1264, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1262, 1251,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1248, 0, 0, 1279, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1252, 526, 543, 553,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 0, 0, 0, 548, 0, 0,
	0, 554, 0, 0, 0, 0, 541, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 547,
}
var sqlPact = [...]int{

	39252, -1000, 24, -1000, -1000, 204, -1000, -1000, -1000, 203,
	201, 200, -1000, 198, 196, 195, 194, 193, 192, 189,
	185, 182, 180, 179, -1000, 178, -1000, -1000, -1000, -1000,
	177, 174, 170, 169, 166, 155, 153, 1161, 22308, 151,
	150, 1279, 35106, 147, 146, 145, 144, 967, 143, 142,
	25818, 876, 1412, 137, 135, 134, 129, 127, 1069, 34788,
	4155, 1708, 1041, 1560, 34467, 21987, 1511, 1409, 34146, -1000,
	-1000, 33825, 126, 121, 116, 115, 108, -1000, -1000, 33504,
	107, 105, 104, 100, 97, 96, 90, 89, 88, 87,
	84, 82, 81, 76, -1000, 69, 68, 67, 41138, 66,
	62, 61, 1029, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 136, -1000, 830, 278, 1366, 7749,
	964, 962, 951, 949, 942, 37014, 35106, 60, 9, 59,
	-1000, 1852, 657, 19393, 39252, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25497,
	25176, 33183, 32862, 722, -1000, 21, 23580, 35106, -1000, 94,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15094, 14737,
	546, 94, -1000, -1000, -1000, -1000, -1000, 32541, -1000, 32220,
	31899, 1424, 31578, -1000, -1000, -1000, -1000, 31257, -1000, -1000,
	1723, 1576, 1572, 24855, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 30939, 30618, 30297, 29976,
	29655, 465, -1000, -1000, -1000, 17779, -1000, -1000, -1000, -1000,
	56, -1000, 55, -1000, 54, 53, 50, 48, -1000, 42,
	40, -1000, 38, 37, -1000, 35, 30, 29334, 1221, -1000,
	-1000, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35106, -1000, 15780, -1000, 464, -1000, 1605, -1000, 15780, -1000,
	1219, -1000, -1000, -1000, -1000, -1000, 35106, -1000, -1000, -1000,
	-1000, -1000, -1000, 2059, 1154, 462, 29013, -1000, 1430, -1000,
	551, 749, -1000, -1000, -1000, 8779, 211, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1984, 21666, 1292, 1861,
	1721, 2058, 1372, 1703, 1693, 1684, 1669, 1665, 2053, 1055,
	2052, 1735, 954, 2050, 1627, 1224, 635, 2049, 1597, 1591,
	-1000, -1000, -1000, -1000, 885, -1000, -1000, -1000, 27090, -1000,
	-1000, 830, -1000, -1000, -1000, 1311, 1859, 1859, 1859, 1894,
	313, 306, -1000, 136, -1000, 986, -1000, 1130, -1000, -1000,
	-1000, -1000, -1000, 40612, -1000, -1000, 15780, 15780, 15780, 15780,
	15780, 1085, 506, -1000, 461, 460, 7049, -1000, -1000, 2034,
	-1000, -1000, -1000, 320, -1000, -1000, 15780, 94, -1000, -1000,
	-1000, -1000, 459, 2045, -1000, 662, -1000, -1000, -1000, 573,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1613,
	458, 457, 456, -1000, -1000, -1000, -1000, 455, 449, 448,
	446, 445, 444, 443, 442, 441, 440, 439, 438, 436,
	434, 432, 1021, -1000, 591, -1000, -1000, 591, 591, -1000,
	412, 412, 417, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 412, -1000, -1000, -1000, 541, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 428, 1216, -1000, -1000,
	1216, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 718, 36378,
	18, 35106, -1000, 427, 18, -1000, -1000, 425, -1000, 10851,
	10851, -1000, -1000, -1000, -1000, -1000, 9479, 1580, -1000, 3238,
	-167, 319, 538, -1000, 18424, 21004, -1000, -1000, 1222, 1709,
	607, -1000, 997, 1707, 513, -1000, 961, -1000, 1037, 1705,
	-142, 22626, 23580, 21, -6, -1000, -1000, -1000, 5689, 40612,
	-1000, 40612, -1000, 783, 20037, 94, -1000, -1000, -1000, -1000,
	422, 1280, 565, -1000, 322, -1000, 28692, 565, 1278, -1000,
	-1000, -1000, 27090, -1000, 35106, -1000, 35106, -1000, 840, -1000,
	36696, 118, 1701, -1000, -1000, 118, 1700, -1000, 110, 1695,
	-1000, -1000, 1168, 1687, -1000, -6, 1686, -1000, -1000, 15780,
	10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 657, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 28371, 22944, 1288, 564, 40612, 1967, 41080, 22626,
	40612, 22944, -1000, -1000, 35106, -1000, 15780, -1000, 1962, 1381,
	-2, -1000, -1000, -1000, -1000, -1000, 1325, 1432, 689, 1300,
	8779, 8779, 1793, -1000, 124, 6019, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28050, -1000, -1000, -1000, 1126, 35106,
	-1000, -1000, 1609, -1000, 22944, 35106, -1000, 35106, -1000, 35106,
	-1000, 35106, -1000, 35106, -1000, -1000, -1000, -1000, -1000, 2765,
	-1000, 1579, -1000, -1000, 35106, -1000, 1306, -1000, -1000, -1000,
	27732, 27411, -1000, 935, 748, -1000, -1000, 123, -1000, -1000,
	1311, -1000, 1225, 1365, 14380, 1390, 15780, 136, -1000, -1000,
	136, 136, 8436, -1000, -1000, -1000, 35106, -1000, 40955, 41080,
	6019, 736, 15780, 15780, 15780, 15780, 15780, 15780, 15780, 15780,
	15780, 15780, 15780, 15780, 15780, 15780, 15780, 15780, 15780, 15780,
	15780, 15780, 15780, 15780, 1264, 15780, 717, 15780, 15780, 15780,
	15780, 1196, 1057, 404, 1083, -1000, 2009, 2009, 2009, 40640,
	40640, 362, 506, -1000, 15780, -1000, 120, 14037, 306, 38876,
	20, 6706, -1000, -1000, -1000, 9122, 584, 40612, 94, 4667,
	-1000, 2032, 1097, 1626, 1488, 421, 583, 567, 562, 15780,
	15780, 13694, 13337, 12980, 16466, 12623, 15780, 7392, 15780, 15780,
	15780, 15780, 12266, 11909, -1000, 420, -1000, -1000, -1000, -1000,
	2030, -1000, -1000, 2029, -1000, 732, 730, 2026, -1000, -2,
	-1000, 36378, -1000, 35106, 18, 1961, 35106, -1000, 93, -1000,
	39761, -1000, 93, -1, -1000, 1371, 1357, 19715, 1435, 1127,
	1127, 1127, -1000, 419, 495, 538, 5014, 11552, -1000, 26136,
	1156, 228, 305, 18102, 1580, -1000, 35106, -84, 1114, -1000,
	24534, 1922, 1900, 1829, 27090, 1912, 120, 1585, 716, 27090,
	713, 1909, 120, 1574, 711, 35106, 6019, 534, -1000, 35106,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1564, -9, -1000, -1000, 24216, 1941, 1685, -1000, 1051, -1000,
	1939, 35106, 1213, 1276, -1000, -1000, 743, 1679, 570, 212,
	1934, 212, 20360, -1000, 35106, -1000, 35106, -1000, -1000, 35106,
	-1000, 35106, -1000, 35106, 35106, -1000, 35106, 35106, -16, 40612,
	4308, 23898, 710, -1000, 611, 24216, 342, -21, -1000, 820,
	-1000, -1000, -1000, -1000, 255, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 417, 1021, 412,
	412, 412, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 541,
	-1000, -1000, 591, 591, 591, -1000, -1000, -10, -1000, 1558,
	569, -23, 640, -2, -1000, 1216, -1000, 1073, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2044, -1000, 2014, -1000, -1000, 2025, 15, -1000, 15,
	-1000, 6019, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35106,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 131, -1000,
	-1000, -1000, -1000, -1000, -1000, 35106, 35106, 35106, -1000, 27090,
	-1000, -1000, -1000, -1000, 40612, -1000, 377, -1000, -1000, 40612,
	877, 1427, -1000, 1427, 13, -1000, 39645, 1353, 35106, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	550, 1050, 1050, 751, 751, 751, 751, 1972, 1178, 352,
	910, 171, 171, 171, 345, 1016, 1016, 171, 171, 171,
	40640, 4194, 229, 15780, 15780, 697, 1034, 404, 229, 15780,
	229, 229, 229, 229, -1000, 1676, -1000, -1000, -1000, -1000,
	1555, 400, 16466, 16466, -1000, -1000, -1000, 7049, 16796, -1000,
	-1000, -1000, -1000, 397, 15780, -1000, 39114, -212, -26, -1000,
	-1000, 15780, -28, -71, -1000, -1000, 811, -1000, 15780, -1000,
	-24, 15780, 15780, 15780, 303, -1000, 302, -1000, 696, -1000,
	695, 690, 688, -1000, 396, 1116, 395, 393, 15780, -1000,
	-1000, -1000, -1000, -1000, -1000, 40503, 37656, 301, -1000, 1537,
	-174, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 290, -1000,
	281, -1000, 40370, -174, 280, 3496, -1000, 16466, 16466, 16466,
	7049, 391, 276, -1000, 39514, -174, 40261, 11195, 11195, 11195,
	275, 40128, 15780, -174, 4158, 4042, 3378, -31, -32, -1000,
	-43, -1000, 2021, -48, 273, 549, 545, 272, -1000, -1000,
	390, -51, 570, 10851, 19070, 6019, -1000, 570, 9479, -1000,
	19715, 19715, 1652, 1356, 19715, -1000, -1000, -1000, -1000, 26136,
	558, 538, 26136, -1000, 2020, 1361, -53, -1000, -1000, -1000,
	35106, 389, -1000, 538, 270, 919, 35106, 35106, 35106, -1000,
	-1000, 1270, 36060, 1263, 41080, 35106, -1000, 388, 387, 1351,
	1350, 35106, 35106, 35742, 35424, 35106, 1200, 120, -1000, 386,
	35106, 940, 35106, 120, -1000, 385, 35106, 930, -1000, 1457,
	1229, -1000, 772, 1532, 35106, 269, -56, 1, 41080, -1000,
	-1000, -1000, -1000, -1000, 35106, 482, 35106, 120, 35106, 2041,
	120, 35106, 1675, 1739, 522, 35106, 1365, 15780, 934, -1000,
	18747, 596, 35106, 881, 73, -1000, -1000, -1000, 530, 35106,
	-1000, -1000, 118, 118, -1000, 110, 1168, -6, -1000, 15780,
	-1000, -1000, 35106, 22626, -59, -1000, -1000, 41080, -1000, 504,
	699, -1000, 2019, 563, 22626, 35106, 8779, 8779, -1000, 1375,
	-1000, -1000, 890, -1000, 972, -1000, -1000, -1000, -1000, 8779,
	-1000, -91, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 877,
	-1000, 15780, 2018, -1000, -1000, -1000, 8436, -1000, -1000, -1000,
	35106, -161, 15780, 229, 229, 15780, 16466, 16466, -1000, 229,
	-1000, -1000, -1000, -1000, -1000, 1526, 384, 15780, 41080, 40105,
	39266, -62, -1000, 10508, -7, -1000, 15780, -1000, 38819, -1000,
	-1000, 328, 1713, -1000, 15780, 40019, 267, 10165, -1000, 39910,
	-46, -46, -1000, 2038, 1273, 1226, 1113, 865, 2017, -1000,
	20682, 580, 1131, 38761, 40955, 41080, -1000, 15780, -1000, -1000,
	1520, 15780, -1000, 40955, 41080, 16466, 16466, 16466, 16466, 16466,
	16466, 16466, 16466, 16466, 16466, 16466, 16466, 16466, 16466, 16466,
	16466, 16466, 16466, 16466, 1377, 16466, 2006, 2006, 2006, -15,
	9822, -1000, 1514, 1520, 15780, 15780, 41080, 266, 265, 264,
	-1000, 15780, -174, 15780, 15780, 15780, -1000, -1000, -1000, 263,
	-1000, 2016, -1000, -1000, -1000, -1000, 342, -1000, 1472, -1000,
	-127, -1000, 1580, -1000, 1472, -1000, -1000, 1652, -1000, 383,
	15780, 19715, -1000, 491, -1000, -64, -1000, 26136, -1000, 486,
	-206, -1000, 529, -1000, 538, 380, 35106, 26136, -1000, -1000,
	-1000, 685, 684, 1668, -1000, 1262, -1000, 608, -1000, 941,
	15780, 17456, 379, 376, 977, -1000, 1663, 1168, 1661, 1168,
	-1000, -84, 992, -1000, 15780, -1000, 679, -1000, -1000, 15780,
	-1000, 674, 563, 1518, 753, -1000, 764, -1000, 1441, -1000,
	24216, 375, 35106, 373, -1000, 371, -1000, -1000, 370, 35106,
	1315, 522, 23262, -1000, 565, 881, -1000, 40612, -1000, 881,
	8092, 1838, -65, -1000, -1000, -1000, 570, 20360, 19715, 9479,
	-72, -1000, -1000, -1000, -1000, 40612, -91, 1799, 1799, -1000,
	2007, -1000, 484, 262, -1000, 26772, -1000, -91, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35106, 1158, 38581, -1000, 1857,
	6019, 1951, 229, 39023, 38959, 15780, 41080, 40749, -81, 15780,
	15780, -1000, -86, -1000, 15780, 479, 40612, -1000, -1000, -1000,
	40612, 15780, 2037, 15780, 261, 260, 259, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 257, -1000, -1000, 37332, 15780,
	253, -1000, 250, 248, 40612, 1514, 40612, -1000, -1000, 745,
	745, 844, 844, 844, 844, 2006, 796, 921, 654, 478,
	478, 478, 1144, 937, 937, 478, 478, 478, 1512, 1352,
	367, 38065, 15780, -89, -1000, -1000, -1000, 40612, 40612, 246,
	-1000, -1000, -1000, -174, 304, 38519, 38465, -1000, 245, 239,
	1469, 1891, -1000, 19715, 1469, -1000, 35106, 40612, -1000, -167,
	-1000, 2004, -1000, -1000, 1361, -1000, 5356, 26136, 35106, -95,
	-1000, 35106, 35106, 35106, 1649, -1000, 2408, -1000, 38222, -98,
	-1000, 326, 1854, 15780, -1000, -1000, 365, 17456, 35106, -1000,
	1367, 1368, 626, 35106, -1000, 35106, -1000, 35106, 35106, 35106,
	-101, 35106, -103, 35106, -1000, 22626, 692, -1000, -1000, 1451,
	-1000, 17456, 361, 35106, 24216, 1927, 17456, 1209, 1331, 522,
	23262, -1000, 743, -1000, -1000, -92, -1000, 394, 120, 881,
	-1000, -100, -1000, 528, 1778, -1000, 1776, 477, -1000, -1000,
	-124, 360, -1000, 525, 523, -1000, -1000, -1000, -1000, 1857,
	15780, 15780, 40749, -104, -1000, 229, 229, -1000, 38171, -1000,
	40612, -1000, 39910, -1000, -1000, -1000, -1000, 1062, -1000, 38105,
	-1000, -1000, -1000, -1000, 16466, 1500, 359, 41080, 37953, -1000,
	-1000, 15780, -1000, -1000, -1000, -1000, 547, 15780, 15780, 1580,
	547, -106, 538, -1000, -1000, -1000, 1997, -1000, -111, -1000,
	-1000, -1000, -1000, 35106, -1000, 35106, -1000, 6019, 35106, 1485,
	1249, -1000, -1000, 1345, 357, 16466, 35106, -1000, 1031, 17456,
	1857, 94, 6019, 1857, 37925, 4667, -112, -113, 1248, -1000,
	1234, 15780, -1000, 41080, 1168, 1168, -1000, 667, 666, 663,
	-1000, 653, -1000, -129, 21334, 1087, -114, 17456, -122, 237,
	120, -128, 35106, -1000, 522, 23262, -1000, 1739, 1749, 35106,
	1819, -1000, -1000, 355, 354, 353, -1000, 26454, 26454, 22626,
	22626, -1000, 229, 229, -1000, -1000, 236, 1131, 1865, -1000,
	40152, 16466, 41080, -136, -1000, 37712, -1000, 35106, 40612, -174,
	-1000, -1000, 26136, 476, -1000, -1000, 1330, -1000, -1000, 35106,
	1254, -1000, -1000, 15780, 38065, 351, 1441, 350, -1000, -1000,
	-1000, -1000, -1000, -1000, 1854, -24, -1000, 955, -1000, -1000,
	40612, 1850, -1000, -1000, 35106, 35106, 332, 331, -1000, 330,
	94, 35106, 1031, -138, -1000, 1441, -1000, 1031, 327, 23262,
	-1000, 1315, 746, -144, 35106, -1000, -1000, 6349, 22626, 22626,
	-1000, -145, -1000, -1000, -1000, 982, 15780, 40152, -147, -1000,
	-1000, -134, -1000, 1919, -1000, -1000, -1000, -1000, 1639, 37684,
	1290, 35106, -1000, 35106, 1857, 234, 35106, 609, 6019, -1000,
	-1000, 15780, 15780, 15780, 325, 1441, 1031, -1000, 1441, 17456,
	-1000, 1331, 806, -1000, 570, -1000, -153, -154, -1000, 233,
	16123, 16123, -174, -1000, 35106, 324, 1630, -1000, 1172, 1204,
	231, -164, -1000, -1000, 322, -1000, 15780, -1000, -175, -182,
	-46, 35106, -1000, 1441, -1000, -183, -1000, 20360, -1000, 563,
	563, -1000, -1000, -1000, 17126, 1223, 882, 39381, -1000, -1000,
	-1000, 35106, -1000, 1180, 1176, 843, -1000, -1000, -1000, -1000,
	-1000, 1290, 40612, -1000, -1000, 138, -185, -1000, 1031, -162,
	-1000, -1000, 1974, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1764, -1000, 619, 1186, 1186, 1172, 2037, 1160, 1441, -1000,
	15437, -1000, 1989, -1000, -1000, 1386, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2440, 2437, 1624, 2012, 2431, 2424, 2423, 2422, 2420,
	2417, 2416, 2414, 2413, 2410, 2404, 2403, 2402, 2401, 2400,
	1998, 2399, 1993, 2398, 2394, 2392, 2390, 1975, 2389, 2386,
	2384, 2383, 2381, 2376, 1973, 2375, 1940, 2374, 2372, 2371,
	2368, 2366, 1921, 2365, 75, 105, 1913, 2363, 2358, 1905,
	1872, 1868, 2356, 1861, 2355, 2353, 1818, 1797, 2352, 91,
	2350, 2348, 2347, 1745, 1702, 2346, 2345, 2344, 143, 2343,
	1675, 2342, 2341, 2338, 2337, 2333, 2329, 2328, 2326, 2321,
	2320, 2318, 2308, 2302, 2301, 2297, 2295, 2293, 2289, 144,
	2282, 2280, 1673, 1601, 2276, 2275, 30, 26, 13, 55,
	32, 190, 2778, 183, 2266, 2265, 2264, 2257, 2253, 2252,
	22, 96, 90, 2251, 47, 2249, 2248, 48, 31, 17,
	15, 2244, 78, 2242, 2241, 1715, 27, 2240, 2239, 128,
	2238, 46, 20, 116, 142, 141, 108, 113, 2234, 2231,
	2227, 49, 109, 1, 2226, 2225, 14, 77, 28, 2224,
	29, 18, 2223, 2222, 122, 2221, 58, 95, 1470, 97,
	115, 135, 2220, 59, 11, 62, 2219, 2217, 152, 35,
	2216, 45, 73, 133, 2215, 50, 149, 120, 67, 121,
	125, 2214, 2211, 2209, 102, 2205, 107, 76, 2203, 2200,
	82, 2197, 86, 130, 2195, 2193, 2192, 84, 2190, 114,
	2189, 2187, 146, 138, 110, 8, 36, 61, 6, 1502,
	1500, 129, 74, 56, 40, 2185, 2180, 955, 805, 34,
	100, 70, 57, 101, 53, 83, 136, 33, 2184, 2182,
	131, 2179, 2178, 2177, 2176, 2175, 99, 2174, 2172, 19,
	2171, 64, 41, 54, 85, 44, 147, 118, 124, 140,
	98, 2166, 68, 117, 2165, 169, 2164, 2163, 1229, 106,
	2158, 2157, 2156, 1199, 1091, 1062, 38, 2155, 2150, 989,
	946, 2141, 2140, 79, 2137, 111, 104, 93, 132, 192,
	94, 2134, 112, 24, 2130, 52, 21, 0, 198, 175,
	2125, 119, 71, 2121, 2120, 2119, 2114, 23, 5, 9,
	4, 7, 2, 81, 25, 2112, 2109, 123, 87, 63,
	2102, 145, 2091, 2087, 2085, 37, 2083, 12, 2082, 10,
	2081, 2080, 16, 3, 2076, 2074, 137, 2073, 89, 2072,
	1890, 2071, 139, 2070, 2069, 1639, 42, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 7, 7,
	8, 8, 6, 6, 6, 6, 6, 9, 9, 10,
	16, 13, 18, 12, 12, 15, 15, 112, 112, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 109, 109, 114, 114, 114, 116,
	116, 113, 113, 108, 108, 20, 20, 57, 57, 99,
	50, 50, 50, 285, 285, 286, 286, 95, 95, 96,
	96, 96, 96, 97, 97, 98, 98, 98, 26, 26,
	26, 22, 22, 22, 22, 22, 23, 23, 24, 24,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 34, 34, 35, 35, 35, 35,
	35, 35, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 41, 41, 41, 39, 39, 39, 38,
	38, 38, 37, 37, 37, 40, 40, 40, 160, 160,
	159, 159, 162, 162, 42, 42, 42, 42, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 45, 45, 45, 45, 45, 45,
	45, 254, 254, 253, 43, 43, 228, 228, 46, 46,
	185, 185, 47, 47, 47, 47, 47, 48, 48, 58,
	58, 326, 326, 326, 330, 330, 331, 331, 332, 332,
	332, 332, 332, 332, 332, 328, 328, 53, 53, 53,
	53, 54, 54, 54, 55, 55, 94, 94, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 64, 64, 64,
	66, 63, 63, 63, 65, 65, 65, 65, 67, 67,
	68, 68, 68, 68, 68, 69, 69, 279, 277, 277,
	278, 278, 139, 139, 139, 139, 139, 140, 140, 140,
	284, 284, 284, 284, 284, 284, 283, 283, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 82, 82, 82, 89, 89, 89,
	89, 89, 89, 89, 71, 71, 76, 76, 76, 76,
	76, 72, 72, 77, 77, 78, 78, 79, 79, 79,
	79, 79, 79, 73, 73, 73, 73, 81, 81, 81,
	81, 80, 80, 86, 86, 86, 86, 86, 86, 83,
	83, 83, 83, 84, 84, 84, 87, 87, 87, 87,
	74, 74, 75, 75, 88, 88, 85, 85, 85, 327,
	327, 329, 329, 51, 51, 30, 30, 31, 31, 141,
	141, 142, 142, 207, 207, 207, 207, 143, 143, 115,
	115, 115, 206, 295, 295, 296, 296, 296, 296, 296,
	296, 297, 297, 297, 297, 297, 297, 297, 293, 293,
	294, 291, 291, 292, 292, 292, 292, 333, 333, 205,
	205, 146, 146, 300, 300, 300, 300, 298, 298, 298,
	298, 298, 301, 299, 302, 302, 302, 302, 302, 240,
	240, 240, 91, 91, 32, 32, 121, 121, 33, 33,
	29, 29, 29, 189, 189, 150, 150, 245, 245, 245,
	132, 132, 110, 110, 110, 14, 11, 11, 11, 11,
	11, 11, 19, 19, 17, 17, 190, 190, 191, 191,
	52, 52, 56, 56, 61, 61, 90, 90, 90, 90,
	90, 90, 21, 21, 21, 21, 25, 25, 25, 25,
	60, 60, 335, 335, 128, 128, 128, 128, 129, 129,
	202, 202, 203, 203, 203, 204, 204, 204, 123, 122,
	124, 124, 28, 28, 28, 117, 117, 118, 118, 119,
	119, 120, 120, 336, 336, 49, 49, 49, 93, 93,
	135, 135, 199, 199, 199, 201, 201, 200, 200, 200,
	175, 175, 175, 92, 92, 155, 155, 164, 164, 165,
	165, 251, 166, 166, 59, 59, 102, 102, 100, 100,
	100, 100, 100, 100, 101, 101, 101, 103, 103, 103,
	103, 103, 103, 103, 106, 106, 106, 107, 107, 107,
	105, 105, 308, 308, 308, 311, 311, 307, 309, 309,
	310, 310, 334, 334, 176, 176, 176, 145, 144, 144,
	148, 148, 147, 149, 149, 244, 244, 244, 173, 173,
	173, 173, 194, 194, 192, 192, 193, 193, 195, 195,
	196, 196, 196, 197, 197, 198, 198, 172, 172, 224,
	224, 104, 104, 104, 154, 154, 154, 156, 156, 214,
	214, 214, 215, 215, 213, 213, 213, 213, 246, 246,
	246, 246, 246, 246, 246, 246, 324, 324, 324, 325,
	325, 243, 243, 247, 247, 247, 247, 247, 247, 241,
	241, 241, 241, 242, 242, 252, 252, 179, 179, 179,
	179, 177, 177, 178, 178, 248, 248, 248, 248, 174,
	174, 249, 249, 249, 208, 208, 255, 255, 255, 273,
	273, 153, 153, 153, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 257, 257, 257, 257, 259, 259, 259, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 272, 272, 272, 272,
	272, 260, 260, 267, 267, 268, 268, 269, 270, 261,
	261, 262, 262, 263, 264, 271, 271, 271, 271, 275,
	275, 265, 265, 265, 265, 265, 266, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 187, 187, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 218, 218, 218, 218, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	303, 303, 303, 303, 303, 303, 303, 303, 305, 305,
	306, 306, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	312, 312, 313, 313, 315, 315, 316, 316, 317, 318,
	318, 318, 319, 320, 320, 314, 314, 321, 321, 321,
	322, 322, 323, 323, 323, 323, 323, 230, 230, 230,
	231, 231, 232, 238, 238, 238, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 130, 130, 130, 130, 130, 161, 161, 227,
	227, 225, 225, 225, 229, 229, 180, 180, 274, 274,
	274, 274, 274, 274, 274, 181, 181, 181, 188, 182,
	182, 183, 183, 183, 183, 183, 183, 221, 222, 184,
	184, 184, 223, 223, 233, 237, 237, 236, 235, 235,
	234, 234, 211, 211, 212, 212, 210, 209, 169, 169,
	168, 168, 167, 167, 337, 337, 239, 239, 170, 170,
	171, 163, 163, 250, 250, 250, 250, 157, 157, 137,
	137, 158, 158, 133, 133, 136, 136, 134, 134, 134,
	134, 151, 151, 152, 152, 131, 131, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 276, 276,
	276, 226, 125, 125, 125, 126, 126, 127, 127, 281,
	281, 281, 282, 282, 282, 282, 280, 280, 280, 280,
	280, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 0, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 3, 4, 6, 6,
	6, 5, 5, 4, 12, 4, 12, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 3,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 2, 0, 7, 2, 6, 2, 1,
	12, 12, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 4, 6,
	7, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 1, 2, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 1, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 2, 6,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 6, 6, 3,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 3,
	1, 3, 3, 1, 1, 2, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 4, 3, 5, 3, 4, 5, 2,
	3, 3, 3, 4, 2, 3, 4, 3, 3, 3,
	4, 4, 4, 4, 2, 3, 5, 5, 5, 2,
	0, 2, 0, 3, 2, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 3, 3, 0, 6, 3,
	11, 14, 4, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 2, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -47,
	-34, -35, -36, -46, -42, -48, -49, -50, -51, -43,
	-57, -56, -58, -61, -59, -52, -53, -62, -70, -90,
	-91, -92, -93, -5, -6, -7, -8, 23, 34, -23,
	-24, 47, 67, -28, -29, -30, -31, 69, -32, -33,
	90, -310, 94, -37, -38, -39, -41, -40, 98, 105,
	107, 125, 134, 214, 220, 240, 242, 244, 251, -100,
	-102, 238, -54, -55, -63, -64, -65, -66, -94, 262,
	-71, -72, -73, -74, -75, -76, -77, -78, -79, -80,
	-81, -82, -83, -84, -85, -86, -87, -88, 265, -21,
	-25, -60, 303, -9, -10, -13, -12, -11, -16, -18,
	-15, -17, -19, -14, -308, -103, -101, 354, 239, 312,
	35, 274, 61, 101, 246, 328, 335, -106, -104, -105,
	-107, 255, 320, 284, 358, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 2, 284,
	323, 83, 141, -326, 2, -158, 284, 83, -134, -125,
	347, 4, -287, -289, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 64, 66,
	67, 68, 71, 72, 73, 81, 82, 84, 86, 90,
	92, 94, 97, 98, 100, 105, 106, 107, 113, 114,
	119, 121, 126, 132, 133, 134, 135, 142, 145, 147,
	140, 157, 158, 159, 161, 162, 163, 166, 165, 170,
	173, 176, 178, 179, 180, 183, 181, 185, 186, 188,
	187, 193, 195, 196, 198, 201, 204, 207, 210, 211,
	212, 213, 214, 216, 218, 220, 222, 223, 224, 225,
	226, 228, 229, 231, 232, 233, 234, 235, 238, 236,
	237, 239, 240, 241, 242, 244, 246, 247, 249, 263,
	264, 275, 251, 252, 253, 254, 258, 256, 259, 260,
	262, 265, 267, 270, 273, 274, 276, 279, 280, 277,
	272, 283, 285, 286, 287, 288, 289, 290, 291, 298,
	299, 303, 304, 305, 306, 309, 310, 311, 312, 314,
	317, 318, 319, 324, 329, 330, 331, 332, 333, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 85, 87, 88, 104, 108, 109, 115, 116,
	117, 127, 129, 136, 137, 146, 148, 149, 150, 151,
	152, 154, 168, 182, 192, 194, 205, 209, 217, 219,
	227, 248, 257, 268, 269, 278, 281, 293, 294, 295,
	300, 301, 316, 320, 321, 357, 357, 2, 158, 224,
	-133, -125, 83, 357, 357, 357, 357, 284, 2, 313,
	323, -189, 83, 308, 357, 357, -125, 220, 22, 2,
	92, 145, 311, 310, 22, 216, 256, 286, 288, 2,
	357, 357, 357, 357, 357, 2, 323, 284, 141, 83,
	313, -125, 2, -45, 2, 354, -44, -4, -27, -36,
	-46, -42, -20, -22, -34, -50, -49, -51, -53, -57,
	-56, -59, -63, -64, -70, -92, -93, 262, -330, 2,
	22, -331, -332, 69, 98, 125, 255, 145, 92, 310,
	284, 2, 158, 2, -125, 2, -326, 2, 158, 2,
	-330, 2, -125, 2, -129, 2, 251, -125, 357, 357,
	357, 357, 357, 173, 55, 248, 259, -68, 299, -67,
	293, -279, -69, 2, -159, 183, -125, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 2, -89, 259, 34, 55, 22,
	60, 84, 126, 141, 142, 162, 65, 66, 223, 173,
	159, 298, 163, 260, 285, 299, 69, 314, 289, 106,
	4, 83, 183, 261, 293, 357, 357, 357, -334, 2,
	284, -101, -103, -102, -147, -148, 307, 153, 103, 203,
	-100, -102, 2, -308, -89, 259, 2, 55, 22, -277,
	2, -239, 199, -216, 89, -218, 345, 346, 340, 189,
	334, -230, -220, -233, 104, 248, 354, -133, -219, 360,
	9, -305, -102, 29, -231, -232, 49, -125, 7, 8,
	5, 6, -131, -257, -226, -266, 302, 110, 191, -303,
	-304, 4, -287, -281, -258, -268, -262, -265, 154, 58,
	75, 76, 79, 77, 80, 261, 313, 50, 28, 108,
	109, 209, 217, 281, 300, 301, 136, 192, 137, 56,
	127, 168, 97, 37, 39, 41, 42, 51, 52, 85,
	87, 88, 115, 116, 117, 146, 148, 149, 150, 151,
	152, 194, 227, 268, 278, 294, 295, 321, -288, -269,
	-270, -263, -264, 70, 124, 144, 138, 156, 160, 169,
	171, 184, 206, 208, 245, 266, -271, -335, 2, 299,
	299, 2, -335, 2, -335, 2, -128, 2, 299, 296,
	-311, 228, -307, -125, -311, 357, 357, 359, 357, -144,
	-145, 2, 22, 95, -171, 2, 354, -246, 2, 352,
	-248, -133, -102, -247, 354, 200, -3, 2, -248, 136,
	-133, 2, -248, 136, -133, 2, -125, 2, -136, 136,
	-133, 296, 359, -158, -151, -125, -210, -209, 356, -216,
	2, -216, 2, 123, 354, -168, -169, -209, -210, 2,
	-159, 136, -125, 2, -159, 2, 141, -125, 136, 2,
	-125, 22, 123, 2, 155, 2, 155, 2, -249, 2,
	-248, -160, 136, 2, -159, -160, 136, 2, -137, 136,
	2, -136, -125, 136, 2, -151, 136, 2, -185, 354,
	-254, 2, -253, -282, 4, -287, -289, -288, 320, 58,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 259, 199, 359, -159, -216, -228, 354, 123,
	-216, 199, -125, 2, 263, 2, 354, -68, 53, 299,
	-203, 2, -204, -122, -123, -124, 157, 222, 226, 333,
	296, 339, 123, -277, -162, 356, -89, 2, -285, 2,
	-283, 9, -282, 5, 263, 2, 223, 260, 55, 123,
	2, 2, -327, 2, 199, 123, 2, 123, 2, 123,
	2, 123, 2, 123, 2, 2, 223, 260, 2, 120,
	2, 298, 2, 2, 123, 2, 157, 222, 275, 2,
	284, 323, 2, 123, 123, 333, 2, -174, -248, -147,
	-148, -173, -192, -193, 172, 112, 197, -176, 22, 95,
	-176, -176, 44, 355, 355, -89, 263, 2, 10, 11,
	57, 33, 345, 346, 347, 348, 118, 349, 350, 343,
	344, 342, 337, 338, 339, 63, 177, 250, 13, 14,
	15, 26, 202, 171, 334, 138, 266, 340, 16, 17,
	18, 156, 36, 139, -130, -138, -216, -216, -216, -216,
	-216, 208, -167, -211, 352, -102, 354, 354, -102, -216,
	-161, 354, 7, -102, -225, 352, -234, -216, -168, 354,
	5, 354, 5, -312, 329, 120, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 219, -275, 324, -275, -275, -259,
	354, -259, -260, 354, -259, 330, 335, 354, -202, -203,
	-202, 296, -129, 359, -311, -152, 354, -171, -163, -250,
	-216, 347, -163, -170, -239, 70, -179, 160, 184, 124,
	169, 245, 144, 7, -45, -213, 360, 354, 347, -243,
	335, -102, -247, 354, -246, -133, 354, -112, 236, -111,
	21, 23, 98, 318, 104, 272, 290, 252, 236, 104,
	236, 272, 290, 252, 236, 104, 360, -285, -134, 359,
	-280, 347, 4, -287, -289, -288, -290, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 65, 69, 74, 75, 77, 76, 78, 79,
	80, 89, 91, 93, 95, 96, 99, 101, 103, 110,
	111, 112, 120, 122, 123, 125, 128, 130, 139, 141,
	143, 153, 155, 164, 167, 172, 174, 175, 189, 190,
	191, 197, 199, 200, 202, 203, 215, 221, 230, 243,
	255, 261, 271, 282, 284, 292, 296, 297, 302, 307,
	308, 313, 315, 322, 323, 325, 326, 327, 328, 276,
	355, -157, -133, -169, 354, -146, 189, -121, -309, 328,
	-146, 354, -126, 136, 2, -125, -309, 189, -249, -135,
	-133, -135, 262, -125, 30, -114, 359, 48, 241, 104,
	-114, 104, -114, 359, 104, -114, 104, 104, -161, -216,
	355, 359, -326, -332, 69, 354, 30, -227, -255, -256,
	-258, -267, -261, -265, -266, 40, 46, 45, 291, 182,
	257, 269, 316, 38, 198, 147, 146, 148, 149, 150,
	151, 152, 268, 37, 227, 116, 117, 115, 97, 88,
	87, 194, 42, 41, -269, -270, -263, -264, 85, 294,
	295, 154, 39, 52, 51, 321, 278, -286, -285, -326,
	-279, -161, 30, -203, 2, 359, -204, 170, -140, 176,
	188, 132, 200, 331, -284, 5, 4, -226, -240, 89,
	173, -266, 8, 346, -276, 7, 345, -278, -277, -278,
	73, 356, -280, -159, 22, 264, 2, -279, -329, 120,
	-326, -279, -279, -279, -279, -279, 259, -45, 120, -125,
	170, -279, 2, -279, 2, 284, 141, 284, -114, 359,
	-173, -193, -192, -195, -216, 22, -198, 114, 185, -216,
	-218, -101, -101, -101, -149, -244, -216, 221, 141, -279,
	-273, -255, -272, 232, 233, 231, 235, 234, -255, -280,
	293, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, 171, 138, 266, 36, 139, -216, 296,
	-216, -216, -216, -216, 181, 189, 191, 302, 110, 309,
	95, 195, -337, 282, 32, -223, -102, 354, -238, 27,
	271, 22, -230, 248, 354, -211, -216, -212, -161, 355,
	355, 359, -161, -229, 353, -225, -237, -236, 325, 355,
	-161, 322, 22, 95, 347, 2, 7, -186, 332, 180,
	86, 133, 179, -187, 254, -313, 113, 128, 354, 355,
	2, 355, 2, 355, 2, -216, -216, -180, 2, -274,
	-161, 4, 332, 180, 86, 133, 179, 254, -180, 2,
	-181, 2, -216, -161, -182, -217, -218, 345, 346, 340,
	354, 248, -183, 2, -216, -161, -216, 43, 167, 297,
	-184, -216, 123, -161, -216, -216, -216, -161, -161, 2,
	-161, 2, 354, 7, 7, 293, 293, 7, -129, -307,
	30, -151, -154, 359, 123, 30, 4, -154, 359, 355,
	160, 160, -246, -179, 160, -177, 206, -177, -177, -324,
	354, 353, -243, -280, 352, 361, -161, 2, -242, -241,
	30, -125, 204, 355, -133, 359, 296, -190, 65, 59,
	-206, 136, 59, -291, -125, 65, -292, 54, 308, 221,
	122, -190, 65, -190, 65, 65, -248, 33, -59, 123,
	296, -248, 296, 33, -59, 123, 296, -136, -280, -252,
	336, -125, 123, 355, 359, -141, -151, -142, -125, -207,
	-206, -293, -294, -291, 141, 308, 111, 30, 104, 213,
	30, 199, 189, -117, 287, 104, -208, 326, -199, -59,
	354, 89, 30, -199, -164, -165, -251, -166, -133, 354,
	-125, -159, -160, -160, -136, -137, -125, -151, 355, 359,
	-45, -253, 296, 315, -142, -44, 355, 359, -153, 29,
	352, -186, 354, -252, 359, 123, 339, 296, 355, 299,
	-204, -139, 226, 270, 237, 258, 8, 7, 7, 359,
	-280, -328, -125, 259, -45, -133, -136, -133, -248, -196,
	-276, 354, 346, -197, 248, 249, 359, -110, 31, 93,
	161, -133, 333, -216, -216, 296, -337, 282, -223, -216,
	181, 191, 302, 110, 309, 95, 195, 123, 354, -217,
	-217, -161, -220, 354, -161, 353, 363, 355, -216, 353,
	353, 359, -235, -236, 99, -216, -148, 359, -147, -216,
	-161, -161, 355, 355, 296, 296, 296, 296, 354, -318,
	207, 354, 354, -216, 30, 359, 355, 123, 355, 355,
	-188, 215, 355, 10, 11, 345, 346, 347, 348, 118,
	349, 350, 343, 344, 342, 337, 338, 339, 63, 177,
	250, 13, 14, 15, 156, 139, -217, -217, -217, -161,
	354, 355, -221, -222, 123, 120, 30, -184, -184, -184,
	355, 123, -161, 359, 359, 359, 355, 355, 355, 7,
	355, 359, 355, 333, 333, 355, 354, 355, -208, -250,
	-156, 2, -246, -280, -208, -239, -246, -246, -178, 315,
	199, 160, -246, -241, 355, -325, 7, -243, -242, 7,
	-215, -214, 121, 187, 355, -125, 354, -243, 355, -111,
	-133, -125, -125, 189, -206, 136, -116, 189, -255, -125,
	354, 354, 161, 161, -125, -125, 136, -125, 136, -125,
	-125, -112, 236, -59, 354, -133, 236, -125, -59, 354,
	-125, 236, -95, 135, 195, 276, 123, -133, 355, 355,
	359, -126, 141, -126, -59, -159, 5, -59, -133, 104,
	-118, 100, -336, 339, -125, -194, -192, -216, -175, -201,
	243, 199, -157, 320, -125, -175, -155, 359, 123, 339,
	-157, -114, -114, -114, -114, -216, -328, -285, 355, -255,
	352, 353, 7, 7, -98, 328, -285, -328, -277, -277,
	-122, 306, 62, 226, -277, 359, -197, -216, -244, -133,
	360, -216, -216, -217, -217, 123, 354, -216, -227, 26,
	26, 355, -161, 355, 359, -212, -216, 355, -225, 101,
	-216, 292, 355, 322, -148, -148, -148, 5, 180, 133,
	179, -187, 179, -187, -187, 7, -319, -125, 354, 326,
	-147, 355, -273, -255, -216, -221, -216, -273, -255, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, 95, 189,
	195, -217, 359, -161, 355, -222, -221, -216, -216, -255,
	355, 355, 355, -161, -216, -216, -216, 355, 7, -44,
	-172, 128, -252, 359, -172, -178, 354, -216, -246, 353,
	355, 359, -242, 353, 359, 362, 339, -243, 354, -151,
	-241, 296, 296, 104, 189, 317, -295, -292, -216, -150,
	-245, -125, -306, 354, -303, -304, -131, 354, 354, -109,
	98, 262, -191, 104, -114, 104, -114, 296, -190, 65,
	-161, 296, -161, 296, -98, 123, 283, 276, -143, 140,
	-207, 354, -126, 354, 354, -146, 354, -125, -119, 166,
	-336, -283, -309, -175, -175, -163, 190, 64, 355, -208,
	-165, -156, -239, 355, -99, 71, -99, 7, 353, 355,
	-97, 201, -96, -125, 5, -125, 200, 355, -110, -280,
	26, 26, -216, -227, 355, -216, -216, 355, -216, 353,
	-216, 5, -216, 355, 355, 355, 355, -320, -125, -216,
	355, 355, 355, -222, 123, 95, 195, 354, -216, 355,
	355, 359, 355, 355, 355, 355, -224, 130, 44, -246,
	-224, -151, -213, 7, -214, -280, 352, -242, -151, 355,
	-125, -125, -206, 104, -296, 65, -297, 57, 111, 69,
	189, 191, 308, 221, 54, 89, 230, 355, 355, 359,
	-132, -168, 57, -132, -216, 354, -150, -151, 189, 89,
	189, 89, 82, 304, -125, -125, -133, -125, -125, 355,
	-133, 355, -125, -286, 293, 139, -150, 354, -151, -141,
	30, -150, 199, -120, 165, -336, -283, -117, -200, 354,
	199, -59, -175, 339, 82, 82, 353, 359, 354, 339,
	339, -110, -216, -216, 355, 355, -148, -314, 212, 355,
	-217, 123, 354, -227, 355, -216, -315, 327, -216, -161,
	-315, 355, -243, 7, 355, -206, -125, -280, -125, 111,
	136, 191, 161, 354, -217, -133, -205, -333, 68, 280,
	-245, -110, -280, -110, 355, -161, 355, 355, 191, 191,
	-216, -255, -114, -114, 296, 296, 296, 296, -219, -131,
	-125, 210, 355, -150, 355, 355, -59, 355, -133, -336,
	-283, -118, 96, -151, 65, -171, -102, 354, 354, 354,
	-96, -97, -285, -285, 355, -148, 44, -217, -227, 355,
	355, -316, -317, -125, -242, 353, -297, -126, 189, -216,
	-127, 354, -143, 354, -132, -148, 230, -113, 57, -125,
	-125, 354, 354, 354, -133, -205, 355, -143, -205, 354,
	-283, -119, 310, 190, 355, -125, -286, -286, 355, -321,
	225, 249, -161, 355, 359, 30, 104, 355, -300, 178,
	-125, -151, -110, 355, -133, -108, 315, -280, -161, -161,
	-161, 354, -143, -205, -143, -150, -120, 262, -208, 355,
	355, 355, -322, -323, 36, 305, 73, -216, -322, -317,
	-319, 111, -298, -301, -299, 199, 124, 211, 267, 355,
	355, -146, -216, 355, 355, -148, -151, -143, 355, -164,
	-98, -98, -323, 218, 119, 248, 218, 119, -125, -299,
	199, -301, 199, 310, 92, -300, 355, 355, -205, -208,
	26, -302, 186, 241, 48, 262, -302, -298, -115, 48,
	241, -143, -323, 20, 191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 25, 27, 29,
	31, 33, 35, 37, 39, 40, 42, 43, 44, 45,
	46, 48, 50, 53, 55, 57, 59, 0, 0, 141,
	143, 0, 0, 150, 152, 154, 156, -2, 159, 161,
	0, 0, 0, 172, 174, 176, 178, 180, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 634,
	-2, 0, 277, 279, 288, 290, 292, 294, 295, 0,
	338, 340, 342, 344, 346, 348, 350, 352, 354, 356,
	358, 360, 362, 364, 366, 367, 369, 371, 0, 556,
	558, 560, -2, 62, 63, 64, 65, 66, 72, 73,
	74, 75, 68, 70, 670, -2, 681, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 647, 649, 651,
	653, -2, 0, 0, -2, 6, 11, 13, 15, 18,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	41, 47, 49, 51, 54, 56, 58, 60, 61, 0,
	0, 0, 0, 0, 116, 261, 0, 1234, 1161, 1167,
	1168, 1192, 1193, 1194, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 142, 144, 145, 0, 0,
	0, 1163, 1234, 151, 153, 155, 157, 0, 163, 0,
	0, 0, 0, 523, 160, 162, 252, 1293, 254, 256,
	0, 0, 0, 0, 166, 167, 168, 169, 170, 171,
	173, 175, 177, 179, 181, 182, 0, 0, 0, 0,
	0, 251, 249, 204, 205, 0, 234, 235, 236, 237,
	238, 240, 208, 210, 211, 213, 215, 217, 219, 220,
	222, 224, 225, 227, 229, 230, 232, 0, 0, 258,
	264, 265, 266, 268, 269, 270, 271, 272, 273, 274,
	0, 122, 0, 444, 247, 245, 0, 118, 0, 553,
	0, 260, 554, 555, 550, 551, 1320, 579, 278, 280,
	289, 291, 293, -2, -2, 1409, -2, 302, -2, 310,
	1415, 0, 313, 314, 317, -2, 200, 339, 341, 343,
	345, 347, 349, 351, 353, 355, 357, 359, 361, 363,
	365, 368, 370, 372, 373, 374, 0, 0, 0, 378,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	377, 379, 380, 381, 0, 557, 559, 561, 0, 513,
	672, -2, 645, 646, -2, 0, 676, 676, 676, 0,
	0, 646, 644, 0, 281, 0, 283, 0, 378, 286,
	287, 318, 319, 1146, 1147, 873, 0, 0, 0, 0,
	0, 0, 965, 967, 1383, 1409, 0, 969, 970, 0,
	972, 974, 975, 0, 978, 979, 1131, 1163, 1177, 1178,
	1179, 1180, 0, 0, 1183, 0, 1185, 1186, 1187, 1031,
	989, -2, -2, 1175, 801, 802, 803, 804, -2, 1423,
	993, 996, 999, 1002, 1003, 1004, 1005, 0, 1367, 1384,
	1385, 1405, 1406, 1414, 1418, 1419, 1391, 1402, 1392, 1379,
	1389, 1400, 1240, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1201, 835,
	836, 841, 842, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 844, 581, 563, 572,
	581, 565, 566, 567, 568, 569, 570, 571, 574, 0,
	662, 1299, 665, 1174, 663, 648, 650, 0, 652, 0,
	0, 656, 678, 677, 711, 712, 0, 660, 661, 671,
	727, 765, 742, 733, 0, 0, 2, 67, 0, 1391,
	765, 69, 0, 1391, 765, 71, 0, 76, 0, 1391,
	1166, 0, 0, 262, 263, 1171, 1169, 1170, 0, 146,
	147, 148, 149, 0, 0, 1164, 1140, 1138, 1139, 158,
	492, 1391, -2, 515, 492, 519, -2, 669, 1391, 594,
	253, 255, 0, 165, 0, 607, 0, 609, 0, 624,
	771, 108, 1391, 185, 198, 108, 1391, 188, 108, 1391,
	191, 1159, 108, 1391, 194, 195, 1391, 197, 248, 0,
	0, -2, 241, 243, 1202, 1203, 1204, 1205, -2, 1423,
	239, 209, 212, 214, 216, 218, 221, 223, 226, 228,
	231, 233, -2, 0, 0, 0, 443, 0, 0, 0,
	552, 0, 578, 296, 0, 299, 0, 301, 1378, -2,
	304, 305, 582, 585, 586, 587, 0, 0, 0, 0,
	0, 0, 0, 315, 201, 0, 375, 376, 384, 385,
	123, 124, 336, 337, 0, 388, 409, 421, 0, 0,
	392, 394, 442, 396, 0, 0, 398, 0, 400, 0,
	402, 0, 404, 0, 406, 408, 410, 422, 412, 671,
	414, 0, 416, 420, 0, 425, 0, 427, 428, 429,
	0, 0, 435, 0, 0, 382, 383, 108, 769, -2,
	0, 640, 690, 691, 0, 0, 0, 0, 674, 675,
	0, 0, 0, 636, 637, 282, 0, 285, 0, 0,
	0, 0, 1066, 1067, 1068, 1069, 1070, 1071, 1074, 1075,
	1072, 1073, 1076, 1077, 1078, 0, 0, 0, 1079, 1080,
	1081, 0, 0, 1083, 0, 1085, 0, 0, 0, 0,
	0, 0, 1145, 0, 0, 1082, 878, 879, 880, 902,
	903, 0, 966, 1142, 1135, 968, 0, 0, -2, 1087,
	0, 0, 971, 976, 977, 0, 0, 1130, -2, 0,
	1182, 0, 870, 1033, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 820, 838, 849, 846, 845, 822,
	0, 821, 819, 0, 823, 0, 0, 0, 562, 580,
	564, 0, 576, 0, 664, 0, 0, 713, 716, 1151,
	1155, 1156, 716, 0, 1148, 0, 0, 0, 0, 762,
	762, 762, 760, 736, 0, 742, 0, 0, 766, 754,
	0, -2, 733, 0, 0, 767, 0, 77, 547, 87,
	0, 547, 547, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 756, 1162, 0,
	1136, 1137, 1206, 1207, 1208, 1209, 1210, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 138,
	0, 0, 1157, 1141, 450, 0, 0, 514, 0, 668,
	0, 0, 0, 1391, 522, 1195, 596, 0, 775, 0,
	610, 0, 0, 772, 0, 183, 0, 106, 107, 0,
	186, 0, 189, 0, 0, 192, 0, 0, 0, 1087,
	671, 0, 0, 267, 0, 0, 671, 0, 1089, 783,
	784, 785, 786, 787, 870, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 832, 0, 807,
	807, 807, 824, 825, 833, 834, 839, 840, 851, 852,
	854, 856, 850, 850, 850, 847, 848, 756, 125, 0,
	0, 0, 0, 306, 307, 0, 584, 0, 588, 327,
	328, 329, 590, 591, 311, 330, 331, 332, 333, 334,
	335, 0, 509, 0, 511, 1188, 0, 308, 320, 309,
	312, 0, 202, 386, 387, 389, 390, 391, 395, 0,
	439, 397, 399, 401, 403, 405, 413, 417, 671, 423,
	426, 430, 431, 432, 433, 0, 0, 0, 512, 0,
	643, 688, 689, 694, 698, 699, 702, 705, 706, 696,
	873, 657, 658, 659, 682, 683, 534, 0, 0, 284,
	874, 779, 780, 826, 827, 828, 829, 830, 875, 876,
	0, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, -2, -2, -2, 894, 895, 896, -2, -2, -2,
	900, 901, -2, 1084, 1086, 0, 1145, 0, -2, 0,
	-2, -2, -2, -2, 914, 0, 916, 919, 921, 923,
	0, 0, 0, 0, 1144, 933, 1122, 0, 0, 1063,
	1064, 1065, 918, 0, 0, 1143, 1134, 0, 0, -2,
	973, 0, 0, 0, 1093, 1094, 1129, 1125, 0, 980,
	681, 0, 0, 0, 0, 987, 0, 1191, 857, 858,
	859, 860, 861, 862, 871, 1041, 0, 0, 0, 994,
	995, 997, 998, 1000, 1001, 0, 0, 0, 1009, 0,
	1097, -2, -2, -2, -2, -2, -2, -2, 0, 1011,
	0, 1013, 1087, 1107, 0, 0, 936, 0, 0, 0,
	0, 1409, 0, 1016, 1087, 1115, 0, 0, 0, 0,
	0, 1087, 0, 1121, 0, 0, 0, 0, 0, 1027,
	0, 1029, 0, 0, 0, 0, 0, 0, 575, 666,
	0, 0, 775, 0, 0, 0, 1154, 775, 0, 1150,
	0, 0, 0, 0, 0, 757, 761, 758, 759, 0,
	0, 742, 754, 724, 0, 0, 0, 731, 732, 753,
	0, 752, 741, -2, 0, 0, 0, 0, 0, 546,
	89, 1391, 0, 110, 0, 0, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 1165, 128,
	0, 1172, 0, 0, 0, 0, 0, 449, 1171, 451,
	453, 454, 455, 456, 1196, 0, 1196, 0, 0, 0,
	0, 0, 0, 598, 604, 0, 693, 0, 622, 612,
	0, 0, 0, 622, 626, 627, 629, 630, 0, 0,
	773, 199, 108, 108, 1160, 108, 108, 196, 250, 0,
	206, 242, 0, 0, 0, 244, 246, 0, 776, 778,
	0, 788, 0, 137, 0, 0, 0, 0, 300, 0,
	583, 589, 0, 324, 0, 326, 510, 1190, 1189, 0,
	203, 441, 275, 415, 418, 436, 437, 438, 770, 0,
	700, 0, 0, 697, 703, 704, 0, 685, 532, 533,
	0, 0, 0, -2, -2, 0, 0, 0, 934, -2,
	915, 917, 920, 922, 924, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 1132, 1135, -2, 1088, 1091,
	1092, 0, 0, 1126, 0, 0, 0, 0, 680, 681,
	681, 681, 986, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 1008, 0, 1010, 1012,
	0, 0, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 940, 941, 0,
	0, 1015, 1113, 1114, 0, 0, 0, 0, 0, 0,
	1021, 0, 1120, 0, 0, 0, 1025, 1026, 1028, 0,
	805, 0, 831, 853, 855, 843, 671, 1173, 708, 1152,
	756, 715, 717, 1153, 708, 1149, 744, 0, 746, 0,
	0, 0, 748, 0, 737, 0, 739, 754, 729, 0,
	0, 722, 0, 721, 742, 750, 0, 0, 768, 88,
	536, 0, 0, 0, 91, 1391, 99, 0, 464, 0,
	0, 0, 0, 0, 549, 100, 1391, 108, 1391, 108,
	101, 78, 547, 79, 0, 542, 0, 535, 80, 0,
	544, 0, 137, 0, 0, 139, 0, 1158, 458, 491,
	0, 0, 1196, 0, 447, 492, 516, 518, 0, 0,
	600, 604, 0, 603, 669, 622, 692, 774, 605, 622,
	0, 0, 0, 614, 611, 608, 775, 0, 0, 0,
	0, 184, 187, 190, 193, 1088, 257, 0, 0, 1090,
	0, 781, 0, 0, 117, 0, 126, 259, 297, 298,
	303, 322, 323, 325, 321, 0, 0, 0, 684, 534,
	0, 877, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1123, 0, 1058, 0, 0, 1134, -2, 1095, 1124,
	1128, 0, 981, 0, 0, 0, 0, 1184, 863, 864,
	865, 866, 867, 868, 869, 0, 1039, 1040, 1044, 0,
	0, 992, 0, 0, 1096, 1106, 1108, 937, 938, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, -2,
	-2, -2, 955, 956, 957, -2, -2, -2, 0, 0,
	0, 1109, 0, 0, 1061, 1111, 1112, 1117, 1118, 0,
	1018, 1019, 1020, 1119, 0, 0, 0, 837, 0, 0,
	710, 0, 714, 0, 710, 745, 0, 764, 747, 727,
	738, 0, 735, 725, 0, 726, 0, 754, 0, 0,
	734, 0, 0, 0, 0, 109, 462, 481, 0, 0,
	525, 531, 531, 0, 990, 991, 0, 0, 0, 93,
	0, 0, 0, 0, 97, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 140, 445, 0,
	452, 0, 0, 0, 450, 0, 0, 0, 602, 604,
	0, 595, 596, 164, 606, 620, 621, 619, 0, 622,
	628, 625, 631, 0, 0, 119, 0, 0, 782, 789,
	135, 1283, 133, 130, 132, 276, 695, 701, 686, 534,
	0, 0, -2, 0, 927, -2, -2, 1057, 1088, 1133,
	1127, 1181, 681, 982, 984, 985, 872, 1046, 1043, 0,
	1030, 1006, 1007, 1105, 0, 0, 0, 0, 1088, 1060,
	1017, 0, 1023, 1024, 806, 667, 1035, 0, 0, 718,
	1035, 0, 742, 740, 723, 719, 0, 730, 0, 751,
	538, 540, 90, 0, 463, 0, 466, 0, 0, 0,
	0, 472, 473, 0, 0, 0, 0, 483, 490, 0,
	534, 1176, 0, 534, 0, 0, 0, 0, 0, 105,
	0, 0, 548, 0, 108, 108, 537, 0, 0, 0,
	543, 0, 545, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 604, 0, 597, 598, 0, 0,
	0, 613, 623, 0, 0, 0, 777, 0, 0, 0,
	0, 687, -2, -2, 928, 1059, 0, 681, 0, 1032,
	-2, 0, 0, 0, 1062, 0, 654, 0, 709, 707,
	655, 763, 754, 0, 749, 92, 0, 467, 468, 1196,
	0, 471, 474, 0, 476, 1198, 458, 0, 487, 488,
	526, 527, 530, 528, 531, 681, 485, 0, 94, 95,
	104, 112, 96, 102, 0, 0, 0, 0, 755, 0,
	0, 0, 490, 0, 480, 458, 448, 490, 0, 0,
	599, 600, 0, 0, 0, 632, 633, 0, 0, 0,
	134, 0, 129, 131, 983, 1049, 0, -2, 0, 963,
	1022, 1034, 1036, 0, 728, 720, 465, 469, 0, 0,
	496, 0, 484, 0, 534, 0, 0, 114, 0, 539,
	541, 0, 0, 0, 0, 458, 490, 446, 458, 0,
	601, 602, 0, 616, 775, 618, 0, 0, 136, 0,
	0, 0, 1045, 964, 0, 0, 0, 475, 501, 0,
	0, 0, 529, 981, 492, 98, 0, 111, 0, 0,
	681, 0, 478, 458, 520, 0, 593, 0, 617, 137,
	137, 1042, 1047, 1050, -2, 1351, 1231, 0, 1048, 1037,
	1038, 0, 477, 497, 498, 0, 493, 494, 495, 1197,
	489, 496, 113, 84, 86, 0, 0, 479, 490, 775,
	120, 121, 0, 1052, 1053, 1054, 1055, 1056, 470, 499,
	0, 500, 0, 0, 0, 501, 0, 461, 458, 615,
	0, 502, 0, 505, 506, 0, 503, 486, 457, 459,
	460, 521, 1051, 504, 507, 508,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:881
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:885
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "GRANT")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "INSERT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1028
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 89:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1123
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = nil
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = DropCascade
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = DropRestrict
		}
	case 108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = DropDefault
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1199
		{
			return unimplemented(sqllex, "alter using")
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1200
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1227
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.str = "CSV"
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
		}
	case 138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1404
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			return helpWith(sqllex, "DELETE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1493
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1554
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1605
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1614
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1617
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "DELETE")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "INSERT")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{ /* SKIP DOC */
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "GRANT")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return helpWith(sqllex, "RESET")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return helpWith(sqllex, "RESET")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1886
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{ /* SKIP DOC */
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			return unimplemented(sqllex, "set local")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			return unimplemented(sqllex, "set from current")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = Low
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = Normal
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = High
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.str = "client_encoding"
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2201
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2212
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2383
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2387
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2391
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2397
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = DropDefault
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			return unimplemented(sqllex, "match full")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex, "match partial")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match simple")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			return unimplemented(sqllex, "no action")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "action set null")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action set default")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2811
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2872
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = true
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = false
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2906
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2907
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = Ascending
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = Descending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2947
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2949
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = true
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = false
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3071
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.str = ""
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.str = ""
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = ReadOnly
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = ReadWrite
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.str = ""
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "INSERT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			return helpWith(sqllex, "SELECT")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			return helpWith(sqllex, "VALUES")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "TABLE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "SELECT")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			return helpWith(sqllex, "TABLE")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplemented(sqllex, "cte")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = true
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = false
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = true
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			return helpWith(sqllex, "VALUES")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &From{}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3912
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3957
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3994
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = nil
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = false
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.str = astFullJoin
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astLeftJoin
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.str = astRightJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.str = astInnerJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4278
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4384
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4393
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = nil
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4554
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4586
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4626
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = year
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = month
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = day
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = hour
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = minute
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = month
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = hour
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = minute
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = minute
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = nil
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = second
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4721
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4756
		{
			return unimplemented(sqllex, "at tz")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4990
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5163
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5216
		{
			return unimplemented(sqllex, "variadic")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5217
		{
			return unimplemented(sqllex, "variadic")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5241
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5257
		{
			return unimplemented(sqllex, "func_application")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5262
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5280
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5290
		{
			return unimplemented(sqllex, "current role")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			return unimplemented(sqllex, "current user")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5292
		{
			return unimplemented(sqllex, "session user")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5293
		{
			return unimplemented(sqllex, "user")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5326
		{
			return unimplemented(sqllex, "treat")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5363
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5368
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5372
		{
			return unimplemented(sqllex, "within group")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5373
		{
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.str = ""
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5470
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5471
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5472
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5475
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5482
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5483
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5484
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5485
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5486
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = Any
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = Some
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = All
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = Plus
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = Minus
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = Mult
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = Div
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = Mod
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = Bitand
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = Bitor
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = Pow
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = Bitxor
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = LT
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = GT
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = EQ
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = LE
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = GE
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = NE
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = Like
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = NotLike
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = ILike
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = NotILike
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5850
		{
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5851
		{
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5969
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6013
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6049
		{
			return unimplemented(sqllex, "func const")
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6058
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = DNull
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6085
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.str = ""
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
