// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISCARD = 57434
const DISTINCT = 57435
const DO = 57436
const DOUBLE = 57437
const DROP = 57438
const ELSE = 57439
const ENCODING = 57440
const END = 57441
const ESCAPE = 57442
const EXCEPT = 57443
const EXISTS = 57444
const EXECUTE = 57445
const EXPERIMENTAL_FINGERPRINTS = 57446
const EXPLAIN = 57447
const EXTRACT = 57448
const EXTRACT_DURATION = 57449
const FALSE = 57450
const FAMILY = 57451
const FETCH = 57452
const FILTER = 57453
const FIRST = 57454
const FLOAT = 57455
const FLOORDIV = 57456
const FOLLOWING = 57457
const FOR = 57458
const FORCE_INDEX = 57459
const FOREIGN = 57460
const FROM = 57461
const FULL = 57462
const GRANT = 57463
const GRANTS = 57464
const GREATEST = 57465
const GROUP = 57466
const GROUPING = 57467
const HAVING = 57468
const HELP = 57469
const HIGH = 57470
const HOUR = 57471
const INCREMENTAL = 57472
const IF = 57473
const IFNULL = 57474
const ILIKE = 57475
const IN = 57476
const INTERLEAVE = 57477
const INDEX = 57478
const INDEXES = 57479
const INITIALLY = 57480
const INNER = 57481
const INSERT = 57482
const INT = 57483
const INT2VECTOR = 57484
const INT8 = 57485
const INT64 = 57486
const INTEGER = 57487
const INTERSECT = 57488
const INTERVAL = 57489
const INTO = 57490
const IS = 57491
const ISOLATION = 57492
const JOB = 57493
const JOBS = 57494
const JOIN = 57495
const KEY = 57496
const KEYS = 57497
const KV = 57498
const LATERAL = 57499
const LC_CTYPE = 57500
const LC_COLLATE = 57501
const LEADING = 57502
const LEAST = 57503
const LEFT = 57504
const LEVEL = 57505
const LIKE = 57506
const LIMIT = 57507
const LOCAL = 57508
const LOCALTIME = 57509
const LOCALTIMESTAMP = 57510
const LOW = 57511
const LSHIFT = 57512
const MATCH = 57513
const MINUTE = 57514
const MONTH = 57515
const NAN = 57516
const NAME = 57517
const NAMES = 57518
const NATURAL = 57519
const NEXT = 57520
const NO = 57521
const NO_INDEX_JOIN = 57522
const NORMAL = 57523
const NOT = 57524
const NOTHING = 57525
const NULL = 57526
const NULLIF = 57527
const NULLS = 57528
const NUMERIC = 57529
const OF = 57530
const OFF = 57531
const OFFSET = 57532
const OID = 57533
const ON = 57534
const ONLY = 57535
const OPTIONS = 57536
const OR = 57537
const ORDER = 57538
const ORDINALITY = 57539
const OUT = 57540
const OUTER = 57541
const OVER = 57542
const OVERLAPS = 57543
const OVERLAY = 57544
const PARENT = 57545
const PARTIAL = 57546
const PARTITION = 57547
const PASSWORD = 57548
const PAUSE = 57549
const PLACING = 57550
const PLANS = 57551
const POSITION = 57552
const PRECEDING = 57553
const PRECISION = 57554
const PREPARE = 57555
const PRIMARY = 57556
const PRIORITY = 57557
const QUERIES = 57558
const QUERY = 57559
const RANGE = 57560
const READ = 57561
const REAL = 57562
const RECURSIVE = 57563
const REF = 57564
const REFERENCES = 57565
const REGCLASS = 57566
const REGPROC = 57567
const REGPROCEDURE = 57568
const REGNAMESPACE = 57569
const REGTYPE = 57570
const RENAME = 57571
const REPEATABLE = 57572
const RELEASE = 57573
const RESET = 57574
const RESTORE = 57575
const RESTRICT = 57576
const RESUME = 57577
const RETURNING = 57578
const REVOKE = 57579
const RIGHT = 57580
const ROLLBACK = 57581
const ROLLUP = 57582
const ROW = 57583
const ROWS = 57584
const RSHIFT = 57585
const SAVEPOINT = 57586
const SCATTER = 57587
const SEARCH = 57588
const SECOND = 57589
const SELECT = 57590
const SEQUENCES = 57591
const SERIAL = 57592
const SERIALIZABLE = 57593
const SESSION = 57594
const SESSIONS = 57595
const SESSION_USER = 57596
const SET = 57597
const SETTING = 57598
const SETTINGS = 57599
const SHOW = 57600
const SIMILAR = 57601
const SIMPLE = 57602
const SMALLINT = 57603
const SMALLSERIAL = 57604
const SNAPSHOT = 57605
const SOME = 57606
const SPLIT = 57607
const SQL = 57608
const START = 57609
const STATUS = 57610
const STDIN = 57611
const STRICT = 57612
const STRING = 57613
const STORING = 57614
const SUBSTRING = 57615
const SYMMETRIC = 57616
const SYSTEM = 57617
const TABLE = 57618
const TABLES = 57619
const TEMP = 57620
const TEMPLATE = 57621
const TEMPORARY = 57622
const TESTING_RANGES = 57623
const TESTING_RELOCATE = 57624
const TEXT = 57625
const THEN = 57626
const TIME = 57627
const TIMESTAMP = 57628
const TIMESTAMPTZ = 57629
const TO = 57630
const TRAILING = 57631
const TRACE = 57632
const TRANSACTION = 57633
const TREAT = 57634
const TRIM = 57635
const TRUE = 57636
const TRUNCATE = 57637
const TYPE = 57638
const UNBOUNDED = 57639
const UNCOMMITTED = 57640
const UNION = 57641
const UNIQUE = 57642
const UNKNOWN = 57643
const UPDATE = 57644
const UPSERT = 57645
const USE = 57646
const USER = 57647
const USERS = 57648
const USING = 57649
const UUID = 57650
const VALID = 57651
const VALIDATE = 57652
const VALUE = 57653
const VALUES = 57654
const VARCHAR = 57655
const VARIADIC = 57656
const VIEW = 57657
const VARYING = 57658
const WHEN = 57659
const WHERE = 57660
const WINDOW = 57661
const WITH = 57662
const WITHIN = 57663
const WITHOUT = 57664
const WRITE = 57665
const YEAR = 57666
const ZONE = 57667
const NOT_LA = 57668
const WITH_LA = 57669
const AS_LA = 57670
const POSTFIXOP = 57671
const UMINUS = 57672

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5655

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 36,
	349, 36,
	-2, 462,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 435,
	192, 435,
	236, 435,
	345, 435,
	347, 435,
	349, 435,
	-2, 445,
	-1, 76,
	1, 438,
	192, 438,
	236, 438,
	345, 438,
	347, 438,
	349, 438,
	-2, 444,
	-1, 85,
	1, 36,
	349, 36,
	-2, 462,
	-1, 476,
	1, 186,
	349, 186,
	-2, 1040,
	-1, 547,
	110, 472,
	165, 472,
	190, 472,
	-2, 441,
	-1, 550,
	110, 471,
	165, 471,
	190, 471,
	-2, 439,
	-1, 630,
	346, 967,
	-2, 960,
	-1, 631,
	346, 968,
	-2, 961,
	-1, 637,
	5, 636,
	346, 636,
	-2, 1161,
	-1, 661,
	5, 597,
	-2, 1135,
	-1, 662,
	5, 630,
	346, 630,
	-2, 1137,
	-1, 663,
	5, 605,
	-2, 1138,
	-1, 664,
	5, 604,
	-2, 1139,
	-1, 665,
	5, 630,
	346, 630,
	-2, 1142,
	-1, 666,
	5, 630,
	346, 630,
	-2, 1143,
	-1, 667,
	5, 631,
	-2, 1146,
	-1, 668,
	5, 591,
	-2, 1147,
	-1, 669,
	5, 591,
	-2, 1148,
	-1, 670,
	5, 612,
	-2, 1152,
	-1, 671,
	5, 592,
	-2, 1157,
	-1, 672,
	5, 593,
	-2, 1158,
	-1, 673,
	5, 594,
	-2, 1159,
	-1, 674,
	5, 595,
	-2, 1160,
	-1, 675,
	5, 591,
	-2, 1165,
	-1, 676,
	5, 598,
	-2, 1170,
	-1, 677,
	5, 596,
	-2, 1173,
	-1, 678,
	5, 628,
	346, 628,
	-2, 1175,
	-1, 679,
	5, 632,
	-2, 1178,
	-1, 680,
	5, 634,
	-2, 1179,
	-1, 681,
	5, 627,
	346, 627,
	-2, 1184,
	-1, 799,
	110, 471,
	165, 471,
	190, 471,
	-2, 442,
	-1, 908,
	101, 445,
	110, 445,
	146, 445,
	165, 445,
	190, 445,
	196, 445,
	299, 445,
	-2, 755,
	-1, 917,
	346, 944,
	-2, 932,
	-1, 1191,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 671,
	-1, 1192,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 672,
	-1, 1193,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 673,
	-1, 1197,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 677,
	-1, 1198,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 678,
	-1, 1199,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 679,
	-1, 1202,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 684,
	-1, 1208,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 686,
	-1, 1210,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 690,
	-1, 1211,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 691,
	-1, 1212,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 692,
	-1, 1213,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 693,
	-1, 1239,
	201, 826,
	-2, 829,
	-1, 1275,
	119, 866,
	346, 967,
	-2, 960,
	-1, 1276,
	119, 867,
	-2, 1131,
	-1, 1277,
	119, 868,
	-2, 1039,
	-1, 1278,
	119, 869,
	-2, 1003,
	-1, 1279,
	119, 870,
	-2, 1020,
	-1, 1280,
	119, 871,
	-2, 1038,
	-1, 1281,
	119, 872,
	-2, 1090,
	-1, 1462,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 685,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 687,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 688,
	-1, 1486,
	201, 825,
	-2, 828,
	-1, 1651,
	101, 445,
	110, 445,
	146, 445,
	165, 445,
	190, 445,
	196, 445,
	299, 445,
	-2, 526,
	-1, 1693,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 689,
	-1, 1698,
	149, 0,
	-2, 705,
	-1, 1708,
	201, 827,
	-2, 830,
	-1, 1750,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 732,
	-1, 1751,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 733,
	-1, 1752,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 734,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 738,
	-1, 1757,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 739,
	-1, 1758,
	13, 0,
	14, 0,
	15, 0,
	329, 0,
	330, 0,
	331, 0,
	-2, 740,
	-1, 1840,
	1, 527,
	70, 527,
	101, 527,
	110, 527,
	120, 527,
	124, 527,
	126, 527,
	139, 527,
	146, 527,
	153, 527,
	162, 527,
	165, 527,
	177, 527,
	190, 527,
	192, 527,
	196, 527,
	236, 527,
	238, 527,
	299, 527,
	307, 527,
	318, 527,
	319, 527,
	328, 527,
	345, 527,
	347, 527,
	349, 527,
	350, 527,
	-2, 526,
	-1, 1890,
	149, 0,
	-2, 706,
	-1, 1893,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 709,
	-1, 1894,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 711,
	-1, 2010,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 710,
	-1, 2011,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	133, 0,
	134, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 712,
	-1, 2018,
	149, 0,
	-2, 741,
	-1, 2085,
	149, 0,
	-2, 742,
	-1, 2166,
	36, 0,
	133, 0,
	164, 0,
	259, 0,
	326, 0,
	332, 0,
	-2, 1134,
}

const sqlPrivate = 57344

const sqlLast = 32093

var sqlAct = [...]int{

	631, 1796, 2194, 2149, 2165, 1982, 2114, 2150, 1328, 2151,
	1091, 1836, 1727, 2164, 2008, 2042, 1848, 551, 1320, 1939,
	1963, 1403, 1835, 1806, 1374, 1862, 572, 1649, 1950, 621,
	1646, 692, 1287, 1623, 607, 60, 1664, 629, 98, 98,
	1944, 98, 1373, 1552, 857, 1578, 986, 1814, 1097, 628,
	1625, 1823, 343, 98, 98, 98, 1392, 1378, 1093, 1637,
	98, 829, 1377, 98, 832, 1329, 819, 1551, 1410, 1411,
	1170, 98, 529, 1458, 538, 1632, 327, 24, 1663, 1133,
	98, 98, 1497, 1416, 98, 1165, 1142, 98, 98, 98,
	98, 1262, 913, 98, 98, 1237, 1051, 1117, 558, 75,
	1366, 1399, 737, 1301, 958, 1413, 1247, 325, 601, 1225,
	820, 834, 1222, 532, 556, 736, 1322, 858, 587, 713,
	1256, 533, 702, 904, 1272, 1381, 600, 704, 947, 1122,
	705, 561, 802, 461, 475, 803, 943, 1049, 341, 801,
	76, 90, 524, 471, 623, 450, 962, 77, 782, 75,
	94, 559, 1863, 807, 698, 783, 464, 1485, 2053, 971,
	550, 2054, 24, 1644, 2192, 1321, 2174, 854, 971, 1861,
	522, 2161, 555, 971, 1353, 555, 1647, 859, 860, 340,
	305, 1259, 2160, 2157, 75, 1353, 854, 1304, 606, 569,
	2147, 1166, 575, 854, 1325, 582, 1489, 1589, 859, 860,
	862, 1490, 1590, 848, 515, 987, 969, 2144, 859, 860,
	854, 2133, 1353, 1635, 1347, 578, 548, 2111, 1124, 2101,
	854, 862, 472, 547, 861, 74, 1260, 2095, 1169, 308,
	1861, 862, 563, 2091, 2087, 2079, 854, 1347, 2078, 2049,
	2036, 2033, 2050, 1861, 854, 861, 2031, 2012, 1635, 1861,
	1347, 876, 49, 1993, 99, 861, 854, 1992, 1166, 340,
	1861, 50, 1123, 1966, 1917, 340, 1353, 1353, 1895, 1261,
	1258, 1353, 570, 1609, 1892, 577, 580, 1347, 570, 1882,
	1169, 867, 1353, 51, 859, 860, 1763, 879, 880, 881,
	889, 890, 891, 1881, 1860, 1790, 1353, 1861, 1319, 1705,
	882, 1785, 867, 1131, 1319, 74, 344, 862, 81, 1613,
	893, 74, 867, 1702, 1612, 98, 1353, 854, 854, 1402,
	1364, 98, 98, 98, 98, 98, 1353, 538, 539, 1496,
	1569, 861, 49, 1570, 1241, 815, 83, 876, 49, 1567,
	1566, 50, 1353, 1353, 1263, 972, 1041, 50, 1565, 710,
	1486, 1353, 585, 1353, 972, 81, 859, 860, 877, 972,
	1488, 1407, 556, 51, 854, 1353, 725, 1357, 877, 51,
	1353, 1352, 84, 1346, 1353, 1318, 1347, 568, 1319, 862,
	79, 1130, 980, 83, 1129, 981, 1864, 80, 867, 535,
	85, 591, 1958, 1650, 1063, 751, 2184, 2163, 2156, 2119,
	81, 2082, 2034, 861, 81, 1925, 78, 886, 894, 1922,
	1918, 1910, 1909, 814, 64, 1908, 1904, 1903, 1902, 84,
	699, 1257, 1901, 892, 1840, 1813, 1794, 79, 83, 1778,
	921, 878, 83, 1589, 80, 1773, 1772, 1771, 884, 1713,
	825, 878, 1615, 1351, 877, 1611, 98, 1648, 714, 1123,
	1574, 1571, 1559, 1324, 708, 1550, 1521, 707, 707, 1518,
	867, 975, 691, 98, 84, 1517, 98, 98, 84, 883,
	970, 1515, 1233, 1502, 1501, 1089, 79, 538, 1420, 1269,
	1522, 1523, 1268, 80, 81, 538, 814, 914, 813, 78,
	81, 1096, 1729, 2136, 64, 1522, 1523, 689, 78, 2098,
	64, 2077, 78, 570, 863, 864, 865, 866, 868, 869,
	580, 2076, 83, 914, 2075, 98, 877, 878, 83, 2067,
	2065, 98, 872, 870, 871, 863, 864, 865, 866, 868,
	869, 2057, 2045, 887, 871, 863, 864, 865, 866, 868,
	869, 2029, 98, 98, 98, 2020, 98, 1979, 84, 1968,
	1933, 1915, 1887, 1867, 84, 1828, 79, 755, 1804, 1924,
	1802, 98, 79, 80, 1801, 800, 1799, 1522, 1523, 80,
	1792, 1697, 98, 747, 1672, 1671, 1549, 1234, 1511, 1510,
	1507, 539, 78, 1482, 1528, 538, 98, 1477, 326, 878,
	1227, 1449, 343, 538, 1447, 824, 859, 860, 1434, 1528,
	885, 1433, 754, 873, 874, 875, 888, 1406, 872, 870,
	871, 863, 864, 865, 866, 868, 869, 948, 951, 862,
	1599, 1311, 730, 732, 1919, 735, 788, 682, 1267, 1090,
	799, 573, 823, 955, 941, 940, 939, 938, 937, 936,
	1538, 556, 935, 861, 934, 933, 932, 931, 786, 930,
	929, 928, 1434, 927, 926, 925, 918, 755, 784, 907,
	78, 818, 734, 721, 719, 755, 2175, 2052, 1955, 1930,
	1929, 1528, 1897, 1829, 1598, 905, 792, 591, 795, 345,
	872, 870, 871, 863, 864, 865, 866, 868, 869, 1522,
	1523, 98, 825, 2081, 743, 745, 98, 98, 98, 548,
	98, 540, 852, 2055, 1626, 1928, 547, 810, 811, 570,
	1591, 1166, 816, 1539, 1650, 1573, 953, 98, 98, 536,
	1398, 954, 1572, 960, 690, 98, 1461, 774, 1397, 98,
	855, 539, 1956, 746, 98, 842, 853, 744, 1047, 539,
	923, 1094, 1459, 1945, 538, 538, 1321, 1730, 1248, 944,
	1493, 778, 343, 1585, 1659, 840, 2122, 835, 98, 836,
	826, 98, 2090, 98, 98, 98, 98, 98, 98, 917,
	1259, 920, 841, 2182, 98, 2181, 1875, 1356, 508, 98,
	98, 1078, 514, 509, 311, 513, 98, 772, 1606, 545,
	779, 771, 2003, 910, 2002, 2001, 2000, 98, 949, 1687,
	1686, 699, 945, 946, 952, 1656, 1095, 1524, 1525, 1526,
	1527, 1529, 1530, 1655, 320, 1260, 98, 1506, 1505, 98,
	1504, 1503, 982, 88, 1526, 1527, 1529, 1530, 98, 825,
	1464, 1135, 837, 1886, 312, 554, 98, 1683, 1354, 539,
	98, 1209, 1163, 1121, 964, 984, 344, 539, 98, 98,
	961, 75, 98, 1162, 1159, 98, 1100, 785, 1261, 1258,
	1065, 584, 343, 1315, 743, 624, 1034, 1314, 1048, 321,
	1036, 1035, 1180, 1393, 1086, 1085, 521, 1038, 87, 959,
	553, 2089, 1052, 845, 570, 963, 963, 1690, 1224, 1059,
	1064, 1058, 1067, 1136, 1524, 1525, 1526, 1527, 1529, 1530,
	1780, 1984, 717, 843, 1072, 577, 580, 744, 1791, 1032,
	1575, 1224, 974, 956, 1066, 977, 1147, 1149, 1154, 1087,
	844, 1157, 1040, 733, 2134, 770, 1135, 775, 869, 965,
	555, 1263, 1134, 1263, 684, 1579, 1104, 2188, 1103, 835,
	1102, 836, 1454, 1168, 768, 1152, 1451, 1119, 548, 960,
	850, 548, 548, 1127, 540, 1113, 1039, 1164, 1114, 1115,
	835, 1139, 836, 2070, 1522, 1523, 98, 849, 98, 98,
	1248, 98, 859, 860, 98, 1160, 98, 98, 1220, 98,
	98, 769, 538, 1069, 541, 2181, 1073, 1074, 1075, 1076,
	1077, 2153, 776, 1218, 1088, 862, 314, 313, 539, 539,
	1179, 1082, 1083, 1607, 1341, 942, 344, 1245, 546, 322,
	1257, 859, 860, 542, 837, 1084, 1128, 1537, 86, 861,
	2016, 1530, 516, 543, 1605, 1143, 306, 1235, 570, 1232,
	2197, 1388, 2130, 552, 862, 837, 580, 758, 324, 1323,
	570, 1323, 716, 2030, 1231, 777, 838, 846, 323, 1229,
	1360, 902, 1674, 2203, 594, 1282, 2131, 89, 861, 1214,
	1681, 1362, 1723, 845, 343, 1171, 1178, 1215, 1528, 1216,
	1400, 1401, 98, 1221, 759, 2154, 867, 757, 1583, 75,
	971, 1327, 1363, 843, 75, 98, 98, 98, 1342, 1146,
	98, 98, 307, 1345, 1361, 1238, 1337, 98, 1336, 517,
	844, 1343, 1242, 714, 540, 1985, 1250, 1339, 1474, 1340,
	1338, 707, 540, 707, 1350, 867, 344, 1274, 1274, 1285,
	1509, 1296, 1579, 1472, 1538, 98, 343, 1308, 1309, 1310,
	1466, 2155, 877, 98, 98, 98, 448, 1263, 1839, 98,
	1636, 1408, 98, 949, 1824, 952, 1419, 1445, 98, 98,
	98, 98, 98, 1223, 1332, 1132, 740, 1358, 1720, 580,
	98, 2195, 580, 98, 98, 946, 945, 315, 833, 2187,
	538, 877, 555, 1691, 1811, 2152, 2180, 2178, 75, 1217,
	1938, 1390, 762, 451, 728, 1145, 1219, 1368, 724, 1469,
	1640, 1421, 806, 1995, 519, 1372, 1427, 1539, 1457, 1470,
	1994, 1721, 1365, 1475, 456, 878, 859, 860, 1640, 1643,
	452, 1675, 540, 1370, 2208, 1977, 2196, 1444, 2062, 345,
	540, 741, 1396, 1638, 1658, 742, 1046, 1643, 838, 862,
	1446, 1874, 1641, 1448, 1409, 453, 539, 2198, 1873, 2204,
	1759, 1822, 755, 1422, 878, 1430, 1426, 1639, 1856, 838,
	1641, 805, 1913, 861, 455, 1478, 1479, 1391, 1101, 1092,
	1719, 2115, 1952, 556, 1418, 2186, 972, 1044, 1495, 1871,
	1109, 1144, 518, 1369, 580, 1371, 1263, 805, 570, 1045,
	1081, 1857, 1042, 1807, 1206, 1964, 1230, 1460, 1533, 1531,
	1532, 1524, 1525, 1526, 1527, 1529, 1530, 870, 871, 863,
	864, 865, 866, 868, 869, 1953, 804, 1940, 1642, 1471,
	867, 2207, 683, 1414, 1978, 1436, 1473, 1467, 344, 1465,
	98, 1423, 1545, 1546, 1547, 98, 1642, 98, 556, 1760,
	1435, 806, 804, 1872, 98, 1761, 1110, 1481, 863, 864,
	865, 866, 868, 869, 1819, 98, 1431, 1914, 1965, 459,
	1818, 458, 1453, 1492, 316, 98, 98, 740, 697, 696,
	556, 553, 454, 796, 1870, 538, 1797, 1931, 1581, 1456,
	1975, 540, 540, 1587, 1633, 1815, 1852, 1951, 1853, 345,
	344, 1204, 1207, 98, 1266, 98, 2019, 98, 1912, 616,
	1553, 98, 1976, 1696, 317, 98, 1689, 1576, 1516, 1476,
	1355, 1317, 1556, 1557, 1558, 1158, 1155, 781, 1855, 780,
	773, 767, 1203, 766, 765, 1480, 457, 1858, 98, 764,
	763, 760, 1483, 318, 539, 319, 695, 95, 95, 1584,
	309, 1614, 592, 1616, 1554, 1079, 1071, 924, 1592, 752,
	1499, 1500, 442, 443, 444, 1265, 2148, 2112, 1845, 463,
	1596, 1679, 477, 556, 1677, 1602, 1603, 1610, 1657, 1604,
	463, 1608, 1617, 1622, 1670, 1394, 1620, 1386, 636, 562,
	562, 1344, 1669, 309, 979, 978, 309, 309, 581, 309,
	1548, 976, 95, 588, 1668, 1522, 1523, 1653, 973, 345,
	968, 1561, 686, 851, 1854, 1654, 1634, 1628, 1694, 1695,
	1630, 1652, 847, 839, 1710, 75, 1624, 1205, 1577, 694,
	98, 75, 693, 959, 1631, 2024, 1715, 1716, 1717, 1661,
	1645, 1618, 959, 2182, 1699, 1682, 685, 3, 808, 1688,
	566, 91, 1404, 570, 1054, 865, 866, 868, 869, 332,
	34, 338, 29, 2026, 1593, 1135, 1594, 1595, 337, 28,
	1135, 1150, 1151, 1597, 336, 27, 1148, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1784, 1762, 2072, 1621,
	1864, 1706, 1431, 1709, 1733, 993, 753, 1736, 2084, 1528,
	98, 98, 1405, 1738, 1731, 1766, 1722, 1724, 1725, 809,
	1816, 567, 812, 334, 26, 589, 1414, 1786, 590, 540,
	98, 1156, 1062, 574, 98, 1153, 98, 331, 18, 539,
	1767, 2102, 447, 98, 586, 34, 538, 29, 1783, 1803,
	1936, 335, 13, 1389, 28, 1684, 98, 1685, 1385, 98,
	27, 339, 12, 1326, 1120, 1538, 1781, 1678, 343, 1680,
	98, 1037, 985, 1789, 1020, 1787, 98, 98, 98, 1788,
	1349, 1444, 2201, 2206, 1800, 329, 11, 507, 333, 9,
	1703, 328, 8, 98, 1830, 1808, 1798, 2146, 98, 2105,
	98, 460, 98, 98, 98, 1961, 1810, 98, 98, 26,
	538, 345, 1865, 1825, 1826, 451, 1793, 1869, 1809, 1821,
	1779, 1670, 1841, 18, 309, 1817, 1726, 633, 1820, 1669,
	700, 309, 477, 477, 588, 1844, 456, 13, 1539, 1171,
	1734, 1668, 452, 859, 860, 993, 993, 12, 1171, 1739,
	98, 790, 330, 4, 1885, 510, 511, 1764, 859, 860,
	1522, 1523, 859, 860, 1891, 1600, 862, 453, 1774, 1568,
	1868, 11, 1316, 345, 9, 790, 789, 8, 1313, 1312,
	1255, 1770, 755, 911, 1057, 1056, 455, 535, 530, 791,
	861, 1899, 2128, 2009, 1718, 1619, 921, 919, 1332, 1414,
	1911, 520, 1983, 449, 1070, 861, 1831, 761, 1957, 1827,
	2129, 1905, 1508, 2041, 1020, 1020, 2015, 540, 1264, 922,
	47, 1666, 98, 98, 610, 1846, 1660, 1380, 1379, 538,
	1531, 1532, 1524, 1525, 1526, 1527, 1529, 1530, 4, 98,
	98, 346, 1055, 98, 1414, 632, 1934, 1414, 523, 1670,
	1273, 98, 1927, 1172, 1670, 722, 1834, 1669, 98, 687,
	634, 990, 1669, 635, 991, 1935, 98, 1060, 98, 1668,
	343, 98, 729, 1960, 1668, 477, 477, 1959, 1941, 98,
	950, 1112, 1926, 622, 988, 343, 712, 1943, 1969, 1330,
	1878, 1228, 1246, 1491, 454, 915, 1884, 602, 1932, 614,
	539, 1942, 1970, 1937, 1987, 613, 1243, 1989, 1948, 1949,
	1980, 1670, 1954, 718, 1962, 960, 474, 63, 1986, 1669,
	470, 1582, 344, 1971, 463, 1923, 1108, 1026, 1395, 1105,
	309, 1668, 1676, 544, 1519, 720, 2005, 1294, 2014, 1286,
	1283, 2004, 787, 828, 903, 98, 1061, 1331, 457, 750,
	1588, 477, 794, 477, 1348, 797, 817, 1116, 565, 98,
	564, 1375, 538, 748, 539, 2018, 98, 1043, 1359, 2025,
	562, 896, 895, 512, 98, 2027, 2064, 739, 738, 1387,
	98, 309, 2021, 1670, 1429, 2202, 2071, 1673, 2121, 98,
	98, 1669, 82, 2080, 2007, 95, 98, 2040, 2044, 1455,
	35, 2059, 2051, 1668, 2066, 33, 2048, 1288, 1973, 2060,
	30, 2038, 540, 2058, 2056, 25, 23, 22, 21, 32,
	20, 98, 98, 1988, 1947, 31, 993, 1414, 1414, 2069,
	19, 1414, 2032, 2035, 2039, 17, 2068, 16, 15, 14,
	10, 46, 45, 2047, 2061, 44, 43, 98, 42, 41,
	7, 98, 1019, 2083, 6, 5, 2096, 2094, 2, 538,
	1, 0, 2097, 0, 0, 0, 98, 1981, 0, 0,
	0, 0, 2085, 0, 0, 1991, 343, 98, 98, 0,
	0, 0, 0, 539, 2100, 556, 98, 2086, 98, 0,
	2103, 98, 0, 343, 2106, 1020, 2104, 0, 0, 2109,
	309, 1997, 2110, 1998, 1999, 309, 309, 309, 0, 966,
	2118, 0, 2117, 2127, 0, 0, 2137, 536, 531, 2139,
	0, 2138, 98, 0, 344, 98, 309, 309, 0, 0,
	2135, 2099, 0, 0, 95, 2143, 2145, 2142, 95, 344,
	2141, 0, 0, 477, 0, 0, 0, 2037, 1670, 0,
	0, 2158, 0, 0, 0, 98, 1669, 98, 0, 0,
	2173, 1636, 1414, 2171, 2162, 2170, 0, 477, 1668, 98,
	477, 0, 95, 477, 477, 477, 477, 477, 0, 2179,
	2177, 2172, 0, 1080, 0, 2183, 0, 0, 477, 477,
	0, 2185, 1019, 1019, 0, 463, 0, 2140, 0, 0,
	2193, 1522, 1523, 0, 0, 2199, 1099, 2200, 992, 0,
	2191, 1640, 0, 0, 2107, 2205, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 2209, 0, 588, 0,
	1643, 2123, 1022, 993, 0, 0, 0, 309, 0, 0,
	0, 0, 1033, 0, 1638, 1140, 0, 0, 0, 309,
	1522, 1523, 0, 1641, 0, 0, 0, 309, 1161, 0,
	0, 309, 993, 0, 1167, 0, 1021, 1856, 1639, 0,
	1849, 0, 0, 540, 0, 0, 0, 0, 1847, 2120,
	0, 0, 1851, 2124, 2125, 2126, 0, 0, 0, 0,
	0, 0, 2132, 0, 0, 345, 0, 1288, 1288, 0,
	1857, 0, 1020, 0, 0, 1528, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 1850, 0, 0, 0, 0, 0, 0, 1642,
	344, 1020, 0, 0, 0, 0, 0, 540, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 344, 992, 992,
	0, 0, 0, 0, 1528, 0, 0, 0, 0, 0,
	0, 1538, 0, 993, 1288, 1288, 1288, 0, 0, 0,
	0, 0, 1022, 1022, 0, 309, 0, 1334, 1335, 0,
	309, 0, 0, 309, 0, 477, 477, 0, 477, 588,
	0, 0, 0, 0, 0, 1852, 0, 1853, 0, 993,
	993, 0, 0, 0, 0, 0, 1021, 1021, 993, 993,
	1538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1855, 0, 0,
	0, 0, 1020, 0, 1539, 0, 1858, 0, 0, 0,
	0, 993, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1020, 1020,
	0, 0, 0, 1019, 0, 0, 0, 1020, 1020, 0,
	0, 1367, 0, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 309, 309, 309, 345, 0, 309,
	1376, 0, 0, 0, 0, 0, 588, 0, 0, 0,
	1020, 0, 345, 1854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1533, 1531, 1532, 1524, 1525,
	1526, 1527, 1529, 1530, 309, 0, 0, 0, 0, 0,
	1288, 1288, 309, 1424, 1425, 0, 0, 0, 1140, 593,
	688, 1432, 0, 0, 0, 0, 0, 1437, 1438, 1440,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 1452, 309, 0, 0, 1532, 1524, 1525, 1526,
	1527, 1529, 1530, 993, 611, 61, 0, 989, 989, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
	1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 0, 1288,
	0, 0, 0, 0, 859, 860, 0, 0, 0, 992,
	889, 890, 891, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 862, 0, 0,
	893, 0, 1020, 1022, 0, 0, 0, 0, 0, 0,
	549, 0, 0, 557, 0, 0, 0, 0, 0, 0,
	61, 861, 0, 0, 0, 0, 0, 876, 0, 0,
	1019, 0, 0, 0, 0, 0, 540, 1021, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 726, 727, 345, 0, 0, 0, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 0, 0, 0, 867, 309,
	0, 0, 0, 0, 309, 0, 1586, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 886, 894, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 1367, 1367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 1099, 0, 477, 0, 0, 0,
	309, 993, 0, 0, 1627, 0, 0, 821, 821, 0,
	1019, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	1020, 0, 0, 0, 0, 0, 992, 0, 897, 898,
	899, 900, 901, 0, 1665, 0, 1019, 1019, 909, 0,
	0, 0, 0, 0, 0, 1019, 1019, 878, 916, 0,
	1022, 0, 0, 0, 0, 992, 0, 0, 989, 0,
	1020, 0, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 1022,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 993, 0, 0, 0,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 1728,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 0, 0, 888, 0, 872, 870,
	871, 863, 864, 865, 866, 868, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 1020, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 0, 0,
	1022, 0, 0, 0, 0, 0, 0, 0, 0, 309,
	309, 0, 992, 992, 0, 0, 0, 0, 0, 0,
	0, 992, 992, 0, 0, 0, 0, 0, 0, 1795,
	0, 0, 0, 1140, 1021, 1099, 1022, 1022, 0, 0,
	1019, 0, 1805, 0, 0, 1022, 1022, 0, 0, 0,
	0, 0, 0, 0, 992, 309, 0, 1106, 309, 1111,
	0, 0, 0, 0, 0, 1118, 0, 0, 0, 1838,
	1021, 1021, 0, 0, 0, 1842, 1843, 1140, 1022, 1021,
	1021, 0, 0, 0, 0, 989, 0, 0, 0, 0,
	0, 1665, 588, 0, 0, 0, 0, 1876, 0, 1877,
	0, 309, 1879, 1880, 1288, 0, 1883, 309, 0, 0,
	0, 0, 1021, 0, 989, 0, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 0, 1208,
	0, 1210, 1211, 1212, 1213, 0, 0, 0, 0, 1906,
	0, 0, 0, 549, 0, 0, 0, 0, 1236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 1271, 0, 0, 1284, 0, 1295, 1297, 1302, 1305,
	1306, 1307, 0, 0, 0, 0, 992, 0, 906, 0,
	908, 0, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 989, 0, 0, 1019, 1665,
	1022, 588, 1376, 0, 1665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 309, 309,
	0, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	1838, 989, 989, 0, 1021, 0, 0, 1967, 1019, 0,
	989, 989, 0, 0, 0, 1140, 0, 1972, 0, 0,
	1974, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 1665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 989, 0, 859, 860, 0, 879, 880,
	881, 889, 890, 891, 0, 0, 2006, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 862, 0,
	0, 893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 0, 588, 0, 0, 61, 876, 0,
	0, 0, 0, 1665, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 1019, 0, 2043, 0, 0, 0, 0,
	0, 0, 0, 309, 992, 0, 821, 0, 0, 1838,
	0, 0, 830, 0, 0, 0, 0, 0, 588, 1838,
	0, 0, 0, 0, 0, 1099, 0, 0, 1022, 867,
	0, 0, 549, 0, 0, 549, 549, 0, 0, 0,
	0, 0, 0, 0, 992, 0, 0, 0, 886, 894,
	2073, 2074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1021, 0, 892, 989, 61, 0, 1022, 61,
	0, 0, 0, 0, 0, 0, 2092, 0, 0, 884,
	2093, 0, 0, 0, 0, 877, 1462, 1463, 0, 0,
	0, 0, 1468, 0, 0, 588, 0, 0, 0, 0,
	0, 0, 1021, 0, 0, 0, 1838, 588, 0, 0,
	883, 0, 0, 0, 0, 2116, 0, 588, 0, 1226,
	309, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1665, 992,
	1512, 2043, 0, 0, 1838, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 887, 909, 0, 0, 0, 0,
	0, 1302, 1302, 1302, 309, 0, 588, 61, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 2176, 0,
	0, 0, 0, 0, 1580, 61, 0, 1021, 0, 0,
	61, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 862, 0, 1601, 893, 0, 0,
	0, 885, 0, 989, 873, 874, 875, 888, 0, 872,
	870, 871, 863, 864, 865, 866, 868, 869, 861, 0,
	0, 0, 0, 0, 876, 1564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1629, 0, 0, 989, 0, 1118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 1662, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 1692, 0, 0, 1693, 0, 1415,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 1698,
	0, 0, 0, 0, 0, 884, 0, 0, 1707, 0,
	0, 877, 0, 0, 0, 0, 1711, 0, 61, 1601,
	0, 61, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 1735,
	0, 859, 860, 1737, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 0, 0, 893, 0, 0,
	0, 0, 1226, 0, 0, 0, 1768, 1769, 0, 0,
	0, 0, 0, 0, 878, 1775, 1776, 1777, 861, 0,
	0, 0, 908, 0, 876, 0, 0, 0, 0, 0,
	887, 0, 821, 859, 860, 0, 879, 880, 881, 889,
	890, 891, 0, 0, 830, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	861, 0, 0, 0, 0, 0, 876, 908, 0, 0,
	0, 0, 0, 0, 886, 894, 0, 885, 0, 0,
	873, 874, 875, 888, 0, 872, 870, 871, 863, 864,
	865, 866, 868, 869, 0, 0, 0, 0, 0, 557,
	1866, 1563, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1890,
	0, 0, 0, 1893, 1894, 0, 886, 894, 1896, 0,
	0, 0, 0, 0, 0, 1898, 0, 1900, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 1907, 61, 0, 0, 884, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 878, 0, 0, 61, 0, 0,
	1522, 1523, 1651, 1540, 1541, 1542, 1916, 0, 883, 0,
	887, 0, 0, 0, 0, 0, 0, 859, 860, 0,
	879, 880, 881, 889, 890, 891, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	862, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 0, 878, 0, 1946, 0,
	0, 0, 0, 0, 861, 0, 0, 0, 0, 0,
	876, 0, 887, 0, 0, 0, 0, 885, 0, 0,
	873, 874, 875, 888, 0, 872, 870, 871, 863, 864,
	865, 866, 868, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1996, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2010, 2011, 0, 0, 0, 0, 0, 0, 885,
	886, 894, 873, 874, 875, 888, 0, 872, 870, 871,
	863, 864, 865, 866, 868, 869, 892, 0, 0, 0,
	1538, 0, 2023, 1562, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 1415, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2046, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 37, 65, 0, 0,
	1415, 0, 2063, 1415, 0, 0, 0, 0, 0, 39,
	0, 0, 0, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 40,
	878, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	54, 0, 830, 0, 48, 0, 0, 0, 49, 0,
	0, 68, 0, 0, 0, 53, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1534,
	1535, 1536, 0, 0, 1533, 1531, 1532, 1524, 1525, 1526,
	1527, 1529, 1530, 885, 0, 0, 873, 874, 875, 888,
	0, 872, 870, 871, 863, 864, 865, 866, 868, 869,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 2159, 0, 0, 0, 0,
	61, 0, 0, 2169, 2169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 1415, 1415, 0, 0, 1415, 0, 2169,
	0, 0, 0, 70, 71, 38, 0, 57, 0, 58,
	0, 69, 0, 0, 0, 0, 59, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	64, 0, 0, 0, 2169, 0, 0, 0, 0, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 2028, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 361, 102, 362, 363, 364, 365, 253,
	366, 367, 368, 369, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 370, 107, 260, 261, 108, 109,
	371, 372, 262, 263, 264, 373, 110, 265, 374, 347,
	375, 111, 112, 113, 908, 114, 376, 115, 116, 117,
	377, 348, 118, 119, 378, 379, 380, 381, 382, 383,
	120, 121, 310, 122, 266, 123, 267, 268, 384, 124,
	385, 125, 386, 126, 387, 388, 127, 128, 389, 129,
	390, 0, 391, 269, 130, 131, 132, 270, 271, 392,
	393, 394, 133, 134, 272, 0, 135, 395, 136, 396,
	397, 349, 398, 137, 273, 399, 274, 400, 138, 139,
	140, 141, 275, 276, 351, 401, 145, 402, 142, 403,
	350, 143, 277, 144, 278, 279, 280, 404, 281, 405,
	352, 146, 147, 148, 353, 149, 150, 151, 406, 153,
	152, 407, 282, 354, 154, 355, 408, 155, 409, 410,
	156, 0, 157, 158, 159, 161, 283, 160, 356, 162,
	163, 165, 164, 411, 412, 413, 284, 166, 285, 167,
	168, 414, 169, 415, 416, 170, 417, 418, 171, 286,
	357, 172, 358, 287, 173, 174, 175, 176, 177, 419,
	178, 288, 179, 289, 180, 420, 181, 182, 183, 184,
	185, 290, 186, 187, 421, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 422, 200, 359,
	201, 202, 291, 203, 0, 207, 208, 209, 210, 423,
	212, 292, 211, 213, 214, 424, 215, 204, 205, 216,
	360, 217, 293, 294, 218, 425, 224, 219, 220, 206,
	221, 223, 295, 222, 296, 426, 225, 427, 226, 227,
	228, 229, 230, 231, 232, 428, 297, 298, 299, 429,
	430, 233, 234, 300, 301, 431, 235, 236, 237, 238,
	432, 433, 239, 240, 241, 242, 434, 243, 435, 302,
	244, 245, 246, 303, 304, 436, 437, 247, 438, 439,
	440, 441, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 0, 0, 1832, 0, 0, 0, 0,
	0, 0, 0, 1833, 100, 101, 361, 102, 362, 363,
	364, 365, 253, 366, 367, 368, 369, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 370, 107, 260,
	261, 108, 109, 371, 372, 262, 263, 264, 373, 110,
	265, 374, 347, 375, 111, 112, 113, 0, 114, 376,
	115, 116, 117, 377, 348, 118, 119, 378, 379, 380,
	381, 382, 383, 120, 121, 310, 122, 266, 123, 267,
	268, 384, 124, 385, 125, 386, 126, 387, 388, 127,
	128, 389, 129, 390, 0, 391, 269, 130, 131, 132,
	270, 271, 392, 393, 394, 133, 134, 272, 0, 135,
	395, 136, 396, 397, 349, 398, 137, 273, 399, 274,
	400, 138, 139, 140, 141, 275, 276, 351, 401, 145,
	402, 142, 403, 350, 143, 277, 144, 278, 279, 280,
	404, 281, 405, 352, 146, 147, 148, 353, 149, 150,
	151, 406, 153, 152, 407, 282, 354, 154, 355, 408,
	155, 409, 410, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 411, 412, 413, 284,
	166, 285, 167, 168, 414, 169, 415, 416, 170, 417,
	418, 171, 286, 357, 172, 358, 287, 173, 174, 175,
	176, 177, 419, 178, 288, 179, 289, 180, 420, 181,
	182, 183, 184, 185, 290, 186, 187, 421, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	422, 200, 359, 201, 202, 291, 203, 0, 207, 208,
	209, 210, 423, 212, 292, 211, 213, 214, 424, 215,
	204, 205, 216, 360, 217, 293, 294, 218, 425, 224,
	219, 220, 206, 221, 223, 295, 222, 296, 426, 225,
	427, 226, 227, 228, 229, 230, 231, 232, 428, 297,
	298, 299, 429, 430, 233, 234, 300, 301, 431, 235,
	236, 237, 238, 432, 433, 239, 240, 241, 242, 434,
	243, 435, 302, 244, 245, 246, 303, 304, 436, 437,
	247, 438, 439, 440, 441, 248, 249, 250, 251, 252,
	0, 0, 0, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2108, 100,
	101, 361, 102, 362, 363, 364, 365, 253, 366, 367,
	368, 369, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 370, 107, 260, 261, 108, 109, 371, 372,
	262, 263, 264, 373, 110, 265, 374, 347, 375, 111,
	112, 113, 0, 114, 376, 115, 116, 117, 377, 348,
	118, 119, 378, 379, 380, 381, 382, 383, 120, 121,
	310, 122, 266, 123, 267, 268, 384, 124, 385, 125,
	386, 126, 387, 388, 127, 128, 389, 129, 390, 0,
	391, 269, 130, 131, 132, 270, 271, 392, 393, 394,
	133, 134, 272, 0, 135, 395, 136, 396, 397, 349,
	398, 137, 273, 399, 274, 400, 138, 139, 140, 141,
	275, 276, 351, 401, 145, 402, 142, 403, 350, 143,
	277, 144, 278, 279, 280, 404, 281, 405, 352, 146,
	147, 148, 353, 149, 150, 151, 406, 153, 152, 407,
	282, 354, 154, 355, 408, 155, 409, 410, 156, 0,
	157, 158, 159, 161, 283, 160, 356, 162, 163, 165,
	164, 411, 412, 413, 284, 166, 285, 167, 168, 414,
	169, 415, 416, 170, 417, 418, 171, 286, 357, 172,
	358, 287, 173, 174, 175, 176, 177, 419, 178, 288,
	179, 289, 180, 420, 181, 182, 183, 184, 185, 290,
	186, 187, 421, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 422, 200, 359, 201, 202,
	291, 203, 0, 207, 208, 209, 210, 423, 212, 292,
	211, 213, 214, 424, 215, 204, 205, 216, 360, 217,
	293, 294, 218, 425, 224, 219, 220, 206, 221, 223,
	295, 222, 296, 426, 225, 427, 226, 227, 228, 229,
	230, 231, 232, 428, 297, 298, 299, 429, 430, 233,
	234, 300, 301, 431, 235, 236, 237, 238, 432, 433,
	239, 240, 241, 242, 434, 243, 435, 302, 244, 245,
	246, 303, 304, 436, 437, 247, 438, 439, 440, 441,
	248, 249, 250, 251, 252, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 100, 101, 361, 102, 362, 363, 364, 365, 253,
	366, 367, 368, 369, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 370, 107, 260, 261, 108, 109,
	371, 372, 262, 263, 264, 373, 110, 265, 374, 347,
	375, 111, 112, 113, 0, 114, 376, 115, 116, 117,
	377, 348, 118, 119, 378, 379, 380, 381, 382, 383,
	120, 121, 310, 122, 266, 123, 267, 268, 384, 124,
	385, 125, 386, 126, 387, 388, 127, 128, 389, 129,
	390, 0, 391, 269, 130, 131, 132, 270, 271, 392,
	393, 394, 133, 134, 272, 0, 135, 395, 136, 396,
	397, 349, 398, 137, 273, 399, 274, 400, 138, 139,
	140, 141, 275, 276, 351, 401, 145, 402, 142, 403,
	350, 143, 277, 144, 278, 279, 280, 404, 281, 405,
	352, 146, 147, 148, 353, 149, 150, 151, 406, 153,
	152, 407, 282, 354, 154, 355, 408, 155, 409, 410,
	156, 0, 157, 158, 159, 161, 283, 160, 356, 162,
	163, 165, 164, 411, 412, 413, 284, 166, 285, 167,
	168, 414, 169, 415, 416, 170, 417, 418, 171, 286,
	357, 172, 358, 287, 173, 174, 175, 176, 177, 419,
	178, 288, 179, 289, 180, 420, 181, 182, 183, 184,
	185, 290, 186, 187, 421, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 422, 200, 359,
	201, 202, 291, 203, 0, 207, 208, 209, 210, 423,
	212, 292, 211, 213, 214, 424, 215, 204, 205, 216,
	360, 217, 293, 294, 218, 425, 224, 219, 220, 206,
	221, 223, 295, 222, 296, 426, 225, 427, 226, 227,
	228, 229, 230, 231, 232, 428, 297, 298, 299, 429,
	430, 233, 234, 300, 301, 431, 235, 236, 237, 238,
	432, 433, 239, 240, 241, 242, 434, 243, 435, 302,
	244, 245, 246, 303, 304, 436, 437, 247, 438, 439,
	440, 441, 248, 249, 250, 251, 252, 630, 619, 620,
	617, 618, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 646, 612, 0, 0, 0, 103, 104, 105, 254,
	661, 256, 662, 106, 663, 664, 0, 107, 260, 261,
	108, 109, 615, 645, 665, 666, 264, 0, 110, 657,
	0, 638, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 348, 118, 119, 0, 639, 641, 0,
	640, 642, 120, 121, 310, 122, 667, 123, 668, 669,
	831, 124, 0, 125, 0, 126, 0, 0, 660, 128,
	0, 129, 0, 0, 0, 603, 130, 131, 132, 647,
	648, 626, 0, 0, 133, 134, 670, 0, 135, 0,
	136, 0, 0, 349, 0, 137, 658, 0, 274, 0,
	138, 139, 140, 141, 654, 656, 351, 0, 145, 0,
	142, 0, 350, 143, 671, 144, 672, 673, 674, 0,
	637, 0, 352, 146, 147, 148, 353, 149, 150, 151,
	0, 153, 152, 0, 659, 354, 154, 355, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 283, 160,
	356, 162, 163, 165, 164, 598, 0, 627, 655, 166,
	675, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 286, 357, 172, 358, 649, 173, 174, 175, 176,
	177, 0, 178, 650, 179, 289, 180, 0, 181, 182,
	183, 184, 185, 676, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 359, 201, 202, 604, 203, 0, 207, 208, 209,
	210, 81, 212, 292, 211, 213, 214, 643, 215, 204,
	205, 216, 360, 217, 677, 294, 218, 0, 224, 219,
	220, 206, 221, 223, 678, 222, 651, 0, 225, 83,
	226, 227, 228, 229, 230, 231, 232, 0, 297, 679,
	680, 0, 0, 233, 234, 652, 653, 625, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 644, 243,
	0, 302, 244, 245, 246, 715, 681, 0, 0, 247,
	0, 0, 0, 79, 248, 249, 250, 251, 252, 599,
	80, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	595, 596, 630, 619, 620, 617, 618, 609, 0, 605,
	0, 0, 0, 0, 608, 0, 0, 0, 100, 101,
	1252, 102, 0, 0, 0, 0, 646, 612, 0, 0,
	0, 103, 104, 105, 254, 661, 256, 662, 106, 663,
	664, 0, 107, 260, 261, 108, 109, 615, 645, 665,
	666, 264, 0, 110, 657, 0, 638, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 348, 118,
	119, 0, 639, 641, 0, 640, 642, 120, 121, 310,
	122, 667, 123, 668, 669, 0, 124, 0, 125, 0,
	126, 1253, 0, 660, 128, 0, 129, 0, 0, 0,
	603, 130, 131, 132, 647, 648, 626, 0, 0, 133,
	134, 670, 0, 135, 0, 136, 0, 0, 349, 0,
	137, 658, 0, 274, 0, 138, 139, 140, 141, 654,
	656, 351, 0, 145, 0, 142, 0, 350, 143, 671,
	144, 672, 673, 674, 0, 637, 0, 352, 146, 147,
	148, 353, 149, 150, 151, 0, 153, 152, 0, 659,
	354, 154, 355, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 283, 160, 356, 162, 163, 165, 164,
	598, 0, 627, 655, 166, 675, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 286, 357, 172, 358,
	649, 173, 174, 175, 176, 177, 0, 178, 650, 179,
	289, 180, 0, 181, 182, 183, 184, 185, 676, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 359, 201, 202, 604,
	203, 0, 207, 208, 209, 210, 0, 212, 292, 211,
	213, 214, 643, 215, 204, 205, 216, 360, 217, 677,
	294, 218, 0, 224, 219, 220, 206, 221, 223, 678,
	222, 651, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 297, 679, 680, 0, 0, 233, 234,
	652, 653, 625, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 644, 243, 0, 302, 244, 245, 246,
	303, 681, 1251, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 599, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 595, 596, 1254, 630, 619,
	620, 617, 618, 609, 605, 1249, 0, 0, 0, 608,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 646, 612, 0, 0, 0, 103, 104, 105,
	254, 661, 256, 662, 106, 663, 664, 0, 107, 260,
	261, 108, 109, 615, 645, 665, 666, 264, 0, 110,
	657, 0, 638, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 119, 0, 639, 641,
	0, 640, 642, 120, 121, 310, 122, 667, 123, 668,
	669, 0, 124, 0, 125, 0, 126, 0, 0, 660,
	128, 0, 129, 0, 0, 0, 603, 130, 131, 132,
	647, 648, 626, 0, 0, 133, 134, 670, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 658, 0, 274,
	0, 138, 139, 140, 141, 654, 656, 351, 0, 145,
	0, 142, 0, 350, 143, 671, 144, 672, 673, 674,
	0, 637, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 659, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 598, 0, 627, 655,
	166, 675, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 649, 173, 174, 175,
	176, 177, 0, 178, 650, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 676, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 604, 203, 0, 207, 208,
	209, 210, 81, 212, 292, 211, 213, 214, 643, 215,
	204, 205, 216, 360, 217, 677, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 678, 222, 651, 0, 225,
	83, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	679, 680, 0, 0, 233, 234, 652, 653, 625, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 644,
	243, 0, 302, 244, 245, 246, 715, 681, 0, 0,
	247, 0, 0, 0, 79, 248, 249, 250, 251, 252,
	599, 80, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 595, 596, 630, 619, 620, 617, 618, 609, 0,
	605, 0, 0, 0, 0, 608, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 646, 612, 0,
	0, 0, 103, 104, 105, 254, 661, 256, 662, 106,
	663, 664, 1298, 107, 260, 261, 108, 109, 615, 645,
	665, 666, 264, 0, 110, 657, 0, 638, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 348,
	118, 119, 0, 639, 641, 0, 640, 642, 120, 121,
	310, 122, 667, 123, 668, 669, 0, 124, 0, 125,
	0, 126, 0, 0, 660, 128, 0, 129, 0, 0,
	0, 603, 130, 131, 132, 647, 648, 626, 0, 0,
	133, 134, 670, 0, 135, 0, 136, 0, 1303, 349,
	0, 137, 658, 0, 274, 0, 138, 139, 140, 141,
	654, 656, 351, 0, 145, 0, 142, 0, 350, 143,
	671, 144, 672, 673, 674, 0, 637, 0, 352, 146,
	147, 148, 353, 149, 150, 151, 0, 153, 152, 1299,
	659, 354, 154, 355, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 283, 160, 356, 162, 163, 165,
	164, 598, 0, 627, 655, 166, 675, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 286, 357, 172,
	358, 649, 173, 174, 175, 176, 177, 0, 178, 650,
	179, 289, 180, 0, 181, 182, 183, 184, 185, 676,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 359, 201, 202,
	604, 203, 0, 207, 208, 209, 210, 0, 212, 292,
	211, 213, 214, 643, 215, 204, 205, 216, 360, 217,
	677, 294, 218, 0, 224, 219, 220, 206, 221, 223,
	678, 222, 651, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 297, 679, 680, 0, 1300, 233,
	234, 652, 653, 625, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 644, 243, 0, 302, 244, 245,
	246, 303, 681, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 599, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 595, 596, 630, 619,
	620, 617, 618, 609, 0, 605, 0, 0, 0, 0,
	608, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 646, 612, 0, 0, 0, 103, 104, 105,
	254, 661, 256, 662, 106, 663, 664, 0, 107, 260,
	261, 108, 109, 615, 645, 665, 666, 264, 0, 110,
	657, 0, 638, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 119, 0, 639, 641,
	0, 640, 642, 120, 121, 310, 122, 667, 123, 668,
	669, 0, 124, 0, 125, 0, 126, 0, 0, 660,
	128, 0, 129, 0, 0, 0, 603, 130, 131, 132,
	647, 648, 626, 0, 0, 133, 134, 670, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 658, 0, 274,
	0, 138, 139, 140, 141, 654, 656, 351, 0, 145,
	0, 142, 0, 350, 143, 671, 144, 672, 673, 674,
	0, 637, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 659, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 598, 1782, 627, 655,
	166, 675, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 649, 173, 174, 175,
	176, 177, 0, 178, 650, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 676, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 604, 203, 0, 207, 208,
	209, 210, 0, 212, 292, 211, 213, 214, 643, 215,
	204, 205, 216, 360, 217, 677, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 678, 222, 651, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	679, 680, 0, 0, 233, 234, 652, 653, 625, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 644,
	243, 0, 302, 244, 245, 246, 303, 681, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	599, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 595, 596, 822, 630, 619, 620, 617, 618, 609,
	605, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 646, 612,
	0, 0, 0, 103, 104, 105, 254, 661, 256, 662,
	106, 663, 664, 0, 107, 260, 261, 108, 109, 615,
	645, 665, 666, 264, 0, 110, 657, 0, 638, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	348, 118, 119, 0, 639, 641, 0, 640, 642, 120,
	121, 310, 122, 667, 123, 668, 669, 0, 124, 0,
	125, 0, 126, 0, 0, 660, 128, 0, 129, 0,
	0, 0, 603, 130, 131, 132, 647, 648, 626, 0,
	0, 133, 134, 670, 0, 135, 0, 136, 0, 0,
	349, 0, 137, 658, 0, 274, 0, 138, 139, 140,
	141, 654, 656, 351, 0, 145, 0, 142, 0, 350,
	143, 671, 144, 672, 673, 674, 0, 637, 0, 352,
	146, 147, 148, 353, 149, 150, 151, 0, 153, 152,
	0, 659, 354, 154, 355, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 283, 160, 356, 162, 163,
	165, 164, 598, 0, 627, 655, 166, 675, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 286, 357,
	172, 358, 649, 173, 174, 175, 176, 177, 0, 178,
	650, 179, 289, 180, 0, 181, 182, 183, 184, 185,
	676, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 359, 201,
	202, 604, 203, 0, 207, 208, 209, 210, 0, 212,
	292, 211, 213, 214, 643, 215, 204, 205, 216, 360,
	217, 677, 294, 218, 0, 224, 219, 220, 206, 221,
	223, 678, 222, 651, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 297, 679, 680, 0, 0,
	233, 234, 652, 653, 625, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 644, 243, 0, 302, 244,
	245, 246, 303, 681, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 599, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 595, 596, 0,
	0, 0, 0, 0, 914, 1244, 605, 0, 0, 0,
	0, 608, 630, 619, 620, 617, 618, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 646, 612, 0, 0,
	0, 103, 104, 105, 254, 661, 256, 662, 106, 663,
	664, 0, 107, 260, 261, 108, 109, 615, 645, 665,
	666, 264, 0, 110, 657, 0, 638, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 348, 118,
	119, 0, 639, 641, 0, 640, 642, 120, 121, 310,
	122, 667, 123, 668, 669, 831, 124, 0, 125, 0,
	126, 0, 0, 660, 128, 0, 129, 0, 0, 0,
	603, 130, 131, 132, 647, 648, 626, 0, 0, 133,
	134, 670, 0, 135, 0, 136, 0, 0, 349, 0,
	137, 658, 0, 274, 0, 138, 139, 140, 141, 654,
	656, 351, 0, 145, 0, 142, 0, 350, 143, 671,
	144, 672, 673, 674, 0, 637, 0, 352, 146, 147,
	148, 353, 149, 150, 151, 0, 153, 152, 0, 659,
	354, 154, 355, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 283, 160, 356, 162, 163, 165, 164,
	598, 0, 627, 655, 166, 675, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 286, 357, 172, 358,
	649, 173, 174, 175, 176, 177, 0, 178, 650, 179,
	289, 180, 0, 181, 182, 183, 184, 185, 676, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 359, 201, 202, 604,
	203, 0, 207, 208, 209, 210, 0, 212, 292, 211,
	213, 214, 643, 215, 204, 205, 216, 360, 217, 677,
	294, 218, 0, 224, 219, 220, 206, 221, 223, 678,
	222, 651, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 297, 679, 680, 0, 0, 233, 234,
	652, 653, 625, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 644, 243, 0, 302, 244, 245, 246,
	303, 681, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 599, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 595, 596, 630, 619, 620,
	617, 618, 609, 0, 605, 0, 0, 0, 0, 608,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 646, 612, 0, 0, 0, 103, 104, 105, 254,
	661, 256, 662, 106, 663, 664, 0, 107, 260, 261,
	108, 109, 615, 645, 665, 666, 264, 0, 110, 657,
	0, 638, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 348, 118, 119, 0, 639, 641, 0,
	640, 642, 120, 121, 310, 122, 667, 123, 668, 669,
	0, 124, 0, 125, 0, 126, 0, 0, 660, 128,
	0, 129, 0, 0, 0, 603, 130, 131, 132, 647,
	648, 626, 0, 0, 133, 134, 670, 0, 135, 0,
	136, 0, 0, 349, 0, 137, 658, 0, 274, 0,
	138, 139, 140, 141, 654, 656, 351, 0, 145, 0,
	142, 0, 350, 143, 671, 144, 672, 673, 674, 0,
	637, 0, 352, 146, 147, 148, 353, 149, 150, 151,
	0, 153, 152, 0, 659, 354, 154, 355, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 283, 160,
	356, 162, 163, 165, 164, 598, 0, 627, 655, 166,
	675, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 286, 357, 172, 358, 649, 173, 174, 175, 176,
	177, 0, 178, 650, 179, 289, 180, 0, 181, 182,
	183, 184, 185, 676, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 359, 201, 202, 604, 203, 0, 207, 208, 209,
	210, 0, 212, 292, 211, 213, 214, 643, 215, 204,
	205, 216, 360, 217, 677, 294, 218, 0, 224, 219,
	220, 206, 221, 223, 678, 222, 651, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 297, 679,
	680, 0, 0, 233, 234, 652, 653, 625, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 644, 243,
	0, 302, 244, 245, 246, 303, 681, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 599,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	595, 596, 630, 619, 620, 617, 618, 609, 0, 605,
	1765, 0, 0, 0, 608, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 646, 612, 0, 0,
	0, 103, 104, 105, 254, 661, 256, 662, 106, 663,
	664, 0, 107, 260, 261, 108, 109, 615, 645, 665,
	666, 264, 0, 110, 657, 0, 638, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 348, 118,
	119, 0, 639, 641, 0, 640, 642, 120, 121, 310,
	122, 667, 123, 668, 669, 0, 124, 0, 125, 0,
	126, 0, 0, 660, 128, 0, 129, 0, 0, 0,
	603, 130, 131, 132, 647, 648, 626, 0, 0, 133,
	134, 670, 0, 135, 0, 136, 0, 0, 349, 0,
	137, 658, 0, 274, 0, 138, 139, 140, 141, 654,
	656, 351, 0, 145, 0, 142, 0, 350, 143, 671,
	144, 672, 673, 674, 0, 637, 0, 352, 146, 147,
	148, 353, 149, 150, 151, 0, 153, 152, 0, 659,
	354, 154, 355, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 283, 160, 356, 162, 163, 165, 164,
	598, 0, 627, 655, 166, 675, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 286, 357, 172, 358,
	649, 173, 174, 175, 176, 177, 0, 178, 650, 179,
	289, 180, 0, 181, 182, 183, 184, 185, 676, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 359, 201, 202, 604,
	203, 0, 207, 208, 209, 210, 0, 212, 292, 211,
	213, 214, 643, 215, 204, 205, 216, 360, 217, 677,
	294, 218, 0, 224, 219, 220, 206, 221, 223, 678,
	222, 651, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 297, 679, 680, 0, 0, 233, 234,
	652, 653, 625, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 644, 243, 0, 302, 244, 245, 246,
	303, 681, 1714, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 599, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 595, 596, 630, 619, 620,
	617, 618, 609, 0, 605, 0, 0, 0, 0, 608,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 646, 612, 0, 0, 0, 103, 104, 105, 254,
	661, 256, 662, 106, 663, 664, 0, 107, 260, 261,
	108, 109, 615, 645, 665, 666, 264, 0, 110, 657,
	0, 638, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 348, 118, 119, 0, 639, 641, 0,
	640, 642, 120, 121, 310, 122, 667, 123, 668, 669,
	0, 124, 0, 125, 0, 126, 0, 0, 660, 128,
	0, 129, 0, 0, 0, 603, 130, 131, 132, 647,
	648, 626, 0, 0, 133, 134, 670, 0, 135, 0,
	136, 0, 0, 349, 0, 137, 658, 0, 274, 0,
	138, 139, 140, 141, 654, 656, 351, 0, 145, 0,
	142, 0, 350, 143, 671, 144, 672, 673, 674, 0,
	637, 0, 352, 146, 147, 148, 353, 149, 150, 151,
	0, 153, 152, 0, 659, 354, 154, 355, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 283, 160,
	356, 162, 163, 165, 164, 598, 0, 627, 655, 166,
	675, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 286, 357, 172, 358, 649, 173, 174, 175, 176,
	177, 0, 178, 650, 179, 289, 180, 0, 181, 182,
	183, 184, 185, 676, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 359, 201, 202, 604, 203, 0, 207, 208, 209,
	210, 0, 212, 292, 211, 213, 214, 643, 215, 204,
	205, 216, 360, 217, 677, 294, 218, 0, 224, 219,
	220, 206, 221, 223, 678, 222, 651, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 297, 679,
	680, 0, 0, 233, 234, 652, 653, 625, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 644, 243,
	0, 302, 244, 245, 246, 303, 681, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 599,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	595, 596, 630, 619, 620, 617, 618, 609, 0, 605,
	1704, 0, 0, 0, 608, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 646, 612, 0, 0,
	0, 103, 104, 105, 254, 661, 256, 662, 106, 663,
	664, 0, 107, 260, 261, 108, 109, 615, 645, 665,
	666, 264, 0, 110, 657, 0, 638, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 348, 118,
	119, 0, 639, 641, 0, 640, 642, 120, 121, 310,
	122, 667, 123, 668, 669, 0, 124, 0, 125, 0,
	126, 0, 0, 660, 128, 0, 129, 0, 0, 0,
	603, 130, 131, 132, 647, 648, 626, 0, 0, 133,
	134, 670, 0, 135, 0, 136, 0, 1303, 349, 0,
	137, 658, 0, 274, 0, 138, 139, 140, 141, 654,
	656, 351, 0, 145, 0, 142, 0, 350, 143, 671,
	144, 672, 673, 674, 0, 637, 0, 352, 146, 147,
	148, 353, 149, 150, 151, 0, 153, 152, 0, 659,
	354, 154, 355, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 283, 160, 356, 162, 163, 165, 164,
	598, 0, 627, 655, 166, 675, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 286, 357, 172, 358,
	649, 173, 174, 175, 176, 177, 0, 178, 650, 179,
	289, 180, 0, 181, 182, 183, 184, 185, 676, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 359, 201, 202, 604,
	203, 0, 207, 208, 209, 210, 0, 212, 292, 211,
	213, 214, 643, 215, 204, 205, 216, 360, 217, 677,
	294, 218, 0, 224, 219, 220, 206, 221, 223, 678,
	222, 651, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 297, 679, 680, 0, 0, 233, 234,
	652, 653, 625, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 644, 243, 0, 302, 244, 245, 246,
	303, 681, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 599, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 595, 596, 630, 619, 620,
	617, 618, 609, 0, 605, 0, 0, 0, 0, 608,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 646, 612, 0, 0, 0, 103, 104, 105, 254,
	661, 256, 662, 106, 663, 664, 0, 107, 260, 261,
	108, 109, 615, 645, 665, 666, 264, 0, 110, 657,
	0, 638, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 348, 118, 119, 0, 639, 641, 0,
	640, 642, 120, 121, 310, 122, 667, 123, 668, 669,
	0, 124, 0, 125, 0, 126, 0, 0, 660, 128,
	0, 129, 0, 0, 0, 603, 130, 131, 132, 647,
	648, 626, 0, 0, 133, 134, 670, 0, 135, 0,
	136, 0, 0, 349, 0, 137, 658, 0, 274, 0,
	138, 139, 140, 141, 654, 656, 351, 0, 145, 0,
	142, 0, 350, 143, 671, 144, 672, 673, 674, 0,
	637, 0, 352, 146, 147, 148, 353, 149, 150, 151,
	0, 153, 152, 0, 659, 354, 154, 355, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 283, 160,
	356, 162, 163, 165, 164, 598, 0, 627, 655, 166,
	675, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 286, 357, 172, 358, 649, 173, 174, 175, 176,
	177, 0, 178, 650, 179, 289, 180, 0, 181, 182,
	183, 184, 185, 676, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 359, 201, 202, 604, 203, 0, 207, 208, 209,
	210, 0, 212, 292, 211, 213, 214, 643, 215, 204,
	205, 216, 360, 217, 677, 294, 218, 0, 224, 219,
	220, 206, 221, 223, 678, 222, 651, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 297, 679,
	680, 0, 0, 233, 234, 652, 653, 625, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 644, 243,
	0, 302, 244, 245, 246, 303, 681, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 599,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	595, 596, 822, 630, 619, 620, 617, 618, 609, 605,
	0, 0, 0, 0, 608, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 646, 612, 0,
	0, 0, 103, 104, 105, 254, 661, 256, 662, 106,
	663, 664, 0, 107, 260, 261, 108, 109, 615, 645,
	665, 666, 264, 0, 110, 657, 0, 638, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 348,
	118, 119, 0, 639, 641, 0, 640, 642, 120, 121,
	310, 122, 667, 123, 668, 669, 0, 124, 0, 125,
	0, 126, 0, 0, 660, 128, 0, 129, 0, 0,
	0, 603, 130, 131, 132, 647, 648, 626, 0, 0,
	133, 134, 670, 0, 135, 0, 136, 0, 0, 349,
	0, 137, 658, 0, 274, 0, 138, 139, 140, 141,
	654, 656, 351, 0, 145, 0, 142, 0, 350, 143,
	671, 144, 672, 673, 674, 0, 637, 0, 352, 146,
	147, 148, 353, 149, 150, 151, 0, 153, 152, 0,
	659, 354, 154, 355, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 283, 160, 356, 162, 163, 165,
	164, 598, 0, 627, 655, 166, 675, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 286, 357, 172,
	358, 649, 173, 174, 175, 176, 177, 0, 178, 650,
	179, 289, 180, 0, 181, 182, 183, 184, 185, 676,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 359, 201, 202,
	604, 203, 0, 207, 208, 209, 210, 0, 212, 292,
	211, 213, 214, 643, 215, 204, 205, 216, 360, 217,
	677, 294, 218, 0, 224, 219, 220, 206, 221, 223,
	678, 222, 651, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 297, 679, 680, 0, 0, 233,
	234, 652, 653, 625, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 644, 243, 0, 302, 244, 245,
	246, 303, 681, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 599, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 595, 596, 630, 619,
	620, 617, 618, 609, 0, 605, 1239, 0, 0, 0,
	608, 0, 0, 0, 100, 101, 1107, 102, 0, 0,
	0, 0, 646, 612, 0, 0, 0, 103, 104, 105,
	254, 661, 256, 662, 106, 663, 664, 0, 107, 260,
	261, 108, 109, 615, 645, 665, 666, 264, 0, 110,
	657, 0, 638, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 119, 0, 639, 641,
	0, 640, 642, 120, 121, 310, 122, 667, 123, 668,
	669, 0, 124, 0, 125, 0, 126, 0, 0, 660,
	128, 0, 129, 0, 0, 0, 603, 130, 131, 132,
	647, 648, 626, 0, 0, 133, 134, 670, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 658, 0, 274,
	0, 138, 139, 140, 141, 654, 656, 351, 0, 145,
	0, 142, 0, 350, 143, 671, 144, 672, 673, 674,
	0, 637, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 659, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 598, 0, 627, 655,
	166, 675, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 649, 173, 174, 175,
	176, 177, 0, 178, 650, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 676, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 604, 203, 0, 207, 208,
	209, 210, 0, 212, 292, 211, 213, 214, 643, 215,
	204, 205, 216, 360, 217, 677, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 678, 222, 651, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	679, 680, 0, 0, 233, 234, 652, 653, 625, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 644,
	243, 0, 302, 244, 245, 246, 303, 681, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	599, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 595, 596, 630, 619, 620, 617, 618, 609, 0,
	605, 0, 0, 0, 0, 608, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 646, 612, 0,
	0, 0, 103, 104, 105, 254, 661, 256, 662, 106,
	663, 664, 0, 107, 260, 261, 108, 109, 615, 645,
	665, 666, 264, 0, 110, 657, 0, 638, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 348,
	118, 2168, 0, 639, 641, 0, 640, 642, 120, 121,
	310, 122, 667, 123, 668, 669, 0, 124, 0, 125,
	0, 126, 0, 0, 660, 128, 0, 129, 0, 0,
	0, 603, 130, 131, 132, 647, 648, 626, 0, 0,
	133, 134, 670, 0, 135, 0, 136, 0, 0, 349,
	0, 137, 658, 0, 274, 0, 138, 139, 140, 141,
	654, 656, 351, 0, 145, 0, 142, 0, 350, 143,
	671, 144, 672, 673, 674, 0, 637, 0, 352, 146,
	147, 148, 353, 149, 150, 151, 0, 153, 152, 0,
	659, 354, 154, 355, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 283, 160, 356, 162, 163, 165,
	164, 598, 0, 627, 655, 166, 675, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 286, 357, 172,
	358, 649, 173, 174, 175, 176, 177, 0, 178, 650,
	179, 289, 180, 0, 181, 182, 183, 184, 185, 676,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 359, 201, 202,
	604, 203, 0, 207, 208, 209, 210, 0, 212, 292,
	211, 213, 214, 643, 215, 204, 205, 216, 360, 217,
	677, 294, 218, 0, 224, 219, 220, 206, 221, 223,
	678, 222, 651, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 297, 679, 680, 0, 0, 233,
	234, 652, 653, 625, 235, 236, 2167, 238, 0, 0,
	239, 240, 241, 242, 644, 243, 0, 302, 244, 245,
	246, 303, 681, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 599, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 595, 596, 630, 619,
	620, 617, 618, 609, 0, 605, 0, 0, 0, 0,
	608, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 646, 612, 0, 0, 0, 103, 104, 105,
	2166, 661, 256, 662, 106, 663, 664, 0, 107, 260,
	261, 108, 109, 615, 645, 665, 666, 264, 0, 110,
	657, 0, 638, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 2168, 0, 639, 641,
	0, 640, 642, 120, 121, 310, 122, 667, 123, 668,
	669, 0, 124, 0, 125, 0, 126, 0, 0, 660,
	128, 0, 129, 0, 0, 0, 603, 130, 131, 132,
	647, 648, 626, 0, 0, 133, 134, 670, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 658, 0, 274,
	0, 138, 139, 140, 141, 654, 656, 351, 0, 145,
	0, 142, 0, 350, 143, 671, 144, 672, 673, 674,
	0, 637, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 659, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 598, 0, 627, 655,
	166, 675, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 649, 173, 174, 175,
	176, 177, 0, 178, 650, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 676, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 604, 203, 0, 207, 208,
	209, 210, 0, 212, 292, 211, 213, 214, 643, 215,
	204, 205, 216, 360, 217, 677, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 678, 222, 651, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	679, 680, 0, 0, 233, 234, 652, 653, 625, 235,
	236, 2167, 238, 0, 0, 239, 240, 241, 242, 644,
	243, 0, 302, 244, 245, 246, 303, 681, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	599, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 595, 596, 630, 619, 620, 617, 618, 609, 0,
	605, 0, 0, 0, 0, 608, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 646, 612, 0,
	0, 0, 103, 104, 105, 254, 661, 256, 662, 106,
	663, 664, 0, 107, 260, 261, 108, 109, 615, 645,
	665, 666, 264, 0, 110, 657, 0, 638, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 348,
	118, 119, 0, 639, 641, 0, 640, 642, 120, 121,
	310, 122, 667, 123, 668, 669, 0, 124, 0, 125,
	0, 126, 0, 0, 660, 128, 0, 129, 0, 0,
	0, 603, 130, 131, 132, 647, 648, 626, 0, 0,
	133, 134, 670, 0, 135, 0, 136, 0, 0, 349,
	0, 137, 658, 0, 274, 0, 138, 139, 140, 141,
	654, 656, 351, 0, 145, 0, 142, 0, 350, 143,
	671, 144, 672, 673, 674, 0, 637, 0, 352, 146,
	147, 148, 353, 149, 150, 151, 0, 153, 152, 0,
	659, 354, 154, 355, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 283, 160, 356, 162, 163, 165,
	164, 598, 0, 627, 655, 166, 675, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 286, 357, 172,
	358, 649, 173, 174, 175, 176, 177, 0, 178, 650,
	179, 289, 180, 0, 181, 182, 183, 184, 185, 676,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 359, 201, 202,
	604, 203, 0, 207, 208, 209, 210, 0, 212, 292,
	211, 213, 214, 643, 215, 204, 205, 216, 360, 217,
	677, 294, 218, 0, 224, 219, 220, 206, 221, 223,
	678, 222, 651, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 297, 679, 680, 0, 0, 233,
	234, 652, 653, 625, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 644, 243, 0, 302, 244, 245,
	246, 303, 681, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 599, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 595, 596, 1275, 619,
	620, 617, 618, 609, 0, 605, 0, 0, 0, 0,
	608, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 646, 612, 0, 0, 0, 103, 104, 105,
	254, 661, 256, 662, 106, 663, 664, 0, 107, 260,
	261, 108, 109, 615, 645, 665, 666, 264, 0, 110,
	657, 0, 638, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 119, 0, 639, 641,
	0, 640, 642, 120, 121, 310, 122, 667, 1278, 668,
	669, 0, 124, 0, 125, 0, 126, 0, 0, 660,
	128, 0, 129, 0, 0, 0, 603, 130, 131, 132,
	647, 648, 626, 0, 0, 133, 134, 670, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 658, 0, 274,
	0, 138, 139, 1279, 141, 654, 656, 351, 0, 145,
	0, 142, 0, 350, 143, 671, 144, 672, 673, 674,
	0, 637, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 659, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 1280, 1277, 161, 283,
	160, 356, 162, 163, 165, 164, 598, 0, 627, 655,
	166, 675, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 649, 173, 174, 175,
	176, 177, 0, 178, 650, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 676, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 604, 203, 0, 207, 208,
	209, 1281, 0, 212, 292, 211, 213, 214, 643, 215,
	204, 205, 216, 360, 217, 677, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 678, 222, 651, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	679, 680, 0, 0, 233, 234, 652, 653, 625, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 644,
	243, 0, 302, 244, 245, 246, 303, 681, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 1276, 252,
	599, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 595, 596, 630, 619, 620, 617, 618, 609, 0,
	605, 0, 0, 0, 0, 608, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 646, 612, 0,
	0, 0, 103, 104, 105, 254, 661, 256, 662, 106,
	663, 664, 0, 107, 260, 261, 108, 109, 615, 645,
	665, 666, 264, 0, 110, 657, 0, 638, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 348,
	118, 119, 0, 639, 641, 0, 640, 642, 120, 121,
	310, 122, 667, 123, 668, 669, 0, 124, 0, 125,
	0, 126, 0, 0, 660, 128, 0, 129, 0, 0,
	0, 603, 130, 131, 132, 647, 648, 626, 0, 0,
	133, 134, 670, 0, 135, 0, 136, 0, 0, 349,
	0, 137, 658, 0, 274, 0, 138, 139, 140, 141,
	654, 656, 351, 0, 145, 0, 142, 0, 350, 143,
	671, 144, 672, 673, 674, 0, 637, 0, 352, 146,
	147, 148, 353, 149, 150, 151, 0, 153, 152, 0,
	659, 354, 154, 355, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 283, 160, 356, 162, 163, 165,
	164, 0, 0, 627, 655, 166, 675, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 286, 357, 172,
	358, 649, 173, 174, 175, 176, 177, 0, 178, 650,
	179, 289, 180, 0, 181, 182, 183, 184, 185, 676,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 359, 201, 202,
	1293, 203, 0, 207, 208, 209, 210, 0, 212, 292,
	211, 213, 214, 643, 215, 204, 205, 216, 360, 217,
	677, 294, 218, 0, 224, 219, 220, 206, 221, 223,
	678, 222, 651, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 297, 679, 680, 0, 0, 233,
	234, 652, 653, 625, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 644, 243, 0, 302, 244, 245,
	246, 303, 681, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 0, 0, 1289, 1290, 630, 619,
	620, 617, 618, 609, 0, 1292, 0, 0, 0, 0,
	608, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 646, 612, 0, 0, 0, 103, 104, 105,
	254, 661, 256, 662, 106, 663, 664, 0, 107, 260,
	261, 108, 109, 0, 645, 665, 666, 264, 0, 110,
	657, 0, 638, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 119, 0, 639, 641,
	0, 640, 642, 120, 121, 310, 122, 667, 123, 668,
	669, 0, 124, 0, 125, 0, 126, 0, 0, 660,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	647, 648, 626, 0, 0, 133, 134, 670, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 658, 0, 274,
	0, 138, 139, 140, 141, 654, 656, 351, 0, 145,
	0, 142, 0, 350, 143, 671, 144, 672, 673, 674,
	0, 637, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 659, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 0, 0, 627, 655,
	166, 675, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 649, 173, 174, 175,
	176, 177, 0, 178, 650, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 676, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 1293, 203, 0, 207, 208,
	209, 210, 0, 212, 292, 211, 213, 214, 643, 215,
	204, 205, 216, 360, 217, 677, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 678, 222, 651, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	679, 680, 0, 0, 233, 234, 652, 653, 625, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 644,
	243, 0, 302, 244, 245, 246, 303, 681, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	0, 0, 630, 619, 620, 617, 618, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	1292, 102, 0, 0, 0, 608, 646, 612, 0, 0,
	0, 103, 104, 105, 0, 661, 256, 662, 106, 663,
	664, 0, 107, 260, 261, 108, 109, 615, 645, 665,
	666, 264, 0, 110, 657, 0, 638, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 348, 118,
	2168, 0, 639, 641, 0, 640, 642, 120, 121, 310,
	122, 667, 123, 668, 669, 0, 124, 0, 125, 0,
	126, 0, 0, 660, 128, 0, 129, 0, 0, 0,
	603, 130, 131, 132, 647, 648, 626, 0, 0, 133,
	134, 670, 0, 135, 0, 136, 0, 0, 349, 0,
	137, 658, 0, 274, 0, 138, 139, 140, 141, 654,
	656, 0, 0, 145, 0, 142, 0, 350, 143, 671,
	144, 672, 673, 674, 0, 637, 0, 0, 146, 147,
	148, 353, 149, 150, 151, 0, 153, 152, 0, 659,
	354, 154, 0, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 283, 160, 356, 162, 163, 165, 164,
	598, 0, 627, 655, 166, 675, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 286, 357, 172, 358,
	649, 173, 174, 175, 176, 177, 0, 178, 650, 179,
	289, 180, 0, 181, 182, 183, 184, 185, 676, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 359, 201, 202, 604,
	203, 0, 207, 208, 209, 210, 0, 212, 292, 211,
	213, 214, 643, 215, 204, 205, 216, 0, 217, 677,
	294, 218, 0, 224, 219, 220, 206, 221, 223, 678,
	222, 651, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 297, 679, 680, 0, 0, 233, 234,
	652, 653, 625, 235, 236, 2167, 238, 0, 0, 239,
	240, 241, 242, 644, 243, 0, 302, 244, 245, 246,
	303, 681, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 630, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 596, 0, 0, 0,
	100, 101, 0, 102, 605, 0, 0, 0, 646, 608,
	0, 0, 0, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 0, 107, 260, 261, 108, 109, 0,
	645, 262, 263, 264, 0, 110, 657, 0, 638, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	348, 118, 119, 0, 639, 641, 0, 640, 642, 120,
	121, 310, 122, 266, 123, 267, 268, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 647, 648, 0, 0,
	0, 133, 134, 272, 0, 135, 0, 136, 0, 0,
	349, 0, 137, 658, 0, 274, 0, 138, 139, 140,
	141, 654, 656, 351, 0, 145, 0, 142, 0, 350,
	143, 277, 144, 278, 279, 280, 0, 281, 0, 352,
	146, 147, 148, 353, 149, 150, 151, 0, 153, 152,
	0, 659, 354, 154, 355, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 283, 160, 356, 162, 163,
	165, 164, 0, 0, 0, 655, 166, 285, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 286, 357,
	172, 358, 649, 173, 174, 175, 176, 177, 0, 178,
	650, 179, 289, 180, 0, 181, 182, 183, 184, 185,
	290, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 359, 201,
	202, 291, 203, 0, 207, 208, 209, 210, 0, 212,
	292, 211, 213, 214, 643, 215, 204, 205, 216, 360,
	217, 293, 294, 218, 0, 224, 219, 220, 206, 221,
	223, 295, 222, 651, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 297, 298, 299, 0, 0,
	233, 234, 652, 653, 0, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 644, 243, 0, 302, 244,
	245, 246, 303, 304, 0, 0, 247, 0, 537, 0,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 253, 0, 0, 0, 1667, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 0, 262, 263, 264, 0, 110,
	265, 0, 347, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 310, 122, 266, 123, 267,
	268, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	270, 271, 0, 0, 0, 133, 134, 272, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 273, 0, 274,
	0, 138, 139, 140, 141, 275, 276, 351, 0, 145,
	0, 142, 0, 350, 143, 277, 144, 278, 279, 280,
	0, 281, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 282, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 0, 0, 0, 284,
	166, 285, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 287, 173, 174, 175,
	176, 177, 0, 178, 288, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 290, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 291, 203, 0, 207, 208,
	209, 210, 81, 212, 292, 211, 213, 214, 0, 215,
	204, 205, 216, 360, 217, 293, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 295, 222, 296, 0, 225,
	83, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	298, 299, 0, 0, 233, 234, 300, 301, 0, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 0,
	243, 0, 302, 244, 245, 246, 715, 304, 0, 0,
	247, 0, 0, 0, 79, 248, 249, 250, 251, 252,
	0, 80, 537, 534, 0, 535, 530, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	78, 102, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 0, 107, 260, 261, 108, 109, 0, 0, 262,
	263, 264, 0, 110, 265, 0, 347, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 348, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 310,
	122, 266, 123, 267, 268, 1053, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 527, 0, 0, 133,
	134, 272, 0, 135, 0, 136, 0, 0, 349, 0,
	137, 273, 0, 274, 0, 138, 139, 140, 141, 275,
	276, 351, 0, 145, 0, 142, 0, 350, 143, 277,
	144, 278, 279, 280, 0, 281, 0, 352, 146, 147,
	148, 353, 149, 150, 151, 0, 153, 152, 0, 282,
	354, 154, 355, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 283, 160, 356, 162, 163, 165, 164,
	0, 0, 0, 284, 166, 285, 167, 168, 0, 169,
	528, 0, 170, 0, 0, 171, 286, 357, 172, 358,
	287, 173, 174, 175, 176, 177, 0, 178, 288, 179,
	289, 180, 0, 181, 182, 183, 184, 185, 290, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 359, 201, 202, 291,
	203, 0, 207, 208, 209, 210, 0, 212, 292, 211,
	213, 214, 0, 215, 204, 205, 216, 360, 217, 293,
	294, 218, 0, 224, 219, 220, 206, 221, 223, 295,
	222, 296, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 297, 298, 299, 0, 0, 233, 234,
	300, 301, 526, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 0, 243, 0, 302, 244, 245, 246,
	303, 304, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 537, 534, 0, 535, 530, 525,
	0, 0, 0, 0, 0, 536, 531, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 0, 107, 260, 261, 108, 109, 0,
	0, 262, 263, 264, 0, 110, 265, 0, 347, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	348, 118, 119, 0, 0, 0, 0, 0, 0, 120,
	121, 310, 122, 266, 123, 267, 268, 1050, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 270, 271, 527, 0,
	0, 133, 134, 272, 0, 135, 0, 136, 0, 0,
	349, 0, 137, 273, 0, 274, 0, 138, 139, 140,
	141, 275, 276, 351, 0, 145, 0, 142, 0, 350,
	143, 277, 144, 278, 279, 280, 0, 281, 0, 352,
	146, 147, 148, 353, 149, 150, 151, 0, 153, 152,
	0, 282, 354, 154, 355, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 283, 160, 356, 162, 163,
	165, 164, 0, 0, 0, 284, 166, 285, 167, 168,
	0, 169, 528, 0, 170, 0, 0, 171, 286, 357,
	172, 358, 287, 173, 174, 175, 176, 177, 0, 178,
	288, 179, 289, 180, 0, 181, 182, 183, 184, 185,
	290, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 359, 201,
	202, 291, 203, 0, 207, 208, 209, 210, 0, 212,
	292, 211, 213, 214, 0, 215, 204, 205, 216, 360,
	217, 293, 294, 218, 0, 224, 219, 220, 206, 221,
	223, 295, 222, 296, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 297, 298, 299, 0, 0,
	233, 234, 300, 301, 526, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 0, 243, 0, 302, 244,
	245, 246, 303, 304, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 537, 534, 0, 535,
	530, 525, 0, 0, 0, 0, 0, 536, 531, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	347, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 348, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 749,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	527, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 349, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 351, 0, 145, 0, 142,
	0, 350, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 352, 146, 147, 148, 353, 149, 150, 151, 0,
	153, 152, 0, 282, 354, 154, 355, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 356,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 528, 0, 170, 0, 0, 171,
	286, 357, 172, 358, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	359, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 360, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 526, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 537, 534,
	0, 535, 530, 525, 0, 0, 0, 0, 0, 536,
	531, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 0, 262, 263, 264, 0, 110,
	265, 0, 347, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 348, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 310, 122, 266, 123, 267,
	268, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	270, 271, 527, 0, 0, 133, 134, 272, 0, 135,
	0, 136, 0, 0, 349, 0, 137, 273, 0, 274,
	0, 138, 139, 140, 141, 275, 276, 351, 0, 145,
	0, 142, 0, 350, 143, 277, 144, 278, 279, 280,
	0, 281, 0, 352, 146, 147, 148, 353, 149, 150,
	151, 0, 153, 152, 0, 282, 354, 154, 355, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 283,
	160, 356, 162, 163, 165, 164, 0, 0, 0, 284,
	166, 285, 167, 168, 0, 169, 528, 0, 170, 0,
	0, 171, 286, 357, 172, 358, 287, 173, 174, 175,
	176, 177, 0, 178, 288, 179, 289, 180, 0, 181,
	182, 183, 184, 185, 290, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 359, 201, 202, 291, 203, 0, 207, 208,
	209, 210, 0, 212, 292, 211, 213, 214, 0, 215,
	204, 205, 216, 360, 217, 293, 294, 218, 0, 224,
	219, 220, 206, 221, 223, 295, 222, 296, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 297,
	298, 299, 0, 0, 233, 234, 300, 301, 526, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 0,
	243, 0, 302, 244, 245, 246, 303, 304, 0, 97,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 536, 531, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 310, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 273, 0,
	274, 0, 138, 139, 140, 141, 275, 276, 0, 0,
	145, 0, 142, 0, 0, 143, 277, 144, 278, 279,
	280, 0, 281, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 282, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	283, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	284, 166, 285, 167, 168, 0, 169, 0, 571, 170,
	0, 0, 171, 286, 0, 172, 0, 287, 173, 174,
	175, 176, 177, 0, 178, 288, 179, 289, 180, 0,
	181, 182, 183, 184, 185, 290, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 291, 203, 0, 207,
	208, 209, 210, 81, 212, 292, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 293, 294, 218, 0,
	224, 219, 220, 206, 221, 223, 295, 222, 296, 0,
	225, 83, 226, 227, 228, 229, 230, 231, 232, 0,
	297, 298, 299, 0, 0, 233, 234, 300, 301, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 302, 244, 245, 246, 715, 304, 0,
	0, 247, 0, 97, 0, 79, 248, 249, 250, 251,
	252, 0, 80, 0, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 1412,
	0, 1417, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	310, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 273, 0, 274, 0, 138, 139, 140, 141,
	275, 276, 0, 0, 145, 0, 142, 0, 0, 143,
	277, 144, 278, 279, 280, 0, 281, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	282, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 283, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 284, 166, 285, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 286, 0, 172,
	0, 287, 173, 174, 175, 176, 177, 0, 178, 288,
	179, 289, 180, 0, 181, 182, 183, 184, 185, 290,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	291, 203, 0, 207, 208, 209, 210, 81, 212, 292,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	293, 294, 218, 0, 224, 219, 220, 206, 221, 223,
	295, 222, 296, 0, 225, 83, 226, 227, 228, 229,
	230, 231, 232, 0, 297, 298, 299, 0, 0, 233,
	234, 300, 301, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 302, 244, 245,
	246, 715, 304, 0, 0, 247, 0, 97, 0, 79,
	248, 249, 250, 251, 252, 0, 80, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 78, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 310, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 273, 0, 274, 0,
	138, 139, 140, 141, 275, 276, 0, 0, 145, 0,
	142, 0, 0, 143, 277, 144, 278, 279, 280, 0,
	281, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 282, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 283, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 284, 166,
	285, 167, 168, 0, 169, 0, 571, 170, 0, 0,
	171, 286, 0, 172, 0, 287, 173, 174, 175, 176,
	177, 0, 178, 288, 179, 289, 180, 0, 181, 182,
	183, 184, 185, 290, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 291, 203, 0, 207, 208, 209,
	210, 0, 212, 292, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 293, 294, 218, 0, 224, 219,
	220, 206, 221, 223, 295, 222, 296, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 297, 298,
	299, 0, 0, 233, 234, 300, 301, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 302, 244, 245, 246, 303, 304, 0, 0, 247,
	0, 97, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 1412, 0, 1417,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 310, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	273, 0, 274, 0, 138, 139, 140, 141, 275, 276,
	0, 0, 145, 0, 142, 0, 0, 143, 277, 144,
	278, 279, 280, 0, 281, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 282, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 283, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 284, 166, 285, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 286, 0, 172, 0, 287,
	173, 174, 175, 176, 177, 0, 178, 288, 179, 289,
	180, 0, 181, 182, 183, 184, 185, 290, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 291, 203,
	0, 207, 208, 209, 210, 0, 212, 292, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 293, 294,
	218, 0, 224, 219, 220, 206, 221, 223, 295, 222,
	296, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 297, 298, 299, 0, 0, 233, 234, 300,
	301, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 302, 244, 245, 246, 303,
	304, 0, 0, 247, 0, 0, 97, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 957, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 0, 0, 247, 0,
	97, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 1333, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 310, 122, 266,
	123, 267, 268, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 269, 130,
	131, 132, 270, 271, 0, 0, 0, 133, 134, 272,
	0, 135, 0, 136, 0, 0, 0, 0, 137, 273,
	0, 274, 0, 138, 139, 140, 141, 275, 276, 0,
	0, 145, 0, 142, 0, 0, 143, 277, 144, 278,
	279, 280, 0, 281, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 282, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 283, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 284, 166, 285, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 286, 0, 172, 0, 287, 173,
	174, 175, 176, 177, 0, 178, 288, 179, 289, 180,
	0, 181, 182, 183, 184, 185, 290, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 291, 203, 0,
	207, 208, 209, 210, 0, 212, 292, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 293, 294, 218,
	0, 224, 219, 220, 206, 221, 223, 295, 222, 296,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 297, 298, 299, 0, 0, 233, 234, 300, 301,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 302, 244, 245, 246, 303, 304,
	0, 0, 247, 0, 97, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 253, 0,
	0, 0, 1729, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 0, 107, 260, 261, 108, 109, 0,
	0, 262, 263, 264, 0, 110, 265, 0, 0, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 0, 120,
	121, 310, 122, 266, 123, 267, 268, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 270, 271, 0, 0,
	0, 133, 134, 272, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 273, 0, 274, 0, 138, 139, 140,
	141, 275, 276, 0, 0, 145, 0, 142, 0, 0,
	143, 277, 144, 278, 279, 280, 0, 281, 0, 0,
	146, 147, 148, 0, 149, 150, 151, 0, 153, 152,
	0, 282, 0, 154, 0, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 283, 160, 0, 162, 163,
	165, 164, 0, 0, 0, 284, 166, 285, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 286, 0,
	172, 0, 287, 173, 174, 175, 176, 177, 0, 178,
	288, 179, 289, 180, 0, 181, 182, 183, 184, 185,
	290, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 0, 201,
	202, 291, 203, 0, 207, 208, 209, 210, 0, 212,
	292, 211, 213, 214, 0, 215, 204, 205, 216, 0,
	217, 293, 294, 218, 0, 224, 219, 220, 206, 221,
	223, 295, 222, 296, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 297, 298, 299, 0, 0,
	233, 234, 300, 301, 0, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 0, 243, 0, 302, 244,
	245, 246, 303, 304, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 630, 619, 620, 617,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 0, 102, 827, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 661,
	256, 662, 106, 663, 664, 0, 107, 260, 261, 108,
	109, 0, 0, 665, 666, 264, 0, 110, 265, 0,
	347, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 348, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 667, 123, 668, 669, 0,
	124, 0, 125, 0, 126, 0, 0, 660, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	626, 0, 0, 133, 134, 670, 0, 135, 0, 136,
	0, 0, 349, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 351, 0, 145, 0, 142,
	0, 350, 143, 671, 144, 672, 673, 674, 0, 637,
	0, 352, 146, 147, 148, 353, 149, 150, 151, 0,
	153, 152, 0, 282, 354, 154, 355, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 356,
	162, 163, 165, 164, 0, 0, 627, 284, 166, 675,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 357, 172, 358, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 676, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	359, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 360, 217, 677, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 678, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 679, 680,
	0, 0, 233, 234, 300, 301, 625, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 681, 537, 534, 247, 0,
	0, 756, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	347, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 348, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 349, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 351, 0, 145, 0, 142,
	0, 350, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 352, 146, 147, 148, 353, 149, 150, 151, 0,
	153, 152, 0, 282, 354, 154, 355, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 356,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 357, 172, 358, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	359, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 360, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 93, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 92, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 537, 534, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 96, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	347, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 348, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 349, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 351, 0, 145, 0, 142,
	0, 350, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 352, 146, 147, 148, 353, 149, 150, 151, 0,
	153, 152, 0, 282, 354, 154, 355, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 356,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 357, 172, 358, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	359, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 360, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 537, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 96, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	347, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 348, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 349, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 351, 0, 145, 0, 142,
	0, 350, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 352, 146, 147, 148, 353, 149, 150, 151, 0,
	153, 152, 0, 282, 354, 154, 355, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 356,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 357, 172, 358, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	359, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 360, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 1143, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 1141, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 1384, 0, 133, 134, 272, 0, 135, 0, 136,
	1146, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 1382, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 1145, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 1383, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 1143, 110, 265, 0,
	0, 1138, 111, 112, 113, 0, 114, 1141, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	1146, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 1137, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 1145, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 1144, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 1837, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 571, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 1068, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 983, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 571, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 723, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 583, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 571, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 576, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 571, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 446, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 445, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 1441, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 1439, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 1428, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 1098, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 462, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 967, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 0, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 798, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 793, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 731, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 476, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 473, 298, 299,
	0, 0, 233, 469, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 476, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 473, 298, 299,
	0, 0, 233, 469, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 711, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 709, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 706, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 703, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 701, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 579, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 560, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 467, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 465, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 476, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 175, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	184, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 468, 203, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 466, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 473, 298, 299,
	0, 0, 233, 469, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 97, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 310, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 273, 0, 274, 0, 138,
	139, 140, 141, 275, 276, 0, 0, 145, 0, 142,
	0, 0, 143, 277, 144, 278, 279, 280, 0, 281,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 282, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 283, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 284, 166, 285,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	286, 0, 172, 0, 287, 173, 174, 0, 176, 177,
	0, 178, 288, 179, 289, 180, 0, 181, 182, 183,
	0, 185, 290, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 291, 0, 0, 207, 208, 209, 210,
	0, 212, 292, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 293, 294, 218, 0, 224, 219, 220,
	206, 221, 223, 295, 222, 296, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 297, 298, 299,
	0, 0, 233, 234, 300, 301, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	302, 244, 245, 246, 303, 304, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 859, 860,
	0, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 862, 0, 0, 893, 0, 859, 860, 0, 879,
	880, 881, 889, 890, 891, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 861, 0, 0, 0, 862,
	0, 876, 893, 0, 0, 0, 0, 0, 859, 860,
	0, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 0, 0, 861, 882, 0, 0, 0, 0, 876,
	0, 862, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 861, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 894, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	894, 0, 884, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 867, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 886, 894, 883, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 884, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 873, 874, 875,
	888, 0, 872, 870, 871, 863, 864, 865, 866, 868,
	869, 0, 0, 0, 0, 2113, 0, 0, 0, 0,
	0, 0, 885, 0, 0, 873, 874, 875, 888, 0,
	872, 870, 871, 863, 864, 865, 866, 868, 869, 0,
	0, 0, 0, 2088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 873, 874, 875,
	888, 0, 872, 870, 871, 863, 864, 865, 866, 868,
	869, 0, 0, 859, 860, 2022, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 893,
	0, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	861, 0, 0, 0, 862, 0, 876, 893, 0, 0,
	0, 0, 0, 859, 860, 0, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 0, 0, 861, 882,
	0, 0, 0, 0, 876, 0, 862, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	861, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 894, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 894, 0, 884, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 867, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 886, 894, 883, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 884, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 873, 874, 875, 888, 0, 872, 870, 871,
	863, 864, 865, 866, 868, 869, 0, 0, 0, 0,
	2017, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	873, 874, 875, 888, 0, 872, 870, 871, 863, 864,
	865, 866, 868, 869, 0, 0, 0, 0, 2013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 873, 874, 875, 888, 0, 872, 870, 871,
	863, 864, 865, 866, 868, 869, 0, 0, 859, 860,
	1990, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 862, 0, 0, 893, 0, 859, 860, 0, 879,
	880, 881, 889, 890, 891, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 861, 0, 0, 0, 862,
	0, 876, 893, 0, 0, 0, 0, 0, 859, 860,
	0, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 0, 0, 861, 882, 0, 0, 0, 0, 876,
	0, 862, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 861, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 894, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	894, 0, 884, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 867, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 886, 894, 883, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 884, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 873, 874, 875,
	888, 0, 872, 870, 871, 863, 864, 865, 866, 868,
	869, 0, 0, 0, 0, 1921, 0, 0, 0, 0,
	0, 0, 885, 0, 0, 873, 874, 875, 888, 0,
	872, 870, 871, 863, 864, 865, 866, 868, 869, 0,
	0, 0, 0, 1920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 873, 874, 875,
	888, 0, 872, 870, 871, 863, 864, 865, 866, 868,
	869, 0, 0, 859, 860, 1859, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 893,
	0, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	861, 0, 0, 0, 862, 0, 876, 893, 0, 0,
	0, 0, 0, 859, 860, 0, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 0, 0, 861, 882,
	0, 0, 0, 0, 876, 0, 862, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	861, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 894, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 894, 0, 884, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 867, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 886, 894, 883, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 884, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 873, 874, 875, 888, 0, 872, 870, 871,
	863, 864, 865, 866, 868, 869, 0, 0, 0, 0,
	1812, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	873, 874, 875, 888, 0, 872, 870, 871, 863, 864,
	865, 866, 868, 869, 0, 0, 0, 0, 1732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 873, 874, 875, 888, 0, 872, 870, 871,
	863, 864, 865, 866, 868, 869, 0, 0, 859, 860,
	1708, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 862, 0, 0, 893, 0, 859, 860, 0, 879,
	880, 881, 889, 890, 891, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 861, 0, 0, 0, 862,
	0, 876, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 860, 0, 879, 880, 881,
	889, 890, 891, 861, 0, 0, 0, 0, 0, 876,
	882, 0, 0, 0, 0, 0, 0, 862, 0, 0,
	893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 886, 894, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 892, 859, 860,
	0, 879, 880, 881, 889, 890, 891, 0, 0, 886,
	894, 0, 884, 0, 882, 0, 0, 0, 877, 0,
	0, 862, 0, 0, 893, 892, 0, 0, 867, 2190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 0, 0, 883, 0, 861, 877, 886, 894, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 887, 0, 883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 886, 894, 0, 0, 2189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 878, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 887, 885, 0, 0, 873, 874, 875,
	888, 0, 872, 870, 871, 863, 864, 865, 866, 868,
	869, 0, 0, 0, 0, 1240, 0, 0, 0, 0,
	0, 0, 885, 0, 0, 873, 874, 875, 888, 0,
	872, 870, 871, 863, 864, 865, 866, 868, 869, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 873, 874, 875, 888, 887, 872, 870,
	871, 863, 864, 865, 866, 868, 869, 859, 860, 0,
	879, 880, 881, 889, 890, 891, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	862, 0, 0, 893, 0, 0, 859, 860, 0, 879,
	880, 881, 889, 890, 891, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 861, 0, 0, 1404, 0, 862,
	876, 0, 893, 0, 885, 0, 0, 873, 874, 875,
	888, 0, 872, 870, 871, 863, 864, 865, 866, 868,
	869, 0, 0, 861, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 1554, 0, 1126, 1553, 1405, 0, 0,
	0, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	886, 894, 0, 0, 0, 0, 0, 882, 0, 0,
	867, 1125, 0, 0, 862, 0, 892, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	894, 884, 0, 0, 0, 0, 0, 877, 861, 0,
	0, 0, 0, 0, 876, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 0, 883, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 886, 894, 1522, 1523, 0, 1540,
	1541, 1542, 0, 0, 0, 0, 887, 0, 0, 0,
	892, 0, 1889, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1537,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 873, 874, 875, 888,
	0, 872, 870, 871, 863, 864, 865, 866, 868, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 885, 0, 878, 873, 874, 875, 888, 0,
	872, 870, 871, 863, 864, 865, 866, 868, 869, 0,
	887, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 0, 1543, 0, 882, 0, 0,
	0, 0, 0, 0, 862, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 0, 0, 859,
	860, 0, 879, 880, 881, 889, 890, 891, 861, 0,
	0, 0, 0, 0, 876, 882, 0, 0, 0, 0,
	0, 0, 862, 0, 0, 893, 0, 885, 0, 0,
	873, 874, 875, 888, 0, 872, 870, 871, 863, 864,
	865, 866, 868, 869, 0, 0, 861, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 859, 860, 1539,
	879, 880, 881, 889, 890, 891, 0, 0, 0, 0,
	0, 0, 0, 882, 886, 894, 0, 0, 0, 0,
	862, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 884, 0, 0, 0, 0,
	876, 877, 886, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 883, 555, 0, 0,
	0, 0, 0, 884, 0, 1534, 1535, 1536, 0, 877,
	1533, 1531, 1532, 1524, 1525, 1526, 1527, 1529, 1530, 0,
	0, 867, 0, 0, 0, 0, 1560, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	886, 894, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1712, 0, 0, 0, 885, 0, 0,
	873, 874, 875, 888, 0, 872, 870, 871, 863, 864,
	865, 866, 868, 869, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 887, 0, 873, 874,
	875, 888, 0, 872, 870, 871, 863, 864, 865, 866,
	868, 869, 859, 860, 0, 879, 880, 881, 889, 890,
	891, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 1555, 0, 0, 862, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	0, 0, 0, 885, 0, 876, 873, 874, 875, 888,
	0, 872, 870, 871, 863, 864, 865, 866, 868, 869,
	859, 860, 0, 879, 880, 881, 889, 890, 891, 0,
	0, 0, 0, 0, 1522, 1523, 882, 1540, 1541, 1542,
	0, 0, 0, 862, 0, 0, 893, 0, 0, 0,
	1888, 0, 0, 0, 859, 860, 867, 879, 880, 881,
	889, 890, 891, 0, 0, 0, 0, 861, 0, 0,
	882, 0, 0, 876, 1513, 886, 894, 862, 0, 0,
	893, 0, 0, 0, 0, 0, 0, 1537, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 0, 0, 884, 876, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 1528, 0,
	0, 0, 0, 886, 894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1543, 884, 0, 0, 886, 894, 0,
	877, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 892, 1538, 0, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 883, 0, 0, 884, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1539, 885, 887,
	0, 873, 874, 875, 888, 0, 872, 870, 871, 863,
	864, 865, 866, 868, 869, 859, 860, 878, 879, 880,
	881, 889, 890, 891, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 887, 0, 0, 0, 0, 862, 0,
	0, 893, 0, 0, 0, 0, 0, 0, 1522, 1523,
	0, 1540, 1541, 1542, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 0, 1701, 0, 885, 0, 876, 873,
	874, 875, 888, 0, 872, 870, 871, 863, 864, 865,
	866, 868, 869, 1534, 1535, 1536, 0, 0, 1533, 1531,
	1532, 1524, 1525, 1526, 1527, 1529, 1530, 0, 0, 0,
	885, 1537, 0, 873, 874, 875, 888, 0, 872, 870,
	871, 863, 864, 865, 866, 868, 869, 859, 860, 867,
	879, 880, 881, 889, 890, 891, 0, 0, 0, 0,
	0, 1522, 1523, 0, 1540, 1541, 1542, 0, 886, 894,
	862, 0, 0, 893, 0, 0, 0, 1700, 0, 0,
	0, 0, 1528, 0, 892, 0, 1522, 1523, 0, 1540,
	1541, 1542, 0, 0, 861, 0, 0, 0, 0, 884,
	876, 0, 0, 0, 0, 877, 0, 0, 1522, 1523,
	0, 1540, 1541, 1542, 1537, 0, 0, 1543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 1538, 1537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 0, 0, 0, 1528, 0, 0, 0, 0,
	886, 894, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	1528, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	1543, 884, 0, 0, 0, 0, 0, 877, 0, 0,
	1544, 1539, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 1538, 0, 0, 0, 1543, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 1543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 873, 874, 875, 888, 1538, 872,
	870, 871, 863, 864, 865, 866, 868, 869, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1539, 0, 887, 1534, 1535, 1536,
	0, 0, 1533, 1531, 1532, 1524, 1525, 1526, 1527, 1529,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 1539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1539, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 1002, 1027, 994, 1018, 1017, 0, 0, 996, 995,
	0, 0, 0, 885, 1029, 1028, 873, 874, 875, 888,
	0, 872, 870, 871, 863, 864, 865, 866, 868, 869,
	1534, 1535, 1536, 0, 0, 1533, 1531, 1532, 1524, 1525,
	1526, 1527, 1529, 1530, 0, 0, 1023, 0, 1015, 1014,
	0, 0, 0, 0, 0, 1534, 1535, 1536, 1013, 0,
	1533, 1531, 1532, 1524, 1525, 1526, 1527, 1529, 1530, 0,
	0, 0, 0, 0, 0, 0, 1012, 1534, 1535, 1536,
	0, 0, 1533, 1531, 1532, 1524, 1525, 1526, 1527, 1529,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1005, 1004, 1006, 1007, 1008, 0,
	1026, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1016, 0, 0, 0, 1003, 0, 1010, 1002, 1027, 994,
	1018, 1017, 0, 0, 996, 995, 0, 0, 0, 0,
	1029, 1028, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 1011, 0, 0, 0, 1175, 1173, 1174,
	1177, 1176, 0, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 1023, 0, 1015, 1014, 0, 0, 0, 0,
	484, 0, 0, 999, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1009, 1000, 0, 0, 0, 0,
	0, 485, 1012, 0, 1031, 0, 486, 0, 0, 0,
	0, 491, 492, 0, 0, 503, 997, 0, 0, 1024,
	1025, 0, 0, 0, 0, 0, 0, 481, 487, 0,
	1005, 1004, 1006, 1007, 1008, 0, 1026, 0, 0, 0,
	0, 1001, 0, 0, 0, 0, 1030, 0, 0, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 0, 0, 488, 0,
	0, 0, 0, 0, 0, 0, 1016, 0, 0, 0,
	1003, 0, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 496, 0,
	0, 493, 498, 0, 0, 0, 0, 0, 0, 1011,
	0, 0, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1009, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	1031, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 0, 1024, 1025, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1001, 497, 499,
	480, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 500, 0, 0, 0, 505, 0, 0,
	0, 501, 0, 0, 0, 0, 482, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 504,
}
var sqlPact = [...]int{

	4162, -1000, 41, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 742, 17602, 17602, 875,
	21942, -1000, -1000, -1000, -1000, -1000, -1000, 694, 1145, 733,
	242, 5511, 21942, 21942, 21632, 1114, 1200, 1198, 1114, 23492,
	-1000, -1000, 27522, -1000, 31786, 487, 492, 487, 487, 494,
	23492, 1018, 600, 14464, 708, 152, -1000, 734, 60, 27212,
	21942, 1508, 27, 19772, 285, 4162, 21322, 26902, 21942, 21012,
	573, 2, 18222, 21942, -1000, 43, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1313, 11209, 11209, 378, 43,
	-1000, 1307, 1211, 1210, 19772, -1000, -1000, -1000, -1000, -1000,
	26592, 26282, 25972, 25662, 25352, -1000, 13174, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	766, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 318, 317, -1000, 20702, -1000, 996, -1000, 16,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11209, 11209,
	992, -1000, 21942, -1000, -1000, 25042, 24732, 667, 316, 1006,
	-1000, -1000, 576, 408, -1000, -1000, 14142, 47, -1000, -1000,
	-1000, -1000, 1323, 1531, 17292, 821, 1302, -1000, 990, 1301,
	1300, 1295, 1294, 1292, -1000, 728, -1000, 635, 497, -1000,
	1291, 402, 777, 475, -1000, 1290, 1288, 1006, -1000, 1006,
	-1000, -1000, -1000, 569, 23492, -1000, -1000, -1000, -1000, -1000,
	19772, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1748, -1000, -1000, -1000, -1000, 1762, -1000, -1000, -1000,
	-1000, 24422, 21942, 21942, 1227, 24112, -1000, 734, -1000, -1000,
	-1000, 1141, 1506, 1506, 1506, 1558, 141, 139, 152, -15,
	21942, -1000, 315, -15, 9533, 9533, -1000, -1000, 285, -1000,
	353, 16660, -1000, 7858, -1000, 939, 1401, 490, 818, 1400,
	-148, 738, 721, 1391, 17292, 18222, 2, -32, -1000, -1000,
	-1000, 5189, 17292, 31195, -1000, 11209, 11209, 11209, 11209, 11209,
	850, 331, -1000, 314, 313, 6504, -1000, -1000, 1756, -1000,
	-1000, -1000, 143, -1000, -1000, 11209, 43, -1000, -1000, -1000,
	-1000, 310, 1772, -1000, 425, -1000, -1000, -1000, 419, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1321, 309,
	308, -1000, -1000, -1000, -1000, 307, 305, 304, 303, 301,
	300, 299, 298, 296, 293, 292, 291, 290, 289, 288,
	793, -1000, 433, -1000, -1000, 433, 433, -1000, 271, 271,
	272, -1000, -1000, -1000, -1000, 271, -1000, -1000, -1000, 394,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 287, 31195, 644,
	15717, 43, -1000, -1000, -1000, 19772, 21942, 21942, 674, 23802,
	-1000, 1388, 120, 1386, -1000, 111, 1379, -1000, 111, 1373,
	-32, 1372, 35, -1000, -1000, 285, 20392, 21942, 1622, 31729,
	-1000, 11209, -1000, -1000, 17602, 1626, 31195, 31195, 17602, -1000,
	-1000, 1621, -1000, 21942, 11209, -4, -1000, -1000, -1000, -1000,
	1119, 1098, 545, 13820, 13498, 1462, 1760, -1000, -1000, -1000,
	46, 5511, 236, 657, -1000, -1000, -1000, 20082, -1000, -1000,
	21942, 1320, 17602, 21942, 21942, 21942, 21942, 21942, -1000, -1000,
	-1000, 491, 1319, 21942, -1000, 1117, -1000, -1000, 21942, 21942,
	739, 598, -1000, -4, -1000, 23492, -1000, 125, -1000, -1000,
	-1000, -1000, 283, 1077, 421, 145, 23182, 421, 1076, -1000,
	1141, -1000, 1002, 1167, 10204, 1158, 11209, 152, -1000, -1000,
	152, 152, 11209, -1000, -1000, 21942, -15, 1614, 21942, 99,
	-1000, 30241, -1000, 99, -1000, -1000, -1000, 21942, 34, -1000,
	31195, -1000, -47, 867, -1000, 19152, 1491, 1486, 1487, 19772,
	1582, 60, 1287, 1578, 60, 1286, 566, 21942, 21942, 565,
	554, 19772, 383, -1000, 21942, -1000, -1000, -70, -1000, 31573,
	31729, 5511, 587, 11209, 11209, 11209, 11209, 11209, 11209, 11209,
	11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209,
	11209, 11209, 11209, 11209, 11209, 1248, 11209, 553, 11209, 11209,
	11209, 11209, 885, 879, 244, 1022, -1000, 1732, 1732, 1732,
	31297, 31297, 231, 331, -1000, 11209, -1000, 9869, 139, 29728,
	-16, -1000, -1000, -1000, 7510, 431, 31195, 43, 6168, -1000,
	1753, 686, 1334, 1260, 282, 135, 132, 11209, 11209, 11544,
	11544, 11209, 11879, 11209, 11209, 6839, 11209, 11209, 11209, 11209,
	11209, 11209, -1000, 275, -1000, -1000, -1000, -1000, 1752, -1000,
	-1000, 1751, -1000, 582, 578, 1745, -1000, 1282, 28, -1000,
	-1000, 428, 107, 1613, 107, 16032, -1000, 21942, 21942, -1000,
	21942, -1000, -1000, 21942, -1000, 21942, 21942, -1000, 21942, 21942,
	236, 18532, 736, 1369, 638, 236, 26, -1000, 1631, -1000,
	-1000, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 272, 793, 271, 271, 271, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 394, -1000, -1000, 433, 433, 433,
	-1000, -1000, 24, 31195, 550, -1000, 1281, 486, -1000, 406,
	20, 1006, 831, -1000, -1000, -1000, -1000, -1000, -1000, -30,
	-1000, -1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1771, 5511, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 21942, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 236,
	-1000, -1000, -1000, -1000, 21942, 21942, 21942, -1000, -1000, 19772,
	18842, 1608, 1365, 825, -1000, 1603, 21942, 989, 1075, -1000,
	594, 1363, -1000, -1000, -1000, -1000, 31195, -1000, 382, -1000,
	-1000, 31195, 829, 1215, -1000, 1215, -31, -1000, 30156, -1000,
	261, 14, 428, 9533, 15403, 5511, -1000, 428, 131, 7858,
	-1000, 736, 21942, 21942, 21942, -1000, -1000, 1064, 22872, 1063,
	31729, 21942, -1000, 255, 252, 1176, 1161, 21942, 21942, 22562,
	22252, 21942, 918, 60, -1000, 248, 60, -1000, 245, 21942,
	717, -1000, 21942, 21942, 713, 1239, 1010, -1000, 422, 17292,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	401, 1196, 1196, 586, 586, 586, 586, 1713, 198, 1001,
	962, 2594, 2594, 2594, 346, 167, 167, 2594, 2594, 2594,
	31297, 29868, 188, 11209, 11209, 542, 856, 244, 188, 11209,
	188, 188, 188, 188, -1000, 1015, -1000, -1000, -1000, -1000,
	1280, 241, 11879, 11879, -1000, -1000, -1000, 6504, 12214, -1000,
	-1000, -1000, -1000, 237, 11209, -1000, 29756, -197, 3, -1000,
	-1000, 11209, 15, -149, -1000, -1000, 653, -1000, 11209, -1000,
	-21, 11209, 11209, 11209, 127, 126, -1000, 533, -1000, 532,
	530, 529, -1000, 234, 920, 233, 232, 11209, -1000, -1000,
	30964, 3987, 124, 1279, -138, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 118, 112, 30930, -138, 109, 31336, -1000, 11879,
	11879, 11879, 6504, 230, 108, 30127, -138, 30862, 9198, 9198,
	9198, 105, 30597, 11209, -138, 3793, 3541, 3255, 1, -7,
	-8, 1742, -17, 104, 397, 390, 103, 641, 1278, 21942,
	699, 11209, 886, -1000, 15089, 441, 21942, 699, 83, -1000,
	-1000, -1000, 379, 21942, -1000, -1000, -1000, 120, -1000, 111,
	111, -32, -1000, -1000, 19772, -1000, -1000, 31729, 330, 276,
	-1000, 1738, -1000, 11209, 21942, 21942, 1207, -1000, -1000, -1000,
	726, -1000, 784, -1000, 14464, -1000, -77, -1000, -1000, -1000,
	-1000, 383, -1000, 98, -33, -41, 31729, -1000, -1000, -1000,
	-1000, -1000, 21942, 306, 21942, 60, 21942, -1000, 1770, 60,
	21942, 1361, 1408, 373, 21942, 829, -1000, 11209, 1724, -1000,
	-1000, -1000, 11209, -1000, -1000, -1000, 236, -1000, 1250, -1000,
	-137, 2071, 156, -175, 101, 387, -1000, 14775, -1000, 1250,
	-1000, -1000, -1000, -1000, 525, 517, 1356, -1000, 1042, -1000,
	445, -1000, 971, 11209, 12860, 229, 228, 956, -1000, 1352,
	1032, 1349, 1032, -1000, -47, 772, -1000, 11209, -1000, 11209,
	-1000, 512, -1000, -1000, 511, 422, 1277, 612, -1000, 979,
	-1000, 11209, 188, 188, 11209, 11879, 11879, -1000, 188, -1000,
	-1000, -1000, -1000, -1000, 1274, 225, 11209, 31729, 31311, 31228,
	-34, -1000, 8863, -51, -1000, 11209, -1000, 29393, -1000, -1000,
	169, 1405, -1000, 11209, 30529, 92, 8528, -1000, 30491, -24,
	-24, -1000, 1769, 1087, 1029, 890, 684, 1699, -1000, 16346,
	429, 976, 29361, 31573, 31729, -1000, 11209, -1000, -1000, 1271,
	11209, -1000, 31573, 31729, 11879, 11879, 11879, 11879, 11879, 11879,
	11879, 11879, 11879, 11879, 11879, 11879, 11879, 11879, 11879, 11879,
	11879, 11879, 11879, 1147, 11879, 1730, 1730, 1730, -64, 8193,
	-1000, 1318, 1271, 11209, 11209, 31729, 90, 89, 88, -1000,
	11209, -138, 11209, 11209, 11209, -1000, -1000, -1000, 82, -1000,
	1693, -1000, -1000, -1000, -1000, -1000, 631, -1000, -1000, 7174,
	31195, -1000, 699, 1512, -46, -1000, -1000, -1000, 428, 16032,
	15403, 7858, -52, -1000, -1000, -1000, 736, -1000, 563, 1689,
	79, 31195, -77, -77, -1000, -1000, -1000, -1000, -1000, 21942,
	-1000, 1231, -1000, 18842, 220, 21942, 218, -1000, 214, -1000,
	-1000, 212, 21942, 1124, 373, 17912, -1000, 421, 981, 29333,
	-1000, 78, 1249, 1556, -1000, 15403, 1197, 1191, 15403, 1088,
	945, 945, 945, -1000, 209, 328, 387, 4531, 11209, 19462,
	941, 66, 77, 2071, 1249, 21942, 21942, 21942, 1346, -1000,
	2193, -1000, 28998, -53, -1000, 329, 1523, 11209, -1000, -1000,
	207, 12860, 21942, -1000, 1182, 1151, 480, 21942, -1000, 21942,
	-1000, 21942, 21942, 21942, -54, -68, 21942, 21942, -1000, 17292,
	548, 206, 1728, 188, 30944, 30366, 11209, 31729, 3731, -73,
	11209, 11209, -1000, -79, -1000, 11209, 327, 31195, -1000, -1000,
	-1000, 31195, 11209, 1766, 11209, 75, 71, 70, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 69, -1000, -1000, 27832,
	11209, 68, -1000, 65, 64, 31195, 1318, 31195, -1000, -1000,
	485, 485, 679, 679, 679, 679, 1730, 2220, 470, 1475,
	954, 954, 954, 2171, 557, 557, 954, 954, 954, 1269,
	1159, 205, 31358, 11209, -83, -1000, -1000, -1000, 31195, 31195,
	63, -1000, -1000, -1000, -138, 274, 28966, 28938, -1000, 62,
	-1000, -88, -1000, -1000, 213, 60, 699, -1000, -102, -1000,
	374, -1000, 325, 324, -1000, -1000, -1000, 1233, -1000, 12860,
	204, 21942, 18842, 1600, 12860, 988, 1149, 373, 17912, -1000,
	594, -1000, -1000, -1000, 424, 11209, 11209, 2071, 15403, 15403,
	1070, 1152, 15403, -1000, -1000, -1000, -1000, 323, 385, 387,
	19462, -1000, 1678, 1168, -84, -1000, -1000, 21942, 203, -1000,
	387, 424, -1000, -1000, -1000, 21942, -1000, 21942, -1000, 5511,
	21942, 1261, 1031, -1000, -1000, 1160, 201, 11879, 21942, -1000,
	833, 12860, 1501, 43, 5511, 1501, 28603, 6168, -90, -94,
	1016, -1000, 1009, 11209, -1000, 31729, 1032, 1032, -1000, 508,
	507, 506, 504, -1000, -1000, -122, 16982, 1768, 11209, 11209,
	3731, -100, -1000, 188, 188, -1000, 28571, -1000, 31195, -1000,
	30491, -1000, -1000, -1000, -1000, 815, -1000, 28543, -1000, -1000,
	-1000, -1000, 11879, 1267, 199, 31729, 28208, -1000, -1000, 11209,
	-1000, -1000, -1000, 1421, 21942, 1478, -1000, -1000, 195, -1000,
	-1000, 840, -101, 12860, -106, 55, 60, -107, 21942, -1000,
	373, 17912, -1000, 1408, -1000, 21942, 31195, -138, -1000, 1070,
	-1000, 186, 11209, 15403, -1000, -175, -1000, -108, -1000, 19462,
	-1000, 322, -192, -1000, 372, -1000, 387, 185, 21942, 19462,
	-1000, -1000, 1194, -1000, -1000, 21942, 1036, -1000, -1000, 11209,
	31358, 174, 1231, 173, -1000, -1000, -1000, -1000, -1000, -1000,
	1523, -21, -1000, 740, -1000, -1000, 31195, 1521, -1000, -1000,
	21942, 21942, 168, 165, -1000, 155, 43, -112, -1000, 362,
	188, 188, -1000, -1000, 54, 976, 1544, -1000, 3970, 11879,
	31729, -113, -1000, 28176, 579, -114, 21942, -1000, -1000, 5833,
	21942, 833, -120, -1000, 1231, -1000, 833, 153, 17912, -1000,
	1124, -131, -1000, 1591, -1000, 21942, 31195, -1000, 387, -1000,
	1672, -1000, -1000, 1168, -1000, 4864, 19462, 21942, -130, -1000,
	-1000, -1000, 1345, 28148, 1090, 21942, -1000, 21942, 1501, 52,
	21942, 449, 5511, -1000, -1000, 11209, 11209, 11209, 1768, -1000,
	-1000, 1767, -1000, 814, 11209, 3970, -136, -1000, -1000, 669,
	-1000, 428, -1000, 147, 1231, 833, -1000, 1231, 12860, -1000,
	1149, 21942, 146, -140, 19462, -1000, -1000, -1000, 1670, -1000,
	-157, -1000, 1337, -1000, 983, 871, 51, -164, -1000, -1000,
	145, -1000, 11209, -1000, -165, -176, -24, -1000, -1000, 50,
	10874, 10874, -138, -1000, 16032, -1000, 21942, -1000, 1231, -1000,
	-181, -1000, -1000, -1000, -1000, -1000, 321, -1000, 21942, -1000,
	985, 984, 683, -1000, -1000, -1000, -1000, -1000, 1090, 31195,
	-1000, -1000, 49, -1000, -1000, -1000, 12538, 1054, 696, 29794,
	-1000, -153, -183, -1000, 833, -1000, -1000, -1000, 1433, -1000,
	473, 982, 982, 983, 1766, 1636, -1000, -1000, -1000, -1000,
	-1000, -1000, 1005, 1231, -1000, 1643, -1000, -1000, 1127, -1000,
	-1000, 10539, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2040, 2038, 1527, 1732, 2035, 2034, 2030, 1671, 2029,
	2028, 2026, 2025, 2022, 2021, 1668, 2020, 1665, 1641, 1631,
	2019, 107, 2018, 2017, 2015, 1617, 2010, 2005, 2000, 1999,
	1998, 1997, 76, 1996, 1995, 1603, 1554, 1548, 1541, 1990,
	1985, 1539, 1980, 1979, 14, 1974, 73, 1973, 35, 147,
	2564, 140, 1972, 1968, 1967, 21, 111, 64, 1966, 206,
	1965, 1964, 56, 33, 23, 19, 1959, 102, 1958, 1957,
	1389, 48, 1956, 1953, 133, 1952, 29, 25, 188, 150,
	146, 127, 122, 1951, 1948, 1947, 1943, 42, 1941, 1,
	1940, 1938, 10, 82, 17, 1937, 78, 24, 1936, 1934,
	129, 1930, 68, 104, 1531, 134, 130, 187, 1929, 66,
	8, 65, 1927, 1924, 152, 31, 1923, 26, 75, 139,
	1922, 45, 153, 51, 28, 59, 124, 1920, 1919, 1917,
	103, 1915, 120, 91, 1914, 1913, 79, 1912, 132, 135,
	1909, 1908, 101, 1906, 116, 1905, 1901, 143, 156, 1900,
	148, 1897, 1896, 155, 115, 5, 57, 62, 18, 1512,
	1509, 123, 95, 30, 20, 1894, 2222, 32, 1054, 34,
	108, 67, 43, 109, 47, 92, 144, 46, 1893, 1886,
	126, 1885, 1879, 1877, 1875, 1873, 106, 1872, 1871, 61,
	142, 11, 22, 27, 97, 36, 69, 83, 105, 154,
	110, 1869, 85, 119, 1866, 205, 1864, 1863, 1707, 128,
	1860, 1844, 1843, 1526, 1492, 1468, 865, 1841, 1840, 1312,
	934, 1839, 1833, 70, 1830, 136, 113, 1828, 137, 222,
	138, 1825, 121, 72, 96, 1822, 117, 44, 0, 627,
	254, 1821, 125, 86, 1808, 1807, 1806, 1805, 16, 3,
	9, 6, 7, 2, 49, 37, 1804, 1801, 131, 98,
	58, 1800, 151, 1799, 1798, 1796, 40, 1793, 15, 1792,
	12, 1791, 1790, 13, 4, 1789, 1788, 141, 1787, 100,
	1784, 1622, 1783, 145, 1782, 1781, 1667, 50, 112,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 54, 54, 59, 59,
	59, 61, 61, 58, 58, 53, 53, 5, 5, 236,
	236, 237, 237, 43, 43, 47, 47, 44, 45, 45,
	46, 46, 7, 7, 7, 6, 6, 8, 8, 8,
	8, 8, 8, 15, 16, 16, 16, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 106,
	106, 105, 105, 108, 108, 18, 18, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	204, 204, 203, 20, 178, 178, 22, 131, 131, 23,
	23, 23, 23, 24, 31, 277, 277, 277, 281, 281,
	282, 282, 283, 283, 283, 283, 283, 283, 283, 279,
	279, 29, 29, 29, 29, 42, 34, 34, 34, 34,
	34, 34, 151, 148, 148, 147, 147, 147, 147, 149,
	149, 149, 149, 152, 152, 86, 86, 229, 228, 228,
	234, 234, 234, 84, 84, 84, 84, 84, 85, 85,
	85, 227, 227, 227, 227, 235, 235, 235, 235, 235,
	235, 233, 233, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 19, 278, 278, 280, 280, 26,
	36, 36, 37, 37, 38, 38, 38, 38, 11, 11,
	12, 12, 87, 87, 88, 88, 157, 157, 157, 157,
	89, 89, 60, 60, 60, 156, 246, 246, 247, 247,
	247, 247, 247, 247, 248, 248, 248, 248, 248, 248,
	248, 244, 244, 245, 242, 242, 243, 243, 243, 243,
	284, 284, 155, 155, 92, 92, 251, 251, 251, 251,
	249, 249, 249, 249, 249, 252, 250, 253, 253, 253,
	253, 253, 190, 190, 190, 40, 13, 66, 66, 14,
	10, 10, 135, 135, 96, 96, 195, 195, 195, 77,
	77, 55, 55, 55, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 136, 136, 137, 137, 27,
	30, 33, 39, 39, 39, 39, 39, 286, 286, 73,
	73, 73, 73, 74, 74, 150, 150, 153, 153, 154,
	154, 154, 68, 67, 69, 69, 9, 9, 62, 62,
	63, 63, 64, 64, 65, 65, 287, 287, 25, 25,
	25, 80, 80, 144, 144, 144, 146, 146, 145, 145,
	145, 121, 121, 121, 41, 101, 101, 110, 110, 111,
	111, 201, 112, 112, 32, 32, 50, 50, 48, 48,
	48, 48, 48, 48, 49, 49, 51, 51, 51, 51,
	51, 51, 51, 259, 259, 259, 262, 262, 258, 260,
	260, 261, 261, 285, 285, 122, 122, 122, 91, 90,
	90, 94, 94, 93, 95, 95, 194, 119, 119, 119,
	119, 138, 138, 139, 139, 140, 140, 141, 141, 141,
	142, 142, 143, 143, 118, 118, 174, 174, 52, 52,
	100, 100, 102, 102, 164, 164, 164, 165, 165, 163,
	163, 163, 163, 196, 196, 196, 196, 196, 196, 196,
	275, 275, 275, 276, 276, 193, 193, 197, 197, 197,
	197, 197, 197, 191, 191, 191, 191, 192, 192, 202,
	202, 125, 125, 125, 125, 123, 123, 124, 124, 198,
	198, 198, 198, 120, 120, 199, 199, 199, 158, 158,
	205, 205, 205, 223, 223, 99, 99, 99, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 207, 207, 207, 207, 209,
	209, 209, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 222, 222, 222, 222,
	222, 210, 210, 217, 217, 218, 218, 219, 220, 211,
	211, 212, 212, 213, 214, 221, 221, 221, 221, 225,
	225, 215, 215, 215, 215, 215, 216, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 168, 168, 168, 168, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	254, 254, 254, 254, 254, 254, 254, 256, 256, 257,
	257, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 263, 263,
	264, 264, 266, 266, 267, 267, 268, 269, 269, 269,
	270, 271, 271, 265, 265, 272, 272, 272, 273, 273,
	274, 274, 274, 274, 274, 180, 180, 180, 181, 181,
	182, 188, 188, 188, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	75, 75, 75, 75, 75, 107, 107, 177, 177, 175,
	175, 175, 179, 179, 126, 126, 224, 224, 224, 224,
	224, 224, 224, 127, 127, 127, 134, 128, 128, 129,
	129, 129, 129, 129, 129, 171, 172, 130, 130, 130,
	173, 173, 183, 187, 187, 186, 185, 185, 184, 184,
	161, 161, 162, 162, 160, 159, 115, 115, 114, 114,
	113, 113, 288, 288, 189, 189, 116, 116, 117, 109,
	109, 200, 200, 200, 200, 103, 103, 82, 82, 104,
	104, 78, 78, 81, 81, 79, 79, 79, 79, 97,
	97, 98, 98, 76, 76, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 226, 226, 226, 176,
	70, 70, 70, 71, 71, 72, 72, 231, 231, 231,
	232, 232, 232, 232, 230, 230, 230, 230, 230, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 3, 3, 1, 1, 1,
	1, 1, 1, 6, 2, 2, 2, 2, 2, 3,
	5, 4, 6, 4, 6, 4, 6, 3, 5, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 3, 6, 3,
	4, 1, 5, 2, 1, 3, 3, 3, 3, 1,
	3, 3, 1, 2, 2, 1, 0, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	4, 4, 4, 4, 2, 4, 4, 4, 4, 4,
	4, 2, 3, 3, 2, 3, 4, 4, 5, 2,
	3, 3, 4, 2, 3, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 3,
	6, 6, 5, 5, 4, 12, 4, 12, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 5, 2, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	3, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	6, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 7, 4, 6, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -22, -23, -24, -25, -26,
	-28, -30, -31, -33, -32, -34, -35, -36, -37, -38,
	-39, -27, -29, -40, -41, -42, 23, 34, 233, 47,
	67, -9, -10, -11, -12, -13, -14, -261, 92, 96,
	105, 127, 213, 103, 88, 121, 207, 235, 237, 244,
	-48, -50, 255, -151, 258, 35, 267, 61, 99, 239,
	231, 232, 295, 304, 69, -259, -51, -49, 346, 320,
	327, 248, -52, 276, 312, 349, 276, 136, 81, 315,
	-277, -104, 276, 81, -79, -70, 339, 4, -238, -240,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	79, 80, 82, 84, 88, 90, 92, 95, 96, 98,
	103, 104, 105, 111, 112, 115, 117, 122, 127, 128,
	129, 130, 137, 140, 142, 135, 150, 151, 152, 154,
	155, 156, 159, 158, 163, 166, 169, 171, 172, 173,
	176, 174, 178, 179, 181, 180, 186, 188, 189, 191,
	194, 197, 200, 203, 204, 205, 206, 207, 209, 211,
	213, 215, 216, 217, 218, 219, 221, 222, 224, 225,
	226, 227, 228, 231, 229, 230, 232, 233, 234, 235,
	237, 239, 240, 242, 256, 257, 268, 244, 245, 246,
	247, 251, 249, 252, 253, 255, 258, 260, 263, 266,
	267, 269, 272, 270, 265, 275, 277, 278, 279, 280,
	281, 282, 283, 290, 291, 295, 296, 297, 298, 301,
	302, 303, 304, 306, 309, 310, 311, 316, 321, 322,
	323, 324, 325, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 83, 85, 86, 102,
	106, 107, 113, 123, 125, 131, 132, 141, 143, 144,
	145, 147, 161, 175, 185, 187, 198, 202, 210, 212,
	220, 241, 250, 261, 262, 271, 273, 285, 286, 287,
	292, 293, 308, 312, 313, -277, 151, 217, -78, -70,
	81, 90, 140, 303, 302, 22, 209, 249, 278, 280,
	81, 136, 276, 315, 305, -21, 346, -32, -8, -17,
	-4, -25, -41, -15, -35, -19, -36, -37, -38, -18,
	23, -230, 4, -238, -240, -239, -241, 58, 70, 120,
	139, 133, 149, 153, 162, 164, 177, 199, 201, 238,
	259, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 65, 69, 73, 74,
	75, 76, 77, 78, 87, 89, 91, 93, 94, 97,
	99, 101, 108, 109, 110, 116, 118, 119, 121, 124,
	126, 134, 136, 138, 146, 148, 157, 160, 165, 167,
	168, 182, 183, 184, 190, 192, 193, 195, 196, 208,
	214, 223, 236, 248, 254, 264, 274, 276, 284, 288,
	289, 294, 299, 300, 305, 307, 314, 315, 317, 318,
	319, 320, -70, -70, -70, 213, 22, -281, 22, -282,
	-283, 69, 96, 121, 248, 140, 90, 302, 151, 151,
	-281, -74, 244, -70, -148, 166, 252, 55, 241, 291,
	-149, -147, -229, 285, -152, -105, 176, -70, 4, 176,
	254, 81, 290, 22, 34, 55, 60, 82, 122, 136,
	137, 65, 66, 155, 216, 166, 152, 252, 156, 253,
	277, 285, 291, 69, 306, 281, 104, -286, 291, 291,
	-286, -286, -73, 291, 288, -74, 4, 81, 254, 176,
	-285, 276, -234, -227, -190, 9, 294, 108, 192, -233,
	8, 338, -226, -232, 5, 7, 337, 4, -238, -240,
	-239, 276, 305, 315, -135, 81, 300, -49, -51, -50,
	-93, -94, 299, 146, 101, 196, -48, -50, -259, -262,
	221, -258, -70, -262, -90, -91, 22, 93, 350, -198,
	-78, 193, -117, 346, -3, -198, 131, -78, -81, 131,
	-78, -70, -198, 131, 288, 350, -104, -97, -70, -160,
	-159, 348, 119, -166, -168, 337, 338, 332, 182, 326,
	-180, -170, -183, 102, 241, 346, -78, -169, 351, 9,
	-256, -50, 29, -181, -182, 49, -70, 7, 8, 5,
	6, -76, -207, -176, -216, 294, 108, 184, -254, -255,
	4, -238, -231, -208, -218, -212, -215, 147, 58, 74,
	77, 75, 78, 254, 305, 50, 28, 106, 107, 202,
	210, 273, 292, 293, 131, 185, 132, 56, 123, 161,
	95, 37, 39, 41, 42, 51, 52, 83, 85, 86,
	113, 141, 143, 144, 145, 187, 220, 261, 271, 286,
	287, 313, -239, -219, -220, -213, -214, -221, -166, 119,
	346, -114, -115, -159, -160, 119, 148, 148, -199, -198,
	-70, 131, -82, 131, -81, -106, 131, -105, -106, 131,
	-97, 131, -204, -203, -232, 312, 276, 136, -178, 346,
	-131, 346, -70, 22, 192, 350, -166, -166, 192, -70,
	-148, 53, -148, 256, 346, -153, -154, -67, -68, -69,
	150, 215, 219, 288, 331, 119, 325, -234, -86, 87,
	-108, 348, 116, 55, -236, -233, 9, 256, 216, 253,
	119, -278, 192, 119, 119, 119, 119, 119, 216, 253,
	290, 156, 290, 119, 325, 150, 215, 268, 276, 315,
	119, 119, -150, -153, -150, 288, -74, -120, -198, 8,
	7, 7, -105, 131, -70, -105, 136, -70, 131, -93,
	-94, -119, -138, -139, 165, 110, 190, -122, 22, 93,
	-122, -122, 44, 347, 347, 350, -262, -98, 346, -109,
	-200, -166, 339, -109, -117, 339, -78, 346, -116, -189,
	-166, 87, -57, 229, -56, 21, 23, 96, 310, 102,
	265, 282, 245, 265, 282, 245, 229, 102, 351, 229,
	229, 102, -236, -79, 350, -230, 339, -237, -236, 10,
	11, 57, 33, 337, 338, 339, 340, 114, 341, 342,
	335, 336, 334, 329, 330, 331, 63, 170, 243, 13,
	14, 15, 26, 195, 164, 326, 133, 259, 332, 16,
	17, 18, 149, 36, 134, -75, -83, -166, -166, -166,
	-166, -166, 201, -113, -161, 344, -50, 346, -50, -166,
	-107, 7, -50, -175, 344, -184, -166, -114, 346, 5,
	346, 5, -263, 321, 116, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 212, -225, 316, -225, -225, -209, 346, -209,
	-210, 346, -209, 322, 327, 346, 269, 347, -103, -78,
	-115, -199, -80, -78, -80, 255, -70, 30, 102, -59,
	350, 48, 234, 102, -59, 350, 102, -59, 102, 102,
	347, 350, -198, 131, -81, 30, -177, -205, -206, -208,
	-217, -211, -215, -216, 40, 46, 45, 283, 175, 250,
	262, 308, 38, 191, 142, 141, 143, 144, 145, 261,
	37, 220, 113, 95, 86, 85, 187, 42, 41, -219,
	-220, -213, -214, 83, 286, 287, 147, 39, 52, 51,
	313, 271, -107, -166, -277, -283, -277, 30, -147, -229,
	-107, 350, 163, -85, 169, 181, 128, 193, 323, -228,
	87, -234, -228, 87, 72, -235, 5, 4, -176, -190,
	87, 166, -216, 348, -230, -21, 257, -105, 22, -229,
	-280, 116, -277, -229, -229, -229, -229, -229, 290, 116,
	-70, 163, -229, -229, 276, 136, 276, -74, -59, 350,
	346, -92, 182, -260, 320, -92, 346, -71, 131, -70,
	-260, 182, -119, -139, -138, -140, -166, 22, -143, 112,
	178, -166, -168, -49, -49, -49, -95, -194, -166, -258,
	30, -97, -100, 350, 119, 30, 4, -100, -78, 350,
	347, 350, 288, -136, 65, 59, -156, 131, 59, -242,
	-70, 65, -243, 54, 300, 214, 118, -136, 65, -136,
	65, 65, -198, 33, -32, 119, 33, -32, 119, 288,
	-81, -70, 288, 288, -198, -202, 328, -70, -202, 350,
	-223, -205, -222, 225, 226, 224, 228, 227, -205, -230,
	285, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, 164, 133, 259, 36, 134, -166, 288,
	-166, -166, -166, -166, 174, 182, 184, 294, 108, 301,
	93, 188, -288, 274, 32, -173, -50, 346, -188, 27,
	264, 22, -180, 241, 346, -161, -166, -162, -107, 347,
	347, 350, -107, -179, 345, -175, -187, -186, 317, 347,
	-107, 314, 22, 93, 339, 7, -132, 324, 173, 84,
	129, 172, -133, 247, -264, 111, 124, 346, 347, 347,
	-166, -166, -126, -224, -107, 4, 324, 173, 84, 129,
	172, 247, -126, -127, -166, -107, -128, -167, -168, 337,
	338, 332, 346, 241, -129, -166, -107, -166, 43, 160,
	289, -130, -166, 119, -107, -166, -166, -166, -107, -107,
	-107, 346, 7, 7, 285, 285, 7, 119, 347, 350,
	-158, 318, -144, -32, 346, 87, 30, -144, -110, -111,
	-201, -112, -78, 346, -70, -70, -81, -82, -105, -106,
	-106, -97, -21, -203, 102, -21, 347, 350, -99, 29,
	-132, 346, 347, 350, 288, 119, 291, 347, -154, -84,
	219, 263, 230, 251, 350, -230, -279, -70, -21, -78,
	-81, -78, -198, -87, -97, -88, -70, -157, -156, -244,
	-245, -242, 136, 300, 109, 30, 102, -66, 206, 30,
	192, 182, -62, 279, 102, -141, -226, 346, 338, -142,
	241, 242, 350, -55, 31, 91, 346, 347, -158, -200,
	-102, -196, 344, -198, -78, -50, -197, 346, -230, -158,
	347, -189, -56, -78, -70, -70, 182, -156, 131, -61,
	182, -205, -70, 346, 346, 154, 154, -70, -70, 131,
	-70, 131, -70, -70, -57, 229, -32, 346, -32, 346,
	-70, 229, -70, -78, 229, -43, 130, 188, -46, 320,
	-236, 325, -166, -166, 288, -288, 274, -173, -166, 174,
	184, 294, 108, 301, 93, 188, 119, 346, -167, -167,
	-107, -170, 346, -107, 345, 354, 347, -166, 345, 345,
	350, -185, -186, 97, -166, -94, 350, -93, -166, -107,
	-107, 347, 347, 288, 288, 288, 288, 346, -269, 200,
	346, 346, -166, 30, 350, 347, 119, 347, 347, -134,
	208, 347, 10, 11, 337, 338, 339, 340, 114, 341,
	342, 335, 336, 334, 329, 330, 331, 63, 170, 243,
	13, 14, 15, 149, 134, -167, -167, -167, -107, 346,
	347, -171, -172, 119, 116, 30, -130, -130, -130, 347,
	119, -107, 350, 350, 350, 347, 347, 347, 7, 347,
	350, 347, 325, 325, 347, 269, 119, -78, -121, 236,
	-166, -121, -146, 192, -103, 312, -70, -121, -101, 350,
	119, 331, -103, -59, -59, -59, -198, -205, 344, 344,
	7, -166, -279, -279, -67, 298, 62, 219, -234, 350,
	-202, 347, 347, 350, -71, 136, -71, -32, -105, 5,
	-32, -78, 102, -63, 98, -287, 331, -70, -142, -166,
	-194, -21, -118, 124, -202, 350, 70, -125, 153, 177,
	120, 162, 238, 139, 7, -21, -163, 351, 346, -193,
	327, -50, -197, -196, -118, 288, 288, 102, 182, 309,
	-246, -243, -166, -96, -195, -70, -257, 346, -254, -255,
	-76, 346, 346, -54, 96, 255, -137, 102, -59, 102,
	-59, 288, -136, 65, -107, -107, 288, 288, -46, 119,
	275, 194, -166, -166, -167, -167, 119, 346, -166, -177,
	26, 26, 347, -107, 347, 350, -162, -166, 347, -175,
	99, -166, 284, 347, 314, -94, -94, -94, 5, 173,
	129, 172, -133, 172, -133, -133, 7, -270, -70, 346,
	318, -93, 347, -223, -205, -166, -171, -166, -223, -205,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, 93,
	182, 188, -167, 350, -107, 347, -172, -171, -166, -166,
	-205, 347, 347, 347, -107, -166, -166, -166, 347, 7,
	269, -109, 183, -121, 64, 347, -158, -111, -102, -189,
	347, 345, 7, 7, 347, -70, -89, 135, -157, 346,
	-71, 346, 346, -92, 346, -70, -64, 159, -287, -233,
	-260, 193, 347, 347, -174, 126, 44, -196, 153, 153,
	-196, -125, 153, -123, 199, -123, -123, -275, 346, 345,
	-193, -230, 344, 352, -107, -192, -191, 30, -70, 197,
	347, -174, -70, -70, -156, 102, -247, 65, -248, 57,
	109, 69, 182, 184, 300, 214, 54, 87, 223, 347,
	347, 350, -77, -114, 57, -77, -166, 346, -96, -97,
	182, 87, 182, 87, 80, 296, -70, -70, -78, -70,
	-70, 347, 347, -70, -78, -237, 285, 346, 26, 26,
	-166, -177, 347, -166, -166, 347, -166, 345, -166, 5,
	-166, 347, 347, 347, 347, -271, -70, -166, 347, 347,
	347, -172, 119, 93, 188, 346, -166, 347, 347, 350,
	347, 347, 347, -145, 346, 192, -32, -121, 331, 345,
	345, 134, -96, 346, -97, -87, 30, -96, 192, -65,
	158, -287, -233, -62, -266, 319, -166, -107, -196, -196,
	-124, 307, 192, 153, -196, 345, 347, -276, 7, -193,
	-192, 7, -165, -164, 117, 180, 347, -70, 346, -193,
	-266, -156, -70, -230, -70, 109, 131, 184, 154, 346,
	-167, -78, -155, -284, 68, 272, -195, -55, -230, -55,
	347, -107, 347, 347, 184, 184, -166, -205, -59, -59,
	288, 288, 288, 288, -169, -76, -70, -45, -44, 5,
	-166, -166, 347, 347, -94, -265, 205, 347, -167, 119,
	346, -177, 347, -166, 94, -97, 65, -117, -50, 346,
	203, 347, -96, 347, 347, -32, 347, -78, -287, -233,
	-63, -267, -268, -70, -124, 346, -166, -196, -163, 347,
	350, -192, 345, 350, 353, 331, -193, 346, -97, -191,
	-248, -71, 182, -166, -72, 346, -89, 346, -77, -94,
	223, -58, 57, -70, -70, 346, 346, 346, 350, 347,
	-47, 331, 347, -94, 44, -167, -177, 347, 347, 302,
	183, 347, -70, -70, -155, 347, -89, -155, 346, -233,
	-64, 350, 30, -97, -193, 7, -164, -230, 344, -192,
	-97, 347, 102, 347, -251, 171, -70, -97, -55, 347,
	-78, -53, 307, -230, -107, -107, -107, -44, 5, -272,
	218, 242, -107, 347, 255, -158, 346, -89, -155, -89,
	-96, -65, -268, -270, 347, -191, 7, 347, 109, -249,
	-252, -250, 192, 120, 204, 260, 347, 347, -92, -166,
	347, 347, -94, 347, -273, -274, 36, 297, 72, -166,
	-273, -110, -97, -89, 347, 345, -70, -250, 192, -252,
	192, 302, 90, -251, 347, -274, 211, 115, 241, 211,
	115, -158, 347, -155, -253, 179, 234, 48, 255, -253,
	-249, 26, -60, 48, 234, -89, 20, 184, 87, -274,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 0, 0, 0, 0,
	0, 87, 88, 89, 90, 91, 92, 0, 0, 0,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	434, -2, 0, 171, 0, 378, 0, 378, 378, 382,
	0, 0, 464, 0, 343, 461, -2, 472, 0, 0,
	0, 470, 448, 0, 0, -2, 0, 0, 0, 0,
	0, 145, 0, 1001, 929, 935, 936, 960, 961, 962,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 0, 0, 0, 0, 931,
	1001, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	0, 0, 0, 0, 0, 115, 0, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	0, 254, 974, 975, 976, 977, 978, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 135, 138, 139, 1060, 141, 0, 148, 149,
	150, 152, 153, 154, 155, 156, 157, 158, 0, 0,
	0, 371, 1087, 384, 166, 1035, 1093, 989, 1171, 1114,
	174, 179, 0, 1177, 182, 187, -2, 111, 213, 214,
	215, 216, 217, 218, 0, 0, 0, 224, 256, 0,
	0, 0, 0, 0, 231, 0, 234, 0, 0, 239,
	243, 0, 0, 0, 250, 0, 0, 386, 377, 386,
	374, 375, 376, 379, 0, 369, 161, 162, 163, 164,
	0, 463, 165, 190, 191, 192, 201, 202, 203, 204,
	332, 0, 334, 211, 212, 956, 0, 970, 971, 972,
	973, 0, 0, 0, 0, 0, 342, -2, 444, 445,
	-2, 0, 467, 467, 467, 0, 0, 445, 0, 453,
	1066, 456, 942, 454, 0, 0, 469, 468, 0, 449,
	549, 0, 498, 0, 2, 0, 1155, 549, 0, 1155,
	934, 0, 0, 1155, 0, 0, 146, 147, 939, 937,
	938, 0, 0, 85, 653, 0, 0, 0, 0, 0,
	0, 745, 747, 1149, 1171, 0, 749, 750, 0, 752,
	754, 755, 0, 758, 759, 899, 931, 945, 946, 947,
	948, 0, 0, 951, 0, 953, 954, 955, 799, 768,
	-2, -2, 943, 585, 586, 587, 588, -2, 1185, 772,
	774, 776, 777, 778, 779, 0, 1133, 1150, 1151, 1167,
	1168, 1176, 1180, 1181, 1155, 1164, 1156, 1145, 1153, 1162,
	1007, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 969, 615, 616, 621, 622, 624, 86, 0,
	0, 932, 908, 906, 907, 0, 0, 0, 0, 555,
	99, 1155, 60, 1155, 927, 60, 1155, 109, 60, 1155,
	107, 1155, 0, 130, 132, 1183, 0, 0, 0, 0,
	136, 0, 140, 142, 0, 0, 259, 370, 0, 383,
	167, 1144, 169, 0, 0, 173, 387, 389, 390, 391,
	0, 0, 0, 0, 0, 0, 0, 183, 184, 185,
	112, 0, 462, 0, 219, 69, 70, 0, 232, 240,
	0, 258, 0, 0, 0, 0, 0, 0, 233, 241,
	235, 0, 0, 0, 244, 0, 246, 247, 0, 0,
	0, 0, 372, 385, 373, 0, 381, 60, 553, 333,
	958, 957, 315, 1155, 460, 315, 964, 460, 1155, -2,
	0, 440, 479, 480, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 436, 437, 0, 455, 0, 0, 501,
	919, 923, 924, 501, 499, 550, 551, 0, 0, 916,
	914, 915, 37, 366, 39, 0, 366, 366, 0, 0,
	0, 0, 264, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 540, 930, 0, 904, 905, 540, 71, 0,
	0, 0, 0, 834, 835, 836, 837, 838, 839, 842,
	843, 840, 841, 844, 845, 846, 0, 0, 0, 847,
	848, 849, 0, 0, 851, 0, 853, 0, 0, 0,
	0, 0, 0, 913, 0, 0, 850, 658, 659, 660,
	682, 683, 0, 746, 910, 903, 748, 0, -2, 855,
	0, 751, 756, 757, 0, 0, 898, -2, 0, 950,
	0, 650, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 618, 629, 626, 625, 602, 0, 601,
	599, 0, 603, 0, 0, 0, 82, 0, 0, 925,
	909, 559, 0, 411, 0, 0, 556, 0, 0, 101,
	0, 58, 59, 0, 103, 0, 0, 105, 0, 0,
	462, 0, 0, 1155, 0, 462, 0, 857, 567, 568,
	569, 570, 571, 650, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 592, 593, 594, 595, 596,
	597, 598, 612, 0, 591, 591, 591, 604, 605, 613,
	614, 619, 620, 631, 632, 634, 636, 630, 630, 630,
	627, 628, 0, 855, 0, 151, 0, 0, 170, 0,
	0, 0, 0, 392, 198, 199, 200, 394, 395, 175,
	177, 188, 176, 178, 180, 181, 205, 206, 207, 208,
	209, 210, 0, 0, 113, 237, 222, 220, 221, 223,
	225, 0, 255, 226, 227, 228, 229, 230, 236, 462,
	242, 245, 248, 249, 0, 0, 0, 380, 335, 0,
	273, 0, 0, 338, 459, 0, 0, 0, 1155, 963,
	399, 0, 443, 477, 478, 481, 485, 486, 489, 492,
	493, 483, 653, 450, 451, 452, 473, 474, 353, 457,
	0, 0, 559, 0, 0, 0, 922, 559, 0, 0,
	918, 0, 0, 0, 0, 365, 41, 1155, 0, 62,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 263, 0, 0,
	0, 933, 0, 0, 0, 74, 0, 940, 81, 0,
	654, 563, 564, 606, 607, 608, 609, 610, 655, 656,
	0, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, -2, -2, -2, 674, 675, 676, -2, -2, -2,
	680, 681, -2, 852, 854, 0, 913, 0, -2, 0,
	-2, -2, -2, -2, 694, 0, 696, 699, 701, 703,
	0, 0, 0, 0, 912, 713, 890, 0, 0, 831,
	832, 833, 698, 0, 0, 911, 902, 0, 0, -2,
	753, 0, 0, 0, 861, 862, 897, 893, 0, 760,
	472, 0, 0, 0, 0, 0, 959, 637, 638, 639,
	640, 641, 642, 651, 809, 0, 0, 0, 773, 775,
	0, 0, 0, 0, 865, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 855, 875, 0, 0, 716, 0,
	0, 0, 0, 1171, 0, 855, 883, 0, 0, 0,
	0, 0, 855, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	423, 0, 423, 413, 0, 0, 0, 423, 426, 427,
	429, 430, 0, 0, 557, 100, 928, 60, 110, 60,
	60, 108, 116, 131, 0, 133, 134, 0, 560, 562,
	572, 0, 137, 0, 0, 0, 0, 172, 388, 393,
	0, 195, 0, 197, 0, 114, 257, 159, 238, 251,
	252, 540, 554, 0, 0, 272, 939, 274, 276, 277,
	278, 279, 964, 0, 964, 0, 0, 336, 0, 0,
	0, 0, 401, 407, 0, 0, 487, 0, 0, 484,
	490, 491, 0, 476, 351, 352, 462, 941, 495, 920,
	540, 502, 462, 512, 549, 526, 517, 0, 921, 495,
	552, 917, 40, 355, 0, 0, 0, 43, 1155, 51,
	0, 287, 0, 0, 0, 0, 0, 368, 52, 1155,
	60, 1155, 60, 53, 38, 366, 260, 0, 261, 0,
	359, 0, 354, 357, 0, 81, 0, 0, 68, 0,
	72, 0, -2, -2, 0, 0, 0, 714, -2, 695,
	697, 700, 702, 704, 0, 0, 0, 0, 0, 0,
	0, 715, 0, 0, 900, 903, -2, 856, 859, 860,
	0, 0, 894, 0, 0, 0, 0, 471, 472, 472,
	472, 766, 0, 0, 0, 0, 0, 0, 767, 0,
	0, 0, 0, 0, 0, 782, 0, 783, 784, 0,
	0, 785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 720, 721, 0, 0,
	786, 881, 882, 0, 0, 0, 0, 0, 0, 791,
	0, 888, 0, 0, 0, 795, 796, 797, 0, 589,
	0, 611, 633, 635, 623, 83, 0, 926, 93, 0,
	558, 408, 423, 0, 0, 415, 412, 410, 559, 0,
	0, 0, 0, 102, 104, 106, 0, 858, 0, 0,
	0, 856, 143, 144, 168, 193, 194, 196, 189, 0,
	253, 281, 314, 0, 0, 964, 0, 270, 315, 337,
	339, 0, 0, 403, 407, 0, 406, 460, 0, 0,
	475, 0, 497, 0, 500, 0, 0, 0, 0, 0,
	546, 546, 546, 544, 520, 0, 526, 0, 0, 538,
	0, -2, 517, 0, 497, 0, 0, 0, 0, 61,
	285, 304, 0, 0, 344, 350, 350, 0, 769, 770,
	0, 0, 0, 45, 0, 0, 0, 0, 49, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 657, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 891, 0, 826, 0, 0, 902, -2, 863,
	892, 896, 0, 761, 0, 0, 0, 0, 952, 643,
	644, 645, 646, 647, 648, 649, 0, 807, 808, 812,
	0, 0, 771, 0, 0, 864, 874, 876, 717, 718,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	-2, -2, -2, 735, 736, 737, -2, -2, -2, 0,
	0, 0, 877, 0, 0, 829, 879, 880, 885, 886,
	0, 788, 789, 790, 887, 0, 0, 0, 617, 0,
	84, 421, 422, 409, 420, 0, 423, 428, 425, 431,
	0, 565, 0, 0, 573, 160, 268, 0, 275, 0,
	0, 0, 273, 0, 0, 0, 405, 407, 0, 398,
	399, 482, 488, 458, 803, 0, 0, 503, 0, 0,
	0, 0, 0, 541, 545, 542, 543, 0, 0, 526,
	538, 509, 0, 0, 0, 516, 537, 0, 536, 525,
	-2, 803, 361, 363, 42, 0, 286, 0, 289, 0,
	0, 0, 0, 295, 296, 0, 0, 0, 0, 306,
	313, 0, 353, 944, 0, 353, 0, 0, 0, 0,
	0, 57, 0, 0, 367, 0, 60, 60, 356, 0,
	0, 0, 0, 360, 358, 73, 0, 0, 0, 0,
	-2, 0, 707, -2, -2, 825, 856, 901, 895, 949,
	472, 762, 764, 765, 652, 814, 811, 0, 798, 780,
	781, 873, 0, 0, 0, 0, 856, 828, 787, 0,
	793, 794, 590, 0, 0, 0, 414, 424, 0, 566,
	561, 0, 0, 0, 0, 0, 0, 0, 0, 396,
	407, 0, 400, 401, 446, 0, 496, 494, 528, 0,
	530, 0, 0, 0, 532, 512, 521, 0, 523, 538,
	514, 0, 0, 507, 0, 506, 526, 534, 0, 0,
	447, 44, 0, 290, 291, 964, 0, 294, 297, 0,
	299, 966, 281, 0, 310, 311, 345, 346, 349, 347,
	350, 472, 308, 0, 46, 47, 56, 64, 48, 54,
	0, 0, 0, 0, 539, 0, 0, 0, 78, 76,
	-2, -2, 708, 827, 0, 472, 0, 800, -2, 0,
	0, 0, 830, 0, 0, 0, 0, 432, 433, 0,
	0, 313, 0, 303, 281, 271, 313, 0, 0, 402,
	403, 802, 804, 0, 529, 0, 548, 531, 526, 522,
	0, 519, 510, 0, 511, 0, 538, 0, 0, 518,
	288, 292, 0, 0, 319, 0, 307, 0, 353, 0,
	0, 66, 0, 362, 364, 0, 0, 0, 0, 80,
	77, 0, 763, 817, 0, -2, 0, 743, 792, 0,
	417, 559, 419, 0, 281, 313, 269, 281, 0, 404,
	405, 0, 0, 0, 0, 524, 508, 504, 0, 515,
	0, 535, 0, 298, 324, 0, 0, 0, 348, 761,
	315, 50, 0, 63, 0, 0, 472, 79, 75, 0,
	0, 0, 813, 744, 0, 418, 0, 301, 281, 340,
	0, 397, 805, 806, 547, 513, 0, 533, 0, 300,
	320, 321, 0, 316, 317, 318, 965, 312, 319, 65,
	265, 267, 0, 810, 815, 818, -2, 1117, 998, 0,
	816, 559, 0, 302, 313, 505, 293, 322, 0, 323,
	0, 0, 0, 324, 0, 0, 820, 821, 822, 823,
	824, 416, 284, 281, 325, 0, 328, 329, 0, 326,
	309, 0, 280, 282, 283, 341, 327, 330, 331, 819,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 335, 3, 341, 336, 3,
	346, 347, 339, 337, 350, 338, 348, 340, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 354, 349,
	329, 331, 330, 3, 351, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 344, 3, 345, 342, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 352, 334, 353, 332,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 333, 57672, 343, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:807
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:908
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:931
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = nil
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropCascade
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = DropRestrict
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = DropDefault
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1004
		{
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			return unimplemented(sqllex, "alter using")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1008
		{
		}
	case 67:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.str = ""
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1081
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1130
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{ /* SKIP DOC */
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "set local")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1464
		{ /* SKIP DOC */
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			return unimplemented(sqllex, "set from current")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1522
		{
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = Low
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = Normal
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = High
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1790
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1794
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1798
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1832
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1848
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1858
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1862
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1866
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1870
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = DropDefault
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			return unimplemented(sqllex, "match full")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			return unimplemented(sqllex, "match partial")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			return unimplemented(sqllex, "match simple")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2163
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return unimplemented(sqllex, "no action")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2185
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return unimplemented(sqllex, "action set null")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return unimplemented(sqllex, "action set default")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = true
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = false
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2296
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2300
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = Ascending
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = Descending
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2354
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2355
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = true
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = false
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2368
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2369
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2418
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2419
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.str = ""
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.str = ""
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = ReadOnly
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = ReadWrite
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.str = ""
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.str = ""
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.str = ""
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.str = ""
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2638
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 424:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2672
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2673
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2901
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2909
		{
			return unimplemented(sqllex, "cte")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2913
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2917
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2921
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = true
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = false
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = false
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = true
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2945
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &From{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3150
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3195
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3212
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = nil
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = true
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = false
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.str = astFullJoin
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.str = astLeftJoin
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.str = astRightJoin
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.str = astInnerJoin
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3487
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3502
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3511
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3583
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = nil
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3728
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3760
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3800
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = year
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = month
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = day
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = hour
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = minute
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = month
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = hour
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = minute
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = minute
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = nil
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = second
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3895
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3930
		{
			return unimplemented(sqllex, "at tz")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4164
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4390
		{
			return unimplemented(sqllex, "variadic")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4391
		{
			return unimplemented(sqllex, "variadic")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4414
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			return unimplemented(sqllex, "func_application")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4435
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			return unimplemented(sqllex, "current role")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			return unimplemented(sqllex, "current user")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			return unimplemented(sqllex, "session user")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			return unimplemented(sqllex, "user")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4484
		{
			return unimplemented(sqllex, "treat")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4528
		{
			return unimplemented(sqllex, "within group")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4529
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = Window(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.str = ""
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "frame range")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4628
		{
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4632
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4639
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4640
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4642
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = Any
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = Some
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = All
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = Plus
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = Minus
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Mult
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Div
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = FloorDiv
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = Mod
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = Bitand
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = Bitor
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = Pow
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = Bitxor
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = LT
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = GT
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = EQ
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = LE
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = GE
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = NE
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = Like
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = NotLike
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = ILike
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = NotILike
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5007
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5125
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5169
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5205
		{
			return unimplemented(sqllex, "func const")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5214
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = DNull
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.str = ""
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
