// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const RANGE = 57551
const READ = 57552
const REAL = 57553
const RECURSIVE = 57554
const REF = 57555
const REFERENCES = 57556
const REGCLASS = 57557
const REGPROC = 57558
const REGPROCEDURE = 57559
const REGNAMESPACE = 57560
const REGTYPE = 57561
const RENAME = 57562
const REPEATABLE = 57563
const RELEASE = 57564
const RESET = 57565
const RESTORE = 57566
const RESTRICT = 57567
const RETURNING = 57568
const REVOKE = 57569
const RIGHT = 57570
const ROLLBACK = 57571
const ROLLUP = 57572
const ROW = 57573
const ROWS = 57574
const RSHIFT = 57575
const SAVEPOINT = 57576
const SCATTER = 57577
const SEARCH = 57578
const SECOND = 57579
const SELECT = 57580
const SERIAL = 57581
const SERIALIZABLE = 57582
const SESSION = 57583
const SESSION_USER = 57584
const SET = 57585
const SETTING = 57586
const SETTINGS = 57587
const SHOW = 57588
const SIMILAR = 57589
const SIMPLE = 57590
const SMALLINT = 57591
const SMALLSERIAL = 57592
const SNAPSHOT = 57593
const SOME = 57594
const SPLIT = 57595
const SQL = 57596
const START = 57597
const STATUS = 57598
const STDIN = 57599
const STRICT = 57600
const STRING = 57601
const STORING = 57602
const SUBSTRING = 57603
const SYMMETRIC = 57604
const SYSTEM = 57605
const TABLE = 57606
const TABLES = 57607
const TEMPLATE = 57608
const TESTING_RANGES = 57609
const TESTING_RELOCATE = 57610
const TEXT = 57611
const THEN = 57612
const TIME = 57613
const TIMESTAMP = 57614
const TIMESTAMPTZ = 57615
const TO = 57616
const TRAILING = 57617
const TRANSACTION = 57618
const TREAT = 57619
const TRIM = 57620
const TRUE = 57621
const TRUNCATE = 57622
const TYPE = 57623
const UNBOUNDED = 57624
const UNCOMMITTED = 57625
const UNION = 57626
const UNIQUE = 57627
const UNKNOWN = 57628
const UPDATE = 57629
const UPSERT = 57630
const USER = 57631
const USERS = 57632
const USING = 57633
const UUID = 57634
const VALID = 57635
const VALIDATE = 57636
const VALUE = 57637
const VALUES = 57638
const VARCHAR = 57639
const VARIADIC = 57640
const VIEW = 57641
const VARYING = 57642
const WHEN = 57643
const WHERE = 57644
const WINDOW = 57645
const WITH = 57646
const WITHIN = 57647
const WITHOUT = 57648
const YEAR = 57649
const ZONE = 57650
const NOT_LA = 57651
const WITH_LA = 57652
const AS_LA = 57653
const POSTFIXOP = 57654
const UMINUS = 57655

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5497

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	332, 31,
	-2, 432,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	1, 405,
	187, 405,
	226, 405,
	328, 405,
	330, 405,
	332, 405,
	-2, 415,
	-1, 66,
	1, 408,
	187, 408,
	226, 408,
	328, 408,
	330, 408,
	332, 408,
	-2, 414,
	-1, 75,
	1, 31,
	332, 31,
	-2, 432,
	-1, 437,
	1, 200,
	332, 200,
	-2, 1007,
	-1, 479,
	108, 442,
	160, 442,
	185, 442,
	-2, 411,
	-1, 482,
	108, 441,
	160, 441,
	185, 441,
	-2, 409,
	-1, 624,
	108, 441,
	160, 441,
	185, 441,
	-2, 412,
	-1, 684,
	329, 939,
	-2, 932,
	-1, 685,
	329, 940,
	-2, 933,
	-1, 691,
	5, 608,
	329, 608,
	-2, 1116,
	-1, 715,
	5, 569,
	-2, 1090,
	-1, 716,
	5, 602,
	329, 602,
	-2, 1092,
	-1, 717,
	5, 577,
	-2, 1093,
	-1, 718,
	5, 576,
	-2, 1094,
	-1, 719,
	5, 602,
	329, 602,
	-2, 1097,
	-1, 720,
	5, 602,
	329, 602,
	-2, 1098,
	-1, 721,
	5, 603,
	-2, 1101,
	-1, 722,
	5, 563,
	-2, 1102,
	-1, 723,
	5, 563,
	-2, 1103,
	-1, 724,
	5, 584,
	-2, 1107,
	-1, 725,
	5, 564,
	-2, 1112,
	-1, 726,
	5, 565,
	-2, 1113,
	-1, 727,
	5, 566,
	-2, 1114,
	-1, 728,
	5, 567,
	-2, 1115,
	-1, 729,
	5, 563,
	-2, 1120,
	-1, 730,
	5, 570,
	-2, 1125,
	-1, 731,
	5, 568,
	-2, 1128,
	-1, 732,
	5, 600,
	329, 600,
	-2, 1130,
	-1, 733,
	5, 604,
	-2, 1133,
	-1, 734,
	5, 606,
	-2, 1134,
	-1, 735,
	5, 599,
	329, 599,
	-2, 1139,
	-1, 1007,
	99, 415,
	108, 415,
	144, 415,
	160, 415,
	185, 415,
	191, 415,
	284, 415,
	-2, 727,
	-1, 1016,
	329, 916,
	-2, 904,
	-1, 1235,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 643,
	-1, 1236,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 644,
	-1, 1237,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 645,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 649,
	-1, 1242,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 650,
	-1, 1243,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 651,
	-1, 1246,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 656,
	-1, 1252,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 658,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 662,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 663,
	-1, 1256,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 664,
	-1, 1257,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 665,
	-1, 1284,
	196, 798,
	-2, 801,
	-1, 1313,
	117, 838,
	329, 939,
	-2, 932,
	-1, 1314,
	117, 839,
	-2, 1086,
	-1, 1315,
	117, 840,
	-2, 1006,
	-1, 1316,
	117, 841,
	-2, 974,
	-1, 1317,
	117, 842,
	-2, 990,
	-1, 1318,
	117, 843,
	-2, 1005,
	-1, 1319,
	117, 844,
	-2, 1052,
	-1, 1479,
	99, 415,
	108, 415,
	144, 415,
	160, 415,
	185, 415,
	191, 415,
	284, 415,
	-2, 498,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 657,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 659,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 660,
	-1, 1507,
	196, 797,
	-2, 800,
	-1, 1699,
	1, 499,
	69, 499,
	99, 499,
	108, 499,
	118, 499,
	122, 499,
	124, 499,
	137, 499,
	144, 499,
	149, 499,
	157, 499,
	160, 499,
	172, 499,
	185, 499,
	187, 499,
	191, 499,
	226, 499,
	228, 499,
	284, 499,
	291, 499,
	302, 499,
	303, 499,
	311, 499,
	328, 499,
	330, 499,
	332, 499,
	333, 499,
	-2, 498,
	-1, 1701,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 661,
	-1, 1706,
	147, 0,
	-2, 677,
	-1, 1716,
	196, 799,
	-2, 802,
	-1, 1750,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 704,
	-1, 1751,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 705,
	-1, 1752,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 706,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 710,
	-1, 1757,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 711,
	-1, 1758,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 712,
	-1, 1879,
	147, 0,
	-2, 678,
	-1, 1882,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 681,
	-1, 1883,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 683,
	-1, 1989,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 682,
	-1, 1990,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 684,
	-1, 1997,
	147, 0,
	-2, 713,
	-1, 2053,
	147, 0,
	-2, 714,
	-1, 2118,
	36, 0,
	131, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 1089,
}

const sqlPrivate = 57344

const sqlLast = 29805

var sqlAct = [...]int{

	685, 2117, 2095, 1694, 2142, 1653, 2059, 2096, 2116, 2097,
	1923, 1727, 1101, 922, 1969, 1695, 1844, 1109, 483, 1170,
	1870, 1949, 490, 65, 675, 1663, 738, 683, 290, 807,
	682, 1787, 1199, 88, 88, 88, 1801, 1474, 306, 928,
	504, 1568, 661, 589, 1477, 308, 88, 88, 88, 1849,
	51, 88, 587, 1601, 88, 1855, 1450, 1169, 528, 546,
	1452, 1671, 88, 88, 1600, 1567, 65, 1174, 1188, 1207,
	88, 88, 1214, 1012, 88, 776, 1400, 88, 88, 88,
	88, 1282, 1680, 88, 88, 748, 924, 1464, 1518, 1173,
	751, 1206, 1394, 1061, 1110, 1070, 644, 1292, 65, 1459,
	1266, 1339, 655, 519, 660, 1269, 1212, 299, 22, 791,
	1093, 948, 297, 30, 871, 1195, 1125, 1141, 1209, 488,
	1161, 780, 753, 296, 16, 298, 8, 610, 438, 1310,
	654, 1134, 1003, 881, 645, 1046, 777, 1342, 540, 279,
	611, 547, 541, 538, 1177, 953, 1103, 1802, 1042, 66,
	627, 493, 628, 80, 873, 626, 482, 677, 424, 434,
	869, 784, 415, 84, 534, 491, 1506, 793, 609, 678,
	632, 67, 1982, 1106, 793, 1983, 1102, 1475, 502, 1138,
	427, 509, 512, 22, 502, 487, 2133, 278, 30, 773,
	487, 2112, 501, 793, 1800, 507, 1094, 1412, 514, 16,
	305, 8, 2107, 2106, 305, 1144, 1144, 1411, 2103, 2093,
	767, 773, 1131, 435, 2088, 480, 510, 773, 1462, 955,
	469, 292, 20, 1139, 2084, 2055, 2049, 773, 1131, 773,
	2031, 2027, 2022, 1800, 773, 2021, 495, 479, 1538, 1539,
	1991, 1979, 1144, 1131, 802, 64, 2037, 1976, 31, 64,
	1977, 1963, 71, 1960, 1800, 1958, 773, 1097, 1800, 32,
	56, 1094, 1934, 1140, 1137, 773, 1933, 1905, 1510, 1800,
	1144, 42, 1462, 1511, 1884, 42, 470, 1144, 73, 1881,
	43, 954, 1131, 1097, 43, 58, 88, 88, 88, 88,
	88, 34, 550, 64, 1763, 1873, 1821, 20, 1144, 1144,
	1820, 1799, 44, 1144, 1800, 1710, 44, 1713, 1144, 1436,
	74, 1639, 47, 1634, 1100, 1059, 1100, 1585, 69, 42,
	1586, 1440, 59, 1286, 70, 71, 46, 1144, 43, 1198,
	1156, 1583, 1517, 1142, 1144, 548, 1582, 640, 1581, 1144,
	1544, 1144, 488, 68, 48, 794, 1507, 75, 1509, 1144,
	44, 73, 794, 1144, 956, 957, 1439, 1203, 1148, 773,
	773, 1144, 917, 1143, 956, 957, 1144, 1130, 916, 1099,
	1131, 794, 1100, 1058, 863, 801, 1057, 959, 802, 862,
	773, 517, 563, 74, 500, 523, 1803, 959, 1478, 882,
	502, 69, 512, 1554, 1863, 895, 584, 70, 2131, 2115,
	958, 2102, 2064, 1136, 535, 2050, 1961, 1910, 639, 1906,
	958, 88, 71, 1411, 1898, 71, 1105, 543, 543, 71,
	1897, 1896, 1892, 55, 1891, 1135, 88, 55, 527, 88,
	88, 45, 544, 1890, 1835, 954, 1778, 1773, 73, 1829,
	1772, 73, 1771, 550, 1721, 73, 1699, 61, 62, 33,
	2114, 1670, 49, 797, 60, 1643, 964, 1442, 1590, 50,
	792, 1555, 1587, 71, 1575, 1566, 964, 1537, 53, 88,
	74, 55, 88, 74, 88, 88, 88, 74, 88, 920,
	57, 69, 1534, 1533, 1531, 69, 1523, 70, 1522, 73,
	744, 70, 1438, 88, 1356, 1307, 1306, 1476, 625, 639,
	638, 525, 1020, 68, 88, 63, 68, 1278, 927, 1013,
	1687, 68, 1729, 2076, 2034, 2020, 2019, 550, 88, 974,
	2018, 74, 1538, 1539, 308, 550, 2010, 88, 2008, 69,
	1999, 1986, 88, 88, 88, 70, 88, 1972, 1956, 1920,
	1903, 743, 1875, 956, 957, 1549, 1547, 1548, 1540, 1541,
	1542, 1543, 1545, 1546, 68, 88, 88, 1478, 1838, 1826,
	572, 1806, 774, 88, 1705, 88, 959, 1685, 624, 1661,
	88, 1659, 1658, 573, 1656, 1609, 502, 550, 550, 586,
	1641, 1828, 1608, 1565, 841, 308, 782, 975, 1527, 958,
	616, 1526, 88, 88, 742, 88, 88, 88, 88, 88,
	88, 88, 617, 1503, 620, 1279, 88, 88, 745, 566,
	568, 1498, 1271, 1427, 88, 1385, 1383, 1370, 1369, 1349,
	1305, 1202, 88, 896, 1544, 1047, 1050, 614, 1054, 878,
	878, 781, 612, 1040, 926, 1039, 502, 785, 785, 1038,
	480, 88, 1037, 1036, 88, 964, 1035, 1034, 1538, 1539,
	535, 796, 1370, 771, 799, 1033, 635, 636, 641, 509,
	512, 523, 479, 952, 960, 961, 962, 963, 965, 966,
	1032, 1031, 1030, 803, 960, 961, 962, 963, 965, 966,
	1029, 772, 1028, 744, 1027, 1026, 1025, 1024, 1017, 956,
	957, 1006, 68, 921, 805, 786, 783, 853, 974, 505,
	643, 570, 883, 1194, 559, 557, 2086, 1981, 861, 931,
	488, 1193, 959, 526, 1886, 1013, 855, 1861, 857, 1864,
	898, 1860, 1834, 1538, 1539, 919, 856, 814, 1833, 859,
	1688, 1538, 1539, 1421, 891, 958, 1420, 890, 884, 1004,
	761, 578, 2024, 1984, 576, 1453, 1832, 88, 903, 894,
	1544, 1413, 1094, 1052, 1589, 88, 1588, 1053, 759, 88,
	1482, 601, 579, 1022, 925, 1395, 975, 88, 88, 1850,
	1102, 88, 918, 760, 88, 1730, 1293, 1043, 1407, 935,
	934, 933, 480, 860, 577, 480, 480, 1514, 88, 1596,
	88, 88, 950, 88, 2067, 2026, 88, 1009, 88, 88,
	1138, 88, 477, 550, 944, 605, 900, 945, 946, 904,
	905, 906, 907, 908, 2128, 486, 956, 957, 1016, 911,
	912, 754, 1064, 755, 65, 1544, 1019, 744, 286, 65,
	1122, 282, 1540, 1541, 1542, 1543, 1545, 1546, 1814, 959,
	606, 89, 1433, 2129, 1139, 468, 548, 467, 1147, 1075,
	1077, 1056, 968, 960, 961, 962, 963, 965, 966, 1048,
	485, 462, 958, 502, 463, 1051, 1944, 1063, 1044, 1045,
	1063, 512, 754, 1620, 755, 502, 1062, 1080, 1554, 1943,
	283, 78, 287, 1942, 1140, 1137, 309, 1096, 1055, 1092,
	1941, 754, 1113, 755, 756, 1624, 308, 512, 576, 1067,
	512, 1640, 1623, 88, 2025, 1088, 1593, 487, 1592, 1485,
	1426, 1425, 1825, 1424, 88, 88, 88, 1423, 964, 1128,
	1253, 88, 88, 1145, 1091, 1090, 1119, 543, 88, 543,
	1127, 1117, 1129, 1108, 1160, 77, 737, 1087, 577, 1118,
	613, 1120, 1071, 1121, 1123, 756, 1555, 516, 1353, 1352,
	1189, 1224, 914, 915, 1142, 472, 88, 1627, 1268, 308,
	1542, 1543, 1545, 1546, 756, 1629, 1204, 555, 736, 764,
	1268, 1048, 1397, 1051, 1275, 778, 1925, 413, 897, 1273,
	591, 569, 1082, 841, 841, 1085, 473, 762, 2074, 1611,
	787, 1150, 1142, 1293, 308, 602, 648, 1223, 1045, 1044,
	484, 2139, 763, 1149, 966, 1074, 1104, 478, 1104, 1471,
	1390, 474, 288, 310, 1645, 1196, 1197, 1405, 1163, 512,
	1165, 475, 1401, 416, 1136, 502, 1434, 1387, 1126, 285,
	284, 2099, 1276, 1540, 1541, 1542, 1543, 1545, 1546, 1168,
	305, 2128, 769, 2150, 421, 1167, 1546, 289, 793, 417,
	2013, 765, 1648, 1164, 1646, 603, 1401, 1166, 768, 574,
	1210, 88, 88, 88, 1432, 76, 764, 88, 1355, 575,
	88, 1381, 1041, 1192, 418, 782, 88, 88, 88, 88,
	88, 2145, 913, 1618, 762, 64, 1060, 1290, 88, 1205,
	752, 88, 88, 420, 757, 841, 1073, 554, 550, 763,
	79, 88, 1184, 604, 1995, 1472, 88, 1152, 88, 1525,
	2138, 42, 2100, 889, 888, 88, 882, 879, 1154, 575,
	43, 1250, 1142, 1957, 1142, 88, 814, 814, 962, 963,
	965, 966, 1277, 551, 1363, 1280, 1001, 1155, 1612, 2090,
	1681, 1698, 44, 1357, 1283, 757, 88, 88, 1153, 487,
	1628, 1287, 1301, 1668, 2098, 1295, 488, 550, 841, 1320,
	2127, 2101, 2091, 1325, 757, 1359, 1312, 1312, 1323, 1926,
	1334, 1380, 2125, 1843, 1072, 1186, 1346, 1347, 1348, 88,
	1403, 88, 1358, 88, 1467, 1409, 416, 88, 1487, 631,
	594, 88, 564, 419, 562, 892, 1389, 630, 1393, 841,
	1267, 2137, 2156, 1470, 1274, 1399, 808, 421, 2143, 878,
	781, 1936, 417, 1759, 88, 1679, 1248, 1251, 1441, 781,
	1443, 2151, 1935, 1468, 690, 65, 794, 1406, 1415, 502,
	1416, 1417, 1918, 2005, 1396, 1595, 1414, 418, 814, 1901,
	1366, 1362, 422, 1418, 1247, 1187, 932, 923, 55, 629,
	868, 740, 1871, 2060, 847, 71, 420, 1264, 1644, 2144,
	552, 1813, 910, 55, 488, 864, 1429, 1430, 1812, 1664,
	893, 1435, 1262, 1845, 631, 1431, 1437, 2146, 630, 1919,
	739, 73, 1372, 1481, 551, 1810, 1371, 940, 866, 1858,
	670, 1448, 1676, 1675, 1469, 2155, 533, 574, 532, 1760,
	867, 814, 485, 1382, 1654, 1761, 1384, 1455, 621, 1392,
	1457, 1445, 1872, 74, 1516, 1128, 1473, 1461, 1210, 1458,
	1480, 69, 488, 85, 85, 280, 1127, 70, 1129, 1836,
	629, 1902, 1249, 1916, 1672, 1258, 407, 408, 409, 1460,
	1304, 426, 814, 1259, 439, 1260, 291, 1998, 1900, 1265,
	941, 1486, 426, 439, 1569, 1917, 419, 1488, 551, 1811,
	494, 494, 1704, 1626, 280, 309, 551, 280, 280, 513,
	280, 1532, 1497, 85, 520, 1502, 1809, 1398, 1146, 1098,
	1086, 488, 1083, 608, 607, 600, 599, 598, 597, 1513,
	596, 595, 592, 531, 1795, 1607, 524, 1570, 1606, 1023,
	902, 1605, 1303, 1444, 2094, 422, 2057, 1447, 1784, 1501,
	1616, 552, 88, 88, 1614, 1594, 1449, 1504, 551, 551,
	1190, 1182, 1124, 1635, 1126, 800, 309, 1796, 798, 883,
	880, 795, 790, 770, 766, 1520, 1521, 88, 1572, 1573,
	1574, 88, 758, 88, 1718, 1261, 1451, 1951, 1200, 2129,
	88, 81, 1263, 550, 886, 1591, 581, 3, 633, 1660,
	498, 530, 1953, 88, 1598, 1063, 88, 1079, 1564, 1633,
	2015, 1078, 529, 303, 25, 1619, 308, 1063, 88, 1577,
	1803, 1632, 1657, 1076, 1625, 552, 1615, 585, 1617, 2052,
	956, 957, 310, 552, 840, 65, 302, 24, 1630, 1638,
	412, 1686, 1673, 637, 1637, 1666, 1636, 1201, 1084, 1380,
	301, 23, 1665, 959, 1690, 1081, 1113, 1210, 1791, 1689,
	1792, 1621, 2038, 1622, 461, 841, 88, 634, 1707, 499,
	1655, 1841, 1674, 506, 518, 1677, 958, 582, 1723, 1724,
	1725, 1667, 1647, 1649, 1650, 552, 552, 521, 1794, 25,
	423, 1682, 1683, 310, 1678, 1797, 841, 841, 522, 300,
	11, 304, 10, 1185, 1181, 841, 841, 1210, 1107, 951,
	1210, 858, 24, 294, 9, 806, 280, 536, 280, 439,
	439, 293, 7, 464, 465, 1717, 23, 1133, 1714, 1795,
	2153, 1495, 1788, 88, 88, 88, 295, 4, 841, 2154,
	1786, 1736, 1733, 2087, 1790, 2041, 1493, 1538, 1539, 1766,
	88, 1738, 956, 957, 1693, 88, 1731, 88, 1868, 88,
	88, 88, 1796, 1779, 88, 88, 1793, 550, 943, 1808,
	956, 957, 1651, 1607, 1767, 11, 1606, 10, 854, 1605,
	1804, 1711, 1642, 1789, 551, 1158, 1157, 1584, 1158, 9,
	1422, 1354, 1351, 1780, 1350, 1300, 1159, 7, 958, 88,
	88, 1010, 1783, 1888, 2073, 1950, 550, 1726, 814, 1490,
	1446, 1020, 4, 1807, 687, 1018, 88, 88, 1839, 1491,
	88, 1607, 471, 1496, 1606, 1924, 1607, 1605, 550, 1606,
	88, 414, 1605, 1867, 901, 593, 1862, 88, 1684, 814,
	814, 560, 1824, 1764, 2089, 1893, 1524, 1968, 814, 814,
	1994, 1302, 1831, 1791, 1774, 1792, 565, 1840, 1847, 439,
	439, 1837, 1021, 1817, 41, 1846, 1842, 1603, 664, 1823,
	88, 548, 841, 1866, 1785, 1880, 1848, 309, 488, 1597,
	1176, 814, 1175, 1794, 1876, 1853, 1854, 1865, 311, 1859,
	1797, 887, 686, 872, 1311, 1216, 741, 688, 811, 426,
	689, 812, 280, 1049, 439, 619, 439, 676, 622, 809,
	1111, 552, 1272, 1291, 1512, 1014, 656, 668, 1899, 1492,
	1210, 1210, 813, 494, 1210, 88, 1494, 88, 667, 308,
	88, 1288, 556, 1869, 280, 54, 571, 433, 88, 1404,
	309, 1827, 939, 1191, 308, 936, 1613, 476, 85, 843,
	1535, 1852, 558, 1332, 1324, 1321, 615, 280, 747, 1002,
	1112, 1793, 280, 280, 280, 1607, 788, 1914, 1606, 88,
	1911, 1605, 583, 1410, 1928, 309, 1132, 1930, 842, 642,
	947, 841, 1929, 497, 88, 280, 280, 550, 1952, 496,
	1946, 88, 1912, 85, 1927, 85, 1830, 1171, 580, 88,
	439, 782, 865, 1607, 310, 1151, 1606, 88, 1945, 1605,
	1980, 995, 1463, 1954, 992, 814, 88, 88, 466, 2007,
	1183, 1365, 439, 439, 2149, 85, 439, 439, 439, 439,
	439, 909, 1988, 840, 840, 1987, 439, 439, 1975, 1966,
	2014, 1610, 1922, 1959, 426, 1967, 1965, 2066, 1993, 1978,
	1971, 72, 930, 2023, 1948, 956, 957, 88, 1985, 1391,
	29, 1467, 26, 21, 19, 1939, 1940, 310, 1974, 2009,
	841, 494, 18, 2000, 520, 28, 17, 27, 959, 551,
	1470, 15, 88, 88, 1932, 2003, 14, 13, 1964, 12,
	40, 2012, 1465, 39, 88, 38, 2004, 37, 88, 36,
	1468, 958, 310, 1210, 35, 6, 550, 2032, 2011, 2030,
	5, 2, 1, 88, 2033, 1466, 0, 0, 0, 88,
	0, 0, 2042, 0, 814, 308, 88, 88, 0, 2047,
	1857, 0, 2039, 2036, 0, 0, 0, 0, 551, 0,
	0, 0, 65, 2044, 0, 840, 2048, 488, 2043, 88,
	0, 88, 0, 2051, 88, 0, 308, 964, 2035, 0,
	2040, 0, 0, 2045, 0, 0, 841, 0, 1326, 2054,
	2062, 1469, 0, 0, 0, 0, 2077, 280, 88, 2079,
	2075, 88, 2078, 2072, 2063, 1068, 0, 0, 0, 280,
	2083, 0, 2082, 2081, 2068, 0, 2085, 280, 1089, 1607,
	0, 280, 1606, 1962, 1095, 1605, 552, 0, 840, 0,
	974, 0, 0, 814, 0, 88, 0, 88, 280, 2104,
	1115, 1116, 0, 280, 2111, 0, 280, 0, 439, 439,
	2108, 439, 2109, 0, 1856, 88, 2110, 0, 1463, 2080,
	2122, 0, 0, 0, 0, 2126, 2124, 0, 0, 840,
	0, 2130, 0, 0, 88, 0, 0, 2135, 2065, 0,
	2136, 0, 2132, 2134, 0, 552, 0, 0, 0, 0,
	0, 2113, 0, 2148, 2147, 646, 646, 0, 975, 0,
	2152, 0, 0, 0, 749, 0, 0, 1467, 956, 957,
	0, 0, 0, 0, 0, 2157, 2069, 2070, 2071, 0,
	0, 0, 0, 1215, 1222, 0, 1470, 0, 0, 814,
	0, 959, 0, 0, 0, 0, 0, 0, 1465, 1113,
	0, 813, 813, 0, 0, 0, 1468, 0, 0, 0,
	2092, 0, 0, 1162, 958, 0, 0, 0, 0, 0,
	973, 1466, 0, 0, 280, 280, 280, 0, 843, 843,
	0, 280, 1172, 0, 0, 0, 0, 0, 520, 0,
	0, 0, 969, 967, 968, 960, 961, 962, 963, 965,
	966, 0, 810, 0, 0, 0, 0, 842, 842, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 1469, 0, 1538,
	1539, 0, 0, 1326, 1326, 0, 0, 0, 937, 0,
	942, 0, 956, 957, 0, 1367, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 997,
	998, 999, 1000, 813, 551, 959, 0, 0, 1008, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 1015, 0,
	0, 1553, 0, 0, 0, 0, 0, 309, 958, 0,
	843, 0, 0, 0, 1326, 1326, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 280, 1360, 1361, 0, 0, 813, 1068, 0, 0,
	1368, 1544, 0, 0, 0, 0, 1373, 1374, 1376, 1378,
	1379, 975, 0, 0, 964, 0, 665, 52, 1386, 1367,
	0, 1388, 280, 843, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 280, 813, 1408, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 842, 0, 1554, 280, 0, 0, 0, 0,
	52, 552, 0, 0, 843, 0, 0, 974, 0, 0,
	1499, 1500, 0, 0, 0, 840, 1162, 1162, 0, 0,
	0, 0, 481, 0, 310, 489, 0, 0, 0, 0,
	0, 0, 52, 842, 0, 969, 967, 968, 960, 961,
	962, 963, 965, 966, 0, 0, 840, 840, 551, 930,
	0, 930, 0, 439, 0, 840, 840, 280, 0, 0,
	0, 1454, 1555, 1326, 1326, 0, 0, 0, 0, 0,
	0, 1561, 1562, 1563, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 551, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 551,
	0, 0, 0, 0, 0, 0, 0, 1326, 1326, 1326,
	1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
	1326, 1326, 1326, 1326, 1326, 1326, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 1549, 1547, 1548, 1540,
	1541, 1542, 1543, 1545, 1546, 0, 0, 0, 0, 0,
	967, 968, 960, 961, 962, 963, 965, 966, 0, 0,
	0, 0, 0, 646, 0, 552, 0, 0, 0, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 0, 1252, 0, 1254, 1255, 1256, 1257, 0, 0,
	309, 810, 810, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 840, 1281, 0, 309, 0, 0, 0, 0,
	1702, 1703, 0, 0, 0, 0, 552, 0, 0, 0,
	0, 1602, 0, 0, 0, 1308, 1309, 0, 489, 1322,
	0, 1333, 1335, 1340, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 0,
	1538, 1539, 0, 1556, 1557, 1558, 749, 0, 0, 0,
	0, 0, 280, 280, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 813, 1762, 0, 0, 1652, 0, 0,
	0, 1068, 0, 930, 0, 0, 1215, 1734, 0, 0,
	1662, 1402, 1553, 810, 0, 1215, 1739, 0, 1538, 1539,
	843, 840, 0, 280, 813, 813, 280, 310, 0, 0,
	0, 0, 0, 813, 813, 0, 0, 0, 1697, 0,
	0, 0, 310, 0, 0, 0, 0, 0, 1770, 842,
	0, 843, 843, 1428, 0, 0, 0, 0, 0, 0,
	843, 843, 1544, 1326, 0, 0, 813, 0, 0, 1538,
	1539, 0, 1556, 1557, 1558, 0, 810, 551, 0, 0,
	842, 842, 1560, 0, 0, 552, 1728, 0, 0, 842,
	842, 0, 0, 843, 0, 0, 309, 1559, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 949, 0, 0,
	840, 0, 0, 0, 0, 1554, 0, 810, 0, 0,
	1544, 1553, 842, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 1539, 0, 0,
	0, 0, 0, 1781, 1782, 1068, 1483, 1484, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 1326, 0, 1602,
	520, 1544, 0, 1554, 0, 1815, 0, 1816, 0, 280,
	1818, 1819, 0, 1555, 1822, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	813, 0, 1515, 0, 552, 1519, 840, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 0, 1602, 0, 520,
	1172, 0, 1602, 310, 1554, 0, 0, 843, 0, 0,
	1921, 0, 0, 0, 0, 0, 280, 280, 0, 1008,
	280, 1555, 0, 0, 0, 1340, 1340, 1340, 1544, 0,
	1697, 0, 0, 0, 310, 0, 842, 1874, 0, 0,
	0, 0, 1550, 1551, 1552, 1326, 0, 1549, 1547, 1548,
	1540, 1541, 1542, 1543, 1545, 1546, 0, 0, 1599, 481,
	0, 0, 481, 481, 0, 0, 0, 0, 0, 0,
	1894, 1938, 1555, 0, 0, 0, 0, 0, 0, 0,
	0, 1554, 0, 0, 1005, 0, 1007, 0, 0, 813,
	646, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 1547, 1548, 1540, 1541,
	1542, 1543, 1545, 1546, 1997, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 1913, 0, 0,
	1915, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 1602, 0, 0, 0, 842, 0, 0, 0, 1555,
	0, 1550, 1551, 1552, 0, 0, 1549, 1547, 1548, 1540,
	1541, 1542, 1543, 1545, 1546, 0, 1947, 0, 0, 520,
	0, 1700, 0, 0, 1701, 0, 0, 0, 813, 1602,
	0, 0, 0, 0, 280, 0, 1706, 52, 0, 0,
	52, 1970, 0, 0, 0, 1715, 0, 0, 0, 280,
	0, 0, 0, 1719, 0, 843, 1428, 1697, 0, 0,
	0, 52, 2053, 52, 0, 0, 520, 1697, 0, 0,
	0, 1735, 0, 810, 0, 1737, 0, 0, 52, 0,
	0, 0, 0, 52, 842, 1548, 1540, 1541, 1542, 1543,
	1545, 1546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 810, 0, 930, 1768, 1769,
	0, 0, 0, 810, 810, 0, 0, 1775, 1776, 1777,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 0,
	0, 0, 2016, 2017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1805, 2028, 0, 810, 0, 2029, 0,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 520, 0, 0, 0, 0, 0, 1697,
	0, 0, 0, 0, 0, 0, 1697, 520, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	957, 0, 976, 977, 978, 986, 987, 988, 0, 2061,
	0, 520, 0, 0, 280, 979, 0, 0, 0, 0,
	0, 1851, 959, 0, 0, 990, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1602, 0, 0, 1970, 0,
	0, 1697, 1211, 0, 0, 958, 0, 0, 0, 0,
	0, 973, 0, 1879, 0, 0, 0, 1882, 1883, 0,
	0, 0, 1885, 0, 0, 0, 0, 0, 0, 1887,
	0, 1889, 0, 0, 0, 280, 0, 520, 1270, 1895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 956, 957, 0, 2123, 0, 0, 986, 987,
	988, 964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1904, 0, 1697, 959, 0, 0, 990, 0,
	983, 991, 0, 1538, 1539, 0, 1556, 1557, 1558, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 958, 1878,
	0, 0, 0, 0, 973, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 1937, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 52, 0, 0, 0, 1553, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 489, 0, 964, 0, 0, 0, 0, 810,
	0, 0, 0, 0, 0, 0, 1973, 0, 0, 0,
	0, 0, 0, 983, 991, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 1544, 1989, 1990, 1538, 1539,
	0, 1556, 1557, 1558, 0, 0, 984, 0, 0, 0,
	0, 981, 0, 0, 1877, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 2002, 0, 0, 0,
	1559, 0, 0, 0, 0, 0, 0, 0, 52, 2006,
	0, 0, 52, 0, 0, 0, 0, 0, 1554, 0,
	1553, 0, 0, 0, 0, 0, 0, 0, 810, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	1479, 970, 971, 972, 985, 749, 969, 967, 968, 960,
	961, 962, 963, 965, 966, 975, 0, 0, 0, 0,
	0, 0, 1907, 0, 0, 0, 0, 0, 0, 984,
	1544, 0, 0, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 0, 1559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1554, 810, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 985, 0, 969,
	967, 968, 960, 961, 962, 963, 965, 966, 0, 0,
	0, 0, 0, 0, 0, 0, 2105, 1007, 0, 0,
	0, 0, 0, 0, 0, 1550, 1551, 1552, 0, 0,
	1549, 1547, 1548, 1540, 1541, 1542, 1543, 1545, 1546, 2121,
	2121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1211,
	0, 0, 2121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1550, 1551, 1552, 0, 0, 1549, 1547, 1548, 1540, 1541,
	1542, 1543, 1545, 1546, 0, 0, 0, 0, 0, 1211,
	0, 0, 1211, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 52, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	503, 155, 1211, 1211, 156, 259, 1211, 157, 0, 260,
	158, 159, 160, 161, 489, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	71, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 73, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 553, 277,
	0, 0, 221, 0, 0, 0, 69, 222, 223, 224,
	225, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1208,
	0, 1213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1955,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 90, 91, 326,
	92, 327, 328, 329, 330, 226, 331, 332, 333, 334,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	335, 97, 233, 234, 98, 336, 337, 235, 236, 237,
	338, 99, 238, 339, 312, 340, 100, 101, 102, 0,
	103, 341, 104, 105, 106, 342, 313, 107, 108, 343,
	344, 345, 346, 347, 348, 109, 110, 281, 111, 239,
	112, 240, 241, 349, 113, 350, 114, 351, 352, 353,
	115, 116, 354, 117, 355, 0, 356, 242, 118, 119,
	120, 243, 244, 357, 358, 359, 121, 122, 245, 0,
	123, 360, 124, 361, 362, 314, 363, 125, 246, 364,
	247, 365, 126, 127, 128, 129, 248, 249, 316, 366,
	133, 367, 130, 368, 315, 131, 250, 132, 251, 252,
	253, 369, 254, 370, 317, 134, 318, 135, 136, 371,
	138, 137, 372, 255, 319, 139, 320, 373, 140, 374,
	375, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 376, 377, 378, 257, 151, 258,
	152, 153, 379, 154, 380, 381, 155, 382, 383, 156,
	259, 322, 157, 323, 260, 158, 159, 160, 161, 384,
	261, 162, 262, 163, 385, 164, 165, 166, 263, 167,
	168, 386, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 387, 180, 324, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 388, 265, 191, 192, 389,
	193, 184, 185, 194, 325, 195, 266, 267, 196, 390,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 391,
	203, 392, 204, 205, 206, 207, 208, 393, 270, 271,
	272, 394, 395, 209, 273, 274, 396, 210, 211, 212,
	213, 397, 398, 214, 215, 216, 399, 217, 400, 275,
	218, 219, 220, 276, 277, 401, 402, 221, 403, 404,
	405, 406, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 1691, 0, 0, 0, 0, 0,
	0, 0, 1692, 90, 91, 326, 92, 327, 328, 329,
	330, 226, 331, 332, 333, 334, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 335, 97, 233, 234,
	98, 336, 337, 235, 236, 237, 338, 99, 238, 339,
	312, 340, 100, 101, 102, 0, 103, 341, 104, 105,
	106, 342, 313, 107, 108, 343, 344, 345, 346, 347,
	348, 109, 110, 281, 111, 239, 112, 240, 241, 349,
	113, 350, 114, 351, 352, 353, 115, 116, 354, 117,
	355, 0, 356, 242, 118, 119, 120, 243, 244, 357,
	358, 359, 121, 122, 245, 0, 123, 360, 124, 361,
	362, 314, 363, 125, 246, 364, 247, 365, 126, 127,
	128, 129, 248, 249, 316, 366, 133, 367, 130, 368,
	315, 131, 250, 132, 251, 252, 253, 369, 254, 370,
	317, 134, 318, 135, 136, 371, 138, 137, 372, 255,
	319, 139, 320, 373, 140, 374, 375, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	376, 377, 378, 257, 151, 258, 152, 153, 379, 154,
	380, 381, 155, 382, 383, 156, 259, 322, 157, 323,
	260, 158, 159, 160, 161, 384, 261, 162, 262, 163,
	385, 164, 165, 166, 263, 167, 168, 386, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 387,
	180, 324, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 388, 265, 191, 192, 389, 193, 184, 185, 194,
	325, 195, 266, 267, 196, 390, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 391, 203, 392, 204, 205,
	206, 207, 208, 393, 270, 271, 272, 394, 395, 209,
	273, 274, 396, 210, 211, 212, 213, 397, 398, 214,
	215, 216, 399, 217, 400, 275, 218, 219, 220, 276,
	277, 401, 402, 221, 403, 404, 405, 406, 222, 223,
	224, 225, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2046, 90, 91, 326, 92, 327, 328, 329, 330, 226,
	331, 332, 333, 334, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 335, 97, 233, 234, 98, 336,
	337, 235, 236, 237, 338, 99, 238, 339, 312, 340,
	100, 101, 102, 0, 103, 341, 104, 105, 106, 342,
	313, 107, 108, 343, 344, 345, 346, 347, 348, 109,
	110, 281, 111, 239, 112, 240, 241, 349, 113, 350,
	114, 351, 352, 353, 115, 116, 354, 117, 355, 0,
	356, 242, 118, 119, 120, 243, 244, 357, 358, 359,
	121, 122, 245, 0, 123, 360, 124, 361, 362, 314,
	363, 125, 246, 364, 247, 365, 126, 127, 128, 129,
	248, 249, 316, 366, 133, 367, 130, 368, 315, 131,
	250, 132, 251, 252, 253, 369, 254, 370, 317, 134,
	318, 135, 136, 371, 138, 137, 372, 255, 319, 139,
	320, 373, 140, 374, 375, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 376, 377,
	378, 257, 151, 258, 152, 153, 379, 154, 380, 381,
	155, 382, 383, 156, 259, 322, 157, 323, 260, 158,
	159, 160, 161, 384, 261, 162, 262, 163, 385, 164,
	165, 166, 263, 167, 168, 386, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 387, 180, 324,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 388,
	265, 191, 192, 389, 193, 184, 185, 194, 325, 195,
	266, 267, 196, 390, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 391, 203, 392, 204, 205, 206, 207,
	208, 393, 270, 271, 272, 394, 395, 209, 273, 274,
	396, 210, 211, 212, 213, 397, 398, 214, 215, 216,
	399, 217, 400, 275, 218, 219, 220, 276, 277, 401,
	402, 221, 403, 404, 405, 406, 222, 223, 224, 225,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 775, 0, 0, 90, 91, 326, 92,
	327, 328, 329, 330, 226, 331, 332, 333, 334, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 335,
	97, 233, 234, 98, 336, 337, 235, 236, 237, 338,
	99, 238, 339, 312, 340, 100, 101, 102, 0, 103,
	341, 104, 105, 106, 342, 313, 107, 108, 343, 344,
	345, 346, 347, 348, 109, 110, 281, 111, 239, 112,
	240, 241, 349, 113, 350, 114, 351, 352, 353, 115,
	116, 354, 117, 355, 0, 356, 242, 118, 119, 120,
	243, 244, 357, 358, 359, 121, 122, 245, 0, 123,
	360, 124, 361, 362, 314, 363, 125, 246, 364, 247,
	365, 126, 127, 128, 129, 248, 249, 316, 366, 133,
	367, 130, 368, 315, 131, 250, 132, 251, 252, 253,
	369, 254, 370, 317, 134, 318, 135, 136, 371, 138,
	137, 372, 255, 319, 139, 320, 373, 140, 374, 375,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 376, 377, 378, 257, 151, 258, 152,
	153, 379, 154, 380, 381, 155, 382, 383, 156, 259,
	322, 157, 323, 260, 158, 159, 160, 161, 384, 261,
	162, 262, 163, 385, 164, 165, 166, 263, 167, 168,
	386, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 387, 180, 324, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 388, 265, 191, 192, 389, 193,
	184, 185, 194, 325, 195, 266, 267, 196, 390, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 391, 203,
	392, 204, 205, 206, 207, 208, 393, 270, 271, 272,
	394, 395, 209, 273, 274, 396, 210, 211, 212, 213,
	397, 398, 214, 215, 216, 399, 217, 400, 275, 218,
	219, 220, 276, 277, 401, 402, 221, 403, 404, 405,
	406, 222, 223, 224, 225, 684, 673, 674, 671, 672,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 700,
	666, 0, 0, 0, 93, 94, 95, 227, 715, 229,
	716, 96, 717, 718, 0, 97, 233, 234, 98, 669,
	699, 719, 720, 237, 0, 99, 711, 0, 692, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 693, 695, 0, 694, 696, 109,
	110, 281, 111, 721, 112, 722, 723, 750, 113, 0,
	114, 0, 0, 0, 714, 116, 0, 117, 0, 0,
	0, 657, 118, 119, 120, 701, 702, 680, 0, 0,
	121, 122, 724, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 712, 0, 247, 0, 126, 127, 128, 129,
	708, 710, 316, 0, 133, 0, 130, 0, 315, 131,
	725, 132, 726, 727, 728, 0, 691, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 713, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 652, 0,
	681, 709, 151, 729, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 703, 158,
	159, 160, 161, 0, 704, 162, 262, 163, 0, 164,
	165, 166, 730, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 658, 183, 0, 187, 188, 189, 190, 71,
	265, 191, 192, 697, 193, 184, 185, 194, 325, 195,
	731, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	732, 200, 705, 0, 203, 73, 204, 205, 206, 207,
	208, 0, 270, 733, 734, 0, 0, 209, 706, 707,
	679, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	698, 217, 0, 275, 218, 219, 220, 553, 735, 0,
	0, 221, 0, 0, 0, 69, 222, 223, 224, 225,
	653, 70, 0, 0, 0, 0, 651, 0, 0, 0,
	0, 649, 650, 684, 673, 674, 671, 672, 663, 0,
	659, 0, 0, 0, 0, 662, 0, 0, 0, 90,
	91, 1297, 92, 0, 0, 0, 0, 700, 666, 0,
	0, 0, 93, 94, 95, 227, 715, 229, 716, 96,
	717, 718, 0, 97, 233, 234, 98, 669, 699, 719,
	720, 237, 0, 99, 711, 0, 692, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 693, 695, 0, 694, 696, 109, 110, 281,
	111, 721, 112, 722, 723, 0, 113, 0, 114, 0,
	1298, 0, 714, 116, 0, 117, 0, 0, 0, 657,
	118, 119, 120, 701, 702, 680, 0, 0, 121, 122,
	724, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	712, 0, 247, 0, 126, 127, 128, 129, 708, 710,
	316, 0, 133, 0, 130, 0, 315, 131, 725, 132,
	726, 727, 728, 0, 691, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 713, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 652, 0, 681, 709,
	151, 729, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 703, 158, 159, 160,
	161, 0, 704, 162, 262, 163, 0, 164, 165, 166,
	730, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	658, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 697, 193, 184, 185, 194, 325, 195, 731, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 732, 200,
	705, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 733, 734, 0, 0, 209, 706, 707, 679, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 698, 217,
	0, 275, 218, 219, 220, 276, 735, 1296, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 653, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 0, 649,
	650, 1299, 684, 673, 674, 671, 672, 663, 659, 1294,
	0, 0, 0, 662, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 700, 666, 0, 0,
	0, 93, 94, 95, 227, 715, 229, 716, 96, 717,
	718, 0, 97, 233, 234, 98, 669, 699, 719, 720,
	237, 0, 99, 711, 0, 692, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 693, 695, 0, 694, 696, 109, 110, 281, 111,
	721, 112, 722, 723, 0, 113, 0, 114, 0, 0,
	0, 714, 116, 0, 117, 0, 0, 0, 657, 118,
	119, 120, 701, 702, 680, 0, 0, 121, 122, 724,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 712,
	0, 247, 0, 126, 127, 128, 129, 708, 710, 316,
	0, 133, 0, 130, 0, 315, 131, 725, 132, 726,
	727, 728, 0, 691, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 713, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 652, 0, 681, 709, 151,
	729, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 703, 158, 159, 160, 161,
	0, 704, 162, 262, 163, 0, 164, 165, 166, 730,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 658,
	183, 0, 187, 188, 189, 190, 71, 265, 191, 192,
	697, 193, 184, 185, 194, 325, 195, 731, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 732, 200, 705,
	0, 203, 73, 204, 205, 206, 207, 208, 0, 270,
	733, 734, 0, 0, 209, 706, 707, 679, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 698, 217, 0,
	275, 218, 219, 220, 553, 735, 0, 0, 221, 0,
	0, 0, 69, 222, 223, 224, 225, 653, 70, 0,
	0, 0, 0, 651, 0, 0, 0, 0, 649, 650,
	684, 673, 674, 671, 672, 663, 0, 659, 0, 0,
	0, 0, 662, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 700, 666, 0, 0, 0, 93,
	94, 95, 227, 715, 229, 716, 96, 717, 718, 1336,
	97, 233, 234, 98, 669, 699, 719, 720, 237, 0,
	99, 711, 0, 692, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 693,
	695, 0, 694, 696, 109, 110, 281, 111, 721, 112,
	722, 723, 0, 113, 0, 114, 0, 0, 0, 714,
	116, 0, 117, 0, 0, 0, 657, 118, 119, 120,
	701, 702, 680, 0, 0, 121, 122, 724, 0, 123,
	0, 124, 0, 1341, 314, 0, 125, 712, 0, 247,
	0, 126, 127, 128, 129, 708, 710, 316, 0, 133,
	0, 130, 0, 315, 131, 725, 132, 726, 727, 728,
	0, 691, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 1337, 713, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 652, 0, 681, 709, 151, 729, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 703, 158, 159, 160, 161, 0, 704,
	162, 262, 163, 0, 164, 165, 166, 730, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 658, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 697, 193,
	184, 185, 194, 325, 195, 731, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 732, 200, 705, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 733, 734,
	0, 1338, 209, 706, 707, 679, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 698, 217, 0, 275, 218,
	219, 220, 276, 735, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 653, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 0, 649, 650, 684, 673,
	674, 671, 672, 663, 0, 659, 0, 0, 0, 0,
	662, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 700, 666, 0, 0, 0, 93, 94, 95,
	227, 715, 229, 716, 96, 717, 718, 0, 97, 233,
	234, 98, 669, 699, 719, 720, 237, 0, 99, 711,
	0, 692, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 693, 695, 0,
	694, 696, 109, 110, 281, 111, 721, 112, 722, 723,
	0, 113, 0, 114, 0, 0, 0, 714, 116, 0,
	117, 0, 0, 0, 657, 118, 119, 120, 701, 702,
	680, 0, 0, 121, 122, 724, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 712, 0, 247, 0, 126,
	127, 128, 129, 708, 710, 316, 0, 133, 0, 130,
	0, 315, 131, 725, 132, 726, 727, 728, 0, 691,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	713, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 652, 1631, 681, 709, 151, 729, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 703, 158, 159, 160, 161, 0, 704, 162, 262,
	163, 0, 164, 165, 166, 730, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 658, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 697, 193, 184, 185,
	194, 325, 195, 731, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 732, 200, 705, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 733, 734, 0, 0,
	209, 706, 707, 679, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 698, 217, 0, 275, 218, 219, 220,
	276, 735, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 653, 0, 0, 0, 0, 0, 651,
	0, 0, 0, 0, 649, 650, 647, 684, 673, 674,
	671, 672, 663, 659, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 700, 666, 0, 0, 0, 93, 94, 95, 227,
	715, 229, 716, 96, 717, 718, 0, 97, 233, 234,
	98, 669, 699, 719, 720, 237, 0, 99, 711, 0,
	692, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 693, 695, 0, 694,
	696, 109, 110, 281, 111, 721, 112, 722, 723, 0,
	113, 0, 114, 0, 0, 0, 714, 116, 0, 117,
	0, 0, 0, 657, 118, 119, 120, 701, 702, 680,
	0, 0, 121, 122, 724, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 712, 0, 247, 0, 126, 127,
	128, 129, 708, 710, 316, 0, 133, 0, 130, 0,
	315, 131, 725, 132, 726, 727, 728, 0, 691, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 713,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	652, 0, 681, 709, 151, 729, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	703, 158, 159, 160, 161, 0, 704, 162, 262, 163,
	0, 164, 165, 166, 730, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 658, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 697, 193, 184, 185, 194,
	325, 195, 731, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 732, 200, 705, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 733, 734, 0, 0, 209,
	706, 707, 679, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 698, 217, 0, 275, 218, 219, 220, 276,
	735, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 653, 0, 0, 0, 0, 0, 651, 0,
	0, 0, 0, 649, 650, 0, 0, 0, 0, 0,
	1013, 1289, 659, 0, 0, 0, 0, 662, 684, 673,
	674, 671, 672, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 700, 666, 0, 0, 0, 93, 94, 95,
	227, 715, 229, 716, 96, 717, 718, 0, 97, 233,
	234, 98, 669, 699, 719, 720, 237, 0, 99, 711,
	0, 692, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 693, 695, 0,
	694, 696, 109, 110, 281, 111, 721, 112, 722, 723,
	0, 113, 0, 114, 0, 0, 0, 714, 116, 0,
	117, 0, 0, 0, 657, 118, 119, 120, 701, 702,
	680, 0, 0, 121, 122, 724, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 712, 0, 247, 0, 126,
	127, 128, 129, 708, 710, 316, 0, 133, 0, 130,
	0, 315, 131, 725, 132, 726, 727, 728, 0, 691,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	713, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 652, 0, 681, 709, 151, 729, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 703, 158, 159, 160, 161, 0, 704, 162, 262,
	163, 0, 164, 165, 166, 730, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 658, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 697, 193, 184, 185,
	194, 325, 195, 731, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 732, 200, 705, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 733, 734, 0, 0,
	209, 706, 707, 679, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 698, 217, 0, 275, 218, 219, 220,
	276, 735, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 653, 0, 0, 0, 0, 0, 651,
	0, 0, 0, 0, 649, 650, 684, 673, 674, 671,
	672, 663, 0, 659, 1765, 0, 0, 0, 662, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	700, 666, 0, 0, 0, 93, 94, 95, 227, 715,
	229, 716, 96, 717, 718, 0, 97, 233, 234, 98,
	669, 699, 719, 720, 237, 0, 99, 711, 0, 692,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 693, 695, 0, 694, 696,
	109, 110, 281, 111, 721, 112, 722, 723, 0, 113,
	0, 114, 0, 0, 0, 714, 116, 0, 117, 0,
	0, 0, 657, 118, 119, 120, 701, 702, 680, 0,
	0, 121, 122, 724, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 712, 0, 247, 0, 126, 127, 128,
	129, 708, 710, 316, 0, 133, 0, 130, 0, 315,
	131, 725, 132, 726, 727, 728, 0, 691, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 713, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 652,
	0, 681, 709, 151, 729, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 703,
	158, 159, 160, 161, 0, 704, 162, 262, 163, 0,
	164, 165, 166, 730, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 658, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 697, 193, 184, 185, 194, 325,
	195, 731, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 732, 200, 705, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 733, 734, 0, 0, 209, 706,
	707, 679, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 698, 217, 0, 275, 218, 219, 220, 276, 735,
	1722, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 653, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 0, 649, 650, 684, 673, 674, 671, 672, 663,
	0, 659, 0, 0, 0, 0, 662, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 700, 666,
	0, 0, 0, 93, 94, 95, 227, 715, 229, 716,
	96, 717, 718, 0, 97, 233, 234, 98, 669, 699,
	719, 720, 237, 0, 99, 711, 0, 692, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 313,
	107, 108, 0, 693, 695, 0, 694, 696, 109, 110,
	281, 111, 721, 112, 722, 723, 0, 113, 0, 114,
	0, 0, 0, 714, 116, 0, 117, 0, 0, 0,
	657, 118, 119, 120, 701, 702, 680, 0, 0, 121,
	122, 724, 0, 123, 0, 124, 0, 0, 314, 0,
	125, 712, 0, 247, 0, 126, 127, 128, 129, 708,
	710, 316, 0, 133, 0, 130, 0, 315, 131, 725,
	132, 726, 727, 728, 0, 691, 0, 317, 134, 318,
	135, 136, 0, 138, 137, 0, 713, 319, 139, 320,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 321, 147, 148, 150, 149, 652, 0, 681,
	709, 151, 729, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 322, 157, 323, 703, 158, 159,
	160, 161, 0, 704, 162, 262, 163, 0, 164, 165,
	166, 730, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 324, 181,
	182, 658, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 697, 193, 184, 185, 194, 325, 195, 731,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 732,
	200, 705, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 733, 734, 0, 0, 209, 706, 707, 679,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 698,
	217, 0, 275, 218, 219, 220, 276, 735, 0, 0,
	221, 0, 0, 0, 0, 222, 223, 224, 225, 653,
	0, 0, 0, 0, 0, 651, 0, 0, 0, 0,
	649, 650, 684, 673, 674, 671, 672, 663, 0, 659,
	1712, 0, 0, 0, 662, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 700, 666, 0, 0,
	0, 93, 94, 95, 227, 715, 229, 716, 96, 717,
	718, 0, 97, 233, 234, 98, 669, 699, 719, 720,
	237, 0, 99, 711, 0, 692, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 693, 695, 0, 694, 696, 109, 110, 281, 111,
	721, 112, 722, 723, 750, 113, 0, 114, 0, 0,
	0, 714, 116, 0, 117, 0, 0, 0, 657, 118,
	119, 120, 701, 702, 680, 0, 0, 121, 122, 724,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 712,
	0, 247, 0, 126, 127, 128, 129, 708, 710, 316,
	0, 133, 0, 130, 0, 315, 131, 725, 132, 726,
	727, 728, 0, 691, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 713, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 652, 0, 681, 709, 151,
	729, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 703, 158, 159, 160, 161,
	0, 704, 162, 262, 163, 0, 164, 165, 166, 730,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 658,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	697, 193, 184, 185, 194, 325, 195, 731, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 732, 200, 705,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	733, 734, 0, 0, 209, 706, 707, 679, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 698, 217, 0,
	275, 218, 219, 220, 276, 735, 0, 0, 221, 0,
	0, 0, 0, 222, 223, 224, 225, 653, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 0, 649, 650,
	684, 673, 674, 671, 672, 663, 0, 659, 0, 0,
	0, 0, 662, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 700, 666, 0, 0, 0, 93,
	94, 95, 227, 715, 229, 716, 96, 717, 718, 0,
	97, 233, 234, 98, 669, 699, 719, 720, 237, 0,
	99, 711, 0, 692, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 693,
	695, 0, 694, 696, 109, 110, 281, 111, 721, 112,
	722, 723, 0, 113, 0, 114, 0, 0, 0, 714,
	116, 0, 117, 0, 0, 0, 657, 118, 119, 120,
	701, 702, 680, 0, 0, 121, 122, 724, 0, 123,
	0, 124, 0, 1341, 314, 0, 125, 712, 0, 247,
	0, 126, 127, 128, 129, 708, 710, 316, 0, 133,
	0, 130, 0, 315, 131, 725, 132, 726, 727, 728,
	0, 691, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 0, 713, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 652, 0, 681, 709, 151, 729, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 703, 158, 159, 160, 161, 0, 704,
	162, 262, 163, 0, 164, 165, 166, 730, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 658, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 697, 193,
	184, 185, 194, 325, 195, 731, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 732, 200, 705, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 733, 734,
	0, 0, 209, 706, 707, 679, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 698, 217, 0, 275, 218,
	219, 220, 276, 735, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 653, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 0, 649, 650, 684, 673,
	674, 671, 672, 663, 0, 659, 0, 0, 0, 0,
	662, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 700, 666, 0, 0, 0, 93, 94, 95,
	227, 715, 229, 716, 96, 717, 718, 0, 97, 233,
	234, 98, 669, 699, 719, 720, 237, 0, 99, 711,
	0, 692, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 693, 695, 0,
	694, 696, 109, 110, 281, 111, 721, 112, 722, 723,
	0, 113, 0, 114, 0, 0, 0, 714, 116, 0,
	117, 0, 0, 0, 657, 118, 119, 120, 701, 702,
	680, 0, 0, 121, 122, 724, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 712, 0, 247, 0, 126,
	127, 128, 129, 708, 710, 316, 0, 133, 0, 130,
	0, 315, 131, 725, 132, 726, 727, 728, 0, 691,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	713, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 652, 0, 681, 709, 151, 729, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 703, 158, 159, 160, 161, 0, 704, 162, 262,
	163, 0, 164, 165, 166, 730, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 658, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 697, 193, 184, 185,
	194, 325, 195, 731, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 732, 200, 705, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 733, 734, 0, 0,
	209, 706, 707, 679, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 698, 217, 0, 275, 218, 219, 220,
	276, 735, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 653, 0, 0, 0, 0, 0, 651,
	0, 0, 0, 0, 649, 650, 684, 673, 674, 671,
	672, 663, 0, 659, 1284, 0, 0, 0, 662, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	700, 666, 0, 0, 0, 93, 94, 95, 227, 715,
	229, 716, 96, 717, 718, 0, 97, 233, 234, 98,
	669, 699, 719, 720, 237, 0, 99, 711, 0, 692,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 693, 695, 0, 694, 696,
	109, 110, 281, 111, 721, 112, 722, 723, 0, 113,
	0, 114, 0, 0, 0, 714, 116, 0, 117, 0,
	0, 0, 657, 118, 119, 120, 701, 702, 680, 0,
	0, 121, 122, 724, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 712, 0, 247, 0, 126, 127, 128,
	129, 708, 710, 316, 0, 133, 0, 130, 0, 315,
	131, 725, 132, 726, 727, 728, 0, 691, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 713, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 652,
	0, 681, 709, 151, 729, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 703,
	158, 159, 160, 161, 0, 704, 162, 262, 163, 0,
	164, 165, 166, 730, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 658, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 697, 193, 184, 185, 194, 325,
	195, 731, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 732, 200, 705, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 733, 734, 0, 0, 209, 706,
	707, 679, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 698, 217, 0, 275, 218, 219, 220, 276, 735,
	0, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 653, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 0, 649, 650, 647, 684, 673, 674, 671, 672,
	663, 659, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 90, 91, 938, 92, 0, 0, 0, 0, 700,
	666, 0, 0, 0, 93, 94, 95, 227, 715, 229,
	716, 96, 717, 718, 0, 97, 233, 234, 98, 669,
	699, 719, 720, 237, 0, 99, 711, 0, 692, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 693, 695, 0, 694, 696, 109,
	110, 281, 111, 721, 112, 722, 723, 0, 113, 0,
	114, 0, 0, 0, 714, 116, 0, 117, 0, 0,
	0, 657, 118, 119, 120, 701, 702, 680, 0, 0,
	121, 122, 724, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 712, 0, 247, 0, 126, 127, 128, 129,
	708, 710, 316, 0, 133, 0, 130, 0, 315, 131,
	725, 132, 726, 727, 728, 0, 691, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 713, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 652, 0,
	681, 709, 151, 729, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 703, 158,
	159, 160, 161, 0, 704, 162, 262, 163, 0, 164,
	165, 166, 730, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 658, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 697, 193, 184, 185, 194, 325, 195,
	731, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	732, 200, 705, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 733, 734, 0, 0, 209, 706, 707,
	679, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	698, 217, 0, 275, 218, 219, 220, 276, 735, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	653, 0, 0, 0, 0, 0, 651, 0, 0, 0,
	0, 649, 650, 684, 673, 674, 671, 672, 663, 0,
	659, 0, 0, 0, 0, 662, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 700, 666, 0,
	0, 0, 93, 94, 95, 227, 715, 229, 716, 96,
	717, 718, 0, 97, 233, 234, 98, 669, 699, 719,
	720, 237, 0, 99, 711, 0, 692, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	2120, 0, 693, 695, 0, 694, 696, 109, 110, 281,
	111, 721, 112, 722, 723, 0, 113, 0, 114, 0,
	0, 0, 714, 116, 0, 117, 0, 0, 0, 657,
	118, 119, 120, 701, 702, 680, 0, 0, 121, 122,
	724, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	712, 0, 247, 0, 126, 127, 128, 129, 708, 710,
	316, 0, 133, 0, 130, 0, 315, 131, 725, 132,
	726, 727, 728, 0, 691, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 713, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 652, 0, 681, 709,
	151, 729, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 703, 158, 159, 160,
	161, 0, 704, 162, 262, 163, 0, 164, 165, 166,
	730, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	658, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 697, 193, 184, 185, 194, 325, 195, 731, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 732, 200,
	705, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 733, 734, 0, 0, 209, 706, 707, 679, 210,
	211, 2119, 213, 0, 0, 214, 215, 216, 698, 217,
	0, 275, 218, 219, 220, 276, 735, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 653, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 0, 649,
	650, 684, 673, 674, 671, 672, 663, 0, 659, 0,
	0, 0, 0, 662, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 700, 666, 0, 0, 0,
	93, 94, 95, 2118, 715, 229, 716, 96, 717, 718,
	0, 97, 233, 234, 98, 669, 699, 719, 720, 237,
	0, 99, 711, 0, 692, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 2120, 0,
	693, 695, 0, 694, 696, 109, 110, 281, 111, 721,
	112, 722, 723, 0, 113, 0, 114, 0, 0, 0,
	714, 116, 0, 117, 0, 0, 0, 657, 118, 119,
	120, 701, 702, 680, 0, 0, 121, 122, 724, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 712, 0,
	247, 0, 126, 127, 128, 129, 708, 710, 316, 0,
	133, 0, 130, 0, 315, 131, 725, 132, 726, 727,
	728, 0, 691, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 713, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 652, 0, 681, 709, 151, 729,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 703, 158, 159, 160, 161, 0,
	704, 162, 262, 163, 0, 164, 165, 166, 730, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 658, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 697,
	193, 184, 185, 194, 325, 195, 731, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 732, 200, 705, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 733,
	734, 0, 0, 209, 706, 707, 679, 210, 211, 2119,
	213, 0, 0, 214, 215, 216, 698, 217, 0, 275,
	218, 219, 220, 276, 735, 0, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 653, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 0, 649, 650, 684,
	673, 674, 671, 672, 663, 0, 659, 0, 0, 0,
	0, 662, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 700, 666, 0, 0, 0, 93, 94,
	95, 227, 715, 229, 716, 96, 717, 718, 0, 97,
	233, 234, 98, 669, 699, 719, 720, 237, 0, 99,
	711, 0, 692, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 313, 107, 108, 0, 693, 695,
	0, 694, 696, 109, 110, 281, 111, 721, 112, 722,
	723, 0, 113, 0, 114, 0, 0, 0, 714, 116,
	0, 117, 0, 0, 0, 657, 118, 119, 120, 701,
	702, 680, 0, 0, 121, 122, 724, 0, 123, 0,
	124, 0, 0, 314, 0, 125, 712, 0, 247, 0,
	126, 127, 128, 129, 708, 710, 316, 0, 133, 0,
	130, 0, 315, 131, 725, 132, 726, 727, 728, 0,
	691, 0, 317, 134, 318, 135, 136, 0, 138, 137,
	0, 713, 319, 139, 320, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 321, 147, 148,
	150, 149, 652, 0, 681, 709, 151, 729, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 322,
	157, 323, 703, 158, 159, 160, 161, 0, 704, 162,
	262, 163, 0, 164, 165, 166, 730, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 324, 181, 182, 658, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 697, 193, 184,
	185, 194, 325, 195, 731, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 732, 200, 705, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 733, 734, 0,
	0, 209, 706, 707, 679, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 698, 217, 0, 275, 218, 219,
	220, 276, 735, 0, 0, 221, 0, 0, 0, 0,
	222, 223, 224, 225, 653, 0, 0, 0, 0, 0,
	651, 0, 0, 0, 0, 649, 650, 1313, 673, 674,
	671, 672, 663, 0, 659, 0, 0, 0, 0, 662,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 700, 666, 0, 0, 0, 93, 94, 95, 227,
	715, 229, 716, 96, 717, 718, 0, 97, 233, 234,
	98, 669, 699, 719, 720, 237, 0, 99, 711, 0,
	692, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 693, 695, 0, 694,
	696, 109, 110, 281, 111, 721, 1316, 722, 723, 0,
	113, 0, 114, 0, 0, 0, 714, 116, 0, 117,
	0, 0, 0, 657, 118, 119, 120, 701, 702, 680,
	0, 0, 121, 122, 724, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 712, 0, 247, 0, 126, 127,
	1317, 129, 708, 710, 316, 0, 133, 0, 130, 0,
	315, 131, 725, 132, 726, 727, 728, 0, 691, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 713,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	1318, 1315, 146, 256, 145, 321, 147, 148, 150, 149,
	652, 0, 681, 709, 151, 729, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	703, 158, 159, 160, 161, 0, 704, 162, 262, 163,
	0, 164, 165, 166, 730, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 658, 183, 0, 187, 188, 189,
	1319, 0, 265, 191, 192, 697, 193, 184, 185, 194,
	325, 195, 731, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 732, 200, 705, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 733, 734, 0, 0, 209,
	706, 707, 679, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 698, 217, 0, 275, 218, 219, 220, 276,
	735, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	1314, 225, 653, 0, 0, 0, 0, 0, 651, 0,
	0, 0, 0, 649, 650, 684, 673, 674, 671, 672,
	663, 0, 659, 0, 0, 0, 0, 662, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 700,
	666, 0, 0, 0, 93, 94, 95, 227, 715, 229,
	716, 96, 717, 718, 0, 97, 233, 234, 98, 669,
	699, 719, 720, 237, 0, 99, 711, 0, 692, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 693, 695, 0, 694, 696, 109,
	110, 281, 111, 721, 112, 722, 723, 0, 113, 0,
	114, 0, 0, 0, 714, 116, 0, 117, 0, 0,
	0, 657, 118, 119, 120, 701, 702, 680, 0, 0,
	121, 122, 724, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 712, 0, 247, 0, 126, 127, 128, 129,
	708, 710, 316, 0, 133, 0, 130, 0, 315, 131,
	725, 132, 726, 727, 728, 0, 691, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 713, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 0, 0,
	681, 709, 151, 729, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 703, 158,
	159, 160, 161, 0, 704, 162, 262, 163, 0, 164,
	165, 166, 730, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 1331, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 697, 193, 184, 185, 194, 325, 195,
	731, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	732, 200, 705, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 733, 734, 0, 0, 209, 706, 707,
	679, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	698, 217, 0, 275, 218, 219, 220, 276, 735, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 1327, 1328, 684, 673, 674, 671, 672, 663, 0,
	1330, 0, 0, 0, 0, 662, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 700, 666, 0,
	0, 0, 93, 94, 95, 227, 715, 229, 716, 96,
	717, 718, 0, 97, 233, 234, 98, 0, 699, 719,
	720, 237, 0, 99, 711, 0, 692, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 693, 695, 0, 694, 696, 109, 110, 281,
	111, 721, 112, 722, 723, 0, 113, 0, 114, 0,
	0, 0, 714, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 701, 702, 680, 0, 0, 121, 122,
	724, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	712, 0, 247, 0, 126, 127, 128, 129, 708, 710,
	316, 0, 133, 0, 130, 0, 315, 131, 725, 132,
	726, 727, 728, 0, 691, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 713, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 0, 0, 681, 709,
	151, 729, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 703, 158, 159, 160,
	161, 0, 704, 162, 262, 163, 0, 164, 165, 166,
	730, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	1331, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 697, 193, 184, 185, 194, 325, 195, 731, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 732, 200,
	705, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 733, 734, 0, 0, 209, 706, 707, 679, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 698, 217,
	0, 275, 218, 219, 220, 276, 735, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 0, 0,
	684, 673, 674, 671, 672, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 1330, 92,
	0, 0, 0, 662, 700, 666, 0, 0, 0, 93,
	94, 95, 0, 715, 229, 716, 96, 717, 718, 0,
	97, 233, 234, 98, 669, 699, 719, 720, 237, 0,
	99, 711, 0, 692, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 2120, 0, 693,
	695, 0, 694, 696, 109, 110, 281, 111, 721, 112,
	722, 723, 0, 113, 0, 114, 0, 0, 0, 714,
	116, 0, 117, 0, 0, 0, 657, 118, 119, 120,
	701, 702, 680, 0, 0, 121, 122, 724, 0, 123,
	0, 124, 0, 0, 314, 0, 125, 712, 0, 247,
	0, 126, 127, 128, 129, 708, 710, 0, 0, 133,
	0, 130, 0, 315, 131, 725, 132, 726, 727, 728,
	0, 691, 0, 0, 134, 318, 135, 136, 0, 138,
	137, 0, 713, 319, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 652, 0, 681, 709, 151, 729, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 703, 158, 159, 160, 161, 0, 704,
	162, 262, 163, 0, 164, 165, 166, 730, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 658, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 697, 193,
	184, 185, 194, 0, 195, 731, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 732, 200, 705, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 733, 734,
	0, 0, 209, 706, 707, 679, 210, 211, 2119, 213,
	0, 0, 214, 215, 216, 698, 217, 0, 275, 218,
	219, 220, 276, 735, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 684, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 649, 650, 0, 0,
	0, 90, 91, 0, 92, 659, 0, 0, 0, 700,
	662, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	699, 235, 236, 237, 0, 99, 711, 0, 692, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 693, 695, 0, 694, 696, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 701, 702, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 712, 0, 247, 0, 126, 127, 128, 129,
	708, 710, 316, 0, 133, 0, 130, 0, 315, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 713, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 0, 0,
	0, 709, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 703, 158,
	159, 160, 161, 0, 704, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 697, 193, 184, 185, 194, 325, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 705, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 706, 707,
	0, 210, 211, 212, 213, 0, 549, 214, 215, 216,
	698, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	1604, 0, 235, 236, 237, 0, 99, 238, 0, 312,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 316, 0, 133, 0, 130, 0, 315,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 255, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	71, 265, 191, 192, 0, 193, 184, 185, 194, 325,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 73, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 553, 277,
	0, 0, 221, 0, 0, 0, 69, 222, 223, 224,
	225, 0, 70, 549, 590, 0, 882, 879, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 68, 92, 0, 0, 0, 0, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 312, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 885, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 876, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	316, 0, 133, 0, 130, 0, 315, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 255, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 877, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 325, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 875, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 549, 590, 221,
	882, 879, 874, 0, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 883,
	880, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	312, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 870,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 876,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 316, 0, 133, 0, 130, 0,
	315, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 255,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	877, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	325, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 875, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 549, 590, 221, 882, 879, 874, 0, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 883, 880, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 312, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 876, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 316, 0,
	133, 0, 130, 0, 315, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 255, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 877, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 325, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 875, 210, 211, 212,
	213, 0, 0, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 87, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 883, 880, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 71,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 73, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 553, 277, 0,
	0, 221, 87, 0, 0, 69, 222, 223, 224, 225,
	0, 70, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	68, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 503, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 87,
	0, 0, 0, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 226, 0, 1208, 0, 1213, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 779, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 1114, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 1729, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 0,
	0, 0, 0, 222, 223, 224, 225, 684, 673, 674,
	671, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 746, 0, 0,
	0, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	715, 229, 716, 96, 717, 718, 0, 97, 233, 234,
	98, 0, 0, 719, 720, 237, 0, 99, 238, 0,
	312, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 721, 112, 722, 723, 0,
	113, 0, 114, 0, 0, 0, 714, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 680,
	0, 0, 121, 122, 724, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 316, 0, 133, 0, 130, 0,
	315, 131, 725, 132, 726, 727, 728, 0, 691, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 255,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	0, 0, 681, 257, 151, 729, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 730, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	325, 195, 731, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 732, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 733, 734, 0, 0, 209,
	273, 274, 679, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	735, 549, 590, 221, 0, 0, 588, 0, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 312, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 316, 0,
	133, 0, 130, 0, 315, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 255, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 325, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 83, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 82, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 549,
	590, 0, 0, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	86, 0, 0, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 312, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 313, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 314, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 316, 0, 133, 0,
	130, 0, 315, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 317, 134, 318, 135, 136, 0, 138, 137,
	0, 255, 319, 139, 320, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 321, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 322,
	157, 323, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 324, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 325, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 549, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 86, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 312, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 316, 0, 133, 0, 130, 0, 315, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 255, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 325, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 1071, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 1069, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 1180,
	0, 121, 122, 245, 0, 123, 0, 124, 1074, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 1178, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 1073,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 1179, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	87, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 1071,
	99, 238, 0, 0, 1066, 100, 101, 102, 0, 103,
	1069, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 1074, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 1065, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 1073, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 1072, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 87, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	1696, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 0, 92, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 503,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 899, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 804, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 503, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 561, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 515, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 503, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 508, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 503, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 411,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 410, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 0, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 1377, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 1375,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 0, 92, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	1364, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 929, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 425, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 0, 92, 222, 223,
	224, 225, 226, 0, 789, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 0, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 623, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 618, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 567,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 437, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 436, 271,
	272, 0, 0, 432, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 437,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 436,
	271, 272, 0, 0, 432, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 0, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 545, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 542,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 0, 92, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	539, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 537, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 511, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 0, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 492, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 430,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 428, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 437, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 431, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 429, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 436, 271, 272, 0,
	0, 432, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 0, 161, 0, 261,
	162, 262, 163, 0, 164, 0, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 0, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 956, 957, 0, 976, 977,
	978, 986, 987, 988, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 990, 0, 0, 0, 0, 0, 956, 957, 0,
	976, 977, 978, 986, 987, 988, 0, 0, 0, 0,
	0, 958, 0, 979, 0, 0, 0, 973, 0, 0,
	959, 0, 0, 990, 0, 0, 0, 0, 0, 956,
	957, 0, 976, 977, 978, 986, 987, 988, 0, 0,
	0, 0, 0, 958, 0, 979, 0, 0, 0, 973,
	0, 0, 959, 0, 0, 990, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 983, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 983, 991,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 981, 0, 0, 0,
	983, 991, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 981, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 984, 970, 971, 972,
	985, 0, 969, 967, 968, 960, 961, 962, 963, 965,
	966, 0, 0, 0, 0, 0, 0, 0, 1580, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 970,
	971, 972, 985, 0, 969, 967, 968, 960, 961, 962,
	963, 965, 966, 0, 0, 0, 0, 0, 0, 0,
	1579, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 970, 971, 972, 985, 0, 969, 967, 968, 960,
	961, 962, 963, 965, 966, 0, 0, 0, 0, 0,
	956, 957, 1578, 976, 977, 978, 986, 987, 988, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 990, 0, 0, 0,
	0, 0, 956, 957, 0, 976, 977, 978, 986, 987,
	988, 0, 0, 0, 0, 0, 958, 0, 979, 0,
	0, 0, 973, 0, 0, 959, 0, 0, 990, 0,
	0, 0, 0, 0, 956, 957, 0, 976, 977, 978,
	986, 987, 988, 0, 0, 0, 0, 0, 958, 0,
	979, 0, 0, 0, 973, 0, 0, 959, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 983, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 983, 991, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 981, 0, 0, 0, 983, 991, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 981, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 980, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 984, 970, 971, 972, 985, 0, 969, 967, 968,
	960, 961, 962, 963, 965, 966, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 970, 971, 972, 985, 0, 969,
	967, 968, 960, 961, 962, 963, 965, 966, 0, 0,
	0, 0, 2058, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 970, 971, 972, 985,
	0, 969, 967, 968, 960, 961, 962, 963, 965, 966,
	0, 0, 956, 957, 2056, 976, 977, 978, 986, 987,
	988, 0, 0, 0, 0, 0, 0, 0, 979, 0,
	0, 0, 0, 0, 0, 959, 956, 957, 990, 976,
	977, 978, 986, 987, 988, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 958, 959,
	0, 0, 990, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 957, 0, 976, 977, 978, 986,
	987, 988, 958, 0, 0, 0, 0, 0, 973, 979,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 983, 991, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	0, 0, 0, 0, 0, 0, 0, 983, 991, 0,
	0, 981, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 989, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 0, 0, 0,
	0, 974, 980, 0, 983, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 982, 0, 0, 970, 971, 972, 985, 0, 969,
	967, 968, 960, 961, 962, 963, 965, 966, 0, 0,
	0, 0, 2001, 0, 0, 982, 0, 0, 970, 971,
	972, 985, 0, 969, 967, 968, 960, 961, 962, 963,
	965, 966, 0, 0, 0, 0, 1996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 970, 971, 972, 985, 0,
	969, 967, 968, 960, 961, 962, 963, 965, 966, 0,
	0, 956, 957, 1992, 976, 977, 978, 986, 987, 988,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 959, 956, 957, 990, 976, 977,
	978, 986, 987, 988, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 958, 959, 0,
	0, 990, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 957, 0, 976, 977, 978, 986, 987,
	988, 958, 0, 0, 0, 0, 0, 973, 979, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 983, 991, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 0, 0, 0, 0, 0, 983, 991, 0, 0,
	981, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 989, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	974, 980, 0, 983, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	982, 0, 0, 970, 971, 972, 985, 0, 969, 967,
	968, 960, 961, 962, 963, 965, 966, 0, 0, 0,
	0, 1931, 0, 0, 982, 0, 0, 970, 971, 972,
	985, 0, 969, 967, 968, 960, 961, 962, 963, 965,
	966, 0, 0, 0, 0, 1909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 970, 971, 972, 985, 0, 969,
	967, 968, 960, 961, 962, 963, 965, 966, 0, 0,
	956, 957, 1908, 976, 977, 978, 986, 987, 988, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 0, 959, 956, 957, 990, 976, 977, 978,
	986, 987, 988, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 958, 959, 0, 0,
	990, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 957, 0, 976, 977, 978, 986, 987, 988,
	958, 0, 0, 0, 0, 0, 973, 979, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 983, 991, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 983, 991, 0, 0, 981,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 989, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 974,
	980, 0, 983, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 0, 0, 0, 980, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 980, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 982,
	0, 0, 970, 971, 972, 985, 0, 969, 967, 968,
	960, 961, 962, 963, 965, 966, 0, 0, 0, 0,
	1798, 0, 0, 982, 0, 0, 970, 971, 972, 985,
	0, 969, 967, 968, 960, 961, 962, 963, 965, 966,
	0, 0, 0, 0, 1732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 970, 971, 972, 985, 0, 969, 967,
	968, 960, 961, 962, 963, 965, 966, 0, 0, 956,
	957, 1716, 976, 977, 978, 986, 987, 988, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 959, 956, 957, 990, 976, 977, 978, 986,
	987, 988, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 958, 959, 0, 0, 990,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 957, 0, 976, 977, 978, 986, 987, 988, 958,
	0, 0, 0, 0, 0, 973, 979, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	983, 991, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 983, 991, 0, 0, 981, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	989, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 974, 980,
	0, 983, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 982, 0,
	0, 970, 971, 972, 985, 0, 969, 967, 968, 960,
	961, 962, 963, 965, 966, 0, 0, 0, 0, 1669,
	0, 0, 982, 0, 0, 970, 971, 972, 985, 0,
	969, 967, 968, 960, 961, 962, 963, 965, 966, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 970, 971, 972, 985, 0, 969, 967, 968,
	960, 961, 962, 963, 965, 966, 956, 957, 1505, 976,
	977, 978, 986, 987, 988, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 0, 959,
	956, 957, 990, 976, 977, 978, 986, 987, 988, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 958, 959, 0, 0, 990, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 957, 0,
	976, 977, 978, 986, 987, 988, 958, 0, 0, 0,
	0, 0, 973, 979, 0, 0, 0, 0, 1200, 0,
	959, 0, 0, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 2141,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 983, 991, 0,
	0, 0, 964, 0, 1570, 0, 0, 1569, 0, 0,
	0, 0, 0, 989, 0, 0, 0, 1201, 0, 0,
	0, 983, 991, 0, 0, 981, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 989, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 974, 980, 0, 983, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2140, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 0, 980, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 1538, 1539, 0, 1556, 1557, 1558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1709, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 982, 0, 0, 970, 971,
	972, 985, 0, 969, 967, 968, 960, 961, 962, 963,
	965, 966, 0, 1553, 0, 0, 0, 0, 0, 982,
	0, 0, 970, 971, 972, 985, 0, 969, 967, 968,
	960, 961, 962, 963, 965, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 970,
	971, 972, 985, 1544, 969, 967, 968, 960, 961, 962,
	963, 965, 966, 994, 0, 0, 0, 0, 0, 956,
	957, 0, 976, 977, 978, 986, 987, 988, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 1559, 993,
	0, 0, 959, 956, 957, 990, 976, 977, 978, 986,
	987, 988, 0, 0, 0, 0, 1554, 0, 0, 979,
	0, 0, 0, 0, 0, 958, 959, 0, 0, 990,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 957, 0, 976, 977, 978, 986, 987, 988, 958,
	0, 0, 0, 0, 0, 973, 979, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 1555, 0, 958, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	983, 991, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 983, 991, 0, 0, 981, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	989, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 974, 980,
	0, 983, 991, 1550, 1551, 1552, 0, 0, 1549, 1547,
	1548, 1540, 1541, 1542, 1543, 1545, 1546, 989, 0, 0,
	0, 0, 0, 980, 487, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 982, 0,
	0, 970, 971, 972, 985, 0, 969, 967, 968, 960,
	961, 962, 963, 965, 966, 0, 0, 0, 0, 0,
	1720, 0, 982, 0, 0, 970, 971, 972, 985, 0,
	969, 967, 968, 960, 961, 962, 963, 965, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 970, 971, 972, 985, 0, 969, 967, 968,
	960, 961, 962, 963, 965, 966, 956, 957, 0, 976,
	977, 978, 986, 987, 988, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 0, 959,
	956, 957, 990, 976, 977, 978, 986, 987, 988, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	1571, 0, 958, 959, 0, 0, 990, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 1576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 991, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 440, 0,
	0, 0, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 983, 991, 0, 0, 981, 441, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 989, 442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 974, 980, 0, 443, 0,
	0, 0, 0, 446, 0, 0, 0, 0, 451, 452,
	0, 0, 457, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 445, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 956, 957, 460, 976, 977, 978,
	986, 987, 988, 984, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 975, 448, 0, 0, 959, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 984, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 453, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 970, 971,
	972, 985, 0, 969, 967, 968, 960, 961, 962, 963,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 970, 971, 972, 985, 964, 969, 967, 968,
	960, 961, 962, 963, 965, 966, 956, 957, 0, 976,
	977, 978, 986, 987, 988, 983, 991, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 1529, 0, 0, 959,
	0, 989, 990, 0, 0, 0, 444, 0, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 974,
	0, 0, 958, 0, 0, 0, 0, 0, 973, 454,
	0, 459, 0, 0, 0, 455, 0, 0, 0, 0,
	456, 0, 0, 0, 980, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 458, 0, 1536, 0, 0, 956,
	957, 0, 976, 977, 978, 986, 987, 988, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 964, 0,
	0, 0, 959, 0, 0, 990, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 991, 0,
	0, 984, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 973, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 964, 0, 982, 0, 0, 970, 971, 972, 985,
	0, 969, 967, 968, 960, 961, 962, 963, 965, 966,
	983, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 984, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 970, 971,
	972, 985, 975, 969, 967, 968, 960, 961, 962, 963,
	965, 966, 0, 0, 956, 957, 984, 976, 977, 978,
	986, 987, 988, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 957, 0, 976, 977, 978, 986, 987, 988, 0,
	958, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 990, 0, 982, 0,
	0, 970, 971, 972, 985, 0, 969, 967, 968, 960,
	961, 962, 963, 965, 966, 0, 958, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 956, 957, 0,
	976, 977, 978, 986, 987, 988, 964, 0, 0, 0,
	0, 0, 1538, 1539, 0, 1556, 1557, 1558, 0, 0,
	959, 0, 0, 990, 0, 983, 991, 0, 1708, 0,
	0, 0, 0, 1538, 1539, 0, 1556, 1557, 1558, 0,
	0, 989, 964, 958, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 974,
	0, 983, 991, 0, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 1553, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 983, 991,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 1544, 0, 0, 0, 0,
	0, 984, 0, 0, 0, 0, 981, 0, 0, 1559,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 1554, 0, 0,
	1559, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 970, 971, 972, 985,
	0, 969, 967, 968, 960, 961, 962, 963, 965, 966,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 1555, 0, 0, 0, 982,
	0, 0, 970, 971, 972, 985, 0, 969, 967, 968,
	960, 961, 962, 963, 965, 966, 1555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 970,
	971, 972, 985, 0, 969, 967, 968, 960, 961, 962,
	963, 965, 966, 0, 1550, 1551, 1552, 0, 0, 1549,
	1547, 1548, 1540, 1541, 1542, 1543, 1545, 1546, 0, 0,
	0, 0, 0, 0, 0, 1550, 1551, 1552, 0, 0,
	1549, 1547, 1548, 1540, 1541, 1542, 1543, 1545, 1546, 831,
	823, 848, 815, 839, 838, 0, 0, 817, 816, 0,
	0, 0, 850, 849, 831, 823, 848, 815, 839, 838,
	0, 0, 817, 816, 0, 0, 0, 850, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 836, 835, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 844,
	0, 836, 835, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 825, 827, 828, 829, 0, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 826, 825, 827, 828,
	829, 0, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 819, 824, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 1219, 1217, 1218,
	1221, 1220, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 830, 821, 0, 0, 0, 820, 0, 0, 0,
	0, 852, 0, 0, 0, 0, 830, 821, 0, 0,
	0, 818, 0, 0, 845, 846, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 845,
	846, 0, 0, 0, 822, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 851,
}
var sqlPact = [...]int{

	225, -1000, 15, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 801, 16028, 16028, 20018, -1000, -1000, -1000, -1000, -1000,
	-1000, 742, 748, 1017, 5266, 20018, 20018, 19737, 955, 955,
	21423, -1000, -1000, 24795, -1000, 28554, 585, 588, 585, 585,
	571, 21423, 20018, 691, 722, 174, -1000, 716, 14, 24514,
	20018, 1438, 51, 18051, 370, 225, 19456, 24233, 20018, 19175,
	673, 48, 16606, 20018, -1000, 54, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1279, 384,
	54, -1000, 1276, 1152, 1150, 18051, 23952, 23671, 23390, 23109,
	-1000, 12522, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 833, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 376, 375, -1000,
	18894, -1000, 1007, -1000, 49, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1005, -1000, 20018, -1000, -1000, 22828, 22547,
	737, 372, 911, -1000, -1000, 624, 454, 1451, -1000, 65,
	-1000, 1433, 15747, 736, -1000, -1000, 1275, -1000, 1003, 1274,
	1273, 1271, 1270, 1269, 1268, 453, 847, 541, -1000, 1267,
	1266, 911, -1000, 911, -1000, -1000, -1000, 666, 21423, -1000,
	-1000, 18051, -1000, 22266, 20018, 20018, 1174, 21985, -1000, 716,
	-1000, -1000, -1000, 1089, 1436, 1436, 1436, 1459, 170, 169,
	174, 4, 20018, -1000, 371, 4, 9402, 9402, -1000, -1000,
	370, -1000, 361, 15148, -1000, 8448, -1000, 870, 1342, 505,
	831, 1334, -124, 838, 822, 1333, 15747, 16606, 48, 47,
	-1000, -1000, -1000, 4961, 15747, 718, 14305, 54, -1000, -1000,
	-1000, 18051, 20018, 20018, 747, 21704, -1000, 1332, 127, 1331,
	-1000, 120, 1328, -1000, 120, 1325, 45, -1000, -1000, -1000,
	-1000, -1000, -1000, 370, 18613, 20018, 1545, 29507, -1000, 10675,
	-1000, -1000, 16028, 1118, 16028, -1000, -1000, 1541, -1000, 20018,
	10675, -1000, 46, 41, 1107, 1124, 13123, 12829, 1383, 1109,
	-1000, -1000, -1000, 64, 5266, 733, -1000, -1000, -1000, -1000,
	-1000, 18332, 20018, 1286, 16028, 20018, 20018, 20018, 20018, 20018,
	20018, -1000, 1104, -1000, -1000, 20018, 20018, 818, 689, -1000,
	35, 29, -1000, 21423, -1000, 146, -1000, 364, 1070, 460,
	179, 21142, 460, 1069, -1000, 1089, -1000, 1004, 1170, 9721,
	1177, 10675, 174, -1000, -1000, 174, 174, 10675, -1000, -1000,
	20018, 4, 1539, 20018, 102, -1000, 28039, -1000, -1000, 10675,
	10675, 10675, 10675, 10675, 940, 412, -1000, 363, 362, 6208,
	-1000, -1000, 1654, -1000, -1000, -1000, 182, -1000, -1000, 10675,
	54, -1000, -1000, -1000, -1000, 359, 1670, -1000, 497, -1000,
	-1000, -1000, 458, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1285, 358, 357, -1000, -1000, -1000, -1000, 356,
	355, 353, 351, 343, 342, 341, 326, 318, 317, 314,
	313, 310, 306, 304, 867, -1000, 477, -1000, -1000, 477,
	477, -1000, 296, 296, 297, -1000, -1000, -1000, -1000, 296,
	-1000, -1000, -1000, 447, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 299, 102, -1000, -1000, -1000, 20018, 43, -1000, 28839,
	-1000, -18, 812, -1000, 17476, 1419, 1407, 1403, 18051, 1482,
	14, 1265, 1475, 14, 1263, 663, 20018, 20018, 651, 650,
	18051, 441, -1000, 20018, -1000, -1000, -50, -1000, -1000, 1262,
	39, -1000, -1000, 468, 87, 1538, 87, 14586, -1000, 20018,
	20018, -1000, 20018, -1000, -1000, 20018, -1000, 20018, 20018, -1000,
	20018, 177, 16901, 800, 1322, 734, 14, 37, -1000, 1558,
	-1000, -1000, -1000, -1000, 96, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 297, 867, 296, 296, 296, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 447, -1000, -1000, 477, 477,
	477, -1000, -1000, 33, 28839, 649, -1000, 1261, 572, -1000,
	470, 28, 861, 1149, 897, -1000, -1000, -1000, -1000, -3,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1638, -1000, -1000, 1649, -3, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1666, 5266, -1000, -1000, -1000, -1000,
	-1000, -1000, 20018, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20018, 20018, 20018, 861, 1149, -1000, -1000,
	18051, 17182, 1534, 1321, 901, -1000, 1533, 20018, 988, 1068,
	-1000, 684, 1320, -1000, -1000, -1000, -1000, 28839, -1000, 382,
	-1000, -1000, 28839, 784, 1158, -1000, 1158, -4, -1000, 27717,
	-1000, 292, 27, 468, 9402, 14008, 29492, 29507, 5266, 680,
	10675, 10675, 10675, 10675, 10675, 10675, 10675, 10675, 10675, 10675,
	10675, 10675, 10675, 10675, 10675, 10675, 10675, 10675, 10675, 10675,
	10675, 10675, 1085, 10675, 646, 10675, 10675, 10675, 10675, 1166,
	938, 283, 952, 5266, -1000, -1000, 1620, 1620, 1620, 29110,
	29110, 276, 412, -1000, 10675, -1000, 9084, 169, 27303, -10,
	-1000, -1000, -1000, 7163, 475, 28839, 54, 5889, -1000, 1648,
	717, 1293, 1218, 291, 166, 165, 10675, 10675, 10993, 10993,
	10675, 11311, 10675, 10675, 6526, 10675, 10675, 10675, 10675, 10675,
	10675, -1000, 290, -1000, -1000, -1000, -1000, 1647, -1000, -1000,
	1645, -1000, 678, 677, 1644, 468, 164, 8448, -1000, 800,
	20018, 20018, 20018, -1000, -1000, 1064, 20861, 1063, 29507, 20018,
	-1000, 289, 288, 1136, 1132, 20018, 20018, 20580, 20299, 20018,
	851, 14, -1000, 287, 14, -1000, 286, 20018, 807, -1000,
	20018, 20018, 790, 1181, 1015, -1000, 461, 15747, 715, 1260,
	20018, 796, 10675, 830, -1000, 13711, 482, 20018, 796, 80,
	-1000, -1000, -1000, 437, 20018, -1000, -1000, -1000, 127, -1000,
	120, 120, -1000, -1000, 18051, -1000, -1000, -1000, -1000, -1000,
	-1000, 29507, 409, 406, -1000, 1643, 643, -1000, 639, 637,
	636, -1000, 284, -1000, 10675, 20018, 20018, 1149, -1000, -1000,
	-1000, -1000, 781, -1000, 816, -1000, 13417, -1000, -1000, -1000,
	-1000, -24, -1000, -1000, -1000, 441, -1000, -1000, -1000, 162,
	26, -12, 29507, -1000, -1000, -1000, -1000, -1000, 20018, 323,
	20018, 14, 20018, -1000, 1665, 14, 20018, 1316, 1350, 431,
	20018, 784, -1000, 10675, 1641, -1000, -1000, -1000, 10675, -1000,
	-1000, -1000, 14, -1000, 1217, -1000, -115, 2029, 1002, -157,
	168, 247, -1000, 3862, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 452, 806, 806, 679, 679, 679,
	679, 1480, 533, 354, 2262, 3372, 3372, 3372, 1905, 344,
	344, 3372, 3372, 3372, 29110, 29074, 2138, 10675, 10675, 635,
	926, 283, 2138, 10675, 2138, 2138, 2138, 2138, -1000, 1500,
	-1000, -1000, -1000, -1000, 1255, 282, 11311, 11311, -1000, -1000,
	-1000, 6208, 11629, -1000, -1000, -1000, -1000, -1000, 274, 10675,
	-1000, 27340, -171, 16, -1000, -1000, 10675, 20, -60, -1000,
	-1000, 692, -1000, 10675, -1000, -1, 10675, 10675, 10675, 158,
	156, -1000, 914, 262, 259, 10675, -1000, -1000, 28756, 25760,
	154, 1254, -91, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	153, 152, 28644, -91, 137, 2680, -1000, 11311, 11311, 11311,
	6208, 254, 135, 27680, -91, 28440, 8766, 8766, 8766, 134,
	28416, 10675, -91, 25439, 25407, 25375, 8, 6, 1, 1640,
	-13, 132, 448, 446, 128, 1217, -1000, -1000, -1000, -1000,
	634, 632, 1315, -1000, 1058, -1000, 496, -1000, 889, 10675,
	12241, 253, 246, 895, -1000, 1314, 1001, 1310, 1001, -1000,
	-18, 809, -1000, 10675, -1000, 10675, -1000, 628, -1000, -1000,
	621, 461, 1246, 694, -1000, 961, -1000, -1000, 708, -1000,
	-1000, 6844, 28839, -1000, 796, 1406, -17, -1000, -1000, -1000,
	468, 14586, 14008, 8448, -19, -1000, -1000, -1000, 800, -1000,
	573, 1635, 125, 1090, 887, 885, 755, 1625, 28839, -24,
	-24, -1000, -1000, -1000, -1000, -1000, 20018, -1000, 1171, -1000,
	17182, 245, 20018, 243, -1000, 242, -1000, -1000, 240, 20018,
	1115, 431, 16325, -1000, 460, 965, 27279, -1000, 121, 1210,
	1458, -1000, 14008, 1144, 1143, 14008, 1066, 946, 946, 946,
	-1000, 238, 181, 402, 247, 4337, 10675, 17770, 949, 78,
	116, 2029, 10675, 2138, 2138, 10675, 11311, 11311, -1000, 2138,
	-1000, -1000, -1000, -1000, -1000, 1245, 235, 10675, 29507, 29182,
	27921, -25, -1000, 8130, -26, -1000, 10675, -1000, 26961, -1000,
	-1000, 388, 1347, -1000, 10675, 28100, 114, 7812, -1000, 28063,
	-6, -6, -1000, 1662, -1000, 14867, 473, 958, 26924, 29492,
	29507, -1000, 10675, -1000, -1000, 1237, 10675, -1000, 29492, 29507,
	11311, 11311, 11311, 11311, 11311, 11311, 11311, 11311, 11311, 11311,
	11311, 11311, 11311, 11311, 11311, 11311, 11311, 11311, 11311, 1122,
	11311, 1597, 1597, 1597, -39, 7494, -1000, 1283, 1237, 10675,
	10675, 29507, 112, 110, 107, -1000, 10675, -91, 10675, 10675,
	10675, -1000, -1000, -1000, 106, -1000, 1616, -1000, -1000, -1000,
	-1000, 1210, 20018, 20018, 20018, 1308, -1000, 1536, -1000, 26900,
	-29, -1000, 330, 1424, 10675, -1000, -1000, 232, 12241, 20018,
	-1000, 1199, 1182, 557, 20018, -1000, 20018, -1000, 20018, 20018,
	20018, -30, -34, 20018, 20018, -1000, 15747, 641, 230, -1000,
	-52, -1000, -1000, 252, 14, 796, -1000, -61, -1000, 432,
	-1000, 400, 394, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 104, -1000, -1000, 1197, -1000, 12241, 229, 20018, 17182,
	1501, 12241, 986, 1120, 431, 16325, -1000, 684, -1000, -1000,
	-1000, 466, 10675, 10675, 2029, 14008, 14008, 1803, 1140, 14008,
	-1000, -1000, -1000, -1000, 393, 387, 391, 12522, 247, 17770,
	-1000, 1611, 1137, -35, -1000, -1000, 20018, 213, -1000, 247,
	1602, 2138, 3508, 3403, 10675, 29507, 29167, -51, 10675, 10675,
	-1000, -56, -1000, 10675, 386, 28839, -1000, -1000, -1000, 28839,
	10675, 1658, 10675, 103, 94, 92, -1000, -1000, -1000, 25076,
	10675, 91, -1000, 90, 84, 28839, 1283, 28839, -1000, -1000,
	638, 638, 721, 721, 721, 721, 1597, 2866, 713, 2738,
	2249, 2249, 2249, 228, 512, 512, 2249, 2249, 2249, 1231,
	1148, 211, 29203, 10675, -63, -1000, -1000, -1000, 28839, 28839,
	79, -1000, -1000, -1000, -91, 3279, 26582, 26545, -1000, 77,
	466, -1000, -1000, -1000, 20018, -1000, 20018, -1000, 5266, 20018,
	1226, 1053, -1000, -1000, 1129, 210, 11311, 20018, -1000, 909,
	12241, 1417, 54, 5266, 1417, 26521, 5889, -64, -68, 1043,
	-1000, 1032, 10675, -1000, 29507, 1001, 1001, -1000, 616, 609,
	605, 592, -1000, -1000, -76, 15453, 1660, 1355, 20018, 1398,
	-1000, -1000, 209, -1000, -1000, -1000, 925, -75, 12241, -77,
	76, 14, -79, 20018, -1000, 431, 16325, -1000, 1350, -1000,
	20018, 28839, -91, -1000, 1803, -1000, 208, 10675, 14008, -1000,
	-157, -1000, -83, -1000, 247, -89, 17770, -1000, 379, -161,
	-1000, 429, -1000, 247, 202, 20018, 17770, 10675, 10675, 29167,
	-90, -1000, 2138, 2138, -1000, 26203, -1000, 28839, -1000, 28063,
	-1000, -1000, -1000, 904, -1000, 26166, -1000, -1000, -1000, -1000,
	11311, 1230, 201, 29507, 26142, -1000, -1000, 10675, -1000, -1000,
	-1000, -1000, -1000, 1341, -1000, -1000, 20018, 1056, -1000, -1000,
	10675, 29203, 199, 1171, 197, -1000, -1000, -1000, -1000, -1000,
	-1000, 1424, -1, -1000, 836, -1000, -1000, 28839, 1414, -1000,
	-1000, 20018, 20018, 191, 187, -1000, 186, 54, -98, -1000,
	428, 617, -99, 20018, -1000, -1000, 5571, 20018, 909, -100,
	-1000, 1171, -1000, 909, 185, 16325, -1000, 1115, -87, -1000,
	1492, -1000, 20018, 28839, -1000, 247, -1000, 1598, 17770, 177,
	-1000, -1000, 1137, -1000, 4653, 17770, 20018, -104, -1000, 2138,
	2138, -1000, -1000, 75, 958, 1445, -1000, 2789, 11311, 29507,
	-105, -1000, 25824, -1000, -1000, 1306, 25792, 1087, 20018, -1000,
	20018, 1417, 72, 20018, 503, 5266, -1000, -1000, 10675, 10675,
	10675, 1660, -1000, -1000, 1659, 745, -1000, 468, -1000, 184,
	1171, 909, -1000, 1171, 12241, -1000, 1120, 20018, 183, -106,
	17770, -1000, -1000, 378, -1000, -1000, 1596, -1000, -116, -1000,
	-1000, 930, 10675, 2789, -121, -1000, -1000, 1297, -1000, 967,
	913, 71, -122, -1000, -1000, 179, -1000, 10675, -1000, -127,
	-128, -6, -1000, -1000, 14586, -1000, 20018, -1000, 1171, -1000,
	-139, -1000, -1000, -1000, -1000, -1000, 247, 122, -1000, 69,
	10357, 10357, -91, -1000, 20018, -1000, 985, 973, 754, -1000,
	-1000, -1000, -1000, -1000, 1087, 28839, -1000, -1000, 68, -126,
	-144, -1000, 909, 17770, -1000, -1000, -1000, -1000, 11936, 997,
	770, 27656, -1000, -1000, -1000, 1360, -1000, 527, 1034, 1034,
	967, 1658, -1000, 996, 1171, -1000, 1564, -1000, -1000, -1000,
	-1000, -1000, -1000, 1579, -1000, -1000, 1116, -1000, -1000, -1000,
	-1000, -1000, -1000, 10039, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1972, 1971, 1457, 1596, 1970, 1965, 1581, 1964, 1959,
	1957, 1955, 1953, 1950, 125, 1573, 1561, 28, 1559, 1949,
	116, 1947, 1946, 1941, 123, 1937, 1936, 1935, 1932, 221,
	1924, 1923, 107, 1510, 1496, 1473, 1922, 1920, 112, 1919,
	21, 1914, 92, 1913, 50, 171, 2376, 149, 1911, 1907,
	1901, 32, 122, 90, 1900, 109, 1884, 1881, 68, 56,
	25, 16, 1880, 127, 140, 1290, 39, 1879, 1878, 158,
	1874, 24, 36, 104, 163, 161, 138, 143, 1871, 1865,
	1862, 1858, 57, 1857, 5, 1849, 1843, 13, 88, 18,
	1840, 64, 19, 1839, 1836, 145, 1833, 91, 121, 1451,
	128, 142, 137, 1832, 96, 17, 94, 1820, 1819, 147,
	58, 1818, 40, 99, 155, 1816, 76, 170, 82, 55,
	87, 129, 1815, 1814, 1813, 101, 1812, 131, 117, 1810,
	1807, 93, 1806, 150, 152, 1805, 1803, 115, 1802, 146,
	1801, 1799, 159, 180, 1797, 1796, 168, 1795, 10, 67,
	89, 12, 1472, 1461, 132, 81, 37, 20, 1793, 1638,
	1163, 996, 42, 102, 65, 41, 105, 61, 73, 157,
	29, 1792, 1791, 130, 1788, 1777, 1776, 1775, 1774, 97,
	1773, 1772, 85, 154, 15, 3, 44, 111, 53, 69,
	106, 118, 164, 134, 1770, 110, 141, 59, 1206, 1769,
	1767, 1674, 135, 1763, 1761, 1760, 1280, 1251, 1224, 169,
	1758, 1757, 936, 26, 1756, 1755, 72, 1754, 148, 133,
	1753, 160, 213, 38, 1752, 43, 52, 114, 1751, 136,
	75, 0, 968, 841, 1748, 144, 95, 1742, 1740, 1739,
	1734, 31, 2, 9, 6, 7, 4, 30, 27, 1728,
	1727, 151, 22, 86, 1724, 165, 1722, 1711, 1710, 49,
	1707, 14, 1706, 11, 1705, 1704, 8, 1, 1698, 1696,
	153, 1695, 120, 1694, 1500, 1691, 162, 1685, 1682, 1524,
	60, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 229, 229, 230, 230, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 197, 197, 196, 19,
	171, 171, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 270, 270, 270, 274, 274,
	275, 275, 276, 276, 276, 276, 276, 276, 276, 272,
	272, 27, 31, 31, 31, 31, 31, 31, 147, 143,
	143, 145, 145, 145, 145, 64, 142, 142, 142, 142,
	144, 144, 144, 144, 222, 221, 221, 227, 227, 227,
	79, 79, 79, 79, 79, 80, 80, 80, 220, 220,
	220, 220, 228, 228, 228, 228, 228, 228, 81, 81,
	81, 226, 226, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 18, 271, 271, 273, 273, 33, 33, 34, 34,
	35, 35, 35, 35, 10, 10, 11, 11, 82, 82,
	83, 83, 150, 150, 150, 150, 84, 84, 56, 56,
	56, 149, 239, 239, 240, 240, 240, 240, 240, 240,
	241, 241, 241, 241, 241, 241, 241, 237, 237, 238,
	235, 235, 236, 236, 236, 236, 277, 277, 148, 148,
	87, 87, 244, 244, 244, 244, 242, 242, 242, 242,
	242, 245, 243, 246, 246, 246, 246, 246, 183, 183,
	183, 37, 12, 62, 62, 13, 9, 9, 130, 130,
	91, 91, 188, 188, 188, 72, 72, 51, 51, 51,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 131, 131, 132, 132, 25, 30, 36, 36, 36,
	36, 36, 279, 279, 68, 68, 68, 68, 69, 69,
	146, 146, 146, 146, 146, 63, 8, 8, 58, 58,
	59, 59, 60, 60, 61, 61, 280, 280, 24, 24,
	24, 75, 75, 139, 139, 139, 141, 141, 140, 140,
	140, 116, 116, 116, 38, 96, 96, 105, 105, 106,
	106, 194, 107, 107, 29, 29, 46, 46, 44, 44,
	44, 44, 44, 44, 45, 45, 47, 47, 47, 47,
	47, 47, 47, 252, 252, 252, 255, 255, 251, 253,
	253, 254, 254, 278, 278, 117, 117, 117, 86, 85,
	85, 89, 89, 88, 90, 90, 187, 114, 114, 114,
	114, 133, 133, 134, 134, 135, 135, 136, 136, 136,
	137, 137, 138, 138, 113, 113, 167, 167, 48, 48,
	95, 95, 97, 97, 157, 157, 157, 158, 158, 156,
	156, 156, 156, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 268, 268, 268, 269, 269, 186, 186, 190,
	190, 190, 190, 190, 190, 184, 184, 184, 184, 185,
	185, 195, 195, 120, 120, 120, 120, 118, 118, 119,
	119, 191, 191, 191, 191, 115, 115, 192, 192, 192,
	151, 151, 198, 198, 198, 216, 216, 94, 94, 94,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 200, 200, 200,
	200, 202, 202, 202, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 215, 215,
	215, 215, 215, 203, 203, 210, 210, 211, 211, 212,
	213, 204, 204, 205, 205, 206, 207, 214, 214, 214,
	214, 218, 218, 208, 208, 208, 208, 208, 209, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 128, 128, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 161, 161, 161,
	161, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 247, 247, 247, 247, 247, 247, 247, 249,
	249, 250, 250, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	256, 256, 257, 257, 259, 259, 260, 260, 261, 262,
	262, 262, 263, 264, 264, 258, 258, 265, 265, 265,
	266, 266, 267, 267, 267, 267, 267, 173, 173, 173,
	174, 174, 175, 181, 181, 181, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 70, 70, 70, 70, 70, 102, 102, 170,
	170, 168, 168, 168, 172, 172, 121, 121, 217, 217,
	217, 217, 217, 217, 217, 122, 122, 122, 129, 123,
	123, 124, 124, 124, 124, 124, 124, 164, 165, 125,
	125, 125, 166, 166, 176, 180, 180, 179, 178, 178,
	177, 177, 154, 154, 155, 155, 153, 152, 110, 110,
	109, 109, 108, 108, 281, 281, 182, 182, 111, 111,
	112, 104, 104, 193, 193, 193, 193, 98, 98, 77,
	77, 99, 99, 73, 73, 76, 76, 74, 74, 74,
	74, 92, 92, 93, 93, 71, 71, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 219, 219,
	219, 169, 65, 65, 65, 66, 66, 67, 67, 224,
	224, 224, 225, 225, 225, 225, 223, 223, 223, 223,
	223, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 3, 4, 4, 4, 2,
	2, 4, 2, 4, 4, 4, 4, 4, 4, 4,
	2, 3, 4, 3, 3, 4, 4, 2, 5, 5,
	6, 2, 2, 0, 2, 0, 6, 6, 5, 5,
	4, 12, 4, 12, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 5, 2, 0, 6, 11, 14, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 8, 11, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	6, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 7, 4, 6, 3, 1, 5, 6,
	9, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 224, 66, -8, -9, -10, -11, -12,
	-13, -254, 94, 103, 125, 206, 101, 87, 119, 227,
	234, -44, -46, 243, -147, 246, 35, 255, 60, 97,
	229, 222, 223, 280, 68, -252, -47, -45, 329, 304,
	310, 238, -48, 264, 296, 332, 264, 134, 80, 299,
	-270, -99, 264, 80, -74, -65, 322, 4, -231, -233,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	103, 109, 110, 113, 115, 120, 125, 126, 127, 128,
	135, 138, 140, 133, 148, 150, 151, 154, 153, 158,
	161, 164, 166, 167, 168, 171, 169, 173, 174, 176,
	175, 181, 183, 184, 186, 189, 192, 195, 198, 199,
	200, 201, 204, 206, 208, 209, 210, 212, 213, 215,
	216, 217, 218, 219, 222, 220, 221, 223, 224, 225,
	227, 229, 230, 232, 244, 245, 256, 234, 235, 236,
	237, 240, 241, 243, 246, 248, 251, 254, 255, 257,
	260, 258, 253, 263, 265, 266, 267, 268, 269, 276,
	280, 281, 282, 283, 286, 287, 288, 290, 293, 294,
	295, 300, 305, 306, 307, 308, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 50, 51, 52, 55, 82,
	84, 85, 100, 104, 105, 111, 121, 123, 129, 130,
	139, 141, 142, 143, 145, 156, 170, 180, 182, 193,
	197, 203, 205, 211, 231, 239, 249, 250, 259, 261,
	271, 272, 273, 277, 278, 292, 296, 297, -270, -73,
	-65, 80, 89, 138, 288, 287, 80, 134, 264, 299,
	-17, 329, -29, -7, -15, -4, -24, -38, -14, -32,
	-18, -33, -34, -35, -16, 23, -223, 4, -231, -233,
	-232, -234, 57, 69, 118, 137, 131, 147, 149, 157,
	159, 172, 194, 196, 228, 247, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 48, 49, 53, 56,
	58, 64, 68, 72, 73, 74, 75, 76, 77, 86,
	88, 90, 91, 92, 95, 97, 99, 106, 107, 108,
	114, 116, 117, 119, 122, 124, 132, 134, 136, 144,
	146, 152, 155, 160, 162, 163, 177, 178, 179, 185,
	187, 188, 190, 191, 202, 207, 214, 226, 238, 242,
	252, 262, 264, 270, 274, 275, 279, 284, 285, 289,
	291, 298, 299, 301, 302, 303, 304, -65, -65, -65,
	206, 22, -274, 22, -275, -276, 68, 94, 119, 238,
	138, 89, 287, -274, -69, 234, -65, -143, 161, 241,
	54, 231, 276, -144, -142, -222, 271, 171, -100, -65,
	4, 22, 34, 54, 242, 80, 59, 81, 120, 134,
	135, 64, 65, 151, 265, 271, 276, 68, 290, 267,
	102, -279, 276, 276, -279, -279, -68, 276, 274, -69,
	-222, -278, 264, 264, 289, 299, -130, 80, 285, -45,
	-47, -46, -88, -89, 284, 144, 99, 191, -44, -46,
	-252, -255, 212, -251, -65, -255, -85, -86, 22, 91,
	333, -191, -73, 188, -112, 329, -3, -191, 129, -73,
	-76, 129, -73, -65, -191, 129, 274, 333, -99, -92,
	-65, -153, -152, 331, 117, 117, 329, -109, -110, -152,
	-153, 117, 146, 146, -192, -191, -65, 129, -77, 129,
	-76, -101, 129, -100, -101, 129, -197, -196, -225, 4,
	-231, -233, -232, 296, 264, 134, -171, 329, -126, 329,
	-65, 22, 187, 333, 187, -65, -143, 52, -143, 244,
	329, -145, -63, -64, 148, 208, 274, 314, 117, 308,
	-81, 5, 86, -103, 331, 54, -229, -226, 9, -225,
	5, 244, 117, -271, 187, 117, 117, 117, 117, 117,
	117, 308, 148, 208, 256, 264, 299, 117, 117, -146,
	-63, -64, -146, 274, -69, -115, -191, -100, 129, -65,
	-100, 134, -65, 129, -88, -89, -114, -133, -134, 160,
	108, 185, -117, 22, 91, -117, -117, 44, 330, 330,
	333, -255, -93, 329, -104, -193, -159, 322, -161, 320,
	321, 315, 177, 309, -173, -163, -176, 100, 231, 329,
	-73, -162, 334, 9, -249, -46, 29, -174, -175, 48,
	-65, 7, 8, 5, 6, -71, -200, -169, -209, 279,
	106, 179, -247, -248, 4, -231, -224, -201, -211, -205,
	-208, 145, 57, 73, 76, 74, 77, 242, 289, 49,
	28, 104, 105, 197, 203, 261, 277, 278, 129, 180,
	130, 55, 121, 156, 93, 37, 39, 41, 42, 50,
	51, 82, 84, 85, 111, 139, 141, 142, 143, 182,
	211, 249, 259, 272, 273, 297, -232, -212, -213, -206,
	-207, -214, -104, -112, 322, -73, 329, -111, -182, -159,
	86, -53, 220, -52, 21, 23, 94, 294, 100, 253,
	268, 235, 253, 268, 235, 220, 100, 334, 220, 220,
	100, -229, -74, 333, -223, 322, -230, -229, 257, 330,
	-98, -73, -110, -192, -75, -73, -75, 243, -65, 30,
	100, -55, 333, 47, 225, 100, -55, 333, 100, -55,
	100, 330, 333, -191, 129, -76, 30, -170, -198, -199,
	-201, -210, -204, -208, -209, 40, 46, 45, 269, 170,
	239, 250, 292, 38, 186, 140, 139, 141, 142, 143,
	249, 37, 211, 111, 93, 85, 84, 182, 42, 41,
	-212, -213, -206, -207, 82, 272, 273, 145, 39, 51,
	50, 297, 259, -102, -159, -270, -276, -270, 30, -142,
	-222, -102, 333, 333, 158, -80, 164, 176, 126, -221,
	86, -227, -220, -183, 9, 279, 106, 187, -226, 8,
	321, -219, 7, 320, -221, 86, 71, -228, 5, 4,
	-169, -183, 86, 161, -209, 331, -223, 245, -100, 22,
	-222, -273, 114, -270, -222, -222, -222, -222, -222, -65,
	158, -222, -222, 264, 134, 264, 333, 333, -69, -55,
	333, 329, -87, 177, -253, 304, -87, 329, -66, 129,
	-65, -253, 177, -114, -134, -133, -135, -159, 22, -138,
	110, 173, -159, -161, -45, -45, -45, -90, -187, -159,
	-251, 30, -92, -95, 333, 117, 10, 11, 56, 33,
	320, 321, 322, 323, 112, 324, 325, 318, 319, 317,
	312, 313, 314, 62, 165, 233, 13, 14, 15, 26,
	190, 159, 309, 131, 247, 315, 16, 17, 18, 147,
	36, 132, -70, 30, 4, -78, -159, -159, -159, -159,
	-159, 196, -108, -154, 327, -46, 329, -46, -159, -102,
	7, -46, -168, 327, -177, -159, -109, 329, 5, 329,
	5, -256, 305, 114, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 205, -218, 300, -218, -218, -202, 329, -202, -203,
	329, -202, 306, 310, 329, -95, -73, 333, 330, 333,
	274, -131, 64, 58, -149, 129, 58, -235, -65, 64,
	-236, 53, 285, 207, 116, -131, 64, -131, 64, 64,
	-191, 33, -29, 117, 33, -29, 117, 274, -76, -65,
	274, 274, -191, -195, 311, -65, -195, 333, 117, 330,
	333, -151, 302, -139, -29, 329, 86, 30, -139, -105,
	-106, -194, -107, -73, 329, -65, -65, -76, -77, -100,
	-101, -101, -17, -196, 100, -20, -29, -24, -38, -14,
	330, 333, -94, 29, -127, 329, 307, 168, 83, 127,
	167, -128, 237, 330, 333, 274, 117, 276, 330, -64,
	-63, -79, 210, 251, 221, 240, 333, 8, 7, 7,
	-223, -272, -65, -73, -76, -73, -64, -63, -191, -82,
	-92, -83, -65, -150, -149, -237, -238, -235, 134, 285,
	107, 30, 100, -62, 201, 30, 187, 177, -58, 266,
	100, -136, -219, 329, 321, -137, 231, 232, 333, -51,
	31, 90, 329, 330, -151, -193, -97, -189, 327, -191,
	-73, -46, -190, 329, -216, -198, -215, 216, 217, 215,
	219, 218, -198, -223, 271, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, -159, -159, -159, 159, 131, 247,
	36, 132, -159, 274, -159, -159, -159, -159, 169, 177,
	179, 279, 106, 286, 91, 183, -281, 262, 32, -166,
	-46, 329, -181, 27, 252, 22, -223, -173, 231, 329,
	-154, -159, -155, -102, 330, 330, 333, -102, -172, 328,
	-168, -180, -179, 301, 330, -102, 298, 22, 91, 322,
	7, -127, -257, 109, 122, 329, 330, 330, -159, -159,
	-121, -217, -102, 4, 307, 168, 83, 127, 167, 237,
	-121, -122, -159, -102, -123, -160, -161, 320, 321, 315,
	329, 231, -124, -159, -102, -159, 43, 155, 275, -125,
	-159, 117, -102, -159, -159, -159, -102, -102, -102, 329,
	7, 7, 271, 271, 7, -151, 330, -182, -52, -73,
	-65, -65, 177, -149, 129, -57, 177, -198, -65, 329,
	329, 150, 150, -65, -65, 129, -65, 129, -65, -65,
	-53, 220, -29, 329, -29, 329, -65, 220, -65, -73,
	220, -39, 128, 183, -42, 304, -229, 257, 117, -73,
	-116, 226, -159, -116, -141, 187, -98, 296, -65, -116,
	-96, 333, 117, 314, -98, -55, -55, -55, -191, -198,
	327, 327, 7, 274, 274, 274, 274, 329, -159, -272,
	-272, -63, 283, 61, 210, -227, 333, -195, 330, 330,
	333, -66, 134, -66, -29, -100, 5, -29, -73, 100,
	-59, 96, -280, 314, -65, -137, -159, -187, -20, -113,
	122, -195, 333, 69, -120, 149, 172, 118, 157, 228,
	137, 7, 103, -32, -156, 334, 329, -186, 310, -46,
	-190, -189, 308, -159, -159, 274, -281, 262, -166, -159,
	169, 179, 279, 106, 286, 91, 183, 117, 329, -160,
	-160, -102, -163, 329, -102, 328, 337, 330, -159, 328,
	328, 333, -178, -179, 95, -159, -89, 333, -88, -159,
	-102, -102, 330, 330, -262, 195, 329, 329, -159, 30,
	333, 330, 117, 330, 330, -129, 202, 330, 10, 11,
	320, 321, 322, 323, 112, 324, 325, 318, 319, 317,
	312, 313, 314, 62, 165, 233, 13, 14, 15, 147,
	132, -160, -160, -160, -102, 329, 330, -164, -165, 117,
	114, 30, -125, -125, -125, 330, 117, -102, 333, 333,
	333, 330, 330, 330, 7, 330, 333, 330, 308, 308,
	330, -113, 274, 274, 100, 177, 293, -239, -236, -159,
	-91, -188, -65, -250, 329, -247, -248, -71, 329, 329,
	-50, 94, 243, -132, 100, -55, 100, -55, 274, -131,
	64, -102, -102, 274, 274, -42, 117, 263, 189, 257,
	-104, 178, -116, 63, 330, -151, -106, -97, -182, 330,
	328, 7, 7, 330, 168, 127, 167, -128, 167, -128,
	-128, 7, -65, -84, 133, -150, 329, -66, 329, 329,
	-87, 329, -65, -60, 154, -280, -226, -253, 188, 330,
	330, -167, 124, 44, -189, 149, 149, -189, -120, 149,
	-118, 194, -118, -118, -268, 329, -17, 329, 328, -186,
	-223, 327, 335, -102, -185, -184, 30, -65, 192, 330,
	-159, -159, -160, -160, 117, 329, -159, -170, 26, 26,
	330, -102, 330, 333, -155, -159, 330, -168, 97, -159,
	270, 330, 298, -89, -89, -89, 5, -263, -65, 329,
	302, -88, 330, -216, -198, -159, -164, -159, -216, -198,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, 91,
	177, 183, -160, 333, -102, 330, -165, -164, -159, -159,
	-198, 330, 330, 330, -102, -159, -159, -159, 330, 7,
	-167, -65, -65, -149, 100, -240, 64, -241, 56, 107,
	68, 177, 179, 285, 207, 53, 86, 214, 330, 330,
	333, -72, -109, 56, -72, -159, 329, -91, -92, 177,
	86, 177, 86, 79, 281, -65, -65, -73, -65, -65,
	330, 330, -65, -73, -230, 271, 329, -140, 329, 187,
	-29, -116, 314, 328, 328, 330, 132, -91, 329, -92,
	-82, 30, -91, 187, -61, 153, -280, -226, -58, -259,
	303, -159, -102, -189, -189, -119, 291, 187, 149, -189,
	328, 330, -269, 7, 328, -197, -186, -185, 7, -158,
	-157, 115, 175, 330, -65, 329, -186, 26, 26, -159,
	-170, 330, -159, -159, 330, -159, 328, -159, 5, -159,
	330, 330, 330, -264, -65, -159, 330, 330, 330, -165,
	117, 91, 183, 329, -159, 330, 330, 333, 330, 330,
	330, -259, -149, -65, -223, -65, 107, 129, 179, 150,
	329, -160, -73, -148, -277, 67, 260, -188, -51, -223,
	-51, 330, -102, 330, 330, 179, 179, -159, -198, -55,
	-55, 274, 274, 274, 274, -162, -71, -65, -41, -40,
	5, 92, -92, 64, -112, -46, 329, 198, 330, -91,
	330, 330, -29, 330, -73, -280, -226, -59, -260, -261,
	-65, -119, 329, -159, -189, -156, 330, 333, -186, 330,
	-185, 328, 333, 336, 314, -186, 329, -92, -184, -159,
	-159, 330, 330, -89, -258, 200, 330, -160, 117, 329,
	-170, 330, -159, -241, -66, 177, -159, -67, 329, -84,
	329, -72, -89, 214, -54, 56, -65, -65, 329, 329,
	329, 333, 330, -43, 314, 287, 178, 330, -65, -65,
	-148, 330, -84, -148, 329, -226, -60, 333, 30, -92,
	-186, 7, -185, -17, -157, -223, 327, -185, -92, 330,
	330, -89, 44, -160, -170, 330, 330, 100, 330, -244,
	166, -65, -92, -51, 330, -73, -49, 291, -223, -102,
	-102, -102, -40, 5, 243, -151, 329, -84, -148, -84,
	-91, -61, -261, -263, 330, -184, 328, 7, 330, -265,
	209, 232, -102, 330, 107, -242, -245, -243, 187, 118,
	199, 248, 330, 330, -87, -159, 330, 330, -89, -105,
	-92, -84, 330, -186, 328, 330, -266, -267, 36, 282,
	71, -159, -266, -65, -243, 187, -245, 187, 287, 89,
	-244, 330, -151, 330, -148, -185, -267, 204, 113, 231,
	204, 113, -246, 174, 225, 47, 243, -246, -242, -56,
	47, 225, -84, 26, 20, 179, 86, -267,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 432, 0, 0, 0, 0, 0, 0,
	0, 404, -2, 0, 157, 0, 353, 0, 353, 353,
	357, 0, 0, 434, 319, 431, -2, 442, 0, 0,
	0, 440, 418, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 972, 901, 907, 908, 932, 933, 934,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 0, 0,
	903, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 0, 231, 946, 947, 948,
	949, 950, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 121, 128, 129,
	1025, 131, 0, 138, 139, 140, 142, 143, 144, 145,
	146, 147, 148, 0, 346, 1049, 359, 152, 1002, 1054,
	960, 1126, 1071, 160, 170, 0, 1132, -2, 174, 97,
	203, 204, 0, 0, 209, 210, 0, 212, 233, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 227, 0,
	0, 364, 352, 364, 349, 350, 351, 354, 0, 345,
	151, 0, 433, 0, 0, 0, 0, 0, 318, -2,
	414, 415, -2, 0, 437, 437, 437, 0, 0, 415,
	0, 423, 1029, 426, 914, 424, 0, 0, 439, 438,
	0, 419, 521, 0, 468, 0, 2, 0, 1110, 521,
	0, 1110, 906, 0, 0, 1110, 0, 0, 136, 137,
	911, 909, 910, 0, 0, 0, 0, 904, 880, 878,
	879, 0, 0, 0, 0, 527, 87, 1110, 55, 1110,
	899, 55, 1110, 95, 55, 1110, 0, 116, 118, 942,
	943, 944, 945, 1138, 0, 0, 0, 0, 126, 0,
	130, 132, 0, 0, 0, 358, 153, 1099, 155, 0,
	0, 159, 161, 162, 0, 0, 0, 0, 0, 0,
	173, 198, 199, 98, 0, 0, 205, 64, 65, 201,
	202, 0, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 223, 224, 0, 0, 0, 0, 347,
	360, 361, 348, 0, 356, 55, 525, 291, 1110, 430,
	291, 936, 430, 1110, -2, 0, 410, 449, 450, 0,
	0, 0, 0, 435, 436, 0, 0, 0, 406, 407,
	0, 425, 0, 0, 471, 891, 895, 896, 625, 0,
	0, 0, 0, 0, 0, 717, 719, 1104, 1126, 0,
	721, 722, 0, 724, 726, 727, 0, 730, 731, 871,
	903, 917, 918, 919, 920, 0, 0, 923, 0, 925,
	926, 927, 771, 740, -2, -2, 915, 557, 558, 559,
	560, -2, 1140, 744, 746, 748, 749, 750, 751, 0,
	1088, 1105, 1106, 1122, 1123, 1131, 1135, 1136, 1110, 1119,
	1111, 1100, 1108, 1117, 977, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 941, 587, 588, 593,
	594, 596, 471, 469, 522, 523, 0, 0, 888, 886,
	887, 32, 342, 34, 0, 342, 342, 0, 0, 0,
	0, 240, 0, 0, 242, 0, 0, 0, 0, 0,
	0, 512, 902, 0, 876, 877, 512, 66, 77, 0,
	0, 897, 881, 531, 0, 381, 0, 0, 528, 0,
	0, 89, 0, 53, 54, 0, 91, 0, 0, 93,
	0, 432, 0, 0, 1110, 0, 432, 0, 829, 539,
	540, 541, 542, 543, 622, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 564, 565, 566, 567,
	568, 569, 570, 584, 0, 563, 563, 563, 576, 577,
	585, 586, 591, 592, 603, 604, 606, 608, 602, 602,
	602, 599, 600, 0, 827, 0, 141, 0, 0, 156,
	0, 0, 0, 0, 0, 165, 185, 186, 187, 166,
	168, 175, 177, 178, 179, 188, 189, 190, 191, 308,
	0, 310, 928, 0, 167, 169, 171, 172, 192, 193,
	194, 195, 196, 197, 0, 0, 99, 208, 206, 207,
	211, 213, 0, 232, 214, 215, 216, 217, 218, 219,
	222, 225, 226, 0, 0, 0, 0, 0, 355, 311,
	0, 249, 0, 0, 314, 429, 0, 0, 0, 1110,
	935, 369, 0, 413, 447, 448, 451, 455, 456, 459,
	462, 463, 453, 625, 420, 421, 422, 443, 444, 329,
	427, 0, 0, 531, 0, 0, 0, 0, 0, 0,
	806, 807, 808, 809, 810, 811, 814, 815, 812, 813,
	816, 817, 818, 0, 0, 0, 819, 820, 821, 0,
	0, 823, 0, 825, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 894, 822, 630, 631, 632, 654,
	655, 0, 718, 882, 875, 720, 0, -2, 827, 0,
	723, 728, 729, 0, 0, 870, -2, 0, 922, 0,
	622, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 850, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 572, 590, 601, 598, 597, 574, 0, 573, 571,
	0, 575, 0, 0, 0, 531, 0, 0, 890, 0,
	0, 0, 0, 341, 36, 1110, 0, 57, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 0, 0, 239, 0, 0, 0, 905,
	0, 0, 0, 69, 0, 912, 76, 0, 0, 0,
	0, 393, 0, 393, 383, 0, 0, 0, 393, 396,
	397, 399, 400, 0, 0, 529, 88, 900, 55, 96,
	55, 55, 102, 117, 0, 119, 122, 123, 124, 125,
	120, 0, 532, 534, 544, 0, 609, 610, 611, 612,
	613, 614, 623, 127, 0, 0, 0, 0, 158, 163,
	164, 365, 0, 182, 0, 184, 0, 309, 930, 929,
	100, 234, 149, 228, 229, 512, 362, 363, 526, 0,
	0, 248, 911, 250, 252, 253, 254, 255, 936, 0,
	936, 0, 0, 312, 0, 0, 0, 0, 371, 377,
	0, 0, 457, 0, 0, 454, 460, 461, 0, 446,
	327, 328, 432, 913, 465, 892, 512, 472, 0, 482,
	521, 498, 487, 0, 626, 535, 536, 578, 579, 580,
	581, 582, 627, 628, 0, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, -2, -2, -2, 646, 647,
	648, -2, -2, -2, 652, 653, -2, 824, 826, 0,
	885, 0, -2, 0, -2, -2, -2, -2, 666, 0,
	668, 671, 673, 675, 0, 0, 0, 0, 884, 685,
	862, 0, 0, 803, 804, 805, 893, 670, 0, 0,
	883, 874, 0, 0, -2, 725, 0, 0, 0, 833,
	834, 869, 865, 0, 732, 442, 0, 0, 0, 0,
	0, 931, 781, 0, 0, 0, 745, 747, 0, 0,
	0, 0, 837, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 827, 847, 0, 0, 688, 0, 0, 0,
	0, 1126, 0, 827, 855, 0, 0, 0, 0, 0,
	827, 0, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 465, 524, 889, 35, 331,
	0, 0, 0, 38, 1110, 46, 0, 263, 0, 0,
	0, 0, 0, 344, 47, 1110, 55, 1110, 55, 48,
	33, 342, 236, 0, 237, 0, 335, 0, 330, 333,
	0, 76, 0, 0, 63, 0, 67, 78, 0, 898,
	86, 0, 530, 378, 393, 0, 0, 385, 382, 380,
	531, 0, 0, 0, 0, 90, 92, 94, 0, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 133,
	134, 154, 180, 181, 183, 176, 0, 230, 257, 290,
	0, 0, 936, 0, 246, 291, 313, 315, 0, 0,
	373, 377, 0, 376, 430, 0, 0, 445, 0, 467,
	0, 470, 0, 0, 0, 0, 0, 518, 518, 518,
	516, 492, 432, 0, 498, 0, 0, 510, 0, -2,
	487, 0, 0, -2, -2, 0, 0, 0, 686, -2,
	667, 669, 672, 674, 676, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 872, 875, -2, 828, 831,
	832, 0, 0, 866, 0, 0, 0, 0, 441, 442,
	442, 442, 738, 0, 739, 0, 0, 0, 0, 0,
	0, 754, 0, 755, 756, 0, 0, 757, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 691, 692, 693, 0, 0, 758, 853, 854, 0,
	0, 0, 0, 0, 0, 763, 0, 860, 0, 0,
	0, 767, 768, 769, 0, 561, 0, 583, 605, 607,
	595, 467, 0, 0, 0, 0, 56, 261, 280, 0,
	0, 320, 326, 326, 0, 741, 742, 0, 0, 0,
	40, 0, 0, 0, 0, 44, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 79,
	391, 392, 379, 390, 0, 393, 398, 395, 401, 0,
	537, 0, 0, 545, 615, 616, 617, 618, 619, 620,
	621, 0, 150, 244, 0, 251, 0, 0, 0, 249,
	0, 0, 0, 375, 377, 0, 368, 369, 452, 458,
	428, 775, 0, 0, 473, 0, 0, 0, 0, 0,
	513, 517, 514, 515, 0, 0, 0, 0, 498, 510,
	479, 0, 0, 0, 486, 509, 0, 508, 497, -2,
	629, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	863, 0, 798, 0, 0, 874, -2, 835, 864, 868,
	0, 733, 0, 0, 0, 0, 924, 779, 780, 784,
	0, 0, 743, 0, 0, 836, 846, 848, 689, 690,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	-2, -2, -2, 707, 708, 709, -2, -2, -2, 0,
	0, 0, 849, 0, 0, 801, 851, 852, 857, 858,
	0, 760, 761, 762, 859, 0, 0, 0, 589, 0,
	775, 337, 339, 37, 0, 262, 0, 265, 0, 0,
	0, 0, 271, 272, 0, 0, 0, 0, 282, 289,
	0, 329, 916, 0, 329, 0, 0, 0, 0, 0,
	52, 0, 0, 343, 0, 55, 55, 332, 0, 0,
	0, 0, 336, 334, 68, 0, 0, 0, 0, 0,
	384, 394, 0, 538, 533, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 366, 377, 0, 370, 371, 416,
	0, 466, 464, 500, 0, 502, 0, 0, 0, 504,
	482, 493, 0, 495, 498, 0, 510, 484, 0, 0,
	477, 0, 476, 498, 506, 0, 0, 0, 0, -2,
	0, 679, -2, -2, 797, 828, 873, 867, 921, 442,
	734, 736, 737, 786, 783, 0, 770, 752, 753, 845,
	0, 0, 0, 0, 828, 800, 759, 0, 765, 766,
	562, 417, 39, 0, 266, 267, 936, 0, 270, 273,
	0, 275, 938, 257, 0, 286, 287, 321, 322, 325,
	323, 326, 442, 284, 0, 41, 42, 51, 59, 43,
	49, 0, 0, 0, 0, 511, 0, 0, 0, 73,
	71, 0, 0, 0, 402, 403, 0, 0, 289, 0,
	279, 257, 247, 289, 0, 0, 372, 373, 774, 776,
	0, 501, 0, 520, 503, 498, 494, 0, 510, 432,
	491, 480, 0, 481, 0, 510, 0, 0, 488, -2,
	-2, 680, 799, 0, 442, 0, 772, -2, 0, 0,
	0, 802, 0, 264, 268, 0, 0, 295, 0, 283,
	0, 329, 0, 0, 61, 0, 338, 340, 0, 0,
	0, 0, 75, 72, 0, 0, 387, 531, 389, 0,
	257, 289, 245, 257, 0, 374, 375, 0, 0, 0,
	0, 496, 489, 0, 478, 474, 0, 485, 0, 507,
	735, 789, 0, -2, 0, 715, 764, 0, 274, 300,
	0, 0, 0, 324, 733, 291, 45, 0, 58, 0,
	0, 442, 74, 70, 0, 388, 0, 277, 257, 316,
	0, 367, 777, 778, 519, 483, 498, 0, 505, 0,
	0, 0, 785, 716, 0, 276, 296, 297, 0, 292,
	293, 294, 937, 288, 295, 60, 241, 243, 0, 531,
	0, 278, 289, 510, 475, 782, 787, 790, -2, 1074,
	969, 0, 788, 269, 298, 0, 299, 0, 0, 0,
	300, 0, 386, 260, 257, 490, 0, 792, 793, 794,
	795, 796, 301, 0, 304, 305, 0, 302, 285, 256,
	258, 259, 317, 0, 303, 306, 307, 791,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 318, 3, 324, 319, 3,
	329, 330, 322, 320, 333, 321, 331, 323, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 337, 332,
	312, 314, 313, 3, 334, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 327, 3, 328, 325, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 335, 317, 336, 315,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 316,
	57655, 326, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:777
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:789
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:908
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:918
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return unimplemented(sqllex, "alter using")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1058
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			return unimplemented(sqllex, "set local")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			return unimplemented(sqllex, "set from current")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return unimplemented(sqllex, "set names")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1662
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1686
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1690
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1694
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1737
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1741
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1747
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1759
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = DropDefault
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1844
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			return unimplemented(sqllex, "match full")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			return unimplemented(sqllex, "match partial")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			return unimplemented(sqllex, "match simple")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2052
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2062
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex, "no action")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			return unimplemented(sqllex, "action set null")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			return unimplemented(sqllex, "action set default")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = true
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = false
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2185
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2189
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = Ascending
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = Descending
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2243
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2244
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = true
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = false
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2258
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2300
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2301
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.str = ""
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.str = ""
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.str = ""
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.str = ""
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = ""
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2423
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2424
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2488
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 394:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2522
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2751
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2759
		{
			return unimplemented(sqllex, "cte")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = true
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = false
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = false
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = true
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2795
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &From{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3000
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3045
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3062
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = nil
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = true
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = false
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.str = astFullJoin
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = astLeftJoin
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = astRightJoin
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.str = astInnerJoin
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3346
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3361
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3370
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3442
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = nil
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3619
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = year
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = month
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = day
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = hour
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = minute
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = month
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = hour
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = minute
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = minute
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = nil
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = second
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3754
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			return unimplemented(sqllex, "at tz")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4023
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4249
		{
			return unimplemented(sqllex, "variadic")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4250
		{
			return unimplemented(sqllex, "variadic")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			return unimplemented(sqllex, "func_application")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4294
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4311
		{
			return unimplemented(sqllex, "current role")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			return unimplemented(sqllex, "current user")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			return unimplemented(sqllex, "session user")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			return unimplemented(sqllex, "user")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4343
		{
			return unimplemented(sqllex, "treat")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4387
		{
			return unimplemented(sqllex, "within group")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4388
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = Window(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.str = ""
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			return unimplemented(sqllex, "frame range")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4487
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4491
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4498
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4500
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Any
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = Some
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = All
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = Plus
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = Minus
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = Mult
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = Div
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = FloorDiv
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = Mod
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = Bitand
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = Bitor
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = Pow
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = Bitxor
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = LT
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = GT
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = EQ
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = LE
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = GE
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = NE
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = Like
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = NotLike
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = ILike
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = NotILike
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4866
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5028
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5064
		{
			return unimplemented(sqllex, "func const")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5073
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = DNull
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.str = ""
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
