// Code generated by protoc-gen-gogo.
// source: cockroach/gossip/gossip.proto
// DO NOT EDIT!

/*
	Package gossip is a generated protocol buffer package.

	It is generated from these files:
		cockroach/gossip/gossip.proto

	It has these top-level messages:
		Request
		Response
		Info
*/
package gossip

import proto "github.com/gogo/protobuf/proto"
import cockroach_proto1 "github.com/cockroachdb/cockroach/proto"

// discarding unused import cockroach_proto "github.com/cockroachdb/cockroach/proto"
import cockroach_util "github.com/cockroachdb/cockroach/util"

// discarding unused import gogoproto "gogoproto"

import github_com_cockroachdb_cockroach_proto "github.com/cockroachdb/cockroach/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// Request is the request struct passed with the Gossip RPC.
type Request struct {
	// Requesting node's ID.
	NodeID github_com_cockroachdb_cockroach_proto.NodeID `protobuf:"varint,1,opt,name=node_id,proto3,casttype=github.com/cockroachdb/cockroach/proto.NodeID" json:"node_id,omitempty"`
	// Address of the requesting client.
	Addr cockroach_util.UnresolvedAddr `protobuf:"bytes,2,opt,name=addr" json:"addr"`
	// Local address of client on requesting node (this is a kludge to
	// allow gossip to know when client connections are dropped).
	LAddr cockroach_util.UnresolvedAddr `protobuf:"bytes,3,opt,name=l_addr" json:"l_addr"`
	// Maximum sequence number of gossip from this peer.
	MaxSeq int64 `protobuf:"varint,4,opt,name=max_seq,proto3" json:"max_seq,omitempty"`
	// Delta of new Infos since last gossip.
	Delta map[string]*Info `protobuf:"bytes,5,rep,name=delta" json:"delta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

func (m *Request) GetAddr() cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.Addr
	}
	return cockroach_util.UnresolvedAddr{}
}

func (m *Request) GetLAddr() cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.LAddr
	}
	return cockroach_util.UnresolvedAddr{}
}

func (m *Request) GetDelta() map[string]*Info {
	if m != nil {
		return m.Delta
	}
	return nil
}

// Response is returned from the Gossip.Gossip RPC.
// Delta will be nil in the event that Alternate is set.
type Response struct {
	// Responding Node's ID.
	NodeID github_com_cockroachdb_cockroach_proto.NodeID `protobuf:"varint,1,opt,name=node_id,proto3,casttype=github.com/cockroachdb/cockroach/proto.NodeID" json:"node_id,omitempty"`
	// Address of the responding client.
	Addr cockroach_util.UnresolvedAddr `protobuf:"bytes,2,opt,name=addr" json:"addr"`
	// Non-nil means client should retry with this address.
	Alternate *cockroach_util.UnresolvedAddr `protobuf:"bytes,3,opt,name=alternate" json:"alternate,omitempty"`
	// Maximum sequence number of gossip from this peer.
	MaxSeq int64 `protobuf:"varint,4,opt,name=max_seq,proto3" json:"max_seq,omitempty"`
	// Requested delta of server's infostore.
	Delta map[string]*Info `protobuf:"bytes,5,rep,name=delta" json:"delta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetAddr() cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.Addr
	}
	return cockroach_util.UnresolvedAddr{}
}

func (m *Response) GetAlternate() *cockroach_util.UnresolvedAddr {
	if m != nil {
		return m.Alternate
	}
	return nil
}

func (m *Response) GetDelta() map[string]*Info {
	if m != nil {
		return m.Delta
	}
	return nil
}

// Info is the basic unit of information traded over the
// gossip network.
type Info struct {
	Value cockroach_proto1.Value `protobuf:"bytes,1,opt,name=value" json:"value"`
	// Wall time when info is to be discarded (Unix-nanos)
	TTLStamp int64 `protobuf:"varint,2,opt,name=ttl_stamp,proto3" json:"ttl_stamp,omitempty"`
	// Number of hops from originator
	Hops uint32 `protobuf:"varint,3,opt,name=hops,proto3" json:"hops,omitempty"`
	// Originating node's ID
	NodeID github_com_cockroachdb_cockroach_proto.NodeID `protobuf:"varint,4,opt,name=node_id,proto3,casttype=github.com/cockroachdb/cockroach/proto.NodeID" json:"node_id,omitempty"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}

func (m *Info) GetValue() cockroach_proto1.Value {
	if m != nil {
		return m.Value
	}
	return cockroach_proto1.Value{}
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovGossip(uint64(m.NodeID))
	}
	l = m.Addr.Size()
	n += 1 + l + sovGossip(uint64(l))
	l = m.LAddr.Size()
	n += 1 + l + sovGossip(uint64(l))
	if m.MaxSeq != 0 {
		n += 1 + sovGossip(uint64(m.MaxSeq))
	}
	if len(m.Delta) > 0 {
		for _, e := range m.Delta {
			l = e.Size()
			n += 1 + l + sovGossip(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovGossip(uint64(m.NodeID))
	}
	l = m.Addr.Size()
	n += 1 + l + sovGossip(uint64(l))
	if m.Alternate != nil {
		l = m.Alternate.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.MaxSeq != 0 {
		n += 1 + sovGossip(uint64(m.MaxSeq))
	}
	if len(m.Delta) > 0 {
		for _, e := range m.Delta {
			l = e.Size()
			n += 1 + l + sovGossip(uint64(l))
		}
	}
	return n
}

func (m *Info) Size() (n int) {
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovGossip(uint64(l))
	if m.TTLStamp != 0 {
		n += 1 + sovGossip(uint64(m.TTLStamp))
	}
	if m.Hops != 0 {
		n += 1 + sovGossip(uint64(m.Hops))
	}
	if m.NodeID != 0 {
		n += 1 + sovGossip(uint64(m.NodeID))
	}
	return n
}

func sovGossip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGossip(x uint64) (n int) {
	return sovGossip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
