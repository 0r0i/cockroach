// Code generated by go-bindata.
// sources:
// ../../resource/test_certs/ca.crt
// ../../resource/test_certs/ca.key
// ../../resource/test_certs/node.crt
// ../../resource/test_certs/node.key
// ../../resource/test_certs/node.server.crt
// ../../resource/test_certs/node.server.key
// DO NOT EDIT!

package securitytest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\xbd\xd2\xa2\x4c\x10\x85\x73\xae\xe2\xcb\xdf\xfa\x4a\x44\x5f\x17\xc3\x1e\xa6\x85\x41\x66\x70\x10\x44\xc8\xfc\x59\x40\x10\x51\x11\x07\xbd\xfa\x55\x83\xad\xdd\xda\x0e\x9f\xe0\xd4\x53\xa7\xcf\xff\xef\x23\x68\x33\xf1\x9f\x85\x41\xc8\x66\xcc\x82\x10\x3f\x54\xe3\x8c\x91\x9f\xa1\x65\xc1\x32\xce\x41\x31\x02\x39\x0b\x60\x71\xde\x64\x82\xdd\xb3\x5d\xdb\x6f\x3b\x3c\x0c\x70\x30\x5e\xed\x73\x65\xa9\xc4\x9d\x37\x29\x2b\xee\x3b\x01\x12\x3d\x6e\xb5\xbd\x86\x25\x48\x92\x8b\x15\x81\x26\xb4\x22\x71\x4f\x8c\xdb\x63\x6b\xcc\xca\x0d\xc5\x15\x27\xdc\x86\x61\x84\xd0\x73\x2e\x8d\x69\xb9\x19\xb9\xf7\x24\x16\x0d\x43\x41\x38\x19\xaf\x69\x88\x43\x8d\xd3\xa4\x17\x21\x8e\x05\x65\x0f\x7e\x6c\xde\xd0\xf8\x30\xfa\x9b\xa9\xf9\x13\x97\x9c\xc0\x27\xcc\x2a\xb8\xfb\x67\x98\xc6\x83\x48\xa1\x4a\xe8\x4a\x4a\x8a\xaa\xa7\x5b\x43\x5c\x77\xf5\xb4\x48\x8c\x3c\x97\x3a\xaa\x35\x05\x41\xf2\xea\x52\x54\x07\x7b\xaa\x74\xf2\x52\x9f\x01\x08\x0f\x28\x61\x50\x21\x68\xca\x59\xb8\x4d\xe7\x8b\x6f\xde\x46\xf9\xd4\xa1\x5b\xdc\xdf\xa3\xae\x0e\xe9\x62\x77\xf5\x3c\x48\xe5\x72\x54\x06\x32\xad\x86\x8b\xdb\x11\x9a\xe7\x59\x8c\x06\xb5\x9d\xb9\x97\xd1\x7a\x52\x9d\x57\x7a\xac\x3d\x92\x72\x7c\xb3\x6d\xa8\xf4\xce\xef\xcc\x3a\x8b\x23\xd7\x2c\x24\xa3\x20\x81\x34\x8f\x44\xb9\x14\xfc\x77\x47\x8e\x34\x09\x64\x26\x12\xe0\x16\xf8\x52\x61\xfe\xb2\x0e\xf4\x50\x03\xe9\x0c\x5e\xd5\x2b\x92\x23\x19\xbc\xbf\x10\x82\xf7\xb7\x72\x4b\xa5\xb4\x4e\x99\xfb\x5d\xe7\x05\xda\x9e\xd9\x9c\xe0\x60\x97\x66\xd9\x15\x85\x77\x92\x9a\xbf\xac\x78\x5f\x5f\xdc\xe1\x35\x3e\x6e\x2e\xc7\x22\xfa\xa2\xce\x6c\xbf\xe4\xb2\xdd\xfa\x5f\xb1\x2e\x9d\x34\x0d\x2e\xe7\x89\x3f\xf9\x7a\x3e\x7e\x54\x89\xb7\x30\xce\xad\xae\xb2\x49\x3a\xdf\xdb\xda\x67\x09\x28\xe8\xbf\xeb\xf8\x15\x00\x00\xff\xff\x38\x23\x64\x15\x3a\x02\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 570, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd1\xcb\x96\x63\x40\x00\x80\xe1\xbd\xa7\xe8\xbd\x33\xa7\x49\x22\x61\x31\x8b\x52\x29\x52\x85\x8a\x7b\xb0\x13\x9a\x20\xe2\x92\x1a\xd5\x3c\xfd\x9c\xe9\xf5\xfc\xdb\x7f\xf9\xfd\xfa\x97\x8e\x4c\x4c\x3f\xfc\x00\x7c\xb8\x3e\x8e\x41\x88\x3e\x2c\x94\xfe\x1c\xc1\xc1\x58\xbf\x7a\x58\x07\x80\xe8\xc0\xd1\xb7\x35\xb7\xdb\xf6\x2b\xb4\x0d\xec\xfa\x7c\xf7\x7d\xb9\xcb\xf6\xd8\xf1\x6d\x6f\xad\x2b\x37\x23\xc4\x0e\x52\x64\x66\x34\x3c\x65\x9e\xe5\x1c\xc3\xf2\x53\x50\x1e\xaf\x35\x67\xb2\x38\x5a\x71\x69\xbc\x7b\x2c\xda\xfe\xa3\x26\xd4\x6e\xe7\x85\xbc\xe4\x27\xac\x70\x04\x01\x47\x00\x78\x04\xd0\xb9\x94\x94\xe3\xa2\x2a\xef\x30\x2f\x64\xcf\x8e\x69\x6b\x0a\xad\xeb\x68\x1b\xdd\x9e\x37\x42\xd0\x2a\xfa\xe4\x3c\x5e\x96\x6d\x35\xeb\x22\x6f\xef\x52\xd3\xe7\x22\x57\x53\x78\x8b\x2f\xcf\x34\xf4\xae\x5d\x67\xe0\x88\xe4\x6a\xea\x80\x2a\xce\x5d\x6e\x7b\x4f\x61\xf6\xf0\x03\xd0\xcd\xd9\x67\xf2\x97\x94\x14\x2e\x23\x81\x8f\xda\xeb\xe2\x77\xec\x04\x39\x30\x64\xab\xa9\x25\x18\x59\xb3\xcc\xab\x4f\x0b\xb9\xa0\x41\x60\xbf\x62\xbd\xbf\x07\xb1\x7b\xb8\x0c\x42\x76\xd9\x1d\x5b\x2d\x59\xa7\x2a\xe9\x1d\x3b\xd8\x25\xe7\xc2\xba\x9f\x4e\x9a\xe8\x6e\xaf\x21\x78\x43\x0c\xe5\xa6\x63\x2a\xc1\xb7\xa2\x5f\x50\x93\x95\x21\x4d\x6b\x87\x69\x06\x9c\x21\x04\x1a\x15\x62\xc6\x76\x51\xc1\xae\x47\x4d\xdc\x40\x03\xda\x66\x02\xdd\x30\x1c\xdc\x74\x9c\x87\x85\x0d\xed\xe8\xf7\xb1\xb1\x44\xe6\xf3\x9b\x3c\x0c\xb1\x0c\xa6\x1d\x39\xaa\x59\x92\x8c\x1c\xd7\xf4\x16\xbf\x84\xf7\x19\xd4\x8c\x1e\xaa\x92\xc0\x69\xd0\xfb\x54\x99\x8c\x60\x09\x94\xc2\xd7\xab\x88\x73\x95\xf2\x58\x7a\xfc\x51\xd4\xdf\xc2\x0f\x1a\xa2\xe7\xff\x63\xfe\x0d\x00\x00\xff\xff\x4f\x54\xee\x8d\xed\x01\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 493, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\x41\x73\xa2\x4c\x18\x84\xef\xfc\x8a\xef\x9e\xfa\x6a\x11\xb4\xd4\x43\x0e\xef\x30\x23\x0c\x38\x63\x86\xcc\x40\xe0\x66\xd0\x80\x88\x1a\x51\xe7\xd5\xfc\xfa\x35\x6e\xd5\xd6\x6e\x6d\x1f\x9f\x43\xd7\x53\x5d\xfd\xff\x77\x08\x0b\xb9\xfc\x2f\x60\xa9\xe6\x33\x1e\x80\x66\x0f\xea\x08\xce\x49\xa5\x83\x00\x52\xaf\x06\xe4\x04\x6a\xae\x96\x65\xe5\x8e\xb0\xe4\x26\xfb\xe8\x3c\xf3\x94\xad\xb6\xd3\x19\x6a\x98\x93\x7a\x7b\x6c\xb6\x9b\x70\x8a\x2e\x01\x75\xc2\xe4\x8b\xbd\x3a\x82\x40\x08\x03\xc3\x82\x46\xc4\xca\x9b\xb6\x4b\x3f\xb6\x45\x2e\x0f\x22\x35\xc8\xb0\xa0\x99\x52\x94\xe1\x95\xbe\x7b\xb2\xaf\x76\xd3\xa6\xf0\xea\x5a\xb9\x0c\xa3\xa6\x92\x42\x1b\x74\x64\xcb\x06\x42\xd7\xae\x68\xf9\x30\x7f\xc0\x02\xef\xcc\xfd\xcd\x5a\x68\x45\xca\x91\xc1\xa3\x2c\x61\xd8\xfd\x59\x76\x75\xe8\x43\x4d\x66\x04\x84\x26\xe1\xc8\x96\xa1\xc1\x37\x0a\xf2\x6f\x5d\x36\x03\x90\x73\xa0\x84\xc3\x96\x41\x5f\xe8\x7d\xe4\xca\xfc\x90\x6f\xf6\x8e\xc8\x9a\xee\x47\x36\xa9\x2c\x31\xb7\xa8\x49\xab\x6e\xfd\x34\x9f\x28\x39\xe8\x32\x73\x84\x97\x35\x8d\x79\x12\xb1\xf4\x38\xca\x9b\x71\x5c\x8e\x32\x33\x09\xed\xa5\x51\x9b\xcb\x7a\xb9\x2f\x55\xfc\x2e\x1c\xbf\xf5\xc6\x59\x7f\xd3\x1c\x39\x05\x05\xe4\x70\xab\x30\xd6\xb0\xf8\xb6\x8a\xd4\x84\xc0\xc7\x84\xdd\xed\x02\x48\xe0\xd7\x26\xa9\xdb\x11\x40\x0c\xea\x82\x27\x58\x10\x87\x28\x13\xdd\xd7\xc7\x00\x8b\x38\x39\x94\xbc\xb1\x95\xbc\x2b\xcf\xc1\x65\x10\x0b\x31\x8c\xd8\x32\x3c\xf1\xd5\xa7\x89\xfc\x22\xa9\xcf\x33\xff\x9c\xf0\x71\xc7\xcb\xb3\x55\xfe\xf2\x95\x5e\x9c\xeb\xa9\x37\xc2\xe3\x1b\x36\x9c\x52\x53\x1e\xe7\x2f\x67\x1d\x9c\x9b\x43\x3e\x58\x75\xd6\xe6\xfd\x62\xf1\x99\xee\x76\xf4\x6d\xd3\xdb\xda\x6a\xff\xf2\x15\xd4\xcf\xcf\xce\xe3\x01\x4c\xd2\x7f\x5f\xf1\x33\x00\x00\xff\xff\xe3\xbe\xf2\x78\x32\x02\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 562, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd1\xbd\xd2\xa2\x30\x00\x85\xe1\x9e\xab\xb0\x77\x76\x10\x75\x41\x8a\x2d\x02\x44\x09\x02\x26\x60\x02\xd8\xa1\xfc\x88\x20\x28\x2c\x09\x78\xf5\x3b\x7e\xf5\x9e\xf6\x34\xef\xcc\xf3\xeb\x3b\x03\x1e\x90\xbf\x08\x42\xb0\xc0\x01\x62\xe0\x0c\x17\x47\x98\xfc\x3c\x92\x87\x90\x81\x01\x32\x00\x70\x0c\x70\x5c\xc3\xdf\x93\x6e\xb1\xf7\xbe\x7b\x7d\xf6\xc9\xa5\x50\x0a\xdb\x15\xcc\xbb\x6f\x69\xec\xc4\xbc\x92\xa1\x95\x5d\x18\x3b\x96\xd6\xa6\x9c\x43\xf3\x3e\xc1\x54\x1a\x59\x97\xcf\x51\xce\x18\x36\x7a\xad\xa3\xa8\x6f\x9f\xaf\x35\x35\xa3\x8f\xbf\xd5\x47\x25\xdd\xd5\xb3\x67\x02\x01\x01\x20\x0e\x08\x8f\x67\x48\x73\x25\xb4\x1b\x6d\xa9\x82\x70\xe3\xdc\x57\xb5\xd4\x26\xec\xe4\x4c\xa7\xc6\x5b\x4d\xf6\x99\xa8\xe6\xf0\xf2\x9a\x9d\xea\x6a\x7e\x11\x8f\x9d\xaa\x5d\x44\xa8\x45\x23\xad\x36\x6d\xdd\xb1\x66\x4d\x29\xe3\x43\x36\x59\x2f\xee\x7b\x83\x8d\x71\x90\x48\x15\x41\x77\xe0\x7b\x59\xac\xcd\xfd\xa7\x5e\x0a\xce\x09\x7e\xaf\xeb\xb2\xc5\x85\xcf\xc1\x65\xa8\xae\x22\x5a\x35\xaf\x9d\x1c\x29\xb2\x31\xeb\x3e\xa8\x20\x58\x3d\x1b\x2b\x0a\x67\xf2\xe0\xe8\x21\x1d\xaa\x29\x60\x27\x32\x8b\x4d\x44\x9d\x0a\x15\x82\xcb\xdd\xdf\x0c\xd7\xd9\xf0\x18\x32\x73\x67\x22\x62\x2a\x72\x3a\xa9\xe1\x09\xde\x6f\x89\xe8\xf3\x20\xbd\x1e\xae\x68\xe3\x62\x7c\x51\xb2\xdb\x53\x2a\x6e\xf1\xf6\xa9\xde\x6e\x3d\x3b\x53\xf2\xad\x71\xde\x63\x7b\xd5\x1d\x3e\x00\xbb\x92\xe7\xf7\x94\xe3\xfd\x93\x97\x1e\x0d\xc5\x27\x5f\x0a\x77\xad\x53\x5b\x96\x23\x99\xe4\xab\xfe\x5b\x23\x09\xb7\x4f\x8f\xae\xb9\x4c\xce\x46\x80\x55\xea\x96\xfa\x04\xb9\x49\xac\x58\x4e\x8d\x5c\x9d\x97\x86\x60\x63\xe1\x58\xed\x18\x95\x7f\xa4\x1f\x38\xe8\x5b\xff\x07\xfd\x17\x00\x00\xff\xff\xed\x9d\xde\x06\xf1\x01\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 497, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeServerCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd6\x41\x7b\xa2\x38\x18\x07\xf0\x7b\x3e\xc5\xde\xfb\xec\xb3\x90\x40\x5b\x8f\x09\x89\x18\x34\xb1\x51\x6c\xb5\x37\x75\x56\xa8\xb5\x3a\x23\x6a\x08\x9f\x7e\x81\xad\xd3\xa9\xbc\x1e\xff\xe4\x4d\xf2\x7b\x83\xc0\xdf\xcd\x8f\x89\x58\xea\xbf\x22\x31\x49\x65\x5f\x46\x34\x15\x6d\x8a\x94\x94\x83\xe5\x36\x8a\x58\xb9\xcc\xa8\x95\x8c\x66\x72\x42\x95\xb7\x98\x4f\x75\x9c\xe9\xe2\x98\x5a\x37\x7c\x57\x67\xa1\x4b\x63\x23\xbb\x48\x86\x87\x57\x99\x5f\xd6\x9a\x1a\x31\x52\x51\x51\x22\xb1\xa5\x86\x65\xfa\x99\xd1\x43\x1a\xcd\xf4\x65\x81\x4f\x6e\x85\xfb\xdb\x25\x17\xcf\x8a\xa9\x98\xfa\x33\x41\x4b\xa5\x0c\xee\x6d\x97\x24\xb9\x2c\x5e\xf4\x41\x0a\xcd\x14\x0b\xe6\x3c\x15\x3e\x52\x7c\x51\xea\x54\x04\x9a\x4b\x37\xee\x1f\x9a\x10\xb7\x19\xff\x9d\x59\x59\x89\xa9\x62\xb4\x9d\x2c\xca\x55\xf2\xe7\x64\x48\x19\xaf\xd9\x1a\x7f\x36\x86\x0b\x3b\x39\xaf\xf0\x64\xa7\xfa\xd6\x72\xf3\x6d\xbb\x8c\x19\xca\xa7\x96\xda\x29\x4d\x18\xd5\xf7\x4f\xa7\x74\x1e\x9f\x1e\xe7\x0a\x91\xfe\x1e\xc7\x89\x94\x41\x30\x59\x3f\x3d\x3c\xdd\x3f\xb9\x20\xb7\xfa\x2c\x70\x39\x7b\x0d\x8f\xc7\xd3\x5d\x3a\x90\xc5\xc5\xcd\x57\x1a\xaf\xd5\xea\x4e\x9e\xea\x6e\x3c\x0e\x47\x7b\xd3\x7b\x78\xc8\xc7\x49\x0f\x3d\x7c\x2c\xc2\xed\x7e\xef\xf6\x83\x22\xa2\x56\x50\xba\x1c\x47\x2c\xf7\x6c\x96\x2d\x5e\x15\x0d\x9a\x6d\xff\xe0\x56\xb0\x7f\xac\x11\x75\x93\xe9\x81\xd3\xb4\xe9\xd9\x60\x3a\x13\x9c\xd3\x21\x62\x59\x76\x64\x99\xe8\x33\xb3\xae\x2f\xd5\xa7\xb1\x69\xad\x3f\x84\x99\x46\xec\xdf\x75\x3d\xd1\x7c\x9b\x65\xbb\x62\x85\x75\xbe\x8a\x6b\x10\x99\x46\x7c\xf0\xbf\x5f\x45\x61\x81\xda\x0b\x52\xaa\xf5\x47\x2f\x5f\xe0\xac\x1c\x7d\x94\xf5\x49\xf4\x8b\x2c\x2b\x3f\x4f\x43\x9e\x57\x71\x6f\xbb\x78\x71\x5f\x85\x2e\x2c\xae\x75\xe8\xb3\xd0\xeb\x16\xce\x3a\x85\xfa\xed\xab\xf0\xb3\x8e\xa0\x6e\x61\xd6\x29\x1c\x4f\x7f\x17\xea\xeb\x4e\x9b\xed\x37\x19\xfa\x16\x42\x03\xdf\x80\xec\x8b\xa0\xaf\x84\x52\x47\xdd\x81\x1a\x98\x50\xdf\x4c\x88\xda\xd0\x75\x07\x8e\x81\x09\x01\x8a\x43\xaa\x3b\xd0\x01\x14\x07\x50\x5c\x43\x41\xb7\x21\x40\x71\x00\xc5\x5d\x29\xe8\x5b\xd8\xa5\x38\x80\xe2\xfe\xa4\x5c\x9b\x58\x01\x94\x0a\xa0\x54\xb7\x14\xd4\x86\xdd\x95\x2b\x80\x52\x01\x94\x0a\xdd\x1e\x4b\x3b\x10\x98\x10\xa0\x54\x0d\xe5\xb6\x89\x1e\x40\xf1\x00\x8a\xa7\x80\x26\x7a\x00\xc5\x03\x28\x9e\x06\x9a\xe8\x01\x14\x0f\xa0\x78\xb7\x14\xd4\x86\xdd\x2d\xfa\x00\xc5\x07\x28\xf5\x43\xb5\xbb\xb2\x0f\x50\x7c\x80\xe2\x6b\xa0\x89\x3e\x40\xf1\x01\x8a\x3f\x06\xfe\xce\x3e\x40\xc1\x00\x05\x2b\xa0\x89\x18\xa0\x60\x80\x82\x6f\x29\xa8\x0d\x81\x95\x01\x0a\x06\x28\x18\x01\x77\x18\x06\x28\x04\xa0\x10\x05\x34\x91\x00\x14\x02\x50\x88\x06\x9a\x48\x00\x0a\x01\x28\x44\x03\xcf\x44\x02\x50\x08\x40\x09\x6e\x29\xa8\x0d\xa1\x81\xdd\x95\x03\x80\x12\x20\xe0\x0e\x0b\x00\x4a\x00\x50\x02\x0d\x3c\x13\x03\x80\x12\x00\x94\x10\x7a\xb1\x84\x00\x25\x04\x28\x21\xf4\x62\x09\x01\x4a\x08\x50\x42\xe8\xc5\x12\x02\x77\x58\x08\x50\xc2\x2f\xca\x5a\x6c\x2c\xa5\x34\xa5\xa3\xfa\xfb\xe0\xfd\x57\xfe\xfe\x16\xf7\xac\xc7\xa8\x29\xb8\x31\xd1\x2e\x49\xdc\x8a\x8c\x8e\xcb\xd5\x1d\x8f\xa7\x64\xe2\xe5\x79\xce\xf8\x4b\x92\xf4\xc6\xc6\x05\xfc\x40\xc6\x87\x5f\xe5\x71\x78\xc9\xb7\x7d\x7f\x83\x2c\x31\xe3\x9f\x67\xbb\xd9\x15\x87\xb5\x19\x71\xb1\xe9\xc7\xfe\x0e\x3f\x06\x26\x4c\x9d\x3d\x3d\xbb\xe3\x6b\x21\xee\x7b\xd5\x4f\xd4\x7e\x15\x0a\xcd\xbb\x5f\x8a\xff\x05\x00\x00\xff\xff\x8b\xd7\xa1\x7a\x46\x0a\x00\x00")

func test_certsNodeServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeServerCrt,
		"test_certs/node.server.crt",
	)
}

func test_certsNodeServerCrt() (*asset, error) {
	bytes, err := test_certsNodeServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.server.crt", size: 2630, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeServerKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd1\xbb\x96\xa2\x30\x1c\x80\xf1\x9e\xa7\xb0\xe7\xec\xf1\x32\x19\x90\x32\x81\x88\x7f\x40\x08\x72\xa7\x13\x65\x08\xa2\xe0\x08\x63\x88\x4f\xbf\x67\xa7\xde\xaf\xfd\xca\xdf\x9f\x7f\x11\x6a\x83\xbf\x38\x46\x78\xc1\x8e\x90\xe2\x98\x2e\x5c\x5a\xfc\x1e\xe5\x00\x40\x82\x06\x08\xc6\x0e\xc1\xbe\xc6\xa6\x38\xb7\xa7\x6d\x7e\xf8\xd8\xf5\x1b\xdb\x01\x40\xe8\x78\x66\x3a\xd3\x98\x44\x5c\xf8\x3f\x74\x33\x27\xe5\xe7\xf3\x39\xa9\xf1\x1e\xc6\x97\xcc\x95\xca\xdf\x9c\x0f\x95\x0a\x13\xf5\xe7\xad\xeb\xf5\xa1\xa1\xeb\x3c\x70\x0c\xfd\x5e\x7c\x5e\xfb\x5e\xf6\xfb\xd1\xc4\x82\x62\x1c\x3a\xd8\xe2\x81\x2d\x8a\x78\x8d\x9d\xe8\x51\xca\x83\x6c\x5c\x20\x4a\x74\xb1\xd8\xea\x7b\x47\x7d\x3d\x43\xef\xfa\x4e\xfd\x6a\x96\x0f\x3b\xef\x6a\xb5\xfe\x8e\x1e\xa6\xc9\xdf\x27\x6d\x70\xbf\x22\x35\x25\x70\x43\xb4\x3e\x48\xf5\x92\x9a\x5d\xf3\xb3\x34\xbd\x56\x63\xb6\xd2\x86\xc0\x31\x93\x19\xcc\x82\xb5\xaf\x7c\x44\xd9\x47\x5f\xdf\x4e\xa4\xe5\xab\x5d\xca\x57\x7d\x38\xd6\x71\x44\x71\xda\xcf\xf7\x6c\xbb\xf6\xf6\xb8\xa5\x18\x95\xf6\xfc\x1c\xc9\x90\xe3\x3a\x54\x26\x79\xc5\x58\x0b\x04\x5b\x9f\xfd\x57\xcd\xba\x6a\xb5\xcf\x13\xb6\x4e\xf1\x85\x48\xc3\x5d\x99\x10\x5a\xe5\x10\x57\xc4\xd2\x2f\x70\x42\x24\x29\xbd\x68\x40\xb7\x42\x68\xe1\x76\x38\xa7\x8e\xa1\xb4\x2e\x6a\x50\x42\x2c\x3b\xaa\x5f\xa3\x80\xc6\x6d\xbf\x86\xf2\xc8\x9b\x93\xe3\xf2\xe2\x78\xef\xda\xf0\x9e\x55\xcf\xa5\x1a\xe4\x55\x2a\x6e\xc9\x5b\xec\xce\x05\x5e\x56\x0e\x89\xa8\x09\xfb\xfc\xa4\x5c\x83\x0c\x1e\x65\xe7\xf3\x4b\x0f\xf9\xe4\x89\x64\xa0\x24\x73\xaf\xb6\xf1\x24\x0d\xf1\x60\x6d\xc0\xee\x56\x25\xdd\x56\xf9\x45\xa3\xbe\xf5\x7f\xcc\xbf\x01\x00\x00\xff\xff\xc9\x6f\x61\xb7\xed\x01\x00\x00")

func test_certsNodeServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeServerKey,
		"test_certs/node.server.key",
	)
}

func test_certsNodeServerKey() (*asset, error) {
	bytes, err := test_certsNodeServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.server.key", size: 493, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt":          test_certsCaCrt,
	"test_certs/ca.key":          test_certsCaKey,
	"test_certs/node.crt":        test_certsNodeCrt,
	"test_certs/node.key":        test_certsNodeKey,
	"test_certs/node.server.crt": test_certsNodeServerCrt,
	"test_certs/node.server.key": test_certsNodeServerKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca.crt":          {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":          {test_certsCaKey, map[string]*bintree{}},
		"node.crt":        {test_certsNodeCrt, map[string]*bintree{}},
		"node.key":        {test_certsNodeKey, map[string]*bintree{}},
		"node.server.crt": {test_certsNodeServerCrt, map[string]*bintree{}},
		"node.server.key": {test_certsNodeServerKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
