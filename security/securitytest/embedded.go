// Code generated by go-bindata.
// sources:
// ../../resource/test_certs/ca.crt
// ../../resource/test_certs/ca.key
// ../../resource/test_certs/node.crt
// ../../resource/test_certs/node.key
// DO NOT EDIT!

package securitytest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x94\x49\x8f\x83\x36\x1c\xc5\xef\x7c\x8a\xde\x51\x15\xd6\x0c\x39\xf4\x60\x83\x09\x9b\x21\xce\x00\xc1\xdc\x20\x2c\x21\x84\xb0\x85\x71\xc8\xa7\x6f\x66\x0e\x95\xaa\x51\x55\xdf\xfc\xb3\xac\x67\xf9\xbd\xff\xfb\xf3\x7b\x41\xb4\xb7\xfd\x3f\x74\x74\x0c\x6d\xd3\xd6\x41\x88\x7e\x28\x87\x6d\xdb\x80\x86\xae\x83\x72\x5b\x03\x66\x43\x50\xdb\x04\xae\xa2\xd8\x74\x72\xf7\xd0\x42\xf7\x7e\xd9\xee\x6e\xb9\x9d\xd3\x2b\xf0\x60\xdd\x8e\x97\xb6\xd9\xef\x98\x00\x01\x99\x99\x67\xa0\x4f\x0e\x43\xb0\x07\x62\x84\xf4\x0b\x76\x88\xb4\xbb\x66\xb2\xf3\x45\x4f\x7e\x8f\x8f\x94\x99\x80\x1a\x31\x21\x06\x62\xa2\x91\x4b\xfe\x74\xee\x76\x17\x2a\x5d\xa2\x34\xf1\x05\x0c\x95\xc4\x08\x91\xc8\x61\x23\x5a\xf1\x15\x09\xf8\x8a\x5f\x7e\xdc\x7f\x43\xe9\x87\x85\xff\xb0\x1f\xa5\xff\x12\xe2\xfe\x57\xc9\xb6\xa1\x7d\x05\xfe\xbf\x9f\x8f\x4c\x00\x02\x1d\x10\x0d\x7c\xff\x01\xd4\x6b\xf7\xbd\x41\x40\xba\x16\xf4\x65\x95\xae\x02\xd6\xf2\x66\x1d\xe0\x59\x7b\xce\x8b\x95\x3f\xfa\x67\xd8\xcc\xeb\x69\x97\x9c\x8d\x1a\xfa\x43\xcb\x03\x0f\x17\xcf\x26\xa3\x78\x52\x38\x5f\x0d\xc8\xc9\xe2\x37\x47\xe1\xd6\xba\xea\x24\x86\xb1\x73\x74\x35\x28\x7a\x7a\xf5\xd9\xad\xbd\x56\x9e\x10\x2f\x09\x8e\x63\x09\xaf\xf5\x11\xf6\x17\x37\x8e\x22\xba\x46\xab\x71\xca\x07\x6b\x1c\x28\x37\x35\xb1\x12\xc9\xa2\x12\x5a\xc1\x66\x72\x56\x55\x66\x54\xf5\xc4\xa1\xe3\xb7\xdb\xe8\x18\x7c\x26\x4c\xf4\x3c\xd5\xde\xb1\xca\x22\x72\x77\x9a\xfb\xf3\x58\x47\x96\xd8\xf4\xb2\x7e\xd3\xac\x85\x25\xdc\x2e\x5b\x57\xfe\xc3\xb1\x74\x1b\xf9\x01\xd8\x22\xa9\xbc\x2f\xe2\x44\x6c\xe9\x2b\x62\xed\xc8\xaf\xc4\x39\x7c\x4d\x6e\x3c\xcb\x5a\x39\xd8\xcc\x03\x90\x9a\x1f\xee\xa1\xd4\x93\x6a\xed\x53\x85\x97\xb8\xc7\x85\x16\x12\x31\x94\x9e\x87\x37\x21\x12\x66\xe8\x3e\x17\xe4\xef\x77\x4d\x51\x04\xd6\x75\x99\x37\xa3\xd2\x59\xad\xed\xa5\xcc\x1d\x75\xe1\xc4\x1c\x49\x26\xcf\xd9\x3c\x1a\x3b\x21\x54\xf4\x31\xe4\x84\x8a\x16\x02\x3b\xd3\x2c\xbe\xeb\xe5\x5d\x31\x5f\x21\xf6\x92\xba\xbb\xef\x5c\xd6\xfb\x69\x13\x2a\xc4\x36\x00\x01\xb0\x5f\x29\x73\x0c\x10\xc0\xda\x8f\x2d\xa2\x41\x50\x69\x08\x02\xac\x73\x20\x20\x0c\xd5\x6f\x1b\x8f\x42\x08\x88\xb5\x79\x47\x91\xc1\x1a\xc1\xcd\x77\x2a\x7f\xa7\xcf\xa8\xdf\x67\x00\xea\xca\xcd\xeb\x7a\xc8\x8c\x94\xf3\xf8\x4f\xf1\x75\x7d\x26\xda\xa6\x12\xe2\xa7\x4b\x25\x65\xd9\xca\x1f\x6a\x05\x65\xb3\x1e\x40\x01\x33\xaf\xf2\x04\x3b\x17\xed\x7d\x9c\x18\x2d\x05\xe9\x69\x7c\xdf\x0c\x8e\xa3\x39\x6c\xfd\xbb\xd6\x71\x92\x24\xa4\xe8\x98\x4f\xcf\x26\x7a\x68\x30\xbd\x81\xf7\x20\x54\x72\x55\x63\x69\xd8\xd4\xa8\x2d\x5e\x8f\x2e\xf8\x10\x76\x2d\xc1\xa6\x35\x9c\xc5\xe4\x30\x08\x63\x71\x3a\x9c\xcc\x43\x81\xf7\xe5\xc0\x73\xcf\xe3\x6c\xaa\x87\x73\x9d\x45\x7b\x4c\x44\x40\xe9\x81\x55\xc4\x1d\xb4\x20\xb9\x25\xc5\xf3\x1c\x90\x99\x24\xc6\xdb\x0f\xb5\xcf\x0f\x8b\x63\x8e\xe6\x1a\xbf\xac\x0f\xa6\x86\xf2\x43\x0e\xd4\x17\xcf\x7d\x51\x61\x1c\xfc\xbb\xb9\x1c\xa6\xb6\xa8\x8c\xaa\x0b\xca\xb4\xae\xd0\xd0\x54\x56\x97\x05\x23\x95\xa3\xc0\x73\xe7\x70\xbc\x57\xce\xaa\x53\x60\x37\x25\x2f\xf8\xe3\xd2\x14\x1b\x1f\xb7\xaa\xeb\x71\xf3\x04\x64\x5c\xa4\x5e\xf4\x30\x79\x17\x1f\x7d\x23\x58\xb3\x25\x53\x2f\x3c\xb8\x40\x10\xbb\xbd\xe3\x26\xd8\x8b\xce\x53\x88\x32\x47\x4c\x2f\xf9\x90\x7f\x9a\xea\x57\x86\x87\x3c\x39\xa5\x4d\xed\x73\xd6\x62\x31\xe6\xb9\xc3\xf5\x4c\xfe\xe2\x7e\x2a\x02\xf9\xc6\xef\xda\xf8\x3b\x00\x00\xff\xff\x29\x6e\x43\x95\x53\x04\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 1107, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\xd2\x83\x5a\xb2\x85\x73\x9e\xe2\xe4\xd4\x2d\xbc\x04\x21\x1b\xb6\xf0\x56\x58\x65\x08\x2f\xbc\x37\x4f\x7f\xff\x39\x93\x4e\xa7\x9d\xac\xfa\xaa\x7b\x7d\xff\xf7\x9f\x01\x50\x52\xcc\x7f\xdc\x37\xff\x8f\xed\x2a\x01\xef\xc1\x7f\x34\x18\xff\xbb\x41\x0c\x45\x81\xc3\xa1\x00\x9e\xd7\x04\xde\x81\x3c\xf9\xcb\xe2\x5b\xce\x35\x9a\xbf\xf2\x56\xb6\x41\xca\x9e\xcb\x26\x7f\xd7\xe1\xf4\xea\xe5\x0a\xb9\x28\x15\x4b\x60\x8e\x0d\xca\xeb\x46\x76\xd6\x09\x12\x1b\x33\x6d\x32\x96\x13\xca\x28\xe6\xe2\x6d\xa3\x31\x33\xe1\x05\xaa\xab\xb1\x80\xd0\x85\xe2\xdd\x5d\x03\x9b\x87\x10\x25\x71\x55\x95\xf1\xfb\x5a\xbd\xa1\xd2\x02\xdf\x8f\x2f\xff\x12\xc3\xef\x88\xc8\xd3\x18\xcf\x75\x40\xfb\x14\x41\x7b\xb2\x85\xcd\xea\xc5\x50\x47\xcc\xe8\xc4\xd8\xa1\x8f\x87\xef\x5a\xef\xe8\x20\x74\x9d\x51\xb8\xa3\x90\x1d\xaa\x0b\x97\x21\x9d\x4a\x5f\x26\xea\x81\x12\x5a\x16\x91\xb7\x23\xe2\x92\xeb\x42\x9f\xaa\x2c\x28\xd0\xb4\xf8\x07\x24\xf3\x7e\x23\x66\x47\x21\x77\xff\x68\x26\xf4\x72\x54\x7b\x9f\xb5\x60\xa1\xd8\x7c\x54\x0e\x9d\x07\xf1\xeb\xa9\xd9\xb9\x10\x15\xd7\x80\x7c\x68\x94\x5c\xab\x38\x23\x1d\x91\x1e\x50\xd0\xe2\x3e\xbe\x00\xed\xdc\xa0\x29\x71\x75\x96\x59\xf2\x6f\x5b\xb0\x89\xee\xe4\x46\xd1\x3f\x87\x36\x09\x78\x78\xa8\x24\xe5\x9c\xcb\xcb\x15\x39\xdc\x43\x68\x61\xf2\xf0\x22\xce\xf0\x23\x8d\x93\xa0\x17\xf2\x9e\x7e\xdd\x9e\xa1\x47\x65\xd7\x73\xda\x31\x98\x9f\xda\xa3\x1d\x45\xe4\x1d\x1e\xf0\xc3\x1f\x6c\x47\xf8\x31\xa1\x63\xb6\x0d\xca\xd8\x39\x3c\x91\xd4\xd8\xf9\x55\x7b\xc8\x78\x66\x36\x1f\x05\x2c\x1b\x23\x0a\xae\x15\xb3\xd4\x96\xad\x12\xe5\xc3\xa6\x4f\x15\xb6\xec\x84\x42\xb5\x2e\x42\x2b\x2d\x92\x95\x8a\x6d\xe6\x99\xa0\x08\x8a\xa8\x9a\x7f\x48\xf9\x6b\xb9\xdf\x5d\x0b\x6d\x95\x48\x57\xc1\xed\x47\xf1\xce\xdc\xfb\x41\xb2\xf4\x73\xcf\xe4\xa0\xcb\x23\x6c\x50\x89\xed\x43\x1a\xb7\x66\xc8\x45\x60\x0b\x8f\xe2\xcb\xae\x3b\xa8\x92\xe8\x1d\x94\x2f\x04\x9d\x93\x06\xa2\x4d\x33\x0b\x3c\x41\xb0\xaa\x79\x92\x7c\x2f\xb1\xf6\x95\xe6\xad\xa8\x2b\x03\xc0\x45\x56\xad\x65\x4f\xf4\x98\x65\x9d\xd0\x51\x0b\xb2\x7a\xd0\x58\xab\x6d\x8f\x17\xe4\x45\xff\x89\x28\x62\x35\x38\x12\x76\xb2\x77\xf2\x6e\x95\x6f\x9b\x09\x34\xa9\x2e\xd5\xb7\x0a\x7a\x8e\x67\x7a\xf9\xe6\xf3\x14\x5a\x22\x68\xe6\x39\xc9\xb0\xe3\xc5\x25\xda\x0e\x6d\x77\x80\x52\x40\x48\x68\x35\x20\xfa\xf8\x9c\x02\xa7\x1b\xd5\xc2\x63\xe6\x54\xdd\x6f\x0d\x94\x5b\x3d\xfa\xc9\xcb\x93\x9b\xea\xf8\x91\x5b\x56\x26\x4c\xad\xbb\xc7\xb2\x24\xbf\xb6\xe8\xff\x6e\xc5\xb8\x28\x6c\xd0\xa5\xb2\x7f\x78\x1a\x62\x6f\x77\x63\x26\xeb\x1f\x61\x09\xf0\xd6\x54\x2c\xf4\x1b\x17\x33\x6d\x12\x0f\xf5\x55\x8a\xc9\x1b\x74\x9a\xe2\x96\xa7\xbd\xad\xd1\xd5\x19\x3e\x5c\x1d\xa1\xa3\xc4\xab\xce\xa3\x92\xe8\xb1\xd2\x40\x84\xed\x2a\x3b\xde\x3b\xb1\xf8\xc8\x0d\x09\xcf\x2e\xe7\xfb\xe2\xc0\x60\xd3\xec\x3a\x47\x8a\x20\x47\x7b\x7c\x0c\x27\x60\x8a\x62\x0d\xdd\xf1\xf3\xd2\x81\x20\x2c\xed\x19\xfe\x80\xe8\x08\x91\xd3\x23\xe9\x76\x3b\x36\x5b\x2d\xac\x00\xf4\x71\x5f\xac\xa7\x72\x35\x05\x73\x2a\xb1\xc9\xe8\xbc\xec\x82\x9d\xec\x36\x8f\x40\x8b\x84\xfb\x4c\xb5\x99\x1a\xde\x1d\x48\x45\xdd\x8e\xff\x4d\x4c\xc7\x08\x17\x9e\x4f\x8a\x30\xd6\x2c\x79\x26\xe5\x85\xef\x55\xc9\xb0\xc6\x4b\xad\x34\x00\x61\xc8\x6f\x14\x23\xf8\x98\x6a\xae\x20\xc8\x3d\x8d\x6a\x5f\x3e\x4d\x4f\x5f\x09\xe6\x26\x21\x5d\x1f\x23\x51\x0a\xa4\xc1\x74\x4b\x79\x0f\x53\xa7\x27\xe3\xf8\xee\xb3\x92\xeb\xcb\xf4\xf5\x3d\x0d\x1b\x8f\x85\x10\xa7\x79\x54\x51\x14\xaf\x42\x55\xca\x18\x78\xa9\xb9\x09\xec\x3e\x27\x88\xc6\xe3\x94\x63\xd7\x93\xbb\x11\x9f\x16\xb9\x1a\xe7\xb4\xa1\xab\x1f\xa4\xf6\x95\xc8\x76\x75\x45\x58\xe0\xb4\x56\x2b\xc1\x8c\x8d\x59\xf3\x6a\x1a\x1a\x65\xfe\x22\xf3\x9f\x91\x35\x7f\x6e\x1d\x83\x5b\x4a\x37\xbb\x2e\x2c\x9d\x5d\x10\x31\xd5\x0b\x4d\x6d\x6b\xae\x5a\x3d\x49\x97\xbc\x28\xd5\x72\x80\x9a\xcd\x8d\x82\x74\x34\x7e\xd1\xd4\x29\xc5\x86\x2a\xfc\x37\xa0\x2e\xac\x4f\xcd\x89\xec\x30\x0e\x1b\x5f\x36\xc5\x8e\x42\x3c\x2d\x88\x17\xf1\x68\x33\xc0\xea\xdd\x69\x81\x72\x2f\x50\xe3\x85\x77\x66\xeb\x15\x37\xbd\xa3\xbb\xc8\x64\x5b\xe0\x3a\x30\x2c\x7d\x2d\xd5\x5b\xc3\xa4\x61\x51\x74\x55\x88\x43\x55\xfd\x48\x61\x0b\x0d\x80\xcc\xfb\x63\xe7\xf6\x61\x22\x9e\x62\xef\x50\x3c\x47\x5b\x09\x88\xea\x46\x28\x63\xd0\x40\x3c\x84\x6b\xec\x74\x2d\xaa\x1f\xd8\xc7\x54\x2d\x43\x6d\x59\xf1\x47\xb9\xb7\x3e\x01\xc1\x6c\xb7\xd8\x04\x88\xa7\x2c\x91\xeb\xde\xbb\x4e\x51\x92\x9d\xc8\x9b\xde\x7c\xa0\xed\x3c\x73\xb9\xa7\x14\xc5\x96\xf0\x7a\x30\xdf\x22\xd7\x36\x51\x18\xd2\x99\x73\x0f\x81\x9d\xd7\x2c\xd5\x65\xe7\xe3\x91\x0f\xd4\x63\x43\x7c\x1d\x10\x0f\x08\xe8\x5e\x09\x8b\xa5\xf5\xa0\xdf\x7d\xfe\xca\xa3\xcd\x5f\x7a\x80\xd3\xd6\xd8\x59\xd7\x06\xcf\x8e\x07\x92\x5b\x24\xec\x27\x3a\xff\xc0\xdf\x5d\x82\x7e\x99\x45\x2d\x86\x47\xfa\x40\xf0\x77\x90\x2e\xce\xdf\x03\x88\x37\x4c\xbf\x57\x23\x50\xd4\x78\xf9\x62\x81\x13\x91\x36\x0b\xbd\x2e\xfd\x74\x92\xcf\xb0\x61\x91\xb1\x2d\xac\x58\xf2\xc0\x9f\xf3\xab\xd0\xd7\xc5\x5d\xc9\x2a\xfb\x75\x88\x4a\xc1\x0e\x97\x0a\x92\xe0\x18\x35\xf9\x79\xca\x6e\x69\xf4\x3a\xf0\xc6\x0e\x17\xf2\x18\x85\xaf\x24\x0e\xd7\xf9\xcd\xb1\xf7\x64\x35\x32\xfa\xfa\x2e\xd7\x84\x19\xe5\x2f\xa5\x68\x3f\x8d\x96\xaf\x80\xd4\xd3\x5b\x7c\x1c\xbd\xf4\x79\x44\x86\x5f\x39\x84\xa7\x10\xc1\x1d\x31\x9d\xf0\xdd\x07\xab\x7d\xa1\x45\x36\x42\x86\x4d\xaa\x5f\x32\x8f\xd9\x42\x19\xcf\x4b\x0d\x90\x7f\x95\x02\x4d\xf1\x7f\xab\xe6\xff\x03\x00\x00\xff\xff\x1c\xf5\xbc\xb5\x8b\x06\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd7\x4b\x73\xb2\x48\x17\x07\xf0\x7d\x7f\x8a\x77\x6f\xbd\x25\x34\x60\x74\x31\x8b\xe6\x22\xa2\xd2\x80\x5c\x14\x76\x88\xda\x88\x17\xf0\x46\x23\x9f\x7e\xd4\x67\x92\xe7\x49\x3c\x53\x93\x4d\x2a\xff\xea\x43\xf3\x3b\x7d\x08\xfa\xff\xe7\x8f\x6a\x98\x16\xfd\x9f\x66\xcc\x02\x6b\x68\x69\x24\x30\x5e\x29\xb2\x2d\x6b\x6c\x06\x9a\xa6\x11\x87\x11\x6e\xa9\x84\x59\x33\x32\x36\xb3\x55\xf7\x92\xc8\x5a\x73\x3a\xf5\x86\xc9\xf1\xda\x0f\x06\xa3\x1d\xd7\x78\x3c\x9e\x94\x89\x95\xd7\x19\x25\x9e\x31\xb5\x35\xde\x20\xa3\x20\x9e\xca\x68\xa4\x92\x32\xd0\x42\x5a\xc7\xf8\x7a\x5f\xe2\x61\x91\xea\xc6\xdc\x56\x3d\x93\x88\xa1\x41\x1a\x9b\x7a\x78\x50\xa4\xd2\xb8\x8e\xe7\xb4\x8c\xcc\xa8\x5d\xe9\x64\x3d\xe4\x42\x83\x68\x40\x44\xbb\xb0\x1a\xaa\x5b\x8f\xdf\xab\xf4\x19\xd2\xe2\x99\x19\x5f\xd9\x73\xa7\x7f\xdb\x08\xfd\xf7\x4e\x0f\x9d\x6f\x71\xdd\xfb\x76\xfb\xaa\xea\x11\x9d\x31\xc3\x45\xe4\xb9\xc0\x2b\xb5\xc7\x1f\x2a\x99\x38\x8e\x58\xcf\x36\x01\x67\xe3\xb2\x70\x71\xd8\x1b\x2b\xf9\x3e\xed\xe0\x78\xd1\xcf\xf5\x6a\xab\x2c\x8e\x99\xd9\xd8\x4d\x6e\xee\xc7\xf2\xac\xfa\xe0\xaa\xd7\x22\xe6\xef\xfb\xcd\xd6\x39\x07\xb7\xbc\x23\x8f\x33\x25\xa8\x27\xb8\xb3\x3c\x76\xbd\x62\xb8\xab\x39\xb1\xa5\x64\x71\xef\x8a\x2b\x63\x99\x47\xf5\x87\x84\x9d\x7d\x6f\x6f\xd4\x83\xcd\x44\xee\x0c\x6a\xcb\xb5\x66\xa8\x27\x47\x03\x63\xeb\xc6\xe3\x36\x3f\x79\xb7\x32\xda\x1d\x95\x46\xf0\x0f\x23\x3b\xed\xb8\xe5\x69\xb1\x9e\xb8\xbd\xc9\x28\x4c\xab\x76\x64\xf4\xd5\x9b\x74\x2d\xcd\x7b\x9e\x9a\x4a\xed\xcc\xeb\xbd\x2e\x59\x1b\x74\x75\xa3\x4e\x42\x69\x16\x46\xdb\xc5\x79\x29\xf0\x8c\xcb\x6e\xd3\x6d\xe5\xa4\xdc\x9f\xd2\xee\x39\x56\xab\x4e\x64\xae\x85\x8f\xeb\x34\x93\x8f\x8a\xb4\x5f\x44\xe3\xbe\xb3\xf2\xe5\xe3\x34\x28\xb9\x7f\x73\x50\xc2\x99\xca\xd7\x6e\x59\x18\x85\x1c\x2e\x94\x5e\xbb\xa6\xd8\x5b\x85\xee\xe1\x70\x08\x86\x71\xd2\xaf\x82\x8f\x0b\x53\xf0\x62\xd4\x9f\x54\x78\xad\x77\xb6\x42\x96\xa9\xf3\xf4\x7c\xa6\xfd\x36\xb9\x48\x3e\xaa\x6b\x59\xb1\xaf\xf3\x3a\xe5\x55\xe4\x0e\xa3\xce\x2e\x49\x5a\x93\xf7\xc7\xb6\xbb\x0f\x5c\x6b\x9d\xeb\x34\xd4\x08\x37\x08\x49\x1d\x4d\x2d\x18\x67\x2c\x16\x6c\x22\x3f\x4f\x6d\xa5\x73\x43\x45\x5d\xee\x19\x8f\x09\x24\xb2\x4e\x56\xcf\x73\x1e\xf9\xa1\x31\x2c\x48\xa8\x32\x76\x56\x99\x31\x54\xbd\x4c\x27\x5e\x6c\x4d\x78\xfc\x38\xba\x70\xf4\x58\xcb\x75\x1e\xeb\xd1\x4c\x08\x88\x37\xea\x22\x95\x84\xfc\x35\xc2\x85\xa6\xa9\x1b\xf2\xba\xb2\xe1\xf9\x9a\xba\xce\x1e\xbb\x2d\x0a\xc6\xf6\x97\x25\xa6\xf9\xd2\x7c\x4c\x80\xe4\x6b\xfa\xe8\xd7\x8c\xd8\x9a\xf2\xca\xd1\xd2\xb2\xec\xec\x30\xc8\x63\xcc\x9a\xe9\xa1\x79\x4c\xd8\xf0\xc2\x58\xf3\xcf\x38\x5b\xb7\xa5\x39\x28\xe2\xf9\xfd\x77\xe1\xfd\x57\xe1\x67\x1d\x7a\x14\x0a\xef\x85\xe1\x5b\x21\xdd\x7e\x2f\x7c\xd4\x49\xcf\x3a\xf4\xbd\x90\xbd\x15\x3a\xfe\x57\x21\xfd\xbc\xd3\xcf\xdb\x7f\x66\xe8\x2b\x84\x16\x6e\x81\xec\xfe\x3d\x7b\x12\x1a\xaa\xbd\x2f\xa4\xc0\x05\x29\x70\x41\x44\xef\xef\xa1\x03\x5c\x10\xa0\xdc\x9f\x14\xf4\x16\x42\x0b\xdf\x77\xbe\x7f\x52\xd0\x9f\x21\x40\xb9\x03\x94\xfb\x9f\x14\xf4\x15\xbe\x53\xee\x00\xe5\xfe\x93\xf2\x6c\x62\x6b\xbf\x2f\x6c\x01\x4a\x0b\x50\x5a\xf4\xf3\x58\x9e\x21\x40\x69\x01\x4a\xfb\xa4\xfc\x6c\x62\x0b\x50\x5a\x80\xd2\x7e\x52\xfe\x6c\xa2\x00\x50\x04\x80\x22\xd8\x40\x13\x05\x80\x22\x00\x14\xe1\x27\xe5\xf5\x30\x01\x13\x26\x00\x14\x01\xa0\x08\x08\x98\x30\x11\xa0\x88\x00\x45\xb4\x81\x26\x8a\x00\x45\x04\x28\x22\x05\x9a\x28\x02\x14\x11\xa0\x88\x0e\xf0\x38\x8b\x00\x05\x03\x14\xfc\x93\x82\x5e\xe1\xfb\xce\x18\xa0\x60\x80\x82\x11\x30\x61\x18\xa0\x60\x80\x82\x1d\xe0\x71\xc6\x00\x45\x02\x28\x92\x0d\x34\x51\x02\x28\x12\x40\x91\x28\xd0\x44\x09\xa0\x48\x00\x45\xfa\x49\x79\x36\x51\x02\x26\x4c\x02\x28\x32\x40\x91\x11\x30\x61\x32\x40\x91\x01\x8a\x4c\x81\x26\xca\x00\x45\x06\x28\x32\x05\xfe\x27\xca\x00\x45\x06\x28\x0a\xf4\x62\x51\x00\x8a\x02\x50\x14\xe8\xc5\xa2\x00\x13\xa6\x00\x14\x05\xa0\x28\xd0\x8b\x45\x01\x28\xca\x6f\x4a\x66\x6c\x38\x21\x24\x20\x53\x95\xed\x4e\x28\xdf\x6d\xcd\x01\x17\x54\xe2\x5d\xf4\xd7\x47\x3d\x63\x9a\xa4\xbc\x35\xd9\x68\x25\x1b\xb3\x7e\xb4\xf3\x83\x63\x67\x6f\xaa\xd7\xfd\x76\x48\xcf\xb1\x43\xee\x97\xa4\x2b\xc6\xf3\x33\x2e\x8a\x66\xd1\x6c\x90\x5b\xad\xd9\x65\x76\x6a\x23\x69\x97\xe0\x46\x5c\xe3\x75\x12\x8e\xbd\x7c\x6b\x0f\xad\xa2\x63\x55\x6e\xb4\xaa\x5c\xde\x8b\x99\x39\xa5\xbe\x33\xd6\x8f\xb6\x79\x2e\x27\x8e\xbb\xe0\x6d\x71\x4f\x8f\x69\x17\x11\xf5\x2a\x5b\x59\x29\x7f\x98\x0a\xb6\xc5\x58\xd7\xeb\xc6\xb7\x55\x46\xac\x69\x3a\xda\xf8\xfb\x69\xd0\x27\x7c\xb9\x69\x0e\xbd\x9d\x63\x08\xb3\x4a\x68\xf3\x38\xf3\xaf\xb7\x8e\xb7\x60\x13\x22\x38\x05\x8a\xa4\x36\xeb\xed\xab\x15\x1d\xc9\xbd\xb2\xad\x75\x79\xac\x2d\x12\x93\x0f\xbb\x4e\x94\xe6\x87\xb6\x8e\xba\xbb\xf9\x5c\x3a\x87\x93\xed\x6d\x49\x47\xee\xa5\xd1\x94\xdb\xce\x37\x8f\xa5\xbe\x6c\x8f\x7a\xf7\x82\xa2\x8e\x2e\x1d\xc6\xa9\x3d\x5c\xe9\xb3\x65\x10\x67\x8f\xcf\x57\x45\x80\xb5\x6a\xdf\x8e\x26\x22\x16\x77\xec\xda\xae\x77\xeb\x6a\x85\x05\xc1\x3a\x5d\x4a\x77\xdd\x62\xbd\x1e\xba\x6e\xbe\x3c\x54\xb6\x4d\x33\xd4\x3b\x25\xdb\x47\xfb\xc2\xaa\x9f\x79\xb7\x88\xe1\x6d\x30\xf3\xd9\x55\x39\xcf\x4b\x37\x98\x7b\xd3\x8f\xf6\x56\x2c\x03\xc9\xf8\x0b\xbd\xbe\x5e\x18\x54\x7f\xff\xca\xf1\x77\x00\x00\x00\xff\xff\x61\x26\x01\x20\x8f\x0c\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 3215, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\x37\x13\xa3\x40\x16\x84\x73\x7e\xc5\xe6\xd4\x15\xde\x85\x78\x27\x3c\x48\x40\x86\x37\x1a\x40\xc2\xc3\xaf\x3f\xed\xd6\x85\x37\xe9\x04\xaf\x5f\x57\xbf\xaf\xff\xf3\xf7\x09\xb2\xaa\xdb\x7f\xfc\x80\xff\xe3\xfa\xfa\x93\x0f\xe5\x3f\xa6\x9c\xfc\xfb\x81\x2c\x5d\x97\xa7\x43\x17\x78\xde\x14\x79\x4f\xe6\x27\x92\x79\x71\x0a\xe7\x8a\xfc\xd0\x59\x48\x1a\x4e\xe3\xa0\x3e\x67\x26\x6d\xeb\x4b\x76\x86\x07\xa8\xca\x23\x97\x6f\x55\xce\xa2\xb1\x55\xc7\x9d\x87\x14\xc9\x11\xcc\xf8\x56\x75\x7a\x75\x68\x8d\x69\xc0\x0d\x1c\x76\xce\xa9\xad\xe6\x44\xeb\x15\x20\x3c\x7f\x97\xa0\x7e\x20\x4f\xd4\xdf\x94\x17\xb2\xd7\x09\x1d\x7f\xa3\x00\xc1\xd8\xb9\x67\x70\xb6\x81\xd8\x56\x9b\xdb\x18\x0d\x74\xae\x19\x1d\xf5\x23\xd2\xed\x2b\xa8\x47\xcd\x37\x93\xe2\x9c\x49\xb8\xfb\x94\xe4\x84\x4c\x53\xe9\x7f\x47\xab\x08\x0f\x95\xa9\xf0\x26\x37\x95\x29\x1f\x58\x2a\x83\x23\x17\x2a\x5a\x18\xe5\x62\xea\x8d\x62\xa7\xff\x32\xaa\x75\x0f\x85\x5b\x6a\x10\x0d\x71\xdb\xa1\x7b\x7d\x66\x78\x6d\xd4\x91\x8a\x52\x26\xdc\xd0\xf5\xee\xea\xb1\x7a\x96\xd1\x78\x50\xd8\xa3\x2b\x56\xa7\x17\x20\x93\xa4\x46\x91\xd7\x84\xdf\x30\x2b\x70\x5b\xbf\x1e\x67\x9b\x24\x52\x01\xf3\xe0\x2c\x4b\xad\x67\x3b\x5e\xc0\xdd\x2e\x69\x4c\x8b\xfa\xf8\x8e\x29\xe9\xd2\x0f\xff\x3c\x94\xf4\xbb\x2d\xc4\x6d\x0f\xd0\x5d\x9a\x30\xd2\xbf\x2f\x2c\xe3\x66\x11\x44\xec\x33\xa6\x7d\x30\x5a\xb9\x74\xbc\x0f\xf8\x69\xb1\x2d\x2d\x5b\x98\xa7\x4b\xbc\xc7\x0b\xfc\xf4\x33\xdb\x13\x65\x5f\xf3\x6f\x21\x3a\xb9\x58\x8f\x1c\x88\x99\x3e\x9b\x86\xe6\x61\x57\xe2\x7e\x2e\x97\x43\x2f\x0e\xd8\x27\x05\xd2\x37\xba\xc5\xd2\xde\xa2\xb5\x0f\xd9\x24\x4c\x09\x22\x61\xc4\x85\xd9\x8d\xec\x1a\x46\xaf\xd4\xc1\xa0\x29\xcf\x4b\xcc\x48\x68\xf0\xab\xd4\xfc\xf9\xd1\x48\x5b\x11\x09\x5b\xe0\xea\x29\xd5\xcb\x1a\x73\xf4\x07\x5c\x33\x69\xae\xf3\x97\x0d\x26\x2a\x46\x47\x41\x16\x47\xfa\x69\x55\x9a\xef\x34\xb9\xef\x98\x87\x3c\xa9\x2c\x0c\x91\xb9\xe9\x12\x9f\x33\x7b\xca\xef\xea\x73\x9e\xf6\x6f\x0d\xd4\x1d\x35\xf2\x24\xad\x70\xfa\xc4\x65\xf9\x76\x97\x06\xf5\xec\x6e\xd9\xdd\xec\x22\x05\x74\x79\x65\xab\x62\x14\x9e\xcd\xa8\x48\x77\x24\x50\x14\x6e\xfa\x3d\x37\x72\x71\xdc\x9c\xde\x87\xad\x2f\x6c\xe1\xf2\xcd\x96\x4a\xfc\xe6\x31\x6a\x00\x64\x50\x6b\xf8\xd5\x9d\x8f\xed\x7d\x12\xc3\x70\x1d\x88\xaf\x70\x57\xff\x38\xfc\xc9\x72\xd5\xcd\x80\xf6\x9e\x8a\xd4\xb6\x30\xda\x3a\xe4\x47\x6a\x50\x83\x60\xc9\xeb\x93\x61\xd1\x9f\x44\xd1\x5b\x49\x69\x2a\x0c\x1c\x59\xa6\x42\x5b\x5a\xc5\xb4\xa6\x4c\x69\x87\xd2\xa5\xa8\xb0\x73\x5f\x09\x86\x90\x50\x31\xa9\x5a\xdd\xa2\x3f\x87\x55\x81\xb7\x66\x7b\x42\xb8\x03\x46\x26\xe3\xeb\x2e\x00\x7d\xe2\x5f\x5d\x70\xde\xed\x8e\xb9\x29\xc5\x71\xe1\x3d\x03\x87\xb6\x47\xf0\x24\x40\xe2\xb8\x11\x8a\xd5\x06\x34\x58\xb2\xa4\xb2\xc1\xe7\xea\xe8\xfe\x52\x0e\xcd\x93\xb9\x77\x4e\x8a\x68\xe0\x8a\xcc\xde\x4c\xd2\x44\xee\x25\x5e\x5d\x8b\xd8\x61\x7e\x29\x62\x8a\x45\x2c\x6d\xb0\x21\x96\x61\x1c\x63\xe6\x48\x27\x34\x20\xd2\x6a\xfa\xe0\x9d\x89\x7b\x50\x32\x15\xab\xc6\x40\xe6\x08\x3c\xe6\x6d\x00\xef\x47\xd9\x1e\xe9\xa5\xee\xf6\x01\x12\xf9\x32\x01\x4e\xe4\x02\x6f\xa7\x4c\x81\xfc\x4f\x31\x85\x41\xf8\xa0\x0f\x76\x53\xc9\x72\xcd\xb9\x0f\xcd\x87\xd1\xa9\x1a\xe8\x7b\x37\x6e\xe3\x2d\x80\xfb\x20\x72\x91\xf6\x10\xda\x35\xdd\xf8\x03\x23\x56\x40\x85\x8a\xfe\x0d\x9a\xbc\x62\x6b\xf7\xf3\xd4\x27\x04\xf2\x30\x5f\x93\xf0\x0c\x38\x6a\x73\x67\x9a\x95\xbf\xef\x94\x69\x83\x0a\x6d\xb7\x30\x8f\x77\x7c\x87\x67\x41\xd1\x78\x77\xf1\xb7\xa7\xb5\xe5\xc0\xca\xc9\x62\xd9\x18\x3c\xa9\x2b\x5f\x91\x72\xae\x87\x88\x94\x78\xfa\x73\x7e\x3d\xae\x04\xe6\x95\xab\xbf\x59\xab\xe0\x5c\x02\x66\x9b\xd9\xfd\x02\x05\x73\x28\xf2\x11\x93\x3f\x88\x4c\x2a\x5f\xf4\xa4\x90\xbc\x13\x3b\x60\x98\xf6\xc5\xf7\xe3\x5a\xab\x1c\x84\x08\x26\xfa\xfe\xf1\xe6\xe2\x41\xc2\x8d\xd4\x98\x09\x65\x78\xee\xac\x4d\x92\x63\xe7\x0a\xce\x16\x9f\x47\x6c\x0e\x6e\x68\x1c\x8c\x67\x85\xa5\x55\x3b\x37\x0f\x5f\x43\x48\x85\x2d\xe7\xdf\x73\x0b\x75\xf2\x2c\x29\xe0\x95\xcf\x4d\x75\x35\x72\x4c\x05\xe2\x73\x16\xd0\xb4\x4b\x82\x8b\xd6\x2b\x94\x3c\x42\x85\x60\x89\xbd\x0b\x66\xec\x85\xa0\x8e\xb7\x37\xaf\x76\x0f\xab\x53\xb3\x3d\x37\x56\xad\x1d\xd2\x19\xe7\xcb\xf1\xa2\x28\xd9\x87\xdd\x67\x8c\x77\x56\x5f\x19\x9d\x64\xb1\x49\x78\x60\xd1\x11\x63\xc8\x00\x16\xee\x88\x46\x9c\x06\x3d\x52\x30\xd3\x0d\x53\xf3\x6d\x2f\x9f\x21\x5e\xc8\xe7\x25\x42\x16\x79\x2e\x58\x53\x6a\xb4\xf2\x23\xc8\x12\xc3\x98\xa4\x2d\xc0\x7b\xb5\xc8\x7c\xaa\xbc\x33\x21\xb4\xaa\x2b\x22\x9c\xf6\xaa\xdc\x5a\x44\x4c\xbe\xfd\xd6\x09\x1d\x77\x35\x5a\x5a\xf3\xad\x49\xd5\xa1\x8a\x5a\xb1\x35\x11\x58\x6c\x5d\x97\x24\x34\xa5\x12\xb1\xf4\xa8\x60\xb0\x9c\x43\xf6\x20\xa3\x26\x17\x7d\xdc\x5b\x17\xe3\xb7\xbf\x0a\xa0\x65\x8a\x4d\x23\xf5\x6d\x0a\x9a\x49\x08\x90\x66\x55\x3c\xc8\x17\x3e\x05\xf0\x4c\xa1\xd1\x4e\x79\xfe\x96\xef\x0f\x73\xa4\x46\xb3\x2f\x23\xdb\x81\xa8\x55\x5b\x71\xbf\x92\x55\xd5\x7b\xf8\x61\xd5\x76\x3b\xca\xab\x51\x49\xbd\x73\x3f\x61\xfb\x60\x94\xf0\x15\x43\x6c\xe9\x1a\x1e\x2e\x31\xfe\x8c\x8b\xd7\x91\x04\x84\xf8\x0b\x10\x9d\x2e\x3e\xed\xd8\x3b\xec\x94\x5b\x99\xf3\x7f\xef\x8b\x65\x73\xea\x36\x60\x9e\x17\xf2\x1a\x41\x7f\x79\x76\xb0\xf0\x7a\xa4\x14\xb4\xd3\xf0\x52\x99\x96\x95\x09\x8f\x81\x4e\x53\x30\xa0\x95\x38\xe0\x5a\xa5\xea\xc8\x8b\xc1\xc5\xb7\x16\x0d\x9c\x38\x1a\xb7\xa4\x4e\x4c\xaa\x3f\x8a\x98\x5b\x45\xe8\x5f\xa5\xc8\xb6\xf4\xff\xab\xe6\xbf\x01\x00\x00\xff\xff\x28\x96\xae\x83\x8b\x06\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt":   test_certsCaCrt,
	"test_certs/ca.key":   test_certsCaKey,
	"test_certs/node.crt": test_certsNodeCrt,
	"test_certs/node.key": test_certsNodeKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca.crt":   {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":   {test_certsCaKey, map[string]*bintree{}},
		"node.crt": {test_certsNodeCrt, map[string]*bintree{}},
		"node.key": {test_certsNodeKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
